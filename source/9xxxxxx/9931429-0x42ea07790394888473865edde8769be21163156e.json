{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract SecretaryRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event SecretaryAdded(address indexed account);\r\n    event SecretaryRemoved(address indexed account);\r\n\r\n    Roles.Role private _secretaries;\r\n\r\n    modifier onlySecretary() {\r\n        require(isSecretary(_msgSender()), \"SecretaryRole: caller does not have the Secretary role\");\r\n        _;\r\n    }\r\n    \r\n    function isSecretary(address account) public view returns (bool) {\r\n        return _secretaries.has(account);\r\n    }\r\n\r\n    function addSecretary(address account) public onlySecretary {\r\n        _addSecretary(account);\r\n    }\r\n\r\n    function renounceSecretary() public {\r\n        _removeSecretary(_msgSender());\r\n    }\r\n\r\n    function _addSecretary(address account) internal {\r\n        _secretaries.add(account);\r\n        emit SecretaryAdded(account);\r\n    }\r\n\r\n    function _removeSecretary(address account) internal {\r\n        _secretaries.remove(account);\r\n        emit SecretaryRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IToken { // brief ERC-20 interface\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract MemberDripDrop is SecretaryRole {\r\n    using SafeMath for uint256;\r\n    \r\n    /***************\r\n    INTERNAL DETAILS\r\n    ***************/\r\n    uint256 public ethDrip;\r\n    uint256 public tokenDrip;\r\n    IToken public dripToken;\r\n    address payable[] members;\r\n    string public message;\r\n    \r\n    mapping(address => Member) public memberList;\r\n    \r\n    struct Member {\r\n        uint256 memberIndex;\r\n        bool exists;\r\n    }\r\n\r\n    // ******\r\n    // EVENTS\r\n    // ******\r\n    event DripTokenUpdated(address indexed updatedDripToken);\r\n    event TokenDripUpdated(uint256 indexed updatedTokenDrip);\r\n    event ETHDripUpdated(uint256 indexed updatedETHDrip);\r\n    event MemberAdded(address indexed addedMember);\r\n    event MemberRemoved(address indexed removedMember);\r\n    event MessageUpdated(string indexed updatedMessage);\r\n    event SecretaryUpdated(address indexed updatedSecretary);\r\n    \r\n    function() external payable { } // contract receives ETH\r\n\r\n    constructor(\r\n        uint256 _ethDrip, \r\n        uint256 _tokenDrip,  \r\n        address dripTokenAddress, \r\n        address payable[] memory _members,\r\n        string memory _message) payable public { // initializes contract\r\n        for (uint256 i = 0; i < _members.length; i++) {\r\n            require(_members[i] != address(0), \"member address cannot be 0\");\r\n            memberList[_members[i]].memberIndex = members.push(_members[i]).sub(1);\r\n            memberList[_members[i]].exists = true;\r\n        }\r\n        \r\n        ethDrip = _ethDrip;\r\n        tokenDrip = _tokenDrip;\r\n        dripToken = IToken(dripTokenAddress);\r\n        message = _message;\r\n        \r\n        _addSecretary(members[0]); // first address in member array is initial secretary  \r\n    }\r\n    \r\n    /************************\r\n    DRIP/DROP TOKEN FUNCTIONS\r\n    ************************/\r\n    function depositDripTKN() public { // deposit msg.sender drip token in approved amount sufficient for full member drip \r\n        dripToken.transferFrom(msg.sender, address(this), tokenDrip.mul(members.length));\r\n    }\r\n    \r\n    function dripTKN() public onlySecretary { // transfer deposited drip token to members per drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            dripToken.transfer(members[i], tokenDrip);\r\n        }\r\n    }\r\n    \r\n    function customDripTKN(uint256[] memory drip, address dripTokenAddress) public onlySecretary { // transfer deposited token to members per index drip amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken token = IToken(dripTokenAddress);\r\n            token.transfer(members[i], drip[i]);\r\n        }\r\n    }\r\n    \r\n    function dropTKN(uint256 drop, address dropTokenAddress) public { // transfer msg.sender token to members per approved drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop.div(members.length));\r\n        }\r\n    }\r\n    \r\n    function customDropTKN(uint256[] memory drop, address dropTokenAddress) public { // transfer msg.sender token to members per approved index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop[i]);\r\n        }\r\n    }\r\n    \r\n    /**********************\r\n    DRIP/DROP ETH FUNCTIONS\r\n    **********************/\r\n    function depositDripETH() public payable { // deposit ETH in amount sufficient for full member drip\r\n        require(msg.value == ethDrip.mul(members.length), \"msg.value not sufficient for drip\");\r\n    }\r\n    \r\n    function dripETH() public onlySecretary { // transfer deposited ETH to members per stored drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(ethDrip);\r\n        }\r\n    }\r\n    \r\n    function customDripETH(uint256[] memory drip) payable public onlySecretary { // transfer deposited ETH to members per index drip amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drip[i]);\r\n        }\r\n    }\r\n\r\n    function dropETH() payable public { // transfer msg.sender ETH to members per attached drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(msg.value.div(members.length));\r\n        }\r\n    }\r\n    \r\n    function customDropETH(uint256[] memory drop) payable public { // transfer msg.sender ETH to members per index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            require(msg.value == drop[i], \"msg.value not sufficient for drop\");\r\n            members[i].transfer(drop[i]);\r\n        }\r\n    }\r\n    \r\n    /*******************\r\n    MANAGEMENT FUNCTIONS\r\n    *******************/\r\n    // ******************\r\n    // DRIP/DROP REGISTRY\r\n    // ******************\r\n    function addMember(address payable addedMember) public onlySecretary { \r\n        require(memberList[addedMember].exists != true, \"member already exists\");\r\n        memberList[addedMember].memberIndex = members.push(addedMember).sub(1);\r\n        memberList[addedMember].exists = true;\r\n        emit MemberAdded(addedMember);\r\n    }\r\n\r\n    function removeMember(address removedMember) public onlySecretary {\r\n        require(memberList[removedMember].exists == true, \"no such member to remove\");\r\n        uint256 memberToDelete = memberList[removedMember].memberIndex;\r\n        address payable keyToMove = members[members.length.sub(1)];\r\n        members[memberToDelete] = keyToMove;\r\n        memberList[keyToMove].memberIndex = memberToDelete;\r\n        memberList[removedMember].exists = false;\r\n        members.length--;\r\n        emit MemberRemoved(removedMember);\r\n    }\r\n    \r\n    function updateMessage(string memory updatedMessage) public onlySecretary {\r\n        message = updatedMessage;\r\n        emit MessageUpdated(updatedMessage);\r\n    }\r\n\r\n    // ************\r\n    // DRIP DETAILS\r\n    // ************\r\n    function updateETHDrip(uint256 updatedETHDrip) public onlySecretary {\r\n        ethDrip = updatedETHDrip;\r\n        emit ETHDripUpdated(updatedETHDrip);\r\n    }\r\n    \r\n    function updateDripToken(address updatedDripToken) public onlySecretary {\r\n        dripToken = IToken(updatedDripToken);\r\n        emit DripTokenUpdated(updatedDripToken);\r\n    }\r\n    \r\n    function updateTokenDrip(uint256 updatedTokenDrip) public onlySecretary {\r\n        tokenDrip = updatedTokenDrip;\r\n        emit TokenDripUpdated(updatedTokenDrip);\r\n    }\r\n    \r\n    /***************\r\n    GETTER FUNCTIONS\r\n    ***************/\r\n    // ****\r\n    // DRIP\r\n    // ****\r\n    function ETHBalance() public view returns (uint256) { // get balance of ETH in contract\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function TokenBalance() public view returns (uint256) { // get balance of drip token in contract\r\n        return dripToken.balanceOf(address(this));\r\n    }\r\n\r\n    // ******\r\n    // MEMBER\r\n    // ******\r\n    function Membership() public view returns (address payable[] memory) {\r\n        return members;\r\n    }\r\n\r\n    function MemberCount() public view returns(uint256 memberCount) {\r\n        return members.length;\r\n    }\r\n\r\n    function isMember(address memberAddress) public view returns (bool memberExists) {\r\n        if(members.length == 0) return false;\r\n        return (members[memberList[memberAddress].memberIndex] == memberAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDrip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dripTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"DripTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedETHDrip\",\"type\":\"uint256\"}],\"name\":\"ETHDripUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"updatedMessage\",\"type\":\"string\"}],\"name\":\"MessageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SecretaryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SecretaryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedSecretary\",\"type\":\"address\"}],\"name\":\"SecretaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"TokenDripUpdated\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Membership\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSecretary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drip\",\"type\":\"uint256[]\"}],\"name\":\"customDripETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drip\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"dripTokenAddress\",\"type\":\"address\"}],\"name\":\"customDripTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"}],\"name\":\"customDropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"customDropTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositDripETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositDripTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"dropTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberExists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSecretary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSecretary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"updateDripToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedETHDrip\",\"type\":\"uint256\"}],\"name\":\"updateETHDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"updatedMessage\",\"type\":\"string\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"updateTokenDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MemberDripDrop","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000040000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a20000000000000000000000000cc4dc8e92a6e30b6f5f6e65156b121d9f83ca18f000000000000000000000000f290f3d843826d00f8176182fd76550535f6dbb4000000000000000000000000756ce9c56b02f05b5faffafc707b552bedce83ee00000000000000000000000000000000000000000000000000000000000000144f70656e45737175697265204472697044726f70000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://021306de57eb7ec60850e286ac77e4f301c5a7c96f8684c46f848aa38395881c"}]}