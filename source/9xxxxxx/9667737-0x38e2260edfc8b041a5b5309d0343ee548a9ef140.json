{"status":"1","message":"OK","result":[{"SourceCode":"/**************\r\n\r\n * Copyright Art Blocks LLC 2020. www.artblocks.io.\r\n *************/\r\n\r\n\r\n\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/drafts/Counters.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: contracts/Strings.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\nlibrary Strings {\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < _ba.length; i++) {\r\n            babcde[k++] = _ba[i];\r\n        }\r\n        for (i = 0; i < _bb.length; i++) {\r\n            babcde[k++] = _bb[i];\r\n        }\r\n        for (i = 0; i < _bc.length; i++) {\r\n            babcde[k++] = _bc[i];\r\n        }\r\n        for (i = 0; i < _bd.length; i++) {\r\n            babcde[k++] = _bd[i];\r\n        }\r\n        for (i = 0; i < _be.length; i++) {\r\n            babcde[k++] = _be[i];\r\n        }\r\n        return string(babcde);\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ArtPrintRegistryInterface {\r\n\r\n    function mint(uint256 _artId, string calldata _nfc) external returns (uint256 _tokenId);\r\n    function pricePerPrintIntlShipInWei() external view returns (uint256 _pricePerPrintIntlShipInWei);\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface SUPRInterface {\r\n    \r\n    function ownerOf(uint256 _artId) external view returns (address); \r\n}\r\n\r\n\r\n\r\n// File: contracts/SUPRPrintRegistryMinter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract SUPRPrintRegistryMinter  {\r\n    using SafeMath for uint256;\r\n\r\n    ///////////////\r\n    // Variables //\r\n    ///////////////\r\n\r\n\r\n    ArtPrintRegistryInterface public aprContract;\r\n    SUPRInterface public suprContract;\r\n  \r\n\r\n    address public owner1;\r\n    address payable public printerAddress;\r\n\r\n    mapping(uint256 => uint256) public artIdToCreditsToSpend;\r\n    mapping(address => uint256) public addressToCreditsToSpend;\r\n    mapping(address => uint256) public managerAddressToCreditsToGive;\r\n\r\n\r\n\r\n\r\n\r\n    /////////////////\r\n    // Constructor //\r\n    /////////////////\r\n\r\n    constructor(address payable _printerAddress, address _registryContract, address _artContract) public {\r\n\r\n        aprContract = ArtPrintRegistryInterface(_registryContract);\r\n        suprContract = SUPRInterface(_artContract);\r\n      \r\n        owner1 = msg.sender;\r\n        printerAddress = _printerAddress;\r\n\r\n    }\r\n\r\n    //////////////////////////////\r\n    // Minting Function         //\r\n    //////////////////////////////\r\n\r\n    function mint(uint256 _artId, string memory _contactMethodAndType) public returns (uint256 _tokenId) {\r\n        uint256 artCreditBalance = artIdToCreditsToSpend[_artId];\r\n        uint256 addressCreditBalance = addressToCreditsToSpend[msg.sender];\r\n        require(msg.sender == suprContract.ownerOf(_artId), \"You must own artwork.\");\r\n        require(artCreditBalance>0 || addressCreditBalance >0 , \"Must have a credit!\");\r\n        uint256 mintedToken = aprContract.mint(_artId, _contactMethodAndType);\r\n        if (artCreditBalance >0) {\r\n        artIdToCreditsToSpend[_artId] --;\r\n        } else {\r\n        addressToCreditsToSpend[msg.sender] --;\r\n        }\r\n        return mintedToken;\r\n    }\r\n\r\n    //////////////////////////////\r\n    // Manager Function         //\r\n    //////////////////////////////\r\n\r\n    function giveArtCredit(uint256 _artId) public payable {\r\n        uint creditsToGive = managerAddressToCreditsToGive[msg.sender];\r\n        require(creditsToGive>0 || msg.sender==owner1 || msg.sender==printerAddress || msg.value==aprContract.pricePerPrintIntlShipInWei(), \"You must have permission!\");\r\n        artIdToCreditsToSpend[_artId] ++;\r\n        \r\n        if (msg.value>0) {\r\n                printerAddress.transfer(msg.value);\r\n            } else {\r\n                if (msg.sender==owner1 || msg.sender==printerAddress){\r\n                    return;\r\n                } else {\r\n                    managerAddressToCreditsToGive[msg.sender] --;\r\n                }\r\n            }\r\n    }\r\n\r\n    function giveAddressCredit(address _recipient) public payable {\r\n        uint creditsToGive = managerAddressToCreditsToGive[msg.sender];\r\n        require(creditsToGive>0 || msg.sender==owner1 || msg.sender==printerAddress || msg.value==aprContract.pricePerPrintIntlShipInWei(), \"You must have permission!\");\r\n        addressToCreditsToSpend[_recipient] ++;\r\n       \r\n        if (msg.value>0) {\r\n                printerAddress.transfer(msg.value);\r\n            } else {\r\n                if (msg.sender==owner1 || msg.sender==printerAddress){\r\n                    return;\r\n                } else {\r\n                    managerAddressToCreditsToGive[msg.sender] --;\r\n                }\r\n            }\r\n    }\r\n    \r\n    \r\n    function removeArtCredit(uint256 _artId) public {\r\n        uint creditsToSpend = artIdToCreditsToSpend[_artId];\r\n        require(creditsToSpend>0, \"There must be a credit to remove!\");\r\n        require(msg.sender==owner1 || msg.sender==printerAddress , \"You must have permission!\");\r\n        artIdToCreditsToSpend[_artId] --;\r\n    }\r\n    \r\n    function removeAddressCredit(address _recipient) public {\r\n        uint creditsToSpend = addressToCreditsToSpend[_recipient];\r\n        require(creditsToSpend>0, \"There must be a credit to remove!\");\r\n        require(msg.sender==owner1 || msg.sender==printerAddress , \"You must have permission!\");\r\n        addressToCreditsToSpend[_recipient] --;\r\n    }\r\n\r\n    //////////////////////////////\r\n    // Owner Functions          //\r\n    //////////////////////////////\r\n    \r\n    function updatePrinterAddress(address payable _printerAddress) public returns (bool) {\r\n        require(msg.sender == owner1 || msg.sender == printerAddress);\r\n        printerAddress = _printerAddress;\r\n        return true;\r\n    }\r\n\r\n    function setManagerCredits(address _manager, uint _credits) public returns (bool) {\r\n        require(msg.sender == owner1 || msg.sender == printerAddress);\r\n        managerAddressToCreditsToGive[_manager]=_credits;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"aprContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_credits\",\"type\":\"uint256\"}],\"name\":\"setManagerCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suprContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artId\",\"type\":\"uint256\"}],\"name\":\"giveArtCredit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToCreditsToSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artId\",\"type\":\"uint256\"},{\"name\":\"_contactMethodAndType\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerAddressToCreditsToGive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeAddressCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artId\",\"type\":\"uint256\"}],\"name\":\"removeArtCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_printerAddress\",\"type\":\"address\"}],\"name\":\"updatePrinterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"giveAddressCredit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"printerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artIdToCreditsToSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_printerAddress\",\"type\":\"address\"},{\"name\":\"_registryContract\",\"type\":\"address\"},{\"name\":\"_artContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SUPRPrintRegistryMinter","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089447f2ca722481d1399ae08b4d7e9471883f6c80000000000000000000000008310b27838ef90c88da223b25b631248157cb8c600000000000000000000000041a322b28d0ff354040e2cbc676f0320d8c8850d","Library":"","LicenseType":"None","SwarmSource":"bzzr://92ae962e14baa54557805e5c0835b2053285e2988cdf79ec5fbc46ceb5e6cbd9"}]}