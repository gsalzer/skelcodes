{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract StibcoMultiSigWallet {\r\n\r\n    address public newownerinsteadofoldowner;\r\n    address public oldownertoreplace;\r\n    address public sendto;\r\n    address public d;\r\n    address public contractaddress;\r\n    address public tokensaddress;\r\n    uint public votestoreplace;\r\n    uint public votestosend;\r\n    uint public initiatereplacevote;\r\n    uint public initiatesendtoevote;\r\n    uint public amounttosend;\r\n    uint public areownerscreated;\r\n    uint public totalowners;\r\n    uint public isethsent;\r\n    uint public istokensent;\r\n    uint public sendwithhex;\r\n    uint public theFunction;\r\n    uint public depositype;\r\n    uint public a;\r\n    uint public b;\r\n    uint public c;\r\n    uint public e;\r\n    uint public f;\r\n    uint public g;\r\n\r\n\r\n\r\n    mapping (address => uint) public ownerbyvotetoreplace;\r\n    mapping (address => uint) public ownerbyvotetosend;\r\n    mapping (address =>  address) public ownerbyaddress;\r\n    mapping (uint => address) public ownerbyid;\r\n\r\n\r\n\r\n     modifier ownersrestricted() {\r\n        require(ownerbyaddress[msg.sender] == msg.sender);\r\n        _;\r\n     }\r\n\r\n    //allows other contracts to send to this contract\r\n    function () payable public {\r\n    }\r\n\r\n    function CreateOwners(address zinititalowner,address zownertwo, address zownerthree,address zownerfour,address zownerfive) public payable {\r\n       require(areownerscreated == 0);\r\n       areownerscreated = 1;\r\n       totalowners = 5;\r\n\r\n\r\n       ownerbyaddress[zinititalowner] = zinititalowner;\r\n       ownerbyaddress[zownertwo] = zownertwo;\r\n       ownerbyaddress[zownerthree] = zownerthree;\r\n       ownerbyaddress[zownerfour] = zownerfour;\r\n       ownerbyaddress[zownerfive] = zownerfive;\r\n\r\n       ownerbyid[1] = zinititalowner;\r\n       ownerbyid[2] = zownertwo;\r\n       ownerbyid[3] = zownerthree;\r\n       ownerbyid[4] = zownerfour;\r\n       ownerbyid[5] = zownerfive;\r\n\r\n       contractaddress = address(this);\r\n    }\r\n\r\n     function initiateReplaceOwner(address theNewOwner,address theOldOwner) ownersrestricted public payable {\r\n         require(theOldOwner != msg.sender && theNewOwner != msg.sender && totalowners == 5 && initiatereplacevote == 0 && initiatesendtoevote == 0);\r\n         newownerinsteadofoldowner = theNewOwner;\r\n         oldownertoreplace = theOldOwner;\r\n         initiatereplacevote = 1;\r\n         ownerbyvotetoreplace[msg.sender] = 1;\r\n         votestoreplace = votestoreplace + 1;\r\n     }\r\n\r\n     function VoteToReplaceOwner() ownersrestricted public payable {\r\n         require(initiatereplacevote == 1 && totalowners == 5 && oldownertoreplace != msg.sender && ownerbyvotetoreplace[msg.sender] == 0 && initiatesendtoevote == 0);\r\n         ownerbyvotetoreplace[msg.sender] = 1;\r\n         votestoreplace = votestoreplace + 1;\r\n\r\n           if(votestoreplace == 3){\r\n\r\n              delete ownerbyvotetoreplace[oldownertoreplace];\r\n              delete ownerbyvotetosend[oldownertoreplace];\r\n              delete ownerbyaddress[oldownertoreplace];\r\n\r\n\r\n              ownerbyvotetosend[newownerinsteadofoldowner] = 0;\r\n              ownerbyvotetoreplace[newownerinsteadofoldowner] = 0;\r\n\r\n             if(ownerbyid[1] == oldownertoreplace) {\r\n                ownerbyid[1] = newownerinsteadofoldowner;\r\n             } else if (ownerbyid[2] == oldownertoreplace) {\r\n                ownerbyid[2] = newownerinsteadofoldowner;\r\n             } else if (ownerbyid[3] == oldownertoreplace) {\r\n                ownerbyid[3] = newownerinsteadofoldowner;\r\n             } else if (ownerbyid[4] == oldownertoreplace) {\r\n                ownerbyid[4] = newownerinsteadofoldowner;\r\n             } else if (ownerbyid[5] == oldownertoreplace) {\r\n                ownerbyid[5] = newownerinsteadofoldowner;\r\n             }\r\n\r\n              ownerbyvotetoreplace[ownerbyid[1]] = 0;\r\n              ownerbyvotetoreplace[ownerbyid[2]] = 0;\r\n              ownerbyvotetoreplace[ownerbyid[3]] = 0;\r\n              ownerbyvotetoreplace[ownerbyid[4]] = 0;\r\n              ownerbyvotetoreplace[ownerbyid[5]] = 0;\r\n              votestoreplace = 0;\r\n              initiatereplacevote = 0;\r\n\r\n\r\n           }\r\n\r\n\r\n     }\r\n            function initiateSendTransaction(address SendTo,uint ztheFunction,uint amount ,uint zsendwithhex,address tokensaddr,uint dtype) ownersrestricted public payable {\r\n                require(totalowners == 5 && initiatereplacevote == 0 && initiatesendtoevote == 0 && address(this).balance >= amount );\r\n\r\n                if(zsendwithhex == 1){\r\n                  theFunction = ztheFunction;\r\n                  sendwithhex = zsendwithhex;\r\n                }\r\n\r\n                \r\n                sendto = SendTo;\r\n                amounttosend = amount;\r\n                tokensaddress = tokensaddr;\r\n                depositype = dtype;\r\n                votestosend = 1;\r\n                initiatesendtoevote = 1;\r\n                ownerbyvotetosend[msg.sender] = 1;\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            function setCallContractValues(uint thea,uint theb,uint thec,address thed,uint thee,uint thef,uint theg) ownersrestricted public payable{\r\n                a = thea;\r\n                b = theb;\r\n                c = thec;\r\n                d = thed;\r\n                e = thee;\r\n                f = thef;\r\n                g = theg;\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            function VoteToSend() ownersrestricted public payable {\r\n                require(initiatereplacevote == 0 && totalowners == 5 && initiatesendtoevote == 1 && ownerbyvotetosend[msg.sender] == 0);\r\n                  votestosend = votestosend + 1;\r\n                  ownerbyvotetosend[msg.sender] = 1;\r\n\r\n                  if(votestosend == 3){\r\n\r\n                     //here send eth with hex test (dangerous don't use on contract unknown or not verified)\r\n                      if(sendwithhex == 1){\r\n\r\n\r\n\r\n                          sendto.transfer(amounttosend);\r\n\r\n                          if(theFunction == 1) {\r\n                           //create stibco on trade contract ok\r\n                            if(!sendto.call(abi.encodeWithSignature(\"CreateStibco()\"))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 2) {\r\n                           //set settings trade contract ok\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StibcoFee(uint256,uint256,uint256,address,uint256,uint256,uint256)\",a,b,c,d,e,f,g))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 3) {\r\n                           //set settings loans contract ok\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StibcoFee(uint256,uint256,uint256,address,uint256,uint256)\",a,b,c,d,e,f))){\r\n                                revert();\r\n                            }\r\n\r\n\r\n                          } else if (theFunction == 4) {\r\n                           //collect fees contract\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StiboCollectFee()\"))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 5) {\r\n                           //trade dispute select seller as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeSellerWins(uint256)\",a))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 6) {\r\n                           //trade dispute select buyer as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeBuyerWins(uint256)\",a))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 7) {\r\n                           //loans dispute select lender as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeLenderWins(uint256)\",a))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 8) {\r\n                           //loans dispute select borrower as winner\r\n                             if(!sendto.call(abi.encodeWithSignature(\"DisputeBorrowerWins(uint256)\",a))){\r\n                                revert();\r\n                             }\r\n\r\n                          } else if (theFunction == 9) {\r\n                             //tokens trade set settings\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StibcoFee(uint256,address,uint256,uint256,uint256)\",a,d,c,b,e))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 10) {\r\n                            //tokens loans set settings\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StibcoFee(uint256,address,uint256,uint256)\",a,d,c,b))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 11) {\r\n                            //trade tokens dispute select seller as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeSellerWins(uint256,address)\",a,d))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 12) {\r\n                            //trade tokens dispute select buyer as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeBuyerWins(uint256,address)\",a,d))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 13) {\r\n                            //loans tokens dispute select lender as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeLenderWins(address,uint256)\",d,a))){\r\n                                revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 14) {\r\n                            //loans tokens dispute select borrower as winner\r\n                            if(!sendto.call(abi.encodeWithSignature(\"DisputeBorrowerWins(address,uint256)\",d,a))){\r\n                               revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 15) {\r\n                            //add tokens,remove tokens , here will have to delegate\r\n                            if(!sendto.call(abi.encodeWithSignature(\"Delegate(address)\",d))){\r\n                               revert();\r\n                            }\r\n\r\n                          } else if (theFunction == 16) {\r\n                            //set fee for instant swaps\r\n                            if(!sendto.call(abi.encodeWithSignature(\"StibcoFee(uint,uint,uint,address)\",a,b,c,d))){\r\n                               revert();\r\n                            }\r\n\r\n                          }\r\n\r\n\r\n\r\n                      }else{\r\n\r\n                         if(depositype == 1){\r\n\r\n                         sendto.transfer(amounttosend);\r\n                          isethsent = 1;\r\n\r\n                         }else{\r\n                          //here we send tokens out\r\n                           ERC20(tokensaddress).transfer(sendto,amounttosend);\r\n                           istokensent = 1;\r\n                         }\r\n\r\n\r\n\r\n                      }\r\n\r\n                    ownerbyvotetosend[ownerbyid[1]] = 0;\r\n                    ownerbyvotetosend[ownerbyid[2]] = 0;\r\n                    ownerbyvotetosend[ownerbyid[3]] = 0;\r\n                    ownerbyvotetosend[ownerbyid[4]] = 0;\r\n                    ownerbyvotetosend[ownerbyid[5]] = 0;\r\n                    votestosend = 0;\r\n                    initiatesendtoevote = 0;\r\n\r\n                  }\r\n\r\n\r\n            }\r\n\r\n\r\n    function GetFunctionData() public view returns (uint,uint,uint,address,uint,uint,uint) {\r\n        return (\r\n            a,\r\n            b,\r\n            c,\r\n            d,\r\n            e,\r\n            f,\r\n            g\r\n          );\r\n    }\r\n\r\n\r\n\r\n    function GetWalletData() public view returns (address,address,address,address,address,address,uint,uint,uint,address,address,address,uint,uint) {\r\n        return (\r\n            contractaddress,\r\n            ownerbyid[1],\r\n            ownerbyid[2],\r\n            ownerbyid[3],\r\n            ownerbyid[4],\r\n            ownerbyid[5],\r\n            amounttosend,\r\n            votestosend,\r\n            votestoreplace,\r\n            sendto,\r\n            newownerinsteadofoldowner,\r\n            oldownertoreplace,\r\n            sendwithhex,\r\n            theFunction\r\n\r\n          );\r\n    }\r\n    \r\n    function GetWalletDataTwo() public view returns (address,uint,uint) {\r\n    \r\n        return (\r\n            tokensaddress,\r\n            depositype,\r\n            istokensent\r\n          );\r\n        \r\n    }\r\n\r\n    function GetBalance() public view returns (uint){\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n\r\n\r\n    //gets contract tokens balance\r\n    function getTokenBalance(address tokensadd) public  view returns (uint) {\r\n       return ERC20(tokensadd).balanceOf(address(this));\r\n    }\r\n\r\n\r\n//deposit token or eth\r\n    function Deposit(address tokensadd,uint amount,uint deposittype) public payable {\r\n        if(deposittype == 1){\r\n            ERC20(tokensadd).transferFrom(msg.sender,contractaddress,amount);\r\n        }else{\r\n            require(amount == msg.value);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerbyvotetoreplace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalowners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerbyvotetosend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerbyaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"f\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votestoreplace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWalletDataTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"VoteToSend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensadd\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositype\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"b\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetFunctionData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"VoteToReplaceOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"areownerscreated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiatereplacevote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldownertoreplace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amounttosend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"SendTo\",\"type\":\"address\"},{\"name\":\"ztheFunction\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"zsendwithhex\",\"type\":\"uint256\"},{\"name\":\"tokensaddr\",\"type\":\"address\"},{\"name\":\"dtype\",\"type\":\"uint256\"}],\"name\":\"initiateSendTransaction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votestosend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newownerinsteadofoldowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"d\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zinititalowner\",\"type\":\"address\"},{\"name\":\"zownertwo\",\"type\":\"address\"},{\"name\":\"zownerthree\",\"type\":\"address\"},{\"name\":\"zownerfour\",\"type\":\"address\"},{\"name\":\"zownerfive\",\"type\":\"address\"}],\"name\":\"CreateOwners\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensadd\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"deposittype\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"thea\",\"type\":\"uint256\"},{\"name\":\"theb\",\"type\":\"uint256\"},{\"name\":\"thec\",\"type\":\"uint256\"},{\"name\":\"thed\",\"type\":\"address\"},{\"name\":\"thee\",\"type\":\"uint256\"},{\"name\":\"thef\",\"type\":\"uint256\"},{\"name\":\"theg\",\"type\":\"uint256\"}],\"name\":\"setCallContractValues\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWalletData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"istokensent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"theNewOwner\",\"type\":\"address\"},{\"name\":\"theOldOwner\",\"type\":\"address\"}],\"name\":\"initiateReplaceOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isethsent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendwithhex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendto\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiatesendtoevote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerbyid\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"e\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"StibcoMultiSigWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3143a49de618d4e324e41d9f3aa1c1c1c5faad331c14c7ab23008aa684e2b6f4"}]}