{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\n\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract MultiTransfer is IERC721 {\n\n    function transferBatch(\n        address from,\n        address to,\n        uint256 start,\n        uint256 end\n    )\n        public\n    {\n        for (uint i = start; i < end; i++) {\n            transferFrom(from, to, i);\n        }\n    }\n\n    function transferAllFrom(\n        address from,\n        address to,\n        uint256[] memory tokenIDs\n    )\n        public\n    {\n        for (uint i = 0; i < tokenIDs.length; i++) {\n            transferFrom(from, to, tokenIDs[i]);\n        }\n    }\n\n    function safeTransferBatch(\n        address from,\n        address to,\n        uint256 start,\n        uint256 end\n    )\n        public\n    {\n        for (uint i = start; i < end; i++) {\n            safeTransferFrom(from, to, i);\n        }\n    }\n\n    function safeTransferAllFrom(\n        address from,\n        address to,\n        uint256[] memory tokenIDs\n    )\n        public\n    {\n        for (uint i = 0; i < tokenIDs.length; i++) {\n            safeTransferFrom(from, to, tokenIDs[i]);\n        }\n    }\n\n}\n\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract ERC721 is Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][to] = approved;\n        emit ApprovalForAll(_msgSender(), to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n        _transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID.\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\ncontract BatchToken is ERC721Metadata {\n\n    using SafeMath for uint256;\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    mapping(uint48 => address) public userIDToAddress;\n    mapping(address => uint48) public addressToUserID;\n\n    uint256 public batchSize;\n    uint256 public nextBatch;\n    uint256 public tokenCount;\n\n    uint48[] internal ownerIDs;\n    uint48[] internal approvedIDs;\n\n    mapping(uint => Batch) public batches;\n\n    uint48 internal userCount = 1;\n\n    mapping(address => uint) internal _balances;\n\n    uint256 internal constant MAX_LENGTH = uint(2**256 - 1);\n\n    constructor(\n        uint256 _batchSize,\n        string memory name,\n        string memory symbol\n    )\n        public\n        ERC721Metadata(name, symbol)\n    {\n        batchSize = _batchSize;\n        ownerIDs.length = MAX_LENGTH;\n        approvedIDs.length = MAX_LENGTH;\n    }\n\n    function _getUserID(address to)\n        internal\n        returns (uint48)\n    {\n        if (to == address(0)) {\n            return 0;\n        }\n        uint48 uID = addressToUserID[to];\n        if (uID == 0) {\n            require(\n                userCount + 1 > userCount,\n                \"BT: must not overflow\"\n            );\n            uID = userCount++;\n            userIDToAddress[uID] = to;\n            addressToUserID[to] = uID;\n        }\n        return uID;\n    }\n\n    function _batchMint(\n        address to,\n        uint16 size\n    )\n        internal\n        returns (uint)\n    {\n        require(\n            to != address(0),\n            \"BT: must not be null\"\n        );\n\n        require(\n            size > 0 && size <= batchSize,\n            \"BT: size must be within limits\"\n        );\n\n        uint256 start = nextBatch;\n        uint48 uID = _getUserID(to);\n        batches[start] = Batch({\n            userID: uID,\n            size: size\n        });\n        uint256 end = start.add(size);\n        for (uint256 i = start; i < end; i++) {\n            emit Transfer(address(0), to, i);\n        }\n        nextBatch = nextBatch.add(batchSize);\n        _balances[to] = _balances[to].add(size);\n        tokenCount = tokenCount.add(size);\n        return start;\n    }\n\n    function getBatchStart(uint256 tokenId) public view returns (uint) {\n        return tokenId.div(batchSize).mul(batchSize);\n    }\n\n    function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {\n        return (batches[index].userID, batches[index].size);\n    }\n\n    // Overridden ERC721 functions\n    // @OZ: please stop making variables/functions private\n\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        uint48 uID = ownerIDs[tokenId];\n        if (uID == 0) {\n            uint256 start = getBatchStart(tokenId);\n            Batch memory b = batches[start];\n\n            require(\n                start + b.size > tokenId,\n                \"BT: token does not exist\"\n            );\n\n            uID = b.userID;\n            require(\n                uID != 0,\n                \"BT: bad batch owner\"\n            );\n        }\n        return userIDToAddress[uID];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n    {\n        require(\n            ownerOf(tokenId) == from,\n            \"BT: transfer of token that is not own\"\n        );\n\n        require(\n            to != address(0),\n            \"BT: transfer to the zero address\"\n        );\n\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"BT: caller is not owner nor approved\"\n        );\n\n        _cancelApproval(tokenId);\n        _balances[from] = _balances[from].sub(1);\n        _balances[to] = _balances[to].add(1);\n        ownerIDs[tokenId] = _getUserID(to);\n        emit Transfer(from, to, tokenId);\n    }\n\n    function burn(uint256 tokenId) public {\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"BT: caller is not owner nor approved\"\n        );\n\n        _cancelApproval(tokenId);\n        address owner = ownerOf(tokenId);\n        _balances[owner] = _balances[owner].sub(1);\n        ownerIDs[tokenId] = 0;\n        tokenCount = tokenCount.sub(1);\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    function _cancelApproval(uint256 tokenId) internal {\n        if (approvedIDs[tokenId] != 0) {\n            approvedIDs[tokenId] = 0;\n        }\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n\n        require(\n            to != owner,\n            \"BT: approval to current owner\"\n        );\n\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"BT: approve caller is not owner nor approved for all\"\n        );\n\n        approvedIDs[tokenId] = _getUserID(to);\n        emit Approval(owner, to, tokenId);\n    }\n\n    function _exists(uint256 tokenId)\n        internal\n        view\n        returns (bool)\n    {\n        return ownerOf(tokenId) != address(0);\n    }\n\n    function getApproved(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"BT: approved query for nonexistent token\"\n        );\n\n        return userIDToAddress[approvedIDs[tokenId]];\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint)\n    {\n        return tokenCount;\n    }\n\n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return _balances[_owner];\n    }\n\n}\n\nlibrary String {\n\n    /**\n     * @dev Converts a `uint256` to a `string`.\n     * via OraclizeAPI - MIT licence\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n     */\n    function fromUint(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n\n    bytes constant alphabet = \"0123456789abcdef\";\n\n    function fromAddress(address _addr) internal pure returns(string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory str = new bytes(42);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 20; i++) {\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0F))];\n        }\n        return string(str);\n    }\n\n}\n\ncontract ImmutableToken {\n\n    string public constant baseURI = \"https://api.immutable.com/asset/\";\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        return string(abi.encodePacked(\n            baseURI,\n            String.fromAddress(address(this)),\n            \"/\",\n            String.fromUint(tokenId)\n        ));\n    }\n\n}\n\ncontract InscribableToken {\n\n    mapping(bytes32 => bytes32) public properties;\n\n    event ClassPropertySet(\n        bytes32 indexed key,\n        bytes32 value\n    );\n\n    event TokenPropertySet(\n        uint indexed id,\n        bytes32 indexed key,\n        bytes32 value\n    );\n\n    function _setProperty(\n        uint _id,\n        bytes32 _key,\n        bytes32 _value\n    )\n        internal\n    {\n        properties[getTokenKey(_id, _key)] = _value;\n        emit TokenPropertySet(_id, _key, _value);\n    }\n\n    function getProperty(\n        uint _id,\n        bytes32 _key\n    )\n        public\n        view\n        returns (bytes32 _value)\n    {\n        return properties[getTokenKey(_id, _key)];\n    }\n\n    function _setClassProperty(\n        bytes32 _key,\n        bytes32 _value\n    )\n        internal\n    {\n        emit ClassPropertySet(_key, _value);\n        properties[getClassKey(_key)] = _value;\n    }\n\n    function getTokenKey(\n        uint _tokenId,\n        bytes32 _key\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        // one prefix to prevent collisions\n        return keccak256(abi.encodePacked(uint(1), _tokenId, _key));\n    }\n\n    function getClassKey(bytes32 _key)\n        public\n        pure\n        returns (bytes32)\n    {\n        // zero prefix to prevent collisions\n        return keccak256(abi.encodePacked(uint(0), _key));\n    }\n\n    function getClassProperty(bytes32 _key)\n        public\n        view\n        returns (bytes32)\n    {\n        return properties[getClassKey(_key)];\n    }\n\n}\n\ncontract ICards is IERC721 {\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    function batches(uint index) public view returns (uint48 userID, uint16 size);\n\n    function userIDToAddress(uint48 id) public view returns (address);\n\n    function getDetails(\n        uint tokenId\n    )\n        public\n        view\n        returns (\n        uint16 proto,\n        uint8 quality\n    );\n\n    function setQuality(\n        uint tokenId,\n        uint8 quality\n    ) public;\n\n    function mintCards(\n        address to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n        returns (uint);\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n        returns (uint);\n\n    function burn(uint tokenId) public;\n\n    function batchSize()\n        public\n        view\n        returns (uint);\n}\n\nlibrary StorageWrite {\n\n    using SafeMath for uint256;\n\n    function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {\n        uint slot = _getArraySlot(_dest, _index);\n        assembly { result := sload(slot) }\n    }\n\n    function _getArraySlot(uint _dest, uint _index) internal pure returns (uint slot) {\n        assembly {\n            let free := mload(0x40)\n            mstore(free, _dest)\n            slot := add(keccak256(free, 32), _index)\n        }\n    }\n\n    function _setArraySlot(uint _dest, uint _index, uint _value) internal {\n        uint slot = _getArraySlot(_dest, _index);\n        assembly { sstore(slot, _value) }\n    }\n\n    function _loadSlots(\n        uint _slot,\n        uint _offset,\n        uint _perSlot,\n        uint _length\n    )\n        internal\n        view\n        returns (uint[] memory slots)\n    {\n        uint slotCount = _slotCount(_offset, _perSlot, _length);\n        slots = new uint[](slotCount);\n        // top and tail the slots\n        uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);\n        slots[0] = _getStorageArraySlot(_slot, firstPos);\n        if (slotCount > 1) {\n            uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);\n            slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);\n        }\n    }\n\n    function _pos(uint items, uint perPage) internal pure returns (uint) {\n        return items / perPage;\n    }\n\n    function _slotCount(uint _offset, uint _perSlot, uint _length) internal pure returns (uint) {\n        uint start = _offset / _perSlot;\n        uint end = (_offset + _length) / _perSlot;\n        return (end - start) + 1;\n    }\n\n    function _saveSlots(uint _slot, uint _offset, uint _size, uint[] memory _slots) internal {\n        uint offset = _offset.div((256/_size));\n        for (uint i = 0; i < _slots.length; i++) {\n            _setArraySlot(_slot, offset + i, _slots[i]);\n        }\n    }\n\n    function _write(uint[] memory _slots, uint _offset, uint _size, uint _index, uint _value) internal pure {\n        uint perSlot = 256 / _size;\n        uint initialOffset = _offset % perSlot;\n        uint slotPosition = (initialOffset + _index) / perSlot;\n        uint withinSlot = ((_index + _offset) % perSlot) * _size;\n        // evil bit shifting magic\n        for (uint q = 0; q < _size; q += 8) {\n            _slots[slotPosition] |= ((_value >> q) & 0xFF) << (withinSlot + q);\n        }\n    }\n\n    function repeatUint16(uint _slot, uint _offset, uint _length, uint16 _item) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 16, _length);\n        for (uint i = 0; i < _length; i++) {\n            _write(slots, _offset, 16, i, _item);\n        }\n        _saveSlots(_slot, _offset, 16, slots);\n    }\n\n    function uint16s(uint _slot, uint _offset, uint16[] memory _items) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 16, _items.length);\n        for (uint i = 0; i < _items.length; i++) {\n            _write(slots, _offset, 16, i, _items[i]);\n        }\n        _saveSlots(_slot, _offset, 16, slots);\n    }\n\n    function uint8s(uint _slot, uint _offset, uint8[] memory _items) internal {\n        uint[] memory slots = _loadSlots(_slot, _offset, 32, _items.length);\n        for (uint i = 0; i < _items.length; i++) {\n            _write(slots, _offset, 8, i, _items[i]);\n        }\n        _saveSlots(_slot, _offset, 8, slots);\n    }\n\n}\n\ncontract Cards is Ownable, MultiTransfer, BatchToken, ImmutableToken, InscribableToken {\n\n    uint16 private constant MAX_UINT16 = 2**16 - 1;\n\n    uint16[] public cardProtos;\n    uint8[] public cardQualities;\n\n    struct Season {\n        uint16 high;\n        uint16 low;\n    }\n\n    struct Proto {\n        bool locked;\n        bool exists;\n        uint8 god;\n        uint8 cardType;\n        uint8 rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    event ProtoUpdated(\n        uint16 indexed id\n    );\n\n    event SeasonStarted(\n        uint16 indexed id,\n        string name,\n        uint16 indexed low,\n        uint16 indexed high\n    );\n\n    event QualityChanged(\n        uint256 indexed tokenId,\n        uint8 quality,\n        address factory\n    );\n\n    event CardsMinted(\n        uint256 indexed start,\n        address to,\n        uint16[] protos,\n        uint8[] qualities\n    );\n\n    // Value of index proto = season\n    uint16[] public protoToSeason;\n\n    address public propertyManager;\n\n    // Array containing all protos\n    Proto[] public protos;\n\n    // Array containing all seasons\n    Season[] public seasons;\n\n    // Map whether a season is tradeable or not\n    mapping(uint256 => bool) public seasonTradable;\n\n    // Map whether a factory has been authorised or not\n    mapping(address => mapping(uint256 => bool)) public factoryApproved;\n\n    // Whether a factory is approved to create a particular mythic\n    mapping(uint16 => mapping(address => bool)) public mythicApproved;\n\n    // Whether a mythic is tradable\n    mapping(uint16 => bool) public mythicTradable;\n\n    // Map whether a mythic exists or not\n    mapping(uint16 => bool) public mythicCreated;\n\n    uint16 public constant MYTHIC_THRESHOLD = 65000;\n\n    constructor(\n        uint256 _batchSize,\n        string memory _name,\n        string memory _symbol\n    )\n        public\n        BatchToken(_batchSize, _name, _symbol)\n    {\n        cardProtos.length = MAX_LENGTH;\n        cardQualities.length = MAX_LENGTH;\n        protoToSeason.length = MAX_LENGTH;\n        protos.length = MAX_LENGTH;\n        propertyManager = msg.sender;\n    }\n\n    /**\n     * @dev Mint a card with an owner, proto and quality.\n     * Can only be called from the proto's season minter(s)\n     *\n     * @param to Address where newly minted card will be sent to\n     * @param _proto Specified proto of new card (caller must be valid factory in season)\n     * @param _quality Specified quality of new card (no validation)\n     */\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        external\n        returns (uint id)\n    {\n        id = _batchMint(to, 1);\n        _validateProto(_proto);\n        cardProtos[id] = _proto;\n        cardQualities[id] = _quality;\n\n        uint16[] memory ps = new uint16[](1);\n        ps[0] = _proto;\n\n        uint8[] memory qs = new uint8[](1);\n        qs[0] = _quality;\n\n        emit CardsMinted(id, to, ps, qs);\n        return id;\n    }\n\n    /**\n     * @dev Mint cards with an owner, proto and quality.\n     * Can only be called from the protos' season minter(s).\n     *\n     *\n     * @param to Address where newly minted card will be sent to\n     * @param _protos Array of specified protos of new cards (caller must be valid factory in season)\n     * @param _qualities Array of specified qualities of new cards (no validation)\n     */\n    function mintCards(\n        address to,\n        uint16[] calldata _protos,\n        uint8[] calldata _qualities\n    )\n        external\n        returns (uint)\n    {\n        require(\n            _protos.length > 0,\n            \"Core: must be some protos\"\n        );\n\n        require(\n            _protos.length == _qualities.length,\n            \"Core: must be the same number of protos/qualities\"\n        );\n\n        uint256 start = _batchMint(to, uint16(_protos.length));\n        _validateAndSaveDetails(start, _protos, _qualities);\n\n        emit CardsMinted(start, to, _protos, _qualities);\n\n        return start;\n    }\n\n    /**\n     * @dev Add a valid factory to a season. Factories are able to mint cards.\n     * Factories cannot mind a card if the season is already tradeable.\n     * Can only be called by owner().\n     * \n     * @param _factory The address of the season's factory\n     * @param _season The season to add the minter to\n     */\n    function addFactory(\n        address _factory,\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            seasons.length >= _season,\n            \"Core: season must exist\"\n        );\n\n        require(\n            _season > 0,\n            \"Core: season must not be 0\"\n        );\n\n        require(\n            !factoryApproved[_factory][_season],\n            \"Core: this factory is already approved\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        factoryApproved[_factory][_season] = true;\n    }\n\n    function approveForMythic(\n        address _factory,\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"not a mythic\"\n        );\n\n        require(\n            !mythicApproved[_mythic][_factory],\n            \"Core: this factory is already approved for this mythic\"\n        );\n\n        mythicApproved[_mythic][_factory] = true;\n    }\n\n    /**\n     * @dev Enable trading for a certan mythic.\n     * Can only be called by owner().\n     *\n     * @param _mythic The proto of the mythic to enable trading for.\n     */\n    function makeMythicTradable(\n        uint16 _mythic\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _mythic >= MYTHIC_THRESHOLD,\n            \"Core: not a mythic\"\n        );\n\n        require(\n            !mythicTradable[_mythic],\n            \"Core: must not be tradable already\"\n        );\n\n        mythicTradable[_mythic] = true;\n    }\n\n    /**\n     * @dev Unlock trading for an entire season of cards.\n     * Can only be called by owner().\n     * \n     * @param _season The season to enable trading for.\n     */\n    function unlockTrading(\n        uint256 _season\n    )\n        public\n        onlyOwner\n    {\n        require(\n            _season > 0 && _season <= seasons.length,\n            \"Core: must be a current season\"\n        );\n\n        require(\n            !seasonTradable[_season],\n            \"Core: season must not be tradable\"\n        );\n\n        seasonTradable[_season] = true;\n    }\n\n    /**\n     * @dev Transfer cards to another address. Trading must be unlocked to transfer.\n     * Can be called by the owner or an approved spender.\n     * \n     * @param from The owner of the card\n     * @param to The recipient of the card to send to\n     * @param tokenId The id of the card you'd like to transfer\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n    {\n        require(\n            isTradable(tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super.transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Burn a card forever.\n     * Can only be called IF the card is not tradeable and from owner().\n     * \n     * @param _tokenId The id of the card to burn\n     */\n    function burn(uint256 _tokenId) public {\n        require(\n            isTradable(_tokenId),\n            \"Core: not yet tradable\"\n        );\n\n        super.burn(_tokenId);\n    }\n\n    /**\n     * @dev Burn multiple cards forever.\n     * Can only be called IF the card is not tradeable and from owner().\n     * \n     * @param tokenIDs The id sof the cards to burn\n     */\n    function burnAll(uint256[] memory tokenIDs) public {\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            burn(tokenIDs[i]);\n        }\n    }\n\n    /**\n     * @dev Retrieve the proto and quality for a particular card represented by it's token id\n     *\n     * @param tokenId the id of the card you'd like to retrieve details for\n     * @return proto The proto of the specified card\n     * @return quality The quality of the specified card\n     */\n    function getDetails(\n        uint256 tokenId\n    )\n        public\n        view\n        returns (uint16 proto, uint8 quality)\n    {\n        return (cardProtos[tokenId], cardQualities[tokenId]);\n    }\n\n    /**\n     * @dev Check if the card is tradeable or not.\n     * Once it's tradeable it cannot be burned, revoked or further minted.\n     * \n     * @param _tokenId The id of the card to check against\n     * @return A boolean of the status (true/false)\n     */\n    function isTradable(uint256 _tokenId) public view returns (bool) {\n        uint16 proto = cardProtos[_tokenId];\n        if (proto >= MYTHIC_THRESHOLD) {\n            return mythicTradable[proto];\n        }\n        return seasonTradable[protoToSeason[proto]];\n    }\n\n    /**\n     * @dev Create a new season with a range of protos.\n     * Cannot overlap with other seasons or start at 0.\n     * \n     * @param name The name of the season\n     * @param low The starting proto range of the season\n     * @param high The ending proto range of the season\n     * @return An integer of the season's id\n     */\n    function startSeason(\n        string memory name,\n        uint16 low,\n        uint16 high\n    )\n        public\n        onlyOwner\n        returns (uint)\n    {\n        require(\n            low > 0,\n            \"Core: must not be zero proto\"\n        );\n\n        require(\n            high > low,\n            \"Core: must be a valid range\"\n        );\n\n        require(\n            seasons.length == 0 || low > seasons[seasons.length - 1].high,\n            \"Core: seasons cannot overlap\"\n        );\n\n        require(\n            MYTHIC_THRESHOLD > high,\n            \"Core: cannot go into mythic territory\"\n        );\n\n        // seasons start at 1\n        uint16 id = uint16(seasons.push(Season({ high: high, low: low })));\n\n        uint256 cp;\n        assembly { cp := protoToSeason_slot }\n        StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);\n\n        emit SeasonStarted(id, name, low, high);\n\n        return id;\n    }\n\n    /**\n     * @dev Update the properties of a proto.\n     * Can only be called if proto unlocked and by owner().\n     *\n     * @param _ids An array of the ids to update\n     * @param _gods An array of the corresponding gods to update\n     * @param _cardTypes An array of the corresponding card types to update\n     * @param _rarities An array of the corresponding rarities to update\n     * @param _manas An array of the corresponding manas to update\n     * @param _attacks An array of the corresponding attacks to update\n     * @param _healths An array of the corresponding healths to update\n     * @param _tribes An array of the corresponding tribes to update    \n     */\n    function updateProtos(\n        uint16[] memory _ids,\n        uint8[] memory _gods,\n        uint8[] memory _cardTypes,\n        uint8[] memory _rarities,\n        uint8[] memory _manas,\n        uint8[] memory _attacks,\n        uint8[] memory _healths,\n        uint8[] memory _tribes\n    ) public onlyOwner {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n\n            require(\n                id > 0,\n                \"Core: proto must not be zero\"\n            );\n\n            Proto memory proto = protos[id];\n            require(\n                !proto.locked,\n                \"Core: proto is locked\"\n            );\n\n            protos[id] = Proto({\n                locked: false,\n                exists: true,\n                god: _gods[i],\n                cardType: _cardTypes[i],\n                rarity: _rarities[i],\n                mana: _manas[i],\n                attack: _attacks[i],\n                health: _healths[i],\n                tribe: _tribes[i]\n            });\n            emit ProtoUpdated(id);\n        }\n    }\n\n    /**\n     * @dev Lock a proto forever.\n     * Once this occurs the properties of a card cannot be changed.\n     * Can only be called by owner().\n     *\n     * @param _ids The ids of the protos to lock\n     */\n    function lockProtos(uint16[] memory _ids) public onlyOwner {\n        require(\n            _ids.length > 0,\n            \"Cards: must lock some\"\n        );\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint16 id = _ids[i];\n            require(\n                id > 0,\n                \"Cards: proto must not be zero\"\n            );\n\n            Proto storage proto = protos[id];\n\n            require(\n                !proto.locked,\n                \"Cards: proto is locked\"\n            );\n\n            require(\n                proto.exists,\n                \"Cards: proto must exist\"\n            );\n\n            proto.locked = true;\n            emit ProtoUpdated(id);\n        }\n    }\n\n    /**\n     * @dev Set/update the quality of a card.\n     * Can only be called by the factory minter of a season.\n     *\n     * @param _tokenId The id of the token to update\n     * @param _quality The quality of token to update\n     */\n    function setQuality(\n        uint256 _tokenId,\n        uint8 _quality\n    )\n        public\n    {\n        uint16 proto = cardProtos[_tokenId];\n        // wont' be able to change mythic season\n        uint256 season = protoToSeason[proto];\n\n        require(\n            factoryApproved[msg.sender][season],\n            \"Core: factory can't change quality of this season\"\n        );\n\n        cardQualities[_tokenId] = _quality;\n        emit QualityChanged(_tokenId, _quality, msg.sender);\n    }\n\n    function setPropertyManager(\n        address _manager\n    )\n        public \n        onlyOwner \n    {\n        propertyManager = _manager;\n    }\n\n    function setProperty(\n        uint256 _id, \n        bytes32 _key, \n        bytes32 _value\n    ) \n        public \n    {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setProperty(_id, _key, _value);\n    }\n\n    function setClassProperty(\n        bytes32 _key, \n        bytes32 _value\n    ) \n        public \n    {\n        require(\n            msg.sender == propertyManager,\n            \"Core: must be property manager\"\n        );\n\n        _setClassProperty(_key, _value);\n    }\n\n    function _validateAndSaveDetails(\n        uint256 start,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        internal\n    {\n        _validateProtos(_protos);\n\n        uint256 cp;\n        assembly { cp := cardProtos_slot }\n        StorageWrite.uint16s(cp, start, _protos);\n        uint256 cq;\n        assembly { cq := cardQualities_slot }\n        StorageWrite.uint8s(cq, start, _qualities);\n    }\n\n    function _validateProto(uint16 proto) internal {\n        if (proto >= MYTHIC_THRESHOLD) {\n            _checkCanCreateMythic(proto);\n        } else {\n\n            uint256 season = protoToSeason[proto];\n\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _validateProtos(\n        uint16[] memory _protos\n    )\n        internal \n    {\n        uint16 maxProto = 0;\n        uint16 minProto = MAX_UINT16;\n        for (uint256 i = 0; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            if (proto >= MYTHIC_THRESHOLD) {\n                _checkCanCreateMythic(proto);\n            } else {\n                if (proto > maxProto) {\n                    maxProto = proto;\n                }\n                if (minProto > proto) {\n                    minProto = proto;\n                }\n            }\n        }\n\n        if (maxProto != 0) {\n            uint256 season = protoToSeason[maxProto];\n            // cards must be from the same season\n            require(\n                season != 0,\n                \"Core: must have season set\"\n            );\n\n            require(\n                season == protoToSeason[minProto],\n                \"Core: can only create cards from the same season\"\n            );\n\n            require(\n                factoryApproved[msg.sender][season],\n                \"Core: must be approved factory for this season\"\n            );\n        }\n    }\n\n    function _checkCanCreateMythic(uint16 proto) internal {\n        require(\n            mythicApproved[proto][msg.sender],\n            \"Core: not approved to create this mythic\"\n        );\n\n        require(\n            !mythicCreated[proto],\n            \"Core: mythic has already been created\"\n        );\n\n        mythicCreated[proto] = true;\n    }\n\n}\n\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Constructor function.\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721Enumerable via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        _addTokenToAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {ERC721-_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n        _ownedTokensIndex[tokenId] = 0;\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Gets the list of token IDs of the requested owner.\n     * @param owner address owning the tokens\n     * @return uint256[] List of token IDs owned by the requested address\n     */\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n        // lastTokenId, or just over the end of the array if the token was the last one).\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n}\n\ncontract CardOwnershipTwo is ERC721Enumerable {\n\n    function transferFrom(address from, address to, uint id) public {\n        super.transferFrom(from, to, id);\n    }\n\n}\n\ncontract Governable {\n\n    event Pause();\n    event Unpause();\n\n    address public governor;\n    bool public paused = false;\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    function setGovernor(address _gov) public onlyGovernor {\n        governor = _gov;\n    }\n\n    modifier onlyGovernor {\n        require(msg.sender == governor);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyGovernor whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyGovernor whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n}\n\ncontract CardBase is Governable {\n\n    struct Card {\n        uint16 proto;\n        uint16 purity;\n    }\n\n    function getCard(uint id) public view returns (uint16 proto, uint16 purity) {\n        Card memory card = cards[id];\n        return (card.proto, card.purity);\n    }\n\n    function getShine(uint16 purity) public pure returns (uint8) {\n        return uint8(purity / 1000);\n    }\n\n    Card[] public cards;\n    \n}\n\ncontract CardProto is CardBase {\n\n    event NewProtoCard(\n        uint16 id, uint8 season, uint8 god, \n        Rarity rarity, uint8 mana, uint8 attack, \n        uint8 health, uint8 cardType, uint8 tribe, bool packable\n    );\n\n    struct Limit {\n        uint64 limit;\n        bool exists;\n    }\n\n    // limits for mythic cards\n    mapping(uint16 => Limit) public limits;\n\n    // can only set limits once\n    function setLimit(uint16 id, uint64 limit) public onlyGovernor {\n        Limit memory l = limits[id];\n        require(!l.exists);\n        limits[id] = Limit({\n            limit: limit,\n            exists: true\n        });\n    }\n\n    function getLimit(uint16 id) public view returns (uint64 limit, bool set) {\n        Limit memory l = limits[id];\n        return (l.limit, l.exists);\n    }\n\n    // could make these arrays to save gas\n    // not really necessary - will be update a very limited no of times\n    mapping(uint8 => bool) public seasonTradable;\n    mapping(uint8 => bool) public seasonTradabilityLocked;\n    uint8 public currentSeason;\n\n    function makeTradable(uint8 season) public onlyGovernor {\n        seasonTradable[season] = true;\n    }\n\n    function makeUntradable(uint8 season) public onlyGovernor {\n        require(!seasonTradabilityLocked[season]);\n        seasonTradable[season] = false;\n    }\n\n    function makePermanantlyTradable(uint8 season) public onlyGovernor {\n        require(seasonTradable[season]);\n        seasonTradabilityLocked[season] = true;\n    }\n\n    function isTradable(uint16 proto) public view returns (bool) {\n        return seasonTradable[protos[proto].season];\n    }\n\n    function nextSeason() public onlyGovernor {\n        //Seasons shouldn't go to 0 if there is more than the uint8 should hold, the governor should know this ¯\\_(ツ)_/¯ -M\n        require(currentSeason <= 255); \n\n        currentSeason++;\n        mythic.length = 0;\n        legendary.length = 0;\n        epic.length = 0;\n        rare.length = 0;\n        common.length = 0;\n    }\n\n    enum Rarity {\n        Common,\n        Rare,\n        Epic,\n        Legendary, \n        Mythic\n    }\n\n    uint8 constant SPELL = 1;\n    uint8 constant MINION = 2;\n    uint8 constant WEAPON = 3;\n    uint8 constant HERO = 4;\n\n    struct ProtoCard {\n        bool exists;\n        uint8 god;\n        uint8 season;\n        uint8 cardType;\n        Rarity rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    // there is a particular design decision driving this:\n    // need to be able to iterate over mythics only for card generation\n    // don't store 5 different arrays: have to use 2 ids\n    // better to bear this cost (2 bytes per proto card)\n    // rather than 1 byte per instance\n\n    uint16 public protoCount;\n    \n    mapping(uint16 => ProtoCard) protos;\n\n    uint16[] public mythic;\n    uint16[] public legendary;\n    uint16[] public epic;\n    uint16[] public rare;\n    uint16[] public common;\n\n    function addProtos(\n        uint16[] memory externalIDs, uint8[] memory gods, Rarity[] memory rarities, uint8[] memory manas, uint8[] memory attacks, \n        uint8[] memory healths, uint8[] memory cardTypes, uint8[] memory tribes, bool[] memory packable\n    ) public onlyGovernor returns(uint16) {\n\n        for (uint i = 0; i < externalIDs.length; i++) {\n\n            ProtoCard memory card = ProtoCard({\n                exists: true,\n                god: gods[i],\n                season: currentSeason,\n                cardType: cardTypes[i],\n                rarity: rarities[i],\n                mana: manas[i],\n                attack: attacks[i],\n                health: healths[i],\n                tribe: tribes[i]\n            });\n\n            _addProto(externalIDs[i], card, packable[i]);\n        }\n        \n    }\n\n    function addProto(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: cardType,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addWeapon(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 durability, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: WEAPON,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: durability,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addSpell(uint16 externalID, uint8 god, Rarity rarity, uint8 mana, bool packable) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: SPELL,\n            rarity: rarity,\n            mana: mana,\n            attack: 0,\n            health: 0,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addMinion(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: MINION,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function _addProto(uint16 externalID, ProtoCard memory card, bool packable) internal {\n\n        require(!protos[externalID].exists);\n\n        card.exists = true;\n\n        protos[externalID] = card;\n\n        protoCount++;\n\n        emit NewProtoCard(\n            externalID, currentSeason, card.god, \n            card.rarity, card.mana, card.attack, \n            card.health, card.cardType, card.tribe, packable\n        );\n\n        if (packable) {\n            Rarity rarity = card.rarity;\n            if (rarity == Rarity.Common) {\n                common.push(externalID);\n            } else if (rarity == Rarity.Rare) {\n                rare.push(externalID);\n            } else if (rarity == Rarity.Epic) {\n                epic.push(externalID);\n            } else if (rarity == Rarity.Legendary) {\n                legendary.push(externalID);\n            } else if (rarity == Rarity.Mythic) {\n                mythic.push(externalID);\n            } else {\n                require(false);\n            }\n        }\n    }\n\n    function getProto(uint16 id) public view returns(\n        bool exists, uint8 god, uint8 season, uint8 cardType, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) {\n        ProtoCard memory proto = protos[id];\n        return (\n            proto.exists,\n            proto.god,\n            proto.season,\n            proto.cardType,\n            proto.rarity,\n            proto.mana,\n            proto.attack,\n            proto.health,\n            proto.tribe\n        );\n    }\n\n    function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16) {\n        // modulo bias is fine - creates rarity tiers etc\n        // will obviously revert is there are no cards of that type: this is expected - should never happen\n        if (rarity == Rarity.Common) {\n            return common[random % common.length];\n        } else if (rarity == Rarity.Rare) {\n            return rare[random % rare.length];\n        } else if (rarity == Rarity.Epic) {\n            return epic[random % epic.length];\n        } else if (rarity == Rarity.Legendary) {\n            return legendary[random % legendary.length];\n        } else if (rarity == Rarity.Mythic) {\n            // make sure a mythic is available\n            uint16 id;\n            uint64 limit;\n            bool set;\n            for (uint i = 0; i < mythic.length; i++) {\n                id = mythic[(random + i) % mythic.length];\n                (limit, set) = getLimit(id);\n                if (set && limit > 0){\n                    return id;\n                }\n            }\n            // if not, they get a legendary :(\n            return legendary[random % legendary.length];\n        }\n        require(false);\n        return 0;\n    }\n\n    // can never adjust tradable cards\n    // each season gets a 'balancing beta'\n    // totally immutable: season, rarity\n    function replaceProto(\n        uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) public onlyGovernor {\n        ProtoCard memory pc = protos[index];\n        require(!seasonTradable[pc.season]);\n        protos[index] = ProtoCard({\n            exists: true,\n            god: god,\n            season: pc.season,\n            cardType: cardType,\n            rarity: pc.rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n    }\n\n}\n\ncontract CardIntegrationTwo is CardOwnershipTwo, CardProto {\n    \n    address[] public packs;\n\n    event CardCreated(uint indexed id, uint16 proto, uint16 purity, address owner);\n\n    function addPack(address approved) public onlyGovernor {\n        packs.push(approved);\n    }\n\n    modifier onlyApprovedPacks {\n        require(_isApprovedPack());\n        _;\n    }\n\n    function _isApprovedPack() private view returns (bool) {\n        for (uint i = 0; i < packs.length; i++) {\n            if (msg.sender == address(packs[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function createCard(address owner, uint16 proto, uint16 purity) public returns (uint) {\n        // if (card.rarity == Rarity.Mythic) {\n        //     uint64 limit;\n        //     bool exists;\n        //     (limit, exists) = getLimit(proto);\n        //     require(!exists || limit > 0);\n        //     limits[proto].limit--;\n        // }\n        return _createCard(owner, proto, purity);\n    }\n\n    function _createCard(address owner, uint16 proto, uint16 purity) internal returns (uint) {\n        \n        Card memory card = Card({\n            proto: proto,\n            purity: purity\n        });\n\n        uint id = cards.push(card) - 1;\n\n        _mint(owner, id);\n\n        emit CardCreated(id, proto, purity, owner);\n\n        return id;\n    }\n\n}\n\ncontract BaseMigration {\n\n    function convertPurity(uint16 purity) public pure returns (uint8) {\n        return uint8(4 - (purity / 1000));\n    }\n\n    function convertProto(uint16 proto) public view returns (uint16) {\n        if (proto >= 1 && proto <= 377) {\n            return proto;\n        }\n        // first phoenix\n        if (proto == 380) {\n            return 400;\n        }\n        // light's bidding\n        if (proto == 381) {\n            return 401;\n        }\n        // chimera\n        if (proto == 394) {\n            return 402;\n        }\n        // etherbots\n        (bool found, uint index) = getEtherbotsIndex(proto);\n        if (found) {\n            return uint16(380 + index);\n        }\n        // hyperion\n        if (proto == 378) {\n            return 65000;\n        }\n        // prometheus\n        if (proto == 379) {\n            return 65001;\n        }\n        // atlas\n        if (proto == 383) {\n            return 65002;\n        }\n        // tethys\n        if (proto == 384) {\n            return 65003;\n        }\n        require(false, \"unrecognised proto\");\n    }\n\n    uint16[] internal ebs = [400, 413, 414, 421, 427, 428, 389, 415, 416, 422, 424, 425, 426, 382, 420, 417];\n\n    function getEtherbotsIndex(uint16 proto) public view returns (bool, uint16) {\n        for (uint16 i = 0; i < ebs.length; i++) {\n            if (ebs[i] == proto) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n}\n\ncontract EtherbotsMigration is BaseMigration, Ownable {\n\n    // The old cards contract\n    CardIntegrationTwo public oldCards;\n\n    // The new cards contract to migrate to\n    Cards public newCards;\n\n    // Keep track of migrated cards\n    mapping (uint => bool) public hasMigrated;\n\n    mapping(uint16 => bool) public etherbotProtos;\n\n    constructor(\n        address _oldCardsAddress,\n        address _newCardsAddress,\n        uint16[] memory _etherbotIds\n    ) public {\n        oldCards = CardIntegrationTwo(_oldCardsAddress);\n        newCards = Cards(_newCardsAddress);\n\n        for (uint16 i = 0; i < _etherbotIds.length; i++) {\n            etherbotProtos[_etherbotIds[i]] = true;\n        }\n    }\n\n    event Migrated(\n        uint tokenId,\n        address owner,\n        uint16 proto,\n        uint8 quality\n    );\n\n    function selfDestruct() public onlyOwner {\n        selfdestruct(address(uint160(0x0)));\n    }\n\n    /**\n     * @dev Migrate multiple tokens at once.\n     *\n     * @param _tokenIds List of tokens to migrate\n     */\n    function migrateMultiple(\n        uint[] memory _tokenIds\n    )\n        public\n    {\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            migrate(_tokenIds[i]);\n        }\n    }\n\n    /**\n     * @dev Migrate Etherbot cards from the old Cards contract to the new one.\n     *\n     * @param _tokenId The id of the Etherbots card\n     */\n    function migrate(\n        uint _tokenId\n    ) public {\n\n        address originalOwner = oldCards.ownerOf(_tokenId);\n\n        require(\n            hasMigrated[_tokenId] == false,\n            \"Etherbots Migration: has already migrated Etherbot\"\n        );\n\n        (uint16 proto, uint16 purity) = oldCards.getCard(_tokenId);\n\n        require(\n            etherbotProtos[proto] == true,\n            \"Etherbots Migration: not an Etherbots proto\"\n        );\n\n        uint16 convertedProto = convertProto(proto);\n        uint8 convertedQuality = convertPurity(purity);\n\n        hasMigrated[_tokenId] = true;\n\n        newCards.mintCard(originalOwner, convertedProto, convertedQuality);\n\n        emit Migrated(_tokenId, originalOwner, convertedProto, convertedQuality);\n    }\n\n    /**\n     * @dev Migrate multiple Etherbot cards with the same owner\n     */\n    function migrateSameOwner(\n        uint[] memory _tokenIds,\n        address _owner\n    ) public {\n\n        if (_tokenIds.length == 1) {\n            migrate(_tokenIds[0]);\n            return;\n        }\n\n        uint16[] memory protos = new uint16[](_tokenIds.length);\n        uint8[] memory qualities = new uint8[](_tokenIds.length);\n\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            uint256 tokenId = _tokenIds[i];\n\n            require(\n                hasMigrated[tokenId] == false,\n                \"Etherbots Migration: has already migrated Etherbots\"\n            );\n\n            require(\n                oldCards.ownerOf(tokenId) == _owner,\n                \"Etherbots Migration: different owner found\"\n            );\n\n            (uint16 proto, uint16 purity) = oldCards.getCard(tokenId);\n\n            require(\n                etherbotProtos[proto] == true,\n                \"Etherbots Migration: not an Etherbots proto\"\n            );\n\n            protos[i] = convertProto(proto);\n            qualities[i] = convertPurity(purity);\n\n            hasMigrated[tokenId] = true;\n\n            emit Migrated(\n                tokenId,\n                _owner,\n                protos[i],\n                qualities[i]\n            );\n        }\n\n        newCards.mintCards(_owner, protos, qualities);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"getEtherbotsIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"etherbotProtos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"convertProto\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"convertPurity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"migrateMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldCards\",\"outputs\":[{\"internalType\":\"contract CardIntegrationTwo\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"migrateSameOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newCards\",\"outputs\":[{\"internalType\":\"contract Cards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldCardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newCardsAddress\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_etherbotIds\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quality\",\"type\":\"uint8\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherbotsMigration","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab0000000000000000000000000e3a2a1f2146d86a604adc220b4967a898d7fe07000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000019d000000000000000000000000000000000000000000000000000000000000019e00000000000000000000000000000000000000000000000000000000000001a500000000000000000000000000000000000000000000000000000000000001ab00000000000000000000000000000000000000000000000000000000000001ac0000000000000000000000000000000000000000000000000000000000000185000000000000000000000000000000000000000000000000000000000000019f00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001a600000000000000000000000000000000000000000000000000000000000001a800000000000000000000000000000000000000000000000000000000000001a900000000000000000000000000000000000000000000000000000000000001aa000000000000000000000000000000000000000000000000000000000000017e00000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000001a1","Library":"","LicenseType":"","SwarmSource":""}]}