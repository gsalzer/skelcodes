{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.totalSupply().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\r\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\r\n\r\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return totalSupply;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IForwarder.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IForwarder {\r\n    function isForwarder() external pure returns (bool);\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function forward(bytes evmCallScript) public;\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragonone/voting-connectors-contract-utils/contracts/Checkpointing.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Checkpointing\r\n * @notice Checkpointing library for keeping track of historical values based on an arbitrary time\r\n *         unit (e.g. seconds or block numbers).\r\n * @dev Inspired by:\r\n *   - MiniMe token (https://github.com/aragon/minime/blob/master/contracts/MiniMeToken.sol)\r\n *   - Staking (https://github.com/aragon/staking/blob/master/contracts/Checkpointing.sol)\r\n */\r\nlibrary Checkpointing {\r\n    string private constant ERROR_PAST_CHECKPOINT = \"CHECKPOINT_PAST_CHECKPOINT\";\r\n\r\n    struct Checkpoint {\r\n        uint64 time;\r\n        uint192 value;\r\n    }\r\n\r\n    struct History {\r\n        Checkpoint[] history;\r\n    }\r\n\r\n    function addCheckpoint(History storage _self, uint64 _time, uint192 _value) internal {\r\n        uint256 length = _self.history.length;\r\n        if (length == 0) {\r\n            _self.history.push(Checkpoint(_time, _value));\r\n        } else {\r\n            Checkpoint storage currentCheckpoint = _self.history[length - 1];\r\n            uint256 currentCheckpointTime = uint256(currentCheckpoint.time);\r\n\r\n            if (_time > currentCheckpointTime) {\r\n                _self.history.push(Checkpoint(_time, _value));\r\n            } else if (_time == currentCheckpointTime) {\r\n                currentCheckpoint.value = _value;\r\n            } else { // ensure list ordering\r\n                revert(ERROR_PAST_CHECKPOINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getValueAt(History storage _self, uint64 _time) internal view returns (uint256) {\r\n        return _getValueAt(_self, _time);\r\n    }\r\n\r\n    function lastUpdated(History storage _self) internal view returns (uint256) {\r\n        uint256 length = _self.history.length;\r\n        if (length > 0) {\r\n            return uint256(_self.history[length - 1].time);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function latestValue(History storage _self) internal view returns (uint256) {\r\n        uint256 length = _self.history.length;\r\n        if (length > 0) {\r\n            return uint256(_self.history[length - 1].value);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _getValueAt(History storage _self, uint64 _time) private view returns (uint256) {\r\n        uint256 length = _self.history.length;\r\n\r\n        // Short circuit if there's no checkpoints yet\r\n        // Note that this also lets us avoid using SafeMath later on, as we've established that\r\n        // there must be at least one checkpoint\r\n        if (length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Check last checkpoint\r\n        uint256 lastIndex = length - 1;\r\n        Checkpoint storage lastCheckpoint = _self.history[lastIndex];\r\n        if (_time >= lastCheckpoint.time) {\r\n            return uint256(lastCheckpoint.value);\r\n        }\r\n\r\n        // Check first checkpoint (if not already checked with the above check on last)\r\n        if (length == 1 || _time < _self.history[0].time) {\r\n            return 0;\r\n        }\r\n\r\n        // Do binary search\r\n        // As we've already checked both ends, we don't need to check the last checkpoint again\r\n        uint256 low = 0;\r\n        uint256 high = lastIndex - 1;\r\n\r\n        while (high > low) {\r\n            uint256 mid = (high + low + 1) / 2; // average, ceil round\r\n            Checkpoint storage checkpoint = _self.history[mid];\r\n            uint64 midTime = checkpoint.time;\r\n\r\n            if (_time > midTime) {\r\n                low = mid;\r\n            } else if (_time < midTime) {\r\n                // Note that we don't need SafeMath here because mid must always be greater than 0\r\n                // from the while condition\r\n                high = mid - 1;\r\n            } else {\r\n                // _time == midTime\r\n                return uint256(checkpoint.value);\r\n            }\r\n        }\r\n\r\n        return uint256(_self.history[low].value);\r\n    }\r\n}\r\n\r\n// File: @aragonone/voting-connectors-contract-utils/contracts/CheckpointingHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary CheckpointingHelpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n    uint256 private constant MAX_UINT192 = uint192(-1);\r\n\r\n    string private constant ERROR_UINT64_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n    string private constant ERROR_UINT192_TOO_BIG = \"UINT192_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64Time(uint256 _a) internal pure returns (uint64) {\r\n        require(_a <= MAX_UINT64, ERROR_UINT64_TOO_BIG);\r\n        return uint64(_a);\r\n    }\r\n\r\n    function toUint192Value(uint256 _a) internal pure returns (uint192) {\r\n        require(_a <= MAX_UINT192, ERROR_UINT192_TOO_BIG);\r\n        return uint192(_a);\r\n    }\r\n}\r\n\r\n// File: @aragonone/voting-connectors-contract-utils/contracts/ERC20ViewOnly.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20ViewOnly\r\n * @notice Abstract ERC20 interface that is \"view-only\" by disallowing transfers and allowances. Implementations must track account balances via another mechanism.\r\n * @dev Implemented functions at this level **NEVER** revert\r\n */\r\ncontract ERC20ViewOnly is ERC20 {\r\n    string private constant ERROR_ERC20_VIEW_ONLY = \"ERC20_VIEW_ONLY\";\r\n\r\n    function approve(address, uint256) public returns (bool) {\r\n        revert(ERROR_ERC20_VIEW_ONLY);\r\n    }\r\n\r\n    function transfer(address, uint256) public returns (bool) {\r\n        revert(ERROR_ERC20_VIEW_ONLY);\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool) {\r\n        revert(ERROR_ERC20_VIEW_ONLY);\r\n    }\r\n\r\n    function allowance(address, address) public view returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @aragonone/voting-connectors-contract-utils/contracts/StaticInvoke.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary StaticInvoke {\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n}\r\n\r\n// File: @aragonone/voting-connectors-contract-utils/contracts/interfaces/IERC20WithCheckpointing.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract IERC20WithCheckpointing is ERC20 {\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256);\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IERC900History.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IERC900History {\r\n    function totalStakedForAt(address addr, uint256 blockNumber) external view returns (uint256);\r\n    function totalStakedAt(uint256 blockNumber) external view returns (uint256);\r\n\r\n    function supportsHistory() external pure returns (bool);\r\n}\r\n\r\n// File: contracts/VotingAggregator.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title VotingAggregator\r\n * @notice Voting power aggregator across many sources that provides a \"view-only\" checkpointed\r\n *         ERC20 implementation.\r\n */\r\ncontract VotingAggregator is IERC20WithCheckpointing, IForwarder, IsContract, ERC20ViewOnly, AragonApp {\r\n    using SafeMath for uint256;\r\n    using StaticInvoke for address;\r\n    using Checkpointing for Checkpointing.History;\r\n    using CheckpointingHelpers for uint256;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 public constant ADD_POWER_SOURCE_ROLE = keccak256(\"ADD_POWER_SOURCE_ROLE\");\r\n    bytes32 public constant MANAGE_POWER_SOURCE_ROLE = keccak256(\"MANAGE_POWER_SOURCE_ROLE\");\r\n    bytes32 public constant MANAGE_WEIGHTS_ROLE = keccak256(\"MANAGE_WEIGHTS_ROLE\");\r\n    */\r\n    bytes32 public constant ADD_POWER_SOURCE_ROLE = 0x10f7c4af0b190fdd7eb73fa36b0e280d48dc6b8d355f89769b4f1a50a61d1929;\r\n    bytes32 public constant MANAGE_POWER_SOURCE_ROLE = 0x79ac9d2706bbe6bcdb60a65ba8145a498f6d506aaa455baa7675dff5779cb99f;\r\n    bytes32 public constant MANAGE_WEIGHTS_ROLE = 0xa36fcade8375289791865312a33263fdc82d07e097c13524c9d6436c0de396ff;\r\n\r\n    // Arbitrary number, but having anything close to this number would most likely be unwieldy.\r\n    // Note the primary protection this provides is to ensure that one cannot continue adding\r\n    // sources to break gas limits even with all sources disabled.\r\n    uint256 internal constant MAX_SOURCES = 20;\r\n    uint192 internal constant SOURCE_ENABLED_VALUE = 1;\r\n    uint192 internal constant SOURCE_DISABLED_VALUE = 0;\r\n\r\n    string private constant ERROR_NO_POWER_SOURCE = \"VA_NO_POWER_SOURCE\";\r\n    string private constant ERROR_POWER_SOURCE_TYPE_INVALID = \"VA_POWER_SOURCE_TYPE_INVALID\";\r\n    string private constant ERROR_POWER_SOURCE_INVALID = \"VA_POWER_SOURCE_INVALID\";\r\n    string private constant ERROR_POWER_SOURCE_ALREADY_ADDED = \"VA_POWER_SOURCE_ALREADY_ADDED\";\r\n    string private constant ERROR_TOO_MANY_POWER_SOURCES = \"VA_TOO_MANY_POWER_SOURCES\";\r\n    string private constant ERROR_ZERO_WEIGHT = \"VA_ZERO_WEIGHT\";\r\n    string private constant ERROR_SAME_WEIGHT = \"VA_SAME_WEIGHT\";\r\n    string private constant ERROR_SOURCE_NOT_ENABLED = \"VA_SOURCE_NOT_ENABLED\";\r\n    string private constant ERROR_SOURCE_NOT_DISABLED = \"VA_SOURCE_NOT_DISABLED\";\r\n    string private constant ERROR_CAN_NOT_FORWARD = \"VA_CAN_NOT_FORWARD\";\r\n    string private constant ERROR_SOURCE_CALL_FAILED = \"VA_SOURCE_CALL_FAILED\";\r\n    string private constant ERROR_INVALID_CALL_OR_SELECTOR = \"VA_INVALID_CALL_OR_SELECTOR\";\r\n\r\n    enum PowerSourceType {\r\n        Invalid,\r\n        ERC20WithCheckpointing,\r\n        ERC900\r\n    }\r\n\r\n    enum CallType {\r\n        BalanceOfAt,\r\n        TotalSupplyAt\r\n    }\r\n\r\n    struct PowerSource {\r\n        PowerSourceType sourceType;\r\n        Checkpointing.History enabledHistory;\r\n        Checkpointing.History weightHistory;\r\n    }\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping (address => PowerSource) internal powerSourceDetails;\r\n    address[] public powerSources;\r\n\r\n    event AddPowerSource(address indexed sourceAddress, PowerSourceType sourceType, uint256 weight);\r\n    event ChangePowerSourceWeight(address indexed sourceAddress, uint256 newWeight);\r\n    event DisablePowerSource(address indexed sourceAddress);\r\n    event EnablePowerSource(address indexed sourceAddress);\r\n\r\n    modifier sourceExists(address _sourceAddr) {\r\n        require(_powerSourceExists(_sourceAddr), ERROR_NO_POWER_SOURCE);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Create a new voting power aggregator\r\n     * @param _name The aggregator's display name\r\n     * @param _symbol The aggregator's display symbol\r\n     * @param _decimals The aggregator's display decimal units\r\n     */\r\n    function initialize(string _name, string _symbol, uint8 _decimals) external onlyInit {\r\n        initialized();\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @notice Add a new power source (`_sourceAddr`) with `_weight` weight\r\n     * @param _sourceAddr Address of the power source\r\n     * @param _sourceType Interface type of the power source\r\n     * @param _weight Weight to assign to the source\r\n     */\r\n    function addPowerSource(address _sourceAddr, PowerSourceType _sourceType, uint256 _weight)\r\n        external\r\n        authP(ADD_POWER_SOURCE_ROLE, arr(_sourceAddr, _weight))\r\n    {\r\n        // Sanity check arguments\r\n        require(\r\n            _sourceType == PowerSourceType.ERC20WithCheckpointing || _sourceType == PowerSourceType.ERC900,\r\n            ERROR_POWER_SOURCE_TYPE_INVALID\r\n        );\r\n        require(_weight > 0, ERROR_ZERO_WEIGHT);\r\n        require(_sanityCheckSource(_sourceAddr, _sourceType), ERROR_POWER_SOURCE_INVALID);\r\n\r\n        // Ensure internal consistency\r\n        require(!_powerSourceExists(_sourceAddr), ERROR_POWER_SOURCE_ALREADY_ADDED);\r\n        require(powerSources.length < MAX_SOURCES, ERROR_TOO_MANY_POWER_SOURCES);\r\n\r\n        // Add source\r\n        powerSources.push(_sourceAddr);\r\n\r\n        PowerSource storage source = powerSourceDetails[_sourceAddr];\r\n        source.sourceType = _sourceType;\r\n\r\n        // Start enabled and weight history\r\n        source.enabledHistory.addCheckpoint(getBlockNumber64(), SOURCE_ENABLED_VALUE);\r\n        source.weightHistory.addCheckpoint(getBlockNumber64(), _weight.toUint192Value());\r\n\r\n        emit AddPowerSource(_sourceAddr, _sourceType, _weight);\r\n    }\r\n\r\n    /**\r\n     * @notice Change weight of power source at `_sourceAddr` to `_weight`\r\n     * @param _sourceAddr Power source's address\r\n     * @param _weight New weight to assign\r\n     */\r\n    function changeSourceWeight(address _sourceAddr, uint256 _weight)\r\n        external\r\n        authP(MANAGE_WEIGHTS_ROLE, arr(_weight, powerSourceDetails[_sourceAddr].weightHistory.latestValue()))\r\n        sourceExists(_sourceAddr)\r\n    {\r\n        require(_weight > 0, ERROR_ZERO_WEIGHT);\r\n\r\n        Checkpointing.History storage weightHistory = powerSourceDetails[_sourceAddr].weightHistory;\r\n        require(weightHistory.latestValue() != _weight, ERROR_SAME_WEIGHT);\r\n\r\n        weightHistory.addCheckpoint(getBlockNumber64(), _weight.toUint192Value());\r\n\r\n        emit ChangePowerSourceWeight(_sourceAddr, _weight);\r\n    }\r\n\r\n    /**\r\n     * @notice Disable power source at `_sourceAddr`\r\n     * @param _sourceAddr Power source's address\r\n     */\r\n    function disableSource(address _sourceAddr)\r\n        external\r\n        authP(MANAGE_POWER_SOURCE_ROLE, arr(uint256(0)))\r\n        sourceExists(_sourceAddr)\r\n    {\r\n        Checkpointing.History storage enabledHistory = powerSourceDetails[_sourceAddr].enabledHistory;\r\n        require(\r\n            enabledHistory.latestValue() == uint256(SOURCE_ENABLED_VALUE),\r\n            ERROR_SOURCE_NOT_ENABLED\r\n        );\r\n\r\n        enabledHistory.addCheckpoint(getBlockNumber64(), SOURCE_DISABLED_VALUE);\r\n\r\n        emit DisablePowerSource(_sourceAddr);\r\n    }\r\n\r\n    /**\r\n     * @notice Enable power source at `_sourceAddr`\r\n     * @param _sourceAddr Power source's address\r\n     */\r\n    function enableSource(address _sourceAddr)\r\n        external\r\n        sourceExists(_sourceAddr)\r\n        authP(MANAGE_POWER_SOURCE_ROLE, arr(uint256(1)))\r\n    {\r\n        Checkpointing.History storage enabledHistory = powerSourceDetails[_sourceAddr].enabledHistory;\r\n        require(\r\n            enabledHistory.latestValue() == uint256(SOURCE_DISABLED_VALUE),\r\n            ERROR_SOURCE_NOT_DISABLED\r\n        );\r\n\r\n        enabledHistory.addCheckpoint(getBlockNumber64(), SOURCE_ENABLED_VALUE);\r\n\r\n        emit EnablePowerSource(_sourceAddr);\r\n    }\r\n\r\n    // ERC20 fns - note that this token is a non-transferrable \"view-only\" implementation.\r\n    // Users should only be changing balances by changing their balances in the underlying tokens.\r\n    // These functions do **NOT** revert if the app is uninitialized to stay compatible with normal ERC20s.\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balanceOfAt(_owner, getBlockNumber());\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(getBlockNumber());\r\n    }\r\n\r\n    // Checkpointed fns\r\n    // These functions do **NOT** revert if the app is uninitialized to stay compatible with normal ERC20s.\r\n\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r\n        return _aggregateAt(_blockNumber, CallType.BalanceOfAt, abi.encode(_owner, _blockNumber));\r\n    }\r\n\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r\n        return _aggregateAt(_blockNumber, CallType.TotalSupplyAt, abi.encode(_blockNumber));\r\n    }\r\n\r\n    // Forwarding fns\r\n\r\n    /**\r\n    * @notice Tells whether the VotingAggregator app is a forwarder or not\r\n    * @dev IForwarder interface conformance\r\n    * @return Always true\r\n    */\r\n    function isForwarder() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute desired action if you have voting power\r\n     * @dev IForwarder interface conformance\r\n     * @param _evmScript Script being executed\r\n     */\r\n    function forward(bytes _evmScript) public {\r\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\r\n        bytes memory input = new bytes(0);\r\n\r\n        // No blacklist needed as this contract should not hold any tokens from its sources\r\n        runScript(_evmScript, input, new address[](0));\r\n    }\r\n\r\n    /**\r\n    * @notice Tells whether `_sender` can forward actions or not\r\n    * @dev IForwarder interface conformance\r\n    * @param _sender Address of the account intending to forward an action\r\n    * @return True if the given address can forward actions, false otherwise\r\n    */\r\n    function canForward(address _sender, bytes) public view returns (bool) {\r\n        return hasInitialized() && balanceOf(_sender) > 0;\r\n    }\r\n\r\n    // Getter fns\r\n\r\n    /**\r\n     * @dev Return information about a power source\r\n     * @param _sourceAddr Power source's address\r\n     * @return Power source type\r\n     * @return Whether power source is enabled\r\n     * @return Power source weight\r\n     */\r\n    function getPowerSourceDetails(address _sourceAddr)\r\n        public\r\n        view\r\n        sourceExists(_sourceAddr)\r\n        returns (\r\n            PowerSourceType sourceType,\r\n            bool enabled,\r\n            uint256 weight\r\n        )\r\n    {\r\n        PowerSource storage source = powerSourceDetails[_sourceAddr];\r\n\r\n        sourceType = source.sourceType;\r\n        enabled = source.enabledHistory.latestValue() == uint256(SOURCE_ENABLED_VALUE);\r\n        weight = source.weightHistory.latestValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Return number of added power sources\r\n     * @return Number of added power sources\r\n     */\r\n    function getPowerSourcesLength() public view isInitialized returns (uint256) {\r\n        return powerSources.length;\r\n    }\r\n\r\n    // Internal fns\r\n\r\n    function _aggregateAt(uint256 _blockNumber, CallType _callType, bytes memory _paramdata) internal view returns (uint256) {\r\n        uint64 _blockNumberUint64 = _blockNumber.toUint64Time();\r\n\r\n        uint256 aggregate = 0;\r\n        for (uint256 i = 0; i < powerSources.length; i++) {\r\n            address sourceAddr = powerSources[i];\r\n            PowerSource storage source = powerSourceDetails[sourceAddr];\r\n\r\n            if (source.enabledHistory.getValueAt(_blockNumberUint64) == uint256(SOURCE_ENABLED_VALUE)) {\r\n                bytes memory invokeData = abi.encodePacked(_selectorFor(_callType, source.sourceType), _paramdata);\r\n                (bool success, uint256 value) = sourceAddr.staticInvoke(invokeData);\r\n                require(success, ERROR_SOURCE_CALL_FAILED);\r\n\r\n                uint256 weight = source.weightHistory.getValueAt(_blockNumberUint64);\r\n                aggregate = aggregate.add(weight.mul(value));\r\n            }\r\n        }\r\n\r\n        return aggregate;\r\n    }\r\n\r\n    function _powerSourceExists(address _sourceAddr) internal view returns (bool) {\r\n        // All attached power sources must have a valid source type\r\n        return powerSourceDetails[_sourceAddr].sourceType != PowerSourceType.Invalid;\r\n    }\r\n\r\n    function _selectorFor(CallType _callType, PowerSourceType _sourceType) internal pure returns (bytes4) {\r\n        if (_sourceType == PowerSourceType.ERC20WithCheckpointing) {\r\n            if (_callType == CallType.BalanceOfAt) {\r\n                return IERC20WithCheckpointing(0).balanceOfAt.selector;\r\n            }\r\n            if (_callType == CallType.TotalSupplyAt) {\r\n                return IERC20WithCheckpointing(0).totalSupplyAt.selector;\r\n            }\r\n        }\r\n\r\n        if (_sourceType == PowerSourceType.ERC900) {\r\n            if (_callType == CallType.BalanceOfAt) {\r\n                return IERC900History(0).totalStakedForAt.selector;\r\n            }\r\n            if (_callType == CallType.TotalSupplyAt) {\r\n                return IERC900History(0).totalStakedAt.selector;\r\n            }\r\n        }\r\n\r\n        revert(ERROR_INVALID_CALL_OR_SELECTOR);\r\n    }\r\n\r\n    // Private functions\r\n    function _sanityCheckSource(address _sourceAddr, PowerSourceType _sourceType) private view returns (bool) {\r\n        if (!isContract(_sourceAddr)) {\r\n            return false;\r\n        }\r\n\r\n        // Sanity check that the source and its declared type work for at least the current block\r\n        bytes memory balanceOfCalldata = abi.encodePacked(\r\n            _selectorFor(CallType.BalanceOfAt, _sourceType),\r\n            abi.encode(this, getBlockNumber())\r\n        );\r\n        (bool balanceOfSuccess,) = _sourceAddr.staticInvoke(balanceOfCalldata);\r\n\r\n        bytes memory totalSupplyCalldata = abi.encodePacked(\r\n            _selectorFor(CallType.TotalSupplyAt, _sourceType),\r\n            abi.encode(getBlockNumber())\r\n        );\r\n        (bool totalSupplySuccess,) = _sourceAddr.staticInvoke(totalSupplyCalldata);\r\n\r\n        return balanceOfSuccess && totalSupplySuccess;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceAddr\",\"type\":\"address\"},{\"name\":\"_sourceType\",\"type\":\"uint8\"},{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addPowerSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sourceAddr\",\"type\":\"address\"}],\"name\":\"getPowerSourceDetails\",\"outputs\":[{\"name\":\"sourceType\",\"type\":\"uint8\"},{\"name\":\"enabled\",\"type\":\"bool\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceAddr\",\"type\":\"address\"},{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"changeSourceWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPowerSourcesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_POWER_SOURCE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_WEIGHTS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_POWER_SOURCE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerSources\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceAddr\",\"type\":\"address\"}],\"name\":\"disableSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceAddr\",\"type\":\"address\"}],\"name\":\"enableSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sourceType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"AddPowerSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"ChangePowerSourceWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sourceAddress\",\"type\":\"address\"}],\"name\":\"DisablePowerSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sourceAddress\",\"type\":\"address\"}],\"name\":\"EnablePowerSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VotingAggregator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d2d3f08480f2be47654a04f8d1750348f203a6a4957e580c16f4bd57c4e71c1e"}]}