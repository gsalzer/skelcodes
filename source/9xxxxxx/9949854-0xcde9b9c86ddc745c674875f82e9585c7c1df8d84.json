{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function mint(address account, uint256 amount) public returns (bool);\r\n\r\n    function burn(uint256 amount) public returns (bool);\r\n}\r\n\r\n\r\ncontract Staking is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 private minStake;\r\n    uint256 private pool;\r\n    address private EGRAddress;\r\n    address public messenger;\r\n    mapping(address => uint256) userStake;\r\n    mapping(address => uint256) nextWithdrawDate;\r\n\r\n    constructor(address _EGRAddress, uint256 _minStake) public {\r\n        EGRAddress = _EGRAddress;\r\n        minStake = _minStake;\r\n    }\r\n\r\n    struct Stakers {\r\n        address staker;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping(address => Stakers) private stakers;\r\n    address[] private stakersRecords;\r\n\r\n    event minStakeChanged(uint256 _from, uint256 _to, uint256 _now);\r\n    event rewards(\r\n        address user,\r\n        uint256 reward,\r\n        uint256 userStake,\r\n        uint256 pool,\r\n        uint256 rewardAmount,\r\n        uint256 time\r\n    );\r\n    event userStaked(address _sender, uint256 _amount, uint256 time);\r\n    event userWidthdrawStake(address _sender, uint256 _amount, uint256 time);\r\n    event widthdrawFromPool(address _sender, uint256 _amount, uint256 time);\r\n\r\n    function stake(uint256 _EGRValueInWei) public returns (bool) {\r\n        require(\r\n            _EGRValueInWei > minStake,\r\n            \"Amount must be greater than minimum stake\"\r\n        );\r\n        IERC20 egorasEGR = IERC20(EGRAddress);\r\n        require(\r\n            egorasEGR.allowance(msg.sender, address(this)) >= _EGRValueInWei,\r\n            \"Non-sufficient funds\"\r\n        );\r\n        require(\r\n            egorasEGR.balanceOf(msg.sender) >= _EGRValueInWei,\r\n            \"Non-sufficient funds\"\r\n        );\r\n        require(\r\n            egorasEGR.transferFrom(msg.sender, address(this), _EGRValueInWei),\r\n            \"Fail to tranfer fund\"\r\n        );\r\n        userStake[msg.sender] = userStake[msg.sender].add(_EGRValueInWei);\r\n        pool = pool.add(_EGRValueInWei);\r\n        if (stakers[msg.sender].staker == address(0)) {\r\n            stakers[msg.sender].staker = msg.sender;\r\n            stakers[msg.sender].index = stakersRecords.push(msg.sender) - 1;\r\n            nextWithdrawDate[msg.sender] = block.timestamp.add(30 days);\r\n        }\r\n        emit userStaked(msg.sender, _EGRValueInWei, now);\r\n        return true;\r\n    }\r\n\r\n    function getstakers() public view returns (address[] memory) {\r\n        return stakersRecords;\r\n    }\r\n\r\n    function getStake() public view returns (uint256 _stakedAmount) {\r\n        return userStake[msg.sender];\r\n    }\r\n\r\n    function getMinStake() public view returns (uint256 _minStake) {\r\n        return minStake;\r\n    }\r\n\r\n    function getPool() public view returns (uint256 _pool) {\r\n        return pool;\r\n    }\r\n\r\n    function getUserStakeBalance(address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 percentage = userStake[_user].div(pool);\r\n        uint256 userBalanceShare = percentage.mul(pool);\r\n        return userBalanceShare;\r\n    }\r\n\r\n    function getUserRemainingStake(address _user)\r\n        public\r\n        view\r\n        returns (uint256 _stakedAmount)\r\n    {\r\n        return getUserStakeBalance(_user);\r\n    }\r\n\r\n    function getUserInitialStake(address _user)\r\n        public\r\n        view\r\n        returns (uint256 _stakedAmount)\r\n    {\r\n        return userStake[_user];\r\n    }\r\n\r\n    function setMinStake(uint256 _newMinStake) public returns (bool) {\r\n        require(_newMinStake > 0, \"Amount must be greater than zero\");\r\n        uint256 currentMinStake = minStake;\r\n        minStake = _newMinStake;\r\n        emit minStakeChanged(currentMinStake, _newMinStake, now);\r\n    }\r\n\r\n    function widthdrawStake() public returns (bool) {\r\n        require(withdrawable(msg.sender), \"Not yet time\");\r\n        require(\r\n            getUserStakeBalance(msg.sender) > 0,\r\n            \"Amount must be greater than zero\"\r\n        );\r\n        IERC20 egorasEGR = IERC20(EGRAddress);\r\n        uint256 percentage = userStake[msg.sender].div(pool);\r\n        uint256 userBalanceShare = percentage.mul(pool);\r\n\r\n        require(\r\n            egorasEGR.balanceOf(address(this)) >= userBalanceShare,\r\n            \"Non-sufficient funds\"\r\n        );\r\n        require(\r\n            egorasEGR.transfer(msg.sender, userBalanceShare),\r\n            \"Unable to transfer funds\"\r\n        );\r\n        pool = pool.sub(userBalanceShare);\r\n        userStake[msg.sender] = 0;\r\n\r\n        uint256 stakerToDelete = stakers[msg.sender].index;\r\n        address lastIndex = stakersRecords[stakersRecords.length - 1];\r\n        stakersRecords[stakerToDelete] = lastIndex;\r\n        delete stakers[msg.sender];\r\n        stakersRecords.length--;\r\n        emit userWidthdrawStake(msg.sender, userBalanceShare, now);\r\n        return true;\r\n    }\r\n\r\n    function widthdraw(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        IERC20 egorasEGR = IERC20(EGRAddress);\r\n        require(\r\n            egorasEGR.balanceOf(address(this)) >= _amount,\r\n            \"Non-sufficient funds\"\r\n        );\r\n        require(\r\n            egorasEGR.transfer(msg.sender, _amount),\r\n            \"Unable to transfer funds\"\r\n        );\r\n        pool = pool.sub(_amount);\r\n        emit widthdrawFromPool(msg.sender, _amount, now);\r\n        return true;\r\n    }\r\n\r\n    function rewardStakers(uint256 _amount) public onlyOwner returns (bool) {\r\n        IERC20 iERC20 = IERC20(EGRAddress);\r\n        for (uint256 i = 0; i < stakersRecords.length; i++) {\r\n            address user = stakersRecords[i];\r\n            uint256 userStakeAmount = userStake[user];\r\n            uint256 percentage = userStakeAmount.mul(10**18).div(pool);\r\n            uint256 reward = percentage.mul(_amount).div(10**18);\r\n            require(iERC20.mint(user, reward), \"Unable to mint token\");\r\n            emit rewards(user, reward, userStakeAmount, pool, _amount, now);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawable(address user) public view returns (bool) {\r\n        if (block.timestamp >= nextWithdrawDate[user]) return true;\r\n        else return false;\r\n    }\r\n\r\n    function getUserNextWithdrawDate(address user)\r\n        public\r\n        view\r\n        returns (uint256 _nextWithdrawDate)\r\n    {\r\n        return nextWithdrawDate[user];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EGRAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"minStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"userStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"userWidthdrawStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"widthdrawFromPool\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInitialStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNextWithdrawDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextWithdrawDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRemainingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getstakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardStakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EGRValueInWei\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"widthdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"widthdrawStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000073cee8348b9bdd48c64e13452b8a6fbc816305730000000000000000000000000000000000000000000000000114cf5f3b8bc700","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fc4c21ea362fa8bb4844f95f4b44ae5d99c6f11aaacac690394e50275cc9d3db"}]}