{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  The interface for the market registry.\n  */\ninterface IMarketRegistry {\n\t// Emitted when a market is created\n    event MarketCreated(\n\t\tuint256 index,\n\t\taddress indexed marketAddress,\n\t\taddress indexed vault,\n\t\taddress indexed creator\n    );\n\t// Emitted when a deployer is added\n    event DeployerAdded(address deployer, string version);\n    // Emitted when a deployer is removed\n\tevent DeployerRemoved(address deployer, string reason);\n\n    /**\n      * @dev    Adds a new market deployer to the registry.\n      * @param  _newDeployer: Address of the new market deployer.\n      * @param  _version: string - Log text for tracking purposes.\n      */\n    function addMarketDeployer(\n      address _newDeployer,\n      string calldata _version\n    ) external;\n\n    /**\n      * @dev    Removes a market deployer from the registry.\n      * @param  _deployerToRemove: Address of the market deployer to remove.\n      * @param  _reason: Log text for tracking purposes.\n      */\n    function removeMarketDeployer(\n      address _deployerToRemove,\n      string calldata _reason\n    ) external;\n\n    /**\n      * @dev    Logs the market into the registery.\n      * @param  _vault: Address of the vault.\n      * @param  _creator: Creator of the market.\n      * @return uint256: Returns the index of market for looking up.\n      */\n    function registerMarket(\n        address _marketAddress,\n        address _vault,\n        address _creator\n    )\n        external\n        returns(uint256);\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed\n      *         markets by index, kept as interface for later\n      *         intergration.\n      * @param  _index: Index of the market.\n      * @return address: The address of the market.\n\t  * @return\taddress: The address of the vault.\n\t  * @return\taddress: The address of the creator.\n      */\n    function getMarket(uint256 _index)\n        external\n        view\n        returns(\n            address,\n            address,\n            address\n        );\n\n\t/**\n\t  * @dev\tFetchs the current number of markets infering maximum\n\t  *\t\t\tcallable index.\n\t  * @return\tuint256: The number of markets that have been deployed.\n\t  */\n    function getIndex() external view returns(uint256);\n\n\t/**\n\t  * @dev\tUsed to check if the deployer is registered.\n      * @param  _deployer: The address of the deployer\n\t  * @return\tbool: A simple bool to indicate state.\n\t  */\n    function isMarketDeployer(address _deployer) external view returns(bool);\n\n\t/**\n\t  * @dev\tIn order to look up logs efficently, the published block is\n\t  *\t\t\tavailable.\n\t  * @return\tuint256: The block when the contract was published.\n\t  */\n    function publishedBlocknumber() external view returns(uint256);\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n\n/**\n  * @title  ModifiedWhitelistAdminRole\n  * @dev    WhitelistAdmins are responsible for assigning and removing \n  *         Whitelisted accounts.\n  */\ncontract ModifiedWhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n    // this is a uint8 rather than a 256 for storage. \n    uint8 internal noOfAdmins_;\n    // Initial admin address \n    address internal initialAdmin_;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n        initialAdmin_ = msg.sender;\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(\n            isWhitelistAdmin(msg.sender), \n            \"ModifiedWhitelistAdminRole: caller does not have the WhitelistAdmin role\"\n        );\n        _;\n    }\n\n    /**\n      * @dev    This allows for the initial admin added to have additional admin\n      *         rights, such as removing another admin. \n      */\n    modifier onlyInitialAdmin() {\n        require(\n            msg.sender == initialAdmin_,\n            \"Only initial admin may remove another admin\"\n        );\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin() {\n        _addWhitelistAdmin(account);\n    }\n\n    /**\n      * @dev    This allows the initial admin to replace themselves as the super\n      *         admin.\n      * @param  account: The address of the new super admin\n      */\n    function addNewInitialAdmin(address account) public onlyInitialAdmin() {\n        if(!isWhitelistAdmin(account)) {\n            _addWhitelistAdmin(account);\n        }\n        initialAdmin_ = account;\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    /**\n      * @dev    Allows the super admin to remover other admins\n      * @param  account: The address of the admin to be removed\n      */\n    function removeWhitelistAdmin(address account) public onlyInitialAdmin() {\n        _removeWhitelistAdmin(account);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        if(!isWhitelistAdmin(account)) {\n            noOfAdmins_ += 1;\n        }\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        noOfAdmins_ -= 1;\n        require(noOfAdmins_ >= 1, \"Cannot remove all admins\");\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n\n    function getAdminCount() public view returns(uint8) {\n        return noOfAdmins_;\n    }\n}\n\n\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  Storage of markets (vaults and markets) as well as deployers.\n  */\ncontract MarketRegistry is IMarketRegistry, ModifiedWhitelistAdminRole {\n    // The total number of markets\n    uint256 internal numberOfMarkets_ = 0;\n    // The block number when this contract was published\n    uint256 internal publishedBlocknumber_;\n    // The init function can only be called once \n    bool internal isInitialized_  = false;\n\n    // Mapping of all the markets deployed to their index\n    mapping(uint256 => Market) internal markets_;\n    // Mapping of all deployers\n    mapping(address => bool) internal deployer_;\n\n    // The information stored about each market\n    struct Market {\n        address marketAddress;\n        address vault;\n        address creator;\n    }\n\n    /**\n      * @notice The deployer of this contract will be the admin.\n      */\n    constructor() public ModifiedWhitelistAdminRole() {\n        publishedBlocknumber_ = block.number;\n    }\n\n    modifier isRegisteredDeployer() {\n        require(deployer_[msg.sender], \"Deployer not registered\");\n        _;\n    }\n\n    function init(address _admin) public onlyWhitelistAdmin() {\n        require(!isInitialized_, \"Contract is initialized\");\n        super.addNewInitialAdmin(_admin);\n        super.renounceWhitelistAdmin();\n        isInitialized_ = true;\n    }\n\n    /**\n      * @dev    Adds a new market deployer to the registry.\n      * @param  _newDeployer: Address of the new market deployer.\n      * @param  _version: string - Log text for tracking purposes.\n      */\n    function addMarketDeployer(\n        address _newDeployer,\n        string calldata _version\n    )\n        external\n        onlyWhitelistAdmin()\n    {\n        require(deployer_[_newDeployer] != true, \"Already approved\");\n        deployer_[_newDeployer] = true;\n        emit DeployerAdded(_newDeployer, _version);\n    }\n\n    /**\n      * @dev    Removes a market deployer from the registry.\n      * @param  _deployerToRemove: Address of the market deployer to remove.\n      * @param  _reason: Log text for tracking purposes.\n      */\n    function removeMarketDeployer(\n        address _deployerToRemove,\n        string calldata _reason\n    )\n        external\n        onlyWhitelistAdmin()\n    {\n        require(deployer_[_deployerToRemove] != false, \"Already inactive\");\n        deployer_[_deployerToRemove] = false;\n        emit DeployerRemoved(_deployerToRemove, _reason);\n    }\n\n    /**\n      * @dev    Logs the market into the registery.\n      * @param  _vault: Address of the vault.\n      * @param  _creator: Creator of the market.\n      * @return uint256: Returns the index of market for looking up.\n      */\n    function registerMarket(\n        address _marketAddress,\n        address _vault,\n        address _creator)\n        external\n        isRegisteredDeployer()\n        returns(uint256)\n    {\n        // Checks that none of the addresses are 0\n        require(\n            address(_marketAddress) != address(0) &&\n            address(_vault) != address(0) &&\n            address(_creator) != address(0),\n            \"Address(s) cannot be 0\"\n        );\n\n        uint256 index = numberOfMarkets_;\n        numberOfMarkets_ = numberOfMarkets_ + 1;\n\n        markets_[index].marketAddress = _marketAddress;\n        markets_[index].vault = _vault;\n        markets_[index].creator = _creator;\n\n        emit MarketCreated(\n            index,\n            _marketAddress,\n            _vault,\n            _creator\n        );\n\n        return index;\n    }\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed\n      *         markets by index, kept as interface for later\n      *         intergration.\n      * @param  _index: Index of the market.\n      * @return address: The address of the market.\n\t  * @return\taddress: The address of the vault.\n\t  * @return\taddress: The address of the creator.\n      */\n    function getMarket(uint256 _index)\n        external\n        view\n        returns(\n            address,\n            address,\n            address\n        )\n    {\n        return (\n            markets_[_index].marketAddress,\n            markets_[_index].vault,\n            markets_[_index].creator\n        );\n    }\n\n    /**\n\t  * @dev\tFetchs the current number of markets infering maximum\n\t  *\t\t\tcallable index.\n\t  * @return\tuint256: The number of markets that have been deployed.\n\t  */\n    function getIndex()\n        external\n        view\n        returns(uint256)\n    {\n        return numberOfMarkets_;\n    }\n\n    /**\n\t  * @dev\tUsed to check if the deployer is registered.\n      * @param  _deployer: The address of the deployer\n\t  * @return\tbool: A simple bool to indicate state.\n\t  */\n    function isMarketDeployer(\n        address _deployer\n    )\n        external\n        view\n        returns(bool)\n    {\n        return deployer_[_deployer];\n    }\n\n    /**\n\t  * @dev\tIn order to look up logs efficently, the published block is\n\t  *\t\t\tavailable.\n\t  * @return\tuint256: The block when the contract was published.\n\t  */\n    function publishedBlocknumber() external view returns(uint256) {\n        return publishedBlocknumber_;\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addNewInitialAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDeployer\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"addMarketDeployer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"isMarketDeployer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deployerToRemove\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"removeMarketDeployer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketAddress\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"registerMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publishedBlocknumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"}],\"name\":\"DeployerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DeployerRemoved\",\"type\":\"event\"}]","ContractName":"MarketRegistry","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://42bcd2938175f85e8c25bf8afc5b8bc08104741897529e0242240a8ca0b2db73"}]}