{"status":"1","message":"OK","result":[{"SourceCode":"{\"ConditionBalance.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract ConditionBalance is IGelatoCondition {\\n\\n    enum Reason {\\n        // StandardReason Fields\\n        Ok,  // 0: Standard Field for Fulfilled Conditions and No Errors\\n        NotOk,  // 1: Standard Field for Unfulfilled Conditions or Caught/Handled Errors\\n        UnhandledError,  // 2: Standard Field for Uncaught/Unhandled Errors\\n        // Ok: Fulfilled Conditions\\n        OkETHBalanceIsGreaterThanRefBalance,\\n        OkERC20BalanceIsGreaterThanRefBalance,\\n        OkETHBalanceIsSmallerThanRefBalance,\\n        OkERC20BalanceIsSmallerThanRefBalance,\\n        // NotOk: Unfulfilled Conditions\\n        NotOkETHBalanceIsNotGreaterThanRefBalance,\\n        NotOkERC20BalanceIsNotGreaterThanRefBalance,\\n        NotOkETHBalanceIsNotSmallerThanRefBalance,\\n        NotOkERC20BalanceIsNotSmallerThanRefBalance,\\n        ERC20Error\\n    }\\n\\n    // conditionSelector public state variable np due to this.actionSelector constant issue\\n    function conditionSelector() external pure override returns(bytes4) {\\n        return this.reached.selector;\\n    }\\n    uint256 public constant override conditionGas = 30000;\\n\\n    /// @dev Caution: use 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH _coin\\n    /// @param _coin ETH (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) or ERC20\\n    function reached(\\n        address _account,\\n        address _coin,\\n        uint256 _refBalance,\\n        bool _greaterElseSmaller\\n    )\\n        external\\n        view\\n        returns(bool, uint8)  // executable?, reason\\n    {\\n        // ETH balances\\n        if (_coin == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            if (_greaterElseSmaller) {  // greaterThan\\n                if (_account.balance \\u003e= _refBalance)\\n                    return (true, uint8(Reason.OkETHBalanceIsGreaterThanRefBalance));\\n                else\\n                    return(false, uint8(Reason.NotOkETHBalanceIsNotGreaterThanRefBalance));\\n            } else {  // smallerThan\\n                if (_account.balance \\u003c= _refBalance)\\n                    return (true, uint8(Reason.OkETHBalanceIsSmallerThanRefBalance));\\n                else\\n                    return(false, uint8(Reason.NotOkETHBalanceIsNotSmallerThanRefBalance));\\n            }\\n        } else {\\n            // ERC20 balances\\n            IERC20 erc20 = IERC20(_coin);\\n            try erc20.balanceOf(_account) returns (uint256 erc20Balance) {\\n                if (_greaterElseSmaller) {  // greaterThan\\n                    if (erc20Balance \\u003e= _refBalance)\\n                        return (true, uint8(Reason.OkERC20BalanceIsGreaterThanRefBalance));\\n                    else\\n                        return(false, uint8(Reason.NotOkERC20BalanceIsNotGreaterThanRefBalance));\\n                } else {  // smallerThan\\n                    if (erc20Balance \\u003c= _refBalance)\\n                        return (true, uint8(Reason.OkETHBalanceIsSmallerThanRefBalance));\\n                    else\\n                        return(false, uint8(Reason.NotOkERC20BalanceIsNotSmallerThanRefBalance));\\n                }\\n            } catch {\\n                return(false, uint8(Reason.ERC20Error));\\n            }\\n        }\\n    }\\n\\n    function getConditionValue(address _account, address _coin, uint256, bool)\\n        external\\n        view\\n        returns(uint256)\\n    {\\n        if (_coin == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            return _account.balance;\\n        IERC20 erc20 = IERC20(_coin);\\n        return erc20.balanceOf(_account);\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IGelatoCondition.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n    /* CAUTION All Conditions must reserve the first 3 fields of their `enum Reason` as such:\\n        0: Ok,  // 0: standard field for Fulfilled Conditions and No Errors\\n        1: NotOk,  // 1: standard field for Unfulfilled Conditions or Handled Errors\\n        2: UnhandledError  // 2: standard field for Unhandled or Uncaught Errors\\n    */\\n\\n    /* CAUTION: the following functions are part of the standard IGelatoCondition interface but cannot be overriden\\n        - \\\"function reached(args) external view\\\": non-standardisable due to different arguments passed across different conditions\\n        - \\\"function getConditionValue(same args as reached function) external view/pure\\\": always takes same args as reached()\\n    */\\n\\n    function conditionSelector() external pure returns(bytes4);\\n    function conditionGas() external pure returns(uint256);\\n}\"}}","ABI":"[{\"inputs\":[],\"name\":\"conditionGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getConditionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_greaterElseSmaller\",\"type\":\"bool\"}],\"name\":\"reached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConditionBalance","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://815b798fcd25478b928057b44b20bd5cba13675b2d2779de41081e74715a675b"}]}