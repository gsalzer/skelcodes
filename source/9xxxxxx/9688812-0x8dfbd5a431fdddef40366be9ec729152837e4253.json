{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libs/ERC20Wrapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20Wrapper {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _quantity) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _quantity) external returns (bool);\r\n    function approve(address _spender, uint256 _quantity) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\nlibrary ERC20Wrapper {\r\n    function balanceOf(address _token, address _owner) external view returns (uint256) {\r\n        return IERC20Wrapper(_token).balanceOf(_owner);\r\n    }\r\n\r\n    function allowance(address _token, address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20Wrapper(_token).allowance(owner, spender);\r\n    }\r\n\r\n    function transfer(address _token, address _to, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transfer(_to, _quantity);\r\n\r\n            require(checkSuccess(), \"ERC20Wrapper.transfer: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transfer(_to, _quantity);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _token, address _from, address _to, uint256 _quantity)\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n            // Check that transferFrom returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.transferFrom: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n        }\r\n    }\r\n\r\n    function approve(address _token, address _spender, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).approve(_spender, _quantity);\r\n            // Check that approve returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.approve: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).approve(_spender, _quantity);\r\n        }\r\n    }\r\n\r\n    function isIssuedToken(address _token) private returns (bool) {\r\n        return (keccak256(abi.encodePacked((IERC20Wrapper(_token).symbol()))) ==\r\n            keccak256(abi.encodePacked((\"USDT\"))));\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\r\n     * function returned 0 bytes or 1.\r\n     */\r\n    function checkSuccess() private pure returns (bool) {\r\n        // default to failure\r\n        uint256 returnValue = 0;\r\n\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n                // no bytes returned: assume success\r\n                case 0x0 {\r\n                    returnValue := 1\r\n                }\r\n                // 32 bytes returned\r\n                case 0x20 {\r\n                    // copy 32 bytes into scratch space\r\n                    returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                    // load those bytes into returnValue\r\n                    returnValue := mload(0x0)\r\n                }\r\n                // not sure what was returned: dont mark as success\r\n                default {\r\n\r\n                }\r\n        }\r\n\r\n        // check if returned value is one or nothing\r\n        return returnValue == 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20Wrapper","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://242c3ac8642ef5c480ee8534996f95e9f5ec6af132a03915fb38a39267cc62ae"}]}