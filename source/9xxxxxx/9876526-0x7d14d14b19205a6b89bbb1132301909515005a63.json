{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\n\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title The FinAid contract.\r\n */\r\ncontract FinAid is Ownable {\r\n\r\n    uint256 public price;\r\n\r\n    uint256 public REF_LIMIT = 2;\r\n\r\n    uint256 public fee;\r\n\r\n    address payable public wallet;\r\n\r\n    address inception = 0x7700000000000000000000000000000000000000;\r\n\r\n    struct User {\r\n        bool active;\r\n        address referrer;\r\n        address[] referrals;\r\n        uint256 fourth;\r\n        uint256 profit;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    event getIn(address indexed account, address indexed referrer, uint256 price);\r\n    event getOut(address indexed account, uint256 profit);\r\n    event withdrawn(address indexed account, uint256 amount);\r\n\r\n    constructor(address initialOwner, address payable walletAddr, uint256 initialPrice, uint256 initialFee) public Ownable(initialOwner) {\r\n        wallet = walletAddr;\r\n        price = initialPrice;\r\n        fee = initialFee;\r\n    }\r\n\r\n    fallback() external payable {\r\n        if (msg.value == 0) {\r\n\r\n            withdraw();\r\n\r\n        } else if (msg.value == price) {\r\n\r\n            regUser(_bytesToAddress(bytes(msg.data)), false);\r\n\r\n        } else revert('Incorrect value');\r\n    }\r\n\r\n    function regUser(address referrer, bool overflow) public payable {\r\n        require(msg.sender != wallet, 'Fee wallet cannot participate');\r\n        require(referrer != msg.sender, 'User cannot be a referrer for himself');\r\n        require(!users[msg.sender].active, 'User is already in the structure');\r\n        require(msg.value == price, 'Value must be equal to the price');\r\n\r\n        if (getProfit(msg.sender) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        if (referrer != inception) {\r\n            require(users[referrer].active, 'You must provide an active referrer address');\r\n\r\n            if (users[referrer].referrals.length == REF_LIMIT || getLevel(referrer) == 4) {\r\n                if (overflow) {\r\n                    referrer = _findReferrer(referrer);\r\n                } else {\r\n                    revert('Referrer cannot accept a referral');\r\n                }\r\n            }\r\n\r\n            users[referrer].referrals.push(msg.sender);\r\n            users[msg.sender].referrer = referrer;\r\n        }\r\n\r\n        users[msg.sender].active = true;\r\n\r\n        emit getIn(msg.sender, users[msg.sender].referrer, price);\r\n\r\n        if (getLevel(msg.sender) < 4) {\r\n\r\n            users[wallet].profit += price;\r\n\r\n        } else {\r\n\r\n            uint256 feeAmount = price * fee / 10000;\r\n            if (feeAmount > 0) {\r\n                users[wallet].profit += feeAmount;\r\n            }\r\n\r\n            address root = msg.sender;\r\n            for (uint256 i = 1; i <= 4; i++) {\r\n                if (users[users[root].referrer].active) {\r\n                    root = users[root].referrer;\r\n                } else break;\r\n            }\r\n\r\n            users[root].fourth++;\r\n            users[root].profit += price - feeAmount;\r\n\r\n            if (users[root].fourth >= 8) {\r\n                delete users[users[root].referrals[0]].referrer;\r\n                delete users[users[root].referrals[1]].referrer;\r\n\r\n                uint256 prize = users[root].profit;\r\n\r\n                delete users[root];\r\n\r\n                users[root].profit = prize;\r\n\r\n                emit getOut(root, prize);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 amount = getProfit(msg.sender);\r\n\r\n        require(amount > 0, 'User has no profit');\r\n        require(!users[msg.sender].active, 'User must get out of the structure to withdraw profit');\r\n\r\n        users[msg.sender].profit = 0;\r\n        if (!msg.sender.send(amount)) {\r\n            revert('Unsufficient balance');\r\n        }\r\n\r\n        emit withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function _findReferrer(address referrer) internal view returns(address) {\r\n        if (users[referrer].referrals.length < REF_LIMIT && getLevel(referrer) < 4) {\r\n            return referrer;\r\n        }\r\n\r\n        address[] memory accounts = getStructure(referrer);\r\n\r\n        for (uint256 i = 0; i < 7; i++) {\r\n            if (accounts[i] != address(0) && users[accounts[i]].referrals.length < REF_LIMIT) {\r\n                return accounts[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWallet(address payable newWallet) public onlyOwner {\r\n        require(newWallet != address(0));\r\n        require(!users[newWallet].active);\r\n\r\n        wallet = newWallet;\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice != 0);\r\n\r\n        price = newPrice;\r\n    }\r\n\r\n    function setFee(uint256 newFee) public onlyOwner {\r\n        require(newFee <= 500);\r\n\r\n        fee = newFee;\r\n    }\r\n\r\n    function getReferrer(address account) public view returns(address) {\r\n        return users[account].referrer;\r\n    }\r\n\r\n    function getProfit(address account) public view returns(uint256) {\r\n        return users[account].profit;\r\n    }\r\n\r\n    function getUserReferrals(address account) public view returns(address[] memory) {\r\n        return users[account].referrals;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getLevel(address account) public view returns(uint256) {\r\n        if (users[account].active) {\r\n            uint256 i;\r\n\r\n            for (i = 1; i <= 4; i++) {\r\n                if (users[users[account].referrer].active) {\r\n                    account = users[account].referrer;\r\n                } else break;\r\n            }\r\n\r\n            return i;\r\n        }\r\n    }\r\n\r\n    function getStructure(address account) public view returns(address[] memory) {\r\n\r\n        address[] memory referrals = new address[](15);\r\n        uint256 count;\r\n\r\n        address root;\r\n        if (users[account].active) {\r\n            root = account;\r\n        } else {\r\n            return referrals;\r\n        }\r\n\r\n        for (uint256 i = 1; i <= 4; i++) {\r\n            if (users[users[root].referrer].active) {\r\n                root = users[root].referrer;\r\n            } else break;\r\n        }\r\n\r\n        referrals[count] = root;\r\n        count++;\r\n\r\n        for (uint256 i = 0; i < referrals.length; i++) {\r\n            if (referrals[i] != address(0)) {\r\n                for (uint256 l = 0; l <= 1; l++) {\r\n                    if (users[referrals[i]].referrals.length > l) {\r\n                        referrals[count] = users[referrals[i]].referrals[l];\r\n                    }\r\n                    count++;\r\n                }\r\n            } else {\r\n                count += REF_LIMIT;\r\n            }\r\n        }\r\n\r\n        return referrals;\r\n\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory source) internal pure returns(address parsedReferrer) {\r\n        assembly {\r\n            parsedReferrer := mload(add(source,0x14))\r\n        }\r\n        return parsedReferrer;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"walletAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"getOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"REF_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStructure\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overflow\",\"type\":\"bool\"}],\"name\":\"regUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fourth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FinAid","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f3e8874ed169f63f7546d9e5af731bb3b0e070ed00000000000000000000000043035680490d54f181cd8bd9c088ceb571db03200000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000000000000000012c","Library":"","LicenseType":"None","SwarmSource":"ipfs://57aae7c47b9b64c6b67460db0b5d4cf6eaa73612530e3c4706c5c78e31fced09"}]}