{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\n        external\n        payable\n        returns (uint256, uint256);\n\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\n        external\n        returns (uint256);\n\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\n        external\n        payable\n        returns (uint256);\n\n    function getExpectedRate(address src, address dest, uint256 srcQty)\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract SaverLogger {\n    event Repay(\n        uint256 indexed cdpId,\n        address indexed owner,\n        uint256 collateralAmount,\n        uint256 daiAmount\n    );\n    event Boost(\n        uint256 indexed cdpId,\n        address indexed owner,\n        uint256 daiAmount,\n        uint256 collateralAmount\n    );\n\n    \n    function LogRepay(uint256 _cdpId, address _owner, uint256 _collateralAmount, uint256 _daiAmount)\n        public\n    {\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\n    }\n\n    \n    function LogBoost(uint256 _cdpId, address _owner, uint256 _daiAmount, uint256 _collateralAmount)\n        public\n    {\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\n    }\n}\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract Spotter {\n    struct Ilk {\n        PipInterface pip;\n        uint256 mat;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    uint256 public par;\n\n}\n\ncontract Jug {\n    struct Ilk {\n        uint256 duty;\n        uint256  rho;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    function drip(bytes32) public returns (uint);\n}\n\ncontract Vat {\n\n    struct Urn {\n        uint256 ink;   \n        uint256 art;   \n    }\n\n    struct Ilk {\n        uint256 Art;   \n        uint256 rate;  \n        uint256 spot;  \n        uint256 line;  \n        uint256 dust;  \n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n    mapping (bytes32 => mapping (address => uint)) public gem;  \n\n    function can(address, address) public view returns (uint);\n    function dai(address) public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) public;\n    function hope(address) public;\n    function move(address, address, uint) public;\n}\n\ncontract Gem {\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n    function allowance(address, address) public returns (uint);\n}\n\ncontract DaiJoin {\n    function vat() public returns (Vat);\n    function dai() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint256);\n\n    function balanceOf(address) public returns (uint256);\n\n    function approve(address, uint256) public;\n\n    function transfer(address, uint256) public returns (bool);\n\n    function transferFrom(address, address, uint256) public returns (bool);\n\n    function deposit() public payable;\n\n    function withdraw(uint256) public;\n}\n\ncontract SaverExchangeInterface {\n    function getBestPrice(\n        uint256 _amount,\n        address _srcToken,\n        address _destToken,\n        uint256 _exchangeType\n    ) public view returns (address, uint256);\n}\n\ncontract ConstantAddressesExchangeMainnet {\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x862F3dcF1104b8a9468fBb8B843C37C31B41eF09;\n\n    \n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\n\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\n\n    \n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\n}\n\ncontract ConstantAddressesExchangeKovan {\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\n\n    \n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\n\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\n\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\n\n    \n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\n}\n\ncontract ConstantAddressesExchange is ConstantAddressesExchangeMainnet {}\n\ncontract ExchangeHelper is ConstantAddressesExchange {\n\n    \n    \n    \n    \n    \n    \n    \n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\n        address wrapper;\n        uint price;\n        \n        uint[2] memory tokens;\n        bool success;\n\n        \n        tokens[1] = _data[0];\n\n        _src = wethToKyberEth(_src);\n        _dest = wethToKyberEth(_dest);\n\n        \n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\n\n        \n        if (_data[2] == 4) {\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n            }\n\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\n\n            \n            require(success && tokens[0] > 0, \"0x transaction failed\");\n        }\n\n        \n        \n        \n\n        \n\n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n\n        \n        \n\n        if (tokens[0] == 0) {\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\n\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\n\n            \n            if (_data[3] >= price) {\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n                }\n\n                \n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\n            }\n\n            \n            if (tokens[1] > 0) {\n                \n                if (tokens[1] != _data[0]) {\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\n                }\n\n                require(price > _data[1], \"Slippage hit onchain price\");\n\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n                    uint tRet;\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\n                    tokens[0] += tRet;\n                } else {\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\n\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\n                    } else {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\n                    }\n                }\n            }\n        }\n\n        return tokens[0];\n    }\n\n    \n    \n    \n    \n    \n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\n        bool success;\n\n        (success, ) = _addresses[0].call.value(_value)(_data);\n\n        uint tokensLeft = _amount;\n        uint tokensReturned = 0;\n        if (success){\n            \n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\n                tokensLeft = address(this).balance;\n            } else {\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\n            }\n\n            \n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\n                tokensReturned = address(this).balance;\n            } else {\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\n            }\n        }\n\n        return (success, tokensReturned, tokensLeft);\n    }\n\n    \n    \n    function wethToKyberEth(address _src) internal pure returns (address) {\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\n    }\n}\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; \n\n    constructor(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    function() external payable {}\n\n    \n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        returns (address target, bytes32 response)\n    {\n        target = cache.read(_code);\n        if (target == address(0)) {\n            \n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        auth\n        note\n        returns (bytes32 response)\n    {\n        require(_target != address(0));\n\n        \n        assembly {\n            let succeeded := delegatecall(\n                sub(gas, 5000),\n                _target,\n                add(_data, 0x20),\n                mload(_data),\n                0,\n                32\n            )\n            response := mload(0) \n            switch iszero(succeeded)\n                case 1 {\n                    \n                    revert(0, 0)\n                }\n        }\n    }\n\n    \n    function setCache(address _cacheAddr) public payable auth note returns (bool) {\n        require(_cacheAddr != address(0)); \n        cache = DSProxyCache(_cacheAddr); \n        return true;\n    }\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    \n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\ncontract Manager {\n    function last(address) public returns (uint);\n    function cdpCan(address, uint, address) public view returns (uint);\n    function ilks(uint) public view returns (bytes32);\n    function owns(uint) public view returns (address);\n    function urns(uint) public view returns (address);\n    function vat() public view returns (address);\n    function open(bytes32, address) public returns (uint);\n    function give(uint, address) public;\n    function cdpAllow(uint, address, uint) public;\n    function urnAllow(address, uint) public;\n    function frob(uint, int, int) public;\n    function flux(uint, address, uint) public;\n    function move(uint, address, uint) public;\n    function exit(address, uint, address, uint) public;\n    function quit(uint, address) public;\n    function enter(address, uint) public;\n    function shift(uint, uint) public;\n}\n\ncontract Join {\n    bytes32 public ilk;\n\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract SaverProxyHelper is DSMath {\n\n    \n    \n    \n    \n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\n        if (_daiVatBalance < mul(_amount, RAY)) {\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\n        }\n    }\n\n    \n    \n    function toRad(uint _wad) internal pure returns (uint) {\n        return mul(_wad, 10 ** 27);\n    }\n\n    \n    \n    \n    function convertTo18(address _joinAddr, uint256 _amount) internal returns (uint256) {\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\n    }\n\n    \n    \n    function toPositiveInt(uint _x) internal pure returns (int y) {\n        y = int(_x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    \n    \n    \n    \n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\n        uint dai = Vat(_vat).dai(_urn);\n\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n\n        amount = toPositiveInt(dai / rate);\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\n    }\n\n    \n    \n    \n    \n    \n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n        uint dai = Vat(_vat).dai(_usr);\n\n        uint rad = sub(mul(art, rate), dai);\n        daiAmount = rad / RAY;\n\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\n    }\n\n    \n    \n    function getCollateralAddr(address _joinAddr) internal returns (address) {\n        return address(Join(_joinAddr).gem());\n    }\n\n    \n    \n    \n    \n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\n        address vat = _manager.vat();\n        address urn = _manager.urns(_cdpId);\n\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\n\n        return (collateral, rmul(debt, rate));\n    }\n\n    \n    \n    \n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\n\n        return proxy.owner();\n    }\n}\n\ncontract MCDSaverProxy is SaverProxyHelper, ExchangeHelper {\n\n    uint public constant SERVICE_FEE = 400; \n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\n    bytes32 public constant USDC_ILK = 0x555344432d410000000000000000000000000000000000000000000000000000;\n\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n    Vat public constant vat = Vat(VAT_ADDRESS);\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\n\n    \n    \n    modifier boostCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n        address urn = manager.urns(_cdpId);\n\n        (uint collateralBefore, ) = vat.urns(ilk, urn);\n\n        _;\n\n        (uint collateralAfter, ) = vat.urns(ilk, urn);\n\n        require(collateralAfter > collateralBefore);\n    }\n\n    \n    \n    modifier repayCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n\n        uint beforeRatio = getRatio(_cdpId, ilk);\n\n        _;\n\n        uint afterRatio = getRatio(_cdpId, ilk);\n\n        require(afterRatio > beforeRatio || afterRatio == 0);\n    }\n\n    \n    \n    \n    \n    \n    \n    function repay(\n        \n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable repayCheck(_data[0]) {\n\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        \n        \n        \n        uint[3] memory temp;\n\n        temp[0] = drawCollateral(_data[0], ilk, _joinAddr, _data[1]);\n\n                                \n        uint[4] memory swapData = [temp[0], _data[2], _data[3], _data[5]];\n        temp[1] = swap(swapData, getCollateralAddr(_joinAddr), DAI_ADDRESS, _exchangeAddress, _callData);\n        temp[2] = sub(temp[1], getFee(temp[1], _data[4], owner));\n\n        paybackDebt(_data[0], ilk, temp[2], owner);\n\n        \n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n\n        SaverLogger(LOGGER_ADDRESS).LogRepay(_data[0], owner, temp[0], temp[1]);\n    }\n\n    \n    \n    \n    \n    \n    \n    function boost(\n        \n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable boostCheck(_data[0]) {\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        \n        \n        \n        uint[3] memory temp;\n\n        temp[0] = drawDai(_data[0], ilk, _data[1]);\n        temp[1] = sub(temp[0], getFee(temp[0], _data[4], owner));\n                                \n        uint[4] memory swapData = [temp[1], _data[2], _data[3], _data[5]];\n        temp[2] = swap(swapData, DAI_ADDRESS, getCollateralAddr(_joinAddr), _exchangeAddress, _callData);\n\n        addCollateral(_data[0], _joinAddr, temp[2]);\n\n        \n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n\n        SaverLogger(LOGGER_ADDRESS).LogBoost(_data[0], owner, temp[0], temp[2]);\n    }\n\n    \n    \n    \n    \n    \n    function drawDai(uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\n        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\n        uint daiVatBalance = vat.dai(manager.urns(_cdpId));\n\n        uint maxAmount = getMaxDebt(_cdpId, _ilk);\n\n        if (_daiAmount >= maxAmount) {\n            _daiAmount = sub(maxAmount, 1);\n        }\n\n        manager.frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\n        manager.move(_cdpId, address(this), toRad(_daiAmount));\n\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\n            vat.hope(DAI_JOIN_ADDRESS);\n        }\n\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\n\n        return _daiAmount;\n    }\n\n    \n    \n    \n    \n    function addCollateral(uint _cdpId, address _joinAddr, uint _amount) internal {\n        int convertAmount = 0;\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().deposit.value(_amount)();\n            convertAmount = toPositiveInt(_amount);\n        } else {\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\n        }\n\n        Join(_joinAddr).gem().approve(_joinAddr, _amount);\n        Join(_joinAddr).join(address(this), _amount);\n\n        vat.frob(\n            manager.ilks(_cdpId),\n            manager.urns(_cdpId),\n            address(this),\n            address(this),\n            convertAmount,\n            0\n        );\n\n    }\n\n    \n    \n    \n    \n    \n    \n    function drawCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr, uint _amount) internal returns (uint) {\n        uint maxCollateral = getMaxCollateral(_cdpId, _ilk);\n\n        if (_amount >= maxCollateral) {\n            _amount = sub(maxCollateral, 1);\n        }\n\n        uint frobAmount = _ilk == USDC_ILK ? _amount * (10 ** 12) : _amount;\n\n        manager.frob(_cdpId, -toPositiveInt(frobAmount), 0);\n        manager.flux(_cdpId, address(this), frobAmount);\n\n        Join(_joinAddr).exit(address(this), _amount);\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().withdraw(_amount); \n        }\n\n        return _amount;\n    }\n\n    \n    \n    \n    \n    \n    \n    function paybackDebt(uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\n        address urn = manager.urns(_cdpId);\n\n        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\n\n        if (_daiAmount > wholeDebt) {\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\n            _daiAmount = wholeDebt;\n        }\n\n        daiJoin.dai().approve(DAI_JOIN_ADDRESS, _daiAmount);\n        daiJoin.join(urn, _daiAmount);\n\n        manager.frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\n    }\n\n    \n    \n    \n    \n    function getFee(uint _amount, uint _gasCost, address _owner) internal returns (uint feeAmount) {\n        uint fee = SERVICE_FEE;\n\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_owner)) {\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_owner);\n        }\n\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\n\n        if (_gasCost != 0) {\n            uint ethDaiPrice = getPrice(ETH_ILK);\n            _gasCost = rmul(_gasCost, ethDaiPrice);\n\n            feeAmount = add(feeAmount, _gasCost);\n        }\n\n        \n        if (feeAmount > (_amount / 5)) {\n            feeAmount = _amount / 5;\n        }\n\n        ERC20(DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\n    }\n\n    \n    \n    \n    \n    function getMaxCollateral(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\n\n        return sub(sub(collateral, (div(mul(mat, debt), price))), 10);\n    }\n\n    \n    \n    \n    \n    function getMaxDebt(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (, uint mat) = spotter.ilks(_ilk);\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\n    }\n\n    \n    \n    function getPrice(bytes32 _ilk) public view returns (uint) {\n        (, uint mat) = spotter.ilks(_ilk);\n        (,,uint spot,,) = vat.ilks(_ilk);\n\n        return rmul(rmul(spot, spotter.par()), mat);\n    }\n\n    \n    \n    \n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice( _ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        if (debt == 0) return 0;\n\n        return rdiv(wmul(collateral, price), debt);\n    }\n\n    \n    \n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk) {\n        address urn = manager.urns(_cdpId);\n        ilk = manager.ilks(_cdpId);\n\n        (collateral, debt) = vat.urns(ilk, urn);\n        (,uint rate,,,) = vat.ilks(ilk);\n\n        debt = rmul(debt, rate);\n        price = getPrice(ilk);\n    }\n\n}\n\ncontract GemLike {\n    function approve(address, uint256) public;\n\n    function transfer(address, uint256) public;\n\n    function transferFrom(address, address, uint256) public;\n\n    function deposit() public payable;\n\n    function withdraw(uint256) public;\n}\n\ncontract ManagerLike {\n    function cdpCan(address, uint256, address) public view returns (uint256);\n\n    function ilks(uint256) public view returns (bytes32);\n\n    function owns(uint256) public view returns (address);\n\n    function urns(uint256) public view returns (address);\n\n    function vat() public view returns (address);\n\n    function open(bytes32, address) public returns (uint256);\n\n    function give(uint256, address) public;\n\n    function cdpAllow(uint256, address, uint256) public;\n\n    function urnAllow(address, uint256) public;\n\n    function frob(uint256, int256, int256) public;\n\n    function flux(uint256, address, uint256) public;\n\n    function move(uint256, address, uint256) public;\n\n    function exit(address, uint256, address, uint256) public;\n\n    function quit(uint256, address) public;\n\n    function enter(address, uint256) public;\n\n    function shift(uint256, uint256) public;\n}\n\ncontract VatLike {\n    function can(address, address) public view returns (uint256);\n\n    function ilks(bytes32) public view returns (uint256, uint256, uint256, uint256, uint256);\n\n    function dai(address) public view returns (uint256);\n\n    function urns(bytes32, address) public view returns (uint256, uint256);\n\n    function frob(bytes32, address, address, address, int256, int256) public;\n\n    function hope(address) public;\n\n    function move(address, address, uint256) public;\n}\n\ncontract GemJoinLike {\n    function dec() public returns (uint256);\n\n    function gem() public returns (GemLike);\n\n    function join(address, uint256) public payable;\n\n    function exit(address, uint256) public;\n}\n\ncontract GNTJoinLike {\n    function bags(address) public view returns (address);\n\n    function make(address) public returns (address);\n}\n\ncontract DaiJoinLike {\n    function vat() public returns (VatLike);\n\n    function dai() public returns (GemLike);\n\n    function join(address, uint256) public payable;\n\n    function exit(address, uint256) public;\n}\n\ncontract HopeLike {\n    function hope(address) public;\n\n    function nope(address) public;\n}\n\ncontract ProxyRegistryInterface {\n    function build(address) public returns (address);\n}\n\ncontract EndLike {\n    function fix(bytes32) public view returns (uint256);\n\n    function cash(bytes32, uint256) public;\n\n    function free(bytes32) public;\n\n    function pack(uint256) public;\n\n    function skim(bytes32, address) public;\n}\n\ncontract JugLike {\n    function drip(bytes32) public returns (uint256);\n}\n\ncontract PotLike {\n    function pie(address) public view returns (uint256);\n\n    function drip() public returns (uint256);\n\n    function join(uint256) public;\n\n    function exit(uint256) public;\n}\n\ncontract ProxyRegistryLike {\n    function proxies(address) public view returns (address);\n\n    function build(address) public returns (address);\n}\n\ncontract ProxyLike {\n    function owner() public view returns (address);\n}\n\ncontract Common {\n    uint256 constant RAY = 10**27;\n\n    \n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    \n    \n    function daiJoin_join(address apt, address urn, uint256 wad) public {\n        \n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\n        \n        DaiJoinLike(apt).dai().approve(apt, wad);\n        \n        DaiJoinLike(apt).join(urn, wad);\n    }\n}\n\ncontract MCDOpenProxyActions is Common {\n    \n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint256 x) internal pure returns (int256 y) {\n        y = int256(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n        rad = mul(wad, 10**27);\n    }\n\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\n        \n        \n        wad = mul(amt, 10**(18 - GemJoinLike(gemJoin).dec()));\n    }\n\n    function _getDrawDart(address vat, address jug, address urn, bytes32 ilk, uint256 wad)\n        internal\n        returns (int256 dart)\n    {\n        \n        uint256 rate = JugLike(jug).drip(ilk);\n\n        \n        uint256 dai = VatLike(vat).dai(urn);\n\n        \n        if (dai < mul(wad, RAY)) {\n            \n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\n            \n            dart = mul(uint256(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\n        }\n    }\n\n    function _getWipeDart(address vat, uint256 dai, address urn, bytes32 ilk)\n        internal\n        view\n        returns (int256 dart)\n    {\n        \n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n        \n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n\n        \n        dart = toInt(dai / rate);\n        \n        dart = uint256(dart) <= art ? -dart : -toInt(art);\n    }\n\n    function _getWipeAllWad(address vat, address usr, address urn, bytes32 ilk)\n        internal\n        view\n        returns (uint256 wad)\n    {\n        \n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n        \n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n        \n        uint256 dai = VatLike(vat).dai(usr);\n\n        uint256 rad = sub(mul(art, rate), dai);\n        wad = rad / RAY;\n\n        \n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n    \n\n    function transfer(address gem, address dst, uint256 wad) public {\n        GemLike(gem).transfer(dst, wad);\n    }\n\n    \n    function ethJoin_join(address apt, address urn) public payable {\n        \n        GemJoinLike(apt).gem().deposit.value(msg.value)();\n        \n        GemJoinLike(apt).gem().approve(address(apt), msg.value);\n        \n        GemJoinLike(apt).join(urn, msg.value);\n    }\n\n    \n    function gemJoin_join(address apt, address urn, uint256 wad, bool transferFrom) public {\n        \n        if (transferFrom) {\n            \n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\n            \n            GemJoinLike(apt).gem().approve(apt, wad);\n        }\n        \n        GemJoinLike(apt).join(urn, wad);\n    }\n\n    function hope(address obj, address usr) public {\n        HopeLike(obj).hope(usr);\n    }\n\n    function nope(address obj, address usr) public {\n        HopeLike(obj).nope(usr);\n    }\n\n    function open(address manager, bytes32 ilk, address usr) public returns (uint256 cdp) {\n        cdp = ManagerLike(manager).open(ilk, usr);\n    }\n\n    function give(address manager, uint256 cdp, address usr) public {\n        ManagerLike(manager).give(cdp, usr);\n    }\n\n    function move(address manager, uint256 cdp, address dst, uint256 rad) public {\n        ManagerLike(manager).move(cdp, dst, rad);\n    }\n\n    function frob(address manager, uint256 cdp, int256 dink, int256 dart) public {\n        ManagerLike(manager).frob(cdp, dink, dart);\n    }\n\n    function lockETH(address manager, address ethJoin, uint256 cdp) public payable {\n        \n        ethJoin_join(ethJoin, address(this));\n        \n        VatLike(ManagerLike(manager).vat()).frob(\n            ManagerLike(manager).ilks(cdp),\n            ManagerLike(manager).urns(cdp),\n            address(this),\n            address(this),\n            toInt(msg.value),\n            0\n        );\n    }\n\n    function lockGem(address manager, address gemJoin, uint256 cdp, uint256 wad, bool transferFrom)\n        public\n    {\n        \n        gemJoin_join(gemJoin, address(this), wad, transferFrom);\n        \n        VatLike(ManagerLike(manager).vat()).frob(\n            ManagerLike(manager).ilks(cdp),\n            ManagerLike(manager).urns(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(gemJoin, wad)),\n            0\n        );\n    }\n\n    function draw(address manager, address jug, address daiJoin, uint256 cdp, uint256 wad) public {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        \n        frob(manager, cdp, 0, _getDrawDart(vat, jug, urn, ilk, wad));\n        \n        move(manager, cdp, address(this), toRad(wad));\n        \n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        \n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\n    }\n\n    function lockETHAndDraw(\n        address manager,\n        address jug,\n        address ethJoin,\n        address daiJoin,\n        uint256 cdp,\n        uint256 wadD\n    ) public payable {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        \n        ethJoin_join(ethJoin, urn);\n        \n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\n        \n        move(manager, cdp, address(this), toRad(wadD));\n        \n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        \n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockETHAndDraw(\n        address manager,\n        address jug,\n        address ethJoin,\n        address daiJoin,\n        bytes32 ilk,\n        uint256 wadD,\n        address owner\n    ) public payable returns (uint256 cdp) {\n        cdp = open(manager, ilk, address(this));\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\n        give(manager, cdp, owner);\n    }\n\n    function lockGemAndDraw(\n        address manager,\n        address jug,\n        address gemJoin,\n        address daiJoin,\n        uint256 cdp,\n        uint256 wadC,\n        uint256 wadD,\n        bool transferFrom\n    ) public {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        \n        gemJoin_join(gemJoin, urn, wadC, transferFrom);\n        \n        frob(\n            manager,\n            cdp,\n            toInt(convertTo18(gemJoin, wadC)),\n            _getDrawDart(vat, jug, urn, ilk, wadD)\n        );\n        \n        move(manager, cdp, address(this), toRad(wadD));\n        \n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        \n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockGemAndDraw(\n        address manager,\n        address jug,\n        address gemJoin,\n        address daiJoin,\n        bytes32 ilk,\n        uint256 wadC,\n        uint256 wadD,\n        bool transferFrom,\n        address owner\n    ) public returns (uint256 cdp) {\n        cdp = open(manager, ilk, address(this));\n        lockGemAndDraw(manager, jug, gemJoin, daiJoin, cdp, wadC, wadD, transferFrom);\n        give(manager, cdp, owner);\n    }\n}\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        \n        \n        \n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        \n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    \n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        \n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        \n        \n        \n        \n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    \n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        \n        \n\n        \n        \n        \n        \n        \n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        \n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { \n            \n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IFlashLoanReceiver {\n\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\n}\n\ncontract ILendingPoolAddressesProvider {\n\n    function getLendingPool() public view returns (address);\n    function setLendingPoolImpl(address _pool) public;\n\n    function getLendingPoolCore() public view returns (address payable);\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public;\n\n    function getLendingPoolConfigurator() public view returns (address);\n    function setLendingPoolConfiguratorImpl(address _configurator) public;\n\n    function getLendingPoolDataProvider() public view returns (address);\n    function setLendingPoolDataProviderImpl(address _provider) public;\n\n    function getLendingPoolParametersProvider() public view returns (address);\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public;\n\n    function getTokenDistributor() public view returns (address);\n    function setTokenDistributor(address _tokenDistributor) public;\n\n\n    function getFeeProvider() public view returns (address);\n    function setFeeProviderImpl(address _feeProvider) public;\n\n    function getLendingPoolLiquidationManager() public view returns (address);\n    function setLendingPoolLiquidationManager(address _manager) public;\n\n    function getLendingPoolManager() public view returns (address);\n    function setLendingPoolManager(address _lendingPoolManager) public;\n\n    function getPriceOracle() public view returns (address);\n    function setPriceOracle(address _priceOracle) public;\n\n    function getLendingRateOracle() public view returns (address);\n    function setLendingRateOracle(address _lendingRateOracle) public;\n}\n\nlibrary EthAddressLib {\n\n    function ethAddress() internal pure returns(address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}\n\ncontract FlashLoanReceiverBase is IFlashLoanReceiver {\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    ILendingPoolAddressesProvider public addressesProvider;\n\n    constructor(ILendingPoolAddressesProvider _provider) public {\n        addressesProvider = _provider;\n    }\n\n    function () external payable {\n    }\n\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\n\n        address payable core = addressesProvider.getLendingPoolCore();\n\n        transferInternal(core,_reserve, _amount);\n    }\n\n    function transferInternal(address payable _destination, address _reserve, uint256  _amount) internal {\n        if(_reserve == EthAddressLib.ethAddress()) {\n            \n            _destination.call.value(_amount)(\"\");\n            return;\n        }\n\n        IERC20(_reserve).safeTransfer(_destination, _amount);\n\n\n    }\n\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\n        if(_reserve == EthAddressLib.ethAddress()) {\n\n            return _target.balance;\n        }\n\n        return IERC20(_reserve).balanceOf(_target);\n\n    }\n}\n\ncontract MCDOpenFlashLoan is MCDSaverProxy, FlashLoanReceiverBase {\n    \n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n\n    address public constant OPEN_PROXY_ACTIONS = 0x9F579EA6250304f1256C7b2A54a2910B653E8C26;\n\n    ILendingPoolAddressesProvider public LENDING_POOL_ADDRESS_PROVIDER = ILendingPoolAddressesProvider(0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5);\n\n    address payable public owner;\n\n    constructor()\n        FlashLoanReceiverBase(LENDING_POOL_ADDRESS_PROVIDER)\n        public {\n            owner = msg.sender;\n        }\n\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params) \n    external {\n\n        \n        require(_amount <= getBalanceInternal(address(this), _reserve), \n            \"Invalid balance for the contract\");\n\n        (\n            uint[6] memory data,\n            bytes32 ilk,\n            address[3] memory addrData,\n            bytes memory callData,\n            bool isEth\n        ) \n         = abi.decode(_params, (uint256[6],bytes32,address[3],bytes,bool));\n\n        openAndLeverage(data, ilk, addrData, callData, isEth, _fee);\n\n        transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\n    }\n\n    function openAndLeverage(\n        uint256[6] memory _data,\n        bytes32 _ilk,\n        address[3] memory addrData, \n        bytes memory _callData,\n        bool _isEth,\n        uint _fee\n    ) public {\n        \n        \n        uint256 collSwaped = swap(\n            [_data[1], _data[2], _data[3], _data[4]],\n            DAI_ADDRESS,\n            getCollateralAddr(addrData[0]),\n            addrData[1],\n            _callData\n        );\n\n        if (_isEth) {\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockETHAndDraw.value(address(this).balance)(\n                address(manager),\n                JUG_ADDRESS,\n                ETH_JOIN_ADDRESS,\n                DAI_JOIN_ADDRESS,\n                _ilk,\n                (_data[1] + _fee),\n                addrData[2]\n            );\n        } else {\n            ERC20(getCollateralAddr(addrData[0])).approve(OPEN_PROXY_ACTIONS, uint256(-1));\n\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockGemAndDraw(\n                address(manager),\n                JUG_ADDRESS,\n                addrData[0],\n                DAI_JOIN_ADDRESS,\n                _ilk,\n                (_data[0] + collSwaped),\n                (_data[1] + _fee),\n                true,\n                addrData[2]\n            );\n        }\n    }\n\n    function() external payable {}\n\n    \n    function withdrawStuckFunds(address _tokenAddr, uint _amount) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n            owner.transfer(_amount);\n        } else {\n            ERC20(_tokenAddr).transfer(owner, _amount);\n        }\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ILK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"name\":\"_joinAddr\",\"type\":\"address\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_PROXY_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ILK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LENDING_POOL_ADDRESS_PROVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"name\":\"addrData\",\"type\":\"address[3]\"},{\"name\":\"_callData\",\"type\":\"bytes\"},{\"name\":\"_isEth\",\"type\":\"bool\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"openAndLeverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"name\":\"_joinAddr\",\"type\":\"address\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getCdpDetailedInfo\",\"outputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MCDOpenFlashLoan","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}