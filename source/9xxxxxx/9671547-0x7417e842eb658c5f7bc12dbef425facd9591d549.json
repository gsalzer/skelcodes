{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/McdLaunchESSpell.sol\npragma solidity >0.4.13 >=0.5.12 <0.6.0;\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/dss-interfaces/src/dapp/DSAuthorityAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n// https://github.com/dapphub/ds-auth\ncontract DSAuthorityAbstract {\n    function canCall(address, address, bytes4) public view returns (bool);\n}\n\ncontract DSAuthEventsAbstract {\n    event LogSetAuthority (address indexed);\n    event LogSetOwner (address indexed);\n}\n\ncontract DSAuthAbstract is DSAuthEventsAbstract {\n    // DSAuthority  public  authority;\n    function authority() public view returns (DSAuthorityAbstract);\n    // address      public  owner;\n    function owner() public view returns (address);\n    function setOwner(address) public;\n    function setAuthority(DSAuthorityAbstract) public;\n}\n\n////// lib/dss-interfaces/src/dapp/DSPauseProxyAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n// https://github.com/dapphub/ds-pause\ncontract DSPauseProxyAbstract {\n    // address public owner;\n    function owner() public view returns (address);\n    function exec(address, bytes memory) public returns (bytes memory);\n}\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { DSPauseProxyAbstract } from \"./DSPauseProxyAbstract.sol\"; */\n/* import { DSAuthorityAbstract } from \"./DSAuthorityAbstract.sol\"; */\n\n// https://github.com/dapphub/ds-pause\ncontract DSPauseAbstract {\n    function setOwner(address) public;\n    function setAuthority(DSAuthorityAbstract) public;\n    function setDelay(uint256) public;\n    // mapping (bytes32 => bool) public plans;\n    function plans(bytes32) public view returns (bool);\n    // DSProxyAbstract public proxy;\n    function proxy() public view returns (DSPauseProxyAbstract);\n    // uint256 public delay;\n    function delay() public view returns (uint256);\n    function plot(address, bytes32, bytes memory, uint256) public;\n    function drop(address, bytes32, bytes memory, uint256) public;\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\n}\n\n////// lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n// MKR Token adheres to the DSToken interface\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\ncontract DSTokenAbstract {\n    // bytes32 public name;\n    function name() public view returns (bytes32);\n    // bytes32 public symbol;\n    function symbol() public view returns (bytes32);\n    // uint256 public decimals;\n    function decimals() public view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function transfer(address, uint256) external returns (bool);\n    function allowance(address, address) external view returns (uint256);\n    function approve(address, uint256) external returns (bool);\n    function approve(address) public returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function push(address, uint256) public;\n    function pull(address, uint256) public;\n    function move(address, address, uint256) public;\n    function mint(uint256) public;\n    function mint(address,uint) public;\n    function burn(uint256) public;\n    function burn(address,uint) public;\n    function setName(bytes32) public;\n    event Transfer(address, address, uint256);\n    event Approval(address, address, uint256);\n}\n\n////// lib/dss-interfaces/src/dapp/DSValueAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n// https://github.com/dapphub/ds-value/blob/master/src/value.sol\ncontract DSValueAbstract {\n    // bool public has;\n    function has() public view returns (bool);\n    // bytes32 public val;\n    function val() public view returns (bytes32);\n    function peek() public view returns (bytes32, bool);\n    function read() public view returns (bytes32);\n    function poke(bytes32) public;\n    function void() public;\n}\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\ncontract VatAbstract {\n    // mapping (address => uint) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    struct Ilk {\n        uint256 Art;   // Total Normalised Debt     [wad]\n        uint256 rate;  // Accumulated Rates         [ray]\n        uint256 spot;  // Price with Safety Margin  [ray]\n        uint256 line;  // Debt Ceiling              [rad]\n        uint256 dust;  // Urn Debt Floor            [rad]\n    }\n    struct Urn {\n        uint256 ink;   // Locked Collateral  [wad]\n        uint256 art;   // Normalised Debt    [wad]\n    }\n    // mapping (address => mapping (address => uint256)) public can;\n    function can(address, address) public view returns (uint256);\n    function hope(address) external;\n    function nope(address) external;\n    // mapping (bytes32 => Ilk) public ilks;\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n    // mapping (bytes32 => mapping (address => Urn)) public urns;\n    function urns(bytes32, address) public view returns (uint256, uint256);\n    // mapping (bytes32 => mapping (address => uint256)) public gem;  // [wad]\n    function gem(bytes32, address) public view returns (uint256);\n    // mapping (address => uint256) public dai;  // [rad]\n    function dai(address) public view returns (uint256);\n    // mapping (address => uint256) public sin;  // [rad]\n    function sin(address) public view returns (uint256);\n    // uint256 public debt;  // Total Dai Issued    [rad]\n    function debt() public view returns (uint256);\n    // uint256 public vice;  // Total Unbacked Dai  [rad]\n    function vice() public view returns (uint256);\n    // uint256 public Line;  // Total Debt Ceiling  [rad]\n    function Line() public view returns (uint256);\n    // uint256 public live;  // Access Flag\n    function live() public view returns (uint256);\n    function init(bytes32) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function cage() external;\n    function slip(bytes32, address, int256) external;\n    function flux(bytes32, address, address, uint256) external;\n    function move(address, address, uint256) external;\n    function frob(bytes32, address, address, address, int256, int256) external;\n    function fork(bytes32, address, address, int256, int256) external;\n    function grab(bytes32, address, address, address, int256, int256) external;\n    function heal(uint256) external;\n    function suck(address, address, uint256) external;\n    function fold(bytes32, address, int256) external;\n}\n\n\n////// lib/dss-interfaces/src/dss/FlapAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n/* import { DSTokenAbstract } from \"../dapp/DSTokenAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/flap.sol\ncontract FlapAbstract {\n    //mapping (address => uint256) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    struct Bid {\n        uint256 bid;\n        uint256 lot;\n        address guy;  // high bidder\n        uint48  tic;  // expiry time\n        uint48  end;\n    }\n    // mapping (uint256 => Bid) public bids;\n    function bids(uint256) public view returns (uint256);\n    // VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // TokenAbstract public gem;\n    function gem() public view returns (DSTokenAbstract);\n    // uint256 public ONE;\n    function ONE() public view returns (uint256);\n    // uint256 public beg;\n    function beg() public view returns (uint256);\n    // uint48 public ttl;\n    function ttl() public view returns (uint48);\n    // uint48 public tau;\n    function tau() public view returns (uint48);\n    // uint256 public kicks;\n    function kicks() public view returns (uint256);\n    // uint256 public live;\n    function live() public view returns (uint256);\n    event Kick(uint256, uint256, uint256);\n    function file(bytes32, uint256) external;\n    function kick(uint256, uint256) external returns (uint256);\n    function tick(uint256) external;\n    function tend(uint256, uint256, uint256) external;\n    function deal(uint256) external;\n    function cage(uint256) external;\n    function yank(uint256) external;\n}\n////// lib/dss-interfaces/src/dss/FlopAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n/* import { DSTokenAbstract } from \"../dapp/DSTokenAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/flop.sol\ncontract FlopAbstract {\n    // mapping (address => uint256) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    struct Bid {\n        uint256 bid;\n        uint256 lot;\n        address guy;  // high bidder\n        uint48  tic;  // expiry time\n        uint48  end;\n    }\n    // mapping (uint => Bid) public bids;\n    function bids(uint256) public view returns (uint256, uint256, address, uint48, uint48);\n    //VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // TokenAbstract public gem;\n    function gem() public view returns (DSTokenAbstract);\n    // uint256 public ONE;\n    function ONE() public view returns (uint256);\n    // uint256 public beg;  // 5% minimum bid increase\n    function beg() public view returns (uint256);\n    // uint256 public pad;  // 50% lot increase for tick\n    function pad() public view returns (uint256);\n    // uint48 public ttl;  // 3 hours bid lifetime\n    function ttl() public view returns (uint48);\n    // uint48 public tau;   // 2 days total auction length\n    function tau() public view returns (uint48);\n    // uint256 public kicks;\n    function kicks() public view returns (uint256);\n    // uint256 public live;\n    function live() public view returns (uint256);\n    // address public vow;\n    function vow() public view returns (address);\n    event Kick(uint256, uint256, uint256, address);\n    function file(bytes32, uint256) external;\n    function kick(address, uint256, uint256) external returns (uint256);\n    function tick(uint256) external;\n    function dent(uint256, uint256, uint256) external;\n    function deal(uint256) external;\n    function cage() external;\n    function yank(uint256) external;\n}\n////// lib/dss-interfaces/src/dss/VowAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { FlopAbstract } from \"./FlopAbstract.sol\"; */\n/* import { FlapAbstract } from \"./FlapAbstract.sol\"; */\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\ncontract VowAbstract {\n    // mapping (address => uint) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address usr) external;\n    function deny(address usr) external;\n    // VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // FlapAbstract public flapper;\n    function flapper() public view returns (FlapAbstract);\n    // FlopAbstract public flopper;\n    function flopper() public view returns (FlopAbstract);\n    // mapping (uint256 => uint256) public sin; // debt queue\n    function sin(uint256) public view returns (uint256);\n    // uint256 public Sin;   // queued debt          [rad]\n    function Sin() public view returns (uint256);\n    // uint256 public Ash;\n    function Ash() public view returns (uint256);\n    // uint256 public wait;  // flop delay\n    function wait() public view returns (uint256);\n    // uint256 public dump;  // flop initial lot size  [wad]\n    function dump() public view returns (uint256);\n    // uint256 public sump;  // flop fixed bid size    [rad]\n    function sump() public view returns (uint256);\n    // uint256 public bump;  // flap fixed lot size    [rad]\n    function bump() public view returns (uint256);\n    // uint256 public hump;  // surplus buffer       [rad]\n    function hump() public view returns (uint256);\n    // uint256 public live;\n    function live() public view returns (uint256);\n    function file(bytes32, uint256) external;\n    function file(bytes32, address) external;\n    function fess(uint256) external;\n    function flog(uint256) external;\n    function heal(uint256) external;\n    function kiss(uint256) external;\n    function flop() external returns (uint256);\n    function flap() external returns (uint256);\n    function cage() external;\n}\n////// lib/dss-interfaces/src/dss/CatAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n/* import { VowAbstract } from \"./VowAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\ncontract CatAbstract {\n    // mapping (address => uint) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    struct Ilk {\n        address flip;  // Liquidator\n        uint256 chop;  // Liquidation Penalty   [ray]\n        uint256 lump;  // Liquidation Quantity  [wad]\n    }\n    // mapping (bytes32 => Ilk) public ilks;\n    function ilks(bytes32) public view returns (address, uint256, uint256);\n    // uint256 public live;\n    function live() public view returns (uint256);\n    // VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // VowAbstract public vow;\n    function vow() public view returns (VowAbstract);\n    event Bite(bytes32, address, uint256, uint256, uint256, address, uint256);\n    // uint256 public ONE;\n    function ONE() public returns (uint256);\n    function file(bytes32, address) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n    function bite(bytes32, address) external returns (uint256);\n    function cage() external;\n}\n////// lib/dss-interfaces/src/dss/PotAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\ncontract PotAbstract {\n    // mapping (address => uint256) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    // mapping (address => uint256) public pie;  // user Savings Dai\n    function pie(address) public view returns (uint256);\n    // uint256 public Pie;  // total Savings Dai\n    function Pie() public view returns (uint256);\n    // uint256 public dsr;  // the Dai Savings Rate\n    function dsr() public view returns (uint256);\n    // uint256 public chi;  // the Rate Accumulator\n    function chi() public view returns (uint256);\n    // VatAbstract public vat;  // CDP engine\n    function vat() public view returns (VatAbstract);\n    // address public vow;  // debt engine\n    function vow() public view returns (address);\n    // uint256 public rho;  // time of last drip\n    function rho() public view returns (uint256);\n    // uint256 public live;  // Access Flag\n    function live() public view returns (uint256);\n    function file(bytes32, uint256) external;\n    function file(bytes32, address) external;\n    function cage() external;\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n////// lib/dss-interfaces/src/dss/PipAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { DSValueAbstract } from \"../dapp/DSValueAbstract.sol\"; */\n\n// Pip is a DS-Value used within the DSS\ncontract PipAbstract is DSValueAbstract {}\n////// lib/dss-interfaces/src/dss/SpotAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n/* import { PipAbstract } from \"./PipAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\ncontract SpotAbstract {\n    // mapping (address => uint) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    struct Ilk {\n        PipAbstract pip;\n        uint256 mat;\n    }\n    // mapping (bytes32 => Ilk) public ilks;\n    function ilks(bytes32) public view returns (PipAbstract, uint256);\n    // VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // uint256 public par; // ref per dai\n    function par() public view returns (uint256);\n    // uint256 public live;\n    function live() public view returns (uint256);\n    event Poke(bytes32, bytes32, uint256);\n    // uint256 public ONE;\n    function ONE() public view returns (uint256);\n    function file(bytes32, bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function poke(bytes32) external;\n    function cage() external;\n}\n////// lib/dss-interfaces/src/dss/EndAbstract.sol\n/* pragma solidity ^0.5.12; */\n\n/* import { VatAbstract } from \"./VatAbstract.sol\"; */\n/* import { CatAbstract } from \"./CatAbstract.sol\"; */\n/* import { VowAbstract } from \"./VowAbstract.sol\"; */\n/* import { PotAbstract } from \"./PotAbstract.sol\"; */\n/* import { SpotAbstract } from \"./SpotAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/end.sol\ncontract EndAbstract {\n    // mapping (address => uint) public wards;\n    function wards(address) public view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    // VatAbstract public vat;\n    function vat() public view returns (VatAbstract);\n    // CatAbstract public cat;\n    function cat() public view returns (CatAbstract);\n    // VowAbstract public vow;\n    function vow() public view returns (VowAbstract);\n    // PotAbstract public pot;\n    function pot() public view returns (PotAbstract);\n    // SpotAbstract public spot;\n    function spot() public view returns (SpotAbstract);\n    // uint256  public live;  // cage flag\n    function live() public view returns (uint256);\n    // uint256  public when;  // time of cage\n    function when() public view returns (uint256);\n    //uint256  public wait;  // processing cooldown length\n    function wait() public view returns (uint256);\n    // uint256  public debt;  // total outstanding dai following processing [rad]\n    function debt() public view returns (uint256);\n    // mapping (bytes32 => uint256) public tag;  // cage price           [ray]\n    function tag(bytes32) public view returns (uint256);\n    // mapping (bytes32 => uint256) public gap;  // collateral shortfall [wad]\n    function gap(bytes32) public view returns (uint256);\n    // mapping (bytes32 => uint256) public Art;  // total debt per ilk   [wad]\n    function Art(bytes32) public view returns (uint256);\n    // mapping (bytes32 => uint256) public fix;  // final cash price     [ray]\n    function fix(bytes32) public view returns (uint256);\n    // mapping (address => uint256) public bag;  // [wad]\n    function bag(address) public view returns (uint256);\n    // mapping (bytes32 => mapping (address => uint256)) public out;  // [wad]\n    function out(bytes32, address) public view returns (uint256);\n    // uint256 public WAD;\n    function WAD() public view returns (uint256);\n    // uint256 public RAY;\n    function RAY() public view returns (uint256);\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function cage() external;\n    function cage(bytes32) external;\n    function skip(bytes32, uint256) external;\n    function skim(bytes32, address) external;\n    function free(bytes32) external;\n    function thaw() external;\n    function flow(bytes32) external;\n    function pack(uint256) external;\n    function cash(bytes32, uint256) external;\n}\n////// src/McdLaunchESSpell.sol\n// Copyright (C) 2019 Maker Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.12; */\n\n/* import \"ds-math/math.sol\"; */\n\n/* import { DSPauseAbstract } from \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\"; */\n/* import { EndAbstract } from \"lib/dss-interfaces/src/dss/EndAbstract.sol\"; */\n\ncontract ShutdownAction {\n    address constant END = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\n\n    function execute() public {\n        EndAbstract end = EndAbstract(END);\n\n        // First we freeze the system and lock the prices for each ilk\n        end.cage();\n\n        // The foundation cage keeper process will detect the end.cage() and\n        //   initiate a cage of all of the ilks in the system. These are not\n        //   caged in the spell because they are unauthed calls that can be\n        //   initiated against the end module by any community member after\n        //   the End module is caged, and it is not worth risking a revert.\n        // end.cage('ETH-A');\n        // end.cage('BAT-A');\n        // end.cage('SAI');\n    }\n}\n\n// Spell to trigger MCD Emergency Shutdown via governance action\ncontract McdLaunchESSpell is DSMath {\n    DSPauseAbstract public pause = DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n    address         public action;\n    bytes32         public tag;\n    uint256         public eta;\n    bytes           public sig;\n    bool            public done;\n\n    constructor() public {\n        sig = abi.encodeWithSignature(\"execute()\");\n        action = address(new ShutdownAction());\n        bytes32 _tag;\n        address _action = action;\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(eta == 0, \"spell-already-scheduled\");\n        eta = add(now, DSPauseAbstract(pause).delay());\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"McdLaunchESSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}