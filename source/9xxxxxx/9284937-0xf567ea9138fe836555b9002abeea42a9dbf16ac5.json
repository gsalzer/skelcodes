{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract HashTimeLock {\r\n  mapping(bytes32 => LockContract) public contracts;\r\n\r\n  enum SwapStatus { INVALID, ACTIVE, REFUNDED, WITHDRAWN, EXPIRED }\r\n\r\n  struct LockContract {\r\n    uint256 inputAmount;\r\n    uint256 outputAmount;\r\n    uint256 expiration;\r\n    bytes32 hashLock;\r\n    SwapStatus status;\r\n    address payable sender;\r\n    address payable receiver;\r\n    string outputNetwork;\r\n    string outputAddress;\r\n  }\r\n\r\n  event Withdraw(\r\n    bytes32 indexed id,\r\n    bytes32 secret,\r\n    bytes32 hashLock,\r\n    address indexed sender,\r\n    address indexed receiver\r\n  );\r\n\r\n  event Refund(\r\n    bytes32 indexed id,\r\n    bytes32 hashLock,\r\n    address indexed sender,\r\n    address indexed receiver\r\n  );\r\n\r\n  event NewContract(\r\n    uint256 inputAmount,\r\n    uint256 outputAmount,\r\n    uint256 expiration,\r\n    bytes32 indexed id,\r\n    bytes32 hashLock,\r\n    address indexed sender,\r\n    address indexed receiver,\r\n    string outputNetwork,\r\n    string outputAddress\r\n  );\r\n\r\n  modifier withdrawable(bytes32 id, bytes32 secret) {\r\n    LockContract memory tempContract = contracts[id];\r\n    require(tempContract.status == SwapStatus.ACTIVE, 'SWAP_NOT_ACTIVE');\r\n    require(tempContract.expiration > block.timestamp, 'INVALID_TIME');\r\n    require(\r\n      tempContract.hashLock == sha256(abi.encodePacked(secret)),\r\n      'INVALID_SECRET'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier refundable(bytes32 id) {\r\n    LockContract memory tempContract = contracts[id];\r\n    require(tempContract.status == SwapStatus.ACTIVE, 'SWAP_NOT_ACTIVE');\r\n    require(tempContract.expiration <= block.timestamp, 'INVALID_TIME');\r\n    require(tempContract.sender == msg.sender, 'INVALID_SENDER');\r\n    _;\r\n  }\r\n\r\n  function newContract(\r\n    uint256 outputAmount,\r\n    uint256 expiration,\r\n    bytes32 hashLock,\r\n    address payable receiver,\r\n    string memory outputNetwork,\r\n    string memory outputAddress\r\n  ) public payable {\r\n    address payable sender = msg.sender;\r\n    uint256 inputAmount = msg.value;\r\n\r\n    require(expiration > block.timestamp, 'INVALID_TIME');\r\n\r\n    require(inputAmount > 0, 'INVALID_AMOUNT');\r\n\r\n    bytes32 id = sha256(\r\n      abi.encodePacked(sender, receiver, inputAmount, hashLock, expiration)\r\n    );\r\n\r\n    contracts[id] = LockContract(\r\n      inputAmount,\r\n      outputAmount,\r\n      expiration,\r\n      hashLock,\r\n      SwapStatus.ACTIVE,\r\n      sender,\r\n      receiver,\r\n      outputNetwork,\r\n      outputAddress\r\n    );\r\n\r\n    emit NewContract(\r\n      inputAmount,\r\n      outputAmount,\r\n      expiration,\r\n      id,\r\n      hashLock,\r\n      sender,\r\n      receiver,\r\n      outputNetwork,\r\n      outputAddress\r\n    );\r\n  }\r\n\r\n  function withdraw(bytes32 id, bytes32 secret)\r\n    public\r\n    withdrawable(id, secret)\r\n    returns (bool)\r\n  {\r\n    LockContract storage c = contracts[id];\r\n    c.status = SwapStatus.WITHDRAWN;\r\n    c.receiver.transfer(c.inputAmount);\r\n    emit Withdraw(id, secret, c.hashLock, c.sender, c.receiver);\r\n    return true;\r\n  }\r\n\r\n  function refund(bytes32 id) external refundable(id) returns (bool) {\r\n    LockContract storage c = contracts[id];\r\n    c.status = SwapStatus.REFUNDED;\r\n    c.sender.transfer(c.inputAmount);\r\n    emit Refund(id, c.hashLock, c.sender, c.receiver);\r\n    return true;\r\n  }\r\n\r\n  function getContract(bytes32 id) public view returns (LockContract memory) {\r\n    LockContract memory c = contracts[id];\r\n    return c;\r\n  }\r\n\r\n  function contractExists(bytes32 id) public view returns (bool) {\r\n    return contracts[id].status != SwapStatus.INVALID;\r\n  }\r\n\r\n  function getStatus(bytes32[] memory ids)\r\n    public\r\n    view\r\n    returns (uint8[] memory)\r\n  {\r\n    uint8[] memory result = new uint8[](ids.length);\r\n\r\n    for (uint256 index = 0; index < ids.length; index++) {\r\n      result[index] = getStatus(ids[index]);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function getStatus(bytes32 id) public view returns (uint8 result) {\r\n    LockContract memory tempContract = contracts[id];\r\n\r\n    if (\r\n      tempContract.status == SwapStatus.ACTIVE &&\r\n      tempContract.expiration < block.timestamp\r\n    ) {\r\n      result = uint8(SwapStatus.EXPIRED);\r\n    } else {\r\n      result = uint8(tempContract.status);\r\n    }\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"name\":\"NewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"enum HashTimeLock.SwapStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"enum HashTimeLock.SwapStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"internalType\":\"struct HashTimeLock.LockContract\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"name\":\"newContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HashTimeLock","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fa8ae950ed507bcfa88278a3b339331838f330d133c9362110dd8c89662608cc"}]}