{"status":"1","message":"OK","result":[{"SourceCode":"{\"RockFlameBTC.sol\":{\"content\":\"pragma solidity ^0.4.24;\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface ERC20 {\\n    function balanceOf(address who) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ncontract RockFlameBTC {\\n    using SafeMath for uint256;\\n\\n    // BCNT token contract\\n    ERC20 public BCNTToken;\\n\\n    // Roles\\n    address public bincentiveHot; // i.e., Platform Owner\\n    address public bincentiveCold;\\n    address[] public rockInvestors;\\n\\n    uint256 public numMidwayQuitInvestors;\\n    uint256 public numAUMDistributedInvestors; // i.e., number of investors that already received AUM\\n\\n    // Contract(Fund) Status\\n    // 0: not initialized\\n    // 1: initialized\\n    // 2: not enough fund came in in time\\n    // 3: fundStarted(skipped)\\n    // 4: running\\n    // 5: stoppped\\n    // 6: closed\\n    uint256 public fundStatus;\\n\\n    // Money\\n    uint256 public totalRockInvestedAmount;\\n    mapping(address =\\u003e uint256) public rockInvestedAmount;\\n\\n    uint256 public BCNTLockAmount;\\n\\n    uint256 public returnedBTCAmounts;\\n\\n    // Events\\n    event Deposit(address indexed investor, uint256 amount);\\n    event StartFund(uint256 num_investors, uint256 totalInvestedAmount, uint256 BCNTLockAmount);\\n    event AbortFund(uint256 num_investors, uint256 totalInvestedAmount);\\n    event MidwayQuit(address indexed investor, uint256 investAmount, uint256 BCNTWithdrawAmount);\\n    event ReturnAUM(uint256 amountBTC);\\n    event DistributeAUM(address indexed to, uint256 amountBTC);\\n\\n\\n    // Modifiers\\n    modifier initialized() {\\n        require(fundStatus == 1);\\n        _;\\n    }\\n\\n    // modifier fundStarted() {\\n    //     require(fundStatus == 3);\\n    //     _;\\n    // }\\n\\n    modifier running() {\\n        require(fundStatus == 4);\\n        _;\\n    }\\n\\n    modifier stopped() {\\n        require(fundStatus == 5);\\n        _;\\n    }\\n\\n    // modifier afterStartedBeforeStopped() {\\n    //     require((fundStatus \\u003e= 3) \\u0026\\u0026 (fundStatus \\u003c 5));\\n    //     _;\\n    // }\\n\\n    modifier closedOrAborted() {\\n        require((fundStatus == 6) || (fundStatus == 2));\\n        _;\\n    }\\n\\n    modifier isBincentive() {\\n        require(\\n            (msg.sender == bincentiveHot) || (msg.sender == bincentiveCold)\\n        );\\n        _;\\n    }\\n\\n    modifier isBincentiveCold() {\\n        require(msg.sender == bincentiveCold);\\n        _;\\n    }\\n\\n    modifier isInvestor() {\\n        // bincentive is not investor\\n        require(msg.sender != bincentiveHot);\\n        require(msg.sender != bincentiveCold);\\n        require(rockInvestedAmount[msg.sender] \\u003e 0);\\n        _;\\n    }\\n\\n    // Getter Functions\\n\\n\\n    // Investor Deposit\\n    function deposit(address[] investors, uint256[] depositBTCAmounts) initialized isBincentive public {\\n        require(investors.length \\u003e 0, \\\"Must has at least one investor\\\");\\n        require(investors.length == depositBTCAmounts.length, \\\"Input not of the same length\\\");\\n\\n        address investor;\\n        uint256 depositBTCAmount;\\n        for(uint i = 0; i \\u003c investors.length; i++) {\\n            investor = investors[i];\\n            depositBTCAmount = depositBTCAmounts[i];\\n\\n            require((investor != bincentiveHot) \\u0026\\u0026 (investor != bincentiveCold));\\n\\n            totalRockInvestedAmount = totalRockInvestedAmount.add(depositBTCAmount);\\n            if(rockInvestedAmount[investor] == 0) {\\n                rockInvestors.push(investor);\\n            }\\n            rockInvestedAmount[investor] = rockInvestedAmount[investor].add(depositBTCAmount);\\n\\n            emit Deposit(investor, depositBTCAmount);\\n        }\\n    }\\n\\n    // Start Investing\\n    function start(uint256 _BCNTLockAmount) initialized isBincentive public {\\n        // Transfer and lock BCNT into the contract\\n        require(BCNTToken.transferFrom(bincentiveCold, address(this), _BCNTLockAmount));\\n        BCNTLockAmount = _BCNTLockAmount;\\n\\n        // Run it\\n        fundStatus = 4;\\n        emit StartFund(rockInvestors.length, totalRockInvestedAmount, BCNTLockAmount);\\n    }\\n\\n    // NOTE: might consider changing to withdrawal pattern\\n    // Not Enough Fund\\n    function notEnoughFund() initialized isBincentive public {\\n        fundStatus = 2;\\n        emit AbortFund(rockInvestors.length, totalRockInvestedAmount);\\n    }\\n\\n    // Investor quit and withdraw\\n    function midwayQuitByAdmin(address _investor) running isBincentive public {\\n        require(_investor != bincentiveHot \\u0026\\u0026 _investor != bincentiveCold);\\n        uint256 investor_amount = rockInvestedAmount[_investor];\\n        rockInvestedAmount[_investor] = 0;\\n\\n        // Subtract total invest amount and transfer investor\\u0027s share to `bincentiveCold`\\n        uint256 totalAmount = totalRockInvestedAmount;\\n        totalRockInvestedAmount = totalRockInvestedAmount.sub(investor_amount);\\n        rockInvestedAmount[bincentiveCold] = rockInvestedAmount[bincentiveCold].add(investor_amount);\\n\\n        uint256 BCNTWithdrawAmount = BCNTLockAmount.mul(investor_amount).div(totalAmount);\\n        BCNTLockAmount = BCNTLockAmount.sub(BCNTWithdrawAmount);\\n        require(BCNTToken.transfer(_investor, BCNTWithdrawAmount));\\n\\n        numMidwayQuitInvestors = numMidwayQuitInvestors.add(1);\\n        // Close the contract if every investor has quit\\n        if(numMidwayQuitInvestors == rockInvestors.length) {\\n            fundStatus = 6;\\n        }\\n\\n        emit MidwayQuit(_investor, investor_amount, BCNTWithdrawAmount);\\n    }\\n\\n\\n    // Investor quit and withdraw\\n    function midwayQuit() running isInvestor public {\\n        uint256 investor_amount = rockInvestedAmount[msg.sender];\\n        rockInvestedAmount[msg.sender] = 0;\\n\\n        // Subtract total invest amount and transfer investor\\u0027s share to `bincentiveCold`\\n        uint256 totalAmount = totalRockInvestedAmount;\\n        totalRockInvestedAmount = totalRockInvestedAmount.sub(investor_amount);\\n        rockInvestedAmount[bincentiveCold] = rockInvestedAmount[bincentiveCold].add(investor_amount);\\n\\n        uint256 BCNTWithdrawAmount = BCNTLockAmount.mul(investor_amount).div(totalAmount);\\n        BCNTLockAmount = BCNTLockAmount.sub(BCNTWithdrawAmount);\\n        require(BCNTToken.transfer(msg.sender, BCNTWithdrawAmount));\\n\\n        numMidwayQuitInvestors = numMidwayQuitInvestors.add(1);\\n        // Close the contract if every investor has quit\\n        if(numMidwayQuitInvestors == rockInvestors.length) {\\n            fundStatus = 6;\\n        }\\n\\n        emit MidwayQuit(msg.sender, investor_amount, BCNTWithdrawAmount);\\n    }\\n\\n    // Return AUM\\n    function returnAUM(uint256 BTCAmount) running isBincentiveCold public {\\n\\n        returnedBTCAmounts = BTCAmount;\\n\\n        emit ReturnAUM(BTCAmount);\\n\\n        fundStatus = 5;\\n    }\\n\\n    // Distribute AUM\\n    function distributeAUM(uint256 numInvestorsToDistribute) stopped isBincentive public {\\n        require(numAUMDistributedInvestors.add(numInvestorsToDistribute) \\u003c= rockInvestors.length, \\\"Distributing to more than total number of rockInvestors\\\");\\n\\n        uint256 totalBTCReturned = returnedBTCAmounts;\\n        // Count `bincentiveCold`\\u0027s share in total amount when distributing AUM\\n        uint256 totalAmount = totalRockInvestedAmount.add(rockInvestedAmount[bincentiveCold]);\\n\\n        uint256 BTCDistributeAmount;\\n        address investor;\\n        uint256 investor_amount;\\n        // Distribute BTC to rockInvestors\\n        for(uint i = numAUMDistributedInvestors; i \\u003c (numAUMDistributedInvestors.add(numInvestorsToDistribute)); i++) {\\n            investor = rockInvestors[i];\\n            if(rockInvestedAmount[investor] == 0) continue;\\n            investor_amount = rockInvestedAmount[investor];\\n            rockInvestedAmount[investor] = 0;\\n\\n            BTCDistributeAmount = totalBTCReturned.mul(investor_amount).div(totalAmount);\\n\\n            emit DistributeAUM(investor, BTCDistributeAmount);\\n        }\\n\\n        numAUMDistributedInvestors = numAUMDistributedInvestors.add(numInvestorsToDistribute);\\n        // If all rockInvestors have received AUM,\\n        // distribute AUM and return BCNT stake to `bincentiveCold` then close the fund.\\n        if(numAUMDistributedInvestors \\u003e= rockInvestors.length) {\\n            returnedBTCAmounts = 0;\\n            totalRockInvestedAmount = 0;\\n            // Distribute BTC and BCNT to `bincentiveCold`\\n            if(rockInvestedAmount[bincentiveCold] \\u003e 0) {\\n                investor_amount = rockInvestedAmount[bincentiveCold];\\n                rockInvestedAmount[bincentiveCold] = 0;\\n\\n                BTCDistributeAmount = totalBTCReturned.mul(investor_amount).div(totalAmount);\\n\\n                emit DistributeAUM(bincentiveCold, BTCDistributeAmount);\\n            }\\n\\n            // Transfer the BCNT stake left back to `bincentiveCold`\\n            uint256 _BCNTLockAmount = BCNTLockAmount;\\n            BCNTLockAmount = 0;\\n            require(BCNTToken.transfer(bincentiveCold, _BCNTLockAmount));\\n\\n            fundStatus = 6;\\n        }\\n    }\\n\\n    // Constructor\\n    constructor(\\n        address _BCNTToken,\\n        address _bincentiveHot,\\n        address _bincentiveCold) public {\\n\\n        BCNTToken = ERC20(_BCNTToken);\\n        bincentiveHot = _bincentiveHot;\\n        bincentiveCold = _bincentiveCold;\\n\\n        // Initialized the contract\\n        fundStatus = 1;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveHot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rockInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"midwayQuit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BCNTLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMidwayQuitInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"midwayQuitByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BCNTToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numInvestorsToDistribute\",\"type\":\"uint256\"}],\"name\":\"distributeAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnedBTCAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"BTCAmount\",\"type\":\"uint256\"}],\"name\":\"returnAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_BCNTLockAmount\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRockInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rockInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveCold\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAUMDistributedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"depositBTCAmounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notEnoughFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_BCNTToken\",\"type\":\"address\"},{\"name\":\"_bincentiveHot\",\"type\":\"address\"},{\"name\":\"_bincentiveCold\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInvestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BCNTLockAmount\",\"type\":\"uint256\"}],\"name\":\"StartFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInvestedAmount\",\"type\":\"uint256\"}],\"name\":\"AbortFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BCNTWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"MidwayQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountBTC\",\"type\":\"uint256\"}],\"name\":\"ReturnAUM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBTC\",\"type\":\"uint256\"}],\"name\":\"DistributeAUM\",\"type\":\"event\"}]","ContractName":"RockFlameBTC","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009669890e48f330acd88b78d63e1a6b3482652cd9000000000000000000000000776e2337e323d11009cc4d484c7b39313f5c791f00000000000000000000000044620c73b430234104247dffdae4868b5bbe9e73","Library":"","LicenseType":"None","SwarmSource":"bzzr://fb19c1c1f38e0d5e14032971458c3d7e98cbc75d895941f63248a6390463362f"}]}