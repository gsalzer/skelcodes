{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAuthorization.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IAuthorization {\r\n    function getKycAddress() external view returns (address);\r\n\r\n    function getDepositAddress() external view returns (address);\r\n\r\n    function hasDeposited(address user) external view returns (bool);\r\n\r\n    function isKYCConfirmed(address user) external view returns (bool);\r\n\r\n    function setKYCRegistry(address _kycAddress) external returns (bool);\r\n\r\n    function setDepositRegistry(address _depositAddress) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ILoanContract.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface ILoanContract {\r\n    function onFundingReceived(address lender, uint256 amount) external returns (bool);\r\n    function withdrawRepayment() external;\r\n    function withdrawRepaymentAndDeposit() external;\r\n    function withdrawLoan() external;\r\n    function onRepaymentReceived(address from, uint256 amount) external returns (bool);\r\n    function getInterestRate() external view returns (uint256);\r\n    function calculateValueWithInterest(uint256 value) external view returns (uint256);\r\n    function getMaxAmount() external view returns (uint256);\r\n    function getAuctionBalance() external view returns (uint256);\r\n    function getTokenAddress() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IDAIProxy.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IDAIProxy {\r\n    function fund(address loanAddress, uint256 fundingAmount) external;\r\n    function repay(address loanAddress, uint256 repaymentAmount) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapSwapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface IUniswapSwapper {\r\n    event Swap(\r\n        address caller,\r\n        address guy,\r\n        address inputToken,\r\n        address outputToken,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount,\r\n        uint256 inputTokenSpent\r\n    );\r\n\r\n    function init(address _factoryAddress) external returns (bool);\r\n\r\n    function isDestroyed() external view returns (bool);\r\n\r\n    function swap(\r\n        address payable guy,\r\n        address inputTokenAddress,\r\n        address outputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount\r\n    ) external;\r\n\r\n    function swapEth(address payable guy, address outputTokenAddress, uint256 outputTokenAmount)\r\n        external\r\n        payable;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapSwapperFactory.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface IUniswapSwapperFactory {\r\n    event SwapContract(address newSwap);\r\n\r\n    function setUniswapAddress(address _uniswapAddress) external;\r\n\r\n    function setLibraryAddress(address _libraryAddress) external;\r\n\r\n    function deploy() external returns (address proxyAddress);\r\n}\r\n\r\n// File: contracts/libs/ERC20Wrapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20Wrapper {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _quantity) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _quantity) external returns (bool);\r\n    function approve(address _spender, uint256 _quantity) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\nlibrary ERC20Wrapper {\r\n    function balanceOf(address _token, address _owner) external view returns (uint256) {\r\n        return IERC20Wrapper(_token).balanceOf(_owner);\r\n    }\r\n\r\n    function allowance(address _token, address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20Wrapper(_token).allowance(owner, spender);\r\n    }\r\n\r\n    function transfer(address _token, address _to, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transfer(_to, _quantity);\r\n\r\n            require(checkSuccess(), \"ERC20Wrapper.transfer: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transfer(_to, _quantity);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _token, address _from, address _to, uint256 _quantity)\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n            // Check that transferFrom returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.transferFrom: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n        }\r\n    }\r\n\r\n    function approve(address _token, address _spender, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).approve(_spender, _quantity);\r\n            // Check that approve returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.approve: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).approve(_spender, _quantity);\r\n        }\r\n    }\r\n\r\n    function isIssuedToken(address _token) private view returns (bool) {\r\n        return (keccak256(abi.encodePacked((IERC20Wrapper(_token).symbol()))) ==\r\n            keccak256(abi.encodePacked((\"USDT\"))));\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\r\n     * function returned 0 bytes or 1.\r\n     */\r\n    function checkSuccess() private pure returns (bool) {\r\n        // default to failure\r\n        uint256 returnValue = 0;\r\n\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n                // no bytes returned: assume success\r\n                case 0x0 {\r\n                    returnValue := 1\r\n                }\r\n                // 32 bytes returned\r\n                case 0x20 {\r\n                    // copy 32 bytes into scratch space\r\n                    returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                    // load those bytes into returnValue\r\n                    returnValue := mload(0x0)\r\n                }\r\n                // not sure what was returned: dont mark as success\r\n                default {\r\n\r\n                }\r\n        }\r\n\r\n        // check if returned value is one or nothing\r\n        return returnValue == 1;\r\n    }\r\n}\r\n\r\n// File: contracts/DAIProxy.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DAIProxy is IDAIProxy, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IAuthorization auth;\r\n    address public administrator;\r\n    address public swapperFactoryAddress;\r\n    bool public hasToDeposit;\r\n    bool public swapEnabled = true;\r\n\r\n    event AuthAddressUpdated(address newAuthAddress, address administrator);\r\n    event AdministratorUpdated(address newAdministrator);\r\n    event HasToDeposit(bool value, address administrator);\r\n\r\n    constructor(address authAddress, address _swapperFactoryAddress) public {\r\n        auth = IAuthorization(authAddress);\r\n        swapperFactoryAddress = _swapperFactoryAddress;\r\n    }\r\n\r\n    function setDepositRequeriment(bool value) external onlyAdmin {\r\n        hasToDeposit = value;\r\n        emit HasToDeposit(value, administrator);\r\n    }\r\n\r\n    function setUniswapSwapper(address value) external onlyAdmin {\r\n        swapperFactoryAddress = value;\r\n    }\r\n\r\n    function toggleUniswap(bool value) external onlyAdmin {\r\n        swapEnabled = value;\r\n    }\r\n\r\n    function setAdministrator(address admin) external onlyOwner {\r\n        administrator = admin;\r\n        emit AdministratorUpdated(administrator);\r\n    }\r\n\r\n    function setAuthAddress(address authAddress) external onlyAdmin {\r\n        auth = IAuthorization(authAddress);\r\n        emit AuthAddressUpdated(authAddress, administrator);\r\n    }\r\n\r\n    function swapTokenAndFund(\r\n        address loanAddress,\r\n        address inputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 fundingAmount\r\n    ) external uniswapIsEnabled onlyHasDepositCanFund onlyKYCCanFund returns (bool) {\r\n        address outputTokenAddress = ILoanContract(loanAddress).getTokenAddress();\r\n        uint256 newFundingAmount = _calculateFunds(loanAddress, fundingAmount);\r\n        require(\r\n            ILoanContract(loanAddress).onFundingReceived(msg.sender, newFundingAmount),\r\n            \"funding failed at loan contract\"\r\n        );\r\n        require(\r\n            _swapToken(inputTokenAddress, outputTokenAddress, inputTokenAmount, newFundingAmount),\r\n            \"error swap\"\r\n        );\r\n        require(\r\n            ERC20Wrapper.transfer(outputTokenAddress, loanAddress, newFundingAmount),\r\n            \"failed at transferFrom\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function swapEthAndFund(address loanAddress, uint256 fundingAmount)\r\n        external\r\n        payable\r\n        uniswapIsEnabled\r\n        onlyHasDepositCanFund\r\n        onlyKYCCanFund\r\n        returns (bool)\r\n    {\r\n        address outputTokenAddress = ILoanContract(loanAddress).getTokenAddress();\r\n        uint256 newFundingAmount = _calculateFunds(loanAddress, fundingAmount);\r\n        require(\r\n            ILoanContract(loanAddress).onFundingReceived(msg.sender, newFundingAmount),\r\n            \"funding failed at loan contract\"\r\n        );\r\n        require(_swapEth(outputTokenAddress, newFundingAmount), \"error swap\");\r\n        require(\r\n            ERC20Wrapper.transfer(outputTokenAddress, loanAddress, newFundingAmount),\r\n            \"failed at transferFrom\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _swapToken(\r\n        address inputTokenAddress,\r\n        address outputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount\r\n    ) internal returns (bool) {\r\n        address swapperAddress = IUniswapSwapperFactory(swapperFactoryAddress).deploy();\r\n        require(\r\n            ERC20Wrapper.transferFrom(\r\n                inputTokenAddress,\r\n                msg.sender,\r\n                address(this),\r\n                inputTokenAmount\r\n            ),\r\n            \"failed at transferFrom prior swap\"\r\n        );\r\n        require(\r\n            ERC20Wrapper.approve(inputTokenAddress, swapperAddress, inputTokenAmount),\r\n            \"failed at approve prior swap\"\r\n        );\r\n        IUniswapSwapper(swapperAddress).swap(\r\n            msg.sender,\r\n            inputTokenAddress,\r\n            outputTokenAddress,\r\n            inputTokenAmount,\r\n            outputTokenAmount\r\n        );\r\n        require(\r\n            IUniswapSwapper(swapperAddress).isDestroyed() == true,\r\n            \"Swap contract should selfdestruct\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _swapEth(address outputTokenAddress, uint256 outputTokenAmount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        address swapperAddress = IUniswapSwapperFactory(swapperFactoryAddress).deploy();\r\n        IUniswapSwapper(swapperAddress).swapEth.value(msg.value)(\r\n            msg.sender,\r\n            outputTokenAddress,\r\n            outputTokenAmount\r\n        );\r\n        require(\r\n            IUniswapSwapper(swapperAddress).isDestroyed() == true,\r\n            \"Swap contract should selfdestruct\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function fund(address loanAddress, uint256 fundingAmount)\r\n        external\r\n        onlyHasDepositCanFund\r\n        onlyKYCCanFund\r\n    {\r\n        uint256 newFundingAmount = _calculateFunds(loanAddress, fundingAmount);\r\n        require(\r\n            ILoanContract(loanAddress).onFundingReceived(msg.sender, newFundingAmount),\r\n            \"funding failed at loan contract\"\r\n        );\r\n        require(transfer(loanAddress, newFundingAmount), \"erc20 transfer failed\");\r\n    }\r\n\r\n    function _calculateFunds(address loanAddress, uint256 fundingAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 newFundingAmount = fundingAmount;\r\n        uint256 auctionBalance = ILoanContract(loanAddress).getAuctionBalance();\r\n        uint256 maxAmount = ILoanContract(loanAddress).getMaxAmount();\r\n\r\n        if (auctionBalance.add(fundingAmount) > maxAmount) {\r\n            newFundingAmount = maxAmount.sub(auctionBalance);\r\n        }\r\n        require(newFundingAmount > 0, \"funding amount can not be zero\");\r\n        return newFundingAmount;\r\n    }\r\n\r\n    function repay(address loanAddress, uint256 repaymentAmount) external onlyKYCCanFund {\r\n        ILoanContract loanContract = ILoanContract(loanAddress);\r\n        require(\r\n            loanContract.onRepaymentReceived(msg.sender, repaymentAmount),\r\n            \"repayment failed at loan contract\"\r\n        );\r\n        require(transfer(loanAddress, repaymentAmount), \"erc20 repayment failed\");\r\n    }\r\n\r\n    function transfer(address loanAddress, uint256 amount) internal returns (bool) {\r\n        address tokenAddress = ILoanContract(loanAddress).getTokenAddress();\r\n        require(\r\n            ERC20Wrapper.allowance(tokenAddress, msg.sender, address(this)) >= amount,\r\n            \"funding not approved\"\r\n        );\r\n        uint256 balance = ERC20Wrapper.balanceOf(tokenAddress, msg.sender);\r\n        require(balance >= amount, \"Not enough funds\");\r\n        require(\r\n            ERC20Wrapper.transferFrom(tokenAddress, msg.sender, loanAddress, amount),\r\n            \"failed at transferFrom\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier onlyKYCCanFund {\r\n        require(auth.isKYCConfirmed(msg.sender), \"user does not have KYC\");\r\n        _;\r\n    }\r\n\r\n    modifier uniswapIsEnabled {\r\n        require(swapEnabled == true, \"uniswap is disabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyHasDepositCanFund {\r\n        if (hasToDeposit) {\r\n            require(auth.hasDeposited(msg.sender), \"user does not have a deposit\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator, \"Caller is not an administrator\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapperFactoryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdministrator\",\"type\":\"address\"}],\"name\":\"AdministratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuthAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"AuthAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"HasToDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasToDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"setAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setDepositRequeriment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setUniswapSwapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"}],\"name\":\"swapEthAndFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenAndFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapperFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"toggleUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DAIProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c1a716158ec4ba4949b205692da091f8fd72b954000000000000000000000000f3e646006bf1ddce3dcf2981a3dfdff50b74aab9","Library":"ERC20Wrapper:32d522d601aae4a3ef9ea32e9bb3beff419d01e0","LicenseType":"MIT","SwarmSource":"bzzr://52eae6e36e18a719ca891a950c3bdcd62fd39c31bfad11aeb3315010d33f5290"}]}