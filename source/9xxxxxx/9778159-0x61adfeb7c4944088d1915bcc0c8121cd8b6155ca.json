{"status":"1","message":"OK","result":[{"SourceCode":"Bid: event({bidder: indexed(address), inc: indexed(uint256(wei)), total: indexed(uint256(wei))})\r\nWin: event({winner: indexed(address)})\r\nRestart: event()\r\n\r\nMIN_BID_DIVIDER: constant(uint256) = 1000 # minBidIncrement = highestBid / MIN_BID_DIVIDER\r\n\r\nowner: public(address)\r\nbalanceOf: public(map(uint256, map(address, uint256(wei))))\r\nbidTimeout: public(uint256)\r\nlastBidTime: public(timestamp)\r\nhighestBid: public(uint256(wei))\r\nhighestBidder: public(address)\r\nownerShare: public(uint256) # 1 = 1%, 50 = 50%, etc\r\nfromBlock: public(uint256) # Used to indicate from where should the frontend start loading new 'Bid' events\r\ngameRound: public(uint256)\r\n\r\n@public\r\ndef __init__(_bid_timeout: uint256, _owner_share: uint256):\r\n    assert _bid_timeout >= 60 and _bid_timeout <= 604800 # 7 days\r\n    assert _owner_share > 0 and _owner_share < 100\r\n\r\n    self.owner = msg.sender\r\n    self.bidTimeout = _bid_timeout\r\n    self.lastBidTime = block.timestamp\r\n    self.highestBid = 0\r\n    self.highestBidder = ZERO_ADDRESS\r\n    self.ownerShare = _owner_share\r\n    self.fromBlock = block.number\r\n    self.gameRound = 1\r\n\r\n@private\r\n@constant\r\ndef gameEnded() -> bool:\r\n  result: bool = (block.timestamp - self.lastBidTime) > self.bidTimeout\r\n  return result\r\n\r\n@private\r\ndef restartGame() -> bool:\r\n  assert self.gameEnded(), \"Game must be ended\"\r\n\r\n  self.lastBidTime = block.timestamp\r\n  self.highestBid = 0\r\n  self.highestBidder = ZERO_ADDRESS\r\n  self.fromBlock = block.number\r\n  self.gameRound += 1\r\n\r\n  log.Restart()\r\n\r\n  return True\r\n\r\n@private\r\n@constant\r\ndef minBidIncrement() -> uint256(wei):\r\n  minBidIncrement: uint256(wei) = self.highestBid / MIN_BID_DIVIDER\r\n  return minBidIncrement\r\n\r\n@private\r\ndef payoutAndRestart() -> bool:\r\n  assert self.gameEnded(), \"Game must be ended\"\r\n  assert self.balance != ZERO_WEI, \"Contract cannot have zero balance\"\r\n\r\n  winner: address = self.highestBidder\r\n  self.restartGame()\r\n\r\n  send(winner, self.balance)\r\n  log.Win(winner)\r\n  return True\r\n\r\n@public\r\ndef finishGame() -> bool:\r\n  self.payoutAndRestart()\r\n  return True\r\n\r\n# Increase bid\r\n@private\r\ndef increaseBid(_sender: address, _amount: uint256(wei)) -> bool:\r\n  if self.gameEnded():\r\n    self.payoutAndRestart()\r\n\r\n  assert _amount >= self.minBidIncrement()\r\n\r\n  self.balanceOf[self.gameRound][_sender] += _amount\r\n  assert self.balanceOf[self.gameRound][_sender] > self.highestBid, \"Your bid is lower than highestBid\"\r\n\r\n  self.lastBidTime = block.timestamp\r\n  self.highestBid = self.balanceOf[self.gameRound][_sender]\r\n  self.highestBidder = _sender\r\n\r\n  ownerAmount: uint256(wei) = _amount / 100 * self.ownerShare\r\n  send(self.owner, ownerAmount)\r\n\r\n  log.Bid(_sender, _amount, self.balanceOf[self.gameRound][_sender])\r\n  return True\r\n\r\n@public\r\n@payable\r\ndef __default__():\r\n  self.increaseBid(msg.sender, msg.value)\r\n\r\n# Allow to receive ETH without making a bid\r\n@public\r\n@payable\r\ndef depositSeed() -> bool:\r\n  assert msg.sender == self.owner, \"Sender must be owner\"\r\n  return True\r\n\r\n@public\r\ndef updateBidTimeout(_bid_timeout: uint256) -> bool:\r\n  assert msg.sender == self.owner, \"Sender must be owner\"\r\n  assert _bid_timeout >= 60 and _bid_timeout <= 604800 # 7 days\r\n\r\n  self.bidTimeout = _bid_timeout\r\n  return True\r\n\r\n@public\r\ndef updateOwnerShare(_owner_share: uint256) -> bool:\r\n  assert msg.sender == self.owner, \"Sender must be owner\"\r\n  assert _owner_share > 0 and _owner_share < 100\r\n\r\n  self.ownerShare = _owner_share\r\n  return True\r\n\r\n@public\r\ndef transferOwnership(_new_owner: address) -> bool:\r\n    assert _new_owner != ZERO_ADDRESS\r\n    assert msg.sender == self.owner, \"Sender must be owner\"\r\n    self.owner = _new_owner\r\n    return True","ABI":"[{\"name\":\"Bid\",\"inputs\":[{\"type\":\"address\",\"name\":\"bidder\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"inc\",\"indexed\":true,\"unit\":\"wei\"},{\"type\":\"uint256\",\"name\":\"total\",\"indexed\":true,\"unit\":\"wei\"}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Win\",\"inputs\":[{\"type\":\"address\",\"name\":\"winner\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Restart\",\"inputs\":[],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_bid_timeout\"},{\"type\":\"uint256\",\"name\":\"_owner_share\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"finishGame\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":346335},{\"constant\":false,\"payable\":true,\"type\":\"fallback\"},{\"name\":\"depositSeed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":1396},{\"name\":\"updateBidTimeout\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_bid_timeout\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":36651},{\"name\":\"updateOwnerShare\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_owner_share\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":36667},{\"name\":\"transferOwnership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_owner\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":36721},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1451},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"wei\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1750},{\"name\":\"bidTimeout\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1511},{\"name\":\"lastBidTime\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1541},{\"name\":\"highestBid\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"wei\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1571},{\"name\":\"highestBidder\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1601},{\"name\":\"ownerShare\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1631},{\"name\":\"fromBlock\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1661},{\"name\":\"gameRound\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1691}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b16","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000032","Library":"","LicenseType":"None","SwarmSource":""}]}