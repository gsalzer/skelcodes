{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.20 <0.7.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract multiSender{\r\n    using SafeMath for uint256;\r\n    address contractOwner;\r\n    address defaultTokenAddress;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n    \r\n    constructor(address tokenAddress, address inputOwner) public{\r\n        contractOwner = inputOwner;\r\n        defaultTokenAddress = tokenAddress;\r\n    }\r\n    \r\n    function sendDefaultTokensMultiple(address[] memory _walletDest, uint256 _amountT) onlyOwner public {\r\n        for(uint ia = 0; ia < _walletDest.length; ia++){\r\n            address dest = _walletDest[ia];\r\n            uint amountToken = _amountT;\r\n            IERC20(defaultTokenAddress).transfer(dest, amountToken);\r\n        }\r\n    }\r\n    \r\n    function sendOtherTokens(address _tokenContract, address _walletDest, uint256 _amountT) onlyOwner public returns (bool) {\r\n        address dest = _walletDest;\r\n        uint amountToken = _amountT;\r\n        return IERC20(_tokenContract).transfer(dest, amountToken);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletDest\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountT\",\"type\":\"uint256\"}],\"name\":\"sendDefaultTokensMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletDest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountT\",\"type\":\"uint256\"}],\"name\":\"sendOtherTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"multiSender","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005ceb8c7f189e694b326310694ac6df98e5ced66e000000000000000000000000c8551e2bc05c5143aaf7b79d1a4a5063b076e415","Library":"","LicenseType":"None","SwarmSource":"bzzr://5ef9e7c28486ca5fdf825819401cba9e8f92d03e5973cef6c7dfe5fe328cd588"}]}