{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-02-26\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract Maxidice {\r\n    uint public minNumber = 1;\r\n    uint public maxNumber = 6;\r\n    uint public maxRoomPlayers = 6;\r\n    uint256 public totalPotWin = 0;\r\n    uint256 public largestAmountWin = 0;\r\n    uint256 public profit = 0;\r\n    address constant public adminAddress = 0x0A8a8c178E97f8D50262838c6A5E3069C2143425;\r\n    \r\n\r\n    struct Player {\r\n        uint256 profit;\r\n        uint numberSelected;\r\n        uint256 amountBet;\r\n    }\r\n\r\n    struct Room {\r\n        uint roomState;\r\n        string roomId;\r\n        uint currentPlayers;\r\n        uint256 totalAmountBetting;\r\n        uint256 minBet;\r\n        uint lostNumber;\r\n        address[] players;\r\n        address roomMaster;\r\n        mapping (address => Player) playersInfo;\r\n    }\r\n\r\n    mapping (string => Room) rooms;\r\n    string[] roomIds;\r\n    \r\n    event PlayerBet(string roomId);\r\n    event GameFinished(string roomId, uint loseNumber);\r\n    event RoomOpened(string roomId);\r\n    event StartOver(string roomId, string nRoomId);\r\n    \r\n    function createRoom(string roomId) public returns(bool) {\r\n        Room memory nRoom;\r\n        Player memory p;\r\n        nRoom.roomState = 1;\r\n        nRoom.roomId = roomId;\r\n        nRoom.totalAmountBetting = 0;\r\n        nRoom.currentPlayers = 1;\r\n        nRoom.roomMaster = msg.sender;\r\n        rooms[roomId] = nRoom;\r\n        p.profit = 0;\r\n        p.numberSelected = 1;\r\n        rooms[roomId].playersInfo[msg.sender] = p;\r\n        rooms[roomId].players.push(msg.sender);\r\n        roomIds.push(roomId);\r\n        emit RoomOpened(roomId);\r\n        return true;\r\n    }\r\n\r\n    function getRooms() public view returns(string) {\r\n        string memory rIds;\r\n        if (roomIds.length < 1) {\r\n            return rIds;\r\n        }\r\n        for (uint256 i = 0; i < roomIds.length; i++) {\r\n            string memory roomId = roomIds[i];\r\n            Room memory room = rooms[roomId];\r\n            string memory roomLabel = string(abi.encodePacked(roomId, \":\", uint2str(room.currentPlayers)));\r\n            if (i > 0) {\r\n                rIds = string(abi.encodePacked(rIds, \",\"));\r\n            }\r\n            rIds = string(abi.encodePacked(rIds, roomLabel));\r\n        }\r\n        return rIds;\r\n    }\r\n\r\n    function getRoomBasicInfo(string roomId) public view returns(string, string, uint, uint256, uint256, uint) {\r\n        if (checkRoomExists(roomId) == false) {\r\n            return (\"\", \"\", 0, 0, 0, 0);\r\n        }\r\n        Room memory r = rooms[roomId];\r\n        return (r.roomId, add2str(r.roomMaster), r.currentPlayers, r.totalAmountBetting, r.minBet, r.lostNumber);\r\n    }\r\n\r\n    function getRoomPlayers(string roomId) public view returns(string) {\r\n        string memory result = \"\";\r\n        if (checkRoomExists(roomId) == false) {\r\n            return result;\r\n        }\r\n        for (uint i = 0; i < rooms[roomId].players.length; i++) {\r\n            string memory playerStr = add2str(rooms[roomId].players[i]);\r\n            Player memory p = rooms[roomId].playersInfo[rooms[roomId].players[i]];\r\n            playerStr = string(abi.encodePacked(playerStr, \":\", uint2str(p.numberSelected), \":\", uint2str(p.amountBet)));\r\n            if (i > 0) {\r\n                result = string(abi.encodePacked(result, \",\"));\r\n            }\r\n            result = string(abi.encodePacked(result, playerStr));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function checkRoomExists(string roomId) internal view returns(bool) {\r\n        if (rooms[roomId].roomState > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function bet(string roomId) public payable returns(bool){\r\n        require(checkRoomExists(roomId), \"room is not exist\");\r\n        Player memory p = rooms[roomId].playersInfo[msg.sender];\r\n        if (p.numberSelected == 0 && p.amountBet == 0) {\r\n            rooms[roomId].currentPlayers += 1;\r\n            rooms[roomId].players.push(msg.sender);\r\n        }\r\n        if (rooms[roomId].minBet == 0) {\r\n            rooms[roomId].minBet = msg.value;\r\n        }\r\n        if (p.numberSelected == 0) {\r\n            p.numberSelected = rooms[roomId].currentPlayers;\r\n        }\r\n        if (p.amountBet == 0) {\r\n            p.amountBet = msg.value;\r\n            rooms[roomId].totalAmountBetting += msg.value;\r\n        }\r\n        \r\n        rooms[roomId].playersInfo[msg.sender] = p;\r\n        emit PlayerBet(roomId);\r\n        return true;\r\n    }\r\n\r\n    function startGame(string memory roomId) public returns(uint256){\r\n        uint256 numberGenerated = block.number % 6 + 1;\r\n        rooms[roomId].lostNumber = numberGenerated;\r\n        distributePrizes(roomId, numberGenerated);\r\n        emit GameFinished(roomId, numberGenerated);\r\n        return numberGenerated;\r\n    }\r\n\r\n    function distributePrizes(string roomId, uint256 loseNumber) public {\r\n        address[100] memory winners;\r\n        Room storage room = rooms[roomId];\r\n        uint256 totalBetWon = (room.totalAmountBetting * 98) / 100;\r\n        profit += totalBetWon;\r\n        totalPotWin += totalBetWon;\r\n        if (largestAmountWin < totalBetWon) {\r\n            largestAmountWin = totalBetWon;\r\n        }\r\n        uint count = 0;\r\n        for (uint256 i = 0; i < room.players.length; i++) {\r\n            address playerAddr = room.players[i];\r\n            if (room.playersInfo[playerAddr].numberSelected != loseNumber) {\r\n                winners[count] = playerAddr;\r\n                count++;\r\n            }\r\n        }\r\n        for (uint j = 0; j < count; j++) {\r\n            if (winners[j] != address(0)) {\r\n                winners[j].transfer(totalBetWon / count);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function add2str(address x) internal pure returns(string) {\r\n        bytes32 value = bytes32(uint256(x));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory str = new bytes(51);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(value[i + 12] >> 4)];\r\n            str[3+i*2] = alphabet[uint(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function StartGameOver(string roomId, string nRoomId) public returns(bool) {\r\n        Room memory nRoom;\r\n        Player memory p;\r\n        nRoom.roomState = 1;\r\n        nRoom.roomId = nRoomId;\r\n        nRoom.totalAmountBetting = 0;\r\n        nRoom.currentPlayers = 1;\r\n        nRoom.minBet = rooms[roomId].minBet;\r\n        nRoom.roomMaster = msg.sender;\r\n        rooms[nRoomId] = nRoom;\r\n        p.profit = 0;\r\n        p.numberSelected = 1;\r\n        rooms[nRoomId].playersInfo[msg.sender] = p;\r\n        rooms[nRoomId].players.push(msg.sender);\r\n        roomIds.push(nRoomId);\r\n        emit StartOver(roomId, nRoomId);\r\n        return true;\r\n    }\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    function withdrawAll(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        // emit EtherWithdraw(amount, sendTo);\r\n    }\r\n    modifier onlyAdmin() {\r\n        assert(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestAmountWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRoomPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"getRoomBasicInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"getRoomPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"createRoom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"bet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"},{\"name\":\"loseNumber\",\"type\":\"uint256\"}],\"name\":\"distributePrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"},{\"name\":\"nRoomId\",\"type\":\"string\"}],\"name\":\"StartGameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRooms\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"startGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPotWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"PlayerBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"loseNumber\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roomId\",\"type\":\"string\"}],\"name\":\"RoomOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nRoomId\",\"type\":\"string\"}],\"name\":\"StartOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"}]","ContractName":"Maxidice","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2509f78b07ea5320c2b694e7c66eec9ff76e148d4eebb162deca9e5fd34b1b6e"}]}