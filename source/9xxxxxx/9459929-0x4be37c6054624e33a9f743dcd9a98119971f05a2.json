{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\n\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC165 {\n    \n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    \n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    \n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    \n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    \n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract ICards is IERC721 {\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    function batches(uint index) public view returns (uint48 userID, uint16 size);\n\n    function userIDToAddress(uint48 id) public view returns (address);\n\n    function getDetails(\n        uint tokenId\n    )\n        public\n        view\n        returns (\n        uint16 proto,\n        uint8 quality\n    );\n\n    function setQuality(\n        uint tokenId,\n        uint8 quality\n    ) public;\n\n    function mintCards(\n        address to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n        returns (uint);\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n        returns (uint);\n\n    function burn(uint tokenId) public;\n\n    function batchSize()\n        public\n        view\n        returns (uint);\n}\n\ncontract PromoFactory is Ownable {\n\n    ICards public cards;\n\n    mapping(uint16 => Promo) public promos;\n    mapping(address => uint) public adminMintersMapping;\n\n    address[] public adminMintersArray;\n\n    struct Promo {\n        bool isLocked;\n        address[] minters;\n    }\n\n    \n\n    event AdminMinterAdded(\n        address minter\n    );\n\n    event AdminMinterRemoved(\n        address minter\n    );\n\n    event PromoMinterAdded(\n        uint16 proto,\n        address minter\n    );\n\n    event PromoMinterRemoved(\n        uint16 proto,\n        address minter\n    );\n\n    event PromoLocked(\n        uint16 proto\n    );\n\n    \n\n    constructor(\n        ICards _cards\n    )\n        public\n    {\n        cards = _cards;\n    }\n\n    \n\n    \n    function mint(\n        address _to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n    {\n        require(\n            _protos.length == _qualities.length,\n            \"Promo Factory: array length mismatch between protos and qualities\"\n        );\n\n        for (uint i; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            require(\n                isValidMinter(msg.sender, proto) == true,\n                \"Promo Factory: only assigned minter can mint for this proto\"\n            );\n\n            require(\n                promos[proto].isLocked == false,\n                \"Promo Factory: cannot mint a locked proto\"\n            );\n        }\n\n        cards.mintCards(_to, _protos, _qualities);\n    }\n\n    \n    function mintSingle(\n        address _to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n    {\n\n        require(\n            isValidMinter(msg.sender, _proto) == true,\n            \"Promo Factory: only assigned minter can mint for this proto\"\n        );\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: cannot mint a locked proto\"\n        );\n\n        cards.mintCard(_to, _proto, _quality);\n    }\n\n    \n    function validMinters(\n        uint16 _proto\n    )\n        public\n        view\n        returns (address[] memory)\n    {\n        return promos[_proto].minters;\n    }\n\n    \n    function isValidMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        view\n        returns (bool)\n    {\n        Promo memory promo = promos[_proto];\n        for (uint256 i = 0; i < promo.minters.length; i++) {\n            if (promo.minters[i] == _minter) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    \n    function isPromoLocked(\n        uint16 _proto\n    )\n        public\n        view\n        returns (bool)\n    {\n        return promos[_proto].isLocked;\n    }\n\n    \n    function getAdminMinters() public view returns (address[] memory) {\n        return adminMintersArray;\n    }\n\n    \n\n    \n    function addAdminMinter(\n        address _minter\n    )\n        public\n        onlyOwner\n    {\n        adminMintersMapping[_minter] = uint128(adminMintersArray.push(_minter));\n\n        emit AdminMinterAdded(_minter);\n    }\n\n    \n    function removeAdminMinter(\n        address _minter\n    )\n        public\n        onlyOwner\n    {\n        address last = adminMintersArray[adminMintersArray.length - 1];\n        if(_minter != last) {\n            uint256 targetIndex = adminMintersMapping[_minter] - 1;\n            adminMintersArray[targetIndex] = last;\n            adminMintersMapping[last] = targetIndex + 1;\n        }\n\n        adminMintersArray.length --;\n        delete adminMintersMapping[_minter];\n\n        emit AdminMinterRemoved(_minter);\n    }\n\n    \n    function adminMintCards(\n        address _to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n    {\n\n        require(\n            adminMintersMapping[msg.sender] > 0,\n            \"Promo Factory: must be an admin minter to call adminMintCards()\"\n        );\n\n        cards.mintCards(_to, _protos, _qualities);\n    }\n\n    \n    function addPromoMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: proto already locked\"\n        );\n\n        promos[_proto].minters.push(_minter);\n\n        emit PromoMinterAdded(_proto, _minter);\n    }\n\n    \n    function removePromoMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n        bool found = false;\n        uint index = 0;\n\n        Promo storage promo = promos[_proto];\n        for (uint i = 0; i < promo.minters.length; i++) {\n            if (promo.minters[i] == _minter) {\n                index = i;\n                found = true;\n            }\n        }\n\n        require(\n            found == true,\n            \"Promo Factory: Must be a valid minter\"\n        );\n\n        for (uint i = index; i < promo.minters.length - 1; i++){\n            promo.minters[i] = promo.minters[i+1];\n        }\n\n        delete promo.minters[promo.minters.length - 1];\n        promo.minters.length--;\n\n        emit PromoMinterRemoved(_proto, _minter);\n    }\n\n    \n    function lock(\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n        require(\n            promos[_proto].minters.length != 0,\n            \"Promo Factory: must be an assigned proto\"\n        );\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: cannot lock a locked proto\"\n        );\n\n        promos[_proto].isLocked = true;\n\n        emit PromoLocked(_proto);\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"promos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeAdminMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"contract ICards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"removePromoMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminMintersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_protos\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_qualities\",\"type\":\"uint8[]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_quality\",\"type\":\"uint8\"}],\"name\":\"mintSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"isPromoLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_protos\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_qualities\",\"type\":\"uint8[]\"}],\"name\":\"adminMintCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"addPromoMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addAdminMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"validMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminMintersMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_proto\",\"type\":\"uint16\"}],\"name\":\"isValidMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICards\",\"name\":\"_cards\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"AdminMinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"AdminMinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"PromoMinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"PromoMinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"PromoLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PromoFactory","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e3a2a1f2146d86a604adc220b4967a898d7fe07","Library":"","LicenseType":"","SwarmSource":""}]}