{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract GHTMultiSigWallet {\r\n\r\n    IERC20 public GHT;\r\n    address private _owner;\r\n    mapping(address => uint8) private _owners;\r\n\r\n    uint constant MIN_SIGNATURES = 2;\r\n    uint private _transactionIdx;\r\n\r\n    struct Transaction {\r\n\t\taddress payable from;\r\n\t\taddress payable to;\r\n\t\tuint amount;\r\n\t\tuint8 signatureCount;\r\n\t\tmapping (address => uint8) signatures;\r\n\t\tuint8 typeOfTransaction; // 0 = ETH, 1 = GHT\r\n    }\r\n\r\n    mapping (uint => Transaction) private _transactions;\r\n    uint[] private _pendingETHTransactions;\r\n    uint[] private _pendingGHTTransactions;\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    modifier validOwner() {\r\n        require(msg.sender == _owner || _owners[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    event DepositFunds(address from, uint256 amount);\r\n    event ETHTransactionCreated(address from, address to, uint amount, uint transactionId);\r\n    event ETHTransactionCompleted(address from, address to, uint amount, uint transactionId);\r\n    event ETHTransactionSigned(address by, uint transactionId);\r\n    \r\n    event GHTTransactionCreated(address from, address to, uint amount, uint transactionId);\r\n    event GHTTransactionCompleted(address from, address to, uint amount, uint transactionId);\r\n    event GHTTransactionSigned(address by, uint transactionId);\r\n\r\n    constructor(address GHTtoken)\r\n        public {\r\n        GHT = IERC20(GHTtoken);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function addOwner(address owner)\r\n        isOwner\r\n        public {\r\n        _owners[owner] = 1;\r\n    }\r\n\r\n    function removeOwner(address owner)\r\n        isOwner\r\n        public {\r\n        _owners[owner] = 0;\r\n    }\r\n\r\n    receive ()\r\n        external \r\n        payable {\r\n        emit DepositFunds(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint amount)\r\n        public {\r\n        transferETHTo(msg.sender, amount);\r\n    }\r\n\r\n    function transferETHTo(address payable to, uint amount)\r\n        validOwner\r\n        public {\r\n        require(address(this).balance >= amount);\r\n        uint transactionId = _transactionIdx++;\r\n\r\n        Transaction memory transaction;\r\n        transaction.from = msg.sender;\r\n        transaction.to = to;\r\n        transaction.amount = amount;\r\n        transaction.signatureCount = 0;\r\n        transaction.typeOfTransaction = 0;\r\n\r\n        _transactions[transactionId] = transaction;\r\n        _pendingETHTransactions.push(transactionId);\r\n\r\n        emit ETHTransactionCreated(msg.sender, to, amount, transactionId);\r\n    }\r\n\r\n    function getETHPendingTransactions()\r\n\t\tview\r\n\t\tvalidOwner\r\n\t\tpublic\r\n\t\treturns (uint[] memory) {\r\n\t\treturn _pendingETHTransactions;\r\n    }\r\n\r\n    function signETHTransaction(uint transactionId)\r\n\t\tvalidOwner\r\n\t\tpublic {\r\n\r\n\t\tTransaction storage transaction = _transactions[transactionId];\r\n\r\n\t\t// Transaction must exist\r\n\t\trequire(address(0) != transaction.from);\r\n\t\t// Creator cannot sign the transaction\r\n\t\trequire(msg.sender != transaction.from);\r\n\t\t// Cannot sign a transaction more than once\r\n\t\trequire(transaction.signatures[msg.sender] != 1);\r\n\t\t// Only sign sign a ETH transaction\r\n\t\trequire(transaction.typeOfTransaction == 0);\r\n\r\n\t\ttransaction.signatures[msg.sender] = 1;\r\n\t\ttransaction.signatureCount++;\r\n\r\n\t\temit ETHTransactionSigned(msg.sender, transactionId);\r\n\r\n\t\tif (transaction.signatureCount >= MIN_SIGNATURES) {\r\n\t\t\trequire(address(this).balance >= transaction.amount);\r\n\t\t\ttransaction.to.transfer(transaction.amount);\r\n\t\t\temit ETHTransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionId);\r\n\t\t\tdeleteETHTransaction(transactionId);\r\n\t\t}\r\n    }\r\n\r\n    function deleteETHTransaction(uint transactionId)\r\n\t\tvalidOwner\r\n\t\tpublic {\r\n\t\tuint8 replace = 0;\r\n\t\tfor(uint i = 0; i < _pendingETHTransactions.length; i++) {\r\n\t\t\tif (1 == replace) {\r\n\t\t\t\t_pendingETHTransactions[i-1] = _pendingETHTransactions[i];\r\n\t\t\t} else if (transactionId == _pendingETHTransactions[i]) {\r\n\t\t\t\treplace = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_pendingETHTransactions.pop();\r\n\t\t//_pendingTransactions.length--;\r\n\t\t//delete _transactions[transactionId];\r\n    }\r\n\r\n    function walletBalance()\r\n\t\tview\r\n\t\tpublic\r\n\t\treturns (uint) {\r\n\t\treturn address(this).balance;\r\n    }\r\n    \r\n    //----TOKEN\r\n    \r\n    function transferGHTTo(address payable to, uint amount)\r\n        validOwner\r\n        public {\r\n        require(GHT.balanceOf(address(this)) >= amount);\r\n        uint transactionId = _transactionIdx++;\r\n\r\n        Transaction memory transaction;\r\n        transaction.from = msg.sender;\r\n        transaction.to = to;\r\n        transaction.amount = amount;\r\n        transaction.signatureCount = 0;\r\n        transaction.typeOfTransaction = 1;\r\n\r\n        _transactions[transactionId] = transaction;\r\n        _pendingGHTTransactions.push(transactionId);\r\n\r\n        emit GHTTransactionCreated(msg.sender, to, amount, transactionId);\r\n    }\r\n\r\n    function getGHTPendingTransactions()\r\n\t\tview\r\n\t\tvalidOwner\r\n\t\tpublic\r\n\t\treturns (uint[] memory) {\r\n\t\treturn _pendingGHTTransactions;\r\n    }\r\n\r\n    function signGHTTransaction(uint transactionId)\r\n\t\tvalidOwner\r\n\t\tpublic {\r\n\r\n\t\tTransaction storage transaction = _transactions[transactionId];\r\n\r\n\t\t// Transaction must exist\r\n\t\trequire(address(0) != transaction.from);\r\n\t\t// Creator cannot sign the transaction\r\n\t\trequire(msg.sender != transaction.from);\r\n\t\t// Cannot sign a transaction more than once\r\n\t\trequire(transaction.signatures[msg.sender] != 1);\r\n\t\t// Only sign sign a GHT transaction\r\n\t\trequire(transaction.typeOfTransaction == 1);\r\n\r\n\t\ttransaction.signatures[msg.sender] = 1;\r\n\t\ttransaction.signatureCount++;\r\n\r\n\t\temit GHTTransactionSigned(msg.sender, transactionId);\r\n\r\n\t\tif (transaction.signatureCount >= MIN_SIGNATURES) {\r\n\t\t\trequire(GHT.balanceOf(address(this)) >= transaction.amount);\r\n\t\t\tGHT.transfer(transaction.to, transaction.amount);\r\n\t\t\temit GHTTransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionId);\r\n\t\t\tdeleteGHTTransaction(transactionId);\r\n\t\t}\r\n    }\r\n\r\n    function deleteGHTTransaction(uint transactionId)\r\n\t\tvalidOwner\r\n\t\tpublic {\r\n\t\tuint8 replace = 0;\r\n\t\tfor(uint i = 0; i < _pendingGHTTransactions.length; i++) {\r\n\t\t\tif (1 == replace) {\r\n\t\t\t\t_pendingGHTTransactions[i-1] = _pendingGHTTransactions[i];\r\n\t\t\t} else if (transactionId == _pendingGHTTransactions[i]) {\r\n\t\t\t\treplace = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_pendingGHTTransactions.pop();\r\n\t\t//_pendingTransactions.length--;\r\n\t\t//delete _transactions[transactionId];\r\n    }\r\n    \r\n    function getTxByIdx(uint transactionId)\r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\taddress, \r\n\t\taddress,\r\n\t\tuint,\r\n\t\tuint8,\r\n\t\tuint8) {\r\n\t\tTransaction storage transaction = _transactions[transactionId];\r\n\r\n\t\treturn (\r\n\t\t\ttransaction.from, \r\n\t\t\ttransaction.to, \r\n\t\t\ttransaction.amount, \r\n\t\t\ttransaction.signatureCount, \r\n\t\t\ttransaction.typeOfTransaction);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"GHTtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ETHTransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ETHTransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ETHTransactionSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"GHTTransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"GHTTransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"GHTTransactionSigned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GHT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"deleteETHTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"deleteGHTTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPendingTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGHTPendingTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTxByIdx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"signETHTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"signGHTTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETHTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferGHTTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GHTMultiSigWallet","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be30f684d62c9f7883a75a29c162c332c0d98f23","Library":"","LicenseType":"None","SwarmSource":"ipfs://70e6c592b5937e771b45bb2f49c691cd00241a245a897dfa7962cc27e80fe531"}]}