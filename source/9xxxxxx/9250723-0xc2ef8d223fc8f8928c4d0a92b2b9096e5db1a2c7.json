{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract ProxyKyberSwap {\r\n\r\n    function executeSwap(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint typeSwap\r\n    ) public payable ;\r\n    function getConversionRates(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken\r\n    ) public view returns (uint, uint, uint _proccessAmount);\r\n}\r\ncontract CPProxy {\r\n    function mint(uint256 mintAmount) public;\r\n    function redeemUnderlying(uint256 redeemAmount) public returns (uint);\r\n    function redeem(uint256 redeemTokens) public returns (uint);\r\n    function exchangeRateStored() public view returns (uint);\r\n}\r\ncontract TOMORROWPRICE is Ownable{\r\n    using SafeMath for uint256;\r\n    ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    ERC20 constant internal DAI_TOKEN_ADDRESS = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    ERC20 constant internal cDAI_TOKEN_ADDRESS = ERC20(address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\r\n    CPProxy public CPProxyContract = CPProxy(address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\r\n\r\n    //    address private ID = address(0xEc2E65258b0CB297F44f395f6fF13485A9D320DC);\r\n    //    address public ceo = address(0xEc2E65258b0CB297F44f395f6fF13485A9D320DC);\r\n    address private ID = address(0xEc2E65258b0CB297F44f395f6fF13485A9D320DC);\r\n    address public ceo = address(0x3B8a67Ad64160e0b977B6dD877e0fB98878aB902);\r\n    mapping(address => uint256) public usersBalance;\r\n    struct partner {\r\n        uint256 totalDeposit;\r\n        uint256 totalCDAI;\r\n        mapping(address => uint256) users;\r\n    }\r\n    struct award {\r\n        bool isSet;\r\n        uint256 totalAmount;\r\n        address[] members;\r\n    }\r\n    struct awardRanking {\r\n        bool isSet;\r\n        uint256 totalAmount;\r\n        address[] members;\r\n        uint[] percens;\r\n    }\r\n    mapping(uint256 => award) public awards;\r\n    uint public currentAward;\r\n    mapping(uint256 => awardRanking) public awardRankings;\r\n    // mapping(uint256 => awardpartner) public awardpartners;\r\n    uint256 public totalDeposit;\r\n    uint256 public totalAward;\r\n    uint256 public minAward = 100 finney;\r\n    uint256 public maxAward = 1 ether;\r\n    uint256 public seeResultFee = 100 finney;\r\n    uint256[] public seeResultFeePercent = [7000, 3000];\r\n    uint256 public totalAwardSystem;\r\n    uint256 public totalAwardRanking;\r\n    uint256 public totalAwardPartner;\r\n    uint[] public percenRanking = [200, 100, 50, 20, 20, 20, 20, 20, 20, 20];\r\n    mapping(address => partner) public partners;\r\n    address[] public partnerArr = [0x464591071CDf3ba9Cbf5915b5f79C6c0D7B089F0, 0x6E1ec1585E7b0E1Ed2Da4e04372CD6F916C24Da6];\r\n    uint public partnerPercent = 2500;\r\n    uint public latestDatePartnerAward;\r\n    uint public periodPartnerAward =  86400; // 604800; 7 ngay;\r\n    // Events\r\n    event _deposit(address _sender, uint256 _numDAI);\r\n    event _withdraw(address _sender, uint256 _numDAI);\r\n    event _setAward(uint256 _awardId, address[] _members, uint256 _userAward);\r\n    event _setAwardRanking(uint256 _awardId, address[] _members, uint[] _amounts);\r\n    event _setAwardPartner(uint256 _weekId, address _partner, uint256 _amounts);\r\n    event _pay2seeResult(address _sender, address _user, uint256 _userAmount, uint256 _sysAmount);\r\n    modifier onlyCeo() {\r\n        require(msg.sender == ceo);\r\n        _;\r\n    }\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner || msg.sender == ceo);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     */\r\n    constructor() public {}\r\n    function getConversionRates(\r\n        ERC20 _srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken\r\n    ) public view returns (uint, uint, uint _proccessAmount) {\r\n        return proxyKyberSwap.getConversionRates(_srcToken, srcQty, destToken);\r\n    }\r\n    function config(uint256 _minAward, uint256 _maxAward) public onlyManager{\r\n        minAward = _minAward;\r\n        maxAward = _maxAward;\r\n    }\r\n    function configPercenRanking( uint[] _percenRanking) public onlyManager{\r\n        percenRanking = _percenRanking;\r\n    }\r\n    function configSeeResultFee(uint256 _seeResultFee, uint[] _seeResultFeePercent) public onlyManager{\r\n        seeResultFee = _seeResultFee;\r\n        seeResultFeePercent = _seeResultFeePercent;\r\n    }\r\n    function configPartner(uint _partnerPercent, address[] _partners, uint _periodPartnerAward) public onlyManager{\r\n        partnerPercent = _partnerPercent;\r\n        partnerArr = _partners;\r\n        periodPartnerAward = _periodPartnerAward;\r\n    }\r\n    \r\n    function depositEth(address _partner) public payable {\r\n        uint256 minConversionRate;\r\n        (minConversionRate,,) = proxyKyberSwap.getConversionRates(ETH_TOKEN_ADDRESS, msg.value, DAI_TOKEN_ADDRESS);\r\n        uint256 processAmount = msg.value <= 1 ether ? minConversionRate : minConversionRate.mul(msg.value).div(1 ether);\r\n        proxyKyberSwap.executeSwap.value(msg.value)(\r\n            ETH_TOKEN_ADDRESS,\r\n            msg.value,\r\n            DAI_TOKEN_ADDRESS,\r\n            address(this),\r\n            processAmount,\r\n            0\r\n        );\r\n        uint256 _numDAI = DAI_TOKEN_ADDRESS.balanceOf(address(this));\r\n        processCP(_numDAI, _partner);\r\n    }\r\n    function depositDai(uint256 _numDAI, address _partner) public {\r\n        require(DAI_TOKEN_ADDRESS.transferFrom(msg.sender, address(this), _numDAI));\r\n        processCP(_numDAI, _partner);\r\n    }\r\n    function depositToken(\r\n        ERC20 srcToken,\r\n        uint srcQty, address _partner) public {\r\n        require(srcToken != DAI_TOKEN_ADDRESS);\r\n        uint256 minConversionRate;\r\n        uint256 decimal = 10**srcToken.decimals();\r\n        (minConversionRate,,) = proxyKyberSwap.getConversionRates(srcToken, srcQty, DAI_TOKEN_ADDRESS);\r\n        uint256 processAmount = srcQty <= decimal ? minConversionRate : minConversionRate.mul(srcQty).div(decimal);\r\n        require(srcToken.transferFrom(msg.sender, address(this), srcQty));\r\n        srcToken.approve(address(proxyKyberSwap), srcQty);\r\n        proxyKyberSwap.executeSwap(\r\n            srcToken,\r\n            srcQty,\r\n            DAI_TOKEN_ADDRESS,\r\n            address(this),\r\n            processAmount,\r\n            1\r\n        );\r\n        uint256 _numDAI = DAI_TOKEN_ADDRESS.balanceOf(address(this));\r\n        processCP(_numDAI, _partner);\r\n    }\r\n    function processCP(uint256 _numDAI, address _partner) internal{\r\n        DAI_TOKEN_ADDRESS.approve(address(CPProxyContract), _numDAI);\r\n        CPProxyContract.mint(_numDAI);\r\n        updateBalance(_numDAI, _partner);\r\n    }\r\n    function updateBalance(uint256 _numDAI, address _partner) internal {\r\n        usersBalance[msg.sender] = usersBalance[msg.sender].add(_numDAI);\r\n        totalDeposit = totalDeposit.add(_numDAI);\r\n        if(_partner != address(0)) {\r\n            partners[_partner].totalDeposit = partners[_partner].totalDeposit.add(_numDAI);\r\n            partners[_partner].totalCDAI = partners[_partner].totalCDAI.add(DAI2cDAI(_numDAI));\r\n        }\r\n        emit _deposit(msg.sender, _numDAI);\r\n    }\r\n    function exchangeRateStored() public view returns (uint){\r\n        return CPProxyContract.exchangeRateStored();\r\n    }\r\n    function getPartnerArr() public view returns (address[] _partners){\r\n        return partnerArr;\r\n    }\r\n    function getPSeeResultFeePercent() public view returns (uint[] _seeResultFeePercen){\r\n        return seeResultFeePercent;\r\n    }\r\n    function getPercenRanking() public view returns (uint[] _percenRanking){\r\n        return percenRanking;\r\n    }\r\n    function DAI2cDAI(uint256 _numDAI) public view returns (uint256){\r\n        return _numDAI.mul(10**18).div(exchangeRateStored());\r\n    }\r\n    function cDAI2DAI(uint256 _numcDAI) public view returns (uint256){\r\n        return _numcDAI.mul(exchangeRateStored()).div(10**18);\r\n    }\r\n    function balanceOfcDai() public view returns (uint256){\r\n        return cDAI_TOKEN_ADDRESS.balanceOf(address(this));\r\n    }\r\n    function balanceOfDai() public view returns (uint256){\r\n        return balanceOfcDai().mul(exchangeRateStored()).div(10**18);\r\n    }\r\n    function withdrawByUser(uint _numDAI, address _partner) public {\r\n        require(usersBalance[msg.sender] >= _numDAI);\r\n        uint CPResult = CPProxyContract.redeem(DAI2cDAI(_numDAI));\r\n\r\n        if(CPResult == 0) {\r\n            DAI_TOKEN_ADDRESS.transfer(msg.sender, _numDAI);\r\n            usersBalance[msg.sender] -= _numDAI;\r\n            totalDeposit -= _numDAI;\r\n            emit _withdraw(msg.sender, _numDAI);\r\n        } else {\r\n            uint CPResult1 = CPProxyContract.redeemUnderlying(DAI2cDAI(_numDAI));\r\n            if(CPResult1 == 0) {\r\n                DAI_TOKEN_ADDRESS.transfer(msg.sender, _numDAI);\r\n                usersBalance[msg.sender] -= _numDAI;\r\n                totalDeposit -= _numDAI;\r\n                emit _withdraw(msg.sender, _numDAI);\r\n            }\r\n        }\r\n        if(_partner != address(0)) {\r\n            partners[_partner].totalDeposit = partners[_partner].totalDeposit.sub(_numDAI);\r\n            partners[_partner].totalCDAI = partners[_partner].totalCDAI.sub(DAI2cDAI(_numDAI));\r\n        }\r\n    }\r\n    function withdrawETHByUser(uint _numDAI, address _partner) public {\r\n        require(usersBalance[msg.sender] >= _numDAI);\r\n        uint CPResult = CPProxyContract.redeem(DAI2cDAI(_numDAI));\r\n\r\n        if(CPResult == 0) {\r\n            proccessWDToken(_numDAI, ETH_TOKEN_ADDRESS);\r\n        } else {\r\n            uint CPResult1 = CPProxyContract.redeemUnderlying(DAI2cDAI(_numDAI));\r\n            if(CPResult1 == 0) {\r\n                proccessWDToken(_numDAI, ETH_TOKEN_ADDRESS);\r\n            }\r\n        }\r\n        if(_partner != address(0)) {\r\n            partners[_partner].totalDeposit = partners[_partner].totalDeposit.sub(_numDAI);\r\n            partners[_partner].totalCDAI = partners[_partner].totalCDAI.sub(DAI2cDAI(_numDAI));\r\n        }\r\n    }\r\n    function withdrawTokenByUser(uint _numDAI, ERC20 destToken, address _partner) public {\r\n        require(usersBalance[msg.sender] >= _numDAI);\r\n        uint CPResult = CPProxyContract.redeem(DAI2cDAI(_numDAI));\r\n\r\n        if(CPResult == 0) {\r\n            proccessWDToken(_numDAI, destToken);\r\n        } else {\r\n            uint CPResult1 = CPProxyContract.redeemUnderlying(DAI2cDAI(_numDAI));\r\n            if(CPResult1 == 0) {\r\n                proccessWDToken(_numDAI, destToken);\r\n            }\r\n        }\r\n        if(_partner != address(0)) {\r\n            partners[_partner].totalDeposit = partners[_partner].totalDeposit.sub(_numDAI);\r\n            partners[_partner].totalCDAI = partners[_partner].totalCDAI.sub(DAI2cDAI(_numDAI));\r\n        }\r\n    }\r\n    function proccessWDToken(uint _numDAI, ERC20 destToken) internal {\r\n        uint256 minConversionRate;\r\n        (minConversionRate,,) = proxyKyberSwap.getConversionRates(DAI_TOKEN_ADDRESS, _numDAI, destToken);\r\n        uint256 processAmount = _numDAI <= 1 ether ? minConversionRate : minConversionRate.mul(_numDAI).div(1 ether);\r\n        DAI_TOKEN_ADDRESS.approve(address(proxyKyberSwap), _numDAI);\r\n        proxyKyberSwap.executeSwap.value(msg.value)(\r\n            DAI_TOKEN_ADDRESS,\r\n            _numDAI,\r\n            destToken,\r\n            msg.sender,\r\n            processAmount,\r\n            1\r\n        );\r\n        usersBalance[msg.sender] -= _numDAI;\r\n        totalDeposit -= _numDAI;\r\n        emit _withdraw(msg.sender, _numDAI);\r\n    }\r\n    function __withdraw(uint256 amount) internal {\r\n        require(address(this).balance >= amount);\r\n        if(amount > 0) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n    function withdraw(uint256 _ethAmount, ERC20[] memory _tokens, uint256[] memory _tokenAdmounts) public onlyCeo {\r\n        require(_tokens.length == _tokenAdmounts.length);\r\n        __withdraw(_ethAmount);\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            ERC20 erc20 = ERC20(_tokens[i]);\r\n            erc20.transfer(msg.sender, _tokenAdmounts[i]);\r\n        }\r\n\r\n    }\r\n    function setCeo(address _ceo) public onlyCeo{\r\n        ceo = _ceo;\r\n    }\r\n    function checkInterest() public view returns(uint256){\r\n        uint256 interest = balanceOfDai().sub(totalDeposit);\r\n        uint256 commission;\r\n        for(uint8 i; i < partnerArr.length; i++){\r\n            uint256 interest1 = cDAI2DAI(partners[i].totalCDAI).sub(partners[i].totalDeposit);\r\n            commission += interest1.sub(interest1.mul(partnerPercent).div(10000));\r\n\r\n        }\r\n        return interest.sub(commission);\r\n    }\r\n    function setAward(uint256 _awardId, address[] _members) public onlyCeo{\r\n        require(!awards[_awardId].isSet && _awardId > 0);\r\n        uint256 _amount = currentAward == 0 ? minAward : (_awardId - currentAward) * minAward;\r\n        _amount = _amount < maxAward ? _amount : maxAward;\r\n        if(checkInterest() < _amount) {\r\n            require(DAI_TOKEN_ADDRESS.transferFrom(msg.sender, address(this), _amount), \"not enough DAI balance\");\r\n            DAI_TOKEN_ADDRESS.approve(address(CPProxyContract), _amount);\r\n            CPProxyContract.mint(_amount);\r\n        }\r\n        \r\n        totalDeposit += _amount;\r\n        totalAward += _amount;\r\n        for(uint256 i = 0; i< _members.length; i++) {\r\n            usersBalance[_members[i]] += _amount.div(_members.length);\r\n        }\r\n\r\n        awards[_awardId] = award(true, _amount, _members);\r\n        currentAward = _awardId;\r\n        emit _setAward(_awardId, _members, _amount);\r\n    }\r\n    function getAward(uint256 _awardId) public view returns(bool isSet, uint256 totalAmount, address[] members) {\r\n        return (awards[_awardId].isSet, awards[_awardId].totalAmount, awards[_awardId].members);\r\n    }\r\n    function setAwardRanking(uint256 _awardId, address[] _members) public onlyCeo{\r\n        // decimal = 10000\r\n        require(!awardRankings[_awardId].isSet && _members.length <= percenRanking.length, \"_awardId ready seted or wrong member list\");\r\n        uint256 interest = balanceOfDai().sub(totalDeposit);\r\n        uint256 total;\r\n        for(uint256 i = 0; i< _members.length; i++) {\r\n            uint256 amount = interest.mul(percenRanking[i]).div(10000);\r\n            usersBalance[_members[i]] += amount;\r\n            total += amount;\r\n        }\r\n\r\n        totalAwardRanking += total;\r\n        awardRankings[_awardId] = awardRanking(true, total, _members, percenRanking);\r\n        emit _setAwardRanking(_awardId, _members, percenRanking);\r\n    }\r\n    function setAwardPartner(uint256 _weekId) public onlyCeo{\r\n        // decimal = 10000\r\n        require(latestDatePartnerAward == 0 || _weekId - latestDatePartnerAward >= periodPartnerAward);\r\n        require(_weekId < now);\r\n\r\n        for(uint8 i; i < partnerArr.length; i++){\r\n            uint256 interest = cDAI2DAI(partners[i].totalCDAI).sub(partners[i].totalDeposit);\r\n            uint256 profit = interest.mul(partnerPercent).div(10000);\r\n            usersBalance[partnerArr[i]] = usersBalance[partnerArr[i]].add(profit);\r\n            totalAwardPartner = totalAwardPartner.add(profit);\r\n            // awardpartners[_weekId] = awardpartner(true, profit);\r\n            partners[partnerArr[i]].totalCDAI = DAI2cDAI(partners[partnerArr[i]].totalDeposit);\r\n            emit _setAwardPartner(_weekId, partnerArr[i], profit);\r\n\r\n        }\r\n        latestDatePartnerAward = _weekId;\r\n    }\r\n    function getAwardRanking(uint256 _awardId) public view returns(bool isSet, uint256 totalAmount, address[] members) {\r\n        return (awards[_awardId].isSet, awards[_awardId].totalAmount, awards[_awardId].members);\r\n    }\r\n    function checkAwardPartner(address _partner) public view returns(uint256 _totalDeposit, uint256 _totalCDAI, uint256 _interest) {\r\n        return (partners[_partner].totalDeposit, partners[_partner].totalCDAI, cDAI2DAI(partners[_partner].totalCDAI).sub(partners[_partner].totalDeposit));\r\n    }\r\n    function pay2seeResult(address _user) public {\r\n        require(DAI_TOKEN_ADDRESS.transferFrom(msg.sender, address(this), seeResultFee), \"not enough DAI balance\");\r\n        uint256 sysAmount = seeResultFee.mul(seeResultFeePercent[0]).div(10000);\r\n        uint256 userAmount = seeResultFee.mul(seeResultFeePercent[1]).div(10000);\r\n        DAI_TOKEN_ADDRESS.transfer(ceo, sysAmount);\r\n        DAI_TOKEN_ADDRESS.transfer(_user, userAmount);\r\n        emit _pay2seeResult(msg.sender, _user, userAmount, sysAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_awardId\",\"type\":\"uint256\"}],\"name\":\"getAward\",\"outputs\":[{\"name\":\"isSet\",\"type\":\"bool\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"members\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeResultFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"getConversionRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_proccessAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numDAI\",\"type\":\"uint256\"}],\"name\":\"DAI2cDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percenRanking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numcDAI\",\"type\":\"uint256\"}],\"name\":\"cDAI2DAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_tokenAdmounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percenRanking\",\"type\":\"uint256[]\"}],\"name\":\"configPercenRanking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"awardRankings\",\"outputs\":[{\"name\":\"isSet\",\"type\":\"bool\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyKyberSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeResultFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weekId\",\"type\":\"uint256\"}],\"name\":\"setAwardPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerPercent\",\"type\":\"uint256\"},{\"name\":\"_partners\",\"type\":\"address[]\"},{\"name\":\"_periodPartnerAward\",\"type\":\"uint256\"}],\"name\":\"configPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CPProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numDAI\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"withdrawETHByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAwardPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartnerArr\",\"outputs\":[{\"name\":\"_partners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numDAI\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"withdrawTokenByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPartnerAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercenRanking\",\"outputs\":[{\"name\":\"_percenRanking\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seeResultFee\",\"type\":\"uint256\"},{\"name\":\"_seeResultFeePercent\",\"type\":\"uint256[]\"}],\"name\":\"configSeeResultFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPSeeResultFeePercent\",\"outputs\":[{\"name\":\"_seeResultFeePercen\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"partners\",\"outputs\":[{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalCDAI\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAwardSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAwardRanking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_awardId\",\"type\":\"uint256\"},{\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"setAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_awardId\",\"type\":\"uint256\"},{\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"setAwardRanking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDatePartnerAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAward\",\"type\":\"uint256\"},{\"name\":\"_maxAward\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfcDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numDAI\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"depositDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"checkAwardPartner\",\"outputs\":[{\"name\":\"_totalDeposit\",\"type\":\"uint256\"},{\"name\":\"_totalCDAI\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerArr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numDAI\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"withdrawByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pay2seeResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_awardId\",\"type\":\"uint256\"}],\"name\":\"getAwardRanking\",\"outputs\":[{\"name\":\"isSet\",\"type\":\"bool\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"members\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"awards\",\"outputs\":[{\"name\":\"isSet\",\"type\":\"bool\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_numDAI\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_numDAI\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_awardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_members\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_userAward\",\"type\":\"uint256\"}],\"name\":\"_setAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_awardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_members\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"_setAwardRanking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_weekId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"_setAwardPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sysAmount\",\"type\":\"uint256\"}],\"name\":\"_pay2seeResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TOMORROWPRICE","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://021004db3b2b30cc3d5d6cd5a1fbf4fa7e1baf832e534c1269a42ac5f67d19c8"}]}