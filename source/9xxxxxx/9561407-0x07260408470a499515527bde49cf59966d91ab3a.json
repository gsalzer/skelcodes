{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\n\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract ICards is IERC721 {\n\n    struct Batch {\n        uint48 userID;\n        uint16 size;\n    }\n\n    function batches(uint index) public view returns (uint48 userID, uint16 size);\n\n    function userIDToAddress(uint48 id) public view returns (address);\n\n    function getDetails(\n        uint tokenId\n    )\n        public\n        view\n        returns (\n        uint16 proto,\n        uint8 quality\n    );\n\n    function setQuality(\n        uint tokenId,\n        uint8 quality\n    ) public;\n\n    function mintCards(\n        address to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n        returns (uint);\n\n    function mintCard(\n        address to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n        returns (uint);\n\n    function burn(uint tokenId) public;\n\n    function batchSize()\n        public\n        view\n        returns (uint);\n}\n\ncontract PromoFactory is Ownable {\n\n    ICards public cards;\n\n    mapping(uint16 => Promo) public promos;\n    mapping(address => uint) public adminMintersMapping;\n\n    address[] public adminMintersArray;\n\n    struct Promo {\n        bool isLocked;\n        address[] minters;\n    }\n\n    /**\n     * Events\n     */\n\n    event AdminMinterAdded(\n        address minter\n    );\n\n    event AdminMinterRemoved(\n        address minter\n    );\n\n    event PromoMinterAdded(\n        uint16 proto,\n        address minter\n    );\n\n    event PromoMinterRemoved(\n        uint16 proto,\n        address minter\n    );\n\n    event PromoLocked(\n        uint16 proto\n    );\n\n    /**\n     * Constructor\n     */\n\n    constructor(\n        ICards _cards\n    )\n        public\n    {\n        cards = _cards;\n    }\n\n    /**\n     * Public functions\n     */\n\n    /**\n     * @dev Mint multiple cards with multiple properties.\n     *\n     * @param _to Owner of newly minted cards\n     * @param _protos The protos to be minted\n     * @param _qualities The qualities to be minted\n     */\n    function mint(\n        address _to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n    {\n        require(\n            _protos.length == _qualities.length,\n            \"Promo Factory: array length mismatch between protos and qualities\"\n        );\n\n        for (uint i; i < _protos.length; i++) {\n            uint16 proto = _protos[i];\n            require(\n                isValidMinter(msg.sender, proto) == true,\n                \"Promo Factory: only assigned minter can mint for this proto\"\n            );\n\n            require(\n                promos[proto].isLocked == false,\n                \"Promo Factory: cannot mint a locked proto\"\n            );\n        }\n\n        cards.mintCards(_to, _protos, _qualities);\n    }\n\n    /**\n     * @dev Mint a single card.\n     *\n     * @param _to Destination address to receive card.\n     * @param _proto Proto of card\n     * @param _quality Quality of card\n     */\n    function mintSingle(\n        address _to,\n        uint16 _proto,\n        uint8 _quality\n    )\n        public\n    {\n\n        require(\n            isValidMinter(msg.sender, _proto) == true,\n            \"Promo Factory: only assigned minter can mint for this proto\"\n        );\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: cannot mint a locked proto\"\n        );\n\n        cards.mintCard(_to, _proto, _quality);\n    }\n\n    /**\n     * @dev Return all the valid minters for a proto\n     *\n     * @param _proto Proto to check against\n     */\n    function validMinters(\n        uint16 _proto\n    )\n        public\n        view\n        returns (address[] memory)\n    {\n        return promos[_proto].minters;\n    }\n\n    /**\n     * @dev Check if an address is a valid minter\n     *\n     * @param _minter The minter to check\n     * @param _proto The proto to check against\n     */\n    function isValidMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        view\n        returns (bool)\n    {\n        Promo memory promo = promos[_proto];\n        for (uint256 i = 0; i < promo.minters.length; i++) {\n            if (promo.minters[i] == _minter) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Check if a promo is locked\n     *\n     * @param _proto The proto to check against\n     */\n    function isPromoLocked(\n        uint16 _proto\n    )\n        public\n        view\n        returns (bool)\n    {\n        return promos[_proto].isLocked;\n    }\n\n    /**\n     * @dev Return a list of all the admin minters\n     */\n    function getAdminMinters() public view returns (address[] memory) {\n        return adminMintersArray;\n    }\n\n    /**\n     * Only Owner functions\n     *\n     */\n\n    /**\n     * @dev Add an admin minter (can mint anything)\n     *\n     * @param _minter The address of the minter to add\n     */\n    function addAdminMinter(\n        address _minter\n    )\n        public\n        onlyOwner\n    {\n        adminMintersMapping[_minter] = uint128(adminMintersArray.push(_minter));\n\n        emit AdminMinterAdded(_minter);\n    }\n\n    /**\n     * @dev Remove an admin minter.\n     *\n     * @param _minter The address of the minter to remove\n     */\n    function removeAdminMinter(\n        address _minter\n    )\n        public\n        onlyOwner\n    {\n        address last = adminMintersArray[adminMintersArray.length - 1];\n        if(_minter != last) {\n            uint256 targetIndex = adminMintersMapping[_minter] - 1;\n            adminMintersArray[targetIndex] = last;\n            adminMintersMapping[last] = targetIndex + 1;\n        }\n\n        adminMintersArray.length --;\n        delete adminMintersMapping[_minter];\n\n        emit AdminMinterRemoved(_minter);\n    }\n\n    /**\n     * @dev Mint cards as an admin minter\n     *\n     * @param _to Owner of the cards to be minted\n     * @param _protos Array of protos of cards to mint\n     * @param _qualities Array of qualities of cards to mint\n     */\n    function adminMintCards(\n        address _to,\n        uint16[] memory _protos,\n        uint8[] memory _qualities\n    )\n        public\n    {\n\n        require(\n            adminMintersMapping[msg.sender] > 0,\n            \"Promo Factory: must be an admin minter to call adminMintCards()\"\n        );\n\n        cards.mintCards(_to, _protos, _qualities);\n    }\n\n    /**\n     * @dev Assign an address to be a minter for a promo.\n     * \n     * @param _minter The minter to add\n     * @param _proto The proto to assign the minter to\n     */\n    function addPromoMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: proto already locked\"\n        );\n\n        promos[_proto].minters.push(_minter);\n\n        emit PromoMinterAdded(_proto, _minter);\n    }\n\n    /**\n     * @dev Remove an address to be a minter for a promo.\n     * \n     * @param _minter The minter to remove\n     * @param _proto The proto to remove the minter from\n     */\n    function removePromoMinter(\n        address _minter,\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n        bool found = false;\n        uint index = 0;\n\n        Promo storage promo = promos[_proto];\n        for (uint i = 0; i < promo.minters.length; i++) {\n            if (promo.minters[i] == _minter) {\n                index = i;\n                found = true;\n            }\n        }\n\n        require(\n            found == true,\n            \"Promo Factory: Must be a valid minter\"\n        );\n\n        for (uint i = index; i < promo.minters.length - 1; i++){\n            promo.minters[i] = promo.minters[i+1];\n        }\n\n        delete promo.minters[promo.minters.length - 1];\n        promo.minters.length--;\n\n        emit PromoMinterRemoved(_proto, _minter);\n    }\n\n    /**\n     * @dev Lock a proto so more cards can't be minted\n     *\n     * @param _proto The proto to lock\n     */\n    function lock(\n        uint16 _proto\n    )\n        public\n        onlyOwner\n    {\n        require(\n            promos[_proto].minters.length != 0,\n            \"Promo Factory: must be an assigned proto\"\n        );\n\n        require(\n            promos[_proto].isLocked == false,\n            \"Promo Factory: cannot lock a locked proto\"\n        );\n\n        promos[_proto].isLocked = true;\n\n        emit PromoLocked(_proto);\n    }\n\n}\n\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract ERC721 is Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][to] = approved;\n        emit ApprovalForAll(_msgSender(), to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n        _transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Constructor function.\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721Enumerable via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        _addTokenToAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {ERC721-_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n        _ownedTokensIndex[tokenId] = 0;\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Gets the list of token IDs of the requested owner.\n     * @param owner address owning the tokens\n     * @return uint256[] List of token IDs owned by the requested address\n     */\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n        // lastTokenId, or just over the end of the array if the token was the last one).\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n}\n\ncontract CardOwnershipTwo is ERC721Enumerable {\n\n    function transferFrom(address from, address to, uint id) public {\n        super.transferFrom(from, to, id);\n    }\n\n}\n\ncontract Governable {\n\n    event Pause();\n    event Unpause();\n\n    address public governor;\n    bool public paused = false;\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    function setGovernor(address _gov) public onlyGovernor {\n        governor = _gov;\n    }\n\n    modifier onlyGovernor {\n        require(msg.sender == governor);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyGovernor whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyGovernor whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n}\n\ncontract CardBase is Governable {\n\n    struct Card {\n        uint16 proto;\n        uint16 purity;\n    }\n\n    function getCard(uint id) public view returns (uint16 proto, uint16 purity) {\n        Card memory card = cards[id];\n        return (card.proto, card.purity);\n    }\n\n    function getShine(uint16 purity) public pure returns (uint8) {\n        return uint8(purity / 1000);\n    }\n\n    Card[] public cards;\n    \n}\n\ncontract CardProto is CardBase {\n\n    event NewProtoCard(\n        uint16 id, uint8 season, uint8 god, \n        Rarity rarity, uint8 mana, uint8 attack, \n        uint8 health, uint8 cardType, uint8 tribe, bool packable\n    );\n\n    struct Limit {\n        uint64 limit;\n        bool exists;\n    }\n\n    // limits for mythic cards\n    mapping(uint16 => Limit) public limits;\n\n    // can only set limits once\n    function setLimit(uint16 id, uint64 limit) public onlyGovernor {\n        Limit memory l = limits[id];\n        require(!l.exists);\n        limits[id] = Limit({\n            limit: limit,\n            exists: true\n        });\n    }\n\n    function getLimit(uint16 id) public view returns (uint64 limit, bool set) {\n        Limit memory l = limits[id];\n        return (l.limit, l.exists);\n    }\n\n    // could make these arrays to save gas\n    // not really necessary - will be update a very limited no of times\n    mapping(uint8 => bool) public seasonTradable;\n    mapping(uint8 => bool) public seasonTradabilityLocked;\n    uint8 public currentSeason;\n\n    function makeTradable(uint8 season) public onlyGovernor {\n        seasonTradable[season] = true;\n    }\n\n    function makeUntradable(uint8 season) public onlyGovernor {\n        require(!seasonTradabilityLocked[season]);\n        seasonTradable[season] = false;\n    }\n\n    function makePermanantlyTradable(uint8 season) public onlyGovernor {\n        require(seasonTradable[season]);\n        seasonTradabilityLocked[season] = true;\n    }\n\n    function isTradable(uint16 proto) public view returns (bool) {\n        return seasonTradable[protos[proto].season];\n    }\n\n    function nextSeason() public onlyGovernor {\n        //Seasons shouldn't go to 0 if there is more than the uint8 should hold, the governor should know this ¯\\_(ツ)_/¯ -M\n        require(currentSeason <= 255); \n\n        currentSeason++;\n        mythic.length = 0;\n        legendary.length = 0;\n        epic.length = 0;\n        rare.length = 0;\n        common.length = 0;\n    }\n\n    enum Rarity {\n        Common,\n        Rare,\n        Epic,\n        Legendary, \n        Mythic\n    }\n\n    uint8 constant SPELL = 1;\n    uint8 constant MINION = 2;\n    uint8 constant WEAPON = 3;\n    uint8 constant HERO = 4;\n\n    struct ProtoCard {\n        bool exists;\n        uint8 god;\n        uint8 season;\n        uint8 cardType;\n        Rarity rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    // there is a particular design decision driving this:\n    // need to be able to iterate over mythics only for card generation\n    // don't store 5 different arrays: have to use 2 ids\n    // better to bear this cost (2 bytes per proto card)\n    // rather than 1 byte per instance\n\n    uint16 public protoCount;\n    \n    mapping(uint16 => ProtoCard) protos;\n\n    uint16[] public mythic;\n    uint16[] public legendary;\n    uint16[] public epic;\n    uint16[] public rare;\n    uint16[] public common;\n\n    function addProtos(\n        uint16[] memory externalIDs, uint8[] memory gods, Rarity[] memory rarities, uint8[] memory manas, uint8[] memory attacks, \n        uint8[] memory healths, uint8[] memory cardTypes, uint8[] memory tribes, bool[] memory packable\n    ) public onlyGovernor returns(uint16) {\n\n        for (uint i = 0; i < externalIDs.length; i++) {\n\n            ProtoCard memory card = ProtoCard({\n                exists: true,\n                god: gods[i],\n                season: currentSeason,\n                cardType: cardTypes[i],\n                rarity: rarities[i],\n                mana: manas[i],\n                attack: attacks[i],\n                health: healths[i],\n                tribe: tribes[i]\n            });\n\n            _addProto(externalIDs[i], card, packable[i]);\n        }\n        \n    }\n\n    function addProto(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: cardType,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addWeapon(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 durability, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: WEAPON,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: durability,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addSpell(uint16 externalID, uint8 god, Rarity rarity, uint8 mana, bool packable) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: SPELL,\n            rarity: rarity,\n            mana: mana,\n            attack: 0,\n            health: 0,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addMinion(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: MINION,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function _addProto(uint16 externalID, ProtoCard memory card, bool packable) internal {\n\n        require(!protos[externalID].exists);\n\n        card.exists = true;\n\n        protos[externalID] = card;\n\n        protoCount++;\n\n        emit NewProtoCard(\n            externalID, currentSeason, card.god, \n            card.rarity, card.mana, card.attack, \n            card.health, card.cardType, card.tribe, packable\n        );\n\n        if (packable) {\n            Rarity rarity = card.rarity;\n            if (rarity == Rarity.Common) {\n                common.push(externalID);\n            } else if (rarity == Rarity.Rare) {\n                rare.push(externalID);\n            } else if (rarity == Rarity.Epic) {\n                epic.push(externalID);\n            } else if (rarity == Rarity.Legendary) {\n                legendary.push(externalID);\n            } else if (rarity == Rarity.Mythic) {\n                mythic.push(externalID);\n            } else {\n                require(false);\n            }\n        }\n    }\n\n    function getProto(uint16 id) public view returns(\n        bool exists, uint8 god, uint8 season, uint8 cardType, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) {\n        ProtoCard memory proto = protos[id];\n        return (\n            proto.exists,\n            proto.god,\n            proto.season,\n            proto.cardType,\n            proto.rarity,\n            proto.mana,\n            proto.attack,\n            proto.health,\n            proto.tribe\n        );\n    }\n\n    function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16) {\n        // modulo bias is fine - creates rarity tiers etc\n        // will obviously revert is there are no cards of that type: this is expected - should never happen\n        if (rarity == Rarity.Common) {\n            return common[random % common.length];\n        } else if (rarity == Rarity.Rare) {\n            return rare[random % rare.length];\n        } else if (rarity == Rarity.Epic) {\n            return epic[random % epic.length];\n        } else if (rarity == Rarity.Legendary) {\n            return legendary[random % legendary.length];\n        } else if (rarity == Rarity.Mythic) {\n            // make sure a mythic is available\n            uint16 id;\n            uint64 limit;\n            bool set;\n            for (uint i = 0; i < mythic.length; i++) {\n                id = mythic[(random + i) % mythic.length];\n                (limit, set) = getLimit(id);\n                if (set && limit > 0){\n                    return id;\n                }\n            }\n            // if not, they get a legendary :(\n            return legendary[random % legendary.length];\n        }\n        require(false);\n        return 0;\n    }\n\n    // can never adjust tradable cards\n    // each season gets a 'balancing beta'\n    // totally immutable: season, rarity\n    function replaceProto(\n        uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) public onlyGovernor {\n        ProtoCard memory pc = protos[index];\n        require(!seasonTradable[pc.season]);\n        protos[index] = ProtoCard({\n            exists: true,\n            god: god,\n            season: pc.season,\n            cardType: cardType,\n            rarity: pc.rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n    }\n\n}\n\ncontract CardIntegrationTwo is CardOwnershipTwo, CardProto {\n    \n    address[] public packs;\n\n    event CardCreated(uint indexed id, uint16 proto, uint16 purity, address owner);\n\n    function addPack(address approved) public onlyGovernor {\n        packs.push(approved);\n    }\n\n    modifier onlyApprovedPacks {\n        require(_isApprovedPack());\n        _;\n    }\n\n    function _isApprovedPack() private view returns (bool) {\n        for (uint i = 0; i < packs.length; i++) {\n            if (msg.sender == address(packs[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function createCard(address owner, uint16 proto, uint16 purity) public returns (uint) {\n        // if (card.rarity == Rarity.Mythic) {\n        //     uint64 limit;\n        //     bool exists;\n        //     (limit, exists) = getLimit(proto);\n        //     require(!exists || limit > 0);\n        //     limits[proto].limit--;\n        // }\n        return _createCard(owner, proto, purity);\n    }\n\n    function _createCard(address owner, uint16 proto, uint16 purity) internal returns (uint) {\n        \n        Card memory card = Card({\n            proto: proto,\n            purity: purity\n        });\n\n        uint id = cards.push(card) - 1;\n\n        _mint(owner, id);\n\n        emit CardCreated(id, proto, purity, owner);\n\n        return id;\n    }\n\n}\n\ncontract BaseMigration {\n\n    function convertPurity(uint16 purity) public pure returns (uint8) {\n        return uint8(4 - (purity / 1000));\n    }\n\n    function convertProto(uint16 proto) public view returns (uint16) {\n        if (proto >= 1 && proto <= 377) {\n            return proto;\n        }\n        // first phoenix\n        if (proto == 380) {\n            return 400;\n        }\n        // light's bidding\n        if (proto == 381) {\n            return 401;\n        }\n        // chimera\n        if (proto == 394) {\n            return 402;\n        }\n        // etherbots\n        (bool found, uint index) = getEtherbotsIndex(proto);\n        if (found) {\n            return uint16(380 + index);\n        }\n        // hyperion\n        if (proto == 378) {\n            return 65000;\n        }\n        // prometheus\n        if (proto == 379) {\n            return 65001;\n        }\n        // atlas\n        if (proto == 383) {\n            return 65002;\n        }\n        // tethys\n        if (proto == 384) {\n            return 65003;\n        }\n        require(false, \"unrecognised proto\");\n    }\n\n    uint16[] internal ebs = [400, 413, 414, 421, 427, 428, 389, 415, 416, 422, 424, 425, 426, 382, 420, 417];\n\n    function getEtherbotsIndex(uint16 proto) public view returns (bool, uint16) {\n        for (uint16 i = 0; i < ebs.length; i++) {\n            if (ebs[i] == proto) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n}\n\ncontract ChimeraMigration is BaseMigration, Ownable {\n\n    // The old cards contract\n    CardIntegrationTwo public oldCards;\n\n    // The promo factory that ChimeraMigration can create new cards from\n    PromoFactory public promoFactory;\n\n    // The cut off point at which before cards will NOT be migrated.\n    uint public cutOffLimit;\n\n    // Keep track of migrated and claimed chimeras\n    mapping (uint => bool) public hasMigrated;\n\n    event Migrated(\n        uint tokenId,\n        address owner,\n        uint16 proto,\n        uint8 quality\n    );\n\n    constructor(\n        address _oldCardsAddress,\n        address _promoFactoryAddress,\n        uint _cutOffLimit\n    )\n        public\n    {\n        oldCards = CardIntegrationTwo(_oldCardsAddress);\n        promoFactory = PromoFactory(_promoFactoryAddress);\n        cutOffLimit = _cutOffLimit;\n    }\n\n    function selfDestruct() public onlyOwner {\n        selfdestruct(address(uint160(0x0)));\n    }\n\n    /**\n     * @dev Migrate multiple tokens at once.\n     *\n     * @param _tokenIds List of tokens to migrate\n     */\n    function migrateMultiple(\n        uint[] memory _tokenIds\n    )\n        public\n    {\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            migrate(_tokenIds[i]);\n        }\n    }\n    \n\n    /**\n     * @dev Migrate Chimeras from the old Cards contract to the new one.\n     */\n    function migrate(\n        uint _tokenId\n    ) public returns (bool) {\n        require(\n            _tokenId >= cutOffLimit,\n            \"Chimera Migration: must be greater than or equal to the cut off\"\n        );\n\n        address originalOwner = oldCards.ownerOf(_tokenId);\n\n        require(\n            hasMigrated[_tokenId] == false,\n            \"Chimera Migration: has already migrated Chimera\"\n        );\n\n        (uint16 proto, uint16 purity) = oldCards.getCard(_tokenId);\n\n        require(\n            proto == 394,\n            \"Chimera Migration: must be a Chimera card\"\n        );\n\n        uint16 convertedProto = convertProto(proto);\n        uint8 convertedQuality = convertPurity(purity);\n\n        hasMigrated[_tokenId] = true;\n        promoFactory.mintSingle(originalOwner, convertedProto, convertedQuality);\n\n        emit Migrated(_tokenId, originalOwner, convertedProto, convertedQuality);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"getEtherbotsIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cutOffLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"}],\"name\":\"convertProto\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"convertPurity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"migrateMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldCards\",\"outputs\":[{\"internalType\":\"contract CardIntegrationTwo\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoFactory\",\"outputs\":[{\"internalType\":\"contract PromoFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldCardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promoFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cutOffLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quality\",\"type\":\"uint8\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ChimeraMigration","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab0000000000000000000000000e3a2a1f2146d86a604adc220b4967a898d7fe07000000000000000000000000000000000000000000000000000000000008dc7c","Library":"","LicenseType":"","SwarmSource":""}]}