{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    require(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    require(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TwoKeyCongress {\r\n\r\n    event ReceivedEther(address sender, uint amount);\r\n\r\n    using SafeMath for uint;\r\n\r\n    //Period length for voting\r\n    uint256 public debatingPeriodInMinutes;\r\n    //Array of proposals\r\n    Proposal[] public proposals;\r\n    //Number of proposals\r\n    uint public numProposals;\r\n\r\n    TwoKeyCongressMembersRegistry public twoKeyCongressMembersRegistry;\r\n\r\n    event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\r\n    event Voted(uint proposalID, bool position, address voter, string justification);\r\n    event ProposalTallied(uint proposalID, uint quorum, bool active);\r\n    event ChangeOfRules(uint256 _newDebatingPeriodInMinutes);\r\n\r\n    struct Proposal {\r\n        address recipient;\r\n        uint amount;\r\n        string description;\r\n        uint minExecutionDate;\r\n        bool executed;\r\n        bool proposalPassed;\r\n        uint numberOfVotes;\r\n        uint againstProposalTotal;\r\n        uint supportingProposalTotal;\r\n        bytes32 proposalHash;\r\n        bytes transactionBytecode;\r\n        Vote[] votes;\r\n        mapping (address => bool) voted;\r\n    }\r\n\r\n    struct Vote {\r\n        bool inSupport;\r\n        address voter;\r\n        string justification;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Modifier to check if the msg.sender is member of the congress\r\n     */\r\n    modifier onlyMembers() {\r\n        require(twoKeyCongressMembersRegistry.isMember(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param _minutesForDebate is the number of minutes debate length\r\n     */\r\n    constructor(\r\n        uint256 _minutesForDebate\r\n    )\r\n    payable\r\n    public\r\n    {\r\n        changeVotingRules(_minutesForDebate);\r\n    }\r\n\r\n    /**\r\n     * @notice Function which will be called only once immediately after contract is deployed\r\n     * @param _twoKeyCongressMembers is the address of already deployed contract\r\n     */\r\n    function setTwoKeyCongressMembersContract(\r\n        address _twoKeyCongressMembers\r\n    )\r\n    public\r\n    {\r\n        require(address(twoKeyCongressMembersRegistry) == address(0));\r\n        twoKeyCongressMembersRegistry = TwoKeyCongressMembersRegistry(_twoKeyCongressMembers);\r\n    }\r\n\r\n\r\n    /**\r\n     * Change voting rules\r\n     * @param minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\r\n     */\r\n    function changeVotingRules(\r\n        uint256 minutesForDebate\r\n    )\r\n    internal\r\n    {\r\n        debatingPeriodInMinutes = minutesForDebate;\r\n        emit ChangeOfRules(minutesForDebate);\r\n    }\r\n\r\n    /**\r\n     * Add Proposal\r\n     *\r\n     * Propose to send `weiAmount / 1e18` ether to `beneficiary` for `jobDescription`. `transactionBytecode ? Contains : Does not contain` code.\r\n     *\r\n     * @param beneficiary who to send the ether to\r\n     * @param weiAmount amount of ether to send, in wei\r\n     * @param jobDescription Description of job\r\n     * @param transactionBytecode bytecode of transaction\r\n     */\r\n    function newProposal(\r\n        address beneficiary,\r\n        uint weiAmount,\r\n        string jobDescription,\r\n        bytes transactionBytecode)\r\n    public\r\n    payable\r\n    onlyMembers\r\n    {\r\n        uint proposalID = proposals.length++;\r\n        Proposal storage p = proposals[proposalID];\r\n        p.recipient = beneficiary;\r\n        p.amount = weiAmount;\r\n        p.description = jobDescription;\r\n        p.proposalHash = keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\r\n        p.transactionBytecode = transactionBytecode;\r\n        p.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\r\n        p.executed = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes = 0;\r\n        p.againstProposalTotal = 0;\r\n        p.supportingProposalTotal = 0;\r\n        emit ProposalAdded(proposalID, beneficiary, weiAmount, jobDescription);\r\n        numProposals = proposalID+1;\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if a proposal code matches\r\n     *\r\n     * @param proposalNumber ID number of the proposal to query\r\n     * @param beneficiary who to send the ether to\r\n     * @param weiAmount amount of ether to send\r\n     * @param transactionBytecode bytecode of transaction\r\n     */\r\n    function checkProposalCode(\r\n        uint proposalNumber,\r\n        address beneficiary,\r\n        uint weiAmount,\r\n        bytes transactionBytecode\r\n    )\r\n    public\r\n    view\r\n    returns (bool codeChecksOut)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        return p.proposalHash == keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\r\n    }\r\n\r\n    /**\r\n     * Log a vote for a proposal\r\n     *\r\n     * Vote `supportsProposal? in support of : against` proposal #`proposalNumber`\r\n     *\r\n     * @param proposalNumber number of proposal\r\n     * @param supportsProposal either in favor or against it\r\n     * @param justificationText optional justification text\r\n     */\r\n    function vote(\r\n        uint proposalNumber,\r\n        bool supportsProposal,\r\n        string justificationText\r\n    )\r\n    public\r\n    onlyMembers\r\n    returns (uint256 voteID)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber]; // Get the proposal\r\n        require(block.timestamp <= p.minExecutionDate);\r\n        require(!p.voted[msg.sender]);                  // If has already voted, cancel\r\n        p.voted[msg.sender] = true;                     // Set this voter as having voted\r\n        p.numberOfVotes++;\r\n        voteID = p.numberOfVotes;                     // Increase the number of votes\r\n        p.votes.push(Vote({ inSupport: supportsProposal, voter: msg.sender, justification: justificationText }));\r\n        uint votingPower = twoKeyCongressMembersRegistry.getMemberVotingPower(msg.sender);\r\n        if (supportsProposal) {                         // If they support the proposal\r\n            p.supportingProposalTotal += votingPower; // Increase score\r\n        } else {                                        // If they don't\r\n            p.againstProposalTotal += votingPower;                          // Decrease the score\r\n        }\r\n        // Create a log of this event\r\n        emit Voted(proposalNumber,  supportsProposal, msg.sender, justificationText);\r\n        return voteID;\r\n    }\r\n\r\n    function getVoteCount(\r\n        uint256 proposalNumber\r\n    )\r\n    onlyMembers\r\n    public\r\n    view\r\n    returns(uint256 numberOfVotes, uint256 supportingProposalTotal, uint256 againstProposalTotal, string description)\r\n    {\r\n        require(proposals[proposalNumber].proposalHash != 0);\r\n        numberOfVotes = proposals[proposalNumber].numberOfVotes;\r\n        supportingProposalTotal = proposals[proposalNumber].supportingProposalTotal;\r\n        againstProposalTotal = proposals[proposalNumber].againstProposalTotal;\r\n        description = proposals[proposalNumber].description;\r\n    }\r\n\r\n\r\n    /**\r\n     * Finish vote\r\n     *\r\n     * Count the votes proposal #`proposalNumber` and execute it if approved\r\n     *\r\n     * @param proposalNumber proposal number\r\n     * @param transactionBytecode optional: if the transaction contained a bytecode, you need to send it\r\n     */\r\n    function executeProposal(\r\n        uint proposalNumber,\r\n        bytes transactionBytecode\r\n    )\r\n    public\r\n    onlyMembers\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        uint minimumQuorum = twoKeyCongressMembersRegistry.minimumQuorum();\r\n        uint maxVotingPower = twoKeyCongressMembersRegistry.maxVotingPower();\r\n        require(\r\n//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\r\n             !p.executed                                                         // and it has not already been executed\r\n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\r\n            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\r\n            && uint(p.supportingProposalTotal) >= maxVotingPower.mul(51).div(100) // Total support should be >= than 51%\r\n        );\r\n\r\n        // ...then execute result\r\n        p.executed = true; // Avoid recursive calling\r\n        p.proposalPassed = true;\r\n\r\n        // Fire Events\r\n        emit ProposalTallied(proposalNumber, p.numberOfVotes, p.proposalPassed);\r\n\r\n//         Call external function\r\n        require(p.recipient.call.value(p.amount)(transactionBytecode));\r\n    }\r\n\r\n\r\n    /// @notice Function to get major proposal data\r\n    /// @param proposalId is the id of proposal\r\n    /// @return tuple containing all the data for proposal\r\n    function getProposalData(\r\n        uint proposalId\r\n    )\r\n    public\r\n    view\r\n    returns (uint,string,uint,bool,uint,uint,uint,bytes)\r\n    {\r\n        Proposal memory p = proposals[proposalId];\r\n        return (p.amount, p.description, p.minExecutionDate, p.executed, p.numberOfVotes, p.supportingProposalTotal, p.againstProposalTotal, p.transactionBytecode);\r\n    }\r\n\r\n\r\n    /// @notice Fallback function\r\n    function () payable public {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ncontract TwoKeyCongressMembersRegistry {\r\n    /**\r\n     * This contract will serve as accountant for Members inside TwoKeyCongress\r\n     * contract. Only contract eligible to mutate state of this contract is TwoKeyCongress\r\n     * TwoKeyCongress will check for it's members from this contract.\r\n     */\r\n\r\n    using SafeMath for uint;\r\n\r\n    event MembershipChanged(address member, bool isMember);\r\n\r\n    address public TWO_KEY_CONGRESS;\r\n\r\n    // The maximum voting power containing sum of voting powers of all active members\r\n    uint256 public maxVotingPower;\r\n    //The minimum number of voting members that must be in attendance\r\n    uint256 public minimumQuorum;\r\n\r\n    // Mapping to check if the member is belonging to congress\r\n    mapping (address => bool) public isMemberInCongress;\r\n    // Mapping address to memberId\r\n    mapping(address => Member) public address2Member;\r\n    // Mapping to store all members addresses\r\n    address[] public allMembers;\r\n\r\n    struct Member {\r\n        address memberAddress;\r\n        bytes32 name;\r\n        uint votingPower;\r\n        uint memberSince;\r\n    }\r\n\r\n    modifier onlyTwoKeyCongress () {\r\n        require(msg.sender == TWO_KEY_CONGRESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param initialCongressMembers is the array containing addresses of initial members\r\n     * @param memberVotingPowers is the array of unassigned integers containing voting powers respectively\r\n     * @dev initialMembers.length must be equal votingPowers.length\r\n     */\r\n    constructor(\r\n        address[] initialCongressMembers,\r\n        bytes32[] initialCongressMemberNames,\r\n        uint[] memberVotingPowers,\r\n        address _twoKeyCongress\r\n    )\r\n    public\r\n    {\r\n        uint length = initialCongressMembers.length;\r\n        for(uint i=0; i<length; i++) {\r\n            addMemberInternal(\r\n                initialCongressMembers[i],\r\n                initialCongressMemberNames[i],\r\n                memberVotingPowers[i]\r\n            );\r\n        }\r\n        TWO_KEY_CONGRESS = _twoKeyCongress;\r\n    }\r\n\r\n    /**\r\n     * Add member\r\n     *\r\n     * Make `targetMember` a member named `memberName`\r\n     *\r\n     * @param targetMember ethereum address to be added\r\n     * @param memberName public name for that member\r\n     */\r\n    function addMember(\r\n        address targetMember,\r\n        bytes32 memberName,\r\n        uint _votingPower\r\n    )\r\n    public\r\n    onlyTwoKeyCongress\r\n    {\r\n        addMemberInternal(targetMember, memberName, _votingPower);\r\n    }\r\n\r\n    function addMemberInternal(\r\n        address targetMember,\r\n        bytes32 memberName,\r\n        uint _votingPower\r\n    )\r\n    internal\r\n    {\r\n        //Require that this member is not already a member of congress\r\n        require(isMemberInCongress[targetMember] == false);\r\n        minimumQuorum = allMembers.length;\r\n        maxVotingPower = maxVotingPower.add(_votingPower);\r\n        address2Member[targetMember] = Member(\r\n            {\r\n            memberAddress: targetMember,\r\n            memberSince: block.timestamp,\r\n            votingPower: _votingPower,\r\n            name: memberName\r\n            }\r\n        );\r\n        allMembers.push(targetMember);\r\n        isMemberInCongress[targetMember] = true;\r\n        emit MembershipChanged(targetMember, true);\r\n    }\r\n\r\n    /**\r\n     * Remove member\r\n     *\r\n     * @notice Remove membership from `targetMember`\r\n     *\r\n     * @param targetMember ethereum address to be removed\r\n     */\r\n    function removeMember(\r\n        address targetMember\r\n    )\r\n    public\r\n    onlyTwoKeyCongress\r\n    {\r\n        require(isMemberInCongress[targetMember] == true);\r\n\r\n        //Remove member voting power from max voting power\r\n        uint votingPower = getMemberVotingPower(targetMember);\r\n        maxVotingPower-= votingPower;\r\n\r\n        uint length = allMembers.length;\r\n        uint i=0;\r\n        //Find selected member\r\n        while(allMembers[i] != targetMember) {\r\n            if(i == length) {\r\n                revert();\r\n            }\r\n            i++;\r\n        }\r\n\r\n        // Move the lest member to this place\r\n        allMembers[i] = allMembers[length-1];\r\n\r\n        //After reduce array size\r\n        delete allMembers[allMembers.length-1];\r\n\r\n        uint newLength = allMembers.length.sub(1);\r\n        allMembers.length = newLength;\r\n\r\n        //Remove him from state mapping\r\n        isMemberInCongress[targetMember] = false;\r\n\r\n        //Remove his state to empty member\r\n        address2Member[targetMember] = Member(\r\n            {\r\n                memberAddress: address(0),\r\n                memberSince: block.timestamp,\r\n                votingPower: 0,\r\n                name: \"0x0\"\r\n            }\r\n        );\r\n        //Reduce 1 member from quorum\r\n        minimumQuorum = minimumQuorum.sub(1);\r\n    }\r\n\r\n    /// @notice Function getter for voting power for specific member\r\n    /// @param _memberAddress is the address of the member\r\n    /// @return integer representing voting power\r\n    function getMemberVotingPower(\r\n        address _memberAddress\r\n    )\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        Member memory _member = address2Member[_memberAddress];\r\n        return _member.votingPower;\r\n    }\r\n\r\n    /**\r\n     * @notice Function which will be exposed and congress will use it as \"modifier\"\r\n     * @param _address is the address we're willing to check if it belongs to congress\r\n     * @return true/false depending if it is either a member or not\r\n     */\r\n    function isMember(\r\n        address _address\r\n    )\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return isMemberInCongress[_address];\r\n    }\r\n\r\n    /// @notice Getter for length for how many members are currently\r\n    /// @return length of members\r\n    function getMembersLength()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return allMembers.length;\r\n    }\r\n\r\n    /// @notice Function to get addresses of all members in congress\r\n    /// @return array of addresses\r\n    function getAllMemberAddresses()\r\n    public\r\n    view\r\n    returns (address[])\r\n    {\r\n        return allMembers;\r\n    }\r\n\r\n    /// Basic getter function\r\n    function getMemberInfo()\r\n    public\r\n    view\r\n    returns (address, bytes32, uint, uint)\r\n    {\r\n        Member memory member = address2Member[msg.sender];\r\n        return (member.memberAddress, member.name, member.votingPower, member.memberSince);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"minExecutionDate\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"againstProposalTotal\",\"type\":\"uint256\"},{\"name\":\"supportingProposalTotal\",\"type\":\"uint256\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twoKeyCongressMembersRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"jobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"}],\"name\":\"getVoteCount\",\"outputs\":[{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"supportingProposalTotal\",\"type\":\"uint256\"},{\"name\":\"againstProposalTotal\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_twoKeyCongressMembers\",\"type\":\"address\"}],\"name\":\"setTwoKeyCongressMembersContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"supportsProposal\",\"type\":\"bool\"},{\"name\":\"justificationText\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"voteID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"codeChecksOut\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minutesForDebate\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newDebatingPeriodInMinutes\",\"type\":\"uint256\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"}]","ContractName":"TwoKeyCongress","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000005a0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://78b61c59ca859939c24a1e2ac93485f35a798129d14c67da20c2ca9cf7534ffe"}]}