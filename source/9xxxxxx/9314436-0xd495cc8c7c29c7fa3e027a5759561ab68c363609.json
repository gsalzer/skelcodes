{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract TOKEN {\r\n   function totalSupply() external view returns (uint256);\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n   function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\r\n   function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n   function stakeCount(address stakerAddr) external view returns (uint256);\r\n   function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\r\n   function currentDay() external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = address(0xe21AC1CAE34c532a38B604669E18557B2d8840Fc);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract HKS is Ownable {\r\n\r\n    uint256 ACTIVATION_TIME = 1579564800;\r\n\r\n    modifier isActivated {\r\n        require(now >= ACTIVATION_TIME);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCustodian() {\r\n      require(msg.sender == custodianAddress);\r\n      _;\r\n    }\r\n\r\n    modifier onlyTokenHolders {\r\n        require(myTokens(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier isStakeActivated {\r\n        require(stakeActivated == true);\r\n        _;\r\n    }\r\n\r\n    event onDistribute(\r\n        address indexed customerAddress,\r\n        uint256 price\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingHEX,\r\n        uint256 tokensMinted,\r\n        uint timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 hexEarned,\r\n        uint timestamp\r\n    );\r\n\r\n    event onRoll(\r\n        address indexed customerAddress,\r\n        uint256 hexRolled,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 hexWithdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onStakeStart(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onStakeEnd(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 returnAmount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    string public name = \"HEXTEWKEN\";\r\n    string public symbol = \"HEX2\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    address internal maintenanceAddress;\r\n    address internal custodianAddress;\r\n\r\n    uint256 internal entryFee_ = 10;\r\n    uint256 internal transferFee_ = 1;\r\n    uint256 internal exitFee_ = 10;\r\n    uint256 internal tewkenaireFee_ = 10; // 10% of the 10% buy or sell fees makes it 1%\r\n    uint256 internal maintenanceFee_ = 10; // 10% of the 10% buy or sell fees makes it 1%\r\n\r\n    address public approvedAddress1;\r\n    address public approvedAddress2;\r\n    address public distributionAddress;\r\n    uint256 public totalFundCollected;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) public lockedTokenBalanceLedger;\r\n    mapping(address => int256) internal payoutsTo_;\r\n\r\n    mapping (address => Stats) public playerStats;\r\n\r\n    struct Stats {\r\n       uint256 deposits;\r\n       uint256 withdrawals;\r\n       uint256 staked;\r\n       int256 stakedNetProfitLoss;\r\n       uint256 activeStakes;\r\n    }\r\n\r\n    uint256 public totalStakeBalance = 0;\r\n\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    uint256 public totalPlayer = 0;\r\n    uint256 public totalDonation = 0;\r\n    TOKEN erc20;\r\n\r\n    struct StakeStore {\r\n      uint40 stakeID;\r\n      uint256 hexAmount;\r\n      uint72 stakeShares;\r\n      uint16 lockedDay;\r\n      uint16 stakedDays;\r\n      uint16 unlockedDay;\r\n      bool started;\r\n      bool ended;\r\n    }\r\n\r\n    bool stakeActivated = true;\r\n    mapping(address => mapping(uint256 => StakeStore)) public stakeLists;\r\n\r\n    constructor() public {\r\n        maintenanceAddress = address(0xe21AC1CAE34c532a38B604669E18557B2d8840Fc);\r\n        custodianAddress = address(0x24B23bB643082026227e945C7833B81426057b10);\r\n        distributionAddress = address(0xfE8D614431E5fea2329B05839f29B553b1Cb99A2);\r\n        approvedAddress1 = distributionAddress;\r\n        approvedAddress2 = distributionAddress;\r\n        erc20 = TOKEN(address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39));\r\n    }\r\n\r\n    function checkAndTransferHEX(uint256 _amount) private {\r\n        require(erc20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n\r\n    function distribute(uint256 _amount) public returns (uint256) {\r\n        require(_amount > 0, \"must be a positive value\");\r\n        checkAndTransferHEX(_amount);\r\n        totalDonation += _amount;\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);\r\n        emit onDistribute(msg.sender, _amount);\r\n    }\r\n\r\n    function buy(uint256 _amount) public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(msg.sender, _amount);\r\n    }\r\n\r\n    function buyFor(uint256 _amount, address _customerAddress) public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(_customerAddress, _amount);\r\n    }\r\n\r\n    function() payable public {\r\n        revert();\r\n    }\r\n\r\n    function roll() onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends();\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        uint256 _tokens = purchaseTokens(_customerAddress, _dividends);\r\n        emit onRoll(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() external {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = SafeMath.sub(tokenBalanceLedger_[_customerAddress], lockedTokenBalanceLedger[_customerAddress]);\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends();\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n        erc20.transfer(_customerAddress, _dividends);\r\n        Stats storage stats = playerStats[_customerAddress];\r\n        stats.withdrawals += _dividends;\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) onlyTokenHolders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= SafeMath.sub(tokenBalanceLedger_[_customerAddress], lockedTokenBalanceLedger[_customerAddress]));\r\n\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_amountOfTokens, exitFee_), 100);\r\n\r\n        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_),100);\r\n        erc20.transfer(maintenanceAddress, _maintenance);\r\n\r\n        uint256 _tewkenaire = SafeMath.div(SafeMath.mul(_undividedDividends, tewkenaireFee_), 100);\r\n        totalFundCollected += _tewkenaire;\r\n        erc20.transfer(distributionAddress, _tewkenaire);\r\n\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_maintenance,_tewkenaire));\r\n        uint256 _taxedHEX = SafeMath.sub(_amountOfTokens, _undividedDividends);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens + (_taxedHEX * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n        emit onTokenSell(_customerAddress, _amountOfTokens, _taxedHEX, now);\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns (bool){\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= SafeMath.sub(tokenBalanceLedger_[_customerAddress], lockedTokenBalanceLedger[_customerAddress]));\r\n\r\n        if (myDividends() > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = _tokenFee;\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setName(string _name) onlyOwner public\r\n    {\r\n       name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol) onlyOwner public\r\n    {\r\n       symbol = _symbol;\r\n    }\r\n\r\n    function setHexStaking(bool _stakeActivated) onlyOwner public\r\n    {\r\n       stakeActivated = _stakeActivated;\r\n    }\r\n\r\n    function approveAddress1(address _proposedAddress) onlyOwner public\r\n    {\r\n       approvedAddress1 = _proposedAddress;\r\n    }\r\n\r\n    function approveAddress2(address _proposedAddress) onlyCustodian public\r\n    {\r\n       approvedAddress2 = _proposedAddress;\r\n    }\r\n\r\n    function setAtomicSwapAddress() public\r\n    {\r\n        require(approvedAddress1 == approvedAddress2);\r\n        distributionAddress = approvedAddress1;\r\n    }\r\n\r\n    function totalHexBalance() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens(bool _state) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress, _state);\r\n    }\r\n\r\n    function myDividends() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return dividendsOf(_customerAddress);\r\n    }\r\n\r\n    function balanceOf(address _customerAddress, bool stakable) public view returns (uint256) {\r\n        if (stakable == false) {\r\n          return tokenBalanceLedger_[_customerAddress];\r\n        }\r\n        else if (stakable == true){\r\n          return SafeMath.sub(tokenBalanceLedger_[_customerAddress], lockedTokenBalanceLedger[_customerAddress]);\r\n        }\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        uint256 _hex = 1e8;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_hex, exitFee_), 100);\r\n        uint256 _taxedHEX = SafeMath.sub(_hex, _dividends);\r\n\r\n        return _taxedHEX;\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        uint256 _hex = 1e8;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_hex, entryFee_), 100);\r\n        uint256 _taxedHEX = SafeMath.add(_hex, _dividends);\r\n\r\n        return _taxedHEX;\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _hexToSpend) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_hexToSpend, entryFee_), 100);\r\n        uint256 _amountOfTokens = SafeMath.sub(_hexToSpend, _dividends);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateHexReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);\r\n        uint256 _taxedHEX = SafeMath.sub(_tokensToSell, _dividends);\r\n\r\n        return _taxedHEX;\r\n    }\r\n\r\n    function purchaseTokens(address _customerAddress, uint256 _incomingHEX) internal isActivated returns (uint256) {\r\n        Stats storage stats = playerStats[_customerAddress];\r\n\r\n        if (stats.deposits == 0) {\r\n            totalPlayer++;\r\n        }\r\n\r\n        stats.deposits += _incomingHEX;\r\n\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingHEX, entryFee_), 100);\r\n\r\n        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_),100);\r\n        erc20.transfer(maintenanceAddress, _maintenance);\r\n\r\n        uint256 _tewkenaire = SafeMath.div(SafeMath.mul(_undividedDividends, tewkenaireFee_), 100);\r\n        totalFundCollected += _tewkenaire;\r\n        erc20.transfer(distributionAddress, _tewkenaire);\r\n\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_tewkenaire,_maintenance));\r\n        uint256 _amountOfTokens = SafeMath.sub(_incomingHEX, _undividedDividends);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(address(0), _customerAddress, _amountOfTokens);\r\n        emit onTokenPurchase(_customerAddress, _incomingHEX, _amountOfTokens, now);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function stakeStart(uint256 _amount, uint256 _days) public isStakeActivated {\r\n      require(_amount <= 4722366482869645213695);\r\n      require(balanceOf(msg.sender, true) >= _amount);\r\n\r\n      erc20.stakeStart(_amount, _days); // revert or succeed\r\n\r\n      uint256 _stakeIndex;\r\n      uint40 _stakeID;\r\n      uint72 _stakeShares;\r\n      uint16 _lockedDay;\r\n      uint16 _stakedDays;\r\n\r\n      _stakeIndex = erc20.stakeCount(address(this));\r\n      _stakeIndex = SafeMath.sub(_stakeIndex, 1);\r\n\r\n      (_stakeID,,_stakeShares,_lockedDay,_stakedDays,,) = erc20.stakeLists(address(this), _stakeIndex);\r\n\r\n      uint256 _uniqueID =  uint256(keccak256(abi.encodePacked(_stakeID, _stakeShares))); // unique enough\r\n      require(stakeLists[msg.sender][_uniqueID].started == false); // still check for collision\r\n      stakeLists[msg.sender][_uniqueID].started = true;\r\n\r\n      stakeLists[msg.sender][_uniqueID] = StakeStore(_stakeID, _amount, _stakeShares, _lockedDay, _stakedDays, uint16(0), true, false);\r\n\r\n      totalStakeBalance = SafeMath.add(totalStakeBalance, _amount);\r\n\r\n      Stats storage stats = playerStats[msg.sender];\r\n      stats.activeStakes += 1;\r\n      stats.staked += _amount;\r\n\r\n      lockedTokenBalanceLedger[msg.sender] = SafeMath.add(lockedTokenBalanceLedger[msg.sender], _amount);\r\n\r\n      emit onStakeStart(msg.sender, _uniqueID, now);\r\n    }\r\n\r\n    function _stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) public view returns (uint16){\r\n      uint40 _stakeID;\r\n      uint72 _stakedHearts;\r\n      uint72 _stakeShares;\r\n      uint16 _lockedDay;\r\n      uint16 _stakedDays;\r\n      uint16 _unlockedDay;\r\n\r\n      (_stakeID,_stakedHearts,_stakeShares,_lockedDay,_stakedDays,_unlockedDay,) = erc20.stakeLists(address(this), _stakeIndex);\r\n      require(stakeLists[msg.sender][_uniqueID].started == true && stakeLists[msg.sender][_uniqueID].ended == false);\r\n      require(stakeLists[msg.sender][_uniqueID].stakeID == _stakeIdParam && _stakeIdParam == _stakeID);\r\n      require(stakeLists[msg.sender][_uniqueID].hexAmount == uint256(_stakedHearts));\r\n      require(stakeLists[msg.sender][_uniqueID].stakeShares == _stakeShares);\r\n      require(stakeLists[msg.sender][_uniqueID].lockedDay == _lockedDay);\r\n      require(stakeLists[msg.sender][_uniqueID].stakedDays == _stakedDays);\r\n\r\n      return _unlockedDay;\r\n    }\r\n\r\n    function stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) public {\r\n      uint16 _unlockedDay = _stakeEnd(_stakeIndex, _stakeIdParam, _uniqueID);\r\n\r\n      if (_unlockedDay == 0){\r\n        stakeLists[msg.sender][_uniqueID].unlockedDay = uint16(erc20.currentDay()); // no penalty/penalty/reward\r\n      } else {\r\n        stakeLists[msg.sender][_uniqueID].unlockedDay = _unlockedDay;\r\n      }\r\n\r\n      uint256 _balance = erc20.balanceOf(address(this));\r\n\r\n      erc20.stakeEnd(_stakeIndex, _stakeIdParam); // revert or 0 or less or equal or more hex returned.\r\n      stakeLists[msg.sender][_uniqueID].ended = true;\r\n\r\n      uint256 _amount = SafeMath.sub(erc20.balanceOf(address(this)), _balance);\r\n      uint256 _stakedAmount = stakeLists[msg.sender][_uniqueID].hexAmount;\r\n      uint256 _difference;\r\n      int256 _updatedPayouts;\r\n\r\n      if (_amount <= _stakedAmount) {\r\n        _difference = SafeMath.sub(_stakedAmount, _amount);\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _difference);\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.sub(tokenBalanceLedger_[msg.sender], _difference);\r\n        _updatedPayouts = (int256) (profitPerShare_ * _difference);\r\n        payoutsTo_[msg.sender] -= _updatedPayouts;\r\n        stats.stakedNetProfitLoss -= int256(_difference);\r\n        emit Transfer(msg.sender, address(0), _difference);\r\n      } else if (_amount > _stakedAmount) {\r\n        _difference = SafeMath.sub(_amount, _stakedAmount);\r\n        _difference = purchaseTokens(msg.sender, _difference);\r\n        stats.stakedNetProfitLoss += int256(_difference);\r\n      }\r\n\r\n      totalStakeBalance = SafeMath.sub(totalStakeBalance, _stakedAmount);\r\n\r\n      Stats storage stats = playerStats[msg.sender];\r\n      stats.activeStakes -= 1;\r\n\r\n      lockedTokenBalanceLedger[msg.sender] = SafeMath.sub(lockedTokenBalanceLedger[msg.sender], _stakedAmount);\r\n\r\n      emit onStakeEnd(msg.sender, _uniqueID, _amount, now);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHexBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hexToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"name\":\"stakeID\",\"type\":\"uint40\"},{\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"name\":\"started\",\"type\":\"bool\"},{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateHexReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAtomicSwapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeActivated\",\"type\":\"bool\"}],\"name\":\"setHexStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"stakable\",\"type\":\"bool\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokenBalanceLedger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"name\":\"_stakeIdParam\",\"type\":\"uint40\"},{\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"_stakeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"name\":\"staked\",\"type\":\"uint256\"},{\"name\":\"stakedNetProfitLoss\",\"type\":\"int256\"},{\"name\":\"activeStakes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"name\":\"_stakeIdParam\",\"type\":\"uint40\"},{\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingHEX\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hexRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hexWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HKS","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a172c5afc30e06aefd000d05543aec96278590d98ba80558c41dc6b7cff18286"}]}