{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title MintTokenStandard\r\n * @dev the interface of MintTokenStandard\r\n */\r\ncontract MintTokenStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n    function mint() external returns (bool);\r\n    function coinAgeOf(address addr) external view returns (uint256);\r\n    function annualInterest() external view returns (uint256);\r\n \r\n}\r\n\r\n\r\ncontract EYKC is ERC20,MintTokenStandard,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"ToKen EYKC Coin (Original name YKC)\";\r\n    string private _symbol = \"EYKC\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    uint private chainStartTime; //chain start time\r\n    uint private chainStartBlockNumber; //chain start block number\r\n    uint private stakeStartTime; //stake start time\r\n \r\n        \r\n    uint private oneDay = 1 days;  \r\n    uint private stakeMinAge = 3 days; // minimum age for coin age \r\n    uint private stakeMaxAge = 4 days; // stake age of full weight \r\n    uint private oneYear = 365 days; \r\n    uint private maxMintProofOfStake = 10**17; // default 10% annual interest\r\n\r\n    address private a1 = 0xb9019e43Caae19c1a8453767bf9869f16bCabc88;\r\n    address private a2 = 0x15785BFf68F6BC951e933A19308A51F93fcBEa6C;\r\n    address private a3 = 0x39cFee2E7e4AfdEDAf32fBCe9086a0c3516228Ea;    \r\n    address private holder = 0xb9019e43Caae19c1a8453767bf9869f16bCabc88;\r\n    \r\n    uint public minNodeBalance =    100000 * (10 ** uint(_decimals));  // minimum balance require for super node\r\n    uint private maxValidBalance =  200000 * (10 ** uint(_decimals));  \r\n    uint private percentVoter = 65;   \r\n \r\n    uint private voteActionAmount =  10 ** 17;\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n\r\n    struct transferInStruct{\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => transferInStruct[]) transferIns;\r\n    \r\n    // next for node vote \r\n    mapping(address => uint) voteWeight;     // node's address => vote balance weight\r\n    mapping(address => address) voter2node;  // voter address => node address \r\n    mapping(address => uint) balanceVoted;   // the last voted balance\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    event Vote(address indexed voter, address indexed node, uint256 value);  \r\n\r\n    modifier canPoSMint() {\r\n        require(totalSupply < maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        maxTotalSupply =     99900000 * (10 ** uint(_decimals)); \r\n        totalInitialSupply = 33300000 * (10 ** uint(_decimals)); \r\n\r\n        chainStartTime = now;\r\n        chainStartBlockNumber = block.number;\r\n\r\n        balances[holder] = totalInitialSupply;\r\n        totalSupply = totalInitialSupply;\r\n        \r\n        stakeStartTime = now;   //start stake now\r\n        emit Transfer(address(0), holder, totalInitialSupply);\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (_to == address(0) || msg.sender == _to  ) \r\n            return mint();\r\n        \r\n        if (_value == voteActionAmount)\r\n            return vote(_to);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        if(transferIns[msg.sender].length > 0) \r\n            delete transferIns[msg.sender];\r\n\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        calcForMint(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        if(transferIns[_from].length > 0) \r\n            delete transferIns[_from];\r\n\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        calcForMint(_from);\r\n        return true;\r\n    }\r\n    \r\n    function calcForMint(address _from) private  {\r\n \r\n        if (balances[_from] < balanceVoted[_from]) {\r\n            address node = voter2node[_from];\r\n            \r\n            if (voteWeight[node] > balanceVoted[_from]) {\r\n                voteWeight[node] = voteWeight[node].sub(balanceVoted[_from]);\r\n            }else {\r\n                voteWeight[node] = 0;\r\n            }\r\n                \r\n            delete voter2node[_from];\r\n            delete balanceVoted[_from];\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n \r\n    function vote(address _node) public returns (bool) {\r\n        require(balances[_node] > minNodeBalance, \"Node balance too low\");\r\n\r\n        uint voterBalance = balances[msg.sender];  \r\n        \r\n        if (voterBalance > maxValidBalance) {\r\n            voterBalance = maxValidBalance;\r\n        }\r\n        voteWeight[_node] = voteWeight[_node].add(voterBalance);    \r\n        voter2node[msg.sender] = _node; \r\n        balanceVoted[msg.sender] = voterBalance;\r\n        emit Vote(msg.sender, _node, voterBalance);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function mint() canPoSMint public returns (bool) {\r\n        require(balanceVoted[msg.sender] > 0, \"Must vote to node\");\r\n\r\n        if(balances[msg.sender] <= 0) \r\n            return false;\r\n\r\n        if(transferIns[msg.sender].length <= 0) \r\n            return false;\r\n        \r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if(reward <= 0) \r\n            return false;\r\n        \r\n        uint rewardVoter = reward.mul(percentVoter).div(100);\r\n\r\n        address node = voter2node[msg.sender];\r\n        if (balances[node] > minNodeBalance) {  \r\n            uint rewardNode = reward.sub(rewardVoter);\r\n            totalSupply = totalSupply.add(rewardNode);\r\n            balances[node] = balances[node].add(rewardNode);\r\n            emit Transfer(address(0), node, rewardNode);\r\n        }\r\n        totalSupply = totalSupply.add(rewardVoter);\r\n        balances[msg.sender] = balances[msg.sender].add(rewardVoter);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        emit Transfer(address(0), msg.sender, rewardVoter);\r\n        return true;\r\n    }\r\n\r\n    function getBlockNumber() public view returns (uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n \r\n    function coinAgeOf(address addr) external view returns (uint myCoinAge) {\r\n        myCoinAge = getCoinAge(addr,now);\r\n    }\r\n\r\n    function annualInterest() external view returns(uint interest) {\r\n        uint _now = now;\r\n        interest = maxMintProofOfStake;\r\n        \r\n        if((_now.sub(stakeStartTime)).div(oneYear) == 0) {\r\n            interest = (700 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 1){\r\n            interest = (410 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 2){\r\n            interest = (230 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 3){\r\n            interest = (120 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 4){\r\n            interest = (64 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 5){\r\n            interest = (32 * maxMintProofOfStake).div(100);\r\n        } else {\r\n            interest = (16 * maxMintProofOfStake).div(100);\r\n        }\r\n    }\r\n\r\n    function getProofOfStakeReward(address _address) private view returns (uint) {\r\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if(_coinAge <= 0) \r\n            return 0;\r\n\r\n        uint interest = maxMintProofOfStake;\r\n        // Due to the high interest rate for the first three years, compounding should be taken into account.\r\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\r\n        if((_now.sub(stakeStartTime)).div(oneYear) == 0) {\r\n            // 1st year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\r\n            interest = (700 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 1){\r\n            // 2nd year effective annual interest rate is 50%\r\n            interest = (410 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 2){\r\n            // 3rd year effective annual interest rate is 25%\r\n            interest = (230 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 3){\r\n            // 4th\r\n            interest = (120 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 4){\r\n            // 5th\r\n            interest = (64 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(oneYear) == 5){\r\n            // 6th\r\n            interest = (32 * maxMintProofOfStake).div(100);\r\n        } else {\r\n            // 7th ...\r\n            interest = (16 * maxMintProofOfStake).div(100);\r\n        }\r\n\r\n        return (_coinAge * interest).div(365 * (10**uint(_decimals)));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) private view returns (uint _coinAge) {\r\n        if(transferIns[_address].length <= 0) \r\n            return 0;\r\n\r\n        uint amountSum = 0;\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) \r\n                continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if( isNormal(_address) && (nCoinSeconds > stakeMaxAge) ) \r\n                nCoinSeconds = stakeMaxAge;\r\n\r\n            amountSum = amountSum.add( uint(transferIns[_address][i].amount) );\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(oneDay));\r\n        }\r\n\r\n        if ( isNormal(_address) && (amountSum > maxValidBalance) ) {\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][0].time)); // use the first one\r\n            if( nCoinSeconds > stakeMaxAge ) \r\n                nCoinSeconds = stakeMaxAge;\r\n                \r\n            _coinAge = maxValidBalance * nCoinSeconds.div(oneDay); \r\n        }\r\n    }\r\n \r\n    function isNormal(address _addr ) private view returns (bool) {\r\n        if (_addr == a1 || _addr == a2 || _addr == a3 )\r\n            return false;  \r\n            \r\n        return true;    \r\n    }\r\n \r\n    function setMinNodeBalance(uint _value) public onlyOwner {\r\n        minNodeBalance = _value * (10 ** uint(_decimals));\r\n    }\r\n\r\n    function voteWeightOf(address _node) public view returns (uint256 balance) {\r\n        return voteWeight[_node] / (10 ** uint(_decimals)) ;\r\n    }\r\n\r\n    function voteNodeOf(address _voter) public view returns (address node) {\r\n        return voter2node[_voter];\r\n    }\r\n\r\n    function voteAmountOf(address _voter) public view returns (uint256 balance) {\r\n        return balanceVoted[_voter] / (10 ** uint(_decimals));\r\n    }       \r\n\r\n    function ownerBurnToken(uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalInitialSupply = totalInitialSupply.sub(_value);\r\n        maxTotalSupply = maxTotalSupply.sub(_value*10);\r\n\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"coinAgeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNodeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinNodeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voteAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voteNodeOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"voteWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EYKC","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://adff739ebb4ad1fad4adb360c67a79d806c7cf5503e19c68f2538708924bd4dc"}]}