{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n\r\ncontract WETH9Interface {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function deposit() public payable;\r\n    function withdraw(uint wad) public;\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Uniswap ETH-WETH Exchange Liquidity Adder\r\n * @author Roger Wu (@Roger-Wu)\r\n * @dev Help add ETH to Uniswap's ETH-WETH exchange in one transaction.\r\n * @notice Do not send WETH or UNI token to this contract.\r\n */\r\ncontract UniswapWethLiquidityAdder {\r\n    // Uniswap V1 ETH-WETH Exchange Address\r\n    address public uniswapWethExchangeAddress = 0xA2881A90Bf33F03E7a3f803765Cd2ED5c8928dFb;\r\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    WETH9Interface weth = WETH9Interface(wethAddress);\r\n    UniswapExchangeInterface uniswapWethExchange = UniswapExchangeInterface(uniswapWethExchangeAddress);\r\n\r\n    constructor() public {\r\n        // approve the exchange to transfer WETH from this contract\r\n        weth.approve(uniswapWethExchangeAddress, 2**256-1);\r\n    }\r\n\r\n    function () external payable {\r\n        addLiquidity();\r\n    }\r\n\r\n    /// @dev This function will\r\n    /// 1. receive ETH,\r\n    /// 2. fetch the price of WETH/ETH from Uniswap's ETH-WETH exchange,\r\n    /// 3. wrap part of the ETH to WETH (the amount is dependent on the price),\r\n    /// 4. add ETH and WETH to the exchange and get liquidity tokens,\r\n    /// 5. transfer the liquidity tokens to msg.sender.\r\n    /// notice: There may be a few weis stuck in this contract.\r\n    function addLiquidity() public payable returns (uint256 liquidity) {\r\n        // If no ETH is received, do nothing.\r\n        if (msg.value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Get the amount of ETH now in this contract.\r\n        uint256 totalEth = address(this).balance;\r\n\r\n        // Compute the amount of ETH and WETH we will add to the pool.\r\n        uint256 ethToAdd;\r\n        uint256 wethToAdd;\r\n        if (uniswapWethExchange.totalSupply() == 0) {\r\n            // If no liquidity in the exchange, set ethToAdd:wethToAdd = 1:1.\r\n            wethToAdd = totalEth / 2;\r\n            ethToAdd = totalEth - wethToAdd;\r\n        } else {\r\n            // If there's liquidity in the exchange, set ethToAdd:wethToAdd = ethInPool:wethInPool.\r\n\r\n            // Get the amount of ETH and WETH in the liquidity pool.\r\n            uint256 ethInPool = uniswapWethExchangeAddress.balance;\r\n            uint256 wethInPool = weth.balanceOf(uniswapWethExchangeAddress);\r\n\r\n            // Calculate the amount of WETH we need to wrap.\r\n            // We are solving this:\r\n            //     Find maximum integer `ethToAdd` s.t.\r\n            //     ethToAdd + wethToAdd <= totalEth\r\n            //     wethToAdd = floor(ethToAdd * wethInPool / ethInPool) + 1\r\n            // Solution:\r\n            //     Let x = ethToAdd\r\n            //         A = wethInPool\r\n            //         B = ethInPool\r\n            //         C = totalEth\r\n            //     Then\r\n            //         x + floor(x * A / B) + 1 <= C\r\n            //         <=> x + x * A / B + 1 < C + 1\r\n            //         <=> x + x * A / B < C\r\n            //         <=> x < C * B / (A + B)\r\n            //         <=> max int x = ceil(C * B / (A + B)) - 1\r\n            //     So max ethToAdd = ceil(totalEth * ethInPool / (wethInPool + ethInPool)) - 1\r\n            // Notes:\r\n            //     1. In the following code, we set `ethToAdd` to `floor(C * B / (A + B)) - 1`\r\n            //         instead of `ceil(C * B / (A + B)) - 1`\r\n            //         because it's cheaper to compute,\r\n            //         and the difference is at most 1 wei.\r\n            //     2. We don't use SafeMath here because it's almost impossible to overflow\r\n            //         when computing `ethBalance * ethBalance` or `ethBalance * wethBalance`.\r\n            //         This saves some gas.\r\n            ethToAdd = totalEth * ethInPool / (wethInPool + ethInPool) - 1;\r\n            wethToAdd = ethToAdd * wethInPool / ethInPool + 1;\r\n        }\r\n\r\n        // Wrap ETH.\r\n        weth.deposit.value(wethToAdd)();\r\n\r\n        // Add liquidity.\r\n        uint256 liquidityMinted = uniswapWethExchange.addLiquidity.value(ethToAdd)(1, 2**256-1, 2**256-1);\r\n\r\n        // Transfer liquidity token to msg.sender.\r\n        require(uniswapWethExchange.transfer(msg.sender, liquidityMinted));\r\n\r\n        return liquidityMinted;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapWethExchangeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapWethLiquidityAdder","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c46b5b36586ed5fb21a6c12a57607b61561b42df4954b76320a6ed7e8a7dce38"}]}