{"status":"1","message":"OK","result":[{"SourceCode":"/* Orchid - WebRTC P2P VPN Market (on Ethereum)\r\n * Copyright (C) 2017-2019  The Orchid Authors\r\n*/\r\n\r\n/* GNU Affero General Public License, Version 3 {{{ */\r\n/*\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Affero General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Affero General Public License for more details.\r\n\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n**/\r\n/* }}} */\r\n\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface OrchidVerifier {\r\n    function good(bytes calldata shared, address target, bytes calldata receipt) external pure returns (bool);\r\n}\r\n\r\ncontract OrchidLottery {\r\n\r\n    IERC20 internal token_;\r\n\r\n    constructor(IERC20 token) public {\r\n        token_ = token;\r\n    }\r\n\r\n    function what() external view returns (IERC20) {\r\n        return token_;\r\n    }\r\n\r\n\r\n    struct Pot {\r\n        uint256 offset_;\r\n\r\n        uint128 amount_;\r\n        uint128 escrow_;\r\n\r\n        uint256 unlock_;\r\n\r\n        OrchidVerifier verify_;\r\n        bytes32 codehash_;\r\n        bytes shared_;\r\n    }\r\n\r\n    event Update(address indexed funder, address indexed signer, uint128 amount, uint128 escrow, uint256 unlock);\r\n\r\n    function send(address funder, address signer, Pot storage pot) private {\r\n        emit Update(funder, signer, pot.amount_, pot.escrow_, pot.unlock_);\r\n    }\r\n\r\n\r\n    struct Lottery {\r\n        address[] keys_;\r\n        mapping(address => Pot) pots_;\r\n    }\r\n\r\n    mapping(address => Lottery) internal lotteries_;\r\n\r\n\r\n    function find(address funder, address signer) private view returns (Pot storage) {\r\n        return lotteries_[funder].pots_[signer];\r\n    }\r\n\r\n    function kill(address signer) external {\r\n        address funder = msg.sender;\r\n        Lottery storage lottery = lotteries_[funder];\r\n        Pot storage pot = lottery.pots_[signer];\r\n        require(pot.offset_ != 0);\r\n        address key = lottery.keys_[lottery.keys_.length - 1];\r\n        lottery.pots_[key].offset_ = pot.offset_;\r\n        lottery.keys_[pot.offset_ - 1] = key;\r\n        --lottery.keys_.length;\r\n        delete lottery.pots_[signer];\r\n        send(funder, signer, pot);\r\n    }\r\n\r\n\r\n    function size(address funder) external view returns (uint256) {\r\n        return lotteries_[funder].keys_.length;\r\n    }\r\n\r\n    function keys(address funder) external view returns (address[] memory) {\r\n        return lotteries_[funder].keys_;\r\n    }\r\n\r\n    function seek(address funder, uint256 offset) external view returns (address) {\r\n        return lotteries_[funder].keys_[offset];\r\n    }\r\n\r\n    function page(address funder, uint256 offset, uint256 count) external view returns (address[] memory) {\r\n        address[] storage all = lotteries_[funder].keys_;\r\n        require(offset <= all.length);\r\n        if (count > all.length - offset)\r\n            count = all.length - offset;\r\n        address[] memory slice = new address[](count);\r\n        for (uint256 i = 0; i != count; ++i)\r\n            slice[i] = all[offset + i];\r\n        return slice;\r\n    }\r\n\r\n\r\n    function look(address funder, address signer) external view returns (uint128, uint128, uint256, OrchidVerifier, bytes32, bytes memory) {\r\n        Pot storage pot = lotteries_[funder].pots_[signer];\r\n        return (pot.amount_, pot.escrow_, pot.unlock_, pot.verify_, pot.codehash_, pot.shared_);\r\n    }\r\n\r\n\r\n    // XXX: _maybe_ allow anyone to call this function?\r\n    function push(address signer, uint128 total, uint128 escrow) external {\r\n        address funder = msg.sender;\r\n        require(total >= escrow);\r\n        Pot storage pot = find(funder, signer);\r\n        if (pot.offset_ == 0)\r\n            pot.offset_ = lotteries_[funder].keys_.push(signer);\r\n        pot.amount_ += total - escrow;\r\n        pot.escrow_ += escrow;\r\n        send(funder, signer, pot);\r\n        require(token_.transferFrom(funder, address(this), total));\r\n    }\r\n\r\n    // XXX: implement a version of this callable by signers\r\n    //      (maybe make that one target address(0) w/receipt)\r\n    function move(address signer, uint128 amount) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        require(pot.amount_ >= amount);\r\n        amount = take(amount, pot);\r\n        pot.escrow_ += amount;\r\n        send(funder, signer, pot);\r\n    }\r\n\r\n    function burn(address signer, uint128 escrow) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        if (escrow > pot.escrow_)\r\n            escrow = pot.escrow_;\r\n        pot.escrow_ -= escrow;\r\n        send(funder, signer, pot);\r\n    }\r\n\r\n    // XXX: do some kind of log from this function so wallets can watch?\r\n    function bind(address signer, OrchidVerifier verify, bytes calldata shared) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        require(pot.escrow_ == 0);\r\n\r\n        bytes32 codehash;\r\n        assembly { codehash := extcodehash(verify) }\r\n\r\n        pot.verify_ = verify;\r\n        pot.codehash_ = codehash;\r\n        pot.shared_ = shared;\r\n    }\r\n\r\n\r\n    struct Track {\r\n        uint256 until_;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => Track)) internal tracks_;\r\n\r\n\r\n    function take(uint128 amount, Pot storage pot) private returns (uint128) {\r\n        if (pot.amount_ >= amount)\r\n            pot.amount_ -= amount;\r\n        else {\r\n            amount = pot.amount_;\r\n            pot.escrow_ = 0;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function take(address funder, address signer, uint128 amount, address payable target, Pot storage pot) private {\r\n        amount = take(amount, pot);\r\n        send(funder, signer, pot);\r\n\r\n        if (amount != 0)\r\n            require(token_.transfer(target, amount));\r\n    }\r\n\r\n    function take(address funder, address signer, uint128 amount, address payable target, bytes memory receipt) private {\r\n        Pot storage pot = find(funder, signer);\r\n        take(funder, signer, amount, target, pot);\r\n\r\n        OrchidVerifier verify = pot.verify_;\r\n        if (verify != OrchidVerifier(0)) {\r\n            bytes32 codehash;\r\n            assembly { codehash := extcodehash(verify) }\r\n            if (pot.codehash_ == codehash)\r\n                require(verify.good(pot.shared_, target, receipt));\r\n        }\r\n    }\r\n\r\n    // the arguments to this function are carefully ordered for stack depth optimization\r\n    // this function was marked public, instead of external, for lower stack depth usage\r\n    function grab(\r\n        bytes32 reveal, bytes32 commit,\r\n        uint8 v, bytes32 r, bytes32 s,\r\n        bytes32 nonce, address funder,\r\n        uint128 amount, uint128 ratio,\r\n        uint256 start, uint128 range,\r\n        address payable target, bytes memory receipt,\r\n        bytes32[] memory old\r\n    ) public {\r\n        require(keccak256(abi.encodePacked(reveal)) == commit);\r\n        require(uint256(keccak256(abi.encodePacked(reveal, nonce))) >> 128 <= ratio);\r\n\r\n        // XXX: support EIP-712\r\n        bytes32 ticket = keccak256(abi.encode(commit, nonce, funder, amount, ratio, start, range, target, receipt));\r\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", ticket)), v, r, s);\r\n        require(signer != address(0));\r\n\r\n        {\r\n            mapping(bytes32 => Track) storage tracks = tracks_[target];\r\n\r\n            {\r\n                Track storage track = tracks[keccak256(abi.encodePacked(signer, ticket))];\r\n                uint256 until = start + range;\r\n                require(until > block.timestamp);\r\n                require(track.until_ == 0);\r\n                track.until_ = until;\r\n            }\r\n\r\n            for (uint256 i = 0; i != old.length; ++i) {\r\n                Track storage track = tracks[old[i]];\r\n                if (track.until_ <= block.timestamp)\r\n                    delete track.until_;\r\n            }\r\n        }\r\n\r\n        if (start < block.timestamp) {\r\n            uint128 limit = uint128(uint256(amount) * (range - (block.timestamp - start)) / range);\r\n            if (amount > limit)\r\n                amount = limit;\r\n        }\r\n\r\n        take(funder, signer, amount, target, receipt);\r\n    }\r\n\r\n    function give(address funder, address payable target, uint128 amount, bytes calldata receipt) external {\r\n        address signer = msg.sender;\r\n        take(funder, signer, amount, target, receipt);\r\n    }\r\n\r\n    function pull(address signer, address payable target, uint128 amount) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        take(funder, signer, amount, target, pot);\r\n    }\r\n\r\n\r\n    function warn(address signer) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        pot.unlock_ = block.timestamp + 1 days;\r\n        send(funder, signer, pot);\r\n    }\r\n\r\n    function lock(address signer) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        pot.unlock_ = 0;\r\n        send(funder, signer, pot);\r\n    }\r\n\r\n    function pull(address signer, address payable target, uint128 amount, uint128 escrow) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        if (amount > pot.amount_)\r\n            amount = pot.amount_;\r\n        if (escrow > pot.escrow_)\r\n            escrow = pot.escrow_;\r\n        if (escrow != 0)\r\n            require(pot.unlock_ - 1 < block.timestamp);\r\n        uint128 total = amount + escrow;\r\n        pot.amount_ -= amount;\r\n        pot.escrow_ -= escrow;\r\n        if (pot.escrow_ == 0)\r\n            pot.unlock_ = 0;\r\n        send(funder, signer, pot);\r\n        require(token_.transfer(target, total));\r\n    }\r\n\r\n    function yank(address signer, address payable target) external {\r\n        address funder = msg.sender;\r\n        Pot storage pot = find(funder, signer);\r\n        if (pot.escrow_ != 0)\r\n            require(pot.unlock_ - 1 < block.timestamp);\r\n        uint128 total = pot.amount_ + pot.escrow_;\r\n        pot.amount_ = 0;\r\n        pot.escrow_ = 0;\r\n        pot.unlock_ = 0;\r\n        send(funder, signer, pot);\r\n        require(token_.transfer(target, total));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"escrow\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"contract OrchidVerifier\",\"name\":\"verify\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"shared\",\"type\":\"bytes\"}],\"name\":\"bind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"escrow\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"receipt\",\"type\":\"bytes\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reveal\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratio\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"range\",\"type\":\"uint128\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"receipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"old\",\"type\":\"bytes32[]\"}],\"name\":\"grab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"look\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract OrchidVerifier\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"page\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"escrow\",\"type\":\"uint128\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"escrow\",\"type\":\"uint128\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"seek\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"warn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"what\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"yank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OrchidLottery","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ff9978b7b309021d39a76f52be377f2b95d72394","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://3b88174e0441782f4c6b1648e8a16773be208ce6999bf48c95d0004144cdbbf1"}]}