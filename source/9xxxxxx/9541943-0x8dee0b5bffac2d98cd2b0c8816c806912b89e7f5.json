{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipRenounced( address indexed previousOwner );\r\n    event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        \r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract CryptomillionsWinnersOne is Ownable\r\n{\r\n    struct DrawList\r\n    {\r\n        string drawId;\r\n        string content;\r\n    }\r\n\r\n    event DrawEvent(DrawList wd);\r\n\r\n    mapping(string => DrawList) private drawslist;\r\n    mapping(string => bool) private JoinedDraw;\r\n    \r\n    event joinDraws (DrawList draws);\r\n    \r\n    DrawList[] public listDraw;\r\n    \r\n    function drawJoined(string memory drawId) private view returns (bool) {\r\n        return JoinedDraw[drawId];\r\n    }\r\n\r\n    function joinDraw (string memory drawId, string memory content) public onlyOwner returns (bool)\r\n    {\r\n        bytes memory tempDrawId = bytes(drawId);\r\n        if(tempDrawId.length == 0)\r\n            return false;\r\n            \r\n        if (!drawJoined(drawId))\r\n        {\r\n            DrawList storage dl = drawslist[drawId];\r\n            dl.drawId = drawId;\r\n            dl.content = content;\r\n            JoinedDraw[drawId] = true;\r\n            listDraw.push(DrawList(drawId, content));\r\n            emit joinDraws(dl);\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function getDraw(string memory drawId) public view returns (string memory, string memory){\r\n        if (drawJoined(drawId)) {\r\n            DrawList storage dl = drawslist[drawId];\r\n         \r\n            return (dl.drawId, dl.content);\r\n        }\r\n    }\r\n    \r\n    function drawsJoined(string memory drawId) private view returns (bool) {\r\n        return JoinedDraw[drawId];\r\n    }\r\n \r\n    function showDraw() public view returns (DrawList[] memory){\r\n        return(listDraw);\r\n    }\r\n    \r\n    function total() public view returns (uint){\r\n        return(listDraw.length);\r\n    }\r\n\t\r\n\tfunction kill() public onlyOwner {\r\n       if (owner == msg.sender) {\r\n          selfdestruct(msg.sender);\r\n       }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"drawId\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"joinDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listDraw\",\"outputs\":[{\"name\":\"drawId\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDraw\",\"outputs\":[{\"components\":[{\"name\":\"drawId\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"drawId\",\"type\":\"string\"}],\"name\":\"getDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"name\":\"drawId\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}],\"indexed\":false,\"name\":\"wd\",\"type\":\"tuple\"}],\"name\":\"DrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"name\":\"drawId\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}],\"indexed\":false,\"name\":\"draws\",\"type\":\"tuple\"}],\"name\":\"joinDraws\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptomillionsWinnersOne","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b973b9dd919b87060e9bce6781706f9d9832c298617cb352b345b7e396debd69"}]}