{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ncontract Gem {\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n    function allowance(address, address) public returns (uint);\n}\n\ncontract Join {\n    bytes32 public ilk;\n\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Vat {\n\n    struct Urn {\n        uint256 ink;   \n        uint256 art;   \n    }\n\n    struct Ilk {\n        uint256 Art;   \n        uint256 rate;  \n        uint256 spot;  \n        uint256 line;  \n        uint256 dust;  \n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n    mapping (bytes32 => mapping (address => uint)) public gem;  \n\n    function can(address, address) public view returns (uint);\n    function dai(address) public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) public;\n    function hope(address) public;\n    function move(address, address, uint) public;\n}\n\ncontract Flipper {\n\n    function bids(uint _bidId) public returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n    function tend(uint id, uint lot, uint bid) external;\n    function dent(uint id, uint lot, uint bid) external;\n    function deal(uint id) external;\n}\n\ncontract BidProxy {\n\n    address public constant ETH_FLIPPER = 0xd8a04F5412223F513DC55F839574430f5EC15531;\n    address public constant BAT_FLIPPER = 0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant BAT_JOIN = 0x3D0B1912B66114d4096F48A8CEe3A56C231772cA;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    bytes32 public constant BAT_ILK = 0x4241542d41000000000000000000000000000000000000000000000000000000;\n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\n\n    function daiBid(uint _bidId, bool _isEth, uint _amount) public {\n        uint tendAmount = _amount * (10 ** 27);\n        address flipper = _isEth ? ETH_FLIPPER : BAT_FLIPPER;\n\n        joinDai(_amount);\n\n        (, uint lot, , , , , , ) = Flipper(flipper).bids(_bidId);\n\n        Vat(VAT_ADDRESS).hope(flipper);\n\n        Flipper(flipper).tend(_bidId, lot, tendAmount);\n    }\n\n    function collateralBid(uint _bidId, bool _isEth, uint _amount) public {\n        address flipper = _isEth ? ETH_FLIPPER : BAT_FLIPPER;\n\n        joinDai(_amount);\n\n        uint bid;\n        (bid, , , , , , , ) = Flipper(flipper).bids(_bidId);\n\n        Vat(VAT_ADDRESS).hope(flipper);\n\n        Flipper(flipper).dent(_bidId, _amount, bid);\n    }\n\n    function closeBid(uint _bidId, bool _isEth) public {\n        address flipper = _isEth ? ETH_FLIPPER : BAT_FLIPPER;\n        address join = _isEth ? ETH_JOIN : BAT_JOIN;\n        bytes32 ilk = _isEth ? ETH_ILK : BAT_ILK;\n\n        Flipper(flipper).deal(_bidId);\n        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this)) / (10**27);\n\n        Vat(VAT_ADDRESS).hope(join);\n        Gem(join).exit(msg.sender, amount);\n    }\n\n    function exitCollateral(bool _isEth) public {\n        address join = _isEth ? ETH_JOIN : BAT_JOIN;\n        bytes32 ilk = _isEth ? ETH_ILK : BAT_ILK;\n\n        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this)) / (10**27);\n\n        Vat(VAT_ADDRESS).hope(join);\n        Gem(join).exit(msg.sender, amount);\n    }\n\n    function exitDai() public {\n        uint amount = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\n\n        Vat(VAT_ADDRESS).hope(DAI_JOIN);\n        Gem(DAI_JOIN).exit(msg.sender, amount);\n    }\n\n    function withdrawToken(address _token) public {\n        uint balance = ERC20(_token).balanceOf(address(this));\n        ERC20(_token).transfer(msg.sender, balance);\n    }\n\n    function withdrawEth() public {\n        uint balance = address(this).balance;\n        msg.sender.transfer(balance);\n    }\n\n    function joinDai(uint _amount) internal {\n        uint amountInVat = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\n\n        if (_amount > amountInVat) {\n            uint amountDiff = _amount - amountInVat;\n\n            ERC20(DAI_ADDRESS).transferFrom(msg.sender, address(this), amountDiff);\n            ERC20(DAI_ADDRESS).approve(DAI_JOIN, amountDiff);\n            Join(DAI_JOIN).join(address(this), amountDiff);\n        }\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_FLIPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ILK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidId\",\"type\":\"uint256\"},{\"name\":\"_isEth\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collateralBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isEth\",\"type\":\"bool\"}],\"name\":\"exitCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BAT_FLIPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BAT_ILK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidId\",\"type\":\"uint256\"},{\"name\":\"_isEth\",\"type\":\"bool\"}],\"name\":\"closeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidId\",\"type\":\"uint256\"},{\"name\":\"_isEth\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"daiBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BAT_JOIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BidProxy","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}