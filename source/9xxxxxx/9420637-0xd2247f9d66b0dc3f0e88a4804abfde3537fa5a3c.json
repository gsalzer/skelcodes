{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath mul error\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath div error\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath sub error\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath add error\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath mod error\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary UnitConverter {\r\n  using SafeMath for uint256;\r\n\r\n  function stringToBytes24(string memory source)\r\n  internal\r\n  pure\r\n  returns (bytes24 result)\r\n  {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n      return 0x0;\r\n    }\r\n\r\n    assembly {\r\n      result := mload(add(source, 24))\r\n    }\r\n  }\r\n}\r\n\r\ncontract Deposit {\r\n  using UnitConverter for string;\r\n  using SafeMath for uint;\r\n\r\n  address admin;\r\n  address admin1;\r\n  address admin2;\r\n  address[] userAddresses;\r\n  uint public idCounter;\r\n  string password;\r\n\r\n  struct User {\r\n    uint id;\r\n    address inviter;\r\n    uint[] deposited;\r\n    uint totalDeposited;\r\n  }\r\n\r\n  mapping (address => User) users;\r\n\r\n  event Registered(address indexed user, uint id, address inviter, string password, uint timestamp);\r\n  event Deposited(address indexed user, uint amount, uint tokenAmount, uint timestamp);\r\n\r\n  constructor (string _password, address _admin1, address _admin2) public {\r\n    admin = msg.sender;\r\n    admin1 = _admin1;\r\n    admin2 = _admin2;\r\n    password = _password;\r\n    initAccounts();\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin, 'onlyAdmin');\r\n    _;\r\n  }\r\n\r\n  modifier onlyMoneyAdmin() {\r\n    require(msg.sender == admin1 || msg.sender == admin2, 'onlyMoneyAdmin');\r\n    _;\r\n  }\r\n\r\n  function updateAdmin(address _newAdmin) public onlyAdmin {\r\n    require(_newAdmin != address(0x0), 'Invalid address');\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function updateAdmin1(address _admin1) public onlyAdmin {\r\n    require(_admin1 != address(0x0), 'Invalid address');\r\n    admin1 = _admin1;\r\n  }\r\n\r\n  function updateAdmin2(address _admin2) public onlyAdmin {\r\n    require(_admin2 != address(0x0), 'Invalid address');\r\n    admin2 = _admin2;\r\n  }\r\n\r\n  function out(uint _amount) public onlyMoneyAdmin {\r\n    require(address(this).balance >= _amount, 'Invalid amount');\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  function register(address inviter, string _password) public {\r\n    require(users[msg.sender].id < 1, 'User exists!!!');\r\n    idCounter++;\r\n    users[msg.sender] = User({\r\n      id: idCounter,\r\n      inviter: inviter,\r\n      deposited: new uint[](0),\r\n      totalDeposited: 0\r\n    });\r\n    userAddresses.push(msg.sender);\r\n\r\n    emit Registered(msg.sender, idCounter, inviter, _password, now);\r\n  }\r\n\r\n  function showMe() public view returns (uint, address, uint) {\r\n    User storage user = users[msg.sender];\r\n    return (\r\n      user.id,\r\n      user.inviter,\r\n      user.totalDeposited\r\n    );\r\n  }\r\n\r\n  function getUserInfo(address _address) public view returns (uint, address, uint) {\r\n    User storage user = users[_address];\r\n    return (\r\n      user.id,\r\n      user.inviter,\r\n      user.totalDeposited\r\n    );\r\n  }\r\n\r\n  function getAddressAt(uint _index) public view returns (address) {\r\n    require(_index < userAddresses.length, 'Index out of range');\r\n    return userAddresses[_index];\r\n  }\r\n\r\n  function deposit(uint tokenAmount) public payable {\r\n    require(msg.value > 0, 'No ether sent');\r\n    User storage user = users[msg.sender];\r\n    require(user.id > 0, 'Please register');\r\n    user.deposited.push(msg.value);\r\n    user.totalDeposited = user.totalDeposited.add(msg.value);\r\n    emit Deposited(msg.sender, msg.value, tokenAmount, now);\r\n  }\r\n\r\n  function initAccounts() private {\r\n    initAccount(0xc4e327725e140104725dD5b2C60a807C16C5c8d5, address(0x0));\r\n\r\n    initAccount(0x06302B0B232AF70582613559Bd39341450DBbd77, 0xc4e327725e140104725dD5b2C60a807C16C5c8d5);\r\n    initAccount(0xEe6013bD3233eF5234594119C7a0a9b8D0C31e90, 0xc4e327725e140104725dD5b2C60a807C16C5c8d5);\r\n\r\n    initAccount(0xe14A09fB753Ed4432892144F7162f30E72AF37C2, 0x06302B0B232AF70582613559Bd39341450DBbd77);\r\n    initAccount(0xCe2Db6aabC24616667e15C07dA02fC1C5C708BeC, 0x06302B0B232AF70582613559Bd39341450DBbd77);\r\n    initAccount(0xa505a2e78F377A9C21d71554639A774e62A22BF3, 0xEe6013bD3233eF5234594119C7a0a9b8D0C31e90);\r\n    initAccount(0x76dB76e127F346a00dc0dCB0AB9Dfc53BB35994b, 0xEe6013bD3233eF5234594119C7a0a9b8D0C31e90);\r\n\r\n    initAccount(0x15c4789fc52b0f89DdF51CD14C8bE6d6c87e3C8D, 0xe14A09fB753Ed4432892144F7162f30E72AF37C2);\r\n    initAccount(0x705C31f1E5216cD139e4a9460E0b1c0912Ace96A, 0xe14A09fB753Ed4432892144F7162f30E72AF37C2);\r\n    initAccount(0x61dDE9658356ce2b369Ef10Bb48754Ecc0f96AE3, 0xCe2Db6aabC24616667e15C07dA02fC1C5C708BeC);\r\n    initAccount(0x69EDe121753C9d60fdECeecFe051175001a547dF, 0xCe2Db6aabC24616667e15C07dA02fC1C5C708BeC);\r\n    initAccount(0x2EE86e6Ce6C8d182Bf26547050492d04771a6f49, 0xa505a2e78F377A9C21d71554639A774e62A22BF3);\r\n    initAccount(0x8EA87cb1F4Aa4Df1978bB385df471427f7E11c6a, 0xa505a2e78F377A9C21d71554639A774e62A22BF3);\r\n    initAccount(0x5CE9132b2994f3Ed124Fc502c7786f1e270E4a3B, 0x76dB76e127F346a00dc0dCB0AB9Dfc53BB35994b);\r\n    initAccount(0xd23246EA905E31A35d4b5aabAaEf2f40CF1B5142, 0x76dB76e127F346a00dc0dCB0AB9Dfc53BB35994b);\r\n  }\r\n\r\n  function initAccount(address _userAddress, address _inviter) private {\r\n    idCounter++;\r\n    users[_userAddress] = User({\r\n      id: idCounter,\r\n      inviter: _inviter,\r\n      deposited: new uint[](0),\r\n      totalDeposited: 0\r\n    });\r\n    userAddresses.push(_userAddress);\r\n    emit Registered(_userAddress, idCounter, _inviter, password, now);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"inviter\",\"type\":\"address\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin2\",\"type\":\"address\"}],\"name\":\"updateAdmin2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAddressAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin1\",\"type\":\"address\"}],\"name\":\"updateAdmin1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"},{\"name\":\"_admin1\",\"type\":\"address\"},{\"name\":\"_admin2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"password\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"}]","ContractName":"Deposit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000006f8d4d8581b0f293f0ba59bd63b0ba5e48cc53bc0000000000000000000000006f8d4d8581b0f293f0ba59bd63b0ba5e48cc53bc00000000000000000000000000000000000000000000000000000000000000203164303361633439366339613431363465643036353961303739386639303838","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://fc9149635fe0033f7316052ec4249c9f2482a1855a91d22ce3453a968d0978dc"}]}