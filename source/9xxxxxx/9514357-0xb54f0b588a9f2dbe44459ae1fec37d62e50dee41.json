{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract Erc20 {\r\n    function balanceOf(address owner) view external returns(uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n}\r\n\r\ncontract iErc20 is Erc20 {\r\n    function tokenPrice() view external returns(uint256);\r\n    function burn(address receiver, uint256 burnAmount) external returns(uint256); \r\n}\r\n\r\ncontract FulcrumEmergencyEjection {\r\n    Erc20 constant USDC = Erc20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    iErc20 constant iUSDC = iErc20(0xF013406A0B1d544238083DF0B93ad0d2cBE0f65f);\r\n\r\n    function corona(uint256 dustAmount, uint256 userBalance) external returns(uint256 outAmount) {\r\n        uint256 USDCAmount = USDC.balanceOf(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        if (USDCAmount > dustAmount) {\r\n            uint256 iUSDCTokenPrice = iUSDC.tokenPrice();\r\n            uint256 availableBurnAmount = USDCAmount * 1e18 / iUSDCTokenPrice;\r\n            availableBurnAmount = userBalance < availableBurnAmount ? userBalance : availableBurnAmount;\r\n            iUSDC.transferFrom(msg.sender, address(this), availableBurnAmount);\r\n            return iUSDC.burn(msg.sender, availableBurnAmount);\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"corona\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FulcrumEmergencyEjection","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://cf36b29dd2f8426127c4dc75904e7bdae03dcd96cbbfc5c27963c2b9a52a529a"}]}