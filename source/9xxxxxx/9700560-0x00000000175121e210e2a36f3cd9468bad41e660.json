{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16; // optimization runs: 200\r\n\r\n\r\ninterface IDai {\r\n  function permit(\r\n    address holder, address spender, uint256 nonce, uint256 expiry,\r\n    bool allowed, uint8 v, bytes32 r, bytes32 s\r\n  ) external;\r\n  \r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  \r\n  function nonces(address account) external view returns (uint256 nonce);\r\n}\r\n\r\n\r\ninterface ISyndicate {\r\n  function enlist(uint256 daiAmount) external;\r\n  \r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract DaiBackstopSyndicateEnlisterV3 {\r\n  bytes32 internal constant _DAI_DOMAIN_SEPARATOR = bytes32(\r\n    0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7\r\n  );\r\n\r\n  bytes32 internal constant _DAI_PERMIT_TYPEHASH = bytes32(\r\n    0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb\r\n  );\r\n\r\n  IDai internal constant _DAI = IDai(\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n  );\r\n\r\n  ISyndicate internal constant _SYNDICATE = ISyndicate(\r\n    0x00000000357646e36Fe575885Bb3e1A0772E64Cc\r\n  );\r\n  \r\n  constructor() public {\r\n    require(\r\n      _DAI.approve(address(_SYNDICATE), uint256(-1)),\r\n      \"DaiBackstopSyndicateEnlisterV1/constructor: Syndicate approval failed.\"\r\n    );\r\n  }\r\n\r\n  function approveAndEnlist(\r\n    uint256 amount, uint256 nonce, uint256 expiry, bytes memory signature\r\n  ) public {\r\n    // Parse the supplied signature.\r\n    bytes32 r; bytes32 s; uint8 v;\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    // Approve this address to transfer Dai on behalf of the caller.\r\n    _DAI.permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\r\n\r\n    // Transfer specified Dai amount from the caller to this account.\r\n    require(\r\n      _DAI.transferFrom(msg.sender, address(this), amount),\r\n      \"DaiBackstopSyndicateEnlisterV1/approveAndEnlist: Dai transfer in failed.\"\r\n    );\r\n\r\n    // Use the transferred Dai to enlist in the syndicate.\r\n    _SYNDICATE.enlist(amount);\r\n\r\n    // Return the newly minted tokens to the caller.\r\n    require(\r\n      _SYNDICATE.transfer(msg.sender, amount),\r\n      \"DaiBackstopSyndicateEnlisterV1/approveAndEnlist: Token transfer out failed.\"\r\n    );\r\n  }\r\n\r\n  function getDigest(address enlister) external view returns (\r\n    bytes32 digest, uint256 nonce, uint256 expiry\r\n  ) {\r\n    nonce = _DAI.nonces(enlister); // current nonce\r\n    expiry = block.timestamp + 1800; // 30 minutes\r\n    digest = keccak256(abi.encodePacked(\r\n      \"\\x19\\x01\", _DAI_DOMAIN_SEPARATOR, keccak256(abi.encode(\r\n        _DAI_PERMIT_TYPEHASH, enlister, address(this), nonce, expiry, true\r\n      ))\r\n    ));\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"approveAndEnlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"enlister\",\"type\":\"address\"}],\"name\":\"getDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DaiBackstopSyndicateEnlisterV3","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://9dd11e28645b4963a05321c173da619410646fd153dc38b42d6cc49959bf1d2d"}]}