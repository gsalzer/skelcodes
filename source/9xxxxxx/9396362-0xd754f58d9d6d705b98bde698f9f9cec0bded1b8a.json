{"status":"1","message":"OK","result":[{"SourceCode":"//oracle for event and data registry\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface DataOracleInterface{\r\n    function getResultFromOracle (string theEvent) returns (string);\r\n}\r\n  \r\n    // oracle registery main\r\n    contract oracleForDataRegistry {\r\n        \r\n      mapping (string=>address) oracleMapping;\r\n      mapping (string=>address) oracleOwners;\r\n      mapping (string=>string) oracleOwnersInfo;\r\n      \r\n      string [] oracleNamesArr;\r\n      address [] oracleOwnersArr;\r\n      string [] oracleOwnersInfoArr;\r\n      \r\n      uint256 purchaseFee;\r\n      \r\n      address owner; \r\n      modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n        }\r\n        \r\n      constructor() public payable {\r\n            owner = msg.sender; \r\n            //default .001\r\n            purchaseFee = 1000000000000000;\r\n        }\r\n        \r\n        \r\n     \r\n         \r\n     function getEventResult(string selectedEventOrData, string selectedOracle) public constant returns (string){  \r\n          selectedOracle = toLower(selectedOracle);\r\n          address oracleAddress = getOracleAddress(selectedOracle);\r\n          if (oracleAddress <= 0){\r\n              //The requested provider is not registered in this oracle registry\r\n              return \"\";\r\n          }\r\n          \r\n          DataOracleInterface p = DataOracleInterface(oracleAddress);\r\n          return p.getResultFromOracle(selectedEventOrData);\r\n          \r\n      }\r\n      \r\n      function changeOwner(address newOwner) onlyOwner returns(bool){\r\n          owner = newOwner;\r\n          return true;\r\n      }\r\n      \r\n      function changeFee(uint256 newFee) onlyOwner returns(bool){\r\n          purchaseFee = newFee;\r\n          return true;\r\n      }\r\n      \r\n    \r\n      \r\n     function withdrawBalance() onlyOwner returns(bool) {\r\n        uint amount = this.balance;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    function registerOracle(string name, address requestedAddress, string info ) payable returns (bool){\r\n        require(msg.value >= purchaseFee, \"Please send .05 ETH to register an oracle. This is to prevent registration spam\");\r\n        \r\n        name = toLower(name);\r\n        \r\n        if(oracleMapping[name] > 1){\r\n            //you cant update/re-register an address\r\n            throw;\r\n            \r\n        }\r\n        if(oracleMapping[name] != 0x0 && oracleOwners[name] != msg.sender){\r\n            //you cant update this because you did not register this name\r\n            throw;\r\n            \r\n        }\r\n        \r\n    string memory theDetails = info;\r\n       oracleMapping[name] = requestedAddress;\r\n       oracleOwners[name] = msg.sender;\r\n        oracleOwnersInfo[name] = theDetails;\r\n        \r\n        oracleNamesArr.push(name);\r\n        oracleOwnersArr.push(msg.sender);\r\n        oracleOwnersInfoArr.push(theDetails);\r\n        \r\n        \r\n       return true;\r\n        \r\n    }\r\n    \r\n      function transferOracleName(string name, address toAddress) returns(bool){\r\n           if(oracleMapping[name] != 0x0 && oracleOwners[name] != msg.sender){\r\n            //you cant transfer this because you did not register this name\r\n            throw;\r\n            \r\n         }\r\n         oracleOwners[name] = toAddress;\r\n         return true;\r\n        \r\n      }\r\n    \r\n    function editOracleInfo(string name, string info) payable returns (bool){\r\n       \r\n        name = toLower(name);\r\n        \r\n       \r\n        if(oracleMapping[name] != 0x0 && oracleOwners[name] != msg.sender){\r\n            //you cant update this because you did not register this name\r\n            throw;\r\n            \r\n        }\r\n        \r\n        string memory theDetails = info;\r\n      \r\n        oracleOwnersInfo[name] = theDetails;\r\n      \r\n\r\n       return true;\r\n        \r\n    }\r\n\r\n    function editOracleAddress(string name, address newOrSameOracleAddress) payable returns (bool){\r\n       \r\n        name = toLower(name);\r\n        \r\n       \r\n        if(oracleMapping[name] != 0x0 && oracleOwners[name] != msg.sender){\r\n            //you cant update this because you did not register this name\r\n            throw;\r\n            \r\n        }\r\n        \r\n      \r\n        oracleMapping[name] = newOrSameOracleAddress;\r\n\r\n       return true;\r\n        \r\n    }\r\n    \r\n    \r\n    function getAllOracles() constant returns (string []){\r\n        return oracleNamesArr;\r\n    }\r\n\r\n\r\n    function getPurchaseFee() constant returns (uint256){\r\n        return purchaseFee;\r\n    }\r\n    \r\n    \r\n    function getOracleAddress(string nameReference) constant returns (address){\r\n        nameReference = toLower(nameReference);\r\n        return oracleMapping[nameReference];\r\n    }\r\n    \r\n    function getOracleOwner(string nameReference) constant returns (address){\r\n        nameReference = toLower(nameReference);\r\n        return oracleOwners[nameReference];\r\n    }\r\n    \r\n    function getOracleInfo(string nameReference) constant returns (string){\r\n        nameReference = toLower(nameReference);\r\n        return oracleOwnersInfo[nameReference];\r\n    }\r\n    \r\n    function toLower(string str) internal returns (string) {\r\n    bytes memory bStr = bytes(str);\r\n    bytes memory bLower = new bytes(bStr.length);\r\n    for (uint i = 0; i < bStr.length; i++) {\r\n      if ((bStr[i] >= 65) && (bStr[i] <= 90)) {\r\n        bLower[i] = bytes1(int(bStr[i]) + 32);\r\n      } else {\r\n        bLower[i] = bStr[i];\r\n      }\r\n    }\r\n    return string(bLower);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"newOrSameOracleAddress\",\"type\":\"address\"}],\"name\":\"editOracleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"selectedEventOrData\",\"type\":\"string\"},{\"name\":\"selectedOracle\",\"type\":\"string\"}],\"name\":\"getEventResult\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOracles\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"requestedAddress\",\"type\":\"address\"},{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"registerOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nameReference\",\"type\":\"string\"}],\"name\":\"getOracleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nameReference\",\"type\":\"string\"}],\"name\":\"getOracleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"editOracleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nameReference\",\"type\":\"string\"}],\"name\":\"getOracleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"transferOracleName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"oracleForDataRegistry","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://60573e8cbcd7785b55216d662fcae66ffac10e1cf2ef3341c3220fd2f4aeb74f"}]}