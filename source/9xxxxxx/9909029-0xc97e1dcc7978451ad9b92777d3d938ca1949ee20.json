{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// @Name SafeMath\r\n// @Desc Math operations with safety checks that throw on error\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title ERC20Basic\r\n// @dev Simpler version of ERC20 interface\r\n// See https://github.com/ethereum/EIPs/issues/179\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title ERC20 interface\r\n// @dev See https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool); \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Basic token\r\n// @dev Basic version of StandardToken, with no allowances.\r\n// ----------------------------------------------------------------------------\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n    \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Ownable\r\n// ----------------------------------------------------------------------------\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner    = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title BlackList\r\n// @dev Base contract which allows children to implement an emergency stop mechanism.\r\n// ----------------------------------------------------------------------------\r\ncontract BlackList is Ownable {\r\n\r\n    event Lock(address indexed LockedAddress);\r\n    event Unlock(address indexed UnLockedAddress);\r\n\r\n    mapping( address => bool ) public blackList;\r\n\r\n    modifier CheckBlackList { require(blackList[msg.sender] != true); _; }\r\n\r\n    function SetLockAddress(address _lockAddress) external onlyOwner returns (bool) {\r\n        require(_lockAddress != address(0));\r\n        require(_lockAddress != owner);\r\n        require(blackList[_lockAddress] != true);\r\n        \r\n        blackList[_lockAddress] = true;\r\n        \r\n        emit Lock(_lockAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n    function UnLockAddress(address _unlockAddress) external onlyOwner returns (bool) {\r\n        require(blackList[_unlockAddress] != false);\r\n        \r\n        blackList[_unlockAddress] = false;\r\n        \r\n        emit Unlock(_unlockAddress);\r\n\r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Pausable\r\n// @dev Base contract which allows children to implement an emergency stop mechanism.\r\n// ----------------------------------------------------------------------------\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Standard ERC20 token\r\n// @dev Implementation of the basic standard token.\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract StandardToken is ERC20, BasicToken {\r\n  \r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    \r\n        emit Transfer(_from, _to, _value);\r\n    \r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n    \r\n        emit Approval(msg.sender, _spender, _value);\r\n    \r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n    \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    \r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n    \r\n        if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n    \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title MultiTransfer Token\r\n// @dev Only Admin\r\n// ----------------------------------------------------------------------------\r\ncontract MultiTransferToken is StandardToken, Ownable {\r\n\r\n    function MultiTransfer(address[] _to, uint256[] _amount) onlyOwner public returns (bool) {\r\n        require(_to.length == _amount.length);\r\n\r\n        uint256 ui;\r\n        uint256 amountSum = 0;\r\n    \r\n        for (ui = 0; ui < _to.length; ui++) {\r\n            require(_to[ui] != address(0));\r\n\r\n            amountSum = amountSum.add(_amount[ui]);\r\n        }\r\n\r\n        require(amountSum <= balances[msg.sender]);\r\n\r\n        for (ui = 0; ui < _to.length; ui++) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount[ui]);\r\n            balances[_to[ui]] = balances[_to[ui]].add(_amount[ui]);\r\n        \r\n            emit Transfer(msg.sender, _to[ui], _amount[ui]);\r\n        }\r\n    \r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Burnable Token\r\n// @dev Token that can be irreversibly burned (destroyed).\r\n// ----------------------------------------------------------------------------\r\ncontract BurnableToken is StandardToken, Ownable {\r\n\r\n    event BurnAdminAmount(address indexed burner, uint256 value);\r\n\r\n    function burnAdminAmount(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n    \r\n        emit BurnAdminAmount(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Mintable token\r\n// @dev Simple ERC20 Token example, with mintable token creation\r\n// Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n// ----------------------------------------------------------------------------\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n    \r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    \r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Pausable token\r\n// @dev StandardToken modified with pausable transfers.\r\n// ----------------------------------------------------------------------------\r\ncontract PausableToken is StandardToken, Pausable, BlackList {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused CheckBlackList returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused CheckBlackList returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @Project Metis (MTS)\r\n// ----------------------------------------------------------------------------\r\ncontract Metis is PausableToken, MintableToken, BurnableToken, MultiTransferToken {\r\n    string public name = \"Metis\";\r\n    string public symbol = \"MTS\";\r\n    uint256 public decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"MultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnAdminAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unlockAddress\",\"type\":\"address\"}],\"name\":\"UnLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"SetLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnAdminAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"LockedAddress\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"UnLockedAddress\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Metis","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://413d495eecc7bf01037d9bc51c0da5f02eb106c7924e3cd624c66179e66dc3be"}]}