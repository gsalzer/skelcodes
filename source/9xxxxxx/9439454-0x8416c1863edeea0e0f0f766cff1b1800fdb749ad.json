{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n//\r\n//  PONZI PROTOCOL  0.1 - ALPHA\r\n//\r\n//  HTTPS://PONZI.FINANCE\r\n//\r\n//  Tested some parts pretty well\r\n//  Kinda YOLO'd a bunch of stuff last minute though\r\n//  Player logging probably works\r\n//\r\n//  send hate tweets to @deanpierce\r\n//\r\n//  USE AT YOUR OWN RISK\r\n//\r\n//  0x8416c1863eDEea0E0f0f766CfF1b1800Fdb749aD\r\n\r\ncontract Ponzi{\r\n    \r\n    // compounded every hour\r\n    uint256 magicNum = 10007585; // numerator\r\n    uint256 magicDen = 10000000; // denominator\r\n    \r\n    uint256[] public compTable; // compound interest table\r\n    \r\n    address payable public educator;\r\n    address payable public killer;\r\n    \r\n    // list of active players\r\n    struct Player {\r\n        uint id;\r\n        uint deposit; // principle deposit\r\n        uint regTime; // registration time\r\n    }\r\n    \r\n    // historical record entries\r\n    struct PlayerRecord {\r\n        address record;\r\n        uint deposit; // principle deposit\r\n        uint regTime; // registration time\r\n        uint withdrawl; // total taken out\r\n        uint exitTime;  // time exited\r\n    }\r\n    \r\n    mapping (address => Player) public players; // tracking active players\r\n    PlayerRecord[] public playerLog; // tracking long term\r\n \r\n    constructor() public{\r\n        educator=msg.sender;\r\n        killer=msg.sender;\r\n        compTable.push(magicDen); // make sure the first element is set\r\n    }\r\n    \r\n    // MONEY GO IN\r\n    function () external payable { // deposit\r\n    \r\n        require(msg.sender==tx.origin, \"HUMANS ONLY\"); // humans only!\r\n        require(players[msg.sender].deposit == 0, \"ONE DEPOSIT PER PLAYER\");\r\n        require(msg.value>0, \"GOTTA PAY TO PLAY\");\r\n        \r\n        // update the list of active players\r\n        players[msg.sender].id=playerLog.length;\r\n        players[msg.sender].deposit=msg.value;\r\n        players[msg.sender].regTime=block.timestamp;\r\n        \r\n        // lets get this in writing\r\n        PlayerRecord memory newRecord;\r\n        newRecord.record=msg.sender;\r\n        newRecord.deposit=msg.value;\r\n        newRecord.regTime=block.timestamp;\r\n        playerLog.push(newRecord);\r\n    }\r\n    \r\n    // MONEY GO OUT\r\n    function withdraw() public returns(bool result) {\r\n        require(msg.sender==tx.origin, \"HUMANS ONLY\"); // humans only!\r\n        require(players[msg.sender].deposit!=0, \"NEW CONTRACT WHO DIS?\");\r\n        uint256 hrs = getAge();\r\n        // check for cooldown period\r\n        require(hrs<24, \"24hr COOLDOWN PERIOD IN EFFECT\");\r\n        require(hrs<compTable.length,\"TABLE TOO SMALL\");\r\n        \r\n        // compTable offset by magicDen due to lack of floats\r\n        uint256 winnings = players[msg.sender].deposit*compTable[hrs]/magicDen;\r\n        \r\n        result = msg.sender.send(winnings); // sure hope there was enough in the vault.. \r\n        playerLog[players[msg.sender].id].exitTime=block.timestamp;\r\n\r\n        // NEED MONIES FOR BOATS, ETC\r\n        if(result) {\r\n            playerLog[players[msg.sender].id].withdrawl=winnings; // set \r\n            result=educator.send(winnings/1000);\r\n        }\r\n        else {\r\n            playerLog[players[msg.sender].id].withdrawl=0;\r\n        }\r\n        \r\n        // remove from the list of active players\r\n        delete players[msg.sender]; \r\n    }\r\n    \r\n    function getWealthAtTime(uint256 hrs) public view returns (uint256) {\r\n        return players[msg.sender].deposit*compTable[hrs]/magicDen;\r\n    }\r\n    \r\n    function getWealth() public view returns (uint256) {\r\n        return players[msg.sender].deposit*compTable[getAge()]/magicDen;\r\n    }\r\n    \r\n    function getAge() public view returns (uint256) {\r\n        return (block.timestamp-players[msg.sender].regTime)/3600;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getLogCount() public view returns(uint256) {\r\n        return playerLog.length;\r\n    }\r\n    \r\n    // owner paterns are overrated\r\n    function updateEducator(address payable newEducator) public {\r\n        require(msg.sender==educator,\"NO\");\r\n        educator=newEducator;\r\n    }\r\n    \r\n    // in case something really weird happens\r\n    function breakGlass() public {\r\n        require(msg.sender==killer,\"NICE TRY\");\r\n        selfdestruct(educator);\r\n    }\r\n    \r\n    // disable glass breaking by setting to 0x00..\r\n    function updateKiller(address payable newKiller) public {\r\n        require(msg.sender==killer);\r\n        killer=newKiller;\r\n    }\r\n    \r\n    // fill out more of the compound interest table\r\n    // if it's stupid and it works, it's not stupid\r\n    function bumpComp(uint256 count) public returns (uint256) {\r\n        for(uint i=0;i<count;++i) {\r\n          //append the next hour to the coefficient table\r\n          compTable.push(compTable[compTable.length-1]*magicNum/magicDen);\r\n        }\r\n        return compTable.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"breakGlass\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"bumpComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"compTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"educator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLogCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"}],\"name\":\"getWealthAtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerLog\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"record\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newEducator\",\"type\":\"address\"}],\"name\":\"updateEducator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newKiller\",\"type\":\"address\"}],\"name\":\"updateKiller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Ponzi","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0608bcee1f394c18ba859560b348003e669d656a4858a2f7a611fc54f2f672fa"}]}