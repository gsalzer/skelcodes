{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\ninterface HEX {\r\n    function xfLobbyEnter(address referrerAddr)\r\n    external\r\n    payable;\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n    external;\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n    external\r\n    view\r\n    returns (uint256[2] memory words);\r\n\r\n    function balanceOf (address account)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer (address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function currentDay ()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\ncontract LottoSplitter {\r\n\r\n    event DistributedShares(\r\n        uint256 timestamp,\r\n        address indexed senderAddress,\r\n        uint256 totalDistributed\r\n    );\r\n    \r\n    event DistributedEthDonation(\r\n        uint256 timestamp,\r\n        address indexed donatorAddress,\r\n        uint256 totalDonated\r\n    );\r\n\r\n    HEX internal hx = HEX(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n\r\n    address payable internal KYLE = 0xD30BC4859A79852157211E6db19dE159673a67E2;\r\n    address payable internal MICHAEL = 0xe551072153c02fa33d4903CAb0435Fb86F1a80cb;\r\n    address payable internal DONATOR = 0x723e82Eb1A1b419Fb36e9bD65E50A979cd13d341;\r\n    address payable internal MARCO = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39;\r\n    address payable internal SWIFT = 0x88BA4dc5571660A1693E421D83EC97015B53580D;\r\n    address payable internal MARK = 0x35e9034f47cc00b8A9b555fC1FDB9598b2c245fD;\r\n    \r\n    mapping(address => bool) contributors;\r\n    \r\n    modifier onlyContributors(){\r\n        require(contributors[msg.sender], \"not a contributor\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        contributors[KYLE] = true;\r\n        contributors[MICHAEL] = true;\r\n        contributors[DONATOR] = true;\r\n        contributors[MARCO] = true;\r\n        contributors[SWIFT] = true;\r\n        contributors[MARK] = true;\r\n    }\r\n    \r\n    function distribute () public {\r\n        //get balance    \r\n        uint256 balance = hx.balanceOf(address(this));\r\n        require(balance > 99, \"balance too low to distribute\");\r\n        //distribute\r\n        uint256 share = balance / 6;\r\n        hx.transfer(KYLE, share);\r\n        hx.transfer(DONATOR, share);\r\n        hx.transfer(MARCO, share);\r\n        hx.transfer(SWIFT, share); \r\n        hx.transfer(MARK, share);\r\n        balance = hx.balanceOf(address(this));\r\n        if(balance < share){\r\n            share = balance;\r\n        }\r\n        hx.transfer(MICHAEL,  share);\r\n        emit DistributedShares(now, msg.sender, balance);\r\n    }\r\n    \r\n    \r\n    //fallback for eth sent to contract - auto distribute as donation\r\n    function() external payable{\r\n        donate();    \r\n    }\r\n    \r\n    function donate() public payable {\r\n        require(msg.value > 0);\r\n        uint256 balance = msg.value;\r\n        uint256 share = balance / 6;\r\n        KYLE.transfer(share);\r\n        DONATOR.transfer(share);\r\n        MARCO.transfer(share);\r\n        SWIFT.transfer(share); \r\n        MARK.transfer(share);\r\n        balance = address(this).balance;\r\n        if(balance < share){\r\n            share = balance;\r\n        }\r\n        hx.transfer(MICHAEL,  share);\r\n        emit DistributedEthDonation(now, msg.sender, balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDonated\",\"type\":\"uint256\"}],\"name\":\"DistributedEthDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"}],\"name\":\"DistributedShares\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LottoSplitter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2fc2303098e1c81cb787a88b5cd420d365f45ea0e689b88e7fa72f98ca618587"}]}