{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title EIP20/ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract EIP20 is ERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n}\r\n\r\ncontract WETHInterface is EIP20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n  */\r\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return ((_a - 1) / _b) + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\r\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\r\n  uint256 internal constant REENTRANCY_GUARD_FREE = 1;\r\n\r\n  /// @dev Constant for locked guard state\r\n  uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one `nonReentrant` function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and an `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\r\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\r\n    _;\r\n    reentrancyLock = REENTRANCY_GUARD_FREE;\r\n  }\r\n\r\n}\r\n\r\ncontract LoanTokenization is ReentrancyGuard, Ownable {\r\n\r\n    uint256 internal constant MAX_UINT = 2**256 - 1;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    address public bZxContract;\r\n    address public bZxVault;\r\n    address public bZxOracle;\r\n    address public wethContract;\r\n\r\n    address public loanTokenAddress;\r\n\r\n    // price of token at last user checkpoint\r\n    mapping (address => uint256) internal checkpointPrices_;\r\n}\r\n\r\ncontract PositionTokenStorage is LoanTokenization {\r\n\r\n    bool internal isInitialized_ = false;\r\n\r\n    address public loanTokenLender;\r\n    address public tradeTokenAddress;\r\n\r\n    uint256 public leverageAmount;\r\n    bytes32 public loanOrderHash;\r\n\r\n    uint256 public initialPrice;\r\n}\r\n\r\ncontract SplittableTokenStorage is PositionTokenStorage {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Mint(\r\n        address indexed minter,\r\n        uint256 tokenAmount,\r\n        uint256 assetAmount,\r\n        uint256 price\r\n    );\r\n    event Burn(\r\n        address indexed burner,\r\n        uint256 tokenAmount,\r\n        uint256 assetAmount,\r\n        uint256 price\r\n    );\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    uint256 internal totalSupply_;\r\n\r\n    uint256 public splitFactor = 10**18;\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return denormalize(totalSupply_);\r\n    }\r\n\r\n    function balanceOf(\r\n        address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return denormalize(balances[_owner]);\r\n    }\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return denormalize(allowed[_owner][_spender]);\r\n    }\r\n\r\n    function normalize(\r\n        uint256 _value)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _value\r\n            .mul(splitFactor)\r\n            .div(10**18);\r\n    }\r\n\r\n    function denormalize(\r\n        uint256 _value)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _value\r\n            .mul(10**18)\r\n            .div(splitFactor);\r\n    }\r\n}\r\n\r\ncontract SplittableToken is SplittableTokenStorage {\r\n    using SafeMath for uint256;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 allowanceAmount = denormalize(allowed[_from][msg.sender]);\r\n        uint256 fromBalance = denormalize(balances[_from]);\r\n        require(_value <= fromBalance, \"insufficient balance\");\r\n        require(_value <= allowanceAmount, \"insufficient allowance\");\r\n        require(_to != address(0), \"invalid address\");\r\n\r\n        balances[_from] = normalize(fromBalance.sub(_value));\r\n        if (balanceOf(_from) == 0) {\r\n            balances[_from] = 0;\r\n        }\r\n\r\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\r\n        if (allowanceAmount < MAX_UINT) {\r\n            allowed[_from][msg.sender] = normalize(allowanceAmount.sub(_value));\r\n            if (allowance(_from, msg.sender) == 0) {\r\n                allowed[_from][msg.sender] = 0;\r\n            }\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 fromBalance = denormalize(balances[msg.sender]);\r\n        require(_value <= fromBalance, \"insufficient balance\");\r\n        require(_to != address(0), \"invalid address\");\r\n\r\n        balances[msg.sender] = normalize(fromBalance.sub(_value));\r\n        if (balanceOf(msg.sender) == 0) {\r\n            balances[msg.sender] = 0;\r\n        }\r\n\r\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        if (allowance(msg.sender, _spender) == 0) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _mint(\r\n        address _to,\r\n        uint256 _tokenAmount,\r\n        uint256 _assetAmount,\r\n        uint256 _price)\r\n        internal\r\n    {\r\n        require(_to != address(0), \"invalid address\");\r\n        totalSupply_ = normalize(denormalize(totalSupply_).add(_tokenAmount));\r\n        balances[_to] = normalize(denormalize(balances[_to]).add(_tokenAmount));\r\n\r\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\r\n        emit Transfer(address(0), _to, _tokenAmount);\r\n    }\r\n\r\n    function _burn(\r\n        address _who,\r\n        uint256 _tokenAmount,\r\n        uint256 _assetAmount,\r\n        uint256 _price)\r\n        internal\r\n    {\r\n        uint256 whoBalance = denormalize(balances[_who]);\r\n        require(_tokenAmount <= whoBalance, \"burn value exceeds balance\");\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        uint256 offsetAmount;\r\n        balances[_who] = normalize(whoBalance.sub(_tokenAmount));\r\n        if (balances[_who] <= 10 || balanceOf(_who) <= 10) { // we can't leave such small balance quantities\r\n            offsetAmount = balances[_who];\r\n            balances[_who] = 0;\r\n        }\r\n\r\n        uint256 normSupply = denormalize(totalSupply_);\r\n        if (normSupply > _tokenAmount) {\r\n            totalSupply_ = normalize(normSupply.sub(_tokenAmount));\r\n\r\n            if (totalSupply() == 0) {\r\n                totalSupply_ = 0;\r\n                balances[_who] = 0;\r\n            }\r\n        } else {\r\n            balances[_who] = 0;\r\n            totalSupply_ = 0;\r\n        }\r\n\r\n        if (offsetAmount > 0) {\r\n            _tokenAmount = _tokenAmount.add(denormalize(offsetAmount));\r\n            if (totalSupply_ > offsetAmount)\r\n                totalSupply_ = totalSupply_.sub(offsetAmount);\r\n            else {\r\n                totalSupply_ = 0;\r\n            }\r\n        }\r\n\r\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\r\n        emit Transfer(_who, address(0), _tokenAmount);\r\n    }\r\n}\r\n\r\ninterface IBZx {\r\n    function closeLoanPartiallyFromCollateral(\r\n        bytes32 loanOrderHash,\r\n        uint256 closeAmount)\r\n        external\r\n        returns (uint256 actualCloseAmount);\r\n\r\n    function withdrawCollateral(\r\n        bytes32 loanOrderHash,\r\n        uint256 withdrawAmount)\r\n        external\r\n        returns (uint256 amountWithdrawn);\r\n\r\n    function depositCollateral(\r\n        bytes32 loanOrderHash,\r\n        address depositTokenAddress,\r\n        uint256 depositAmount)\r\n        external\r\n        returns (bool);\r\n\r\n    function depositPosition(\r\n        bytes32 loanOrderHash,\r\n        address depositTokenAddress,\r\n        uint256 depositAmount)\r\n        external\r\n        returns (bool);\r\n\r\n    function getMarginLevels(\r\n        bytes32 loanOrderHash,\r\n        address trader)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 initialMarginAmount,\r\n            uint256 maintenanceMarginAmount,\r\n            uint256 currentMarginAmount);\r\n\r\n    function getTotalEscrowWithRate(\r\n        bytes32 loanOrderHash,\r\n        address trader,\r\n        uint256 toCollateralRate,\r\n        uint256 toCollateralPrecision)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 netCollateralAmount,\r\n            uint256 interestDepositRemaining,\r\n            uint256 loanToCollateralAmount,\r\n            uint256, // toCollateralRate\r\n            uint256); // toCollateralPrecision\r\n\r\n    function oracleAddresses(\r\n        address oracleAddress)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IBZxOracle {\r\n    function tradeUserAsset(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        address returnToSenderAddress,\r\n        uint256 sourceTokenAmount,\r\n        uint256 maxDestTokenAmount,\r\n        uint256 minConversionRate)\r\n        external\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\r\n\r\n    function setSaneRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress)\r\n        external\r\n        returns (uint256 saneRate);\r\n\r\n    function clearSaneRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress)\r\n        external;\r\n}\r\n\r\ninterface ILoanToken {\r\n    function getMaxEscrowAmount(\r\n        uint256 leverageAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function marginTradeFromDeposit(\r\n        uint256 depositAmount,\r\n        uint256 leverageAmount,\r\n        uint256 loanTokenSent,\r\n        uint256 collateralTokenSent,\r\n        uint256 tradeTokenSent,\r\n        address trader,\r\n        address depositTokenAddress,\r\n        address collateralTokenAddress,\r\n        address tradeTokenAddress)\r\n        external\r\n        returns (bytes32 loanOrderHash);\r\n}\r\n\r\ninterface IWethHelper {\r\n    function claimEther(\r\n        address receiver,\r\n        uint256 amount)\r\n        external\r\n        returns (uint256 claimAmount);\r\n}\r\n\r\ncontract PositionTokenLogic_WBTCShort is SplittableToken {\r\n    using SafeMath for uint256;\r\n\r\n    modifier fixedSaneRate\r\n    {\r\n        address currentOracle_ = IBZx(bZxContract).oracleAddresses(bZxOracle);\r\n\r\n        IBZxOracle(currentOracle_).setSaneRate(\r\n            loanTokenAddress,\r\n            tradeTokenAddress\r\n        );\r\n\r\n        _;\r\n\r\n        IBZxOracle(currentOracle_).clearSaneRate(\r\n            loanTokenAddress,\r\n            tradeTokenAddress\r\n        );\r\n    }\r\n\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {}\r\n\r\n\r\n    /* Public functions */\r\n\r\n    // returns the amount of token minted\r\n    // maxPriceAllowed of 0 will be ignored\r\n    function mintWithEther(\r\n        address receiver,\r\n        uint256 maxPriceAllowed)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        fixedSaneRate\r\n        returns (uint256)\r\n    {\r\n        require (msg.value != 0, \"msg.value == 0\");\r\n\r\n        uint256 netCollateralAmount;\r\n        uint256 interestDepositRemaining;\r\n        uint256 toCollateralRate;\r\n        uint256 toCollateralPrecision;\r\n        if (totalSupply() != 0) {\r\n            (netCollateralAmount,\r\n             interestDepositRemaining,\r\n             ,\r\n             toCollateralRate,\r\n             toCollateralPrecision) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n                loanOrderHash,\r\n                address(this),\r\n                0,\r\n                0\r\n            );\r\n        }\r\n        uint256 currentPrice = _tokenPrice(netCollateralAmount, interestDepositRemaining);\r\n\r\n        if (maxPriceAllowed != 0) {\r\n            require(\r\n                currentPrice <= maxPriceAllowed,\r\n                \"price too high\"\r\n            );\r\n        }\r\n\r\n        WETHInterface(wethContract).deposit.value(msg.value)();\r\n\r\n        return _mintWithToken(\r\n            receiver,\r\n            wethContract,\r\n            msg.value,\r\n            currentPrice,\r\n            toCollateralRate,\r\n            toCollateralPrecision\r\n        );\r\n    }\r\n\r\n    // returns the amount of token minted\r\n    // maxPriceAllowed of 0 is ignored\r\n    function mintWithToken(\r\n        address receiver,\r\n        address depositTokenAddress,\r\n        uint256 depositAmount,\r\n        uint256 maxPriceAllowed)\r\n        external\r\n        nonReentrant\r\n        fixedSaneRate\r\n        returns (uint256)\r\n    {\r\n        require (depositAmount != 0, \"depositAmount == 0\");\r\n\r\n        uint256 netCollateralAmount;\r\n        uint256 interestDepositRemaining;\r\n        uint256 toCollateralRate;\r\n        uint256 toCollateralPrecision;\r\n        if (totalSupply() != 0) {\r\n            (netCollateralAmount,\r\n             interestDepositRemaining,\r\n             ,\r\n             toCollateralRate,\r\n             toCollateralPrecision) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n                loanOrderHash,\r\n                address(this),\r\n                0,\r\n                0\r\n            );\r\n        }\r\n        uint256 currentPrice = _tokenPrice(netCollateralAmount, interestDepositRemaining);\r\n\r\n        if (maxPriceAllowed != 0) {\r\n            require(\r\n                currentPrice <= maxPriceAllowed,\r\n                \"price too high\"\r\n            );\r\n        }\r\n\r\n        require(ERC20(depositTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            depositAmount\r\n        ), \"transfer of token failed\");\r\n\r\n        return _mintWithToken(\r\n            receiver,\r\n            depositTokenAddress,\r\n            depositAmount,\r\n            currentPrice,\r\n            toCollateralRate,\r\n            toCollateralPrecision\r\n        );\r\n    }\r\n\r\n    function burnToEther(\r\n        address receiver,\r\n        uint256 burnAmount,\r\n        uint256 minPriceAllowed)\r\n        external\r\n        nonReentrant\r\n        fixedSaneRate\r\n        returns (uint256)\r\n    {\r\n        uint256 loanAmountOwed = _burnToken(burnAmount, minPriceAllowed);\r\n        if (loanAmountOwed != 0) {\r\n            if (wethContract != loanTokenAddress) {\r\n                (uint256 destTokenAmountReceived,) = _tradeUserAsset(\r\n                    loanTokenAddress,   // sourceTokenAddress\r\n                    address(0),         // destTokenAddress\r\n                    receiver,           // receiver\r\n                    loanAmountOwed,     // sourceTokenAmount\r\n                    true                // throwOnError\r\n                );\r\n\r\n                loanAmountOwed = destTokenAmountReceived;\r\n            } else {\r\n                IWethHelper wethHelper = IWethHelper(0x3b5bDCCDFA2a0a1911984F203C19628EeB6036e0);\r\n\r\n                bool success = ERC20(wethContract).transfer(\r\n                    address(wethHelper),\r\n                    loanAmountOwed\r\n                );\r\n                if (success) {\r\n                    success = loanAmountOwed == wethHelper.claimEther(receiver, loanAmountOwed);\r\n                }\r\n                require(success, \"transfer of ETH failed\");\r\n            }\r\n        }\r\n\r\n        return loanAmountOwed;\r\n    }\r\n\r\n    function burnToToken(\r\n        address receiver,\r\n        address burnTokenAddress,\r\n        uint256 burnAmount,\r\n        uint256 minPriceAllowed)\r\n        external\r\n        nonReentrant\r\n        fixedSaneRate\r\n        returns (uint256)\r\n    {\r\n        uint256 loanAmountOwed = _burnToken(burnAmount, minPriceAllowed);\r\n        if (loanAmountOwed != 0) {\r\n            if (burnTokenAddress != loanTokenAddress) {\r\n                (uint256 destTokenAmountReceived,) = _tradeUserAsset(\r\n                    loanTokenAddress,   // sourceTokenAddress\r\n                    burnTokenAddress,   // destTokenAddress\r\n                    receiver,           // receiver\r\n                    loanAmountOwed,     // sourceTokenAmount\r\n                    true                // throwOnError\r\n                );\r\n\r\n                loanAmountOwed = destTokenAmountReceived;\r\n            } else {\r\n                require(ERC20(loanTokenAddress).transfer(\r\n                    receiver,\r\n                    loanAmountOwed\r\n                ), \"transfer of loanToken failed\");\r\n            }\r\n        }\r\n\r\n        return loanAmountOwed;\r\n    }\r\n\r\n    function wrapEther()\r\n        external\r\n        nonReentrant\r\n    {\r\n        if (address(this).balance != 0) {\r\n            WETHInterface(wethContract).deposit.value(address(this).balance)();\r\n        }\r\n    }\r\n\r\n    // Sends non-LoanToken assets to the Oracle fund\r\n    // These are assets that would otherwise be \"stuck\" due to a user accidently sending them to the contract\r\n    function donateAsset(\r\n        address tokenAddress)\r\n        external\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        if (tokenAddress == loanTokenAddress)\r\n            return false;\r\n\r\n        uint256 balance = ERC20(tokenAddress).balanceOf(address(this));\r\n        if (balance == 0)\r\n            return false;\r\n\r\n        require(ERC20(tokenAddress).transfer(\r\n            IBZx(bZxContract).oracleAddresses(bZxOracle),\r\n            balance\r\n        ), \"transfer of token balance failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        super.transferFrom(\r\n            _from,\r\n            _to,\r\n            _value\r\n        );\r\n\r\n        // handle checkpoint update\r\n        uint256 currentPrice = denormalize(tokenPrice());\r\n        if (balanceOf(_from) != 0) {\r\n            checkpointPrices_[_from] = currentPrice;\r\n        } else {\r\n            checkpointPrices_[_from] = 0;\r\n        }\r\n        if (balanceOf(_to) != 0) {\r\n            checkpointPrices_[_to] = currentPrice;\r\n        } else {\r\n            checkpointPrices_[_to] = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        super.transfer(\r\n            _to,\r\n            _value\r\n        );\r\n\r\n        // handle checkpoint update\r\n        uint256 currentPrice = denormalize(tokenPrice());\r\n        if (balanceOf(msg.sender) != 0) {\r\n            checkpointPrices_[msg.sender] = currentPrice;\r\n        } else {\r\n            checkpointPrices_[msg.sender] = 0;\r\n        }\r\n        if (balanceOf(_to) != 0) {\r\n            checkpointPrices_[_to] = currentPrice;\r\n        } else {\r\n            checkpointPrices_[_to] = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Public View functions */\r\n\r\n    function tokenPrice()\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        uint256 netCollateralAmount;\r\n        uint256 interestDepositRemaining;\r\n        if (totalSupply() != 0) {\r\n            (netCollateralAmount, interestDepositRemaining,,,) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n                loanOrderHash,\r\n                address(this),\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        return _tokenPrice(netCollateralAmount, interestDepositRemaining);\r\n    }\r\n\r\n    function liquidationPrice()\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        (,uint256 maintenanceMarginAmount,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\r\n            loanOrderHash,\r\n            address(this));\r\n\r\n        if (maintenanceMarginAmount == 0)\r\n            return 0;\r\n        else if (currentMarginAmount <= maintenanceMarginAmount)\r\n            return tokenPrice();\r\n\r\n        return tokenPrice()\r\n            .mul(maintenanceMarginAmount)\r\n            .div(currentMarginAmount);\r\n    }\r\n\r\n    function checkpointPrice(\r\n        address _user)\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        return normalize(checkpointPrices_[_user]);\r\n    }\r\n\r\n    function currentLeverage()\r\n        public\r\n        view\r\n        returns (uint256 leverage)\r\n    {\r\n        (,,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\r\n            loanOrderHash,\r\n            address(this));\r\n\r\n        if (currentMarginAmount == 0)\r\n            return 0;\r\n\r\n        return SafeMath.div(10**38, currentMarginAmount);\r\n    }\r\n\r\n    function marketLiquidityForLoan()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount);\r\n    }\r\n\r\n    function marketLiquidityForAsset()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount);\r\n    }\r\n\r\n    function marketLiquidityForToken()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount)\r\n            .mul(10**28) // 10**18 * 10**(18-8) - WBTC adjust\r\n            .div(tokenPrice());\r\n    }\r\n\r\n    // returns the user's balance of underlying token\r\n    function assetBalanceOf(\r\n        address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balanceOf(_owner)\r\n            .mul(tokenPrice())\r\n            .div(10**28); // 10**18 * 10**(18-8) - WBTC adjust\r\n    }\r\n\r\n\r\n    /* Internal functions */\r\n\r\n    // returns the amount of token minted\r\n    function _mintWithToken(\r\n        address receiver,\r\n        address depositTokenAddress,\r\n        uint256 depositAmount,\r\n        uint256 currentPrice,\r\n        uint256 toCollateralRate,\r\n        uint256 toCollateralPrecision)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 refundAmount;\r\n        if (depositTokenAddress != loanTokenAddress && depositTokenAddress != tradeTokenAddress) {\r\n            (uint256 destTokenAmountReceived, uint256 depositAmountUsed) = _tradeUserAsset(\r\n                depositTokenAddress,    // sourceTokenAddress\r\n                loanTokenAddress,       // destTokenAddress\r\n                address(this),          // receiver\r\n                depositAmount,          // sourceTokenAmount\r\n                true                    // throwOnError\r\n            );\r\n\r\n            if (depositAmount > depositAmountUsed) {\r\n                refundAmount = depositAmount-depositAmountUsed;\r\n                if (msg.value == 0) {\r\n                    require(ERC20(depositTokenAddress).transfer(\r\n                        msg.sender,\r\n                        refundAmount\r\n                    ), \"transfer of token failed\");\r\n                } else {\r\n                    IWethHelper wethHelper = IWethHelper(0x3b5bDCCDFA2a0a1911984F203C19628EeB6036e0);\r\n\r\n                    bool success = ERC20(wethContract).transfer(\r\n                        address(wethHelper),\r\n                        refundAmount\r\n                    );\r\n                    if (success) {\r\n                        success = refundAmount == wethHelper.claimEther(msg.sender, refundAmount);\r\n                    }\r\n                    require(success, \"transfer of ETH failed\");\r\n                }\r\n            }\r\n\r\n            depositAmount = destTokenAmountReceived;\r\n            depositTokenAddress = loanTokenAddress;\r\n        }\r\n\r\n        // depositAmount must be >= 0.001 loanToken units\r\n        /*require(depositAmount >= (10**15 *\r\n            10**uint256(decimals) /\r\n            10**28 // 10**18 * 10**(18-8) - WBTC adjust\r\n        ), \"depositAmount too low\");*/\r\n\r\n        // open position\r\n        _triggerPosition(\r\n            depositTokenAddress,\r\n            depositAmount\r\n        );\r\n\r\n        // get post-entry supply\r\n        (uint256 netCollateralAmount, uint256 interestDepositRemaining,,,) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n            loanOrderHash,\r\n            address(this),\r\n            toCollateralRate,\r\n            toCollateralPrecision\r\n        );\r\n        uint256 postEntrySupply = ERC20(loanTokenAddress).balanceOf(address(this))\r\n            .add(netCollateralAmount)\r\n            .add(interestDepositRemaining)\r\n            .mul(10**28) // 10**18 * 10**(18-8) - WBTC adjust\r\n            .div(currentPrice);\r\n        require(postEntrySupply > totalSupply(), \"supply not added\");\r\n\r\n        uint256 mintAmount = postEntrySupply - totalSupply();\r\n        _mint(\r\n            receiver,\r\n            mintAmount,\r\n            depositAmount,\r\n            currentPrice\r\n        );\r\n\r\n        checkpointPrices_[receiver] = denormalize(currentPrice);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    function _burnToken(\r\n        uint256 burnAmount,\r\n        uint256 minPriceAllowed)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        require(burnAmount != 0, \"burnAmount == 0\");\r\n\r\n        if (burnAmount > balanceOf(msg.sender)) {\r\n            burnAmount = balanceOf(msg.sender);\r\n        }\r\n\r\n        (uint256 netCollateralAmount,\r\n         uint256 interestDepositRemaining,\r\n         ,\r\n         uint256 toCollateralRate,\r\n         uint256 toCollateralPrecision) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n            loanOrderHash,\r\n            address(this),\r\n            0,\r\n            0\r\n        );\r\n        uint256 currentPrice = _tokenPrice(netCollateralAmount, interestDepositRemaining);\r\n\r\n        if (minPriceAllowed != 0) {\r\n            require(\r\n                currentPrice >= minPriceAllowed,\r\n                \"price too low\"\r\n            );\r\n        }\r\n\r\n        uint256 loanAmountOwed = burnAmount\r\n            .mul(currentPrice)\r\n            .div(10**28); // 10**18 * 10**(18-8) - WBTC adjust\r\n\r\n        uint256 loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\r\n\r\n        uint256 preCloseEscrow = loanAmountAvailableInContract\r\n            .add(netCollateralAmount)\r\n            .add(interestDepositRemaining);\r\n\r\n        bool didCallWithdraw;\r\n        if (loanAmountAvailableInContract < loanAmountOwed) {\r\n            // will revert if the position needs to be liquidated\r\n            IBZx(bZxContract).closeLoanPartiallyFromCollateral(\r\n                loanOrderHash,\r\n                burnAmount < totalSupply() ?\r\n                    loanAmountOwed.sub(loanAmountAvailableInContract) :\r\n                    MAX_UINT\r\n            );\r\n\r\n            loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\r\n            didCallWithdraw = true;\r\n        }\r\n\r\n        if (loanAmountAvailableInContract < loanAmountOwed && burnAmount < totalSupply()) {\r\n            uint256 collateralWithdrawn = IBZx(bZxContract).withdrawCollateral(\r\n                loanOrderHash,\r\n                loanAmountOwed.sub(loanAmountAvailableInContract)\r\n            );\r\n            if (collateralWithdrawn != 0) {\r\n                loanAmountAvailableInContract = loanAmountAvailableInContract.add(collateralWithdrawn);\r\n                didCallWithdraw = true;\r\n            }\r\n        }\r\n\r\n        if (didCallWithdraw) {\r\n            if (burnAmount < totalSupply()) {\r\n                (netCollateralAmount, interestDepositRemaining,,,) = IBZx(bZxContract).getTotalEscrowWithRate(\r\n                    loanOrderHash,\r\n                    address(this),\r\n                    toCollateralRate,\r\n                    toCollateralPrecision\r\n                );\r\n                uint256 postCloseEscrow = loanAmountAvailableInContract\r\n                    .add(netCollateralAmount)\r\n                    .add(interestDepositRemaining);\r\n\r\n                if (postCloseEscrow < preCloseEscrow) {\r\n                    /*uint256 slippageLoss = loanAmountOwed\r\n                        .mul(preCloseEscrow - postCloseEscrow)\r\n                        .div(netCollateralAmount);*/\r\n                    uint256 slippageLoss = preCloseEscrow - postCloseEscrow;\r\n\r\n                    require(loanAmountOwed > slippageLoss, \"slippage too great\");\r\n                    loanAmountOwed = loanAmountOwed - slippageLoss;\r\n                }\r\n            }\r\n\r\n            if (loanAmountOwed > loanAmountAvailableInContract) {\r\n                /*\r\n                // allow at most 5% loss here\r\n                require(\r\n                    loanAmountOwed\r\n                    .sub(loanAmountAvailableInContract)\r\n                    .mul(10**20)\r\n                    .div(loanAmountOwed) <= (5 * 10**18),\r\n                    \"contract value too low\"\r\n                );\r\n                */\r\n                loanAmountOwed = loanAmountAvailableInContract;\r\n            }\r\n        }\r\n\r\n        // unless burning the full balance, loanAmountOwed must be >= 0.001 loanToken units\r\n        /*require(burnAmount == balanceOf(msg.sender) || loanAmountOwed >= (\r\n            10**15 *\r\n            10**uint256(decimals)\r\n            / 10**28 // 10**18 * 10**(18-8) - WBTC adjust\r\n        ), \"burnAmount too low\");*/\r\n\r\n        _burn(msg.sender, burnAmount, loanAmountOwed, currentPrice);\r\n\r\n        if (totalSupply() == 0 || tokenPrice() == 0) {\r\n            splitFactor = 10**18;\r\n            currentPrice = initialPrice;\r\n        }\r\n\r\n        if (balanceOf(msg.sender) != 0) {\r\n            checkpointPrices_[msg.sender] = denormalize(currentPrice);\r\n        } else {\r\n            checkpointPrices_[msg.sender] = 0;\r\n        }\r\n\r\n        return loanAmountOwed;\r\n    }\r\n\r\n    function _tradeUserAsset(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiver,\r\n        uint256 sourceTokenAmount,\r\n        bool throwOnError)\r\n        internal\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\r\n    {\r\n        address oracleAddress = IBZx(bZxContract).oracleAddresses(bZxOracle);\r\n\r\n        uint256 tempAllowance = ERC20(sourceTokenAddress).allowance(address(this), oracleAddress);\r\n        if (tempAllowance < sourceTokenAmount) {\r\n            if (tempAllowance != 0) {\r\n                // reset approval to 0\r\n                require(ERC20(sourceTokenAddress).approve(oracleAddress, 0), \"token approval reset failed\");\r\n            }\r\n\r\n            require(ERC20(sourceTokenAddress).approve(oracleAddress, MAX_UINT), \"token approval failed\");\r\n        }\r\n\r\n        (bool success, bytes memory data) = oracleAddress.call(\r\n            abi.encodeWithSignature(\r\n                \"tradeUserAsset(address,address,address,address,uint256,uint256,uint256)\",\r\n                sourceTokenAddress,\r\n                destTokenAddress,\r\n                receiver, // receiverAddress\r\n                receiver, // returnToSenderAddress\r\n                sourceTokenAmount,\r\n                MAX_UINT, // maxDestTokenAmount\r\n                0 // minConversionRate\r\n            )\r\n        );\r\n        require(!throwOnError || success, \"trade error\");\r\n        assembly {\r\n            if eq(success, 1) {\r\n                destTokenAmountReceived := mload(add(data, 32))\r\n                sourceTokenAmountUsed := mload(add(data, 64))\r\n            }\r\n        }\r\n    }\r\n\r\n    function _triggerPosition(\r\n        address depositTokenAddress,\r\n        uint256 depositAmount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // swap gas refunds left from liquidations\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance != 0) {\r\n            WETHInterface(wethContract).deposit.value(ethBalance)();\r\n            if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {\r\n                _tradeUserAsset(\r\n                    wethContract,       // sourceTokenAddress\r\n                    loanTokenAddress,   // destTokenAddress\r\n                    address(this),      // receiver\r\n                    ethBalance,         // sourceTokenAmount\r\n                    false               // throwOnError\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n        uint256 tradeTokenBalance = ERC20(tradeTokenAddress).balanceOf(address(this));\r\n        uint256 loanTokenBalance = ERC20(loanTokenAddress).balanceOf(address(this));\r\n\r\n        if (tradeTokenBalance != 0) {\r\n            uint256 tempAllowance = ERC20(tradeTokenAddress).allowance(address(this), loanTokenLender);\r\n            if (tempAllowance < tradeTokenBalance) {\r\n                if (tempAllowance != 0) {\r\n                    // reset approval to 0\r\n                    require(ERC20(tradeTokenAddress).approve(loanTokenLender, 0), \"token approval reset failed\");\r\n                }\r\n\r\n                require(ERC20(tradeTokenAddress).approve(loanTokenLender, MAX_UINT), \"token approval failed\");\r\n            }\r\n        }\r\n        if (loanTokenBalance != 0) {\r\n            uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), loanTokenLender);\r\n            if (tempAllowance < loanTokenBalance) {\r\n                if (tempAllowance != 0) {\r\n                    // reset approval to 0\r\n                    require(ERC20(loanTokenAddress).approve(loanTokenLender, 0), \"token approval reset failed\");\r\n                }\r\n\r\n                require(ERC20(loanTokenAddress).approve(loanTokenLender, MAX_UINT), \"token approval failed\");\r\n            }\r\n        }\r\n\r\n        if (loanTokenBalance != 0 || tradeTokenBalance != 0) {\r\n            uint256 tradeTokenDeposit;\r\n            uint256 loanTokenDeposit;\r\n\r\n            if (depositTokenAddress == tradeTokenAddress) {\r\n                if (depositAmount == 0 || depositAmount > tradeTokenBalance) {\r\n                    tradeTokenDeposit = tradeTokenBalance;\r\n                    loanTokenDeposit = loanTokenBalance;\r\n                    depositAmount = tradeTokenBalance;\r\n                } else {\r\n                    tradeTokenDeposit = depositAmount;\r\n                }\r\n            } else if (depositTokenAddress == loanTokenAddress) {\r\n                if (depositAmount == 0 || depositAmount > loanTokenBalance) {\r\n                    loanTokenDeposit = loanTokenBalance;\r\n                    tradeTokenDeposit = tradeTokenBalance;\r\n                    depositAmount = loanTokenBalance;\r\n                } else {\r\n                    loanTokenDeposit = depositAmount;\r\n                }\r\n            } else {\r\n                revert(\"invalid deposit\");\r\n            }\r\n\r\n            ILoanToken(loanTokenLender).marginTradeFromDeposit(\r\n                depositAmount,          // depositAmount\r\n                leverageAmount,         // leverageAmount\r\n                0,                      // loanTokenSent\r\n                loanTokenDeposit,       // collateralTokenSent\r\n                tradeTokenDeposit,      // tradeTokenSent\r\n                address(this),          // trader\r\n                depositTokenAddress,    // depositTokenAddress\r\n                loanTokenAddress,       // collateralTokenAddress\r\n                tradeTokenAddress       // tradeTokenAddress\r\n            );\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* Internal View functions */\r\n\r\n    function _tokenPrice(\r\n        uint256 netCollateralAmount,\r\n        uint256 interestDepositRemaining)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply_ != 0 ?\r\n            normalize(\r\n                ERC20(loanTokenAddress).balanceOf(address(this))\r\n                .add(netCollateralAmount)\r\n                .add(interestDepositRemaining)\r\n                .mul(10**28) // 10**18 * 10**(18-8) - WBTC adjust\r\n                .div(totalSupply_)\r\n            ) : initialPrice;\r\n    }\r\n\r\n\r\n    /* Owner-Only functions */\r\n\r\n    function setLeverageAmount(\r\n        uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        leverageAmount = _amount;\r\n    }\r\n\r\n    function setLoanTokenLender(\r\n        address _lender)\r\n        public\r\n        onlyOwner\r\n    {\r\n        loanTokenLender = _lender;\r\n    }\r\n\r\n    function setBZxContract(\r\n        address _addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bZxContract = _addr;\r\n    }\r\n\r\n    function setBZxVault(\r\n        address _addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bZxVault = _addr;\r\n    }\r\n\r\n    function setBZxOracle(\r\n        address _addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bZxOracle = _addr;\r\n    }\r\n\r\n    function setInitialPrice(\r\n        uint256 _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_value != 0, \"value can't be 0\");\r\n        initialPrice = _value;\r\n    }\r\n\r\n    function setSplitValue(\r\n        uint256 _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_value != 0, \"value can't be 0\");\r\n        splitFactor = _value;\r\n    }\r\n\r\n    function handleSplit()\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (totalSupply() != 0) {\r\n            splitFactor = splitFactor\r\n                .mul(initialPrice)\r\n                .div(\r\n                    tokenPrice()\r\n                );\r\n        } else {\r\n            splitFactor = 10**18;\r\n        }\r\n    }\r\n\r\n    function withdrawCollateral(\r\n        uint256 withdrawAmount)\r\n        public\r\n        onlyOwner\r\n        returns (uint256 amountWithdrawn)\r\n    {\r\n        return IBZx(bZxContract).withdrawCollateral(\r\n            loanOrderHash,\r\n            withdrawAmount\r\n        );\r\n    }\r\n\r\n    // depositTokenAddress is swapped to loanTokenAddress if needed in the protocol\r\n    // this is callable by anyone that wants to top up the collateral\r\n    function depositCollateralToLoan(\r\n        address depositTokenAddress,\r\n        uint256 depositAmount)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(ERC20(depositTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            depositAmount\r\n        ), \"transfer of token failed\");\r\n\r\n        uint256 tempAllowance = ERC20(depositTokenAddress).allowance(address(this), bZxVault);\r\n        if (tempAllowance < depositAmount) {\r\n            if (tempAllowance != 0) {\r\n                // reset approval to 0\r\n                require(ERC20(depositTokenAddress).approve(bZxVault, 0), \"token approval reset failed\");\r\n            }\r\n\r\n            require(ERC20(depositTokenAddress).approve(bZxVault, MAX_UINT), \"token approval failed\");\r\n        }\r\n\r\n        require(IBZx(bZxContract).depositCollateral(\r\n            loanOrderHash,\r\n            depositTokenAddress,\r\n            depositAmount\r\n        ), \"deposit failed\");\r\n    }\r\n\r\n    // kept for backwards compatibility\r\n    function triggerPosition(\r\n        bool /*openPosition*/)\r\n        public\r\n    {\r\n        _triggerPosition(loanTokenAddress, 0);\r\n    }\r\n\r\n    function triggerPosition(\r\n        address depositTokenAddress,\r\n        uint256 depositAmount,\r\n        uint256 rebalanceAmount)\r\n        public\r\n    {\r\n        if (depositTokenAddress == address(0)) {\r\n            depositTokenAddress = loanTokenAddress;\r\n        }\r\n\r\n        if (rebalanceAmount != 0 && msg.sender == owner) {\r\n            IBZx(bZxContract).withdrawCollateral(\r\n                loanOrderHash,\r\n                rebalanceAmount\r\n            );\r\n        }\r\n\r\n        _triggerPosition(depositTokenAddress, depositAmount);\r\n    }\r\n\r\n    function initialize(\r\n        address _bZxContract,\r\n        address _bZxVault,\r\n        address _bZxOracle,\r\n        address _wethContract,\r\n        address _loanTokenAddress,\r\n        address _tradeTokenAddress,\r\n        address _lender,\r\n        uint256 _leverageAmount,\r\n        bytes32 _loanOrderHash,\r\n        string memory _name,\r\n        string memory _symbol)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bZxContract = _bZxContract;\r\n        bZxVault = _bZxVault;\r\n        bZxOracle = _bZxOracle;\r\n        wethContract = _wethContract;\r\n        loanTokenAddress = _loanTokenAddress;\r\n        tradeTokenAddress = _tradeTokenAddress;\r\n        loanTokenLender = _lender;\r\n\r\n        loanOrderHash = _loanOrderHash;\r\n        leverageAmount = _leverageAmount;\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n\r\n        initialPrice = 10**21; // starting price of 1,000\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"assetBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositCollateralToLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"burnTokenAddress\",\"type\":\"address\"},{\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"name\":\"minPriceAllowed\",\"type\":\"uint256\"}],\"name\":\"burnToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSplitValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBZxVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketLiquidityForToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"name\":\"maxPriceAllowed\",\"type\":\"uint256\"}],\"name\":\"mintWithToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bZxContract\",\"type\":\"address\"},{\"name\":\"_bZxVault\",\"type\":\"address\"},{\"name\":\"_bZxOracle\",\"type\":\"address\"},{\"name\":\"_wethContract\",\"type\":\"address\"},{\"name\":\"_loanTokenAddress\",\"type\":\"address\"},{\"name\":\"_tradeTokenAddress\",\"type\":\"address\"},{\"name\":\"_lender\",\"type\":\"address\"},{\"name\":\"_leverageAmount\",\"type\":\"uint256\"},{\"name\":\"_loanOrderHash\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"handleSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenLender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"maxPriceAllowed\",\"type\":\"uint256\"}],\"name\":\"mintWithEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"name\":\"minPriceAllowed\",\"type\":\"uint256\"}],\"name\":\"burnToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"donateAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setLeverageAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wrapEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBZxOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leverageAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"name\":\"rebalanceAmount\",\"type\":\"uint256\"}],\"name\":\"triggerPosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLeverage\",\"outputs\":[{\"name\":\"leverage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"triggerPosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketLiquidityForLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBZxContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkpointPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanOrderHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"setLoanTokenLender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketLiquidityForAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PositionTokenLogic_WBTCShort","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://e3d5ec49ed57f5411948d73cf06426697175391cd3a692f0953d09f7b5ff68b9"}]}