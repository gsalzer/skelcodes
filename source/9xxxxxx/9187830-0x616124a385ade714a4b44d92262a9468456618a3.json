{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n  function balanceOf(address owner) public view returns (uint256);\r\n  function transfer(address to, uint256 tokens) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 tokens) public returns(bool);\r\n}\r\n\r\ncontract DeFi {\r\n  using SafeMath for uint256;\r\n\r\n  address public admin = msg.sender;\r\n  address public zeroAddr = address(0);\r\n  address public metContractAddr = 0x077e2A322cCCeD4808c720E09520F85a9A85C257;\r\n  address public metTokenAddr = 0xB786EC13b6Fb2F6406a40B98088A92723EE2F5e0;\r\n\r\n  uint256 public price = 2e16;\r\n  uint256 public delta = 2e15;\r\n  uint256 public baseRate = 4e16;\r\n\r\n  struct Market {\r\n    uint256 marketOpen;\r\n    uint256 totalLoans;\r\n    uint256 totalLiquidity;\r\n  }\r\n\r\n  struct User {\r\n    uint256 debt;\r\n    uint256 balances;\r\n    uint256 checkpoint;\r\n    uint256 synthBalances;\r\n  }\r\n\r\n  mapping(address => Market) public markets;\r\n  mapping(address => uint256) public synthSupply;\r\n  mapping(address => mapping(address => User)) public user;\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    markets[zeroAddr].marketOpen = block.number;\r\n    markets[zeroAddr].totalLiquidity = 1;\r\n    markets[metTokenAddr].marketOpen = block.number;\r\n    markets[metTokenAddr].totalLiquidity = 1;\r\n  }\r\n\r\n  function synthTransfer(address _token, address _from, address _to, uint256 _amount) private {\r\n     user[_from][_token].synthBalances = user[_from][_token].synthBalances.sub(_amount);\r\n     user[_to][_token].synthBalances = user[_to][_token].synthBalances.add(_amount);\r\n  }\r\n\r\n  function synthMint(address _token, address _account, uint256 _amount) private {\r\n     synthSupply[_token] = synthSupply[_token].add(_amount);\r\n     user[_account][_token].synthBalances = user[_account][_token].synthBalances.add(_amount);\r\n  }\r\n\r\n  function synthBurn(address _token, address _account, uint256 _amount) private {\r\n      synthSupply[_token] = synthSupply[_token].sub(_amount);\r\n      user[_account][_token].synthBalances = user[_account][_token].synthBalances.sub(_amount);\r\n  }\r\n\r\n  function transferUnderlyingFromMkt(address _token, address _account, uint256 _amount) private {\r\n      markets[_token].totalLiquidity = markets[_token].totalLiquidity.sub(_amount);\r\n      user[_account][_token].balances = user[_account][_token].balances.add(_amount);\r\n  }\r\n\r\n  function transferUnderlyingToMkt(address _token, address _account, uint256 _amount) private {\r\n      user[_account][_token].balances = user[_account][_token].balances.sub(_amount);\r\n      markets[_token].totalLiquidity = markets[_token].totalLiquidity.add(_amount);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) private {\r\n    require(Token(metTokenAddr).transferFrom(_from,_to,_amount));\r\n  }\r\n\r\n  function transfer(address _to, uint256 _amount) private {\r\n    require(Token(metTokenAddr).transfer(_to,_amount));\r\n  }\r\n\r\n  function transferEth(uint256 _amount) public {\r\n    (bool success, ) = msg.sender.call.value(_amount)(\"\");\r\n    if(!success) {\r\n        revert();\r\n    }\r\n  }\r\n  function depositToken(uint256 _amount) public {\r\n    user[msg.sender][metTokenAddr].balances = user[msg.sender][metTokenAddr].balances.add(_amount);\r\n    transferFrom(msg.sender, address(this), _amount);\r\n  }\r\n\r\n  function withdrawToken(uint256 _amount) public {\r\n    require(user[msg.sender][metTokenAddr].balances >= _amount);\r\n    user[msg.sender][metTokenAddr].balances = user[msg.sender][metTokenAddr].balances.sub(_amount);\r\n    transfer(msg.sender, _amount);\r\n  }\r\n\r\n  function depositEth() public payable {\r\n    user[msg.sender][zeroAddr].balances = user[msg.sender][zeroAddr].balances.add(msg.value);\r\n  }\r\n\r\n  function withdrawEth(uint256 _amount) public {\r\n    require(user[msg.sender][zeroAddr].balances >= _amount);\r\n    user[msg.sender][zeroAddr].balances = user[msg.sender][zeroAddr].balances.sub(_amount);\r\n    transferEth(_amount);\r\n  }\r\n\r\n  function fracExp(uint256 _k, uint256 _q, uint256 _n) private pure returns (uint256) {\r\n    uint256 s = 0;\r\n    uint256 N = 1;\r\n    uint256 B = 1;\r\n    for (uint i = 0; i < 10; ++i){\r\n      s += _k * N / B / (_q**i);\r\n      N  = N * (_n-i);\r\n      B  = B * (i+1);\r\n    }\r\n    return s;\r\n  }\r\n\r\n  function convertToSynth(address _token, uint256 _amount) public view returns(uint256) {\r\n    uint256 exchangeRate_ = getSynthExchangeRate(_token);\r\n    return (_amount.mul(exchangeRate_)).div(1e18);\r\n  }\r\n\r\n  function convertFromSynth(address _token, uint256 _amount) public view returns(uint256) {\r\n    uint256 exchangeRate_ = getSynthExchangeRate(_token);\r\n    return (_amount.mul(1e18)).div(exchangeRate_);\r\n  }\r\n\r\n  function getMarketInterestRate(address _token) public view returns(uint256) {\r\n    uint256 totalLiquidity_ = markets[_token].totalLiquidity;\r\n    uint256 outstandingLoans_ = markets[_token].totalLoans;\r\n    uint256 utilizationRatio_ = (outstandingLoans_.mul(1e18))\r\n                                .div((totalLiquidity_).add(outstandingLoans_));\r\n    return baseRate.add((utilizationRatio_.mul(delta)).div(1e18));\r\n  }\r\n\r\n  function getSynthExchangeRate(address _token) public view returns(uint256) {\r\n    uint256 marketRate_ = getMarketInterestRate(_token);\r\n    uint256 rateAdjusted_ = (uint256(1e18).div(marketRate_.div(2102400)));\r\n    uint256 timeElapsed_ = block.number.sub(markets[_token].marketOpen);\r\n    return fracExp(price, rateAdjusted_, timeElapsed_);\r\n  }\r\n\r\n  function exchangeUnderlyingForSynth(address _token, address _user, uint256 _baseAmount, uint256 _synthAmount) private {\r\n    transferUnderlyingToMkt(_token, _user, _baseAmount);\r\n    synthMint(_token, _user, _synthAmount);\r\n  }\r\n\r\n  function exchangeSynthForUnderlying(address _token, address _user, uint256 _baseAmount, uint256 _synthAmount) private {\r\n    transferUnderlyingFromMkt(_token, _user, _baseAmount);\r\n    synthBurn(_token, _user, _synthAmount);\r\n  }\r\n\r\n  function getSynthToken(address _token, uint256 _amount) public {\r\n    uint256 synthAmount_ = convertToSynth(_token, _amount);\r\n    exchangeUnderlyingForSynth(_token, msg.sender, _amount, synthAmount_);\r\n  }\r\n\r\n  function redeemSynthToken(address _token, uint256 _amount) public {\r\n    uint256 baseAmount_ = convertFromSynth(_token, _amount);\r\n    exchangeSynthForUnderlying(_token, msg.sender, baseAmount_, _amount);\r\n  }\r\n\r\n  function getMetPrice() public view returns(uint256) {\r\n    uint256 ethBalance_ = address(metContractAddr).balance;\r\n    uint256 tokenBalance_ = Token(metTokenAddr).balanceOf(metContractAddr);\r\n    return ((tokenBalance_.mul(1e18)).div(ethBalance_)).div(1e18);\r\n  }\r\n\r\n  function convertEthToMet(uint256 _amount) private view returns(uint256) {\r\n    uint256 price_ = getMetPrice();\r\n    return ((_amount.mul(1e18)).div(price_)).div(1e18);\r\n  }\r\n\r\n  function convertMetToEth(uint256 _amount) private view returns(uint256) {\r\n    uint256 price_ = getMetPrice();\r\n    return _amount.mul(price_);\r\n  }\r\n\r\n  function refreshCheckpoint(address _token) private {\r\n    if(user[msg.sender][_token].checkpoint == 0) {\r\n      user[msg.sender][_token].checkpoint = block.number;\r\n    }\r\n  }\r\n\r\n  function disburseLoans(address _token, address _user, uint256 _amount) private {\r\n    markets[_token].totalLiquidity = markets[_token].totalLiquidity.sub(_amount);\r\n    user[_user][_token].debt = user[_user][_token].debt.add(_amount);\r\n    markets[_token].totalLoans = markets[_token].totalLoans.add(_amount);\r\n  }\r\n\r\n  function retrieveLoans(address _token, address _user, uint256 _amount, uint256 _interest) private {\r\n    user[_user][_token].debt = user[_user][_token].debt.sub(_amount.sub(_interest));\r\n    markets[_token].totalLoans = markets[_token].totalLoans.sub(_amount.sub(_interest));\r\n    markets[_token].totalLiquidity = markets[_token].totalLiquidity.add(_amount);\r\n  }\r\n\r\n  function borrowEth(uint256 _amount) public {\r\n    uint256 synthBalance_ = user[msg.sender][metTokenAddr].synthBalances;\r\n    uint256 balanceInBase_ = convertFromSynth(metTokenAddr, synthBalance_);\r\n    uint256 balanceInEth_ = convertMetToEth(balanceInBase_);\r\n    if(_amount.mul(2) <= balanceInEth_) {\r\n      refreshCheckpoint(zeroAddr);\r\n      disburseLoans(metTokenAddr, msg.sender, _amount);\r\n      transferEth(_amount);\r\n    }\r\n  }\r\n\r\n  function borrowMet(uint256 _amount) public {\r\n    uint256 synthBalance_ = user[msg.sender][zeroAddr].synthBalances;\r\n    uint256 balanceInBase_ = convertFromSynth(zeroAddr, synthBalance_);\r\n    uint256 balanceInMet_ = convertEthToMet(balanceInBase_);\r\n    if(_amount.mul(2) <= balanceInMet_) {\r\n      refreshCheckpoint(metTokenAddr);\r\n      disburseLoans(zeroAddr, msg.sender, _amount);\r\n      transfer(msg.sender, _amount);\r\n    }\r\n  }\r\n\r\n  function getAmountOwed(address _borrower, address _token) public view returns(uint256, uint256) {\r\n    uint256 balance_ = user[_borrower][_token].debt;\r\n    uint256 marketRate_ = getMarketInterestRate(_token);\r\n    uint256 blocksElapsed_ = block.number.sub(user[_borrower][_token].checkpoint);\r\n    uint256 amountWithInterest_ = fracExp(balance_, marketRate_, blocksElapsed_);\r\n    return (amountWithInterest_, amountWithInterest_.sub(balance_));\r\n  }\r\n\r\n  function repayLoan(address _token, uint256 _amount) public {\r\n    (uint256 amountOwed_, uint256 interest_) = getAmountOwed(msg.sender, _token);\r\n    require(amountOwed_ > 0 && _amount <= amountOwed_);\r\n    retrieveLoans(_token, msg.sender, _amount, interest_);\r\n  }\r\n\r\n  function liquidateEth(address _borrower) public {\r\n    uint256 debt_ = user[_borrower][zeroAddr].debt;\r\n    uint256 synthBalance_ = user[_borrower][metTokenAddr].synthBalances;\r\n    uint256 balanceInBase_ = convertFromSynth(metTokenAddr, synthBalance_);\r\n    uint256 balanceInEth_ = convertMetToEth(balanceInBase_);\r\n    require(debt_.mul(2) < balanceInEth_);\r\n    uint256 debtInMet = convertEthToMet(debt_);\r\n    uint256 metDebtInSynth = convertToSynth(metTokenAddr, debtInMet);\r\n    uint256 metFee_ = metDebtInSynth.div(20);\r\n    transferUnderlyingToMkt(metTokenAddr, _borrower, debtInMet);\r\n    synthBurn(metTokenAddr, _borrower, metDebtInSynth.sub(metFee_));\r\n    synthTransfer(metTokenAddr, _borrower, msg.sender, metFee_);\r\n  }\r\n\r\n  function liquidateMet(address _borrower) public {\r\n    uint256 debt_ = user[_borrower][metTokenAddr].debt;\r\n    uint256 synthBalance_ = user[_borrower][zeroAddr].synthBalances;\r\n    uint256 balanceInBase_ = convertFromSynth(zeroAddr, synthBalance_);\r\n    uint256 balanceInMet_ = convertEthToMet(balanceInBase_);\r\n    require(debt_.mul(2) < balanceInMet_);\r\n    uint256 debtInEth = convertEthToMet(debt_);\r\n    uint256 ethDebtInSynth = convertToSynth(zeroAddr, debtInEth);\r\n    uint256 ethFee_ = ethDebtInSynth.div(20);\r\n    transferUnderlyingToMkt(zeroAddr, _borrower, debtInEth);\r\n    synthBurn(zeroAddr, _borrower, ethDebtInSynth.sub(ethFee_));\r\n    synthTransfer(zeroAddr, _borrower, msg.sender, ethFee_);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFromSynth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToSynth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAmountOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMarketInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getSynthExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSynthToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidateEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidateMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metContractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemSynthToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"synthSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"synthBalances\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zeroAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeFi","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://648f4ada781c3616e2a2799ff6d296855aef3bef0f63ccc385e47b32ace6ae49"}]}