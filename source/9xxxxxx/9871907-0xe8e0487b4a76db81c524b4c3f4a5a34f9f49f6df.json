{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Created by Yuri Nikiforov.\r\n * Date: 06.02.2019\r\n * Time: 20:53\r\n **/\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >=a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract DatrixoToken is SafeMath {\r\n    /* Public variables of the token */\r\n    /*Apr 13 2020 00:00:00 ---- new Date(2020, 3, 13).getTime()/1000 = 1586725200*/\r\n\r\n    string constant public standard = \"ERC20\";\r\n    string constant public name = \"DatrixoToken\";\r\n    string constant public symbol = \"DRXT\";\r\n    uint8 constant public decimals = 5;\r\n    uint public totalSupply = 400000000;\r\n\r\n    address public owner;\r\n    /* STO date - DRXT tokens can be transferred */\r\n    uint public startTime;\r\n\r\n    /* This creates an array with all balances */\r\n\r\n    /* This balance structure is\r\n    *  account address -> value of sold Tokens - balanceOf\r\n    *  account address -> time of first purchase - firstPurchaseTime\r\n    *  transfer check firstPurchseTime if 0 - free sale\r\n    */\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => uint) public firstPurchaseTime;\r\n    /*\r\n    * List of shareholders\r\n    */\r\n    address[] public shareholders;\r\n\r\n\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event ShareholderRemoved(address indexed addr, uint value);\r\n\r\n\r\n    /* Initializes contract with the original (DRXT tokens) supply. All supply is assigned to the creator of the contract */\r\n    constructor(address _ownerAddr, uint _startTime) public {\r\n        owner = _ownerAddr;\r\n        startTime = _startTime;\r\n        balanceOf[owner] = totalSupply; // Assigns all the initial tokens to the creator\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not contract owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier afterStartTime() {\r\n        require(now > startTime, \"STO is not started.\");\r\n        _;\r\n    }\r\n\r\n\r\n    /* Only a contract owner can perform the transfer (only the first transfer) */\r\n    function transfer(address _to, uint _value) public onlyOwner afterStartTime returns(bool success){\r\n        require(msg.sender != _to, \"Target address can't be equal source.\");\r\n        require(_to != address(0), \"Target address is 0x0\"); // Prevents the owner to sending to the address 0x0\r\n        require(balanceOf[_to] == 0, \"Target balance not equal 0\"); // Prevents the secondary transfer\r\n        if (!checkShareholderExist(_to)) {\r\n            shareholders.push(_to);\r\n        }\r\n        return _firstTransfer(_to, _value);\r\n    }\r\n\r\n    /* Only a contract owner can perform the transferFrom after 12-month expired for that account _from */\r\n    function transferFrom(address _from, address _to, uint _value) public onlyOwner afterStartTime returns(bool success){\r\n        return _secondTransfer(_from, _to, _value);\r\n    }\r\n\r\n    /* Remove the shareholder from teh list and return DRXT tokens to the original owner account (owner ballance) */\r\n    function removeShareholder(address _addr) public onlyOwner returns(bool success) {\r\n        require(_addr != address(0), \"Target address is 0x0\");\r\n        require(checkShareholderExist(_addr), \"Shareholder is not exist.\");\r\n        for (uint i = 0; i < shareholders.length; i++) {\r\n            if (shareholders[i] == _addr) {\r\n                delete shareholders[i];\r\n            }\r\n        }\r\n        if (firstPurchaseTime[_addr] > 0) {\r\n            delete firstPurchaseTime[_addr];\r\n        }\r\n        bool result = true;\r\n        uint value = 0;\r\n        if (balanceOf[_addr] > 0) {\r\n            value = balanceOf[_addr];\r\n            result = _transferFrom(_addr, owner, value);\r\n        }\r\n        require(result);\r\n        emit ShareholderRemoved(_addr, value);\r\n        return result;\r\n    }\r\n\r\n    /* First the DRXT tokens are sent to the shareholder by the contract owner*/\r\n    function _firstTransfer(address _to, uint _value) internal onlyOwner afterStartTime returns(bool success) {\r\n        require(_to != address(0), \"Target address is 0x0\"); // prevent the owner to spending to address 0x0\r\n        require(balanceOf[_to] == 0, \"Target balance not equal 0\"); // prevent secondary transfer\r\n        require(safeSub(balanceOf[msg.sender], _value) >= 0, \"Value more then available amount\");\r\n        if (!checkShareholderExist(_to)) {\r\n            shareholders.push(_to);\r\n        }\r\n        firstPurchaseTime[_to] = now;\r\n        return _transfer(_to, _value);\r\n    }\r\n\r\n    /* Send some of of the shareholder tokens to others (by the owner)*/\r\n    function _secondTransfer(address _from, address _to, uint _value) onlyOwner afterStartTime internal returns(bool success){\r\n        require(safeSub(balanceOf[_from], _value) >= 0, \"Value more then balance amount\"); // prevent the to spending his tokens more then have on account\r\n        //require(firstPurchaseTime[_from] == 0 || now >=firstPurchaseTime[_from] + 365 days, \"First year is not expired.\");\r\n        // when contract will be burned contract owner will spend all tokens to address 0x0\r\n        if (_to != address(0)) {\r\n            require(firstPurchaseTime[_to] == 0, \"Target balance has first transfer amount.\");\r\n        }\r\n        if (firstPurchaseTime[_from] > 0) {\r\n            delete firstPurchaseTime[_from];\r\n        }\r\n        if (!checkShareholderExist(_to)) {\r\n            shareholders.push(_to);\r\n        }\r\n        firstPurchaseTime[_to] = now;\r\n        return _transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function checkShareholderExist(address _addr) internal view returns(bool) {\r\n        for (uint i = 0; i < shareholders.length; i++) {\r\n            if (shareholders[i] == _addr) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _transfer(address _to, uint _value) internal returns(bool success){\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value); // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _value) internal returns(bool success){\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value); // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value); // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    * The getter for whole shareholders array, not any array member as default getter, which generated compiler\r\n    */\r\n    function getShareholdersArray() public view returns(address[] memory) {\r\n        return shareholders;\r\n    }\r\n\r\n    /**\r\n     * Allows the STO contract to set the start date/time fro trading to the earlier point of time.\r\n     * (In case the soft cap has been reached)\r\n     * @param _newStart the new start date\r\n     **/\r\n    function setStart(uint _newStart) public onlyOwner {\r\n        require(_newStart < startTime, \"New start time must be earlier current start time.\");\r\n        startTime = _newStart;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ShareholderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstPurchaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShareholdersArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeShareholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DatrixoToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001214257a9f639c60daaea801af4c9b8360b6d516000000000000000000000000000000000000000000000000000000005e938150","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8caa62c948d7c5983d689c8c05b97b304b5195f4cba9318588d3c594256a57f5"}]}