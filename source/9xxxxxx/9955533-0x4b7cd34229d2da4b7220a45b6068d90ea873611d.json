{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function give(uint, address) external;\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function dai(address) external view returns (uint);\r\n    function hope(address) external;\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n}\r\n\r\ninterface TokenJoinInterface {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (TokenInterface);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface DaiJoinInterface {\r\n    function vat() external returns (VatLike);\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface PotLike {\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address _user) external view returns (bool);\r\n}\r\n\r\ninterface InstaMapping {\r\n    function gemJoinMapping(bytes32) external view returns (address);\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ETH Address.\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev Return WETH Address.\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97;\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (2, 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaMapping Address.\r\n     */\r\n    function getMappingAddr() internal pure returns (address) {\r\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\r\n    }\r\n}\r\n\r\n\r\ncontract MakerMCDAddresses is Helpers {\r\n    /**\r\n     * @dev Return Maker MCD Manager Address.\r\n    */\r\n    function getMcdManager() internal pure returns (address) {\r\n        return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD DAI_Join Address.\r\n    */\r\n    function getMcdDaiJoin() internal pure returns (address) {\r\n        return 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD Pot Address.\r\n    */\r\n    function getMcdPot() internal pure returns (address) {\r\n        return 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    }\r\n}\r\n\r\n\r\ncontract MakerHelpers is MakerMCDAddresses {\r\n    /**\r\n     * @dev Get Vault's ilk.\r\n    */\r\n    function getVaultData(ManagerLike managerContract, uint vault) internal view returns (bytes32 ilk, address urn) {\r\n        ilk = managerContract.ilks(vault);\r\n        urn = managerContract.urns(vault);\r\n    }\r\n\r\n    /**\r\n     * @dev Gem Join address is ETH type collateral.\r\n    */\r\n    function isEth(address tknAddr) internal pure returns (bool) {\r\n        return tknAddr == getAddressWETH() ? true : false;\r\n    }\r\n}\r\n\r\n\r\ncontract BasicResolver is MakerHelpers {\r\n    event LogWithdraw(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\r\n\r\n\r\n    /**\r\n     * @dev Withdraw ETH/ERC20_Token Collateral.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to withdraw.\r\n    */\r\n    function withraw(\r\n        uint vault,\r\n        uint amt\r\n    ) external payable {\r\n        ManagerLike managerContract = ManagerLike(getMcdManager());\r\n\r\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\r\n\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\r\n\r\n        uint _amt = amt;\r\n        uint _amt18;\r\n        if (_amt == uint(-1)) {\r\n            (_amt18,) = VatLike(managerContract.vat()).urns(ilk, urn);\r\n            _amt = convert18ToDec(tokenJoinContract.dec(), _amt18);\r\n        } else {\r\n            _amt18 = convertTo18(tokenJoinContract.dec(), _amt);\r\n        }\r\n\r\n        managerContract.frob(\r\n            vault,\r\n            -toInt(_amt18),\r\n            0\r\n        );\r\n\r\n        managerContract.flux(\r\n            vault,\r\n            address(this),\r\n            _amt18\r\n        );\r\n\r\n        TokenInterface tokenContract = tokenJoinContract.gem();\r\n\r\n        if (isEth(address(tokenContract))) {\r\n            tokenJoinContract.exit(address(this), _amt);\r\n            tokenContract.withdraw(_amt);\r\n        } else {\r\n            tokenJoinContract.exit(address(this), _amt);\r\n        }\r\n\r\n        emit LogWithdraw(vault, ilk, _amt);\r\n        bytes32 _eventCode = keccak256(\"LogWithdraw(uint256,bytes32,uint256)\");\r\n        bytes memory _eventParam = abi.encode(vault, ilk, _amt);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DsrResolver is BasicResolver {\r\n    event LogWithdrawDai(uint256 tokenAmt);\r\n\r\n    /**\r\n     * @dev Withdraw DAI from DSR.\r\n     * @param amt DAI amount to withdraw.\r\n    */\r\n    function withdrawDai(uint amt) external payable {\r\n        address daiJoin = getMcdDaiJoin();\r\n\r\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(daiJoin);\r\n        VatLike vat = daiJoinContract.vat();\r\n        PotLike potContract = PotLike(getMcdPot());\r\n\r\n        uint chi = potContract.drip();\r\n        uint pie;\r\n        uint _amt;\r\n        if (amt == uint(-1)) {\r\n            pie = potContract.pie(address(this));\r\n            _amt = mul(chi, pie) / RAY;\r\n        } else {\r\n            pie = mul(amt, RAY) / chi;\r\n        }\r\n\r\n        potContract.exit(pie);\r\n\r\n        uint bal = vat.dai(address(this));\r\n        if (vat.can(address(this), address(daiJoin)) == 0) {\r\n            vat.hope(daiJoin);\r\n        }\r\n        daiJoinContract.exit(\r\n            address(this),\r\n            bal >= mul(_amt, RAY) ? _amt : bal / RAY\r\n        );\r\n\r\n        emit LogWithdrawDai(_amt);\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawDai(uint256)\");\r\n        bytes memory _eventParam = abi.encode(_amt);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract StaticConnectMaker is DsrResolver {\r\n    string public constant name = \"Static-MakerDao-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawDai\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"StaticConnectMaker","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://42ff8c814b3e617f4ef4278e31c70bab112af60facc78dec8114821912cc5eec"}]}