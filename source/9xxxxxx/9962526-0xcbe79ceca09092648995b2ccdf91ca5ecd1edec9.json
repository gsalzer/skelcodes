{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Token/Sender.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Sender {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/utils/DateTimeLibrary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.01\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary DateTimeLibrary {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    int256 constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 constant DOW_MON = 1;\r\n    uint256 constant DOW_TUE = 2;\r\n    uint256 constant DOW_WED = 3;\r\n    uint256 constant DOW_THU = 4;\r\n    uint256 constant DOW_FRI = 5;\r\n    uint256 constant DOW_SAT = 6;\r\n    uint256 constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(uint256 year, uint256 month, uint256 day)\r\n        internal\r\n        pure\r\n        returns (uint256 _days)\r\n    {\r\n        require(year >= 1970);\r\n        int256 _year = int256(year);\r\n        int256 _month = int256(month);\r\n        int256 _day = int256(day);\r\n\r\n        int256 __days = _day -\r\n            32075 +\r\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\r\n            4 +\r\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\r\n            12 -\r\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\r\n            4 -\r\n            OFFSET19700101;\r\n\r\n        _days = uint256(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 year, uint256 month, uint256 day)\r\n    {\r\n        int256 __days = int256(_days);\r\n\r\n        int256 L = __days + 68569 + OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint256(_year);\r\n        month = uint256(_month);\r\n        day = uint256(_day);\r\n    }\r\n\r\n    function daysFromDate(uint256 year, uint256 month, uint256 day)\r\n        internal\r\n        pure\r\n        returns (uint256 daysSinceDate)\r\n    {\r\n        daysSinceDate = _daysFromDate(year, month, day);\r\n    }\r\n    function timestampFromDate(uint256 year, uint256 month, uint256 day)\r\n        internal\r\n        pure\r\n        returns (uint256 timestamp)\r\n    {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n    function timestampFromDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            hour *\r\n            SECONDS_PER_HOUR +\r\n            minute *\r\n            SECONDS_PER_MINUTE +\r\n            second;\r\n    }\r\n    function timestampToDate(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 year, uint256 month, uint256 day)\r\n    {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function timestampToDateTime(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        )\r\n    {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint256 secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n        secs = secs % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n        second = secs % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function isValidDate(uint256 year, uint256 month, uint256 day)\r\n        internal\r\n        pure\r\n        returns (bool valid)\r\n    {\r\n        if (year >= 1970 && month > 0 && month <= 12) {\r\n            uint256 daysInMonth = _getDaysInMonth(year, month);\r\n            if (day > 0 && day <= daysInMonth) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isValidDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (bool valid) {\r\n        if (isValidDate(year, month, day)) {\r\n            if (hour < 24 && minute < 60 && second < 60) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isLeapYear(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (bool leapYear)\r\n    {\r\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\r\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n    }\r\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\r\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n    }\r\n    function getDaysInMonth(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        (uint256 year, uint256 month, ) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n    function _getDaysInMonth(uint256 year, uint256 month)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        if (\r\n            month == 1 ||\r\n            month == 3 ||\r\n            month == 5 ||\r\n            month == 7 ||\r\n            month == 8 ||\r\n            month == 10 ||\r\n            month == 12\r\n        ) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 dayOfWeek)\r\n    {\r\n        uint256 _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = ((_days + 3) % 7) + 1;\r\n    }\r\n\r\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\r\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\r\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\r\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\r\n        uint256 secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n    }\r\n    function getMinute(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 minute)\r\n    {\r\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n    }\r\n    function getSecond(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 second)\r\n    {\r\n        second = timestamp % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function addYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year += _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = ((month - 1) % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _seconds;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function subYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year -= _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\r\n        year = yearMonth / 12;\r\n        month = (yearMonth % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _seconds;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _years)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _years = toYear - fromYear;\r\n    }\r\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _months)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\r\n            fromTimestamp / SECONDS_PER_DAY\r\n        );\r\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\r\n            toTimestamp / SECONDS_PER_DAY\r\n        );\r\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n    }\r\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _days)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n    }\r\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _hours)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n    }\r\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _minutes)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n    }\r\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _seconds)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _seconds = toTimestamp - fromTimestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Math.sol\r\n\r\n/// Math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary DSMath {\r\n\r\n    // --- Unsigned Math ----\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    // --- Precise Math ---\r\n\r\n    uint public constant WAD = 10 ** 18;\r\n    uint public constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function ray(uint _wad) internal pure returns (uint) {\r\n        return mul(_wad, uint(10 ** 9));\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PersistentStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract PersistentStorage is Ownable {\r\n    address public tokenSwapManager;\r\n    address public bridge;\r\n\r\n    bool public isPaused;\r\n    bool public isShutdown;\r\n\r\n    struct Accounting {\r\n        uint256 price;\r\n        uint256 cashPositionPerTokenUnit;\r\n        uint256 balancePerTokenUnit;\r\n        uint256 lendingFee;\r\n    }\r\n\r\n    struct Order {\r\n        string orderType;\r\n        uint256 tokensGiven;\r\n        uint256 tokensRecieved;\r\n        uint256 avgBlendedFee;\r\n    }\r\n\r\n    uint256 public lastActivityDay;\r\n    uint256 public minRebalanceAmount;\r\n    uint256 public managementFee;\r\n    uint256 public minimumMintingFee;\r\n    uint256 public minimumTrade;\r\n\r\n    uint8 public balancePrecision;\r\n\r\n    mapping(uint256 => Accounting[]) private accounting;\r\n\r\n    uint256[] public mintingFeeBracket;\r\n    mapping(uint256 => uint256) public mintingFee;\r\n\r\n    Order[] public allOrders;\r\n    mapping(address => Order[]) public orderByUser;\r\n    mapping(address => uint256) public delayedRedemptionsByUser;\r\n\r\n    event AccountingValuesSet(uint256 today);\r\n    event RebalanceValuesSet(uint256 newMinRebalanceAmount);\r\n    event ManagementFeeValuesSet(uint256 newManagementFee);\r\n\r\n    function initialize(\r\n        address ownerAddress,\r\n        uint256 _managementFee,\r\n        uint256 _minRebalanceAmount,\r\n        uint8 _balancePrecision,\r\n        uint256 _lastMintingFee,\r\n        uint256 _minimumMintingFee,\r\n        uint256 _minimumTrade\r\n    ) public initializer {\r\n        initialize(ownerAddress);\r\n        managementFee = _managementFee;\r\n        minRebalanceAmount = _minRebalanceAmount;\r\n        mintingFee[~uint256(0)] = _lastMintingFee;\r\n        balancePrecision = _balancePrecision;\r\n        minimumMintingFee = _minimumMintingFee;\r\n        minimumTrade = _minimumTrade;\r\n    }\r\n\r\n    function setTokenSwapManager(address _tokenSwapManager) public onlyOwner {\r\n        require(_tokenSwapManager != address(0), \"adddress must not be empty\");\r\n        tokenSwapManager = _tokenSwapManager;\r\n    }\r\n\r\n    function setBridge(address _bridge) public onlyOwner {\r\n        require(_bridge != address(0), \"adddress must not be empty\");\r\n        bridge = _bridge;\r\n    }\r\n\r\n    function setIsPaused(bool _isPaused) public onlyOwner {\r\n        isPaused = _isPaused;\r\n    }\r\n\r\n    function shutdown() public onlyOwner {\r\n        isShutdown = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwnerOrTokenSwap() {\r\n        require(\r\n            isOwner() || _msgSender() == tokenSwapManager,\r\n            \"caller is not the owner or token swap manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrBridge() {\r\n        require(\r\n            isOwner() || _msgSender() == bridge,\r\n            \"caller is not the owner or bridge\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setDelayedRedemptionsByUser(\r\n        uint256 amountToRedeem,\r\n        address whitelistedAddress\r\n    ) public onlyOwnerOrTokenSwap {\r\n        delayedRedemptionsByUser[whitelistedAddress] = amountToRedeem;\r\n    }\r\n\r\n    /*\r\n     * Saves order in mapping (address => Order[]) orderByUser\r\n     * overwrite == false, append to Order[]\r\n     * overwrite == true, overwrite element at orderIndex\r\n     */\r\n\r\n    function setOrderByUser(\r\n        address whitelistedAddress,\r\n        string memory orderType,\r\n        uint256 tokensGiven,\r\n        uint256 tokensRecieved,\r\n        uint256 avgBlendedFee,\r\n        uint256 orderIndex,\r\n        bool overwrite\r\n    ) public onlyOwnerOrTokenSwap() {\r\n        Order memory newOrder = Order(\r\n            orderType,\r\n            tokensGiven,\r\n            tokensRecieved,\r\n            avgBlendedFee\r\n        );\r\n\r\n        if (!overwrite) {\r\n            orderByUser[whitelistedAddress].push(newOrder);\r\n            setOrder(\r\n                orderType,\r\n                tokensGiven,\r\n                tokensRecieved,\r\n                avgBlendedFee,\r\n                orderIndex,\r\n                overwrite\r\n            );\r\n        } else {\r\n            orderByUser[whitelistedAddress][orderIndex] = newOrder;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Gets Order[] For User Address\r\n     * Return order at Index in Order[]\r\n     */\r\n\r\n    function getOrderByUser(address whitelistedAddress, uint256 orderIndex)\r\n        public\r\n        view\r\n        returns (\r\n            string memory orderType,\r\n            uint256 tokensGiven,\r\n            uint256 tokensRecieved,\r\n            uint256 avgBlendedFee\r\n        )\r\n    {\r\n\r\n            Order storage orderAtIndex\r\n         = orderByUser[whitelistedAddress][orderIndex];\r\n        return (\r\n            orderAtIndex.orderType,\r\n            orderAtIndex.tokensGiven,\r\n            orderAtIndex.tokensRecieved,\r\n            orderAtIndex.avgBlendedFee\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Save order to allOrders array\r\n     * overwrite == false, append to allOrders array\r\n     * overwrite == true, overwrite element at orderIndex\r\n     */\r\n    function setOrder(\r\n        string memory orderType,\r\n        uint256 tokensGiven,\r\n        uint256 tokensRecieved,\r\n        uint256 avgBlendedFee,\r\n        uint256 orderIndex,\r\n        bool overwrite\r\n    ) public onlyOwnerOrTokenSwap() {\r\n        Order memory newOrder = Order(\r\n            orderType,\r\n            tokensGiven,\r\n            tokensRecieved,\r\n            avgBlendedFee\r\n        );\r\n\r\n        if (!overwrite) {\r\n            allOrders.push(newOrder);\r\n        } else {\r\n            allOrders[orderIndex] = newOrder;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get Order\r\n     */\r\n    function getOrder(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            string memory orderType,\r\n            uint256 tokensGiven,\r\n            uint256 tokensRecieved,\r\n            uint256 avgBlendedFee\r\n        )\r\n    {\r\n        Order storage orderAtIndex = allOrders[index];\r\n        return (\r\n            orderAtIndex.orderType,\r\n            orderAtIndex.tokensGiven,\r\n            orderAtIndex.tokensRecieved,\r\n            orderAtIndex.avgBlendedFee\r\n        );\r\n    }\r\n\r\n    // @dev Get accounting values for a specific day\r\n    // @param date format as 20200123 for 23th of January 2020\r\n    function getAccounting(uint256 date)\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            accounting[date][accounting[date].length - 1].price,\r\n            accounting[date][accounting[date].length - 1]\r\n                .cashPositionPerTokenUnit,\r\n            accounting[date][accounting[date].length - 1].balancePerTokenUnit,\r\n            accounting[date][accounting[date].length - 1].lendingFee\r\n        );\r\n    }\r\n\r\n    // @dev Set accounting values for the day\r\n    function setAccounting(\r\n        uint256 _price,\r\n        uint256 _cashPositionPerTokenUnit,\r\n        uint256 _balancePerTokenUnit,\r\n        uint256 _lendingFee\r\n    ) external onlyOwnerOrTokenSwap() {\r\n        (uint256 year, uint256 month, uint256 day) = DateTimeLibrary\r\n            .timestampToDate(block.timestamp);\r\n        uint256 today = year * 10000 + month * 100 + day;\r\n        accounting[today].push(\r\n            Accounting(\r\n                _price,\r\n                _cashPositionPerTokenUnit,\r\n                _balancePerTokenUnit,\r\n                _lendingFee\r\n            )\r\n        );\r\n        lastActivityDay = today;\r\n        emit AccountingValuesSet(today);\r\n    }\r\n\r\n    // @dev Set accounting values for the day\r\n    function setAccountingForLastActivityDay(\r\n        uint256 _price,\r\n        uint256 _cashPositionPerTokenUnit,\r\n        uint256 _balancePerTokenUnit,\r\n        uint256 _lendingFee\r\n    ) external onlyOwnerOrTokenSwap() {\r\n        accounting[lastActivityDay].push(\r\n            Accounting(\r\n                _price,\r\n                _cashPositionPerTokenUnit,\r\n                _balancePerTokenUnit,\r\n                _lendingFee\r\n            )\r\n        );\r\n        emit AccountingValuesSet(lastActivityDay);\r\n    }\r\n\r\n    // @dev Set last rebalance information\r\n    function setMinRebalanceAmount(uint256 _minRebalanceAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minRebalanceAmount = _minRebalanceAmount;\r\n\r\n        emit RebalanceValuesSet(minRebalanceAmount);\r\n    }\r\n\r\n    // @dev Set last rebalance information\r\n    function setManagementFee(uint256 _managementFee) external onlyOwner {\r\n        managementFee = _managementFee;\r\n        emit ManagementFeeValuesSet(managementFee);\r\n    }\r\n\r\n    // @dev Returns price\r\n    function getPrice() public view returns (uint256 price) {\r\n        return\r\n            accounting[lastActivityDay][accounting[lastActivityDay].length - 1]\r\n                .price;\r\n    }\r\n\r\n    // @dev Returns cash position amount\r\n    function getCashPositionPerTokenUnit()\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return\r\n            accounting[lastActivityDay][accounting[lastActivityDay].length - 1]\r\n                .cashPositionPerTokenUnit;\r\n    }\r\n\r\n    // @dev Returns borrowed crypto amount\r\n    function getBalancePerTokenUnit() public view returns (uint256 amount) {\r\n        return\r\n            accounting[lastActivityDay][accounting[lastActivityDay].length - 1]\r\n                .balancePerTokenUnit;\r\n    }\r\n\r\n    // @dev Returns lending fee\r\n    function getLendingFee() public view returns (uint256 lendingRate) {\r\n        return\r\n            accounting[lastActivityDay][accounting[lastActivityDay].length - 1]\r\n                .lendingFee;\r\n    }\r\n\r\n    // @dev Sets last minting fee\r\n    function setLastMintingFee(uint256 _mintingFee) public onlyOwner {\r\n        mintingFee[~uint256(0)] = _mintingFee;\r\n    }\r\n\r\n    // @dev Adds minting fee\r\n    function addMintingFeeBracket(uint256 _mintingFeeLimit, uint256 _mintingFee)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            mintingFeeBracket.length == 0 ||\r\n                _mintingFeeLimit >\r\n                mintingFeeBracket[mintingFeeBracket.length - 1],\r\n            \"New minting fee bracket needs to be bigger then last one\"\r\n        );\r\n        mintingFeeBracket.push(_mintingFeeLimit);\r\n        mintingFee[_mintingFeeLimit] = _mintingFee;\r\n    }\r\n\r\n    // @dev Deletes last minting fee\r\n    function deleteLastMintingFeeBracket() public onlyOwner {\r\n        delete mintingFee[mintingFeeBracket[mintingFeeBracket.length - 1]];\r\n        mintingFeeBracket.length--;\r\n    }\r\n\r\n    // @dev Changes minting fee\r\n    function changeMintingLimit(\r\n        uint256 _position,\r\n        uint256 _mintingFeeLimit,\r\n        uint256 _mintingFee\r\n    ) public onlyOwner {\r\n        require(\r\n            _mintingFeeLimit > mintingFeeBracket[mintingFeeBracket.length - 1],\r\n            \"New minting fee bracket needs to be bigger then last one\"\r\n        );\r\n        if (_position != 0) {\r\n            require(\r\n                _mintingFeeLimit > mintingFeeBracket[_position - 1],\r\n                \"New minting fee bracket needs to be bigger then last one\"\r\n            );\r\n        }\r\n        if (_position < mintingFeeBracket.length - 1) {\r\n            require(\r\n                _mintingFeeLimit < mintingFeeBracket[_position + 1],\r\n                \"New minting fee bracket needs to be smaller then next one\"\r\n            );\r\n        }\r\n        mintingFeeBracket[_position] = _mintingFeeLimit;\r\n        mintingFee[_mintingFeeLimit] = _mintingFee;\r\n    }\r\n\r\n    function getMintingFee(uint256 cash) public view returns (uint256) {\r\n        // Define Start + End Index\r\n        uint256 startIndex = 0;\r\n        uint256 endIndex = mintingFeeBracket.length - 1;\r\n        uint256 middleIndex = endIndex / 2;\r\n\r\n        if (cash <= mintingFeeBracket[middleIndex]) {\r\n            endIndex = middleIndex;\r\n        } else {\r\n            startIndex = middleIndex + 1;\r\n        }\r\n\r\n        for (uint256 i = startIndex; i <= endIndex; i++) {\r\n            if (cash <= mintingFeeBracket[i]) {\r\n                return mintingFee[mintingFeeBracket[i]];\r\n            }\r\n        }\r\n        return mintingFee[~uint256(0)];\r\n    }\r\n\r\n    // @dev Sets last balance precision\r\n    function setLastPrecision(uint8 _balancePrecision) public onlyOwner {\r\n        balancePrecision = _balancePrecision;\r\n    }\r\n\r\n    // @dev Sets minimum minting fee\r\n    function setMinimumMintingFee(uint256 _minimumMintingFee) public onlyOwner {\r\n        minimumMintingFee = _minimumMintingFee;\r\n    }\r\n\r\n    // @dev Sets minimum trade value\r\n    function setMinimumTrade(uint256 _minimumTrade) public onlyOwner {\r\n        minimumTrade = _minimumTrade;\r\n    }\r\n}\r\n\r\n// File: contracts/Token/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20, Initializable, Ownable {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    PersistentStorage public _persistenStorage;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        address persistenStorage,\r\n        address ownerAddress\r\n    ) public initializer {\r\n        initialize(ownerAddress);\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _persistenStorage = PersistentStorage(persistenStorage);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Token/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Sender, ERC20Detailed {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount)\r\n        internal\r\n    {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/Token/InverseToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract InverseToken is ERC20 {\r\n    function mintTokens(address destinationAddress, uint256 amountToMint)\r\n        public\r\n        onlyOwnerOrTokenSwap()\r\n        returns (bool)\r\n    {\r\n        // Mint Tokens on Successful Creation order\r\n        _mint(destinationAddress, amountToMint);\r\n        return true;\r\n    }\r\n\r\n    function burnTokens(address fromAddress, uint256 amountToBurn)\r\n        public\r\n        onlyOwnerOrTokenSwap()\r\n        returns (bool)\r\n    {\r\n        // Burn Tokens on Successful Redemption Order\r\n        _burn(fromAddress, amountToBurn);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyOwnerOrTokenSwap() {\r\n        require(\r\n            isOwner() || _msgSender() == _persistenStorage.tokenSwapManager(),\r\n            \"caller is not the owner or token swap manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_persistenStorage\",\"outputs\":[{\"internalType\":\"contract PersistentStorage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"persistenStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InverseToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://909c8de0cb6895424e2b1e776cbad30de14d44da46a22ef31d79d8170086709c"}]}