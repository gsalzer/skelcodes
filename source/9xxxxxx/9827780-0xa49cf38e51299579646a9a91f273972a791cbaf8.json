{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.3.0/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: browser/ExampleExchangeThief.sol\r\n\r\ninterface IFlashWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256) external;\r\n    function flashMint(uint256) external;\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IExchange {\r\n    function depositETH() external;\r\n    function depositFWETH(uint256) external;\r\n    function withdrawETH(uint256) external;\r\n    function withdrawFWETH(uint256) external;\r\n    function internalSwapToETH(uint256) external;\r\n    function internalSwapToFWETH(uint256) external;\r\n    function ethBalance() external returns (uint256);\r\n    function fwethBalance() external returns (uint256);\r\n    function fWETH() external returns (address);\r\n}\r\n\r\n// @title ExampleExchangeThief\r\n// @notice An example contract that \"exploits\" the fact that the Exchange contract accepts\r\n// unbacked fWETH during flash-mints in exchange for ETH.\r\n// @dev This is just a boilerplate example to get bug-bounty hunters up and running.\r\n// @dev This contract flash-mints unbacked fWETH and uses it to buy all of the Exchange's ETH.\r\n// But since flash-minting requires burning the same number of fWETH that you minted, the fWETH held by the \r\n// Exchange end's up being fully backed by real ETH. So there is no actual \"theft\" happening here.\r\ncontract ExampleExchangeThief is Ownable {\r\n\r\n    IExchange public exchange = IExchange(0x5d84fC93A6a8161873a315C233Fbd79A88280079); // address of Exchange contract\r\n    IFlashWETH public fWETH = IFlashWETH(exchange.fWETH()); // address of FlashWETH contract\r\n\r\n    // required to receive ETH in case you want to `withdraw` some fWETH for real ETH during `executeOnFlashMint`\r\n    function () external payable {}\r\n\r\n    // call this function to fire off your flash mint\r\n    function beginFlashMint() public payable onlyOwner {\r\n        // We are going to use a flash-mint to \"steal\" all the ETH from the exchange\r\n        // First, rebalance the exchange so that it is holding the maximum amount of ETH:\r\n        exchange.internalSwapToETH(exchange.fwethBalance());\r\n        // Second, we'll flash-mint enough fWETH to \"steal\" all the ETH in the exchange:\r\n        fWETH.flashMint(exchange.ethBalance()); // this triggers the `executeOnFlashMint` function below\r\n    }\r\n\r\n    // this is what executes during your flash mint\r\n    function executeOnFlashMint(uint256 amount) external {\r\n        // when this fires off, this contract holds `amount` new, unbacked fWETH\r\n        require(msg.sender == address(fWETH), \"only FlashWETH can execute\");\r\n        // Third, we'll deposit our unbacked fWETH into the exchange:\r\n        fWETH.approve(address(exchange), amount);\r\n        exchange.depositFWETH(amount);\r\n        // Fourth, we'll withdraw all the ETH from the exchange to this contract\r\n        exchange.withdrawETH(amount);\r\n        // YAY! We \"stole\" all the ETH from the exchange!!! Those suckers accepted unbacked fWETH and gave us all their ETH!\r\n        // However, our transaction will fail unless we burn `amount` fWETH by the end of this transaction.\r\n        // But we don't have any fWETH because we already sent it all to the exchange.\r\n        // That's okay, we can get some more fWETH from the FlashWETH contract by sending it some of our ETH:\r\n        fWETH.deposit.value(amount)();\r\n        // Cool, now this contract holds the amount of fWETH needed to complete the transaction.\r\n        // (Unfortunately, it cost us all of the ETH we \"stole\" from the exchange contract, so we ended up breaking even)\r\n        // (And now all the fWETH that the exchange contract is holding is backed by real ETH. So I guess we really didn't \"steal\" anything.)\r\n    }\r\n\r\n    // ========================\r\n    //  BASIC WALLET FUNCTIONS\r\n    // ========================\r\n\r\n    function withdrawMyETH() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawMyFWETH() public onlyOwner {\r\n        fWETH.transfer(msg.sender, fWETH.balanceOf(address(this)));\r\n    }\r\n\r\n    // =========\r\n    //  GETTERS\r\n    // =========\r\n\r\n    function ethBalance() external view returns (uint256) { return address(this).balance; }\r\n    function fwethBalance() external view returns (uint256) { return fWETH.balanceOf(address(this)); }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginFlashMint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeOnFlashMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fWETH\",\"outputs\":[{\"internalType\":\"contract IFlashWETH\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fwethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyFWETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExampleExchangeThief","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fc4f6ae74e099e90b6152316d1c300e796cec362266253924cda90c891a5d844"}]}