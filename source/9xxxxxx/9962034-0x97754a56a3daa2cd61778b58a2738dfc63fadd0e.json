{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.7.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c/a == b, \"Multiplication Error\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"Cannot divide by 0\");\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"Cannot get negative number\");\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"Cannot add negative numbers\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"Cannot get modulo with 0\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address payable public owner;\r\n\r\n  /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner,\"msg.sender is not owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address payable newOwner) public onlyOwner returns (bool){\r\n    if (newOwner != address(0) && newOwner != owner) {\r\n      owner = newOwner;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint public _totalSupply;\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title WhiteList\r\n * @dev All the addresses whitelisted will not pay the fee for transfer and transferFrom.\r\n */\r\n\r\ncontract WhiteList is Ownable {\r\n  mapping(address => bool) public whitelist;\r\n\r\n  function addToWhitelist (address _address) public onlyOwner returns (bool) {\r\n    whitelist[_address] = true;\r\n    return true;\r\n  }\r\n\r\n  function removeFromWhitelist (address _address) public onlyOwner returns (bool) {\r\n    whitelist[_address] = false;\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is WhiteList, ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) public balances;\r\n\r\n  /**\r\n  * @dev additional variables for use if transaction fees ever became necessary\r\n  */\r\n  uint public basisPointsRate = 0;\r\n  uint public maximumFee = 0;\r\n\r\n  /**\r\n  * @dev Fix for the ERC20 short address attack.\r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(!(msg.data.length < size + 4), \"msg.data length is wrong\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    uint fee = whitelist[msg.sender] ? 0 : (_value.mul(basisPointsRate)).div(10000);\r\n\r\n    if (fee > maximumFee) {\r\n      fee = maximumFee;\r\n    }\r\n\r\n    uint sendAmount = _value.sub(fee);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n\r\n    if (fee > 0) {\r\n      balances[owner] = balances[owner].add(fee);\r\n      emit Transfer(msg.sender, owner, fee);\r\n      return true;\r\n    }\r\n\r\n    emit Transfer(msg.sender, _to, sendAmount);\r\n    return true;\r\n  }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) public allowed;\r\n\r\n  uint public constant MAX_UINT = 2**256 - 1;\r\n\r\n  /**\r\n  * @dev Transfer tokens from one address to another\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _value uint the amount of tokens to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    uint fee = whitelist[msg.sender] ? 0 : (_value.mul(basisPointsRate)).div(10000);\r\n    if (fee > maximumFee) {\r\n      fee = maximumFee;\r\n    }\r\n\r\n    if (_allowance < MAX_UINT) {\r\n      allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    }\r\n\r\n    uint sendAmount = _value.sub(fee);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n    if (fee > 0) {\r\n      balances[owner] = balances[owner].add(fee);\r\n      emit Transfer(_from, owner, fee);\r\n      return true;\r\n    }\r\n    emit Transfer(_from, _to, sendAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  * @param _spender The address which will spend the funds.\r\n  * @param _value The amount of tokens to be spent.\r\n  */\r\n  function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)), \"Canont approve 0 as amount\");\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n  * @param _owner address The address which owns the funds.\r\n  * @param _spender address The address which will spend the funds.\r\n  * @return A uint specifying the amount of tokens still available for the spender.\r\n  */\r\n  function allowance(address _owner, address _spender) public view returns(uint remaining){\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n *\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"paused is true\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"paused is false\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the owner to pause, triggers stopped state\r\n   * @return Operation succeeded.\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns(bool){\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns(bool){\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title BlackList\r\n *\r\n * @dev Base contract which allows the owner to blacklist a stakeholder and destroy its tokens.\r\n */\r\ncontract BlackList is Ownable, BasicToken {\r\n\r\n  mapping (address => bool) public isBlackListed;\r\n\r\n  event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n  event AddedBlackList(address _user);\r\n  event RemovedBlackList(address _user);\r\n\r\n  /**\r\n   * @dev Add address to blacklist.\r\n   * @param _evilUser Address to be blacklisted.\r\n   * @return Operation succeeded.\r\n   */\r\n  function addBlackList (address _evilUser) public onlyOwner returns(bool){\r\n    isBlackListed[_evilUser] = true;\r\n    emit AddedBlackList(_evilUser);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove address from blacklist.\r\n   * @param _clearedUser Address to removed from blacklist.\r\n   * @return Operation succeeded.\r\n   */\r\n  function removeBlackList (address _clearedUser) public onlyOwner returns(bool)\r\n  {\r\n    isBlackListed[_clearedUser] = false;\r\n    emit RemovedBlackList(_clearedUser);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Destroy funds of the blacklisted user.\r\n   * @param _blackListedUser Address of whom to destroy the funds.\r\n   * @return Operation succeeded.\r\n   */\r\n  function destroyBlackFunds (address _blackListedUser) public onlyOwner returns(bool)\r\n  {\r\n    require(isBlackListed[_blackListedUser], \"User is not blacklisted\");\r\n    uint dirtyFunds = balanceOf(_blackListedUser);\r\n    balances[_blackListedUser] = 0;\r\n    _totalSupply -= dirtyFunds;\r\n    emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title UpgradedStandardToken\r\n *\r\n * @dev Interface to submit calls from the current SC to a new one.\r\n */\r\ncontract UpgradedStandardToken is StandardToken{\r\n  /**\r\n   * @dev Methods called by the legacy contract\r\n   * and they must ensure msg.sender to be the contract address.\r\n   */\r\n  function transferByLegacy( address from, address to, uint value) public returns (bool);\r\n  function transferFromByLegacy( address sender, address from, address spender, uint value) public returns (bool);\r\n  function approveByLegacy(address from,address spender,uint value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title BackedToken\r\n *\r\n * @dev ERC20 token backed by some asset periodically audited reserve.\r\n */\r\ncontract BackedToken is Pausable, StandardToken, BlackList {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  address public upgradedAddress;\r\n  bool public deprecated;\r\n\r\n  // Called when new token are issued\r\n  event Issue(uint amount);\r\n  // Called when tokens are redeemed\r\n  event Redeem(uint amount);\r\n  // Called when contract is deprecated\r\n  event Deprecate(address newAddress);\r\n  // Called if contract ever adds fees\r\n  event Params(uint feeBasisPoints, uint maxFee);\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   * @param _initialSupply Initial total supply.\r\n   * @param _name Token name.\r\n   * @param _symbol Token symbol.\r\n   * @param _decimals Token decimals.\r\n   */\r\n  constructor ( uint _initialSupply, string memory _name, string memory _symbol, uint _decimals) public{\r\n    _totalSupply = _initialSupply;\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    balances[owner] = _initialSupply;\r\n    deprecated = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Revert whatever no named function is called.\r\n   */\r\n  function() external payable {\r\n    revert(\"No specific function has been called\");\r\n  }\r\n\r\n  /**\r\n   * @dev ERC20 overwritten functions.\r\n   */\r\n\r\n  function transfer(address _to, uint _value) public whenNotPaused returns(bool){\r\n    require(!isBlackListed[msg.sender], \"Transaction recipient is blacklisted\");\r\n    if (deprecated) {\r\n      return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\r\n    } else {\r\n      return super.transfer(_to, _value);\r\n    }\r\n  }\r\n\r\n  function transferFrom( address _from, address _to, uint _value) public whenNotPaused returns(bool){\r\n    require(!isBlackListed[_from], \"Tokens owner is blacklisted\");\r\n    if (deprecated) {\r\n      return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\r\n    } else {\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  function balanceOf(address who) public view returns (uint) {\r\n    if (deprecated) {\r\n      return UpgradedStandardToken(upgradedAddress).balanceOf(who);\r\n    } else {\r\n      return super.balanceOf(who);\r\n    }\r\n  }\r\n\r\n  function approve( address _spender, uint _value) public onlyPayloadSize(2 * 32) returns(bool){\r\n    if (deprecated) {\r\n      return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\r\n    } else {\r\n      return super.approve(_spender, _value);\r\n    }\r\n  }\r\n\r\n  function allowance( address _owner, address _spender) public view returns(uint remaining){\r\n    if (deprecated) {\r\n      return StandardToken(upgradedAddress).allowance(_owner, _spender);\r\n    } else {\r\n      return super.allowance(_owner, _spender);\r\n    }\r\n  }\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    if (deprecated) {\r\n      return StandardToken(upgradedAddress).totalSupply();\r\n    } else {\r\n      return _totalSupply;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Issue tokens. These tokens are added to the Owner address and to the _totalSupply.\r\n   * @param amount Amount of the token to be issued to the owner balance adding it to the _totalSupply.\r\n   * @return Operation succeeded.\r\n   */\r\n  function issue(uint amount) public onlyOwner returns(bool){\r\n    require(_totalSupply + amount > _totalSupply, \"Wrong amount to be issued referring to _totalSupply\");\r\n    require(balances[owner] + amount > balances[owner], \"Wrong amount to be issued referring to owner balance\");\r\n\r\n    balances[owner] += amount;\r\n    _totalSupply += amount;\r\n    emit Issue(amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Redeem tokens. These tokens are withdrawn from the Owner address.\r\n   * The balance must be enough to cover the redeem or the call will fail.\r\n   * @param amount Amount of the token to be subtracted from the _totalSupply and the Owner balance.\r\n   * @return Operation succeeded.\r\n   */\r\n  function redeem(uint amount) public onlyOwner returns (bool){\r\n    require(_totalSupply >= amount, \"Wrong amount to be redeemed referring to _totalSupply\");\r\n    require(balances[owner] >= amount, \"Wrong amount to be redeemed referring to owner balance\");\r\n    _totalSupply -= amount;\r\n    balances[owner] -= amount;\r\n    emit Redeem(amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the current SC as deprecated.\r\n   * @param _upgradedAddress The new SC address to be pointed from this SC.\r\n   * @return Operation succeeded.\r\n   */\r\n  function deprecate(address _upgradedAddress) public onlyOwner returns (bool){\r\n    deprecated = true;\r\n    upgradedAddress = _upgradedAddress;\r\n    emit Deprecate(_upgradedAddress);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set fee params. The params has an hardcoded limit.\r\n   * @param newBasisPoints The maker order object.\r\n   * @param newMaxFee The amount of tokens going to the taker.\r\n   * @return Operation succeeded.\r\n   */\r\n  function setParams(uint newBasisPoints, uint newMaxFee)  public onlyOwner  returns (bool){\r\n    // Ensure transparency by hardcoding limit beyond which fees can never be added\r\n    require(newBasisPoints < 20, \"newBasisPoints amount bigger than hardcoded limit\");\r\n    require(newMaxFee < 50,\"newMaxFee amount bigger than hardcoded limit\");\r\n    basisPointsRate = newBasisPoints;\r\n    maximumFee = newMaxFee.mul(10**decimals);\r\n    emit Params(basisPointsRate, maximumFee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Selfdestruct the contract. Callable only from the owner.\r\n   */\r\n  function kill() public onlyOwner{\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BackedToken","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000b4469616d6f6e644261636b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344424b0000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://12f752a32364f152dbcd10de51d1f12b6d91be3e72afa54ecd08841713341347"}]}