{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgValue() internal view returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev Store the all information about  users and orders\r\n */\r\ncontract EternalStorage is Ownable {\r\n    // Count of users who is or was active\r\n    uint256 internal _usersCount;\r\n\r\n    // Count of deposits\r\n    uint256 internal _depositsCount;\r\n\r\n    // Count of swaps\r\n    uint256 internal _swapsCount;\r\n\r\n    // The id for ETH asset is 0x0 address\r\n    // the rest assets should have their token contract address\r\n    address internal _ethAssetIdentificator = address(0);\r\n\r\n    // Order details which is available by JAVA long number\r\n    struct OrderDetails {\r\n        // does the order has been deposited\r\n        bool created;\r\n        // the 0x0 for Ethereum and ERC contract address for tokens\r\n        address asset;\r\n        // tokens/eth amount\r\n        uint256 amount;\r\n        // the status (deposited/withdrawn)\r\n        bool withdrawn;\r\n        // creation timestamp\r\n        uint256 initTimestamp;\r\n    }\r\n\r\n    // Each user has his own state and details\r\n    struct User {\r\n        // user exist validation bool\r\n        bool exist;\r\n        // contract order index\r\n        uint256 index;\r\n        // contract index (0, 1, 2 ...) => exchange order number (JAVA long number)\r\n        mapping(uint256 => uint256) orderIdByIndex;\r\n        // JAVA long number => order details\r\n        mapping(uint256 => OrderDetails) orders;\r\n    }\r\n\r\n    // the body of each swap\r\n    struct Swap {\r\n        uint256 initTimestamp;\r\n        uint256 refundTimestamp;\r\n        bytes32 secretHash;\r\n        bytes32 secret;\r\n        address initiator;\r\n        address recipient;\r\n        address asset;\r\n        uint256 amount;\r\n        uint256 orderId;\r\n        State state;\r\n    }\r\n\r\n    // struct of swap Initiator\r\n    struct Initiator {\r\n        // contract order index\r\n        uint256 index;\r\n        // length of filled swaps\r\n        uint256 filledSwaps;\r\n        // index (0, 1, 2 ...) => swap hash\r\n        mapping(uint256 => bytes32) swaps;\r\n    }\r\n\r\n    // min/max life limits for swap order\r\n    // can be changed only by the contract owner\r\n    struct SwapTimeLimits {\r\n        uint256 min;\r\n        uint256 max;\r\n    }\r\n\r\n    // ETH wallet => Assets => value\r\n    mapping(address => User) internal _users;\r\n\r\n    // Id => Address of user\r\n    mapping(uint256 => address) internal _usersById;\r\n\r\n    // Id => Swap secret hash\r\n    mapping(uint256 => bytes32) internal _swapsById;\r\n\r\n    // Id => Order id\r\n    mapping(uint256 => uint256) internal _depositsById;\r\n\r\n    // mapping of swaps based on secret hash and swap info\r\n    mapping(bytes32 => Swap) internal _swaps;\r\n\r\n    // the swaps data by initiator address\r\n    mapping(address => Initiator) internal _initiators;\r\n\r\n    // swaps' state\r\n    enum State { Empty, Filled, Redeemed, Refunded }\r\n\r\n    // users can swap ETH and ERC tokens\r\n    enum SwapType { ETH, Token }\r\n\r\n    // By default, the contract has limits for swap orders lifetime\r\n    // The swap order can be active from 10 minutes until 6 months\r\n    SwapTimeLimits internal _swapTimeLimits = SwapTimeLimits(10 minutes, 180 days);\r\n\r\n    // -----------------------------------------\r\n    // ADMIN METHODS\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev The owner can change time limits for swap lifetime\r\n     *  Amounts should be written in MINUTES\r\n     */\r\n    function changeSwapLifetimeLimits(\r\n        uint256 newMin,\r\n        uint256 newMax\r\n    ) external onlyOwner {\r\n        require(newMin != 0, \"changeSwapLifetimeLimits: newMin and newMax should be bigger then 0\");\r\n        require(newMax >= newMin, \"changeSwapLifetimeLimits: the newMax should be bigger then newMax\");\r\n\r\n        _swapTimeLimits = SwapTimeLimits(newMin * 1 minutes, newMax * 1 minutes);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy is EternalStorage {\r\n\t/**\r\n\t * @dev Fallback function.\r\n\t * Implemented entirely in `_fallback`.\r\n\t */\r\n\tfunction () payable external {\r\n\t\t_fallback();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev fallback implementation.\r\n\t * Extracted to enable manual triggering.\r\n\t */\r\n\tfunction _fallback() internal {\r\n\t\t_willFallback();\r\n\t\t_delegate(_implementation());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function that is run as the first thing in the fallback function.\r\n\t * Can be redefined in derived contracts to add functionality.\r\n\t * Redefinitions must call super._willFallback().\r\n\t */\r\n\tfunction _willFallback() internal {}\r\n\r\n\t/**\r\n\t * @dev Delegates execution to an implementation contract.\r\n\t * This is a low level function that doesn't return to its internal call site.\r\n\t * It will return to the external caller whatever the implementation returns.\r\n\t * @param implementation Address to delegate.\r\n\t */\r\n\tfunction _delegate(address implementation) internal {\r\n\t\tassembly {\r\n\t\t\t// Copy msg.data. We take full control of memory in this inline assembly\r\n\t\t\t// block because it will not return to Solidity code. We overwrite the\r\n\t\t\t// Solidity scratch pad at memory position 0.\r\n\t\t\tcalldatacopy(0, 0, calldatasize)\r\n\r\n\t\t\t// Call the implementation.\r\n\t\t\t// out and outsize are 0 because we don't know the size yet.\r\n\t\t\tlet result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n\t\t\t// Copy the returned data.\r\n\t\t\treturndatacopy(0, 0, returndatasize)\r\n\r\n\t\t\tswitch result\r\n\t\t\t// delegatecall returns 0 on error.\r\n\t\t\tcase 0 { revert(0, returndatasize) }\r\n\t\t\tdefault { return(0, returndatasize) }\r\n\t\t}\r\n  \t}\r\n\r\n\t/**\r\n\t * @return The Address of the implementation.\r\n\t */\r\n\tfunction _implementation() internal view returns (address);\r\n}\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n\tusing Address for address;\r\n\r\n\t/**\r\n\t * @dev The version of current(active) logic contract\r\n\t */\r\n    string internal _version;\r\n\r\n\t/**\r\n\t * @dev Storage slot with the address of the current implementation.\r\n\t * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n\t * validated in the constructor.\r\n\t */\r\n\tbytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n\t/**\r\n\t * @dev Emitted when the implementation is upgraded.\r\n\t * @param implementation Address of the new implementation.\r\n\t */\r\n\tevent Upgraded(address indexed implementation);\r\n\r\n\t/**\r\n\t * @dev Returns the current implementation.\r\n\t * @return Address of the current implementation\r\n\t */\r\n\tfunction _implementation() internal view returns (address impl) {\r\n\t\tbytes32 slot = IMPLEMENTATION_SLOT;\r\n\t\tassembly {\r\n\t\t    impl := sload(slot)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Upgrades the proxy to a new implementation.\r\n\t * @param newImplementation Address of the new implementation.\r\n\t * @param newVersion of proxied contract.\r\n\t */\r\n\tfunction _upgradeTo(address newImplementation, string memory newVersion) internal {\r\n\t\t_setImplementation(newImplementation, newVersion);\r\n\r\n\t\temit Upgraded(newImplementation);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the implementation address of the proxy.\r\n\t * @param newImplementation Address of the new implementation.\r\n\t * @param newVersion of proxied contract.\r\n\t */\r\n\tfunction _setImplementation(address newImplementation, string memory newVersion) internal {\r\n\t\trequire(newImplementation.isContract(), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n \t\t_version = newVersion;\r\n\r\n\t\tbytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n\t\tassembly {\r\n\t\t    sstore(slot, newImplementation)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n\t/**\r\n\t * @dev Contract constructor.\r\n\t * @param _logic Address of the initial implementation.\r\n\t */\r\n\tconstructor(address _logic) public payable {\r\n\t\tassert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\t\t_setImplementation(_logic, '1.0.0');\r\n\t}\r\n}\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n\t/**\r\n\t * @dev Emitted when the administration has been transferred.\r\n\t * @param previousAdmin Address of the previous admin.\r\n\t * @param newAdmin Address of the new admin.\r\n\t */\r\n\tevent AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n\t/**\r\n\t * @dev Storage slot with the admin of the contract.\r\n\t * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n\t * validated in the constructor.\r\n\t */\r\n  \tbytes32 internal constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  \t/**\r\n\t * @dev Modifier to check whether the `msg.sender` is the admin.\r\n\t * If it is, it will run the function. Otherwise, it will delegate the call\r\n\t * to the implementation.\r\n\t */\r\n\tmodifier ifAdmin() {\r\n\t\tif (msg.sender == _admin()) {\r\n\t\t    _;\r\n\t\t} else {\r\n\t\t    _fallback();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return The address of the proxy admin.\r\n\t */\r\n\tfunction admin() external view returns (address) {\r\n\t\treturn _admin();\r\n\t}\r\n\r\n\t/**\r\n\t * @return The version of logic contract\r\n\t */\r\n\tfunction version() external view returns (string memory) {\r\n\t\treturn _version;\r\n\t}\r\n\r\n\t/**\r\n\t * @return The address of the implementation.\r\n\t */\r\n\tfunction implementation() external view returns (address) {\r\n\t\treturn _implementation();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Changes the admin of the proxy.\r\n\t * Only the current admin can call this function.\r\n\t * @param newAdmin Address to transfer proxy administration to.\r\n\t */\r\n\tfunction changeAdmin(address newAdmin) external ifAdmin {\r\n\t\trequire(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n\t\temit AdminChanged(_admin(), newAdmin);\r\n\t\t_setAdmin(newAdmin);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Upgrade the backing implementation of the proxy.\r\n\t * Only the admin can call this function.\r\n\t * @param newImplementation Address of the new implementation.\r\n\t * @param newVersion of proxied contract.\r\n\t */\r\n\tfunction upgradeTo(address newImplementation, string calldata newVersion) external ifAdmin {\r\n\t\t_upgradeTo(newImplementation, newVersion);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Upgrade the backing implementation of the proxy and call a function\r\n\t * on the new implementation.\r\n\t * This is useful to initialize the proxied contract.\r\n\t * @param newImplementation Address of the new implementation.\r\n\t * @param newVersion of proxied contract.\r\n\t * @param data Data to send as msg.data in the low level call.\r\n\t * It should include the signature and the parameters of the function to be called, as described in\r\n\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n\t */\r\n\tfunction upgradeToAndCall(address newImplementation, string calldata newVersion, bytes calldata data) payable external ifAdmin {\r\n\t\t_upgradeTo(newImplementation, newVersion);\r\n\t\t(bool success,) = newImplementation.delegatecall(data);\r\n\t\trequire(success);\r\n\t}\r\n\r\n\t/**\r\n\t * @return The admin slot.\r\n\t */\r\n\tfunction _admin() internal view returns (address adm) {\r\n\t\tbytes32 slot = ADMIN_SLOT;\r\n\t\tassembly {\r\n    \t\tadm := sload(slot)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the address of the proxy admin.\r\n\t * @param newAdmin Address of the new proxy admin.\r\n\t */\r\n\tfunction _setAdmin(address newAdmin) internal {\r\n\t\tbytes32 slot = ADMIN_SLOT;\r\n\r\n\t\tassembly {\r\n\t\t\tsstore(slot, newAdmin)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Only fall back when the sender is not the admin.\r\n\t */\r\n\tfunction _willFallback() internal {\r\n\t\trequire(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n\t\tsuper._willFallback();\r\n\t}\r\n}\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for\r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n\t/**\r\n\t * Contract constructor.\r\n\t * @param _logic address of the initial implementation.\r\n\t * @param _admin Address of the proxy administrator.\r\n\t */\r\n\tconstructor(address _logic, address _admin) UpgradeabilityProxy(_logic) public payable {\r\n\t\tassert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n\t\t_setAdmin(_admin);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title AssetsValue\r\n * @dev The contract which hold all tokens and ETH as a assets\r\n * Also should be responsible for the balance increasing/decreasing and validation\r\n */\r\ncontract AssetsValue is EternalStorage {\r\n    // using safe math calculation\r\n    using SafeMath for uint256;\r\n\r\n    // for being secure during transactions between users and contract gonna use SafeERC20 lib\r\n    using SafeERC20 for IERC20;\r\n\r\n    modifier orderIdNotExist(\r\n        uint256 orderId,\r\n        address user\r\n    ) {\r\n        require(_getOrderDetails(orderId, user).created == false, \"orderIdNotExist: user already deposit this orderId\");\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event AssetDeposited(uint256 orderId, address indexed user, address indexed asset, uint256 amount);\r\n    event AssetWithdrawal(uint256 orderId, address indexed user, address indexed asset, uint256 amount);\r\n\r\n    // -----------------------------------------\r\n    // FALLBACK\r\n    // -----------------------------------------\r\n\r\n    function () external payable {\r\n        // reverts all fallback & payable transactions\r\n        revert(\"Fallback methods should be reverted\");\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // EXTERNAL\r\n    // -----------------------------------------\r\n\r\n    function deposit(\r\n        uint256 orderId\r\n    ) public orderIdNotExist(orderId, _msgSender()) payable {\r\n        require(_msgValue() != 0, \"deposit: user needs to transfer ETH for calling this method\");\r\n\r\n        _deposit(orderId, _msgSender(), _ethAssetIdentificator, _msgValue());\r\n    }\r\n\r\n    function deposit(\r\n        uint256 orderId,\r\n        uint256 amount,\r\n        address token\r\n    ) public orderIdNotExist(orderId, _msgSender()) {\r\n        require(token != address(0), \"deposit: invalid token address\");\r\n        require(amount != 0, \"deposit: user needs to fill transferable tokens amount for calling this method\");\r\n\r\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount);\r\n        _deposit(orderId, _msgSender(), token, amount);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 orderId\r\n    ) external {\r\n        // validation of the user existion\r\n        require(_doesUserExist(_msgSender()) == true, \"withdraw: the user is not active\");\r\n\r\n        _withdraw(orderId);\r\n    }\r\n\r\n\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    function doesUserExist(\r\n        address user\r\n    ) external view returns (bool) {\r\n        return _doesUserExist(user);\r\n    }\r\n\r\n    function getUserActiveDeposits(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 howMany\r\n    ) public view returns (\r\n        uint256[] memory orderIds,\r\n        uint256[] memory amounts,\r\n        uint256[] memory initTimestamps,\r\n        uint256 newCursor\r\n    ) {\r\n        // amount of deposits which user has been done\r\n        uint256 depositsLength = _users[user].index;\r\n        uint256 activeOrdersLength = 0;\r\n\r\n        // calculate lenght of necesseary array\r\n        for (uint256 i = 0; i < depositsLength; i++){\r\n            uint256 orderId = _users[user].orderIdByIndex[i];\r\n            if (_users[user].orders[orderId].withdrawn == false) {\r\n                activeOrdersLength++;\r\n            }\r\n        }\r\n\r\n        uint256 length = howMany;\r\n        if (length > activeOrdersLength - cursor) {\r\n            length = activeOrdersLength - cursor;\r\n        }\r\n\r\n        // create new arrays with necesseary array lengths\r\n        orderIds = new uint256[](length);\r\n        amounts = new uint256[](length);\r\n        initTimestamps = new uint256[](length);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < depositsLength; i++){\r\n            if (j == length) {\r\n                break;\r\n            } else {\r\n                uint256 orderId = _users[user].orderIdByIndex[cursor + i];\r\n                if (_users[user].orders[orderId].withdrawn == false) {\r\n                    orderIds[j] = orderId;\r\n                    amounts[j] = _users[user].orders[orderId].amount;\r\n                    initTimestamps[j] = _users[user].orders[orderId].initTimestamp;\r\n\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            orderIds,\r\n            amounts,\r\n            initTimestamps,\r\n            cursor + length\r\n        );\r\n    }\r\n\r\n    function getUserFilledDeposits(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 howMany\r\n    ) external view returns (\r\n        uint256[] memory orderIds,\r\n        uint256[] memory amounts,\r\n        uint256[] memory initTimestamps,\r\n        uint256 newCursor\r\n    ) {\r\n        // amount of deposits which user has been done\r\n        uint256 depositsLength = _users[user].index;\r\n\r\n        uint256 length = howMany;\r\n        if (length > depositsLength - cursor) {\r\n            length = depositsLength - cursor;\r\n        }\r\n\r\n        // init empty arrays which should been returned\r\n        orderIds = new uint256[](length);\r\n        amounts = new uint256[](length);\r\n        initTimestamps = new uint256[](length);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < length; i++){\r\n            uint256 orderId = _users[user].orderIdByIndex[cursor + i];\r\n            orderIds[j] = orderId;\r\n            amounts[j] = _users[user].orders[orderId].amount;\r\n            initTimestamps[j] = _users[user].orders[orderId].initTimestamp;\r\n\r\n            j++;\r\n        }\r\n\r\n        return (\r\n            orderIds,\r\n            amounts,\r\n            initTimestamps,\r\n            cursor + length\r\n        );\r\n    }\r\n\r\n    function getUserDepositIndex(\r\n        address user\r\n    ) external view returns (\r\n        uint256\r\n    ) {\r\n        return _users[user].index;\r\n    }\r\n\r\n    function getOrderDetails(\r\n        uint256 orderId,\r\n        address user\r\n    ) external view returns (\r\n        bool created,\r\n        address asset,\r\n        uint256 amount,\r\n        bool withdrawn,\r\n        uint256 initTimestamp\r\n    ) {\r\n        OrderDetails memory order = _getOrderDetails(orderId, user);\r\n        return (\r\n            order.created,\r\n            order.asset,\r\n            order.amount,\r\n            order.withdrawn,\r\n            order.initTimestamp\r\n        );\r\n    }\r\n\r\n    function getUserById(\r\n        uint256 userId\r\n    ) external view returns (\r\n        address user\r\n    ) {\r\n        return _usersById[userId];\r\n    }\r\n\r\n    function getUsersList(\r\n        uint256 cursor,\r\n        uint256 howMany\r\n    ) external view returns (\r\n        address[] memory users,\r\n        uint256 newCursor\r\n    ) {\r\n        uint256 length = howMany;\r\n        if (length > _usersCount - cursor) {\r\n            length = _usersCount - cursor;\r\n        }\r\n\r\n        users = new address[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            users[i] = _usersById[cursor + i];\r\n        }\r\n\r\n        return (users, cursor + length);\r\n    }\r\n\r\n    function getUsersCount() external view returns (uint256 count) {\r\n        return _usersCount;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // INTERNAL\r\n    // -----------------------------------------\r\n\r\n    function _deposit(\r\n        uint256 orderId,\r\n        address sender,\r\n        address asset,\r\n        uint256 amount\r\n    ) internal {\r\n        _activateIfUserIsNew(sender);\r\n        _depositOrderBalance(orderId, sender, asset, amount);\r\n\r\n        // Increase user deposits count\r\n        _users[sender].index += 1;\r\n\r\n        // Update deposits mapping and count\r\n        _depositsById[_depositsCount] = orderId;\r\n        _depositsCount++;\r\n\r\n        emit AssetDeposited(orderId, sender, asset, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        uint256 orderId\r\n    ) internal {\r\n        // storing the order information (asset and amount)\r\n        OrderDetails memory order = _getOrderDetails(orderId, _msgSender());\r\n        address asset = order.asset;\r\n        uint256 amount = order.amount;\r\n\r\n        // validations before withdrawal\r\n        require(amount != 0, \"withdraw: order has no positive value\");\r\n        require(order.withdrawn == false, \"withdraw: this order Id has been already withdrawn or waiting for the swap\");\r\n\r\n        _withdrawOrderBalance(orderId, _msgSender());\r\n\r\n        if (asset == _ethAssetIdentificator) {\r\n            _msgSender().transfer(amount);\r\n        } else {\r\n            IERC20(asset).safeTransfer(_msgSender(), amount);\r\n        }\r\n\r\n        emit AssetWithdrawal(orderId, _msgSender(), asset, amount);\r\n    }\r\n\r\n    function _activateIfUserIsNew(\r\n        address user\r\n    ) internal returns (bool) {\r\n        if (_doesUserExist(user) == false) {\r\n            _users[user].exist = true;\r\n            _usersById[_usersCount] = user;\r\n            _usersCount++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _depositOrderBalance(\r\n        uint256 orderId,\r\n        address user,\r\n        address asset,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _users[user].orderIdByIndex[_users[user].index] = orderId;\r\n        _users[user].orders[orderId] = OrderDetails(true, asset, amount, false, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function _reopenExistingOrder(\r\n        uint256 orderId,\r\n        address user\r\n    ) internal returns (bool) {\r\n        _users[user].orders[orderId].withdrawn = false;\r\n        _users[user].orders[orderId].initTimestamp = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    function _withdrawOrderBalance(\r\n        uint256 orderId,\r\n        address user\r\n    ) internal returns (bool) {\r\n        _users[user].orders[orderId].withdrawn = true;\r\n        return true;\r\n    }\r\n\r\n    function _doesUserExist(\r\n        address user\r\n    ) internal view returns (bool) {\r\n        return _users[user].exist;\r\n    }\r\n\r\n    function _getOrderDetails(\r\n        uint256 orderId,\r\n        address user\r\n    ) internal view returns (OrderDetails memory order) {\r\n        return _users[user].orders[orderId];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title CrossBlockchainSwap\r\n * @dev Fully autonomous cross-blockchain swapping smart contract\r\n */\r\ncontract CrossBlockchainSwap is AssetsValue {\r\n    // -----------------------------------------\r\n    // EVENTS\r\n    // -----------------------------------------\r\n\r\n    event Initiated(\r\n        uint256 indexed orderId,\r\n        bytes32 indexed secretHash,\r\n        address indexed initiator,\r\n        address recipient,\r\n        uint256 initTimestamp,\r\n        uint256 refundTimestamp,\r\n        address asset,\r\n        uint256 amount\r\n    );\r\n\r\n    event Redeemed(\r\n        bytes32 secretHash,\r\n        uint256 redeemTimestamp,\r\n        bytes32 secret,\r\n        address indexed redeemer\r\n    );\r\n\r\n    event Refunded(\r\n        uint256 orderId,\r\n        bytes32 secretHash,\r\n        uint256 refundTime,\r\n        address indexed refunder\r\n    );\r\n\r\n    // -----------------------------------------\r\n    // MODIFIERS\r\n    // -----------------------------------------\r\n\r\n    modifier swapIsNotInitiated(bytes32 secretHash) {\r\n        require(_swaps[secretHash].state == State.Empty, \"swapIsNotInitiated: this secret hash was already used, please use another one\");\r\n        _;\r\n    }\r\n\r\n    modifier swapIsRedeemable(bytes32 secret) {\r\n        bool isRedeemable = _isRedeemable(secret);\r\n        require(isRedeemable, \"swapIsRedeemable: the redeem is not available\");\r\n        _;\r\n    }\r\n\r\n    modifier swapIsRefundable(bytes32 secretHash, address refunder) {\r\n        bool isRefundable = _isRefundable(secretHash, refunder);\r\n        require(isRefundable, \"swapIsRefundable: refund is not available\");\r\n        _;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // EXTERNAL\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev If user wants to swap ERC token, before initiating the swap between that\r\n     *  initiator need to call approve method from his tokens' smart contract,\r\n     *  approving to it to spend the value1 amount of tokens\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @param refundTimestamp the period when the swap should be active\r\n     *  it should be written in MINUTES\r\n     */\r\n    function initiate(\r\n        uint256 orderId,\r\n        bytes32 secretHash,\r\n        address recipient,\r\n        uint256 refundTimestamp\r\n    ) public swapIsNotInitiated(secretHash) {\r\n        require(recipient != address(0), \"initiate: invalid recipient address\");\r\n\r\n        // validation that refund Timestamp more than exchange min limit and less then max limit\r\n        _validateRefundTimestamp(refundTimestamp * 1 minutes);\r\n\r\n        OrderDetails memory order = _getOrderDetails(orderId, _msgSender());\r\n\r\n        // validation of the deposited order existing and non-zero amount\r\n        require(order.created == true, \"initiate: this order Id has not been created and deposited yet\");\r\n        require(order.withdrawn == false, \"initiate: this order deposit has been withdrawn\");\r\n        require(order.amount != 0, \"initiate: this order Id has been withdrawn, finished or waiting for the redeem\");\r\n\r\n        // withdrawing the balance of this orderId from sender deposites\r\n        _withdrawOrderBalance(orderId, _msgSender());\r\n\r\n        // swap asset details\r\n        _swaps[secretHash].asset = order.asset;\r\n        _swaps[secretHash].amount = order.amount;\r\n\r\n        // swap status\r\n        _swaps[secretHash].state = State.Filled;\r\n\r\n        // swap clients\r\n        _swaps[secretHash].initiator = _msgSender();\r\n        _swaps[secretHash].recipient = recipient;\r\n        _swaps[secretHash].secretHash = secretHash;\r\n        _swaps[secretHash].orderId = orderId;\r\n\r\n        // swap timestapms\r\n        _swaps[secretHash].initTimestamp = block.timestamp;\r\n        _swaps[secretHash].refundTimestamp = block.timestamp + (refundTimestamp * 1 minutes);\r\n\r\n        // updating the initiator state\r\n        Initiator storage initiator = _initiators[_msgSender()];\r\n        initiator.swaps[initiator.index] = secretHash;\r\n        initiator.index++;\r\n        initiator.filledSwaps++;\r\n\r\n        // Update deposits mapping and count\r\n        _swapsById[_swapsCount] = secretHash;\r\n        _swapsCount++;\r\n\r\n        emit Initiated(\r\n            orderId,\r\n            secretHash,\r\n            _msgSender(),\r\n            recipient,\r\n            block.timestamp,\r\n            refundTimestamp,\r\n            order.asset,\r\n            order.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The participant of swap, who has the secret word and the secret hash can call this method\r\n     *  and receive assets from contract.\r\n     *  @param secret which both sides discussed before initialization\r\n     */\r\n    function redeem(\r\n        bytes32 secret\r\n    ) external swapIsRedeemable(secret) {\r\n        // storing the secret hash generated from secret\r\n        bytes32 secretHash = _hashTheSecret(secret);\r\n\r\n        // closing the state of this swap order\r\n        _swaps[secretHash].state = State.Redeemed;\r\n\r\n        // storing the recipient address\r\n        address recipient = _swaps[secretHash].recipient;\r\n\r\n        if (_getSwapAssetType(secretHash) == SwapType.ETH) {\r\n            // converting recipient address to payable address\r\n            address payable payableReceiver = address(uint160(recipient));\r\n            // transfer ETH to recipient wallet\r\n            payableReceiver.transfer(_swaps[secretHash].amount);\r\n        } else {\r\n            // transfer tokens to recipient address\r\n            IERC20(_swaps[secretHash].asset).safeTransfer(recipient, _swaps[secretHash].amount);\r\n        }\r\n\r\n        // saving the secret\r\n        _swaps[secretHash].secret = secret;\r\n\r\n        // decrease the filled swaps amount\r\n        _initiators[_swaps[secretHash].initiator].filledSwaps--;\r\n\r\n        emit Redeemed (\r\n            secretHash,\r\n            block.timestamp,\r\n            secret,\r\n            recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The initiator can get back his tokens until refundTimestamp comes,\r\n     *  after that both sides cannot do anything with this swap\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     */\r\n    function refund(\r\n        bytes32 secretHash\r\n    ) public swapIsRefundable(secretHash, _msgSender()) {\r\n        _swaps[secretHash].state = State.Refunded;\r\n        _reopenExistingOrder(_swaps[secretHash].orderId,_msgSender());\r\n\r\n        // decrease the filled swapss amount\r\n        _initiators[_msgSender()].filledSwaps--;\r\n\r\n        emit Refunded(\r\n            _swaps[secretHash].orderId,\r\n            secretHash,\r\n            block.timestamp,\r\n            _msgSender()\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev The method do 2 actions and optimize the processes\r\n     *  It call refund and withdraw\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     */\r\n    function refundAndWithdraw(\r\n        bytes32 secretHash\r\n    ) external {\r\n        refund(secretHash);\r\n        uint256 orderId = _swaps[secretHash].orderId;\r\n        _withdraw(orderId);\r\n    }\r\n\r\n    /**\r\n     *  @dev The method do the same think as refundAndWithdraw, but for all expired swaps\r\n     *  The caller should be able to refund and withdraw all own swaps and deposits\r\n     */\r\n    function refundAndWithdrawAll() external {\r\n        uint256 filledSwaps = _initiators[_msgSender()].filledSwaps;\r\n\r\n        for (uint256 i = 0; i < filledSwaps; i++) {\r\n            bytes32 secretHash = _swaps[_initiators[_msgSender()].swaps[i]].secretHash;\r\n            if (_isRefundable(secretHash, _msgSender())) {\r\n                uint256 orderId = _swaps[_initiators[_msgSender()].swaps[i]].orderId;\r\n                refund(secretHash);\r\n                _withdraw(orderId);\r\n            }\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev Method returns all atomic swaps for specified user with optional state filter.\r\n     *  @param initiator the address of user\r\n     *  @param state of required swap, represented as a Enum type with 4 options (0 - 3)\r\n     *  @return orderIds array of order ids with required state\r\n     */\r\n    function getUserSwapsByState(\r\n        address initiator,\r\n        State state,\r\n        uint256 cursor,\r\n        uint256 howMany\r\n    ) public view returns (\r\n        uint256[] memory orderIds,\r\n        uint256 newCursor\r\n    ) {\r\n        uint256 swapsLength = _initiators[initiator].index;\r\n        uint256 filteredOrdersLength = 0;\r\n\r\n        // calculate lenght of necesseary array\r\n        for (uint256 i = 0; i < swapsLength; i++){\r\n            Swap memory swap = _swaps[_initiators[initiator].swaps[i]];\r\n            if (swap.state == state) {\r\n                filteredOrdersLength++;\r\n            }\r\n        }\r\n\r\n        uint256 length = howMany;\r\n        if (length > filteredOrdersLength - cursor) {\r\n            length = filteredOrdersLength - cursor;\r\n        }\r\n\r\n        // create new array with necesseary array lengths\r\n        orderIds = new uint256[](length);\r\n\r\n        // filter orderIds by requirement\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < swapsLength; i++){\r\n            if (j == length) {\r\n                break;\r\n            } else {\r\n                Swap memory swap = _swaps[_initiators[initiator].swaps[cursor + i]];\r\n                if (swap.state == state) {\r\n                    orderIds[j] = swap.orderId;\r\n\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            orderIds,\r\n            cursor + length\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Get user filled swaps count\r\n     *  @return uint256 count\r\n     */\r\n    function getUserFilledOrdersCount(\r\n        address user\r\n    ) external view returns (\r\n        uint256 count\r\n    ) {\r\n        return _initiators[user].filledSwaps;\r\n    }\r\n\r\n    /**\r\n     *  @dev Get filled swaps order ids and amounts\r\n     *  @return uint256[] of order ids\r\n     *  @return uint256[] of amounts\r\n     *  @return uint256[] of creation id's\r\n     */\r\n    function getUserFilledOrders(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 howMany\r\n    ) external view returns (\r\n        uint256[] memory orderIds,\r\n        uint256[] memory amounts,\r\n        uint256[] memory initTimestamps,\r\n        uint256 newCursor\r\n    ) {\r\n        uint256 filledSwaps = _initiators[user].filledSwaps;\r\n\r\n        uint256 length = howMany;\r\n        if (length > filledSwaps - cursor) {\r\n            length = filledSwaps - cursor;\r\n        }\r\n\r\n        orderIds = new uint256[](length);\r\n        amounts = new uint256[](length);\r\n        initTimestamps = new uint256[](length);\r\n\r\n        uint256 j = 0;\r\n        for(uint256 i = 0; i <= _initiators[user].index; i++){\r\n            if (j == length) {\r\n                break;\r\n            } else {\r\n                Swap memory swap = _swaps[_initiators[user].swaps[cursor + i]];\r\n                if (swap.state == State.Filled) {\r\n                    amounts[j] = swap.amount;\r\n                    orderIds[j] = swap.orderId;\r\n                    initTimestamps[j] = swap.initTimestamp;\r\n\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            orderIds,\r\n            amounts,\r\n            initTimestamps,\r\n            cursor + length\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Identification of the swap type with assets and value fields\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @return tp (type) of swap\r\n     */\r\n    function getSwapAssetType(\r\n        bytes32 secretHash\r\n    ) public view returns (SwapType tp) {\r\n        return _getSwapAssetType(secretHash);\r\n    }\r\n\r\n    /**\r\n     *  @dev Check the secret hash for existence, it can be used in UI for form validation\r\n     *  @param secretHash the encoded secret which they discussed at offline (SHA256)\r\n     *  @return state of this swap\r\n     */\r\n    function getSwapData(\r\n        bytes32 _secretHash\r\n    ) external view returns (\r\n        uint256 initTimestamp,\r\n        uint256 refundTimestamp,\r\n        bytes32 secretHash,\r\n        bytes32 secret,\r\n        address initiator,\r\n        address recipient,\r\n        address asset,\r\n        uint256 amount,\r\n        State state\r\n    ) {\r\n        Swap memory swap = _swaps[_secretHash];\r\n        return (\r\n            swap.initTimestamp,\r\n            swap.refundTimestamp,\r\n            swap.secretHash,\r\n            swap.secret,\r\n            swap.initiator,\r\n            swap.recipient,\r\n            swap.asset,\r\n            swap.amount,\r\n            swap.state\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Method check and return array of orderIds, which can being refunded by provided user\r\n     *  @param user address of user\r\n     *  @return array of uint256 orderIds\r\n     */\r\n    function getExpiredSwaps(\r\n        address user\r\n    ) public view returns (\r\n        uint256[] memory orderIds,\r\n        bytes32[] memory secretHashes\r\n    ) {\r\n        uint256 swapsLength = _initiators[user].index;\r\n        uint256 expiredSwapsLength = 0;\r\n\r\n        // calculate lenght of refund timestamps array\r\n        for (uint256 i = 0; i < swapsLength; i++){\r\n            bytes32 secretHash = _initiators[user].swaps[i];\r\n            Swap memory swap = _swaps[secretHash];\r\n            if (block.timestamp >= swap.refundTimestamp && swap.state == State.Filled) {\r\n                expiredSwapsLength++;\r\n            }\r\n        }\r\n\r\n        // create new array with necesseary array lengths\r\n        orderIds = new uint256[](expiredSwapsLength);\r\n        secretHashes = new bytes32[](expiredSwapsLength);\r\n\r\n        // filter orderIds by refund timestamp\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < swapsLength; i++){\r\n            bytes32 secretHash = _initiators[user].swaps[i];\r\n            Swap memory swap = _swaps[secretHash];\r\n            if (block.timestamp >= swap.refundTimestamp && swap.state == State.Filled) {\r\n                orderIds[j] = swap.orderId;\r\n                secretHashes[j] = secretHash;\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return (\r\n            orderIds,\r\n            secretHashes\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev To avoid issues between solidity hashing algorithm and the algorithm which will be used in the platform\r\n     *  we gonna use the same hashing algorithm which uses the smart contract\r\n     *  this is only the getter method without interaction from the blockchain, so it is safe\r\n     *  @return secret hash of bytes32 secret\r\n     */\r\n    function getHashOfSecret(\r\n        bytes32 secret\r\n    ) external pure returns (bytes32) {\r\n        return _hashTheSecret(secret);\r\n    }\r\n\r\n    /**\r\n     *  @dev Get limits of a lifetime for swap in minutes\r\n     *  @return min lifetime\r\n     *  @return max lifetime\r\n     */\r\n    function getSwapLifetimeLimits() public view returns (\r\n        uint256 min,\r\n        uint256 max\r\n    ) {\r\n        return (\r\n            _swapTimeLimits.min,\r\n            _swapTimeLimits.max\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev Get the count of initiated swaps\r\n     */\r\n    function getSwapsCount() external view returns (\r\n        uint256 swapsCount\r\n    ) {\r\n        return _swapsCount;\r\n    }\r\n\r\n    /**\r\n     *  @dev Get the secretHash by provided id\r\n     */\r\n    function getSwapsSecretHashById(\r\n        uint256 swapId\r\n    ) external view returns (\r\n        bytes32 secretHash\r\n    ) {\r\n        return _swapsById[swapId];\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // INTERNAL\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     *  @dev Validating the period time of swap\r\n     * It should be equal/bigger than 10 minutes and equal/less than 180 days\r\n     */\r\n    function _validateRefundTimestamp(\r\n        uint256 refundTimestamp\r\n    ) private view {\r\n        require(refundTimestamp >= _swapTimeLimits.min, \"_validateRefundTimestamp: the timestamp should be bigger than min swap lifetime\");\r\n        require(_swapTimeLimits.max >= refundTimestamp, \"_validateRefundTimestamp: the timestamp should be smaller than max swap lifetime\");\r\n    }\r\n\r\n    function _isRefundable(\r\n        bytes32 secretHash,\r\n        address refunder\r\n    ) internal view returns (bool) {\r\n        bool isFilled = _swaps[secretHash].state == State.Filled;\r\n        bool isCallerInitiator = _swaps[secretHash].initiator == refunder;\r\n        uint256 refundTimestamp = _swaps[secretHash].refundTimestamp;\r\n        bool isTimeReached = block.timestamp >= refundTimestamp;\r\n\r\n        return isFilled && isCallerInitiator && isTimeReached;\r\n    }\r\n\r\n    function _isRedeemable(\r\n        bytes32 secret\r\n    ) internal view returns (bool) {\r\n        bytes32 secretHash = _hashTheSecret(secret);\r\n        bool isSwapFilled = _swaps[secretHash].state == State.Filled;\r\n        uint256 refundTimestamp = _swaps[secretHash].refundTimestamp;\r\n        bool isSwapActive = refundTimestamp > block.timestamp;\r\n\r\n        return isSwapFilled && isSwapActive;\r\n    }\r\n\r\n    function _hashTheSecret(\r\n        bytes32 secret\r\n    ) private pure returns (bytes32) {\r\n        return sha256(abi.encodePacked(secret));\r\n    }\r\n\r\n    function _getSwapAssetType(\r\n        bytes32 secretHash\r\n    ) private view returns (SwapType tp) {\r\n        if (_swaps[secretHash].asset == _ethAssetIdentificator) {\r\n            return SwapType.ETH;\r\n        } else {\r\n            return SwapType.Token;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"changeSwapLifetimeLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newVersion\",\"type\":\"string\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newVersion\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AdminUpgradeabilityProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c6304e326b2462f59d811285eab0d5a50266f362000000000000000000000000fc93512d1848fa37f40d7782ffc291617c0e5615","Library":"","LicenseType":"None","SwarmSource":"bzzr://843eae6f470e00ecfd07082b9bfe0eb5c50392ea0845c59834fcb048d3306ca0"}]}