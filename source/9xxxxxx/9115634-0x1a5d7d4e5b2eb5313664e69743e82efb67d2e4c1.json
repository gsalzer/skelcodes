{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/test/NectarRepAllocation.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\ncontract MiniMeToken {\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint);\r\n}\r\n\r\n/**\r\n * @title NectarRepAllocation contract\r\n * This contract should be use to calculate reputation allocation for nextar dao bootstrat\r\n * this contract can be used as the rep mapping contract for RepitationFromToken contract.\r\n */\r\n\r\ncontract NectarRepAllocation {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public reputationReward;\r\n    uint256 public claimingStartTime;\r\n    uint256 public claimingEndTime;\r\n    uint256 public totalTokenSupplyAt;\r\n    uint256 public blockReference;\r\n    MiniMeToken public token;\r\n\r\n    /**\r\n     * @dev initialize\r\n     * @param _reputationReward the total reputation which will be used to calc the reward\r\n     *        for the token locking\r\n     * @param _claimingStartTime claiming starting period time.\r\n     * @param _claimingEndTime the claiming end time.\r\n     *        claiming is disable after this time.\r\n     * @param _blockReference the block nbumber reference which is used to takle the balance from.\r\n     * @param _token nectar token address\r\n     */\r\n    function initialize(\r\n        uint256 _reputationReward,\r\n        uint256 _claimingStartTime,\r\n        uint256 _claimingEndTime,\r\n        uint256 _blockReference,\r\n        MiniMeToken _token)\r\n        external\r\n    {\r\n        require(token == MiniMeToken(0), \"can be called only one time\");\r\n        require(_token != MiniMeToken(0), \"token cannot be zero\");\r\n        token = _token;\r\n        reputationReward = _reputationReward;\r\n        claimingStartTime = _claimingStartTime;\r\n        claimingEndTime = _claimingEndTime;\r\n        blockReference = _blockReference;\r\n        if ((claimingStartTime != 0) || (claimingEndTime != 0)) {\r\n            require(claimingEndTime > claimingStartTime, \"claimingStartTime > claimingEndTime\");\r\n        }\r\n        totalTokenSupplyAt = token.totalSupplyAt(_blockReference);\r\n    }\r\n\r\n    /**\r\n     * @dev get balanceOf _beneficiary function\r\n     * @param _beneficiary addresses\r\n     */\r\n    function balanceOf(address _beneficiary) public view returns(uint256 reputation) {\r\n        if (((claimingStartTime != 0) || (claimingEndTime != 0)) &&\r\n          // solhint-disable-next-line not-rely-on-time\r\n            ((now >= claimingEndTime) || (now < claimingStartTime))) {\r\n            reputation = 0;\r\n        } else {\r\n            reputation = token.balanceOfAt(_beneficiary, blockReference).mul(reputationReward).div(totalTokenSupplyAt);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockReference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reputationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockReference\",\"type\":\"uint256\"},{\"internalType\":\"contract MiniMeToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reputationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NectarRepAllocation","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://eb99c46f15792e365e82235a44ca49c4980b6cf3de73d11d1dc5df5b1a7faf4e"}]}