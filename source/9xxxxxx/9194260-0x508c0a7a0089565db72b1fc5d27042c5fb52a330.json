{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () internal {\r\n\t\t_owner = msg.sender;\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: owner cannot be the zero address\");\r\n\t\trequire(newOwner != address(this), \"Ownable: owner cannot be the contract address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract Bitburn is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring constant public name = \"Bitburn\";\r\n\tstring constant public symbol = \"BTU\";\r\n\tuint8 constant public decimals = 0;\r\n\tuint256 private _totalSupply;\r\n\tmapping (address => uint256) private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private burnRate;\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\tevent Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n\tevent Burn(uint256 amount);\r\n\tevent BurnRateChanged(uint256 previousBurnRate, uint256 newBurnRate);\r\n\tevent BurnOwnerTokens(uint256 amount);\r\n\r\n\tconstructor (address _distrib, address _owner) public {\r\n\t\trequire(_distrib != address(0) && _owner != address(0));\r\n\r\n\t\ttransferOwnership(_owner);\r\n\r\n\t\t_totalSupply = 2000000;\r\n\t\t_balances[_owner] = _totalSupply*3/10;\r\n\t\t_balances[_distrib] = _totalSupply-_balances[_owner];\r\n\t\temit Transfer(address(0), _distrib, _balances[_distrib]);\r\n\t\temit Transfer(address(0), _owner, _balances[_owner]);\r\n\r\n\t\tburnRate = 20;\r\n\t\temit BurnRateChanged(0, burnRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev returns the burn percentage of transfer amount.\r\n\t *\r\n\t * Note: see also {setBurnRate}.\r\n\t */\r\n\tfunction getBurnRate() public view returns (uint256) {\r\n\t\treturn burnRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev sets the burn percentage of transfer amount from 0.5% to 5% inclusive.\r\n\t *\r\n\t * Emits a {BurnRateChanged} event.\r\n\t *\r\n\t * Requirement: `_burnRate` must be within [5; 50] (to programmatically escape using fractional numbers).\r\n\t */\r\n\tfunction setBurnRate(uint256 _burnRate) public onlyOwner {\r\n\t\t//Amount multiplier: [0.005; 0.05]\r\n\t\trequire(_burnRate >= 5 && _burnRate <= 50, \"Burn rate out of bounds\");\r\n\r\n\t\temit BurnRateChanged(burnRate, _burnRate);\r\n\t\tburnRate = _burnRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev totally burns the whole `_amount` of the contract's owner.\r\n\t *\r\n\t * Emits a {BurnOwnerTokens} event.\r\n\t *\r\n\t * Requirement: the contract's owner must have a balance of at least `_amount`.\r\n\t */\r\n\tfunction burnOwnerTokens(uint256 _amount) public onlyOwner {\r\n\t\trequire(_balances[msg.sender] >= _amount, \"Burn amount exceeds balance\");\r\n\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n\t\t_totalSupply = _totalSupply.sub(_amount);\r\n\t\temit BurnOwnerTokens(_amount);\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn _balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint256 _amount) public returns (bool) {\r\n\t\t_transfer(msg.sender, _recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\r\n\t\trequire(_allowances[_sender][_recipient] >= _amount, \"Transfer amount exceeds allowance\");\r\n\r\n\t\t_transfer(_sender, _recipient, _amount);\r\n\t\t_allowances[_sender][_recipient] = _allowances[_sender][_recipient].sub(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n\t\trequire(_balances[_sender] >= _amount, \"Transfer amount exceeds balance\");\r\n\t\trequire(_recipient != address(0), \"Cannot transfer to the zero address\");\r\n\t\trequire(_recipient != address(this), \"Cannot transfer to the contract address\");\r\n\r\n\t\tuint256 burnAmount = _amount.mul(burnRate).div(1000);\r\n\t\tuint256 newAmount = _amount.sub(burnAmount);\r\n\t\t_balances[_sender] = _balances[_sender].sub(_amount);\r\n\t\t_balances[_recipient] = _balances[_recipient].add(newAmount);\r\n\t\t_totalSupply = _totalSupply.sub(burnAmount);\r\n\t\temit Transfer(_sender, _recipient, _amount);\r\n\t\temit Burn(burnAmount);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _amount) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn _allowances[_owner][_spender];\r\n\t}\r\n\r\n\tfunction increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _allowances[msg.sender][_spender].add(_addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _allowances[msg.sender][_spender].sub(_subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address _owner, address _spender, uint256 _amount) internal {\r\n\t\trequire(_spender != address(0), \"Cannot approve to the zero address\");\r\n\t\trequire(_spender != address(this), \"Cannot approve to the contract address\");\r\n\r\n\t\t_allowances[_owner][_spender] = _amount;\r\n\t\temit Approval(_owner, _spender, _amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnOwnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distrib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBurnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnRate\",\"type\":\"uint256\"}],\"name\":\"BurnRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnOwnerTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bitburn","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009664f1ffd9cb192a75d367ecac1423ff420d8ef0000000000000000000000000bbda711a52f41970e71aacbd417e2020b7f3c769","Library":"","LicenseType":"None","SwarmSource":"bzzr://dd818ba3442363f52a3aa2059f10b10fd47ee0c409ff3d12e1dedc733bcbf8d5"}]}