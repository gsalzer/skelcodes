{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n \t* @dev Returns the addition of two unsigned integers, reverting on\r\n \t* overflow.\r\n \t*\r\n \t* Counterpart to Solidity's `+` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Addition cannot overflow.\r\n \t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a + b;\r\n    \trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the subtraction of two unsigned integers, reverting on\r\n \t* overflow (when the result is negative).\r\n \t*\r\n \t* Counterpart to Solidity's `-` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Subtraction cannot overflow.\r\n \t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n \t* overflow (when the result is negative).\r\n \t*\r\n \t* Counterpart to Solidity's `-` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Subtraction cannot overflow.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \trequire(b <= a, errorMessage);\r\n    \tuint256 c = a - b;\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the multiplication of two unsigned integers, reverting on\r\n \t* overflow.\r\n \t*\r\n \t* Counterpart to Solidity's `*` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Multiplication cannot overflow.\r\n \t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    \t// benefit is lost if 'b' is also tested.\r\n    \t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    \tif (a == 0) {\r\n        \treturn 0;\r\n    \t}\r\n\r\n    \tuint256 c = a * b;\r\n    \trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the integer division of two unsigned integers. Reverts on\r\n \t* division by zero. The result is rounded towards zero.\r\n \t*\r\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n \t* uses an invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n \t* division by zero. The result is rounded towards zero.\r\n \t*\r\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n \t* uses an invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \t// Solidity only automatically asserts when dividing by 0\r\n    \trequire(b > 0, errorMessage);\r\n    \tuint256 c = a / b;\r\n    \t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n \t* Reverts when dividing by zero.\r\n \t*\r\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n \t* invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n \t* Reverts with custom message when dividing by zero.\r\n \t*\r\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n \t* invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \trequire(b != 0, errorMessage);\r\n    \treturn a % b;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n \t* @dev Returns true if `account` is a contract.\r\n \t*\r\n \t* [IMPORTANT]\r\n \t* ====\r\n \t* It is unsafe to assume that an address for which this function returns\r\n \t* false is an externally-owned account (EOA) and not a contract.\r\n \t*\r\n \t* Among others, `isContract` will return false for the following\r\n \t* types of addresses:\r\n \t*\r\n \t*  - an externally-owned account\r\n \t*  - a contract in construction\r\n \t*  - an address where a contract will be created\r\n \t*  - an address where a contract lived, but was destroyed\r\n \t* ====\r\n \t*/\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n    \t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    \t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    \t// for accounts without code, i.e. `keccak256('')`\r\n    \tbytes32 codehash;\r\n    \tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    \t// solhint-disable-next-line no-inline-assembly\r\n    \tassembly { codehash := extcodehash(account) }\r\n    \treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Converts an `address` into `address payable`. Note that this is\r\n \t* simply a type cast: the actual underlying value is not changed.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n    \treturn address(uint160(account));\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n \t* `recipient`, forwarding all available gas and reverting on errors.\r\n \t*\r\n \t* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n \t* of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n \t* imposed by `transfer`, making them unable to receive funds via\r\n \t* `transfer`. {sendValue} removes this limitation.\r\n \t*\r\n \t* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n \t*\r\n \t* IMPORTANT: because control is transferred to `recipient`, care must be\r\n \t* taken to not create reentrancy vulnerabilities. Consider using\r\n \t* {ReentrancyGuard} or the\r\n \t* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n    \trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    \t// solhint-disable-next-line avoid-call-value\r\n    \t(bool success, ) = recipient.call.value(amount)(\"\");\r\n    \trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Counter {\r\n    \t// This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n    \t// the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n    \t// this feature: see https://github.com/ethereum/solidity/issues/4637\r\n    \tuint256 _value; // default: 0\r\n\t}\r\n\r\n\tfunction current(Counter storage counter) internal view returns (uint256) {\r\n    \treturn counter._value;\r\n\t}\r\n\r\n\tfunction increment(Counter storage counter) internal {\r\n    \t// The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n    \tcounter._value += 1;\r\n\t}\r\n\r\n\tfunction decrement(Counter storage counter) internal {\r\n    \tcounter._value = counter._value.sub(1);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n\tstruct Role {\r\n    \tmapping (address => bool) bearer;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev give an account access to this role\r\n \t*/\r\n\tfunction add(Role storage role, address account) internal {\r\n    \trequire(account != address(0));\r\n    \trequire(!has(role, account));\r\n\r\n    \trole.bearer[account] = true;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev remove an account's access to this role\r\n \t*/\r\n\tfunction remove(Role storage role, address account) internal {\r\n    \trequire(account != address(0));\r\n    \trequire(has(role, account));\r\n\r\n    \trole.bearer[account] = false;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev check if an account has this role\r\n \t* @return bool\r\n \t*/\r\n\tfunction has(Role storage role, address account) internal view returns (bool) {\r\n    \trequire(account != address(0));\r\n    \treturn role.bearer[account];\r\n\t}\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n\t// Empty internal constructor, to prevent people from mistakenly deploying\r\n\t// an instance of this contract, which should be used via inheritance.\r\n\tconstructor () internal { }\r\n\t// solhint-disable-previous-line no-empty-blocks\r\n\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n    \treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n    \tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    \treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract MinterRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent MinterAdded(address indexed account);\r\n\tevent MinterRemoved(address indexed account);\r\n\r\n\tRoles.Role private _minters;\r\n\r\n\tconstructor () internal {\r\n    \t_addMinter(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyMinter() {\r\n    \trequire(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n    \t_;\r\n\t}\r\n\r\n\tfunction isMinter(address account) public view returns (bool) {\r\n    \treturn _minters.has(account);\r\n\t}\r\n\r\n\tfunction renounceMinter() public {\r\n    \t_removeMinter(_msgSender());\r\n\t}\r\n\r\n\tfunction _addMinter(address account) internal {\r\n    \t_minters.add(account);\r\n    \temit MinterAdded(account);\r\n\t}\r\n\r\n\tfunction _removeMinter(address account) internal {\r\n    \t_minters.remove(account);\r\n    \temit MinterRemoved(account);\r\n\t}\r\n}\r\n\r\ncontract PauserRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent PauserAdded(address indexed account);\r\n\tevent PauserRemoved(address indexed account);\r\n\r\n\tRoles.Role private _pausers;\r\n\r\n\tconstructor () internal {\r\n    \t_addPauser(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyPauser() {\r\n    \trequire(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n    \t_;\r\n\t}\r\n\r\n\tfunction isPauser(address account) public view returns (bool) {\r\n    \treturn _pausers.has(account);\r\n\t}\r\n\r\n\tfunction renouncePauser() public {\r\n    \t_removePauser(_msgSender());\r\n\t}\r\n\r\n\tfunction _addPauser(address account) internal {\r\n    \t_pausers.add(account);\r\n    \temit PauserAdded(account);\r\n\t}\r\n\r\n\tfunction _removePauser(address account) internal {\r\n    \t_pausers.remove(account);\r\n    \temit PauserRemoved(account);\r\n\t}\r\n}\r\n\r\ncontract BurnerRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent BurnerAdded(address indexed account);\r\n\tevent BurnerRemoved(address indexed account);\r\n\r\n\tRoles.Role private _burners;\r\n    \r\n\tconstructor () internal {\r\n    \t_addBurner(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyBurner() {\r\n    \trequire(isBurner(_msgSender()), \"BurnerRole: caller does not have the Burner role\");\r\n    \t_;\r\n\t}\r\n\r\n\tfunction isBurner(address account) public view returns (bool) {\r\n    \treturn _burners.has(account);\r\n\t}\r\n\r\n\tfunction renounceBurner() public {\r\n    \t_removeBurner(_msgSender());\r\n\t}\r\n\r\n\tfunction _addBurner(address account) internal {\r\n    \t_burners.add(account);\r\n    \temit BurnerAdded(account);\r\n\t}\r\n\r\n\tfunction _removeBurner(address account) internal {\r\n    \t_burners.remove(account);\r\n    \temit BurnerRemoved(account);\r\n\t}\r\n}\r\n\r\ncontract OperatorRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent OperatorAdded(address indexed account);\r\n\tevent OperatorRemoved(address indexed account);\r\n\r\n\tRoles.Role private _operators;\r\n    \r\n\tconstructor () internal {\r\n    \t_addOperator(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyOperator() {\r\n    \trequire(isOperator(_msgSender()), \"OperatorRole: caller does not have the Operator role\");\r\n    \t_;\r\n\t}\r\n\r\n\tfunction isOperator(address account) public view returns (bool) {\r\n    \treturn _operators.has(account);\r\n\t}\r\n\r\n\tfunction addOperator(address account) public onlyOperator {\r\n    \t_addOperator(account);\r\n\t}\r\n    \r\n\tfunction renounceOperator() public {\r\n    \t_removeOperator(_msgSender());\r\n\t}\r\n    \r\n\tfunction _addOperator(address account) internal {\r\n    \t_operators.add(account);\r\n    \temit OperatorAdded(account);\r\n\t}\r\n\r\n\tfunction _removeOperator(address account) internal {\r\n    \t_operators.remove(account);\r\n    \temit OperatorRemoved(account);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n\t/**\r\n \t* @dev Returns true if this contract implements the interface defined by\r\n \t* `interfaceId`. See the corresponding\r\n \t* https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n \t* to learn more about how these ids are created.\r\n \t*\r\n \t* This function call must use less than 30 000 gas.\r\n \t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\t/*\r\n \t* bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n\t/**\r\n \t* @dev Mapping of interface ids to whether or not it's supported.\r\n \t*/\r\n\tmapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n\tconstructor () internal {\r\n    \t// Derived contracts need only register support for their own interfaces,\r\n    \t// we register support for ERC165 itself here\r\n    \t_registerInterface(_INTERFACE_ID_ERC165);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev See {IERC165-supportsInterface}.\r\n \t*\r\n \t* Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n \t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n    \treturn _supportedInterfaces[interfaceId];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Registers the contract as an implementer of the interface defined by\r\n \t* `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n \t* registering its interface id is not required.\r\n \t*\r\n \t* See {IERC165-supportsInterface}.\r\n \t*\r\n \t* Requirements:\r\n \t*\r\n \t* - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n \t*/\r\n\tfunction _registerInterface(bytes4 interfaceId) internal {\r\n    \trequire(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n    \t_supportedInterfaces[interfaceId] = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n \t* @dev Returns the number of NFTs in `owner`'s account.\r\n \t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n\t/**\r\n \t* @dev Returns the owner of the NFT specified by `tokenId`.\r\n \t*/\r\n\tfunction ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n\t/**\r\n \t* @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n \t* another (`to`).\r\n \t*\r\n \t*\r\n \t*\r\n \t* Requirements:\r\n \t* - `from`, `to` cannot be zero.\r\n \t* - `tokenId` must be owned by `from`.\r\n \t* - If the caller is not `from`, it must be have been allowed to move this\r\n \t* NFT by either {approve} or {setApprovalForAll}.\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\t/**\r\n \t* @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n \t* another (`to`).\r\n \t*\r\n \t* Requirements:\r\n \t* - If the caller is not `from`, it must be approved to move this NFT by\r\n \t* either {approve} or {setApprovalForAll}.\r\n \t*/\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public;\r\n\tfunction approve(address to, uint256 tokenId) public;\r\n\tfunction getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n\tfunction setApprovalForAll(address operator, bool _approved) public;\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n\t/**\r\n \t* @notice Handle the receipt of an NFT\r\n \t* @dev The ERC721 smart contract calls this function on the recipient\r\n \t* after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n \t* otherwise the caller will revert the transaction. The selector to be\r\n \t* returned can be obtained as `this.onERC721Received.selector`. This\r\n \t* function MAY throw to revert and reject the transfer.\r\n \t* Note: the ERC721 contract address is always the message sender.\r\n \t* @param operator The address which called `safeTransferFrom` function\r\n \t* @param from The address which previously owned the token\r\n \t* @param tokenId The NFT identifier which is being transferred\r\n \t* @param data Additional data with no specified format\r\n \t* @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n \t*/\r\n\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n\tpublic returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\tusing Counters for Counters.Counter;\r\n\r\n\t// Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t// Mapping from token ID to owner\r\n\tmapping (uint256 => address) private _tokenOwner;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping (uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to number of owned token\r\n\tmapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n \t* \tbytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n \t* \tbytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n \t* \tbytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n \t* \tbytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n \t* \tbytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n \t* \tbytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n \t* \tbytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n \t* \tbytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n \t*\r\n \t* \t=> 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n \t*    \t0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n\tconstructor () public {\r\n    \t// register the supported interfaces to conform to ERC721 via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the balance of the specified address.\r\n \t* @param owner address to query the balance of\r\n \t* @return uint256 representing the amount owned by the passed address\r\n \t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n    \trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n    \treturn _ownedTokensCount[owner].current();\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the owner of the specified token ID.\r\n \t* @param tokenId uint256 ID of the token to query the owner of\r\n \t* @return address currently marked as the owner of the given token ID\r\n \t*/\r\n\tfunction ownerOf(uint256 tokenId) public view returns (address) {\r\n    \taddress owner = _tokenOwner[tokenId];\r\n    \trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n    \treturn owner;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Approves another address to transfer the given token ID\r\n \t* The zero address indicates there is no approved address.\r\n \t* There can only be one approved address per token at a given time.\r\n \t* Can only be called by the token owner or an approved operator.\r\n \t* @param to address to be approved for the given token ID\r\n \t* @param tokenId uint256 ID of the token to be approved\r\n \t*/\r\n\tfunction approve(address to, uint256 tokenId) public {\r\n    \taddress owner = ownerOf(tokenId);\r\n    \trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n    \trequire(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n        \t\"ERC721: approve caller is not owner nor approved for all\"\r\n    \t);\r\n\r\n    \t_tokenApprovals[tokenId] = to;\r\n    \temit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the approved address for a token ID, or zero if no address set\r\n \t* Reverts if the token ID does not exist.\r\n \t* @param tokenId uint256 ID of the token to query the approval of\r\n \t* @return address currently approved for the given token ID\r\n \t*/\r\n\tfunction getApproved(uint256 tokenId) public view returns (address) {\r\n    \trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n    \treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Sets or unsets the approval of a given operator\r\n \t* An operator is allowed to transfer all tokens of the sender on their behalf.\r\n \t* @param to operator address to set the approval\r\n \t* @param approved representing the status of the approval to be set\r\n \t*/\r\n\tfunction setApprovalForAll(address to, bool approved) public {\r\n    \trequire(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n    \t_operatorApprovals[_msgSender()][to] = approved;\r\n    \temit ApprovalForAll(_msgSender(), to, approved);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Tells whether an operator is approved by a given owner.\r\n \t* @param owner owner address which you want to query the approval of\r\n \t* @param operator operator address which you want to query the approval of\r\n \t* @return bool whether the given operator is approved by the given owner\r\n \t*/\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n    \treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Transfers the ownership of a given token ID to another address.\r\n \t* Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n \t* Requires the msg.sender to be the owner, approved, or operator.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public {\r\n    \t//solhint-disable-next-line max-line-length\r\n    \trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n    \t_transferFrom(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the msg.sender to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n    \tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the _msgSender() to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n    \trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    \t_safeTransferFrom(from, to, tokenId, _data);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the msg.sender to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n    \t_transferFrom(from, to, tokenId);\r\n    \trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns whether the specified token exists.\r\n \t* @param tokenId uint256 ID of the token to query the existence of\r\n \t* @return bool whether the token exists\r\n \t*/\r\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\r\n    \taddress owner = _tokenOwner[tokenId];\r\n    \treturn owner != address(0);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns whether the given spender can transfer a given token ID.\r\n \t* @param spender address of the spender to query\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @return bool whether the msg.sender is approved for the given token ID,\r\n \t* is an operator of the owner, or is the owner of the token\r\n \t*/\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n    \trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    \taddress owner = ownerOf(tokenId);\r\n    \treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to safely mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _safeMint(address to, uint256 tokenId) internal {\r\n    \t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to safely mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n    \t_mint(to, tokenId);\r\n    \trequire(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n    \trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n    \trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n    \t_tokenOwner[tokenId] = to;\r\n    \t_ownedTokensCount[to].increment();\r\n\r\n    \temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use {_burn} instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \trequire(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n    \t_clearApproval(tokenId);\r\n\r\n    \t_ownedTokensCount[owner].decrement();\r\n    \t_tokenOwner[tokenId] = address(0);\r\n\r\n    \temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(uint256 tokenId) internal {\r\n    \t_burn(ownerOf(tokenId), tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to transfer ownership of a given token ID to another address.\r\n \t* As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    \trequire(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n    \trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n    \t_clearApproval(tokenId);\r\n\r\n    \t_ownedTokensCount[from].decrement();\r\n    \t_ownedTokensCount[to].increment();\r\n\r\n    \t_tokenOwner[tokenId] = to;\r\n\r\n    \temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n \t* The call is not executed if the target address is not a contract.\r\n \t*\r\n \t* This is an internal detail of the `ERC721` contract and its use is deprecated.\r\n \t* @param from address representing the previous owner of the given token ID\r\n \t* @param to target address that will receive the tokens\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes optional data to send along with the call\r\n \t* @return bool whether the call correctly returned the expected magic value\r\n \t*/\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n    \tinternal returns (bool)\r\n\t{\r\n    \tif (!to.isContract()) {\r\n        \treturn true;\r\n    \t}\r\n    \t// solhint-disable-next-line avoid-low-level-calls\r\n    \t(bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n        \tIERC721Receiver(to).onERC721Received.selector,\r\n        \t_msgSender(),\r\n        \tfrom,\r\n        \ttokenId,\r\n        \t_data\r\n    \t));\r\n    \tif (!success) {\r\n        \tif (returndata.length > 0) {\r\n            \t// solhint-disable-next-line no-inline-assembly\r\n            \tassembly {\r\n                \tlet returndata_size := mload(returndata)\r\n                \trevert(add(32, returndata), returndata_size)\r\n            \t}\r\n        \t} else {\r\n            \trevert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n        \t}\r\n    \t} else {\r\n        \tbytes4 retval = abi.decode(returndata, (bytes4));\r\n        \treturn (retval == _ERC721_RECEIVED);\r\n    \t}\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to clear current approval of a given token ID.\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _clearApproval(uint256 tokenId) private {\r\n    \tif (_tokenApprovals[tokenId] != address(0)) {\r\n        \t_tokenApprovals[tokenId] = address(0);\r\n    \t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n\tfunction tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n\t// Mapping from owner to list of owned token IDs\r\n\tmapping(address => uint256[]) private _ownedTokens;\r\n\r\n\t// Mapping from token ID to index of the owner tokens list\r\n\tmapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n\t// Array with all token ids, used for enumeration\r\n\tuint256[] private _allTokens;\r\n\r\n\t// Mapping from token id to position in the allTokens array\r\n\tmapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n \t* \tbytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n \t* \tbytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n \t*\r\n \t* \t=> 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n\t/**\r\n \t* @dev Constructor function.\r\n \t*/\r\n\tconstructor () public {\r\n    \t// register the supported interface to conform to ERC721Enumerable via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n \t* @param owner address owning the tokens list to be accessed\r\n \t* @param index uint256 representing the index to be accessed of the requested tokens list\r\n \t* @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n \t*/\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n    \trequire(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n    \treturn _ownedTokens[owner][index];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the total amount of tokens stored by the contract.\r\n \t* @return uint256 representing the total amount of tokens\r\n \t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n    \treturn _allTokens.length;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token ID at a given index of all the tokens in this contract\r\n \t* Reverts if the index is greater or equal to the total number of tokens.\r\n \t* @param index uint256 representing the index to be accessed of the tokens list\r\n \t* @return uint256 token ID at the given index of the tokens list\r\n \t*/\r\n\tfunction tokenByIndex(uint256 index) public view returns (uint256) {\r\n    \trequire(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n    \treturn _allTokens[index];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to transfer ownership of a given token ID to another address.\r\n \t* As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    \tsuper._transferFrom(from, to, tokenId);\r\n\r\n    \t_removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n    \t_addTokenToOwnerEnumeration(to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* @param to address the beneficiary that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n    \tsuper._mint(to, tokenId);\r\n\r\n    \t_addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n    \t_addTokenToAllTokensEnumeration(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use {ERC721-_burn} instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \tsuper._burn(owner, tokenId);\r\n\r\n    \t_removeTokenFromOwnerEnumeration(owner, tokenId);\r\n    \t// Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n    \t_ownedTokensIndex[tokenId] = 0;\r\n\r\n    \t_removeTokenFromAllTokensEnumeration(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the list of token IDs of the requested owner.\r\n \t* @param owner address owning the tokens\r\n \t* @return uint256[] List of token IDs owned by the requested address\r\n \t*/\r\n\tfunction _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n    \treturn _ownedTokens[owner];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n \t* @param to address representing the new owner of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n \t*/\r\n\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n    \t_ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n    \t_ownedTokens[to].push(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to add a token to this extension's token tracking data structures.\r\n \t* @param tokenId uint256 ID of the token to be added to the tokens list\r\n \t*/\r\n\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n    \t_allTokensIndex[tokenId] = _allTokens.length;\r\n    \t_allTokens.push(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n \t* while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n \t* gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n \t* This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n \t* @param from address representing the previous owner of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n \t*/\r\n\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n    \t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n    \t// then delete the last slot (swap and pop).\r\n\r\n    \tuint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    \tuint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    \t// When the token to delete is the last token, the swap operation is unnecessary\r\n    \tif (tokenIndex != lastTokenIndex) {\r\n        \tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n        \t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        \t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    \t}\r\n\r\n    \t// This also deletes the contents at the last position of the array\r\n    \t_ownedTokens[from].length--;\r\n\r\n    \t// Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n    \t// lastTokenId, or just over the end of the array if the token was the last one).\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to remove a token from this extension's token tracking data structures.\r\n \t* This has O(1) time complexity, but alters the order of the _allTokens array.\r\n \t* @param tokenId uint256 ID of the token to be removed from the tokens list\r\n \t*/\r\n\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    \t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    \t// then delete the last slot (swap and pop).\r\n\r\n    \tuint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    \tuint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    \t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n    \t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n    \t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    \tuint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    \t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    \t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n    \t// This also deletes the contents at the last position of the array\r\n    \t_allTokens.length--;\r\n    \t_allTokensIndex[tokenId] = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Base URI\r\n\tstring private _baseURI;\r\n\r\n\t// Optional mapping for token URIs\r\n\tmapping(uint256 => string) private _tokenURIs;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('name()')) == 0x06fdde03\r\n \t* \tbytes4(keccak256('symbol()')) == 0x95d89b41\r\n \t* \tbytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n \t*\r\n \t* \t=> 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n\t/**\r\n \t* @dev Constructor function\r\n \t*/\r\n\tconstructor (string memory name, string memory symbol) public {\r\n    \t_name = name;\r\n    \t_symbol = symbol;\r\n\r\n    \t// register the supported interfaces to conform to ERC721 via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token name.\r\n \t* @return string representing the token name\r\n \t*/\r\n\tfunction name() external view returns (string memory) {\r\n    \treturn _name;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token symbol.\r\n \t* @return string representing the token symbol\r\n \t*/\r\n\tfunction symbol() external view returns (string memory) {\r\n    \treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the URI for a given token ID. May return an empty string.\r\n \t*\r\n \t* If the token's URI is non-empty and a base URI was set (via\r\n \t* {_setBaseURI}), it will be added to the token ID's URI as a prefix.\r\n \t*\r\n \t* Reverts if the token ID does not exist.\r\n \t*/\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory) {\r\n    \trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n    \tstring memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n    \t// Even if there is a base URI, it is only appended to non-empty token-specific URIs\r\n    \tif (bytes(_tokenURI).length == 0) {\r\n        \treturn \"\";\r\n    \t} else {\r\n        \t// abi.encodePacked is being used to concatenate strings\r\n        \treturn string(abi.encodePacked(_baseURI, _tokenURI));\r\n    \t}\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to set the token URI for a given token.\r\n \t*\r\n \t* Reverts if the token ID does not exist.\r\n \t*\r\n \t* TIP: if all token IDs share a prefix (e.g. if your URIs look like\r\n \t* `http://api.myproject.com/token/<id>`), use {_setBaseURI} to store\r\n \t* it and save gas.\r\n \t*/\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\r\n    \trequire(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n    \t_tokenURIs[tokenId] = _tokenURI;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to set the base URI for all token IDs. It is\r\n \t* automatically added as a prefix to the value returned in {tokenURI}.\r\n \t*\r\n \t* _Available since v2.5.0._\r\n \t*/\r\n\tfunction _setBaseURI(string memory baseURI) internal {\r\n    \t_baseURI = baseURI;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the base URI set via {_setBaseURI}. This will be\r\n\t* automatically added as a preffix in {tokenURI} to each token's URI, when\r\n\t* they are non-empty.\r\n\t*\r\n\t* _Available since v2.5.0._\r\n\t*/\r\n\tfunction baseURI() external view returns (string memory) {\r\n    \treturn _baseURI;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use _burn(uint256) instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned by the msg.sender\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \tsuper._burn(owner, tokenId);\r\n\r\n    \t// Clear metadata (if any)\r\n    \tif (bytes(_tokenURIs[tokenId]).length != 0) {\r\n        \tdelete _tokenURIs[tokenId];\r\n    \t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n\t/**\r\n \t* @dev Emitted when the pause is triggered by a pauser (`account`).\r\n \t*/\r\n\tevent Paused(address account);\r\n\r\n\t/**\r\n \t* @dev Emitted when the pause is lifted by a pauser (`account`).\r\n \t*/\r\n\tevent Unpaused(address account);\r\n\r\n\tbool private _paused;\r\n\r\n\t/**\r\n \t* @dev Initializes the contract in paused state.\r\n \t*/\r\n\tconstructor () internal {\r\n    \t_paused = true;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns true if the contract is paused, and false otherwise.\r\n \t*/\r\n\tfunction paused() public view returns (bool) {\r\n    \treturn _paused;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Modifier to make a function callable only when the contract is not paused.\r\n \t*/\r\n\tmodifier whenNotPaused() {\r\n    \trequire(!_paused, \"Pausable: paused\");\r\n    \t_;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Modifier to make a function callable only when the contract is paused.\r\n \t*/\r\n\tmodifier whenPaused() {\r\n    \trequire(_paused, \"Pausable: not paused\");\r\n    \t_;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Called by a pauser to pause, triggers stopped state.\r\n \t*/\r\n\tfunction pause() public onlyPauser whenNotPaused {\r\n    \t_paused = true;\r\n    \temit Paused(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Called by a pauser to unpause, returns to normal state.\r\n \t*/\r\n\tfunction unpause() public onlyPauser whenPaused {\r\n    \t_paused = false;\r\n    \temit Unpaused(_msgSender());\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Pausable token\r\n * @dev ERC721 modified with pausable transfers.\r\n */\r\ncontract ERC721Pausable is ERC721, Pausable {\r\n\tfunction approve(address to, uint256 tokenId) public whenNotPaused {\r\n    \tsuper.approve(to, tokenId);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address to, bool approved) public whenNotPaused {\r\n    \tsuper.setApprovalForAll(to, approved);\r\n\t}\r\n\r\n\tfunction _transferFrom(address from, address to, uint256 tokenId) internal whenNotPaused {\r\n    \tsuper._transferFrom(from, to, tokenId);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC721Burnable is Context, BurnerRole, ERC721 {\r\n\t/**\r\n \t* @dev Burns a specific ERC721 token.\r\n \t* @param tokenId uint256 id of the ERC721 token to be burned.\r\n \t*/\r\n\tfunction burn(uint256 tokenId) public {\r\n    \t//solhint-disable-next-line max-line-length\r\n    \trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\r\n    \t_burn(tokenId);\r\n\t}\r\n    \r\n\t/**\r\n \t* @dev Permits burns of a specific ERC721 token by Burner Role.\r\n \t* @param tokenId uint256 id of the ERC721 token to be burned.\r\n \t*/\r\n\tfunction operatorBurn(uint256 tokenId) public onlyBurner returns (bool) {\r\n    \t_burn(tokenId);\r\n\t}\r\n}\r\n\r\ncontract TAIT is MinterRole, OperatorRole, ERC721Metadata, ERC721Enumerable, ERC721Pausable, ERC721Burnable {\r\n\tusing SafeMath for uint256;\r\n    \r\n\tuint256 public taitAccounts; // tallies number of registered TAIT\r\n    \r\n\tconstructor(string memory name, string memory symbol) ERC721Metadata(name, symbol) public {\r\n   \tmintWithTokenURI(msg.sender, \"Operator\");\r\n\t}\r\n    \r\n\t// Operator-owned admission functions\r\n\tfunction addMinter(address account) public onlyOperator returns (bool) {\r\n    \t_addMinter(account);\r\n    \treturn true;\r\n\t}\r\n    \r\n\tfunction addPauser(address account) public onlyOperator returns (bool) {\r\n    \t_addPauser(account);\r\n    \treturn true;\r\n\t}\r\n    \r\n\tfunction addBurner(address account) public onlyOperator returns (bool) {\r\n    \t_addBurner(account);\r\n    \treturn true;\r\n\t}\r\n    \r\n\t// Operator-owned removal functions\r\n\tfunction removeMinter(address account) public onlyOperator returns (bool) {\r\n    \t_removeMinter(account);\r\n    \treturn true;\r\n\t}\r\n    \r\n\tfunction removePauser(address account) public onlyOperator returns (bool) {\r\n    \t_removePauser(account);\r\n    \treturn true;\r\n\t}\r\n\r\n\tfunction removeBurner(address account) public onlyOperator returns (bool) {\r\n    \t_removeBurner(account);\r\n    \treturn true;\r\n\t}\r\n    \r\n\t/**\r\n \t* @dev Function to mint tokens\r\n \t* @param to The address that will receive the minted tokens.\r\n \t* @param tokenURI The token URI of the minted token.\r\n \t* @return A boolean that indicates if the operation was successful.\r\n \t*/\r\n\tfunction mintWithTokenURI(address to, string memory tokenURI) public onlyMinter returns (bool) {\r\n    \tuint256 tokenId = taitAccounts.add(1);\r\n    \t_mint(to, tokenId);\r\n    \t_setTokenURI(tokenId, tokenURI);\r\n    \ttaitAccounts = taitAccounts.add(1); // tallies new filing to running total\r\n    \treturn true;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"operatorBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taitAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TAIT","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001d546865204163637265646974656420496e766573746f7220546f6b656e00000000000000000000000000000000000000000000000000000000000000000000045441495400000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d147c79187c9627e81ff36004cb1e21ef9438d5dd3f7ef8a48b984f38a0664a4"}]}