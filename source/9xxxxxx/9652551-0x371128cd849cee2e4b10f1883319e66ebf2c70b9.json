{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n// ╔═══╗───────╔╗╔══╗─╔╗╔═══╗──────╔╗\r\n// ║╔═╗║──────╔╝╚╣╔╗║╔╝╚╣╔═╗║─────╔╝╚╗\r\n// ║╚══╦╗╔╦══╦╩╗╔╣╚╝╚╬╗╔╣╚═╝╠══╦╦═╬╗╔╝\r\n// ╚══╗║╚╝║╔╗║╔╣║║╔═╗╠╣║║╔══╣╔╗╠╣╔╗╣║\r\n// ║╚═╝║║║║╔╗║║║╚╣╚═╝║║╚╣║──║╚╝║║║║║╚╗\r\n// ╚═══╩╩╩╩╝╚╩╝╚═╩═══╩╩═╩╝──╚══╩╩╝╚╩═╝\r\n// telegram: @smartbitpoint\r\n// hashtag: #smartbitpoint\r\n*/\r\npragma solidity ^0.5.7;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  address public manager;\r\n  address public adminWallet;\r\n  address public ownerWallet;\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n    adminWallet = 0x93fD13DD91236269cBDce8859521A0121E4A437E;\r\n    ownerWallet = 0x9FE5F739D3df1BEf612bbB8a06952D233C5474E3;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n  modifier onlyOwnerOrManager() {\r\n     require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n      _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n  function setManager(address _manager) public onlyOwnerOrManager {\r\n      manager = _manager;\r\n  }\r\n}\r\ncontract SmartBitPoint is Ownable {\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    uint REFERRER_1_LEVEL_LIMIT = 3;\r\n    uint PERIOD_LENGTH = 180 days;\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n    constructor() public {\r\n        LEVEL_PRICE[1] = 0.03 ether;\r\n        LEVEL_PRICE[2] = 0.09 ether;\r\n        LEVEL_PRICE[3] = 0.27 ether;\r\n        LEVEL_PRICE[4] = 0.81 ether;\r\n        LEVEL_PRICE[5] = 2.43 ether;\r\n        LEVEL_PRICE[6] = 7.29 ether;\r\n        LEVEL_PRICE[7] = 21.87 ether;\r\n        LEVEL_PRICE[8] = 65.61 ether;\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        users[ownerWallet].referral.push(adminWallet);\r\n        userList[currUserID] = ownerWallet;\r\n        users[ownerWallet].levelExpired[1] = 77777777777;\r\n        users[ownerWallet].levelExpired[2] = 77777777777;\r\n        users[ownerWallet].levelExpired[3] = 77777777777;\r\n        users[ownerWallet].levelExpired[4] = 77777777777;\r\n        users[ownerWallet].levelExpired[5] = 77777777777;\r\n        users[ownerWallet].levelExpired[6] = 77777777777;\r\n        users[ownerWallet].levelExpired[7] = 77777777777;\r\n        users[ownerWallet].levelExpired[8] = 77777777777;\r\n        currUserID++;\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 1,\r\n            referral : new address[](0)\r\n        });\r\n        users[adminWallet] = userStruct;\r\n        userList[currUserID] = adminWallet;\r\n        users[adminWallet].levelExpired[1] = 77777777777;\r\n        users[adminWallet].levelExpired[2] = 77777777777;\r\n        users[adminWallet].levelExpired[3] = 77777777777;\r\n        users[adminWallet].levelExpired[4] = 77777777777;\r\n        users[adminWallet].levelExpired[5] = 77777777777;\r\n        users[adminWallet].levelExpired[6] = 77777777777;\r\n        users[adminWallet].levelExpired[7] = 77777777777;\r\n        users[adminWallet].levelExpired[8] = 77777777777;\r\n    }\r\n    function () external payable {\r\n        uint level;\r\n        if(msg.value == LEVEL_PRICE[1]){\r\n            level = 1;\r\n        }else if(msg.value == LEVEL_PRICE[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_PRICE[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_PRICE[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_PRICE[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_PRICE[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_PRICE[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_PRICE[8]){\r\n            level = 8;\r\n        }else {\r\n            revert('Incorrect Value send');\r\n        }\r\n        if(users[msg.sender].isExist){\r\n            buyLevel(level);\r\n        } else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (users[referrer].isExist){\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n            regUser(refId);\r\n        } else {\r\n            revert(\"Please buy first level\");\r\n        }\r\n    }\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n        require(msg.value==LEVEL_PRICE[1], 'Incorrect Value');\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n        }\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            referral : new address[](0)\r\n        });\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].levelExpired[2] = 0;\r\n        users[msg.sender].levelExpired[3] = 0;\r\n        users[msg.sender].levelExpired[4] = 0;\r\n        users[msg.sender].levelExpired[5] = 0;\r\n        users[msg.sender].levelExpired[6] = 0;\r\n        users[msg.sender].levelExpired[7] = 0;\r\n        users[msg.sender].levelExpired[8] = 0;\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        payForLevel(1, msg.sender);\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n        require( _level>0 && _level<=8, 'Incorrect level');\r\n        if(_level == 1){\r\n            require(msg.value==LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            require(msg.value==LEVEL_PRICE[_level], 'Incorrect Value');\r\n            for(uint l =_level-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n            if(users[msg.sender].levelExpired[_level] == 0){\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_level, msg.sender);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    function payForLevel(uint _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        if(_level == 1 || _level == 5){\r\n            referer = userList[users[_user].referrerID];\r\n        } else if(_level == 2 || _level == 6){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if(_level == 3 || _level == 7){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if(_level == 4 || _level == 8){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n        if(!users[referer].isExist){\r\n            referer = userList[1];\r\n        }\r\n        if(users[referer].levelExpired[_level] >= now ){\r\n            bool result;\r\n            result = address(uint160(referer)).send(LEVEL_PRICE[_level]);\r\n            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n        } else {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n            payForLevel(_level,referer);\r\n        }\r\n    }\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT){\r\n            return _user;\r\n        }\r\n        address[] memory referrals = new address[](363);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        for(uint i =0; i<363;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT){\r\n                if(i<120){\r\n                    referrals[(i+1)*3] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[referrals[i]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[referrals[i]].referral[2];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n\r\n    }\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"SmartBitPoint","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0dfc2d0406083a435164a05f178538e4455c4e6fed7ccea6f72b774cc5ea9c33"}]}