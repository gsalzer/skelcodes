{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeee...EEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;    // Address of token contract\r\n    string tokenType; // Token type (\"ERC20\" by default)\r\n    uint256 rate;     // Price per share (1e18)\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n    * struct Component {\r\n    *     address token;    // Address of token contract\r\n    *     string tokenType; // Token type (\"ERC20\" by default)\r\n    *     uint256 rate;     // Price per share (1e18)\r\n    * }\r\n    */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @title Adapter for ERC20 tokens.\r\n * @dev Implementation of TokenAdapter interface function.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract ERC20TokenAdapter is TokenAdapter {\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address internal constant CSAI = 0x45A2FDfED7F7a2c791fb1bdF6075b83faD821ddE;\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        if (token == ETH) {\r\n            return TokenMetadata({\r\n                token: ETH,\r\n                name: \"Ether\",\r\n                symbol: \"ETH\",\r\n                decimals: uint8(18)\r\n            });\r\n        } else if (token == SAI) {\r\n            return TokenMetadata({\r\n                token: SAI,\r\n                name: \"Sai Stablecoin v1.0\",\r\n                symbol: \"SAI\",\r\n                decimals: uint8(18)\r\n            });\r\n        } else if (token == CSAI) {\r\n            return TokenMetadata({\r\n                token: CSAI,\r\n                name: \"Compound Sai\",\r\n                symbol: \"cSAI\",\r\n                decimals: uint8(8)\r\n            });\r\n        } else {\r\n            return TokenMetadata({\r\n                token: token,\r\n                name: getName(token),\r\n                symbol: getSymbol(token),\r\n                decimals: ERC20(token).decimals()\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Empty Component array.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address) external view override returns (Component[] memory) {\r\n        return new Component[](0);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to get non-ERC20 tokens' names.\r\n     */\r\n    function getName(address token) internal view returns (string memory) {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (, bytes memory returnData) = token.staticcall(\r\n            abi.encodeWithSelector(ERC20(token).name.selector)\r\n        );\r\n\r\n        if (returnData.length == 32) {\r\n            return convertToString(abi.decode(returnData, (bytes32)));\r\n        } else {\r\n            return abi.decode(returnData, (string));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to get non-ERC20 tokens' symbols.\r\n     */\r\n    function getSymbol(address token) internal view returns (string memory) {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (, bytes memory returnData) = token.staticcall(\r\n            abi.encodeWithSelector(ERC20(token).symbol.selector)\r\n        );\r\n\r\n        if (returnData.length == 32) {\r\n            return convertToString(abi.decode(returnData, (bytes32)));\r\n        } else {\r\n            return abi.decode(returnData, (string));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert bytes32 to string.\r\n     */\r\n    function convertToString(bytes32 data) internal pure returns (string memory) {\r\n        uint256 length = 0;\r\n        bytes memory result;\r\n\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            if (data[i] != byte(0)) {\r\n                length++;\r\n            }\r\n        }\r\n\r\n        result = new bytes(length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            result[i] = data[i];\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20TokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://7f621010d8c73762c2eb32df555367bbad2ad59a6311de5b83fcade9d633c3d2"}]}