{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/adapters/mainnet/mainnetCDaiAdapter.sol\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0 >=0.5.12 <0.6.0 >=0.5.15 <0.6.0;\n\n////// src/interfaces/ICToken.sol\n/* pragma solidity ^0.5.15; */\n\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function getCash() external view returns (uint);\n    function exchangeRateCurrent() external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function balanceOfUnderlying(address account) external returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n////// src/adapters/mainnet/mainnetCDaiAdapter.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.12; */\n\n/* import \"../../interfaces/ICToken.sol\"; */\n\ncontract MainnetCDaiAdapter {\n\n    constructor () public { }\n\n    ICToken constant cdai = ICToken(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\n\n    // takes raw cdai amount\n    // unwraps it into dai\n    // deposits dai amount in chai\n    function intakeRaw (uint256 amount) public returns (uint256) {\n\n        bool success = cdai.transferFrom(msg.sender, address(this), amount);\n\n        if (!success) {\n            if (cdai.balanceOf(msg.sender) < amount) revert(\"CDai/insufficient-balance\");\n            else revert(\"CDai/transferFrom-failed\");\n        }\n\n        uint256 rate = cdai.exchangeRateStored();\n        return wmul(amount, rate);\n\n    }\n\n    function intakeNumeraire (uint256 amount) public returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateCurrent();\n        uint256 cdaiAmount = wdiv(amount, rate);\n\n        bool success = cdai.transferFrom(msg.sender, address(this), cdaiAmount);\n\n        if (!success) {\n            if (cdai.balanceOf(msg.sender) < cdaiAmount) revert(\"CDai/insufficient-balance\");\n            else revert(\"CDai/transferFrom-failed\");\n        }\n\n        return cdaiAmount;\n\n    }\n\n    function outputRaw (address dst, uint256 amount) public returns (uint256) {\n\n        bool success = cdai.transfer(msg.sender, amount);\n\n        if (!success) {\n            if (cdai.balanceOf(address(this)) < amount) revert(\"CDai/insufficient-balance\");\n            else revert(\"CDai/transfer-failed\");\n        }\n\n        uint256 rate = cdai.exchangeRateStored();\n\n        return wmul(amount, rate);\n\n    }\n\n    // unwraps numeraire amount of dai from chai\n    // wraps it into cdai amount\n    // sends that to destination\n    function outputNumeraire (address dst, uint256 amount) public returns (uint256) {\n\n        uint rate = cdai.exchangeRateCurrent();\n        uint cdaiAmount = wdiv(amount, rate);\n\n        bool success = cdai.transfer(dst, cdaiAmount);\n\n        if (!success) {\n            if (cdai.balanceOf(address(this)) < cdaiAmount) revert(\"CDai/insufficient-balance\");\n            else revert(\"CDai/transfer-failed\");\n        }\n\n        return cdaiAmount;\n\n    }\n\n    function viewRawAmount (uint256 amount) public view returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateStored();\n        return wdiv(amount, rate);\n\n    }\n\n    function viewNumeraireAmount (uint256 amount) public view returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateStored();\n        return wmul(amount, rate);\n\n    }\n\n    function viewNumeraireBalance (address addr) public view returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateStored();\n        uint256 balance = cdai.balanceOf(addr);\n        return wmul(balance, rate);\n\n    }\n\n    // takes raw amount and gives numeraire amount\n    function getRawAmount (uint256 amount) public returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateCurrent();\n        return wdiv(amount, rate);\n\n    }\n\n    // takes raw amount and gives numeraire amount\n    function getNumeraireAmount (uint256 amount) public returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateCurrent();\n        uint256 numeraireAmount = wmul(amount, rate);\n        return numeraireAmount;\n\n    }\n\n    function getNumeraireBalance () public returns (uint256) {\n\n        return cdai.balanceOfUnderlying(address(this));\n\n    }\n\n    uint constant WAD = 10 ** 18;\n    \n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function wdivup(uint x, uint y) internal pure returns (uint z) {\n        // always rounds up\n        z = add(mul(x, WAD), sub(y, 1)) / y;\n    }\n\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainnetCDaiAdapter","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}