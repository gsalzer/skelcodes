{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/iface/ITokenPriceProvider.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n/// @title ITokenPriceProvider\r\n/// @author Brecht Devos  - <brcht@loopring.org>\r\ncontract ITokenPriceProvider\r\n{\r\n    /// @dev Converts USD to LRC\r\n    /// @param usd The amount of USD (10**18 == 1 USD)\r\n    /// @return The amount of LRC\r\n    function usd2lrc(uint usd)\r\n        external\r\n        view\r\n        returns (uint);\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/price-providers/MovingAveragePriceProvider.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract MovingAveragePriceProvider is ITokenPriceProvider\r\n{\r\n    using MathUint    for uint;\r\n\r\n    ITokenPriceProvider public provider;\r\n\r\n    uint public movingAverageTimePeriod;\r\n    uint public numMovingAverageDataPoints;\r\n    uint public defaultValue;\r\n\r\n    uint public lastUpdateTime;\r\n\r\n    uint[] internal history;\r\n    uint internal movingAverage;\r\n    uint internal updateIndex;\r\n\r\n    event MovingAverageUpdated(\r\n        uint timestamp,\r\n        uint defaultValueUSD,\r\n        uint movingAverageLRC\r\n    );\r\n\r\n    constructor(\r\n        ITokenPriceProvider _provider,\r\n        uint                _movingAverageTimePeriod,\r\n        uint                _numMovingAverageDataPoints,\r\n        uint                _defaultValue\r\n        )\r\n        public\r\n    {\r\n        require(_movingAverageTimePeriod > 0, \"INVALID_INPUT\");\r\n        require(_numMovingAverageDataPoints > 0, \"INVALID_INPUT\");\r\n        require(_defaultValue > 0, \"INVALID_INPUT\");\r\n\r\n        provider = _provider;\r\n        movingAverageTimePeriod = _movingAverageTimePeriod;\r\n        numMovingAverageDataPoints = _numMovingAverageDataPoints;\r\n        defaultValue = _defaultValue;\r\n\r\n        // Fill in the initial data points with the current LRC costs\r\n        uint currentConversion = provider.usd2lrc(defaultValue);\r\n        for (uint i = 0; i < numMovingAverageDataPoints; i++) {\r\n            history.push(currentConversion);\r\n        }\r\n        movingAverage = currentConversion;\r\n        lastUpdateTime = now;\r\n    }\r\n\r\n    function usd2lrc(uint usd)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return usd.mul(movingAverage) / defaultValue;\r\n    }\r\n\r\n    /// @dev Updates the simple moving average.\r\n    ///      Can be called by anyone a single time every day.\r\n    function updateMovingAverage()\r\n        external\r\n    {\r\n        // Allow the costs to be updated every time span\r\n        require(now >= lastUpdateTime.add(movingAverageTimePeriod), \"TOO_SOON\");\r\n\r\n        // Get the current price. Use the history array as a circular buffer\r\n        history[updateIndex] = provider.usd2lrc(defaultValue);\r\n        updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;\r\n\r\n        // Calculate the simple moving average over `numMovingAverageDataPoints` points\r\n        uint newMovingAverage = 0;\r\n        for (uint i = 0; i < numMovingAverageDataPoints; i++) {\r\n            newMovingAverage = newMovingAverage.add(history[i]);\r\n        }\r\n        movingAverage = newMovingAverage / numMovingAverageDataPoints;\r\n\r\n        lastUpdateTime = now;\r\n\r\n        emit MovingAverageUpdated(now, defaultValue, movingAverage);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_movingAverageTimePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numMovingAverageDataPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultValueUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"movingAverageLRC\",\"type\":\"uint256\"}],\"name\":\"MovingAverageUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"movingAverageTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMovingAverageDataPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"contract ITokenPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMovingAverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"usd2lrc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MovingAveragePriceProvider","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003b740fee3ed82fa676286938e124a8bb74553f93000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","LicenseType":"None","SwarmSource":"bzzr://0a2f3257921f9bd790c2eeda78e4514c1878eb63ce94e11db89b1283d7ae2a88"}]}