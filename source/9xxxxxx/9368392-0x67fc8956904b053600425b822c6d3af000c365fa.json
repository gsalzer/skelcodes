{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: 9be1a5a\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity ^0.5.8;\n\n\ninterface IShifter {\n    function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function shiftOut(bytes calldata _to, uint256 _amount) external returns (uint256);\n    function shiftInFee() external view returns (uint256);\n    function shiftOutFee() external view returns (uint256);\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IShifterRegistry {\n\n    \n    \n    event LogShifterRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterUpdated(address indexed _tokenAddress, address indexed _currentShifterAddress, address indexed _newShifterAddress);\n\n    \n    function getShifters(address _start, uint256 _count) external view returns (IShifter[] memory);\n\n    \n    function getShiftedTokens(address _start, uint256 _count) external view returns (IERC20[] memory);\n\n    \n    \n    \n    \n    function getShifterByToken(address _tokenAddress) external view returns (IShifter);\n\n    \n    \n    \n    \n    function getShifterBySymbol(string calldata _tokenSymbol) external view returns (IShifter);\n\n    \n    \n    \n    \n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\n}\n\ncontract BasicAdapter {\n\n   function shiftIn(\n       \n       IShifterRegistry _shifterRegistry,\n       string calldata _symbol,\n       address         _address,\n       \n       uint256         _amount,\n       bytes32         _nonce,\n       bytes calldata  _sig\n   ) external {\n       bytes32 payloadHash = keccak256(abi.encode(_shifterRegistry, _symbol, _address));\n       uint256 amount = _shifterRegistry.getShifterBySymbol(_symbol).shiftIn(payloadHash, _amount, _nonce, _sig);\n       _shifterRegistry.getTokenBySymbol(_symbol).transfer(_address, amount);\n   }\n\n   function shiftOut(\n       IShifterRegistry _shifterRegistry,\n       string calldata _symbol,\n       bytes calldata _to,\n       uint256        _amount\n   ) external {\n       require(_shifterRegistry.getTokenBySymbol(_symbol).transferFrom(msg.sender, address(this), _amount), \"token transfer failed\");\n       _shifterRegistry.getShifterBySymbol(_symbol).shiftOut(_to, _amount);\n   }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IShifterRegistry\",\"name\":\"_shifterRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"shiftIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IShifterRegistry\",\"name\":\"_shifterRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shiftOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BasicAdapter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://0b7ffbe89cb4f06a4f7e57212dbe9e668529a041280c61f151cb852f2f0256f0"}]}