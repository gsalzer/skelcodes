{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/ERC20BridgeProxy.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/LibBytes.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/Authorizable.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"./interfaces/IAssetProxy.sol\\\";\\nimport \\\"./interfaces/IERC20Bridge.sol\\\";\\n\\n\\ncontract ERC20BridgeProxy is\\n    IAssetProxy,\\n    Authorizable\\n{\\n    using LibBytes for bytes;\\n    using LibSafeMath for uint256;\\n\\n    // @dev Id of this proxy. Also the result of a successful bridge call.\\n    //      bytes4(keccak256(\\\"ERC20Bridge(address,address,bytes)\\\"))\\n    bytes4 constant private PROXY_ID = 0xdc1600f3;\\n\\n    /// @dev Calls a bridge contract to transfer `amount` of ERC20 from `from`\\n    ///      to `to`. Asserts that the balance of `to` has increased by `amount`.\\n    /// @param assetData Abi-encoded data for this asset proxy encoded as:\\n    ///          abi.encodeWithSelector(\\n    ///             bytes4 PROXY_ID,\\n    ///             address tokenAddress,\\n    ///             address bridgeAddress,\\n    ///             bytes bridgeData\\n    ///          )\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    function transferFrom(\\n        bytes calldata assetData,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        // Extract asset data fields.\\n        (\\n            address tokenAddress,\\n            address bridgeAddress,\\n            bytes memory bridgeData\\n        ) = abi.decode(\\n            assetData.sliceDestructive(4, assetData.length),\\n            (address, address, bytes)\\n        );\\n\\n        // Remember the balance of `to` before calling the bridge.\\n        uint256 balanceBefore = balanceOf(tokenAddress, to);\\n        // Call the bridge, who should transfer `amount` of `tokenAddress` to\\n        // `to`.\\n        bytes4 success = IERC20Bridge(bridgeAddress).bridgeTransferFrom(\\n            tokenAddress,\\n            from,\\n            to,\\n            amount,\\n            bridgeData\\n        );\\n        // Bridge must return the proxy ID to indicate success.\\n        require(success == PROXY_ID, \\\"BRIDGE_FAILED\\\");\\n        // Ensure that the balance of `to` has increased by at least `amount`.\\n        require(\\n            balanceBefore.safeAdd(amount) <= balanceOf(tokenAddress, to),\\n            \\\"BRIDGE_UNDERPAY\\\"\\n        );\\n    }\\n\\n    /// @dev Gets the proxy id associated with this asset proxy.\\n    /// @return proxyId The proxy id.\\n    function getProxyId()\\n        external\\n        pure\\n        returns (bytes4 proxyId)\\n    {\\n        return PROXY_ID;\\n    }\\n\\n    /// @dev Retrieves the balance of `owner` for this asset.\\n    /// @return balance The balance of the ERC20 token being transferred by this\\n    ///         asset proxy.\\n    function balanceOf(bytes calldata assetData, address owner)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        (address tokenAddress) = abi.decode(\\n            assetData.sliceDestructive(4, assetData.length),\\n            (address)\\n        );\\n        return balanceOf(tokenAddress, owner);\\n    }\\n\\n    /// @dev Retrieves the balance of `owner` given an ERC20 address.\\n    /// @return balance The balance of the ERC20 token for `owner`.\\n    function balanceOf(address tokenAddress, address owner)\\n        private\\n        view\\n        returns (uint256 balance)\\n    {\\n        return IERC20Token(tokenAddress).balanceOf(owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibBytes.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./LibBytesRichErrors.sol\\\";\\nimport \\\"./LibRichErrors.sol\\\";\\n\\n\\nlibrary LibBytes {\\n\\n    using LibBytes for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes1 result)\\n    {\\n        if (b.length == 0) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                b.length,\\n                0\\n            ));\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n        internal\\n        pure\\n        returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n        internal\\n        pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        if (b.length < index + 4) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                b.length,\\n                index + 4\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\nlibrary LibBytesRichErrors {\\n\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\\n        0x28006595;\\n\\n    // solhint-disable func-name-mixedcase\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\\n            errorCode,\\n            offset,\\n            required\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\nlibrary LibRichErrors {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\\n        0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(\\n        string memory message\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibSafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.9;\\n\\nimport \\\"./LibRichErrors.sol\\\";\\nimport \\\"./LibSafeMathRichErrors.sol\\\";\\n\\n\\nlibrary LibSafeMath {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.9;\\n\\n\\nlibrary LibSafeMathRichErrors {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/Authorizable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./interfaces/IAuthorizable.sol\\\";\\nimport \\\"./LibAuthorizableRichErrors.sol\\\";\\nimport \\\"./LibRichErrors.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\ncontract Authorizable is\\n    Ownable,\\n    IAuthorizable\\n{\\n    /// @dev Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized {\\n        _assertSenderIsAuthorized();\\n        _;\\n    }\\n\\n    /// @dev Whether an adderss is authorized to call privileged functions.\\n    /// @param 0 Address to query.\\n    /// @return 0 Whether the address is authorized.\\n    mapping (address => bool) public authorized;\\n    /// @dev Whether an adderss is authorized to call privileged functions.\\n    /// @param 0 Index of authorized address.\\n    /// @return 0 Authorized address.\\n    address[] public authorities;\\n\\n    /// @dev Initializes the `owner` address.\\n    constructor()\\n        public\\n        Ownable()\\n    {}\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external\\n        onlyOwner\\n    {\\n        _addAuthorizedAddress(target);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external\\n        onlyOwner\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\\n        }\\n        for (uint256 i = 0; i < authorities.length; i++) {\\n            if (authorities[i] == target) {\\n                _removeAuthorizedAddressAtIndex(target, i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external\\n        onlyOwner\\n    {\\n        _removeAuthorizedAddressAtIndex(target, index);\\n    }\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return authorities;\\n    }\\n\\n    /// @dev Reverts if msg.sender is not authorized.\\n    function _assertSenderIsAuthorized()\\n        internal\\n        view\\n    {\\n        if (!authorized[msg.sender]) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.SenderNotAuthorizedError(msg.sender));\\n        }\\n    }\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function _addAuthorizedAddress(address target)\\n        internal\\n    {\\n        // Ensure that the target is not the zero address.\\n        if (target == address(0)) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.ZeroCantBeAuthorizedError());\\n        }\\n\\n        // Ensure that the target is not already authorized.\\n        if (authorized[target]) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetAlreadyAuthorizedError(target));\\n        }\\n\\n        authorized[target] = true;\\n        authorities.push(target);\\n        emit AuthorizedAddressAdded(target, msg.sender);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function _removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        internal\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\\n        }\\n        if (index >= authorities.length) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.IndexOutOfBoundsError(\\n                index,\\n                authorities.length\\n            ));\\n        }\\n        if (authorities[index] != target) {\\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.AuthorizedAddressMismatchError(\\n                authorities[index],\\n                target\\n            ));\\n        }\\n\\n        delete authorized[target];\\n        authorities[index] = authorities[authorities.length - 1];\\n        authorities.length -= 1;\\n        emit AuthorizedAddressRemoved(target, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/interfaces/IAuthorizable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n\\ncontract IAuthorizable is\\n    IOwnable\\n{\\n    // Event logged when a new address is authorized.\\n    event AuthorizedAddressAdded(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    // Event logged when a currently authorized address is unauthorized.\\n    event AuthorizedAddressRemoved(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external;\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IOwnable {\\n\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner)\\n        public;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibAuthorizableRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\nlibrary LibAuthorizableRichErrors {\\n\\n    // bytes4(keccak256(\\\"AuthorizedAddressMismatchError(address,address)\\\"))\\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\\n        0x140a84db;\\n\\n    // bytes4(keccak256(\\\"IndexOutOfBoundsError(uint256,uint256)\\\"))\\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\\n        0xe9f83771;\\n\\n    // bytes4(keccak256(\\\"SenderNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xb65a25b9;\\n\\n    // bytes4(keccak256(\\\"TargetAlreadyAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\\n        0xde16f1a0;\\n\\n    // bytes4(keccak256(\\\"TargetNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xeb5108a2;\\n\\n    // bytes4(keccak256(\\\"ZeroCantBeAuthorizedError()\\\"))\\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\\n        hex\\\"57654fe4\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function AuthorizedAddressMismatchError(\\n        address authorized,\\n        address target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\\n            authorized,\\n            target\\n        );\\n    }\\n\\n    function IndexOutOfBoundsError(\\n        uint256 index,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\\n            index,\\n            length\\n        );\\n    }\\n\\n    function SenderNotAuthorizedError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            sender\\n        );\\n    }\\n\\n    function TargetAlreadyAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function TargetNotAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function ZeroCantBeAuthorizedError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/Ownable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./interfaces/IOwnable.sol\\\";\\nimport \\\"./LibOwnableRichErrors.sol\\\";\\nimport \\\"./LibRichErrors.sol\\\";\\n\\n\\ncontract Ownable is\\n    IOwnable\\n{\\n    /// @dev The owner of this contract.\\n    /// @return 0 The owner address.\\n    address public owner;\\n\\n    constructor ()\\n        public\\n    {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertSenderIsOwner();\\n        _;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner)\\n        public\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\\n        } else {\\n            owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    function _assertSenderIsOwner()\\n        internal\\n        view\\n    {\\n        if (msg.sender != owner) {\\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/LibOwnableRichErrors.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.9;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\"))\\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\\n        0x1de45ad1;\\n\\n    // bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\\n        hex\\\"e69edc3e\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ONLY_OWNER_ERROR_SELECTOR,\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IERC20Token {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address _spender, uint256 _value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IAssetProxy.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IAssetProxy {\\n\\n    /// @dev Transfers assets. Either succeeds or throws.\\n    /// @param assetData Byte array encoded for the respective asset proxy.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    function transferFrom(\\n        bytes calldata assetData,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n    \\n    /// @dev Gets the proxy id associated with the proxy address.\\n    /// @return Proxy id.\\n    function getProxyId()\\n        external\\n        pure\\n        returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IERC20Bridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IERC20Bridge {\\n\\n    /// @dev Result of a successful bridge call.\\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\\n\\n    /// @dev Emitted when a trade occurs.\\n    /// @param inputToken The token the bridge is converting from.\\n    /// @param outputToken The token the bridge is converting to.\\n    /// @param inputTokenAmount Amount of input token.\\n    /// @param outputTokenAmount Amount of output token.\\n    /// @param from The `from` address in `bridgeTransferFrom()`\\n    /// @param to The `to` address in `bridgeTransferFrom()`\\n    event ERC20BridgeTransfer(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        address from,\\n        address to\\n    );\\n\\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\\n    /// @param tokenAddress The address of the ERC20 token to transfer.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\\n    /// @return success The magic bytes `0xdc1600f3` if successful.\\n    function bridgeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/ChaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/IChai.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\n\\n\\n// solhint-disable space-after-comma\\ncontract ChaiBridge is\\n    IERC20Bridge,\\n    DeploymentConstants\\n{\\n    /// @dev Withdraws `amount` of `from` address's Dai from the Chai contract.\\n    ///      Transfers `amount` of Dai to `to` address.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @return success The magic bytes `0xdc1600f3` if successful.\\n    function bridgeTransferFrom(\\n        address /* tokenAddress */,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata /* bridgeData */\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Ensure that only the `ERC20BridgeProxy` can call this function.\\n        require(\\n            msg.sender == _getERC20BridgeProxyAddress(),\\n            \\\"ChaiBridge/ONLY_CALLABLE_BY_ERC20_BRIDGE_PROXY\\\"\\n        );\\n\\n        // Withdraw `from` address's Dai.\\n        // NOTE: This contract must be approved to spend Chai on behalf of `from`.\\n        bytes memory drawCalldata = abi.encodeWithSelector(\\n            IChai(address(0)).draw.selector,\\n            from,\\n            amount\\n        );\\n\\n        (bool success,) = _getChaiAddress().call(drawCalldata);\\n        require(\\n            success,\\n            \\\"ChaiBridge/DRAW_DAI_FAILED\\\"\\n        );\\n\\n        // Transfer Dai to `to`\\n        // This will never fail if the `draw` call was successful\\n        IERC20Token(_getDaiAddress()).transfer(to, amount);\\n\\n        return BRIDGE_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IChai.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\n\\n\\ncontract PotLike {\\n    function chi() external returns (uint256);\\n    function rho() external returns (uint256);\\n    function drip() external returns (uint256);\\n    function join(uint256) external;\\n    function exit(uint256) external;\\n}\\n\\n\\n// The actual Chai contract can be found here: https://github.com/dapphub/chai\\ncontract IChai is\\n    IERC20Token\\n{\\n    /// @dev Withdraws Dai owned by `src`\\n    /// @param src Address that owns Dai.\\n    /// @param wad Amount of Dai to withdraw.\\n    function draw(\\n        address src,\\n        uint256 wad\\n    )\\n        external;\\n\\n    /// @dev Queries Dai balance of Chai holder.\\n    /// @param usr Address of Chai holder.\\n    /// @return Dai balance.\\n    function dai(address usr)\\n        external\\n        returns (uint256);\\n\\n    /// @dev Queries the Pot contract used by the Chai contract.\\n    function pot()\\n        external\\n        returns (PotLike);\\n\\n    /// @dev Deposits Dai in exchange for Chai\\n    /// @param dst Address to receive Chai.\\n    /// @param wad Amount of Dai to deposit.\\n    function join(\\n        address dst,\\n        uint256 wad\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/DeploymentConstants.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract DeploymentConstants {\\n    /// @dev Mainnet address of the WETH contract.\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    // /// @dev Kovan address of the WETH contract.\\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    // ///@dev Kovan address of the `Dai` (multi-collateral) contract\\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\\n    /// @dev Mainnet address of the `Chai` contract\\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\\n    /// @dev Mainnet address of the 0x DevUtils contract.\\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\\n    // /// @dev Kovan address of the 0x DevUtils contract.\\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\\n    /// @dev Kyber ETH pseudo-address.\\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev Mainnet address of the dYdX contract.\\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n\\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\\n    function _getKyberNetworkProxyAddress()\\n        internal\\n        view\\n        returns (address kyberAddress)\\n    {\\n        return KYBER_NETWORK_PROXY_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the WETH address.\\n    /// @return wethAddress The WETH address.\\n    function _getWethAddress()\\n        internal\\n        view\\n        returns (address wethAddress)\\n    {\\n        return WETH_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\\n    function _getUniswapExchangeFactoryAddress()\\n        internal\\n        view\\n        returns (address uniswapAddress)\\n    {\\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\\n    function _getEth2DaiAddress()\\n        internal\\n        view\\n        returns (address eth2daiAddress)\\n    {\\n        return ETH2DAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\\n    function _getERC20BridgeProxyAddress()\\n        internal\\n        view\\n        returns (address erc20BridgeProxyAddress)\\n    {\\n        return ERC20_BRIDGE_PROXY_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `Dai` contract.\\n    /// @return daiAddress The `Dai` contract.\\n    function _getDaiAddress()\\n        internal\\n        view\\n        returns (address daiAddress)\\n    {\\n        return DAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `Chai` contract.\\n    /// @return chaiAddress The `Chai` contract.\\n    function _getChaiAddress()\\n        internal\\n        view\\n        returns (address chaiAddress)\\n    {\\n        return CHAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\\n    /// @return devUtils The 0x `DevUtils` contract address.\\n    function _getDevUtilsAddress()\\n        internal\\n        view\\n        returns (address devUtils)\\n    {\\n        return DEV_UTILS_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the DyDx contract.\\n    /// @return exchange The DyDx exchange contract.\\n    function _getDydxAddress()\\n        internal\\n        view\\n        returns (address dydxAddress)\\n    {\\n        return DYDX_ADDRESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/CurveBridge.sol\": {\r\n      \"content\": \"\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\\\";\\nimport \\\"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\n\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable space-after-comma\\ncontract CurveBridge is\\n    IERC20Bridge,\\n    IWallet,\\n    DeploymentConstants\\n{\\n    struct CurveBridgeData {\\n        address curveAddress;\\n        int128 fromCoinIdx;\\n        int128 toCoinIdx;\\n        int128 version;\\n    }\\n\\n    /// @dev Callback for `ICurve`. Tries to buy `amount` of\\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\\n    ///      (DAI, USDC) to the Curve contract, then transfers the bought\\n    ///      tokens to `to`.\\n    /// @param toTokenAddress The token to give to `to` (i.e DAI, USDC, USDT).\\n    /// @param from The maker (this contract).\\n    /// @param to The recipient of the bought tokens.\\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\\n    /// @param bridgeData The abi-encoeded \\\"from\\\" token address.\\n    /// @return success The magic bytes if successful.\\n    function bridgeTransferFrom(\\n        address toTokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Decode the bridge data to get the Curve metadata.\\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\\n\\n        address fromTokenAddress = ICurve(data.curveAddress).underlying_coins(data.fromCoinIdx);\\n        require(toTokenAddress != fromTokenAddress, \\\"CurveBridge/INVALID_PAIR\\\");\\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\\n        LibERC20Token.approveIfBelow(fromTokenAddress, data.curveAddress, fromTokenBalance);\\n\\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\\n        if (data.version == 0) {\\n            ICurve(data.curveAddress).exchange_underlying(\\n                data.fromCoinIdx,\\n                data.toCoinIdx,\\n                // dx\\n                fromTokenBalance,\\n                // min dy\\n                amount,\\n                // expires\\n                block.timestamp + 1\\n            );\\n        } else {\\n            ICurve(data.curveAddress).exchange_underlying(\\n                data.fromCoinIdx,\\n                data.toCoinIdx,\\n                // dx\\n                fromTokenBalance,\\n                // min dy\\n                amount\\n            );\\n        }\\n\\n        uint256 toTokenBalance = IERC20Token(toTokenAddress).balanceOf(address(this));\\n        // Transfer the converted `toToken`s to `to`.\\n        LibERC20Token.transfer(toTokenAddress, to, toTokenBalance);\\n\\n        emit ERC20BridgeTransfer(\\n            fromTokenAddress,\\n            toTokenAddress,\\n            fromTokenBalance,\\n            toTokenBalance,\\n            from,\\n            to\\n        );\\n        return BRIDGE_SUCCESS;\\n    }\\n\\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\\n    ///      and sign for itself in orders. Always succeeds.\\n    /// @return magicValue Magic success bytes, always.\\n    function isValidSignature(\\n        bytes32,\\n        bytes calldata\\n    )\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        return LEGACY_WALLET_MAGIC_VALUE;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/LibERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/LibRichErrors.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibBytes.sol\\\";\\nimport \\\"../src/interfaces/IERC20Token.sol\\\";\\n\\n\\nlibrary LibERC20Token {\\n    bytes constant private DECIMALS_CALL_DATA = hex\\\"313ce567\\\";\\n\\n    /// @dev Calls `IERC20Token(token).approve()`.\\n    ///      Reverts if `false` is returned or if the return\\n    ///      data length is nonzero and not 32 bytes.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param allowance The allowance to set.\\n    function approve(\\n        address token,\\n        address spender,\\n        uint256 allowance\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IERC20Token(0).approve.selector,\\n            spender,\\n            allowance\\n        );\\n        _callWithOptionalBooleanResult(token, callData);\\n    }\\n\\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\\n    ///      maximum if the current approval is not already >= an amount.\\n    ///      Reverts if `false` is returned or if the return\\n    ///      data length is nonzero and not 32 bytes.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param amount The minimum allowance needed.\\n    function approveIfBelow(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\\n            approve(token, spender, uint256(-1));\\n        }\\n    }\\n\\n    /// @dev Calls `IERC20Token(token).transfer()`.\\n    ///      Reverts if `false` is returned or if the return\\n    ///      data length is nonzero and not 32 bytes.\\n    /// @param token The address of the token contract.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function transfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IERC20Token(0).transfer.selector,\\n            to,\\n            amount\\n        );\\n        _callWithOptionalBooleanResult(token, callData);\\n    }\\n\\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\\n    ///      Reverts if `false` is returned or if the return\\n    ///      data length is nonzero and not 32 bytes.\\n    /// @param token The address of the token contract.\\n    /// @param from The owner of the tokens.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IERC20Token(0).transferFrom.selector,\\n            from,\\n            to,\\n            amount\\n        );\\n        _callWithOptionalBooleanResult(token, callData);\\n    }\\n\\n    /// @dev Retrieves the number of decimals for a token.\\n    ///      Returns `18` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @return tokenDecimals The number of decimals places for the token.\\n    function decimals(address token)\\n        internal\\n        view\\n        returns (uint8 tokenDecimals)\\n    {\\n        tokenDecimals = 18;\\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\\n        if (didSucceed && resultData.length == 32) {\\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\\n        }\\n    }\\n\\n    /// @dev Retrieves the allowance for a token, owner, and spender.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address the spender.\\n    /// @return allowance The allowance for a token, owner, and spender.\\n    function allowance(address token, address owner, address spender)\\n        internal\\n        view\\n        returns (uint256 allowance_)\\n    {\\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\\n            abi.encodeWithSelector(\\n                IERC20Token(0).allowance.selector,\\n                owner,\\n                spender\\n            )\\n        );\\n        if (didSucceed && resultData.length == 32) {\\n            allowance_ = LibBytes.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Retrieves the balance for a token owner.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @return balance The token balance of an owner.\\n    function balanceOf(address token, address owner)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\\n            abi.encodeWithSelector(\\n                IERC20Token(0).balanceOf.selector,\\n                owner\\n            )\\n        );\\n        if (didSucceed && resultData.length == 32) {\\n            balance = LibBytes.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Executes a call on address `target` with calldata `callData`\\n    ///      and asserts that either nothing was returned or a single boolean\\n    ///      was returned equal to `true`.\\n    /// @param target The call target.\\n    /// @param callData The abi-encoded call data.\\n    function _callWithOptionalBooleanResult(\\n        address target,\\n        bytes memory callData\\n    )\\n        private\\n    {\\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\\n        if (didSucceed) {\\n            if (resultData.length == 0) {\\n                return;\\n            }\\n            if (resultData.length == 32) {\\n                uint256 result = LibBytes.readUint256(resultData, 0);\\n                if (result == 1) {\\n                    return;\\n                }\\n            }\\n        }\\n        LibRichErrors.rrevert(resultData);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs/contracts/src/IWallet.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract IWallet {\\n\\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\\n\\n    /// @dev Validates a hash with the `Wallet` signature type.\\n    /// @param hash Message hash that is signed.\\n    /// @param signature Proof of signing.\\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes calldata signature\\n    )\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/ICurve.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\n// solhint-disable func-name-mixedcase\\ninterface ICurve {\\n\\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\\n    ///      This function exists on early versions of Curve (USDC/DAI)\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param sellAmount The amount of token being bought.\\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\\n    /// @param deadline The time in seconds when this operation should expire.\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        uint256 deadline\\n    )\\n        external;\\n\\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param sellAmount The amount of token being bought.\\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount\\n    )\\n        external;\\n\\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param sellAmount The amount of token being bought.\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 sellAmount\\n    )\\n        external\\n        returns (uint256 dy);\\n\\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param buyAmount The amount of token being bought.\\n    function get_dx_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 buyAmount\\n    )\\n        external\\n        returns (uint256 dx);\\n\\n    /// @dev Get the underlying token address from the token index\\n    /// @param i The token index.\\n    function underlying_coins(\\n        int128 i\\n    )\\n        external\\n        returns (address tokenAddress);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/DydxBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\\\";\\nimport \\\"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\\\";\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/IDydxBridge.sol\\\";\\nimport \\\"../interfaces/IDydx.sol\\\";\\n\\n\\ncontract DydxBridge is\\n    IERC20Bridge,\\n    IDydxBridge,\\n    DeploymentConstants\\n{\\n\\n    using LibSafeMath for uint256;\\n\\n    /// @dev Callback for `IERC20Bridge`. Deposits or withdraws tokens from a dydx account.\\n    ///      Notes:\\n    ///         1. This bridge must be set as an operator of the input dydx account.\\n    ///         2. This function may only be called in the context of the 0x Exchange.\\n    ///         3. The maker or taker of the 0x order must be the dydx account owner.\\n    ///         4. Deposits into dydx are made from the `from` address.\\n    ///         5. Withdrawals from dydx are made to the `to` address.\\n    ///         6. Calling this function must always withdraw at least `amount`,\\n    ///            otherwise the `ERC20Bridge` will revert.\\n    /// @param from The sender of the tokens and owner of the dydx account.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount Minimum amount of `toTokenAddress` tokens to deposit or withdraw.\\n    /// @param encodedBridgeData An abi-encoded `BridgeData` struct.\\n    /// @return success The magic bytes if successful.\\n    function bridgeTransferFrom(\\n        address, /* toTokenAddress */\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata encodedBridgeData\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Ensure that only the `ERC20BridgeProxy` can call this function.\\n        require(\\n            msg.sender == _getERC20BridgeProxyAddress(),\\n            \\\"DydxBridge/ONLY_CALLABLE_BY_ERC20_BRIDGE_PROXY\\\"\\n        );\\n\\n        // Decode bridge data.\\n        (BridgeData memory bridgeData) = abi.decode(encodedBridgeData, (BridgeData));\\n\\n        // The dydx accounts are owned by the `from` address.\\n        IDydx.AccountInfo[] memory accounts = _createAccounts(from, bridgeData);\\n\\n        // Create dydx actions to run on the dydx accounts.\\n        IDydx.ActionArgs[] memory actions = _createActions(\\n            from,\\n            to,\\n            amount,\\n            bridgeData\\n        );\\n\\n        // Run operation. This will revert on failure.\\n        IDydx(_getDydxAddress()).operate(accounts, actions);\\n\\n        return BRIDGE_SUCCESS;\\n    }\\n\\n    /// @dev Creates an array of accounts for dydx to operate on.\\n    ///      All accounts must belong to the same owner.\\n    /// @param accountOwner Owner of the dydx account.\\n    /// @param bridgeData A `BridgeData` struct.\\n    function _createAccounts(\\n        address accountOwner,\\n        BridgeData memory bridgeData\\n    )\\n        internal\\n        returns (IDydx.AccountInfo[] memory accounts)\\n    {\\n        uint256[] memory accountNumbers = bridgeData.accountNumbers;\\n        uint256 nAccounts = accountNumbers.length;\\n        accounts = new IDydx.AccountInfo[](nAccounts);\\n        for (uint256 i = 0; i < nAccounts; ++i) {\\n            accounts[i] = IDydx.AccountInfo({\\n                owner: accountOwner,\\n                number: accountNumbers[i]\\n            });\\n        }\\n    }\\n\\n    /// @dev Creates an array of actions to carry out on dydx.\\n    /// @param depositFrom Deposit value from this address (owner of the dydx account).\\n    /// @param withdrawTo Withdraw value to this address.\\n    /// @param amount The amount of value available to operate on.\\n    /// @param bridgeData A `BridgeData` struct.\\n    function _createActions(\\n        address depositFrom,\\n        address withdrawTo,\\n        uint256 amount,\\n        BridgeData memory bridgeData\\n    )\\n        internal\\n        returns (IDydx.ActionArgs[] memory actions)\\n    {\\n        BridgeAction[] memory bridgeActions = bridgeData.actions;\\n        uint256 nBridgeActions = bridgeActions.length;\\n        actions = new IDydx.ActionArgs[](nBridgeActions);\\n        for (uint256 i = 0; i < nBridgeActions; ++i) {\\n            // Cache current bridge action.\\n            BridgeAction memory bridgeAction = bridgeActions[i];\\n\\n            // Scale amount, if conversion rate is set.\\n            uint256 scaledAmount;\\n            if (bridgeAction.conversionRateDenominator > 0) {\\n                scaledAmount = LibMath.safeGetPartialAmountFloor(\\n                    bridgeAction.conversionRateNumerator,\\n                    bridgeAction.conversionRateDenominator,\\n                    amount\\n                );\\n            } else {\\n                scaledAmount = amount;\\n            }\\n\\n            // Construct dydx action.\\n            if (bridgeAction.actionType == BridgeActionType.Deposit) {\\n                // Deposit tokens from the account owner into their dydx account.\\n                actions[i] = _createDepositAction(\\n                    depositFrom,\\n                    scaledAmount,\\n                    bridgeAction\\n                );\\n            } else if (bridgeAction.actionType == BridgeActionType.Withdraw) {\\n                // Withdraw tokens from dydx to the `otherAccount`.\\n                actions[i] = _createWithdrawAction(\\n                    withdrawTo,\\n                    scaledAmount,\\n                    bridgeAction\\n                );\\n            } else {\\n                // If all values in the `Action` enum are handled then this\\n                // revert is unreachable: Solidity will revert when casting\\n                // from `uint8` to `Action`.\\n                revert(\\\"DydxBridge/UNRECOGNIZED_BRIDGE_ACTION\\\");\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a dydx `DepositAction`.\\n    /// @param depositFrom Deposit tokens from this address who is also the account owner.\\n    /// @param amount of tokens to deposit.\\n    /// @param bridgeAction A `BridgeAction` struct.\\n    /// @return depositAction The encoded dydx action.\\n    function _createDepositAction(\\n        address depositFrom,\\n        uint256 amount,\\n        BridgeAction memory bridgeAction\\n    )\\n        internal\\n        pure\\n        returns (\\n            IDydx.ActionArgs memory depositAction\\n        )\\n    {\\n        // Create dydx amount.\\n        IDydx.AssetAmount memory dydxAmount = IDydx.AssetAmount({\\n            sign: true,                                 // true if positive.\\n            denomination: IDydx.AssetDenomination.Wei,  // Wei => actual token amount held in account.\\n            ref: IDydx.AssetReference.Delta,                // Delta => a relative amount.\\n            value: amount                               // amount to deposit.\\n        });\\n\\n        // Create dydx deposit action.\\n        depositAction = IDydx.ActionArgs({\\n            actionType: IDydx.ActionType.Deposit,           // deposit tokens.\\n            amount: dydxAmount,                             // amount to deposit.\\n            accountIdx: bridgeAction.accountIdx,             // index in the `accounts` when calling `operate`.\\n            primaryMarketId: bridgeAction.marketId,         // indicates which token to deposit.\\n            otherAddress: depositFrom,                      // deposit from the account owner.\\n            // unused parameters\\n            secondaryMarketId: 0,\\n            otherAccountIdx: 0,\\n            data: hex''\\n        });\\n    }\\n\\n    /// @dev Returns a dydx `WithdrawAction`.\\n    /// @param withdrawTo Withdraw tokens to this address.\\n    /// @param amount of tokens to withdraw.\\n    /// @param bridgeAction A `BridgeAction` struct.\\n    /// @return withdrawAction The encoded dydx action.\\n    function _createWithdrawAction(\\n        address withdrawTo,\\n        uint256 amount,\\n        BridgeAction memory bridgeAction\\n    )\\n        internal\\n        pure\\n        returns (\\n            IDydx.ActionArgs memory withdrawAction\\n        )\\n    {\\n        // Create dydx amount.\\n        IDydx.AssetAmount memory amountToWithdraw = IDydx.AssetAmount({\\n            sign: false,                                    // false if negative.\\n            denomination: IDydx.AssetDenomination.Wei,      // Wei => actual token amount held in account.\\n            ref: IDydx.AssetReference.Delta,                // Delta => a relative amount.\\n            value: amount                                   // amount to withdraw.\\n        });\\n\\n        // Create withdraw action.\\n        withdrawAction = IDydx.ActionArgs({\\n            actionType: IDydx.ActionType.Withdraw,          // withdraw tokens.\\n            amount: amountToWithdraw,                       // amount to withdraw.\\n            accountIdx: bridgeAction.accountIdx,            // index in the `accounts` when calling `operate`.\\n            primaryMarketId: bridgeAction.marketId,         // indicates which token to withdraw.\\n            otherAddress: withdrawTo,                       // withdraw tokens to this address.\\n            // unused parameters\\n            secondaryMarketId: 0,\\n            otherAccountIdx: 0,\\n            data: hex''\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs/contracts/src/LibMath.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibRichErrors.sol\\\";\\nimport \\\"./LibMathRichErrors.sol\\\";\\n\\n\\nlibrary LibMath {\\n\\n    using LibSafeMath for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return Partial value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorFloor(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return Partial value of target rounded up.\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorCeil(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return Partial value of target rounded down.\\n    function getPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return Partial value of target rounded up.\\n    function getPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * denominator)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.safeSub(remainder) % denominator;\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.9;\\n\\n\\nlibrary LibMathRichErrors {\\n\\n    // bytes4(keccak256(\\\"DivisionByZeroError()\\\"))\\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\\n        hex\\\"a791837c\\\";\\n\\n    // bytes4(keccak256(\\\"RoundingError(uint256,uint256,uint256)\\\"))\\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\\n        0x339f3de2;\\n\\n    // solhint-disable func-name-mixedcase\\n    function DivisionByZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return DIVISION_BY_ZERO_ERROR;\\n    }\\n\\n    function RoundingError(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ROUNDING_ERROR_SELECTOR,\\n            numerator,\\n            denominator,\\n            target\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IDydxBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ninterface IDydxBridge {\\n\\n    /// @dev This is the subset of `IDydx.ActionType` that are supported by the bridge.\\n    enum BridgeActionType {\\n        Deposit,                    // Deposit tokens into dydx account.\\n        Withdraw                    // Withdraw tokens from dydx account.\\n    }\\n\\n    struct BridgeAction {\\n        BridgeActionType actionType;            // Action to run on dydx account.\\n        uint256 accountIdx;                     // Index in `BridgeData.accountNumbers` for this action.\\n        uint256 marketId;                       // Market to operate on.\\n        uint256 conversionRateNumerator;        // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\\n        uint256 conversionRateDenominator;      // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\\n    }\\n\\n    struct BridgeData {\\n        uint256[] accountNumbers;               // Account number used to identify the owner's specific account.\\n        BridgeAction[] actions;                 // Actions to carry out on the owner's accounts.\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IDydx.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IDydx {\\n\\n    /// @dev Represents the unique key that specifies an account\\n    struct AccountInfo {\\n        address owner;  // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n\\n    enum ActionType {\\n        Deposit,   // supply tokens\\n        Withdraw,  // borrow tokens\\n        Transfer,  // transfer balance between accounts\\n        Buy,       // buy an amount of some token (externally)\\n        Sell,      // sell an amount of some token (externally)\\n        Trade,     // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize,  // use excess tokens to zero-out a completely negative account\\n        Call       // send arbitrary data to an address\\n    }\\n\\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\\n    /// parsed into before being processed.\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountIdx;\\n        AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountIdx;\\n        bytes data;\\n    }\\n\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par  // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    struct Value {\\n        uint256 value;\\n    }\\n\\n    struct Price {\\n        uint256 value;\\n    }\\n\\n    struct OperatorArg {\\n        address operator;\\n        bool trusted;\\n    }\\n\\n    /// @dev The global risk parameters that govern the health and security of the system\\n    struct RiskParams {\\n        // Required ratio of over-collateralization\\n        D256 marginRatio;\\n        // Percentage penalty incurred by liquidated accounts\\n        D256 liquidationSpread;\\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\\n        D256 earningsRate;\\n        // The minimum absolute borrow value of an account\\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\\n        Value minBorrowedValue;\\n    }\\n\\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\\n    ///      One call to operate() is considered a singular \\\"operation\\\". Account collateralization is\\n    ///      ensured only after the completion of the entire operation.\\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\\n    ///                   index in the list.\\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\\n    ///                   actions will be processed in order.\\n    function operate(\\n        AccountInfo[] calldata accounts,\\n        ActionArgs[] calldata actions\\n    )\\n        external;\\n\\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\\n    //      operator is a smart contract and implements the IAutoTrader interface.\\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\\n    function setOperators(OperatorArg[] calldata args) external;\\n\\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\\n    /// @param owner The owner of the accounts\\n    /// @param operator The possible operator\\n    /// @return isLocalOperator True if operator is approved for owner's accounts\\n    function getIsLocalOperator(\\n        address owner,\\n        address operator\\n    )\\n        external\\n        view\\n        returns (bool isLocalOperator);\\n\\n    /// @dev Get the ERC20 token address for a market.\\n    /// @param marketId The market to query\\n    /// @return tokenAddress The token address\\n    function getMarketTokenAddress(\\n        uint256 marketId\\n    )\\n        external\\n        view\\n        returns (address tokenAddress);\\n\\n    /// @dev Get all risk parameters in a single struct.\\n    /// @return riskParams All global risk parameters\\n    function getRiskParams()\\n        external\\n        view\\n        returns (RiskParams memory riskParams);\\n\\n    /// @dev Get the price of the token for a market.\\n    /// @param marketId The market to query\\n    /// @return price The price of each atomic unit of the token\\n    function getMarketPrice(\\n        uint256 marketId\\n    )\\n        external\\n        view\\n        returns (Price memory price);\\n\\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\\n    ///      include the market require a higher collateralization to avoid being liquidated.\\n    /// @param  marketId  The market to query\\n    /// @return premium The market's margin premium\\n    function getMarketMarginPremium(uint256 marketId)\\n        external\\n        view\\n        returns (D256 memory premium);\\n\\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\\n    ///      margin-ratio when determining if the account can be liquidated.\\n    /// @param account The account to query\\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\\n    function getAdjustedAccountValues(\\n        AccountInfo calldata account\\n    )\\n        external\\n        view\\n        returns (Value memory supplyValue, Value memory borrowValue);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/Eth2DaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\\\";\\nimport \\\"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/IEth2Dai.sol\\\";\\n\\n\\n// solhint-disable space-after-comma\\ncontract Eth2DaiBridge is\\n    IERC20Bridge,\\n    IWallet,\\n    DeploymentConstants\\n{\\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\\n    ///      (DAI or WETH) to the Eth2Dai contract, then transfers the bought\\n    ///      tokens to `to`.\\n    /// @param toTokenAddress The token to give to `to` (either DAI or WETH).\\n    /// @param from The maker (this contract).\\n    /// @param to The recipient of the bought tokens.\\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\\n    /// @param bridgeData The abi-encoeded \\\"from\\\" token address.\\n    /// @return success The magic bytes if successful.\\n    function bridgeTransferFrom(\\n        address toTokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Decode the bridge data to get the `fromTokenAddress`.\\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\\n\\n        IEth2Dai exchange = IEth2Dai(_getEth2DaiAddress());\\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\\n        LibERC20Token.approveIfBelow(fromTokenAddress, address(exchange), fromTokenBalance);\\n\\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\\n        uint256 boughtAmount = exchange.sellAllAmount(\\n            fromTokenAddress,\\n            fromTokenBalance,\\n            toTokenAddress,\\n            amount\\n        );\\n        // Transfer the converted `toToken`s to `to`.\\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\\n\\n        emit ERC20BridgeTransfer(\\n            fromTokenAddress,\\n            toTokenAddress,\\n            fromTokenBalance,\\n            boughtAmount,\\n            from,\\n            to\\n        );\\n        return BRIDGE_SUCCESS;\\n    }\\n\\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\\n    ///      and sign for itself in orders. Always succeeds.\\n    /// @return magicValue Magic success bytes, always.\\n    function isValidSignature(\\n        bytes32,\\n        bytes calldata\\n    )\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        return LEGACY_WALLET_MAGIC_VALUE;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IEth2Dai.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ninterface IEth2Dai {\\n\\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\\n    /// @param fromToken The token being sold.\\n    /// @param sellAmount The amount of `fromToken` token being sold.\\n    /// @param toToken The token being bought.\\n    /// @param minFillAmount Minimum amount of `toToken` token to buy.\\n    /// @return fillAmount Amount of `toToken` bought.\\n    function sellAllAmount(\\n        address fromToken,\\n        uint256 sellAmount,\\n        address toToken,\\n        uint256 minFillAmount\\n    )\\n        external\\n        returns (uint256 fillAmount);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/KyberBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\\\";\\nimport \\\"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/IKyberNetworkProxy.sol\\\";\\n\\n\\n// solhint-disable space-after-comma\\ncontract KyberBridge is\\n    IERC20Bridge,\\n    IWallet,\\n    DeploymentConstants\\n{\\n    using LibSafeMath for uint256;\\n\\n    // @dev Structure used internally to get around stack limits.\\n    struct TradeState {\\n        IKyberNetworkProxy kyber;\\n        IEtherToken weth;\\n        address fromTokenAddress;\\n        uint256 fromTokenBalance;\\n        uint256 payableAmount;\\n        uint256 conversionRate;\\n    }\\n\\n    /// @dev Kyber ETH pseudo-address.\\n    address constant public KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev `bridgeTransferFrom()` failure result.\\n    bytes4 constant private BRIDGE_FAILED = 0x0;\\n    /// @dev Precision of Kyber rates.\\n    uint256 constant private KYBER_RATE_BASE = 10 ** 18;\\n\\n    // solhint-disable no-empty-blocks\\n    /// @dev Payable fallback to receive ETH from Kyber.\\n    function ()\\n        external\\n        payable\\n    {}\\n\\n    /// @dev Callback for `IKyberBridge`. Tries to buy `amount` of\\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\\n    ///      to the `KyberNetworkProxy` contract, then transfers the bought\\n    ///      tokens to `to`.\\n    /// @param toTokenAddress The token to give to `to`.\\n    /// @param from The maker (this contract).\\n    /// @param to The recipient of the bought tokens.\\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\\n    /// @param bridgeData The abi-encoeded \\\"from\\\" token address.\\n    /// @return success The magic bytes if successful.\\n    function bridgeTransferFrom(\\n        address toTokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        TradeState memory state;\\n        state.kyber = IKyberNetworkProxy(_getKyberNetworkProxyAddress());\\n        state.weth = IEtherToken(_getWethAddress());\\n        // Decode the bridge data to get the `fromTokenAddress`.\\n        (state.fromTokenAddress) = abi.decode(bridgeData, (address));\\n        // Query the balance of \\\"from\\\" tokens.\\n        state.fromTokenBalance = IERC20Token(state.fromTokenAddress).balanceOf(address(this));\\n        if (state.fromTokenBalance == 0) {\\n            // Return failure if no input tokens.\\n            return BRIDGE_FAILED;\\n        }\\n        // Compute the conversion rate, expressed in 18 decimals.\\n        // The sequential notation is to get around stack limits.\\n        state.conversionRate = KYBER_RATE_BASE;\\n        state.conversionRate = state.conversionRate.safeMul(amount);\\n        state.conversionRate = state.conversionRate.safeMul(\\n            10 ** uint256(LibERC20Token.decimals(state.fromTokenAddress))\\n        );\\n        state.conversionRate = state.conversionRate.safeDiv(state.fromTokenBalance);\\n        state.conversionRate = state.conversionRate.safeDiv(\\n            10 ** uint256(LibERC20Token.decimals(toTokenAddress))\\n        );\\n        if (state.fromTokenAddress == toTokenAddress) {\\n            // Just transfer the tokens if they're the same.\\n            LibERC20Token.transfer(state.fromTokenAddress, to, state.fromTokenBalance);\\n            return BRIDGE_SUCCESS;\\n        } else if (state.fromTokenAddress != address(state.weth)) {\\n            // If the input token is not WETH, grant an allowance to the exchange\\n            // to spend them.\\n            LibERC20Token.approveIfBelow(\\n                state.fromTokenAddress,\\n                address(state.kyber),\\n                state.fromTokenBalance\\n            );\\n        } else {\\n            // If the input token is WETH, unwrap it and attach it to the call.\\n            state.fromTokenAddress = KYBER_ETH_ADDRESS;\\n            state.payableAmount = state.fromTokenBalance;\\n            state.weth.withdraw(state.fromTokenBalance);\\n        }\\n        bool isToTokenWeth = toTokenAddress == address(state.weth);\\n\\n        // Try to sell all of this contract's input token balance through\\n        // `KyberNetworkProxy.trade()`.\\n        uint256 boughtAmount = state.kyber.trade.value(state.payableAmount)(\\n            // Input token.\\n            state.fromTokenAddress,\\n            // Sell amount.\\n            state.fromTokenBalance,\\n            // Output token.\\n            isToTokenWeth ? KYBER_ETH_ADDRESS : toTokenAddress,\\n            // Transfer to this contract if converting to ETH, otherwise\\n            // transfer directly to the recipient.\\n            isToTokenWeth ? address(uint160(address(this))) : address(uint160(to)),\\n            // Buy as much as possible.\\n            uint256(-1),\\n            // Compute the minimum conversion rate, which is expressed in units with\\n            // 18 decimal places.\\n            state.conversionRate,\\n            // No affiliate address.\\n            address(0)\\n        );\\n        // Wrap ETH output and transfer to recipient.\\n        if (isToTokenWeth) {\\n            state.weth.deposit.value(boughtAmount)();\\n            state.weth.transfer(to, boughtAmount);\\n        }\\n\\n        emit ERC20BridgeTransfer(\\n            state.fromTokenAddress == KYBER_ETH_ADDRESS ? address(state.weth) : state.fromTokenAddress,\\n            toTokenAddress,\\n            state.fromTokenBalance,\\n            boughtAmount,\\n            from,\\n            to\\n        );\\n        return BRIDGE_SUCCESS;\\n    }\\n\\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\\n    ///      and sign for itself in orders. Always succeeds.\\n    /// @return magicValue Magic success bytes, always.\\n    function isValidSignature(\\n        bytes32,\\n        bytes calldata\\n    )\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        return LEGACY_WALLET_MAGIC_VALUE;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./IERC20Token.sol\\\";\\n\\n\\ncontract IEtherToken is\\n    IERC20Token\\n{\\n    function deposit()\\n        public\\n        payable;\\n    \\n    function withdraw(uint256 amount)\\n        public;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IKyberNetworkProxy.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ninterface IKyberNetworkProxy {\\n\\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens.\\n    /// @param sellTokenAddress Token to sell.\\n    /// @param sellAmount Amount of tokens to sell.\\n    /// @param buyTokenAddress Token to buy.\\n    /// @param recipientAddress Address to send bought tokens to.\\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\\n    /// @param minConversionRate The minimal conversion rate. If actual rate\\n    ///        is lower, trade is canceled.\\n    /// @param walletId The wallet ID to send part of the fees\\n    /// @return boughtAmount Amount of tokens bought.\\n    function trade(\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        address payable recipientAddress,\\n        uint256 maxBuyTokenAmount,\\n        uint256 minConversionRate,\\n        address walletId\\n    )\\n        external\\n        payable\\n        returns(uint256 boughtAmount);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/UniswapBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\\\";\\nimport \\\"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"../interfaces/IUniswapExchangeFactory.sol\\\";\\nimport \\\"../interfaces/IUniswapExchange.sol\\\";\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\n\\n\\n// solhint-disable space-after-comma\\n// solhint-disable not-rely-on-time\\ncontract UniswapBridge is\\n    IERC20Bridge,\\n    IWallet,\\n    DeploymentConstants\\n{\\n    // Struct to hold `bridgeTransferFrom()` local variables in memory and to avoid\\n    // stack overflows.\\n    struct TransferState {\\n        IUniswapExchange exchange;\\n        uint256 fromTokenBalance;\\n        IEtherToken weth;\\n        uint256 boughtAmount;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    /// @dev Payable fallback to receive ETH from uniswap.\\n    function ()\\n        external\\n        payable\\n    {}\\n\\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\\n    ///      token encoded in the bridge data.\\n    /// @param toTokenAddress The token to buy and transfer to `to`.\\n    /// @param from The maker (this contract).\\n    /// @param to The recipient of the bought tokens.\\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\\n    /// @param bridgeData The abi-encoded \\\"from\\\" token address.\\n    /// @return success The magic bytes if successful.\\n    function bridgeTransferFrom(\\n        address toTokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // State memory object to avoid stack overflows.\\n        TransferState memory state;\\n        // Decode the bridge data to get the `fromTokenAddress`.\\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\\n\\n        // Just transfer the tokens if they're the same.\\n        if (fromTokenAddress == toTokenAddress) {\\n            LibERC20Token.transfer(fromTokenAddress, to, amount);\\n            return BRIDGE_SUCCESS;\\n        }\\n\\n        // Get the exchange for the token pair.\\n        state.exchange = _getUniswapExchangeForTokenPair(\\n            fromTokenAddress,\\n            toTokenAddress\\n        );\\n        // Get our balance of `fromTokenAddress` token.\\n        state.fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\\n        // Get the weth contract.\\n        state.weth = IEtherToken(_getWethAddress());\\n\\n        // Convert from WETH to a token.\\n        if (fromTokenAddress == address(state.weth)) {\\n            // Unwrap the WETH.\\n            state.weth.withdraw(state.fromTokenBalance);\\n            // Buy as much of `toTokenAddress` token with ETH as possible and\\n            // transfer it to `to`.\\n            state.boughtAmount = state.exchange.ethToTokenTransferInput.value(state.fromTokenBalance)(\\n                // Minimum buy amount.\\n                amount,\\n                // Expires after this block.\\n                block.timestamp,\\n                // Recipient is `to`.\\n                to\\n            );\\n\\n        // Convert from a token to WETH.\\n        } else if (toTokenAddress == address(state.weth)) {\\n            // Grant the exchange an allowance.\\n            _grantExchangeAllowance(state.exchange, fromTokenAddress, state.fromTokenBalance);\\n            // Buy as much ETH with `fromTokenAddress` token as possible.\\n            state.boughtAmount = state.exchange.tokenToEthSwapInput(\\n                // Sell all tokens we hold.\\n                state.fromTokenBalance,\\n                // Minimum buy amount.\\n                amount,\\n                // Expires after this block.\\n                block.timestamp\\n            );\\n            // Wrap the ETH.\\n            state.weth.deposit.value(state.boughtAmount)();\\n            // Transfer the WETH to `to`.\\n            IEtherToken(toTokenAddress).transfer(to, state.boughtAmount);\\n\\n        // Convert from one token to another.\\n        } else {\\n            // Grant the exchange an allowance.\\n            _grantExchangeAllowance(state.exchange, fromTokenAddress, state.fromTokenBalance);\\n            // Buy as much `toTokenAddress` token with `fromTokenAddress` token\\n            // and transfer it to `to`.\\n            state.boughtAmount = state.exchange.tokenToTokenTransferInput(\\n                // Sell all tokens we hold.\\n                state.fromTokenBalance,\\n                // Minimum buy amount.\\n                amount,\\n                // Must buy at least 1 intermediate ETH.\\n                1,\\n                // Expires after this block.\\n                block.timestamp,\\n                // Recipient is `to`.\\n                to,\\n                // Convert to `toTokenAddress`.\\n                toTokenAddress\\n            );\\n        }\\n\\n        emit ERC20BridgeTransfer(\\n            fromTokenAddress,\\n            toTokenAddress,\\n            state.fromTokenBalance,\\n            state.boughtAmount,\\n            from,\\n            to\\n        );\\n        return BRIDGE_SUCCESS;\\n    }\\n\\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\\n    ///      and sign for itself in orders. Always succeeds.\\n    /// @return magicValue Success bytes, always.\\n    function isValidSignature(\\n        bytes32,\\n        bytes calldata\\n    )\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        return LEGACY_WALLET_MAGIC_VALUE;\\n    }\\n\\n    /// @dev Grants an unlimited allowance to the exchange for its token\\n    ///      on behalf of this contract.\\n    /// @param exchange The Uniswap token exchange.\\n    /// @param tokenAddress The token address for the exchange.\\n    /// @param minimumAllowance The minimum necessary allowance.\\n    function _grantExchangeAllowance(\\n        IUniswapExchange exchange,\\n        address tokenAddress,\\n        uint256 minimumAllowance\\n    )\\n        private\\n    {\\n        LibERC20Token.approveIfBelow(\\n            tokenAddress,\\n            address(exchange),\\n            minimumAllowance\\n        );\\n    }\\n\\n    /// @dev Retrieves the uniswap exchange for a given token pair.\\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\\n    ///      In th ecase of a token-token exchange, this will be the first token.\\n    /// @param fromTokenAddress The address of the token we are converting from.\\n    /// @param toTokenAddress The address of the token we are converting to.\\n    /// @return exchange The uniswap exchange.\\n    function _getUniswapExchangeForTokenPair(\\n        address fromTokenAddress,\\n        address toTokenAddress\\n    )\\n        private\\n        view\\n        returns (IUniswapExchange exchange)\\n    {\\n        address exchangeTokenAddress = fromTokenAddress;\\n        // Whichever isn't WETH is the exchange token.\\n        if (fromTokenAddress == _getWethAddress()) {\\n            exchangeTokenAddress = toTokenAddress;\\n        }\\n        exchange = IUniswapExchange(\\n            IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\\n            .getExchange(exchangeTokenAddress)\\n        );\\n        require(address(exchange) != address(0), \\\"NO_UNISWAP_EXCHANGE_FOR_TOKEN\\\");\\n        return exchange;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\n\\ninterface IUniswapExchangeFactory {\\n\\n    /// @dev Get the exchange for a token.\\n    /// @param tokenAddress The address of the token contract.\\n    function getExchange(address tokenAddress)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IUniswapExchange.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ninterface IUniswapExchange {\\n\\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\\n    ///      to `recipient`.\\n    /// @param minTokensBought The minimum number of tokens to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @param recipient Who to transfer the tokens to.\\n    /// @return tokensBought Amount of tokens bought.\\n    function ethToTokenTransferInput(\\n        uint256 minTokensBought,\\n        uint256 deadline,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (uint256 tokensBought);\\n\\n    /// @dev Buys at least `minEthBought` ETH with tokens.\\n    /// @param tokensSold Amount of tokens to sell.\\n    /// @param minEthBought The minimum amount of ETH to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @return ethBought Amount of tokens bought.\\n    function tokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEthBought,\\n        uint256 deadline\\n    )\\n        external\\n        returns (uint256 ethBought);\\n\\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\\n    ///      and transfer them to `recipient`.\\n    /// @param minTokensBought The minimum number of tokens to buy.\\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @param recipient Who to transfer the tokens to.\\n    /// @param toTokenAddress The token being bought.\\n    /// @return tokensBought Amount of tokens bought.\\n    function tokenToTokenTransferInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address recipient,\\n        address toTokenAddress\\n    )\\n        external\\n        returns (uint256 tokensBought);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestChaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/bridges/ChaiBridge.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/ERC20Token.sol\\\";\\n\\n\\ncontract TestChaiDai is\\n    ERC20Token\\n{\\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\\n\\n    function draw(\\n        address from,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        if (from == ALWAYS_REVERT_ADDRESS) {\\n            revert();\\n        }\\n        balances[msg.sender] += amount;\\n    }\\n}\\n\\n\\ncontract TestChaiBridge is\\n    ChaiBridge\\n{\\n    address public testChaiDai;\\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\\n\\n    constructor()\\n        public\\n    {\\n        testChaiDai = address(new TestChaiDai());\\n    }\\n\\n    function _getDaiAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return testChaiDai;\\n    }\\n\\n    function _getChaiAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return testChaiDai;\\n    }\\n\\n    function _getERC20BridgeProxyAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return msg.sender == ALWAYS_REVERT_ADDRESS ? address(0) : msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/ERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./interfaces/IERC20Token.sol\\\";\\n\\n\\ncontract ERC20Token is\\n    IERC20Token\\n{\\n    mapping (address => uint256) internal balances;\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n    uint256 internal _totalSupply;\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            balances[msg.sender] >= _value,\\n            \\\"ERC20_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(\\n            balances[_to] + _value >= balances[_to],\\n            \\\"UINT256_OVERFLOW\\\"\\n        );\\n\\n        balances[msg.sender] -= _value;\\n        balances[_to] += _value;\\n\\n        emit Transfer(\\n            msg.sender,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            balances[_from] >= _value,\\n            \\\"ERC20_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(\\n            allowed[_from][msg.sender] >= _value,\\n            \\\"ERC20_INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n        require(\\n            balances[_to] + _value >= balances[_to],\\n            \\\"UINT256_OVERFLOW\\\"\\n        );\\n\\n        balances[_to] += _value;\\n        balances[_from] -= _value;\\n        allowed[_from][msg.sender] -= _value;\\n\\n        emit Transfer(\\n            _from,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address _spender, uint256 _value)\\n        external\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(\\n            msg.sender,\\n            _spender,\\n            _value\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    /// @dev Query the balance of owner\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return balances[_owner];\\n    }\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestDydxBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"../src/bridges/DydxBridge.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\ncontract TestDydxBridgeToken {\\n\\n    uint256 private constant INIT_HOLDER_BALANCE = 10 * 10**18; // 10 tokens\\n    mapping (address => uint256) private _balances;\\n\\n    /// @dev Sets initial balance of token holders.\\n    constructor(address[] memory holders)\\n        public\\n    {\\n        for (uint256 i = 0; i != holders.length; ++i) {\\n            _balances[holders[i]] = INIT_HOLDER_BALANCE;\\n        }\\n        _balances[msg.sender] = INIT_HOLDER_BALANCE;\\n    }\\n\\n    /// @dev Basic transferFrom implementation.\\n    function transferFrom(address from, address to, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        if (_balances[from] < amount || _balances[to] + amount < _balances[to]) {\\n            return false;\\n        }\\n        _balances[from] -= amount;\\n        _balances[to] += amount;\\n        return true;\\n    }\\n\\n    /// @dev Returns balance of `holder`.\\n    function balanceOf(address holder)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[holder];\\n    }\\n}\\n\\n\\n// solhint-disable space-after-comma\\ncontract TestDydxBridge is\\n    IDydx,\\n    DydxBridge\\n{\\n\\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\\n    address private _testTokenAddress;\\n    bool private _shouldRevertOnOperate;\\n\\n    event OperateAccount(\\n        address owner,\\n        uint256 number\\n    );\\n\\n    event OperateAction(\\n        ActionType actionType,\\n        uint256 accountIdx,\\n        bool amountSign,\\n        AssetDenomination amountDenomination,\\n        AssetReference amountRef,\\n        uint256 amountValue,\\n        uint256 primaryMarketId,\\n        uint256 secondaryMarketId,\\n        address otherAddress,\\n        uint256 otherAccountId,\\n        bytes data\\n    );\\n\\n    constructor(address[] memory holders)\\n        public\\n    {\\n        // Deploy a test token. This represents the asset being deposited/withdrawn from dydx.\\n        _testTokenAddress = address(new TestDydxBridgeToken(holders));\\n    }\\n\\n    /// @dev Simulates `operate` in dydx contract.\\n    ///      Emits events so that arguments can be validated client-side.\\n    function operate(\\n        AccountInfo[] calldata accounts,\\n        ActionArgs[] calldata actions\\n    )\\n        external\\n    {\\n        if (_shouldRevertOnOperate) {\\n            revert(\\\"TestDydxBridge/SHOULD_REVERT_ON_OPERATE\\\");\\n        }\\n\\n        for (uint i = 0; i < accounts.length; ++i) {\\n            emit OperateAccount(\\n                accounts[i].owner,\\n                accounts[i].number\\n            );\\n        }\\n\\n        for (uint i = 0; i < actions.length; ++i) {\\n            emit OperateAction(\\n                actions[i].actionType,\\n                actions[i].accountIdx,\\n                actions[i].amount.sign,\\n                actions[i].amount.denomination,\\n                actions[i].amount.ref,\\n                actions[i].amount.value,\\n                actions[i].primaryMarketId,\\n                actions[i].secondaryMarketId,\\n                actions[i].otherAddress,\\n                actions[i].otherAccountIdx,\\n                actions[i].data\\n            );\\n\\n            if (actions[i].actionType == IDydx.ActionType.Withdraw) {\\n                require(\\n                    IERC20Token(_testTokenAddress).transferFrom(\\n                        address(this),\\n                        actions[i].otherAddress,\\n                        actions[i].amount.value\\n                    ),\\n                    \\\"TestDydxBridge/WITHDRAW_FAILED\\\"\\n                );\\n            } else if (actions[i].actionType == IDydx.ActionType.Deposit) {\\n                require(\\n                    IERC20Token(_testTokenAddress).transferFrom(\\n                        actions[i].otherAddress,\\n                        address(this),\\n                        actions[i].amount.value\\n                    ),\\n                    \\\"TestDydxBridge/DEPOSIT_FAILED\\\"\\n                );\\n            } else {\\n                revert(\\\"TestDydxBridge/UNSUPPORTED_ACTION\\\");\\n            }\\n        }\\n    }\\n\\n    /// @dev If `true` then subsequent calls to `operate` will revert.\\n    function setRevertOnOperate(bool shouldRevert)\\n        external\\n    {\\n        _shouldRevertOnOperate = shouldRevert;\\n    }\\n\\n    /// @dev Returns test token.\\n    function getTestToken()\\n        external\\n        returns (address)\\n    {\\n        return _testTokenAddress;\\n    }\\n\\n    /// @dev Unused.\\n    function setOperators(OperatorArg[] calldata args) external {}\\n\\n    /// @dev Unused.\\n    function getIsLocalOperator(\\n        address owner,\\n        address operator\\n    )\\n        external\\n        view\\n        returns (bool isLocalOperator)\\n    {}\\n\\n    /// @dev Unused.\\n    function getMarketTokenAddress(\\n        uint256 marketId\\n    )\\n        external\\n        view\\n        returns (address tokenAddress)\\n    {}\\n\\n    /// @dev Unused.\\n    function getRiskParams()\\n        external\\n        view\\n        returns (RiskParams memory riskParams)\\n    {}\\n\\n    /// @dev Unsused.\\n    function getMarketPrice(\\n        uint256 marketId\\n    )\\n        external\\n        view\\n        returns (Price memory price)\\n    {}\\n\\n    /// @dev Unsused\\n    function getMarketMarginPremium(uint256 marketId)\\n        external\\n        view\\n        returns (IDydx.D256 memory premium)\\n    {}\\n\\n    /// @dev Unused.\\n    function getAdjustedAccountValues(\\n        AccountInfo calldata account\\n    )\\n        external\\n        view\\n        returns (Value memory supplyValue, Value memory borrowValue)\\n    {}\\n\\n    /// @dev overrides `_getDydxAddress()` from `DeploymentConstants` to return this address.\\n    function _getDydxAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    /// @dev overrides `_getERC20BridgeProxyAddress()` from `DeploymentConstants` for testing.\\n    function _getERC20BridgeProxyAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return msg.sender == ALWAYS_REVERT_ADDRESS ? address(0) : msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestERC20Bridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/interfaces/IERC20Bridge.sol\\\";\\n\\n\\n/// @dev Test bridge token\\ncontract TestERC20BridgeToken {\\n    mapping (address => uint256) private _balances;\\n\\n    function addBalance(address owner, int256 amount)\\n        external\\n    {\\n        setBalance(owner, uint256(int256(balanceOf(owner)) + amount));\\n    }\\n\\n    function setBalance(address owner, uint256 balance)\\n        public\\n    {\\n        _balances[owner] = balance;\\n    }\\n\\n    function balanceOf(address owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[owner];\\n    }\\n}\\n\\n\\n/// @dev Test bridge contract.\\ncontract TestERC20Bridge is\\n    IERC20Bridge\\n{\\n    TestERC20BridgeToken public testToken;\\n\\n    event BridgeWithdrawTo(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes bridgeData\\n    );\\n\\n    constructor() public {\\n        testToken = new TestERC20BridgeToken();\\n    }\\n\\n    function setTestTokenBalance(address owner, uint256 balance)\\n        external\\n    {\\n        testToken.setBalance(owner, balance);\\n    }\\n\\n    function bridgeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4)\\n    {\\n        emit BridgeWithdrawTo(\\n            tokenAddress,\\n            from,\\n            to,\\n            amount,\\n            bridgeData\\n        );\\n        // Unpack the bridgeData.\\n        (\\n            int256 transferAmount,\\n            bytes memory revertData,\\n            bytes memory returnData\\n        ) = abi.decode(bridgeData, (int256, bytes, bytes));\\n\\n        // If `revertData` is set, revert.\\n        if (revertData.length != 0) {\\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\\n        }\\n        // Increase `to`'s balance by `transferAmount`.\\n        TestERC20BridgeToken(tokenAddress).addBalance(to, transferAmount);\\n        // Return `returnData`.\\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestEth2DaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"../src/bridges/Eth2DaiBridge.sol\\\";\\nimport \\\"../src/interfaces/IEth2Dai.sol\\\";\\n\\n\\n// solhint-disable no-simple-event-func-name\\ncontract TestEvents {\\n\\n    event TokenTransfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    event TokenApprove(\\n        address token,\\n        address spender,\\n        uint256 allowance\\n    );\\n\\n    function raiseTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        emit TokenTransfer(\\n            msg.sender,\\n            from,\\n            to,\\n            amount\\n        );\\n    }\\n\\n    function raiseTokenApprove(address spender, uint256 allowance)\\n        external\\n    {\\n        emit TokenApprove(msg.sender, spender, allowance);\\n    }\\n}\\n\\n\\n/// @dev A minimalist ERC20 token.\\ncontract TestToken {\\n\\n    mapping (address => uint256) public balances;\\n    string private _nextTransferRevertReason;\\n    bytes private _nextTransferReturnData;\\n\\n    /// @dev Just calls `raiseTokenTransfer()` on the caller.\\n    function transfer(address to, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        TestEvents(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\\n        if (bytes(_nextTransferRevertReason).length != 0) {\\n            revert(_nextTransferRevertReason);\\n        }\\n        bytes memory returnData = _nextTransferReturnData;\\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\\n    }\\n\\n    /// @dev Set the balance for `owner`.\\n    function setBalance(address owner, uint256 balance)\\n        external\\n    {\\n        balances[owner] = balance;\\n    }\\n\\n    /// @dev Set the behavior of the `transfer()` call.\\n    function setTransferBehavior(\\n        string calldata revertReason,\\n        bytes calldata returnData\\n    )\\n        external\\n    {\\n        _nextTransferRevertReason = revertReason;\\n        _nextTransferReturnData = returnData;\\n    }\\n\\n    /// @dev Just calls `raiseTokenApprove()` on the caller.\\n    function approve(address spender, uint256 allowance)\\n        external\\n        returns (bool)\\n    {\\n        TestEvents(msg.sender).raiseTokenApprove(spender, allowance);\\n        return true;\\n    }\\n\\n    function allowance(address, address) external view returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @dev Retrieve the balance for `owner`.\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return balances[owner];\\n    }\\n}\\n\\n\\n/// @dev Eth2DaiBridge overridden to mock tokens and\\n///      implement IEth2Dai.\\ncontract TestEth2DaiBridge is\\n    TestEvents,\\n    IEth2Dai,\\n    Eth2DaiBridge\\n{\\n    event SellAllAmount(\\n        address sellToken,\\n        uint256 sellTokenAmount,\\n        address buyToken,\\n        uint256 minimumFillAmount\\n    );\\n\\n    mapping (address => TestToken)  public testTokens;\\n    string private _nextRevertReason;\\n    uint256 private _nextFillAmount;\\n\\n    /// @dev Create a token and set this contract's balance.\\n    function createToken(uint256 balance)\\n        external\\n        returns (address tokenAddress)\\n    {\\n        TestToken token = new TestToken();\\n        testTokens[address(token)] = token;\\n        token.setBalance(address(this), balance);\\n        return address(token);\\n    }\\n\\n    /// @dev Set the behavior for `IEth2Dai.sellAllAmount()`.\\n    function setFillBehavior(string calldata revertReason, uint256 fillAmount)\\n        external\\n    {\\n        _nextRevertReason = revertReason;\\n        _nextFillAmount = fillAmount;\\n    }\\n\\n    /// @dev Set the behavior of a token's `transfer()`.\\n    function setTransferBehavior(\\n        address tokenAddress,\\n        string calldata revertReason,\\n        bytes calldata returnData\\n    )\\n        external\\n    {\\n        testTokens[tokenAddress].setTransferBehavior(revertReason, returnData);\\n    }\\n\\n    /// @dev Implementation of `IEth2Dai.sellAllAmount()`\\n    function sellAllAmount(\\n        address sellTokenAddress,\\n        uint256 sellTokenAmount,\\n        address buyTokenAddress,\\n        uint256 minimumFillAmount\\n    )\\n        external\\n        returns (uint256 fillAmount)\\n    {\\n        emit SellAllAmount(\\n            sellTokenAddress,\\n            sellTokenAmount,\\n            buyTokenAddress,\\n            minimumFillAmount\\n        );\\n        if (bytes(_nextRevertReason).length != 0) {\\n            revert(_nextRevertReason);\\n        }\\n        return _nextFillAmount;\\n    }\\n\\n    // @dev This contract will double as the Eth2Dai contract.\\n    function _getEth2DaiAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestKyberBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"../src/bridges/KyberBridge.sol\\\";\\nimport \\\"../src/interfaces/IKyberNetworkProxy.sol\\\";\\n\\n\\n// solhint-disable no-simple-event-func-name\\ninterface ITestContract {\\n\\n    function wethWithdraw(\\n        address payable ownerAddress,\\n        uint256 amount\\n    )\\n        external;\\n\\n    function wethDeposit(\\n        address ownerAddress\\n    )\\n        external\\n        payable;\\n\\n    function tokenTransfer(\\n        address ownerAddress,\\n        address recipientAddress,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool success);\\n\\n    function tokenApprove(\\n        address ownerAddress,\\n        address spenderAddress,\\n        uint256 allowance\\n    )\\n        external\\n        returns (bool success);\\n\\n    function tokenBalanceOf(\\n        address ownerAddress\\n    )\\n        external\\n        view\\n        returns (uint256 balance);\\n}\\n\\n\\n/// @dev A minimalist ERC20/WETH token.\\ncontract TestToken {\\n\\n    uint8 public decimals;\\n    ITestContract private _testContract;\\n\\n    constructor(uint8 decimals_) public {\\n        decimals = decimals_;\\n        _testContract = ITestContract(msg.sender);\\n    }\\n\\n    function approve(address spender, uint256 allowance)\\n        external\\n        returns (bool)\\n    {\\n        return _testContract.tokenApprove(\\n            msg.sender,\\n            spender,\\n            allowance\\n        );\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        return _testContract.tokenTransfer(\\n            msg.sender,\\n            recipient,\\n            amount\\n        );\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        return _testContract.wethWithdraw(msg.sender, amount);\\n    }\\n\\n    function deposit()\\n        external\\n        payable\\n    {\\n        return _testContract.wethDeposit.value(msg.value)(msg.sender);\\n    }\\n\\n    function allowance(address, address) external view returns (uint256) {\\n        return 0;\\n    }\\n\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _testContract.tokenBalanceOf(owner);\\n    }\\n}\\n\\n\\n/// @dev KyberBridge overridden to mock tokens and implement IKyberBridge.\\ncontract TestKyberBridge is\\n    KyberBridge,\\n    ITestContract,\\n    IKyberNetworkProxy\\n{\\n    event KyberBridgeTrade(\\n        uint256 msgValue,\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        address payable recipientAddress,\\n        uint256 maxBuyTokenAmount,\\n        uint256 minConversionRate,\\n        address walletId\\n    );\\n\\n    event KyberBridgeWethWithdraw(\\n        address ownerAddress,\\n        uint256 amount\\n    );\\n\\n    event KyberBridgeWethDeposit(\\n        uint256 msgValue,\\n        address ownerAddress,\\n        uint256 amount\\n    );\\n\\n    event KyberBridgeTokenApprove(\\n        address tokenAddress,\\n        address ownerAddress,\\n        address spenderAddress,\\n        uint256 allowance\\n    );\\n\\n    event KyberBridgeTokenTransfer(\\n        address tokenAddress,\\n        address ownerAddress,\\n        address recipientAddress,\\n        uint256 amount\\n    );\\n\\n    IEtherToken public weth;\\n    mapping (address => mapping (address => uint256)) private _tokenBalances;\\n    uint256 private _nextFillAmount;\\n\\n    constructor() public {\\n        weth = IEtherToken(address(new TestToken(18)));\\n    }\\n\\n    /// @dev Implementation of `IKyberNetworkProxy.trade()`\\n    function trade(\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        address payable recipientAddress,\\n        uint256 maxBuyTokenAmount,\\n        uint256 minConversionRate,\\n        address walletId\\n    )\\n        external\\n        payable\\n        returns(uint256 boughtAmount)\\n    {\\n        emit KyberBridgeTrade(\\n            msg.value,\\n            sellTokenAddress,\\n            sellAmount,\\n            buyTokenAddress,\\n            recipientAddress,\\n            maxBuyTokenAmount,\\n            minConversionRate,\\n            walletId\\n        );\\n        return _nextFillAmount;\\n    }\\n\\n    function createToken(uint8 decimals)\\n        external\\n        returns (address tokenAddress)\\n    {\\n        return address(new TestToken(decimals));\\n    }\\n\\n    function setNextFillAmount(uint256 amount)\\n        external\\n        payable\\n    {\\n        if (msg.value != 0) {\\n            require(amount == msg.value, \\\"VALUE_AMOUNT_MISMATCH\\\");\\n            grantTokensTo(address(weth), address(this), msg.value);\\n        }\\n        _nextFillAmount = amount;\\n    }\\n\\n    function wethDeposit(\\n        address ownerAddress\\n    )\\n        external\\n        payable\\n    {\\n        require(msg.sender == address(weth), \\\"ONLY_WETH\\\");\\n        grantTokensTo(address(weth), ownerAddress, msg.value);\\n        emit KyberBridgeWethDeposit(\\n            msg.value,\\n            ownerAddress,\\n            msg.value\\n        );\\n    }\\n\\n    function wethWithdraw(\\n        address payable ownerAddress,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        require(msg.sender == address(weth), \\\"ONLY_WETH\\\");\\n        _tokenBalances[address(weth)][ownerAddress] -= amount;\\n        ownerAddress.transfer(amount);\\n        emit KyberBridgeWethWithdraw(\\n            ownerAddress,\\n            amount\\n        );\\n    }\\n\\n    function tokenApprove(\\n        address ownerAddress,\\n        address spenderAddress,\\n        uint256 allowance\\n    )\\n        external\\n        returns (bool success)\\n    {\\n        emit KyberBridgeTokenApprove(\\n            msg.sender,\\n            ownerAddress,\\n            spenderAddress,\\n            allowance\\n        );\\n        return true;\\n    }\\n\\n    function tokenTransfer(\\n        address ownerAddress,\\n        address recipientAddress,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool success)\\n    {\\n        _tokenBalances[msg.sender][ownerAddress] -= amount;\\n        _tokenBalances[msg.sender][recipientAddress] += amount;\\n        emit KyberBridgeTokenTransfer(\\n            msg.sender,\\n            ownerAddress,\\n            recipientAddress,\\n            amount\\n        );\\n        return true;\\n    }\\n\\n    function tokenBalanceOf(\\n        address ownerAddress\\n    )\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return _tokenBalances[msg.sender][ownerAddress];\\n    }\\n\\n    function grantTokensTo(address tokenAddress, address ownerAddress, uint256 amount)\\n        public\\n        payable\\n    {\\n        _tokenBalances[tokenAddress][ownerAddress] += amount;\\n        if (tokenAddress != address(weth)) {\\n            // Send back ether if not WETH.\\n            msg.sender.transfer(msg.value);\\n        } else {\\n            require(msg.value == amount, \\\"VALUE_AMOUNT_MISMATCH\\\");\\n        }\\n    }\\n\\n    // @dev overridden to point to this contract.\\n    function _getKyberNetworkProxyAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    // @dev overridden to point to test WETH.\\n    function _getWethAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(weth);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-monorepo/contracts/asset-proxy/contracts/test/TestUniswapBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\\\";\\nimport \\\"../src/bridges/UniswapBridge.sol\\\";\\nimport \\\"../src/interfaces/IUniswapExchangeFactory.sol\\\";\\nimport \\\"../src/interfaces/IUniswapExchange.sol\\\";\\n\\n\\n// solhint-disable no-simple-event-func-name\\ncontract TestEventsRaiser {\\n\\n    event TokenTransfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    event TokenApprove(\\n        address spender,\\n        uint256 allowance\\n    );\\n\\n    event WethDeposit(\\n        uint256 amount\\n    );\\n\\n    event WethWithdraw(\\n        uint256 amount\\n    );\\n\\n    event EthToTokenTransferInput(\\n        address exchange,\\n        uint256 minTokensBought,\\n        uint256 deadline,\\n        address recipient\\n    );\\n\\n    event TokenToEthSwapInput(\\n        address exchange,\\n        uint256 tokensSold,\\n        uint256 minEthBought,\\n        uint256 deadline\\n    );\\n\\n    event TokenToTokenTransferInput(\\n        address exchange,\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address recipient,\\n        address toTokenAddress\\n    );\\n\\n    function raiseEthToTokenTransferInput(\\n        uint256 minTokensBought,\\n        uint256 deadline,\\n        address recipient\\n    )\\n        external\\n    {\\n        emit EthToTokenTransferInput(\\n            msg.sender,\\n            minTokensBought,\\n            deadline,\\n            recipient\\n        );\\n    }\\n\\n    function raiseTokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEthBought,\\n        uint256 deadline\\n    )\\n        external\\n    {\\n        emit TokenToEthSwapInput(\\n            msg.sender,\\n            tokensSold,\\n            minEthBought,\\n            deadline\\n        );\\n    }\\n\\n    function raiseTokenToTokenTransferInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address recipient,\\n        address toTokenAddress\\n    )\\n        external\\n    {\\n        emit TokenToTokenTransferInput(\\n            msg.sender,\\n            tokensSold,\\n            minTokensBought,\\n            minEthBought,\\n            deadline,\\n            recipient,\\n            toTokenAddress\\n        );\\n    }\\n\\n    function raiseTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        emit TokenTransfer(\\n            msg.sender,\\n            from,\\n            to,\\n            amount\\n        );\\n    }\\n\\n    function raiseTokenApprove(address spender, uint256 allowance)\\n        external\\n    {\\n        emit TokenApprove(spender, allowance);\\n    }\\n\\n    function raiseWethDeposit(uint256 amount)\\n        external\\n    {\\n        emit WethDeposit(amount);\\n    }\\n\\n    function raiseWethWithdraw(uint256 amount)\\n        external\\n    {\\n        emit WethWithdraw(amount);\\n    }\\n}\\n\\n\\n/// @dev A minimalist ERC20/WETH token.\\ncontract TestToken {\\n\\n    using LibSafeMath for uint256;\\n\\n    mapping (address => uint256) public balances;\\n    string private _nextRevertReason;\\n\\n    /// @dev Set the balance for `owner`.\\n    function setBalance(address owner)\\n        external\\n        payable\\n    {\\n        balances[owner] = msg.value;\\n    }\\n\\n    /// @dev Set the revert reason for `transfer()`,\\n    ///      `deposit()`, and `withdraw()`.\\n    function setRevertReason(string calldata reason)\\n        external\\n    {\\n        _nextRevertReason = reason;\\n    }\\n\\n    /// @dev Just calls `raiseTokenTransfer()` on the caller.\\n    function transfer(address to, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        _revertIfReasonExists();\\n        TestEventsRaiser(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @dev Just calls `raiseTokenApprove()` on the caller.\\n    function approve(address spender, uint256 allowance)\\n        external\\n        returns (bool)\\n    {\\n        TestEventsRaiser(msg.sender).raiseTokenApprove(spender, allowance);\\n        return true;\\n    }\\n\\n    /// @dev `IWETH.deposit()` that increases balances and calls\\n    ///     `raiseWethDeposit()` on the caller.\\n    function deposit()\\n        external\\n        payable\\n    {\\n        _revertIfReasonExists();\\n        balances[msg.sender] += balances[msg.sender].safeAdd(msg.value);\\n        TestEventsRaiser(msg.sender).raiseWethDeposit(msg.value);\\n    }\\n\\n    /// @dev `IWETH.withdraw()` that just reduces balances and calls\\n    ///       `raiseWethWithdraw()` on the caller.\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        _revertIfReasonExists();\\n        balances[msg.sender] = balances[msg.sender].safeSub(amount);\\n        msg.sender.transfer(amount);\\n        TestEventsRaiser(msg.sender).raiseWethWithdraw(amount);\\n    }\\n\\n    function allowance(address, address) external view returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @dev Retrieve the balance for `owner`.\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return balances[owner];\\n    }\\n\\n    function _revertIfReasonExists()\\n        private\\n        view\\n    {\\n        if (bytes(_nextRevertReason).length != 0) {\\n            revert(_nextRevertReason);\\n        }\\n    }\\n}\\n\\n\\ncontract TestExchange is\\n    IUniswapExchange\\n{\\n    address public tokenAddress;\\n    string private _nextRevertReason;\\n\\n    constructor(address _tokenAddress) public {\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function setFillBehavior(\\n        string calldata revertReason\\n    )\\n        external\\n        payable\\n    {\\n        _nextRevertReason = revertReason;\\n    }\\n\\n    function ethToTokenTransferInput(\\n        uint256 minTokensBought,\\n        uint256 deadline,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (uint256 tokensBought)\\n    {\\n        TestEventsRaiser(msg.sender).raiseEthToTokenTransferInput(\\n            minTokensBought,\\n            deadline,\\n            recipient\\n        );\\n        _revertIfReasonExists();\\n        return address(this).balance;\\n    }\\n\\n    function tokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEthBought,\\n        uint256 deadline\\n    )\\n        external\\n        returns (uint256 ethBought)\\n    {\\n        TestEventsRaiser(msg.sender).raiseTokenToEthSwapInput(\\n            tokensSold,\\n            minEthBought,\\n            deadline\\n        );\\n        _revertIfReasonExists();\\n        uint256 fillAmount = address(this).balance;\\n        msg.sender.transfer(fillAmount);\\n        return fillAmount;\\n    }\\n\\n    function tokenToTokenTransferInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address recipient,\\n        address toTokenAddress\\n    )\\n        external\\n        returns (uint256 tokensBought)\\n    {\\n        TestEventsRaiser(msg.sender).raiseTokenToTokenTransferInput(\\n            tokensSold,\\n            minTokensBought,\\n            minEthBought,\\n            deadline,\\n            recipient,\\n            toTokenAddress\\n        );\\n        _revertIfReasonExists();\\n        return address(this).balance;\\n    }\\n\\n    function toTokenAddress()\\n        external\\n        view\\n        returns (address _tokenAddress)\\n    {\\n        return tokenAddress;\\n    }\\n\\n    function _revertIfReasonExists()\\n        private\\n        view\\n    {\\n        if (bytes(_nextRevertReason).length != 0) {\\n            revert(_nextRevertReason);\\n        }\\n    }\\n}\\n\\n\\n/// @dev UniswapBridge overridden to mock tokens and implement IUniswapExchangeFactory.\\ncontract TestUniswapBridge is\\n    IUniswapExchangeFactory,\\n    TestEventsRaiser,\\n    UniswapBridge\\n{\\n    TestToken public wethToken;\\n    // Token address to TestToken instance.\\n    mapping (address => TestToken) private _testTokens;\\n    // Token address to TestExchange instance.\\n    mapping (address => TestExchange) private _testExchanges;\\n\\n    constructor() public {\\n        wethToken = new TestToken();\\n        _testTokens[address(wethToken)] = wethToken;\\n    }\\n\\n    /// @dev Sets the balance of this contract for an existing token.\\n    ///      The wei attached will be the balance.\\n    function setTokenBalance(address tokenAddress)\\n        external\\n        payable\\n    {\\n        TestToken token = _testTokens[tokenAddress];\\n        token.deposit.value(msg.value)();\\n    }\\n\\n    /// @dev Sets the revert reason for an existing token.\\n    function setTokenRevertReason(address tokenAddress, string calldata revertReason)\\n        external\\n    {\\n        TestToken token = _testTokens[tokenAddress];\\n        token.setRevertReason(revertReason);\\n    }\\n\\n    /// @dev Create a token and exchange (if they don't exist) for a new token\\n    ///      and sets the exchange revert and fill behavior. The wei attached\\n    ///      will be the fill amount for the exchange.\\n    /// @param tokenAddress The token address. If zero, one will be created.\\n    /// @param revertReason The revert reason for exchange operations.\\n    function createTokenAndExchange(\\n        address tokenAddress,\\n        string calldata revertReason\\n    )\\n        external\\n        payable\\n        returns (TestToken token, TestExchange exchange)\\n    {\\n        token = TestToken(tokenAddress);\\n        if (tokenAddress == address(0)) {\\n            token = new TestToken();\\n        }\\n        _testTokens[address(token)] = token;\\n        exchange = _testExchanges[address(token)];\\n        if (address(exchange) == address(0)) {\\n            _testExchanges[address(token)] = exchange = new TestExchange(address(token));\\n        }\\n        exchange.setFillBehavior.value(msg.value)(revertReason);\\n        return (token, exchange);\\n    }\\n\\n    /// @dev `IUniswapExchangeFactory.getExchange`\\n    function getExchange(address tokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(_testExchanges[tokenAddress]);\\n    }\\n\\n    // @dev Use `wethToken`.\\n    function _getWethAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(wethToken);\\n    }\\n\\n    // @dev This contract will double as the Uniswap contract.\\n    function _getUniswapExchangeFactoryAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"remappings\": [\r\n      \"@0x/contracts-utils=/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils\",\r\n      \"@0x/contracts-erc20=/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20\",\r\n      \"@0x/contracts-exchange-libs=/home/cluracan/code/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs\"\r\n    ]\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ERC20BridgeTransfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedBridgeData\",\"type\":\"bytes\"}],\"name\":\"bridgeTransferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DydxBridge","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://540f688c9357626da9ce4aee9084a3e9edad6c6c7704b121b0d14d0fe1df5fa5"}]}