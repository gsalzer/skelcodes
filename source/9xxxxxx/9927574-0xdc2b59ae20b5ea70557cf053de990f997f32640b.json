{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-04-22\r\n*/\r\n\r\npragma solidity ^0.5.15;\r\n\r\ncontract  ERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256 _totalSupply);\r\n    function balanceOf(address addr_) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address from_, address to_, uint256 _value) external  returns (bool);\r\n    function approve(address spender_, uint256 value_) external  returns (bool);\r\n    function allowance(address _owner, address _spender) external  returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    function lock_address_erc(address address_lock, uint256 lockStartTime, uint256 lockEndTime)  external  returns (bool) ;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal  returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal  returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal  returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  function add(uint256 a, uint256 b) internal  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    string public constant symbol = \"GSMT\";\r\n    string public constant name = \"Graf Token\";\r\n    uint256 public constant decimals = 8;\r\n    address owner;\r\n    \r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    \r\n    uint256 private constant totalsupply_ = 700000000000000000;\r\n    \r\n    \r\n    mapping(address => uint256) private balanceof_;\r\n    mapping(address => mapping(address => uint256)) private allowance_;\r\n    \r\n    constructor() public{\r\n        \r\n        balanceof_[msg.sender] = totalsupply_;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal  {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balanceof_[sender] = balanceof_[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        balanceof_[recipient] = balanceof_[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function totalSupply() external view returns(uint256){\r\n        return totalsupply_;\r\n    }\r\n    \r\n\r\n    function balanceOf(address addr_) external view returns(uint256){\r\n       return balanceof_[addr_];\r\n        \r\n    }\r\n\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n         \r\n        require(_value <= balanceof_[msg.sender]);\r\n        require(_to != msg.sender);\r\n        \r\n        bool isLockAddress = false ;\r\n        \r\n        for (uint i = 0 ; i < lockbox_address_arr.length ; i ++  ){\r\n            if ( lockbox_address_arr[i].address_lock == msg.sender ){\r\n                if (lockbox_address_arr[i].lockStartTime < now && now < lockbox_address_arr[i].lockEndTime){\r\n                    isLockAddress = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        require(!isLockAddress);\r\n        \r\n        if (!isLockAddress){\r\n            \r\n            _transfer(msg.sender, _to, _value);\r\n            return true;\r\n            \r\n        }\r\n        \r\n        return false;\r\n        \r\n    }\r\n\r\n    // function transfer(address to_, uint256 value_) external returns (bool){\r\n    //     require(value_ <= balanceof_[msg.sender]);\r\n    //     require(to_ != address(0));\r\n    //     // SafeMath.sub will throw if there is not enough balance.\r\n\r\n    //     balanceof_[msg.sender] = balanceof_[msg.sender].sub(value_);\r\n    //     balanceof_[to_] = balanceof_[to_].add(value_);\r\n    //     emit Transfer(msg.sender, to_, value_);\r\n    //     return true;\r\n        \r\n    // }\r\n    \r\n    \r\n    //  function transfer1(address _to, uint256 _value) public returns (bool) {\r\n         \r\n    //     require(_value <= balanceof_[msg.sender]);\r\n    //     require(_to != msg.sender);\r\n        \r\n    //     bool isLockAddress = false ;\r\n        \r\n    //     for (uint i = 0 ; i < lockbox_address_arr.length ; i ++  ){\r\n    //         if ( lockbox_address_arr[i].address_lock == msg.sender ){\r\n    //             if (lockbox_address_arr[i].releaseTime > now){\r\n    //                 isLockAddress = true;\r\n    //             }\r\n    //         }\r\n    //     }\r\n        \r\n    //     require(!isLockAddress);\r\n        \r\n    //     if (!isLockAddress){\r\n            \r\n    //         balanceof_[msg.sender] -= _value;\r\n    //         balanceof_[_to] += _value;\r\n    //         emit Transfer(msg.sender, _to, _value);\r\n    //         return true;\r\n            \r\n    //     }\r\n        \r\n    //     return false;\r\n        \r\n    // }\r\n    \r\n    \r\n\r\n    function transferFrom(address from_, address to_, uint256 _value) external  returns (bool){\r\n       \r\n        require(_value <= balanceof_[from_]);\r\n        require(_value <= allowance_[from_][msg.sender]);\r\n        require(to_ != address(0));\r\n\r\n        balanceof_[from_] =balanceof_[from_].sub(_value);\r\n        allowance_[from_][msg.sender] = allowance_[from_][msg.sender].sub(_value);\r\n        balanceof_[to_] =balanceof_[to_].add(_value);\r\n        emit Transfer(from_, to_, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function approve(address spender_, uint256 value_) external  returns (bool){\r\n        \r\n        require(spender_ != address(0));\r\n\r\n        bool status = false;\r\n\r\n        if(balanceof_[msg.sender] >= value_){\r\n            allowance_[msg.sender][spender_] = value_;\r\n            emit Approval(msg.sender, spender_, value_);\r\n            status = true;\r\n        }\r\n        return status;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external  returns (uint256 remaining) {\r\n        return allowance_[_owner][_spender];\r\n        \r\n    }\r\n\r\n    \r\n    struct lock_address{\r\n        address address_lock;\r\n        uint256 lockStartTime;\r\n        uint256 lockEndTime;\r\n        \r\n    }\r\n    \r\n    lock_address[] public lockbox_address_arr;\r\n\r\n    modifier onlyOwner {\r\n      require(msg.sender == owner) ;\r\n      _;\r\n    }\r\n    \r\n    function lock_address_erc(address address_lock, uint256 lockStartTime, uint256 lockEndTime) onlyOwner  external   returns (bool) {\r\n     \r\n        uint contain = isExitLockAddress(address_lock);\r\n        \r\n        if (contain ==  0) {\r\n            \r\n            lockbox_address_arr.length++;\r\n            lockbox_address_arr[lockbox_address_arr.length-1].address_lock = address_lock;\r\n            lockbox_address_arr[lockbox_address_arr.length-1].lockStartTime = lockStartTime;\r\n            lockbox_address_arr[lockbox_address_arr.length-1].lockEndTime = lockEndTime;\r\n            \r\n        }else {\r\n            \r\n            lockbox_address_arr[contain -1].address_lock = address_lock;\r\n            lockbox_address_arr[contain -1].lockStartTime = lockStartTime;\r\n            lockbox_address_arr[contain -1].lockEndTime = lockEndTime;\r\n            \r\n        }\r\n        return true;\r\n    }\r\n    \r\n\r\n    \r\n    // function lock_address_erc1(address _address_lock, uint256 releaseTime)  external  returns (address , uint256, uint) {\r\n    //     uint contain = isExitLockAddress(_address_lock);\r\n    //     if (contain ==  0) {\r\n                \r\n    //             lockbox_address_arr.length++;\r\n    //             lockbox_address_arr[lockbox_address_arr.length-1].address_lock = _address_lock;\r\n    //             lockbox_address_arr[lockbox_address_arr.length-1].releaseTime = releaseTime;\r\n                \r\n    //             return (lockbox_address_arr[lockbox_address_arr.length-1].address_lock,\r\n    //             lockbox_address_arr[lockbox_address_arr.length-1].releaseTime, \r\n    //             lockbox_address_arr.length-1);\r\n               \r\n                \r\n    //         }else {\r\n \r\n    //             lockbox_address_arr[contain -1].address_lock = _address_lock;\r\n    //             lockbox_address_arr[contain -1].releaseTime = releaseTime;\r\n                \r\n    //             return (lockbox_address_arr[contain -1].address_lock,\r\n    //             lockbox_address_arr[contain -1].releaseTime,\r\n    //             contain -1);\r\n    //         }\r\n        \r\n    //     return (address(0), uint256(0), uint(-1));\r\n    // }\r\n    \r\n    \r\n    function getAddressLock(uint indexList) external view returns (address addresslock, uint256 lockStartTime,uint256 lockEndTime, uint index, uint lenght) {\r\n        require(indexList >= 0);\r\n        if (indexList < lockbox_address_arr.length) {\r\n            \r\n            return (lockbox_address_arr[indexList].address_lock,\r\n            lockbox_address_arr[indexList].lockStartTime,\r\n            lockbox_address_arr[indexList].lockEndTime,\r\n            indexList,\r\n            lockbox_address_arr.length );\r\n        }\r\n    }\r\n    \r\n    function getTimeAddressLock(address address_) external view returns (address addresslock, uint256 lockStartTime,uint256 lockEndTime, uint index, uint lenght) {\r\n        require(address_ != address(0));\r\n        \r\n        uint contain = isExitLockAddress(address_);\r\n        \r\n        if (contain > 0 ){\r\n                 \r\n        return (lockbox_address_arr[contain -1].address_lock,\r\n            lockbox_address_arr[contain -1].lockStartTime,\r\n            lockbox_address_arr[contain -1].lockEndTime,\r\n            contain -1, \r\n            lockbox_address_arr.length );\r\n        }\r\n           \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function isExitLockAddress(address _address) internal view returns (uint) {\r\n        \r\n        uint isExist = 0 ;\r\n    \r\n        for (uint i = 0 ; i < lockbox_address_arr.length ; i ++  ){\r\n            if ( lockbox_address_arr[i].address_lock == _address ){\r\n                return isExist = i + 1 ;\r\n            }\r\n        }\r\n        \r\n        return isExist ;\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexList\",\"type\":\"uint256\"}],\"name\":\"getAddressLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addresslock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenght\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getTimeAddressLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addresslock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenght\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_lock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"}],\"name\":\"lock_address_erc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockbox_address_arr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_lock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://478a4f733fc29423a7b6572980e66589b52630d7891a0fee6f1366ad2a78e34f"}]}