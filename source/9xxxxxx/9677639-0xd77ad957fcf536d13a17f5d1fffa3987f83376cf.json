{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function setDelay(uint256) public;\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip() external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function rely(address usr) external;\r\n}\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/mom.sol\r\ncontract SaiMomAbstract {\r\n    function setCap(uint256) public;\r\n}\r\n\r\ncontract FlipMomLike {\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function rely(address, address) external;\r\n    function deny(address, address) external;\r\n}\r\n\r\ncontract SpellAction {\r\n    address constant public MCD_PAUSE = 0xbE286431454714F511008713973d3B053A2d38f3;\r\n    address constant public MCD_JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant public MCD_POT = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant public MCD_FLIP_ETH_A = 0xd8a04F5412223F513DC55F839574430f5EC15531;\r\n    address constant public MCD_FLIP_BAT_A = 0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\r\n    address constant public MCD_ADM = 0x9eF05f7F6deB616fd37aC3c959a2dDD25A54E4F5;\r\n    address constant public FLIPPER_MOM = 0x9BdDB99625A711bf9bda237044924E34E8570f75;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 0%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.00)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant public ZERO_PCT_RATE = 1000000000000000000000000000;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 0.5%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.005)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant public ZERO_FIVE_PCT_RATE = 1000000000158153903837946257;\r\n\r\n    function execute() public {\r\n        // Drip Pot and Jugs prior to all modifications.\r\n        PotAbstract(MCD_POT).drip();\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\");\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\");\r\n\r\n        // Set the Dai Savings Rate\r\n        // DSR_RATE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 4%\r\n        // New Rate: 0%\r\n        uint256 DSR_RATE = ZERO_PCT_RATE;\r\n        PotAbstract(MCD_POT).file(\"dsr\", DSR_RATE);\r\n\r\n        // Set the ETH-A stability fee\r\n        // ETH_FEE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 4%\r\n        // New Rate: 0.5%\r\n        uint256 ETH_FEE = ZERO_FIVE_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", ETH_FEE);\r\n\r\n        // Set the BAT-A stability fee\r\n        // BAT_FEE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 4%\r\n        // New Rate: 0.5%\r\n        uint256 BAT_FEE = ZERO_FIVE_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", BAT_FEE);\r\n\r\n        // Set Pause Delay to 4 hours\r\n        DSPauseAbstract(MCD_PAUSE).setDelay(4 hours);\r\n\r\n        // Add FlipperMom\r\n        // Set flipper mom auth to MCD_ADM\r\n        FlipMomLike(FLIPPER_MOM).setAuthority(MCD_ADM);\r\n        // Rely the flipper mom on both ETH-A and BAT-A flippers\r\n        FlipAbstract(MCD_FLIP_ETH_A).rely(address(FLIPPER_MOM));\r\n        FlipAbstract(MCD_FLIP_BAT_A).rely(address(FLIPPER_MOM));\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    // MAINNET ADDRESS\r\n    DSPauseAbstract public pause = DSPauseAbstract(\r\n        0xbE286431454714F511008713973d3B053A2d38f3\r\n    );\r\n    address constant public SAI_MOM = 0xF2C5369cFFb8Ea6284452b0326e326DbFdCb867C;\r\n    uint256 constant public MILLION = 10**6;\r\n    uint256 constant public WAD = 10**18;\r\n\r\n    address public action;\r\n    bytes32 public tag;\r\n    uint256 public eta;\r\n    bytes   public sig;\r\n    uint256 public expiration;\r\n    bool    public done;\r\n\r\n    constructor() public {\r\n        action = address(new SpellAction());\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"spell-already-scheduled\");\r\n        eta = now + pause.delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // Set the Sai debt ceiling\r\n        //\r\n        // SAI_AMOUNT is the total number of Sai that can be created in SCD\r\n        //  as a whole number\r\n        //  ex. a 15 million Sai global ceiling will be GLOBAL_AMOUNT = 15000000\r\n        //\r\n        // Existing ceiling: 25m\r\n        // New ceiling: 20m\r\n        uint256 SAI_AMOUNT = 20 * MILLION;\r\n        SaiMomAbstract(SAI_MOM).setCap(SAI_AMOUNT * WAD);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_MOM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://68f0d6c3322827c1d5c20f9c6f4677eb6b191c141cdb5b67f5d83982dbd2eda5"}]}