{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/InternalModule.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract InternalModule {\r\n\r\n    address[] _authAddress;\r\n\r\n    address payable[] public _contractOwners = [\r\n        address(0x16F2F7eaC61e53271593C6F0BF301afb62837c9c),  // BBE\r\n        address(0xB3707f6130DBe9a0EceB1278172Dce9B0c9a2EFB)\r\n    ];\r\n\r\n    address payable public _defaultReciver = address(0xf2B64c2fFBD458cCC667c66c0C4B278A88450a63);\r\n\r\n    constructor() public {\r\n\r\n        require(_contractOwners.length > 0);\r\n\r\n        _defaultReciver = _contractOwners[0];\r\n    }\r\n\r\n    modifier OwnerOnly() {\r\n\r\n        bool exist = false;\r\n        for ( uint i = 0; i < _contractOwners.length; i++ ) {\r\n            if ( _contractOwners[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(exist); _;\r\n    }\r\n\r\n    modifier DAODefense() {\r\n        uint256 size;\r\n        address payable safeAddr = msg.sender;\r\n        assembly {size := extcodesize(safeAddr)}\r\n        require( size == 0, \"DAO_Warning\" );\r\n        _;\r\n    }\r\n\r\n    modifier APIMethod() {\r\n\r\n        bool exist = false;\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n            if ( _authAddress[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(exist); _;\r\n    }\r\n\r\n    function AuthAddresses() external view returns (address[] memory authAddr) {\r\n        return _authAddress;\r\n    }\r\n\r\n    function AddAuthAddress(address _addr) external OwnerOnly {\r\n        _authAddress.push(_addr);\r\n    }\r\n\r\n    function DelAuthAddress(address _addr) external OwnerOnly {\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n            if (_authAddress[i] == _addr) {\r\n                for (uint j = 0; j < _authAddress.length - 1; j++) {\r\n                    _authAddress[j] = _authAddress[j+1];\r\n                }\r\n                delete _authAddress[_authAddress.length - 1];\r\n                _authAddress.length--;\r\n                return ;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interface/luckassetspool/LuckAssetsPoolInterface.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface LuckAssetsPoolInterface {\r\n\r\n    /// get my reward prices\r\n    function RewardsAmount() external view returns (uint256);\r\n\r\n    /// withdraw my all rewards\r\n    function WithdrawRewards() external returns (uint256);\r\n\r\n    function InPoolProp() external view returns (uint256);\r\n\r\n    /// append user to latest.\r\n    function API_AddLatestAddress( address owner, uint256 amount ) external returns (bool openable);\r\n\r\n    /// only in LuckAssetsPoolA\r\n    function NeedPauseGame() external view returns (bool);\r\n    function API_Reboot() external returns (bool);\r\n\r\n    /// only in LuckAssetsPoolB\r\n    function API_GameOver() external returns (bool);\r\n\r\n    function API_Clear( address owner ) external;\r\n\r\n    event Log_Winner( address owner, uint256 when, uint256 amount);\r\n}\r\n\r\n// File: contracts/interface/lib_math.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\nlibrary lib_math {\r\n\r\n    function CurrentDayzeroTime() public view returns (uint256) {\r\n        return (now / OneDay()) * OneDay();\r\n    }\r\n\r\n    function ConvertTimeToDay(uint256 t) public pure returns (uint256) {\r\n        return (t / OneDay()) * OneDay();\r\n    }\r\n\r\n    function OneDay() public pure returns (uint256) {\r\n        return 1 days;\r\n    }\r\n\r\n    function OneHours() public pure returns (uint256) {\r\n        return 1 hours;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LuckAssetsPoolB.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\ncontract LuckAssetsPoolB is LuckAssetsPoolInterface, InternalModule {\r\n\r\n    struct Invest {\r\n\r\n        address who;\r\n\r\n        uint256 when;\r\n\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 public _nextWinningThePrizeTime;\r\n\r\n    uint256 public _inPoolProp = 5;\r\n\r\n    uint256 public _activityMinLimit = 30 ether;\r\n\r\n    uint256 public _rewardsCount = 5;\r\n\r\n    mapping(uint256 => Invest[]) public _rewardsAmountMapping;\r\n\r\n    mapping(address => uint256) public _sumInAmountMapping;\r\n\r\n    constructor() public {\r\n        _nextWinningThePrizeTime = lib_math.CurrentDayzeroTime() + lib_math.OneDay();\r\n    }\r\n\r\n    function InPoolProp() external view returns (uint256) {\r\n        return _inPoolProp;\r\n    }\r\n\r\n    function API_Clear( address owner ) external APIMethod {\r\n        _sumInAmountMapping[owner] = 0;\r\n    }\r\n\r\n    function API_AddLatestAddress( address owner, uint256 amount ) external APIMethod returns (bool openable) {\r\n\r\n        if ( now > _nextWinningThePrizeTime ) {\r\n            WinningThePrize();\r\n            openable = true;\r\n        }\r\n\r\n        _sumInAmountMapping[owner] += amount;\r\n\r\n        if ( _sumInAmountMapping[owner] >= _activityMinLimit ) {\r\n\r\n            _rewardsAmountMapping[_nextWinningThePrizeTime].push( Invest(owner, now, amount) );\r\n\r\n            _sumInAmountMapping[owner] -= _activityMinLimit;\r\n        }\r\n\r\n        openable = false;\r\n    }\r\n\r\n    function WinningThePrize() internal {\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        Invest[] memory list = _rewardsAmountMapping[_nextWinningThePrizeTime];\r\n\r\n        if ( list.length <= 0 ) {\r\n            _nextWinningThePrizeTime = lib_math.CurrentDayzeroTime() + lib_math.OneDay();\r\n            return;\r\n        }\r\n\r\n        uint256 everRed = contractBalance / _rewardsCount;\r\n        if ( list.length > _rewardsCount ) {\r\n\r\n            for (uint256 i = 0; i < _rewardsCount; i++) {\r\n                address payable paddr = address( uint160( address(list[(now >> i) % list.length].who) ) );\r\n                paddr.transfer(everRed);\r\n                emit Log_Winner(paddr, now, everRed);\r\n            }\r\n\r\n        } else {\r\n\r\n            everRed = contractBalance / list.length;\r\n            for (uint256 i = 0; i < list.length; i++) {\r\n                address payable paddr = address( uint160( address(list[i].who) ) );\r\n                paddr.transfer(everRed);\r\n                emit Log_Winner(paddr, now, everRed);\r\n            }\r\n\r\n        }\r\n\r\n        _nextWinningThePrizeTime = lib_math.CurrentDayzeroTime() + lib_math.OneDay();\r\n    }\r\n\r\n    function API_GameOver() external APIMethod returns (bool) {\r\n        _defaultReciver.transfer( address(this).balance );\r\n    }\r\n\r\n    function Owner_SetInPoolProp(uint256 p) external OwnerOnly {\r\n        _inPoolProp = p;\r\n    }\r\n\r\n    function Owner_SetActivityMinLimit(uint256 p) external OwnerOnly {\r\n        _activityMinLimit = p;\r\n    }\r\n\r\n    function () payable external {}\r\n\r\n    function RewardsAmount() external view returns (uint256) {\r\n        return 0;\r\n    }\r\n    function WithdrawRewards() external returns (uint256) {\r\n        return 0;\r\n    }\r\n    function NeedPauseGame() external view returns (bool) {\r\n        return false;\r\n    }\r\n    function API_Reboot() external returns (bool) {\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"API_AddLatestAddress\",\"outputs\":[{\"name\":\"openable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rewardsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_sumInAmountMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"Owner_SetActivityMinLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NeedPauseGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_activityMinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_contractOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rewardsAmountMapping\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"when\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RewardsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"API_GameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AuthAddresses\",\"outputs\":[{\"name\":\"authAddr\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"API_Reboot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"API_Clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"Owner_SetInPoolProp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_defaultReciver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InPoolProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_inPoolProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"DelAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_nextWinningThePrizeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Log_Winner\",\"type\":\"event\"}]","ContractName":"LuckAssetsPoolB","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"lib_math:a6c9488614ec2d624e1d50700f257642a03af68e","LicenseType":"None","SwarmSource":"bzzr://477accd5ce7bdb867bbbbd83d2c78c1c94e6479496c46f8ee794f9dec4430b1a"}]}