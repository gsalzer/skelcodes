{"status":"1","message":"OK","result":[{"SourceCode":"interface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n    // ERC20 Token Smart Contract\r\n    contract PegToken {\r\n        \r\n        string public constant name = \"Synthetic Alibaba Equity Tokens\";\r\n        string public constant symbol = \"BABA\";\r\n        uint8 public constant decimals = 3;\r\n        uint public _totalSupply = 0;\r\n        //rate will change\r\n        uint256 public RATE = 0;\r\n        bool public isMinting = true;\r\n        bool public isExchangeListed = false;\r\n        OrFeedInterface orfeed= OrFeedInterface(0x73f5022bec0e01c0859634b0c7186301c5464b46);\r\n        \r\n        using SafeMath for uint256;\r\n        address public owner;\r\n        \r\n         // Functions with this modifier can only be executed by the owner\r\n         modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n         }\r\n     \r\n        // Balances for each account\r\n        mapping(address => uint256) balances;\r\n        // Owner of account approves the transfer of an amount to another account\r\n        mapping(address => mapping(address=>uint256)) allowed;\r\n\r\n        // Its a payable function works as a token factory.\r\n        function () payable{\r\n            createTokens();\r\n        }\r\n\r\n        // Constructor\r\n        constructor() public payable {\r\n            owner = msg.sender; \r\n            balances[owner] = _totalSupply;\r\n        }\r\n\r\n        //allows owner to burn tokens that are not sold in a crowdsale\r\n        function burnTokens(uint256 _value) onlyOwner {\r\n\r\n             require(balances[msg.sender] >= _value && _value > 0 );\r\n             _totalSupply = _totalSupply.sub(_value);\r\n             balances[msg.sender] = balances[msg.sender].sub(_value);\r\n             \r\n        }\r\n\r\n\r\n\r\n        // This function creates Tokens  \r\n         function createTokens() payable {\r\n            if(isMinting == true){\r\n                require(msg.value > 0);\r\n                RATE = getETH2TokenRate();\r\n                uint256 tokens = msg.value.div(1000000000000000).mul(RATE).div(100000);\r\n                _totalSupply = _totalSupply.add(tokens);\r\n                balances[msg.sender] = balances[msg.sender].add(tokens);\r\n                Transfer(this, msg.sender, tokens);\r\n                owner.transfer(msg.value);\r\n            }\r\n            else{\r\n                throw;\r\n            }\r\n        }\r\n\r\n\r\n        function getETH2TokenRate() constant returns(uint256){\r\n            \r\n            uint256 equityRate = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1);\r\n            uint256 dolToEthRate = orfeed.getExchangeRate(\"DAI\", \"ETH\", \"DEFAULT\", equityRate);\r\n            uint256 base = 100000000;\r\n            uint256 rate = base.div(dolToEthRate);\r\n            return rate;\r\n        }\r\n        \r\n        \r\n        function endCrowdsale() onlyOwner {\r\n            isMinting = false;\r\n        }\r\n        \r\n        function totalSupply() constant returns(uint256){\r\n            return _totalSupply;\r\n        }\r\n        // What is the balance of a particular account?\r\n        function balanceOf(address _owner) constant returns(uint256){\r\n            return balances[_owner];\r\n        }\r\n\r\n         // Transfer the balance from owner's account to another account   \r\n        function transfer(address _to, uint256 _value)  returns(bool) {\r\n            require(balances[msg.sender] >= _value && _value > 0 );\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) returns(bool){\r\n        allowed[msg.sender][_spender] = _value; \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns(uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETH2TokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExchangeListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PegToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2761268103ad75bfb334c9c82faaa59ad07827a286f71cd9b637c62bb8f5d6b2"}]}