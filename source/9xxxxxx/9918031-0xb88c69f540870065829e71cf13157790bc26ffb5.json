{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.5;\r\n\r\ncontract Ultraspace {\r\n\r\n\r\n    address payable public owner = 0x600247A0E0e6aa4d1B79D6c56739D2f85C666533;\r\n\r\n    \r\n    event Received(address, uint);\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    function getBalance(address _ad) public view returns(uint){\r\n        return _ad.balance;\r\n    }\r\n    \r\n    // diamond Plan registration\r\n    \r\n    mapping(address => uint) public diamondPayment;\r\n    \r\n    function registerDiamond() public payable {\r\n        require(msg.value == 0.1 ether, \"Not appropriate amount\");\r\n        diamondPayment[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToUplineDiamond(address payable _u1, address payable _u2, address payable _u3, address payable _sponsor) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n\r\n        \r\n        _sponsor.transfer(0.04 ether);\r\n        \r\n        if(_u1 == address(0x0)) {\r\n            // owner.transfer(0.06 ether);\r\n        }\r\n        else if(_u2 == address(0x0)) {\r\n            _u1.transfer(0.01 ether);\r\n            // owner.transfer(0.05 ether);\r\n        }\r\n        else if(_u3 == address(0x0)) {\r\n            _u1.transfer(0.01 ether);\r\n            _u2.transfer(0.015 ether);\r\n            // owner.transfer(0.035 ether);\r\n        }\r\n        \r\n        else{\r\n            _u1.transfer(0.01 ether);\r\n            _u2.transfer(0.015 ether);\r\n            _u3.transfer(0.02 ether);\r\n            // owner.transfer(0.015 ether);\r\n        }\r\n        \r\n        delete diamondPayment[msg.sender];\r\n        \r\n    }\r\n    \r\n    \r\n    // ruby Plan registration\r\n    \r\n    mapping(address => uint) public rubyPayment;\r\n    \r\n    function registerRuby() public payable {\r\n        require(msg.value == 0.15 ether, \"Not appropriate amount\");\r\n        rubyPayment[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToUplineRuby(address payable _u1, address payable _u2, address payable _u3, address payable _u4, address payable _sponsor) public{\r\n        // uint val = rubyPayment[msg.sender];\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        \r\n        _sponsor.transfer(0.06 ether);\r\n        \r\n        if(_u1 == address(0x0)) {\r\n            // owner.transfer(0.09 ether);\r\n        }\r\n        else if(_u2 == address(0x0)) {\r\n            _u1.transfer(0.01 ether);\r\n            \r\n            // owner.transfer(0.08 ether);\r\n        }\r\n        else if(_u3 == address(0x0)) {\r\n            _u1.transfer(0.01 ether);\r\n            _u2.transfer(0.015 ether);\r\n            \r\n            // owner.transfer(0.065 ether);\r\n        }\r\n        \r\n        else if(_u4 == address(0x0)) {\r\n            _u1.transfer(0.01 ether);\r\n            _u2.transfer(0.015 ether);\r\n            _u3.transfer(0.02 ether);\r\n        \r\n            // owner.transfer(0.045 ether);\r\n        }\r\n        \r\n        else{\r\n            _u1.transfer(0.01 ether);\r\n            _u2.transfer(0.015 ether);\r\n            _u3.transfer(0.02 ether);\r\n            _u4.transfer(0.025 ether);\r\n        \r\n            // owner.transfer(0.02 ether);\r\n        }\r\n        \r\n        \r\n        delete rubyPayment[msg.sender];\r\n        \r\n    }\r\n    \r\n    // emerald Plan registration\r\n    \r\n    mapping(address => uint) public emeraldPayment;\r\n    \r\n    function registerEmerald() public payable {\r\n        require(msg.value == 0.25 ether, \"Not appropriate amount\");\r\n        emeraldPayment[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToUplineEmerald(address payable _u1, address payable _u2, address payable _u3, address payable _u4, address payable _u5, address payable _sponsor) public{\r\n        // uint val = emeraldPayment[msg.sender];\r\n        \r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        \r\n        _sponsor.transfer(0.1 ether);\r\n        \r\n        if(_u1 == address(0x0)) {\r\n            // owner.transfer(0.15 ether);\r\n        }\r\n        else if(_u2 == address(0x0)) {\r\n            _u1.transfer(0.015 ether);\r\n        \r\n            // owner.transfer(0.135 ether);\r\n        }\r\n        else if(_u3 == address(0x0)) {\r\n            _u1.transfer(0.015 ether);\r\n            _u2.transfer(0.02 ether);\r\n        \r\n            // owner.transfer(0.115 ether);\r\n        }\r\n        \r\n        else if(_u4 == address(0x0)) {\r\n            _u1.transfer(0.015 ether);\r\n            _u2.transfer(0.02 ether);\r\n            _u3.transfer(0.025 ether);\r\n        \r\n            // owner.transfer(0.09 ether);\r\n        }\r\n        \r\n        else if(_u5 == address(0x0)) {\r\n            _u1.transfer(0.015 ether);\r\n            _u2.transfer(0.02 ether);\r\n            _u3.transfer(0.025 ether);\r\n            _u4.transfer(0.03 ether);\r\n        \r\n            // owner.transfer(0.06 ether);\r\n        }\r\n        \r\n        else{\r\n            _u1.transfer(0.015 ether);\r\n            _u2.transfer(0.02 ether);\r\n            _u3.transfer(0.025 ether);\r\n            _u4.transfer(0.03 ether);\r\n            _u5.transfer(0.035 ether);\r\n        \r\n            // owner.transfer(0.025 ether);\r\n        }\r\n        \r\n        delete emeraldPayment[msg.sender];\r\n        \r\n    }\r\n    \r\n    \r\n    // leadership bonus\r\n    function sendLeaderShipBonusDiamond(address payable _leader, uint8 _value) public {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\r\n        if(_value == 5){\r\n            _leader.transfer(0.025 ether);\r\n        }\r\n        else if(_value == 15){\r\n            _leader.transfer(0.04 ether);\r\n        }\r\n        else if(_value == 25){\r\n            _leader.transfer(0.06 ether);\r\n        }\r\n        else if(_value == 50){\r\n            _leader.transfer(0.10 ether);\r\n        }\r\n        \r\n    }\r\n    \r\n    function sendLeaderShipBonusRuby(address payable _leader, uint8 _value) public {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\r\n        if(_value == 5){\r\n            _leader.transfer(0.03 ether);\r\n        }\r\n        else if(_value == 15){\r\n            _leader.transfer(0.05 ether);\r\n        }\r\n        else if(_value == 25){\r\n            _leader.transfer(0.07 ether);\r\n        }\r\n        else if(_value == 50){\r\n            _leader.transfer(0.15 ether);\r\n        }\r\n    }\r\n    \r\n    function sendLeaderShipBonusEmerald(address payable _leader, uint8 _value) public {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\r\n        if(_value == 5){\r\n            _leader.transfer(0.035 ether);\r\n        }\r\n        else if(_value == 15){\r\n            _leader.transfer(0.06 ether);\r\n        }\r\n        else if(_value == 25){\r\n            _leader.transfer(0.08 ether);\r\n        }\r\n        else if(_value == 50){\r\n            _leader.transfer(0.20 ether);\r\n        }\r\n    }\r\n    \r\n    \r\n    // mono line plans\r\n    \r\n    // pool 1\r\n    \r\n    mapping(address => uint) pool1;\r\n    \r\n    function pool1Register() payable public {\r\n        require(msg.value == 0.08 ether, \"Wrong amount sent\");\r\n        address(this).transfer(msg.value);\r\n        pool1[msg.sender] = msg.value;\r\n    }\r\n    \r\n    function transferToPool1Upline(address payable _ad) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_ad != address(0x0), \"Invalid Address\");\r\n        \r\n        _ad.transfer(0.06 ether);\r\n        // address(this).transfer(0.02 ether);\r\n        \r\n        delete pool1[msg.sender];\r\n    }\r\n    \r\n    function sendRejoinAndMatchingBonusPool1(address payable _user, address payable _sponcer) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        _user.transfer(0.01 ether);\r\n        _sponcer.transfer(0.01 ether);\r\n    }\r\n    \r\n    // pool 2\r\n    \r\n    mapping(address => uint) pool2;\r\n    \r\n    function pool2Register() payable public {\r\n        require(msg.value == 0.12 ether, \"Wrong amount sent\");\r\n        pool2[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToPool2Upline(address payable _ad) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_ad != address(0x0), \"Invalid Address\");\r\n        \r\n        _ad.transfer(0.09 ether);\r\n        // address(this).transfer(0.03 ether);\r\n        \r\n        delete pool2[msg.sender];\r\n    }\r\n    \r\n    function sendRejoinAndMatchingBonusPool2(address payable _user, address payable _sponcer) public  {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        _user.transfer(0.015 ether);\r\n        _sponcer.transfer(0.015 ether);\r\n    }\r\n    \r\n    // pool 3\r\n    mapping(address => uint) pool3;\r\n    \r\n    function pool3Register() payable public {\r\n        require(msg.value == 0.20 ether, \"Wrong amount sent\");\r\n        pool3[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToPool3Upline(address payable _ad) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_ad != address(0x0), \"Invalid Address\");\r\n        \r\n        _ad.transfer(0.15 ether);\r\n        // address(this).transfer(0.05 ether);\r\n        \r\n        delete pool3[msg.sender];\r\n    }\r\n    \r\n    function sendRejoinAndMatchingBonusPool3(address payable _user, address payable _sponcer) public {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        _user.transfer(0.025 ether);\r\n        _sponcer.transfer(0.025 ether);\r\n    }\r\n    \r\n    // pool 4\r\n    mapping(address => uint) pool4;\r\n    \r\n    function pool4Register() payable public {\r\n        require(msg.value == 0.30 ether, \"Wrong amount sent\");\r\n        pool4[msg.sender] = msg.value;\r\n        address(this).transfer(msg.value);\r\n    }\r\n    \r\n    function transferToPool4Upline(address payable _ad) public{\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        require(_ad != address(0x0), \"Invalid Address\");\r\n        \r\n        _ad.transfer(0.23 ether);\r\n        // address(this).transfer(0.07 ether);\r\n        \r\n        delete pool4[msg.sender];\r\n    }\r\n    \r\n    function sendRejoinAndMatchingBonusPool4(address payable _user, address payable _sponcer) public {\r\n        require(msg.sender == owner, \"You are not authorized\");\r\n        _user.transfer(0.035 ether);\r\n        _sponcer.transfer(0.035 ether);\r\n    }\r\n\r\n\r\n    // only owner;\r\n    \r\n    event ContractBalance(uint Balance);\r\n    \r\n    function getContractBalance() public returns(uint _balance){\r\n      require(msg.sender == owner, \"You are not authorized\");\r\n      emit ContractBalance(address(this).balance);\r\n      return(address(this).balance);\r\n    }\r\n    \r\n    // amount in wei\r\n    function getFundsToOwner(uint _amount) public {\r\n      require(msg.sender == owner, \"You are not authorized\");\r\n      msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Balance\",\"type\":\"uint256\"}],\"name\":\"ContractBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"diamondPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emeraldPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFundsToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1Register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2Register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3Register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4Register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerDiamond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerEmerald\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerRuby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rubyPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_leader\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"sendLeaderShipBonusDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_leader\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"sendLeaderShipBonusEmerald\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_leader\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"sendLeaderShipBonusRuby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponcer\",\"type\":\"address\"}],\"name\":\"sendRejoinAndMatchingBonusPool1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponcer\",\"type\":\"address\"}],\"name\":\"sendRejoinAndMatchingBonusPool2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponcer\",\"type\":\"address\"}],\"name\":\"sendRejoinAndMatchingBonusPool3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponcer\",\"type\":\"address\"}],\"name\":\"sendRejoinAndMatchingBonusPool4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"transferToPool1Upline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"transferToPool2Upline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"transferToPool3Upline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"transferToPool4Upline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_u1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"transferToUplineDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_u1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u4\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u5\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"transferToUplineEmerald\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_u1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_u4\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"transferToUplineRuby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Ultraspace","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://df3ea004bf8592d1490f024af86cd285127464642688f97506029a6c4ff12ffb"}]}