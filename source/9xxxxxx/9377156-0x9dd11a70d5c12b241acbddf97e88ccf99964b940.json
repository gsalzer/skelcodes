{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/commons/Math.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\nlibrary Math {\r\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}\r\n\r\n// File: contracts/implementations/MarmoImp.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract MarmoImp {\r\n    uint256 private constant EXTRA_GAS = 21000;\r\n\r\n    event Receipt(\r\n        bytes32 indexed _id,\r\n        bool _success,\r\n        bytes _result\r\n    );\r\n\r\n    // Performs calls when used as an implementation of a Marmo wallet\r\n    // It validates dependencies, gas price/limit and expiration time\r\n    // msg.data = 256 bits ID + N bits raw data\r\n    function() external payable {\r\n        // Retrieve Intent ID and raw data\r\n        (\r\n            bytes32 id,\r\n            bytes memory data\r\n        ) = abi.decode(\r\n            msg.data, (\r\n                bytes32,\r\n                bytes\r\n            )\r\n        );\r\n\r\n        // Retrieve inputs from data\r\n        bytes memory dependency;\r\n        address to;\r\n        uint256 value;\r\n        uint256 maxGasLimit;\r\n        uint256 maxGasPrice;\r\n        uint256 expiration;\r\n\r\n        (\r\n            dependency,\r\n            to,\r\n            value,\r\n            data,\r\n            maxGasLimit,\r\n            maxGasPrice,\r\n            expiration\r\n        ) = abi.decode(\r\n            data, (\r\n                bytes,\r\n                address,\r\n                uint256,\r\n                bytes,\r\n                uint256,\r\n                uint256,\r\n                uint256\r\n            )\r\n        );\r\n\r\n        // Validate Intent not expired, gas price and dependencies\r\n        require(now < expiration, \"Intent is expired\");\r\n        require(tx.gasprice < maxGasPrice, \"Gas price too high\");\r\n        require(_checkDependency(dependency), \"Dependency is not satisfied\");\r\n\r\n        // Perform the Intent call\r\n        // Send max gas limit or maximum possible gas limit\r\n        // (keep an extra to catch an out of gas)\r\n        (\r\n            bool success,\r\n            bytes memory result\r\n        ) = to.call.gas(\r\n            Math.min(\r\n                block.gaslimit - EXTRA_GAS,\r\n                maxGasLimit\r\n            )\r\n        ).value(value)(data);\r\n\r\n        // Emit receipt with result of the call\r\n        emit Receipt(\r\n            id,\r\n            success,\r\n            result\r\n        );\r\n    }\r\n\r\n    // The dependency is a 'staticcall' to a 'target'\r\n    //  when the call succeeds and it does not return false, the dependency is satisfied.\r\n    // [160 bits (target) + n bits (data)]\r\n    function _checkDependency(bytes memory _dependency) internal view returns (bool result) {\r\n        if (_dependency.length == 0) {\r\n            result = true;\r\n        } else {\r\n            assembly {\r\n                let response := mload(0x40)\r\n                let success := staticcall(\r\n                    gas,\r\n                    mload(add(_dependency, 20)),\r\n                    add(52, _dependency),\r\n                    sub(mload(_dependency), 20),\r\n                    response,\r\n                    32\r\n                )\r\n\r\n                result := and(gt(success, 0), gt(mload(response), 0))\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"name\":\"Receipt\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MarmoImp","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://6c4d6e741393cdae0fac897b96f0c4963f816fb9f197e688832e2f5b1f5323cb"}]}