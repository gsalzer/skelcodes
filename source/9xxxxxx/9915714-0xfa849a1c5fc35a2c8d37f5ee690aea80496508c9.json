{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\ncontract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable returns (bool);\r\n\r\n    function owner() public returns (address);\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract AdminAuth {\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(_admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundMonitorProxy is AdminAuth {\r\n\r\n    uint public CHANGE_PERIOD;\r\n    address public monitor;\r\n    address public newMonitor;\r\n    address public lastMonitor;\r\n    uint public changeRequestedTimestamp;\r\n\r\n    mapping(address => bool) public allowed;\r\n\r\n    event MonitorChangeInitiated(address oldMonitor, address newMonitor);\r\n    event MonitorChangeCanceled();\r\n    event MonitorChangeFinished(address monitor);\r\n    event MonitorChangeReverted(address monitor);\r\n\r\n    // if someone who is allowed become malicious, owner can't be changed\r\n    modifier onlyAllowed() {\r\n        require(allowed[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMonitor() {\r\n        require (msg.sender == monitor);\r\n        _;\r\n    }\r\n\r\n    constructor(uint _changePeriod) public {\r\n        CHANGE_PERIOD = _changePeriod * 1 days;\r\n    }\r\n\r\n    /// @notice Only monitor contract is able to call execute on users proxy\r\n    /// @param _owner Address of cdp owner (users DSProxy address)\r\n    /// @param _compoundSaverProxy Address of CompoundSaverProxy\r\n    /// @param _data Data to send to CompoundSaverProxy\r\n    function callExecute(address _owner, address _compoundSaverProxy, bytes memory _data) public payable onlyMonitor {\r\n        // execute reverts if calling specific method fails\r\n        DSProxyInterface(_owner).execute.value(msg.value)(_compoundSaverProxy, _data);\r\n\r\n        // return if anything left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Allowed users are able to set Monitor contract without any waiting period first time\r\n    /// @param _monitor Address of Monitor contract\r\n    function setMonitor(address _monitor) public onlyAllowed {\r\n        require(monitor == address(0));\r\n        monitor = _monitor;\r\n    }\r\n\r\n    /// @notice Allowed users are able to start procedure for changing monitor\r\n    /// @dev after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change\r\n    /// @param _newMonitor address of new monitor\r\n    function changeMonitor(address _newMonitor) public onlyAllowed {\r\n        require(changeRequestedTimestamp == 0);\r\n\r\n        changeRequestedTimestamp = now;\r\n        lastMonitor = monitor;\r\n        newMonitor = _newMonitor;\r\n\r\n        emit MonitorChangeInitiated(lastMonitor, newMonitor);\r\n    }\r\n\r\n    /// @notice At any point allowed users are able to cancel monitor change\r\n    function cancelMonitorChange() public onlyAllowed {\r\n        require(changeRequestedTimestamp > 0);\r\n\r\n        changeRequestedTimestamp = 0;\r\n        newMonitor = address(0);\r\n\r\n        emit MonitorChangeCanceled();\r\n    }\r\n\r\n    /// @notice Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started\r\n    function confirmNewMonitor() public onlyAllowed {\r\n        require((changeRequestedTimestamp + CHANGE_PERIOD) < now);\r\n        require(changeRequestedTimestamp != 0);\r\n        require(newMonitor != address(0));\r\n\r\n        monitor = newMonitor;\r\n        newMonitor = address(0);\r\n        changeRequestedTimestamp = 0;\r\n\r\n        emit MonitorChangeFinished(monitor);\r\n    }\r\n\r\n    /// @notice Its possible to revert monitor to last used monitor\r\n    function revertMonitor() public onlyAllowed {\r\n        require(lastMonitor != address(0));\r\n\r\n        monitor = lastMonitor;\r\n\r\n        emit MonitorChangeReverted(monitor);\r\n    }\r\n\r\n\r\n    /// @notice Allowed users are able to add new allowed user\r\n    /// @param _user Address of user that will be allowed\r\n    function addAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = true;\r\n    }\r\n\r\n    /// @notice Allowed users are able to remove allowed user\r\n    /// @dev owner is always allowed even if someone tries to remove it from allowed mapping\r\n    /// @param _user Address of allowed user\r\n    function removeAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = false;\r\n    }\r\n\r\n    function setChangePeriod(uint _periodInDays) public onlyAllowed {\r\n        require(_periodInDays * 1 days > CHANGE_PERIOD);\r\n\r\n        CHANGE_PERIOD = _periodInDays * 1 days;\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    /// @param _token address of token to withdraw balance\r\n    function withdrawToken(address _token) public onlyOwner {\r\n        uint balance = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    function withdrawEth() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundSubscriptions is AdminAuth {\r\n\r\n    struct CompoundHolder {\r\n        address user;\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        bool boostEnabled;\r\n    }\r\n\r\n    struct SubPosition {\r\n        uint arrPos;\r\n        bool subscribed;\r\n    }\r\n\r\n    CompoundHolder[] public subscribers;\r\n    mapping (address => SubPosition) public subscribersPos;\r\n\r\n    uint public changeIndex;\r\n\r\n    event Subscribed(address indexed user);\r\n    event Unsubscribed(address indexed user);\r\n    event Updated(address indexed user);\r\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\r\n\r\n    /// @dev Called by the DSProxy contract which owns the Compound position\r\n    /// @notice Adds the users Compound poistion in the list of subscriptions so it can be monitored\r\n    /// @param _minRatio Minimum ratio below which repay is triggered\r\n    /// @param _maxRatio Maximum ratio after which boost is triggered\r\n    /// @param _optimalBoost Ratio amount which boost should target\r\n    /// @param _optimalRepay Ratio amount which repay should target\r\n    /// @param _boostEnabled Boolean determing if boost is enabled\r\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\r\n\r\n        // if boost is not enabled, set max ratio to max uint\r\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\r\n        require(checkParams(_minRatio, localMaxRatio), \"Must be correct params\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[msg.sender];\r\n\r\n        CompoundHolder memory subscription = CompoundHolder({\r\n                minRatio: _minRatio,\r\n                maxRatio: localMaxRatio,\r\n                optimalRatioBoost: _optimalBoost,\r\n                optimalRatioRepay: _optimalRepay,\r\n                user: msg.sender,\r\n                boostEnabled: _boostEnabled\r\n            });\r\n\r\n        changeIndex++;\r\n\r\n        if (subInfo.subscribed) {\r\n            subscribers[subInfo.arrPos] = subscription;\r\n\r\n            emit Updated(msg.sender);\r\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\r\n        } else {\r\n            subscribers.push(subscription);\r\n\r\n            subInfo.arrPos = subscribers.length - 1;\r\n            subInfo.subscribed = true;\r\n\r\n            emit Subscribed(msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Called by the users DSProxy\r\n    /// @dev Owner who subscribed cancels his subscription\r\n    function unsubscribe() external {\r\n        _unsubscribe(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks limit if minRatio is bigger than max\r\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\r\n\r\n        if (_minRatio > _maxRatio) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal method to remove a subscriber from the list\r\n    function _unsubscribe(address _user) internal {\r\n        require(subscribers.length > 0, \"Must have subscribers in the list\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        require(subInfo.subscribed, \"Must first be subscribed\");\r\n\r\n        address lastOwner = subscribers[subscribers.length - 1].user;\r\n\r\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\r\n        subInfo2.arrPos = subInfo.arrPos;\r\n\r\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\r\n        delete subscribers[subscribers.length - 1];\r\n        subscribers.length--;\r\n\r\n        changeIndex++;\r\n        subInfo.subscribed = false;\r\n        subInfo.arrPos = 0;\r\n\r\n        emit Unsubscribed(msg.sender);\r\n    }\r\n\r\n    function isSubscribed(address _user) public view returns (bool) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subInfo.subscribed;\r\n    }\r\n\r\n    function getHolder(address _user) public view returns (CompoundHolder memory) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subscribers[subInfo.arrPos];\r\n    }\r\n\r\n    /// @notice Helper method to return all the subscribed CDPs\r\n    function getSubscribers() public view returns (CompoundHolder[] memory) {\r\n        return subscribers;\r\n    }\r\n\r\n    /// @notice Helper method to return all the subscribed CDPs\r\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (CompoundHolder[] memory) {\r\n        CompoundHolder[] memory holders = new CompoundHolder[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        uint count = 0;\r\n        for (uint i=start; i<end; i++) {\r\n            holders[count] = subscribers[i];\r\n            count++;\r\n        }\r\n\r\n        return holders;\r\n    }\r\n\r\n    ////////////// ADMIN METHODS ///////////////////\r\n\r\n    /// @notice Admin function to unsubscribe a CDP\r\n    function unsubscribeByAdmin(address _user) public onlyOwner {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        if (subInfo.subscribed) {\r\n            _unsubscribe(_user);\r\n        }\r\n    }\r\n}\r\n\r\ncontract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract AutomaticLogger {\r\n    event CdpRepay(uint indexed cdpId, address indexed caller, uint amount, uint beforeRatio, uint afterRatio, address logger);\r\n    event CdpBoost(uint indexed cdpId, address indexed caller, uint amount, uint beforeRatio, uint afterRatio, address logger);\r\n\r\n    function logRepay(uint cdpId, address caller, uint amount, uint beforeRatio, uint afterRatio) public {\r\n        emit CdpRepay(cdpId, caller, amount, beforeRatio, afterRatio, msg.sender);\r\n    }\r\n\r\n    function logBoost(uint cdpId, address caller, uint amount, uint beforeRatio, uint afterRatio) public {\r\n        emit CdpBoost(cdpId, caller, amount, beforeRatio, afterRatio, msg.sender);\r\n    }\r\n}\r\n\r\ncontract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n    function markets(address account) public view returns (bool, uint);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\ncontract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b <= a) {\r\n            return (MathError.NO_ERROR, a - b);\r\n        } else {\r\n            return (MathError.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\r\n        (MathError err0, uint sum) = addUInt(a, b);\r\n\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return subUInt(sum, c);\r\n    }\r\n}\r\n\r\n\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an exponential from numerator and denominator values.\r\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n     *            or if `denom` is zero.\r\n     */\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two exponentials, returning a new exponential.\r\n     */\r\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two exponentials, returning a new exponential.\r\n     */\r\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, returning a new Exp.\r\n     */\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n     */\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials, returning a new exponential.\r\n     */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n\r\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == MathError.NO_ERROR);\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n     */\r\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\r\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies three exponentials, returning a new exponential.\r\n     */\r\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\r\n        (MathError err, Exp memory ab) = mulExp(a, b);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, ab);\r\n        }\r\n        return mulExp(ab, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two exponentials, returning a new exponential.\r\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n     */\r\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        return getExp(a.mantissa, b.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n}\r\n\r\n\r\ncontract CToken {\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n}\r\n\r\ncontract CompoundOracle {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ncontract CompoundLoanInfo is Exponential {\r\n\r\n    ComptrollerInterface public constant comp = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    CompoundOracle public constant oracle = CompoundOracle(0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd);\r\n\r\n    function getRatio(address _user) public view returns (uint) {\r\n        // For each asset the account is in\r\n        address[] memory assets = comp.getAssetsIn(_user);\r\n\r\n        uint sumCollateral = 0;\r\n        uint sumBorrow = 0;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address asset = assets[i];\r\n\r\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\r\n                                        = CToken(asset).getAccountSnapshot(_user);\r\n\r\n            Exp memory oraclePrice;\r\n\r\n            if (cTokenBalance != 0 || borrowBalance != 0) {\r\n                oraclePrice = Exp({mantissa: oracle.getUnderlyingPrice(asset)});\r\n            }\r\n\r\n            // Sum up collateral in Eth\r\n            if (cTokenBalance != 0) {\r\n                Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\r\n                (, Exp memory tokensToEther) = mulExp(exchangeRate, oraclePrice);\r\n                (, sumCollateral) = mulScalarTruncateAddUInt(tokensToEther, cTokenBalance, sumCollateral);\r\n            }\r\n\r\n            // Sum up debt in Eth\r\n            if (borrowBalance != 0) {\r\n                (, sumBorrow) = mulScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrow);\r\n            }\r\n        }\r\n\r\n        if (sumBorrow == 0) return 0;\r\n\r\n        return (sumCollateral * 10**18) / sumBorrow;\r\n    }\r\n}\r\n\r\ncontract CompoundMonitor is AdminAuth, DSMath, CompoundLoanInfo {\r\n\r\n    enum Method { Boost, Repay }\r\n\r\n    uint public REPAY_GAS_TOKEN = 30;\r\n    uint public BOOST_GAS_TOKEN = 19;\r\n\r\n    uint constant public MAX_GAS_PRICE = 80000000000; // 80 gwei\r\n\r\n    uint public REPAY_GAS_COST = 2200000;\r\n    uint public BOOST_GAS_COST = 1500000;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address public constant AUTOMATIC_LOGGER_ADDRESS = 0xAD32Ce09DE65971fFA8356d7eF0B783B82Fd1a9A;\r\n\r\n    CompoundMonitorProxy public compoundMonitorProxy;\r\n    CompoundSubscriptions public subscriptionsContract;\r\n    GasTokenInterface gasToken = GasTokenInterface(GAS_TOKEN_INTERFACE_ADDRESS);\r\n    address public compoundFlashLoanTakerAddress;\r\n\r\n    AutomaticLogger public logger = AutomaticLogger(AUTOMATIC_LOGGER_ADDRESS);\r\n\r\n    /// @dev Addresses that are able to call methods for repay and boost\r\n    mapping(address => bool) public approvedCallers;\r\n\r\n    modifier onlyApproved() {\r\n        require(approvedCallers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor(address _compoundMonitorProxy, address _subscriptions, address _compoundFlashLoanTaker) public {\r\n        approvedCallers[msg.sender] = true;\r\n\r\n        compoundMonitorProxy = CompoundMonitorProxy(_compoundMonitorProxy);\r\n        subscriptionsContract = CompoundSubscriptions(_subscriptions);\r\n        compoundFlashLoanTakerAddress = _compoundFlashLoanTaker;\r\n    }\r\n\r\n    /// @notice Bots call this method to repay for user when conditions are met\r\n    function repayFor(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData,\r\n        address _user\r\n    ) public payable onlyApproved {\r\n        if (gasToken.balanceOf(address(this)) >= BOOST_GAS_TOKEN) {\r\n            gasToken.free(BOOST_GAS_TOKEN);\r\n        }\r\n\r\n        uint ratioBefore;\r\n        bool isAllowed;\r\n        (isAllowed, ratioBefore) = canCall(Method.Repay, _user);\r\n        require(isAllowed);\r\n\r\n        uint gasCost = calcGasCost(REPAY_GAS_COST);\r\n        _data[4] = gasCost;\r\n\r\n        compoundMonitorProxy.callExecute.value(msg.value)(\r\n            _user,\r\n            compoundFlashLoanTakerAddress,\r\n            abi.encodeWithSignature(\"repayWithLoan(uint256[5],address[3],bytes)\",\r\n            _data, _addrData, _callData));\r\n\r\n        uint ratioAfter;\r\n        bool isGoodRatio;\r\n        (isGoodRatio, ratioAfter) = ratioGoodAfter(Method.Repay, _user);\r\n        // doesn't allow user to repay too much\r\n        require(isGoodRatio);\r\n\r\n        returnEth();\r\n\r\n        logger.logRepay(0, msg.sender, _data[0], ratioBefore, ratioAfter);\r\n    }\r\n\r\n    /// @notice Bots call this method to boost for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    function boostFor(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData,\r\n        address _user\r\n    ) public payable onlyApproved {\r\n        if (gasToken.balanceOf(address(this)) >= REPAY_GAS_TOKEN) {\r\n            gasToken.free(REPAY_GAS_TOKEN);\r\n        }\r\n\r\n        uint ratioBefore;\r\n        bool isAllowed;\r\n        (isAllowed, ratioBefore) = canCall(Method.Boost, _user);\r\n        require(isAllowed);\r\n\r\n        uint gasCost = calcGasCost(BOOST_GAS_COST);\r\n        _data[4] = gasCost;\r\n\r\n        compoundMonitorProxy.callExecute.value(msg.value)(\r\n            _user,\r\n            compoundFlashLoanTakerAddress,\r\n            abi.encodeWithSignature(\"boostWithLoan(uint256[5],address[3],bytes)\",\r\n            _data, _addrData, _callData));\r\n\r\n        uint ratioAfter;\r\n        bool isGoodRatio;\r\n        (isGoodRatio, ratioAfter) = ratioGoodAfter(Method.Boost, _user);\r\n        // doesn't allow user to boost too much\r\n        require(isGoodRatio);\r\n\r\n        returnEth();\r\n\r\n        logger.logBoost(0, msg.sender, _data[0], ratioBefore, ratioAfter);\r\n    }\r\n\r\n/******************* INTERNAL METHODS ********************************/\r\n    function returnEth() internal {\r\n        // return if some eth left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n/******************* STATIC METHODS ********************************/\r\n\r\n    /// @notice Checks if Boost/Repay could be triggered for the CDP\r\n    /// @dev Called by MCDMonitor to enforce the min/max check\r\n    function canCall(Method _method, address _user) public view returns(bool, uint) {\r\n        bool subscribed = subscriptionsContract.isSubscribed(_user);\r\n        CompoundSubscriptions.CompoundHolder memory holder = subscriptionsContract.getHolder(_user);\r\n\r\n        // check if cdp is subscribed\r\n        if (!subscribed) return (false, 0);\r\n\r\n        // check if boost and boost allowed\r\n        if (_method == Method.Boost && !holder.boostEnabled) return (false, 0);\r\n\r\n        uint currRatio = getRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.minRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.maxRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @dev After the Boost/Repay check if the ratio doesn't trigger another call\r\n    function ratioGoodAfter(Method _method, address _user) public view returns(bool, uint) {\r\n        CompoundSubscriptions.CompoundHolder memory holder;\r\n\r\n        holder= subscriptionsContract.getHolder(_user);\r\n\r\n        uint currRatio = getRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.maxRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.minRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates gas cost (in Eth) of tx\r\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\r\n    /// @param _gasAmount Amount of gas used for the tx\r\n    function calcGasCost(uint _gasAmount) public view returns (uint) {\r\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\r\n\r\n        return mul(gasPrice, _gasAmount);\r\n    }\r\n\r\n/******************* OWNER ONLY OPERATIONS ********************************/\r\n\r\n    /// @notice Allows owner to change gas cost for boost operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for boost method\r\n    function changeBoostGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        BOOST_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change gas cost for repay operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for repay method\r\n    function changeRepayGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        REPAY_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change the amount of gas token burned per function call\r\n    /// @param _gasAmount Amount of gas token\r\n    /// @param _isRepay Flag to know for which function we are setting the gas token amount\r\n    function changeGasTokenAmount(uint _gasAmount, bool _isRepay) public onlyOwner {\r\n        if (_isRepay) {\r\n            REPAY_GAS_TOKEN = _gasAmount;\r\n        } else {\r\n            BOOST_GAS_TOKEN = _gasAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice Adds a new bot address which will be able to call repay/boost\r\n    /// @param _caller Bot address\r\n    function addCaller(address _caller) public onlyOwner {\r\n        approvedCallers[_caller] = true;\r\n    }\r\n\r\n    /// @notice Removes a bot address so it can't call repay/boost\r\n    /// @param _caller Bot address\r\n    function removeCaller(address _caller) public onlyOwner {\r\n        approvedCallers[_caller] = false;\r\n    }\r\n\r\n    /// @notice If any tokens gets stuck in the contract owner can withdraw it\r\n    /// @param _tokenAddress Address of the ERC20 token\r\n    /// @param _to Address of the receiver\r\n    /// @param _amount The amount to be sent\r\n    function transferERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {\r\n        ERC20(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice If any Eth gets stuck in the contract owner can withdraw it\r\n    /// @param _to Address of the receiver\r\n    /// @param _amount The amount to be sent\r\n    function transferEth(address payable _to, uint _amount) public onlyOwner {\r\n        _to.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compoundMonitorProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compoundFlashLoanTaker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUTOMATIC_LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOST_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOST_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPAY_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPAY_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"boostFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum CompoundMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeBoostGasCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isRepay\",\"type\":\"bool\"}],\"name\":\"changeGasTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeRepayGasCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundFlashLoanTakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundMonitorProxy\",\"outputs\":[{\"internalType\":\"contract CompoundMonitorProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract AutomaticLogger\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract CompoundOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum CompoundMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ratioGoodAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"repayFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subscriptionsContract\",\"outputs\":[{\"internalType\":\"contract CompoundSubscriptions\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundMonitor","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003dfa84cf5856e01bc4e12355caf7a61738509f53000000000000000000000000ac1fd75fef38c854cf86611bc66e102981c264a10000000000000000000000004b922507b808d3895c2213a2b4c4720756b4d9e0","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://cd116b6563b905894d90953400cf7d9f477d39ca639780784e27c10a931a62ec"}]}