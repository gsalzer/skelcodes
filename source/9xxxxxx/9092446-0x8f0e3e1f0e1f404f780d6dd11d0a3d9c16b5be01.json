{"status":"1","message":"OK","result":[{"SourceCode":"/* ===============================================\r\n* Flattened with Solidifier by Coinage\r\n* \r\n* https://solidifier.coina.ge\r\n* ===============================================\r\n*/\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       SafeDecimalMath.sol\r\nversion:    2.0\r\nauthor:     Kevin Brown\r\n            Gavin Conway\r\ndate:       2018-10-18\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA library providing safe mathematical operations for division and\r\nmultiplication with the capability to round or truncate the results\r\nto the nearest increment. Operations can return a standard precision\r\nor high precision decimal. High precision decimals are useful for\r\nexample when attempting to calculate percentages or fractions\r\naccurately.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title Safely manipulate unsigned fixed-point decimals at a given precision level.\r\n * @dev Functions accepting uints in this contract and derived contracts\r\n * are taken to be such fixed point decimals of a specified precision (either standard\r\n * or high).\r\n */\r\nlibrary SafeDecimalMath {\r\n\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10 ** uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10 ** uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10 ** uint(highPrecisionDecimals - decimals);\r\n\r\n    /** \r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit()\r\n        external\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return UNIT;\r\n    }\r\n\r\n    /** \r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit()\r\n        external\r\n        pure \r\n        returns (uint)\r\n    {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     * \r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit)\r\n        private\r\n        pure\r\n        returns (uint)\r\n    {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     * \r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(uint x, uint y, uint precisionUnit)\r\n        private\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Owned.sol\r\nversion:    1.1\r\nauthor:     Anton Jurisevic\r\n            Dominic Romanowski\r\n\r\ndate:       2018-2-26\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nAn Owned contract, to be inherited by other contracts.\r\nRequires its owner to be explicitly set in the constructor.\r\nProvides an onlyOwner access modifier.\r\n\r\nTo change owner, the current owner must nominate the next owner,\r\nwho then has to accept the nomination. The nomination can be\r\ncancelled before it is accepted by the new owner by having the\r\nprevious owner change the nomination (setting it to 0).\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title A contract with an owner.\r\n * @notice Contract ownership can be transferred by first nominating the new owner,\r\n * who must then accept the ownership, which prevents accidental incorrect ownership transfers.\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    /**\r\n     * @dev Owned Constructor\r\n     */\r\n    constructor(address _owner)\r\n        public\r\n    {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Nominate a new owner of this contract.\r\n     * @dev Only the current owner may nominate a new owner.\r\n     */\r\n    function nominateNewOwner(address _owner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Accept the nomination to be owner.\r\n     */\r\n    function acceptOwnership()\r\n        external\r\n    {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       SelfDestructible.sol\r\nversion:    1.2\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-29\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nThis contract allows an inheriting contract to be destroyed after\r\nits owner indicates an intention and then waits for a period\r\nwithout changing their mind. All ether contained in the contract\r\nis forwarded to a nominated beneficiary upon destruction.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title A contract that can be destroyed by its owner after a delay elapses.\r\n */\r\ncontract SelfDestructible is Owned {\r\n    \r\n    uint public initiationTime;\r\n    bool public selfDestructInitiated;\r\n    address public selfDestructBeneficiary;\r\n    uint public constant SELFDESTRUCT_DELAY = 4 weeks;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _owner The account which controls this contract.\r\n     */\r\n    constructor(address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        require(_owner != address(0), \"Owner must not be zero\");\r\n        selfDestructBeneficiary = _owner;\r\n        emit SelfDestructBeneficiaryUpdated(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the beneficiary address of this contract.\r\n     * @dev Only the contract owner may call this. The provided beneficiary must be non-null.\r\n     * @param _beneficiary The address to pay any eth contained in this contract to upon self-destruction.\r\n     */\r\n    function setSelfDestructBeneficiary(address _beneficiary)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_beneficiary != address(0), \"Beneficiary must not be zero\");\r\n        selfDestructBeneficiary = _beneficiary;\r\n        emit SelfDestructBeneficiaryUpdated(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice Begin the self-destruction counter of this contract.\r\n     * Once the delay has elapsed, the contract may be self-destructed.\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function initiateSelfDestruct()\r\n        external\r\n        onlyOwner\r\n    {\r\n        initiationTime = now;\r\n        selfDestructInitiated = true;\r\n        emit SelfDestructInitiated(SELFDESTRUCT_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Terminate and reset the self-destruction timer.\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function terminateSelfDestruct()\r\n        external\r\n        onlyOwner\r\n    {\r\n        initiationTime = 0;\r\n        selfDestructInitiated = false;\r\n        emit SelfDestructTerminated();\r\n    }\r\n\r\n    /**\r\n     * @notice If the self-destruction delay has elapsed, destroy this contract and\r\n     * remit any ether it owns to the beneficiary address.\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function selfDestruct()\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(selfDestructInitiated, \"Self Destruct not yet initiated\");\r\n        require(initiationTime + SELFDESTRUCT_DELAY < now, \"Self destruct delay not met\");\r\n        address beneficiary = selfDestructBeneficiary;\r\n        emit SelfDestructed(beneficiary);\r\n        selfdestruct(beneficiary);\r\n    }\r\n\r\n    event SelfDestructTerminated();\r\n    event SelfDestructed(address beneficiary);\r\n    event SelfDestructInitiated(uint selfDestructDelay);\r\n    event SelfDestructBeneficiaryUpdated(address newBeneficiary);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       State.sol\r\nversion:    1.1\r\nauthor:     Dominic Romanowski\r\n            Anton Jurisevic\r\n\r\ndate:       2018-05-15\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nThis contract is used side by side with external state token\r\ncontracts, such as Synthetix and Synth.\r\nIt provides an easy way to upgrade contract logic while\r\nmaintaining all user balances and allowances. This is designed\r\nto make the changeover as easy as possible, since mappings\r\nare not so cheap or straightforward to migrate.\r\n\r\nThe first deployed contract would create this state contract,\r\nusing it as its store of balances.\r\nWhen a new contract is deployed, it links to the existing\r\nstate contract, whose owner would then change its associated\r\ncontract to the new one.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\ncontract State is Owned {\r\n    // the address of the contract that can modify variables\r\n    // this can only be changed by the owner of this contract\r\n    address public associatedContract;\r\n\r\n\r\n    constructor(address _owner, address _associatedContract)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        associatedContract = _associatedContract;\r\n        emit AssociatedContractUpdated(_associatedContract);\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    // Change the associated contract to a new address\r\n    function setAssociatedContract(address _associatedContract)\r\n        external\r\n        onlyOwner\r\n    {\r\n        associatedContract = _associatedContract;\r\n        emit AssociatedContractUpdated(_associatedContract);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAssociatedContract\r\n    {\r\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AssociatedContractUpdated(address associatedContract);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       TokenState.sol\r\nversion:    1.1\r\nauthor:     Dominic Romanowski\r\n            Anton Jurisevic\r\n\r\ndate:       2018-05-15\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA contract that holds the state of an ERC20 compliant token.\r\n\r\nThis contract is used side by side with external state token\r\ncontracts, such as Synthetix and Synth.\r\nIt provides an easy way to upgrade contract logic while\r\nmaintaining all user balances and allowances. This is designed\r\nto make the changeover as easy as possible, since mappings\r\nare not so cheap or straightforward to migrate.\r\n\r\nThe first deployed contract would create this state contract,\r\nusing it as its store of balances.\r\nWhen a new contract is deployed, it links to the existing\r\nstate contract, whose owner would then change its associated\r\ncontract to the new one.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title ERC20 Token State\r\n * @notice Stores balance information of an ERC20 token contract.\r\n */\r\ncontract TokenState is State {\r\n\r\n    /* ERC20 fields. */\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _owner The address which controls this contract.\r\n     * @param _associatedContract The ERC20 contract whose state this composes.\r\n     */\r\n    constructor(address _owner, address _associatedContract)\r\n        State(_owner, _associatedContract)\r\n        public\r\n    {}\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice Set ERC20 allowance.\r\n     * @dev Only the associated contract may call this.\r\n     * @param tokenOwner The authorising party.\r\n     * @param spender The authorised party.\r\n     * @param value The total value the authorised party may spend on the\r\n     * authorising party's behalf.\r\n     */\r\n    function setAllowance(address tokenOwner, address spender, uint value)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        allowance[tokenOwner][spender] = value;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the balance in a given account\r\n     * @dev Only the associated contract may call this.\r\n     * @param account The account whose value to set.\r\n     * @param value The new balance of the given account.\r\n     */\r\n    function setBalanceOf(address account, uint value)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        balanceOf[account] = value;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Proxy.sol\r\nversion:    1.3\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-29\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA proxy contract that, if it does not recognise the function\r\nbeing called on it, passes all value and call data to an\r\nunderlying target contract.\r\n\r\nThis proxy has the capacity to toggle between DELEGATECALL\r\nand CALL style proxy functionality.\r\n\r\nThe former executes in the proxy's context, and so will preserve \r\nmsg.sender and store data at the proxy address. The latter will not.\r\nTherefore, any contract the proxy wraps in the CALL style must\r\nimplement the Proxyable interface, in order that it can pass msg.sender\r\ninto the underlying contract as the state parameter, messageSender.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\ncontract Proxy is Owned {\r\n\r\n    Proxyable public target;\r\n    bool public useDELEGATECALL;\r\n\r\n    constructor(address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {}\r\n\r\n    function setTarget(Proxyable _target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        target = _target;\r\n        emit TargetUpdated(_target);\r\n    }\r\n\r\n    function setUseDELEGATECALL(bool value) \r\n        external\r\n        onlyOwner\r\n    {\r\n        useDELEGATECALL = value;\r\n    }\r\n\r\n    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)\r\n        external\r\n        onlyTarget\r\n    {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n\r\n        assembly {\r\n            /* The first 32 bytes of callData contain its length (as specified by the abi). \r\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\r\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\r\n             * This means moving call_data across 32 bytes guarantees we correctly access\r\n             * the data itself. */\r\n            switch numTopics\r\n            case 0 {\r\n                log0(add(_callData, 32), size)\r\n            } \r\n            case 1 {\r\n                log1(add(_callData, 32), size, topic1)\r\n            }\r\n            case 2 {\r\n                log2(add(_callData, 32), size, topic1, topic2)\r\n            }\r\n            case 3 {\r\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\r\n            }\r\n            case 4 {\r\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\r\n            }\r\n        }\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        if (useDELEGATECALL) {\r\n            assembly {\r\n                /* Copy call data into free memory region. */\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* Forward all gas and call data to the target contract. */\r\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                /* Revert if the call failed, otherwise return the result. */\r\n                if iszero(result) { revert(free_ptr, returndatasize) }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        } else {\r\n            /* Here we are as above, but must send the messageSender explicitly \r\n             * since we are using CALL rather than DELEGATECALL. */\r\n            target.setMessageSender(msg.sender);\r\n            assembly {\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* We must explicitly forward ether to the underlying contract as well. */\r\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                if iszero(result) { revert(free_ptr, returndatasize) }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyTarget {\r\n        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\r\n        _;\r\n    }\r\n\r\n    event TargetUpdated(Proxyable newTarget);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Proxyable.sol\r\nversion:    1.1\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-15\r\n\r\nchecked:    Mike Spain\r\napproved:   Samuel Brooks\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA proxyable contract that works hand in hand with the Proxy contract\r\nto allow for anyone to interact with the underlying contract both\r\ndirectly and through the proxy.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n// This contract should be treated like an abstract contract\r\ncontract Proxyable is Owned {\r\n    /* The proxy this contract exists behind. */\r\n    Proxy public proxy;\r\n    Proxy public integrationProxy;\r\n\r\n    /* The caller of the proxy, passed through to this contract.\r\n     * Note that every function using this member must apply the onlyProxy or\r\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\r\n    address public messageSender;\r\n\r\n    constructor(address _proxy, address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setProxy(address _proxy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setIntegrationProxy(address _integrationProxy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        integrationProxy = Proxy(_integrationProxy);\r\n    }\r\n\r\n    function setMessageSender(address sender)\r\n        external\r\n        onlyProxy\r\n    {\r\n        messageSender = sender;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, \"Only the proxy can call\");\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy\r\n    {\r\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy_onlyOwner\r\n    {\r\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        require(messageSender == owner, \"Owner only function\");\r\n        _;\r\n    }\r\n\r\n    event ProxyUpdated(address proxyAddress);\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       TokenFallback.sol\r\nversion:    1.0\r\nauthor:     Kevin Brown\r\ndate:       2018-08-10\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nThis contract provides the logic that's used to call ERC223\r\ntokenFallback() when SNX or Synth transfers happen.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\ncontract TokenFallbackCaller is ReentrancyGuard {\r\n    uint constant MAX_GAS_SUB_CALL = 100000;\r\n    function callTokenFallbackIfNeeded(address sender, address recipient, uint amount, bytes data)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        /*\r\n            If we're transferring to a contract and it implements the tokenFallback function, call it.\r\n            This isn't ERC223 compliant because we don't revert if the contract doesn't implement tokenFallback.\r\n            This is because many DEXes and other contracts that expect to work with the standard\r\n            approve / transferFrom workflow don't implement tokenFallback but can still process our tokens as\r\n            usual, so it feels very harsh and likely to cause trouble if we add this restriction after having\r\n            previously gone live with a vanilla ERC20.\r\n        */\r\n\r\n        // Is the to address a contract? We can check the code size on that address and know.\r\n        uint length;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            // Retrieve the size of the code on the recipient address\r\n            length := extcodesize(recipient)\r\n        }\r\n\r\n        // If there's code there, it's a contract\r\n        if (length > 0) {\r\n            // Limit contract sub call to 200000 gas\r\n            uint gasLimit = gasleft() < MAX_GAS_SUB_CALL ? gasleft() : MAX_GAS_SUB_CALL;\r\n            // Now we need to optionally call tokenFallback(address from, uint value).\r\n            // We can't call it the normal way because that reverts when the recipient doesn't implement the function.\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            recipient.call.gas(gasLimit)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", sender, amount, data));\r\n\r\n            // And yes, we specifically don't care if this call fails, so we're not checking the return value.\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       ExternStateToken.sol\r\nversion:    1.3\r\nauthor:     Anton Jurisevic\r\n            Dominic Romanowski\r\n            Kevin Brown\r\n\r\ndate:       2018-05-29\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA partial ERC20 token contract, designed to operate with a proxy.\r\nTo produce a complete ERC20 token, transfer and transferFrom\r\ntokens must be implemented, using the provided _byProxy internal\r\nfunctions.\r\nThis contract utilises an external state for upgradeability.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title ERC20 Token contract, with detached state and designed to operate behind a proxy.\r\n */\r\ncontract ExternStateToken is SelfDestructible, Proxyable, TokenFallbackCaller {\r\n\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    /* Stores balances and allowances. */\r\n    TokenState public tokenState;\r\n\r\n    /* Other ERC20 fields. */\r\n    string public name;\r\n    string public symbol;\r\n    uint public totalSupply;\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _proxy The proxy associated with this contract.\r\n     * @param _name Token's ERC20 name.\r\n     * @param _symbol Token's ERC20 symbol.\r\n     * @param _totalSupply The total supply of the token.\r\n     * @param _tokenState The TokenState contract address.\r\n     * @param _owner The owner of this contract.\r\n     */\r\n    constructor(address _proxy, TokenState _tokenState,\r\n                string _name, string _symbol, uint _totalSupply,\r\n                uint8 _decimals, address _owner)\r\n        SelfDestructible(_owner)\r\n        Proxyable(_proxy, _owner)\r\n        public\r\n    {\r\n        tokenState = _tokenState;\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _totalSupply;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * @notice Returns the ERC20 allowance of one party to spend on behalf of another.\r\n     * @param owner The party authorising spending of their funds.\r\n     * @param spender The party spending tokenOwner's funds.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return tokenState.allowance(owner, spender);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the ERC20 token balance of a given account.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return tokenState.balanceOf(account);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice Set the address of the TokenState contract.\r\n     * @dev This can be used to \"pause\" transfer functionality, by pointing the tokenState at 0x000..\r\n     * as balances would be unreachable.\r\n     */\r\n    function setTokenState(TokenState _tokenState)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        tokenState = _tokenState;\r\n        emitTokenStateUpdated(_tokenState);\r\n    }\r\n\r\n    function _internalTransfer(address from, address to, uint value, bytes data)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        /* Disallow transfers to irretrievable-addresses. */\r\n        require(to != address(0), \"Cannot transfer to the 0 address\");\r\n        require(to != address(this), \"Cannot transfer to the contract\");\r\n        require(to != address(proxy), \"Cannot transfer to the proxy\");\r\n\r\n        // Insufficient balance will be handled by the safe subtraction.\r\n        tokenState.setBalanceOf(from, tokenState.balanceOf(from).sub(value));\r\n        tokenState.setBalanceOf(to, tokenState.balanceOf(to).add(value));\r\n\r\n        // Emit a standard ERC20 transfer event\r\n        emitTransfer(from, to, value);\r\n\r\n        // If the recipient is a contract, we need to call tokenFallback on it so they can do ERC223\r\n        // actions when receiving our tokens. Unlike the standard, however, we don't revert if the\r\n        // recipient contract doesn't implement tokenFallback.\r\n        callTokenFallbackIfNeeded(from, to, value, data);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform an ERC20 token transfer. Designed to be called by transfer functions possessing\r\n     * the onlyProxy or optionalProxy modifiers.\r\n     */\r\n    function _transfer_byProxy(address from, address to, uint value, bytes data)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _internalTransfer(from, to, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform an ERC20 token transferFrom. Designed to be called by transferFrom functions\r\n     * possessing the optionalProxy or optionalProxy modifiers.\r\n     */\r\n    function _transferFrom_byProxy(address sender, address from, address to, uint value, bytes data)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        /* Insufficient allowance will be handled by the safe subtraction. */\r\n        tokenState.setAllowance(from, sender, tokenState.allowance(from, sender).sub(value));\r\n        return _internalTransfer(from, to, value, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Approves spender to transfer on the message sender's behalf.\r\n     */\r\n    function approve(address spender, uint value)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        address sender = messageSender;\r\n\r\n        tokenState.setAllowance(sender, spender, value);\r\n        emitApproval(sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    bytes32 constant TRANSFER_SIG = keccak256(\"Transfer(address,address,uint256)\");\r\n    function emitTransfer(address from, address to, uint value) internal {\r\n        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, bytes32(from), bytes32(to), 0);\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    bytes32 constant APPROVAL_SIG = keccak256(\"Approval(address,address,uint256)\");\r\n    function emitApproval(address owner, address spender, uint value) internal {\r\n        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, bytes32(owner), bytes32(spender), 0);\r\n    }\r\n\r\n    event TokenStateUpdated(address newTokenState);\r\n    bytes32 constant TOKENSTATEUPDATED_SIG = keccak256(\"TokenStateUpdated(address)\");\r\n    function emitTokenStateUpdated(address newTokenState) internal {\r\n        proxy._emit(abi.encode(newTokenState), 1, TOKENSTATEUPDATED_SIG, 0, 0, 0);\r\n    }\r\n}\r\n\r\n\r\nlibrary Math {\r\n\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    /**\r\n    * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\r\n    * vs 0(N) for naive repeated multiplication. \r\n    * Calculates x^n with x as fixed-point and n as regular unsigned int.\r\n    * Calculates to 18 digits of precision with SafeDecimalMath.unit()\r\n    */\r\n    function powDecimal(uint x, uint n)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\r\n\r\n        uint result = SafeDecimalMath.unit();\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = result.multiplyDecimal(x);\r\n            }\r\n            x = x.multiplyDecimal(x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n    \r\n\r\n/**\r\n * @title SynthetixState interface contract\r\n * @notice Abstract contract to hold public getters\r\n */\r\ncontract ISynthetixState {\r\n    // A struct for handing values associated with an individual user's debt position\r\n    struct IssuanceData {\r\n        // Percentage of the total debt owned at the time\r\n        // of issuance. This number is modified by the global debt\r\n        // delta array. You can figure out a user's exit price and\r\n        // collateralisation ratio using a combination of their initial\r\n        // debt and the slice of global debt delta which applies to them.\r\n        uint initialDebtOwnership;\r\n        // This lets us know when (in relative terms) the user entered\r\n        // the debt pool so we can calculate their exit price and\r\n        // collateralistion ratio\r\n        uint debtEntryIndex;\r\n    }\r\n\r\n    uint[] public debtLedger;\r\n    uint public issuanceRatio;\r\n    mapping(address => IssuanceData) public issuanceData;\r\n\r\n    function debtLedgerLength() external view returns (uint);\r\n    function hasIssued(address account) external view returns (bool);\r\n    function incrementTotalIssuerCount() external;\r\n    function decrementTotalIssuerCount() external;\r\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\r\n    function lastDebtLedgerEntry() external view returns (uint);\r\n    function appendDebtLedgerValue(uint value) external;\r\n    function clearIssuanceData(address account) external;\r\n}\r\n\r\n\r\ninterface ISynth {\r\n    function burn(address account, uint amount) external;\r\n    function issue(address account, uint amount) external;\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function triggerTokenFallbackIfNeeded(address sender, address recipient, uint amount) external;\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title SynthetixEscrow interface\r\n */\r\ninterface ISynthetixEscrow {\r\n    function balanceOf(address account) public view returns (uint);\r\n    function appendVestingEntry(address account, uint quantity) public;\r\n}\r\n\r\n\r\n/**\r\n * @title FeePool Interface\r\n * @notice Abstract contract to hold public getters\r\n */\r\ncontract IFeePool {\r\n    address public FEE_ADDRESS;\r\n    uint public exchangeFeeRate;\r\n    function amountReceivedFromExchange(uint value) external view returns (uint);\r\n    function amountReceivedFromTransfer(uint value) external view returns (uint);\r\n    function recordFeePaid(uint xdrAmount) external;\r\n    function appendAccountIssuanceRecord(address account, uint lockedAmount, uint debtEntryIndex) external;\r\n    function setRewardsToDistribute(uint amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ExchangeRates interface\r\n */\r\ninterface IExchangeRates {\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey) external view returns (uint);\r\n\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\r\n    function ratesForCurrencies(bytes32[] currencyKeys) external view returns (uint[] memory);\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\r\n    function anyRateIsStale(bytes32[] currencyKeys) external view returns (bool);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Synth.sol\r\nversion:    2.0\r\nauthor:     Kevin Brown\r\ndate:       2018-09-13\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nSynthetix-backed stablecoin contract.\r\n\r\nThis contract issues synths, which are tokens that mirror various\r\nflavours of fiat currency.\r\n\r\nSynths are issuable by Synthetix Network Token (SNX) holders who\r\nhave to lock up some value of their SNX to issue S * Cmax synths.\r\nWhere Cmax issome value less than 1.\r\n\r\nA configurable fee is charged on synth transfers and deposited\r\ninto a common pot, which Synthetix holders may withdraw from once\r\nper fee period.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\ncontract Synth is ExternStateToken {\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Address of the FeePoolProxy\r\n    address public feePoolProxy;\r\n    // Address of the SynthetixProxy\r\n    address public synthetixProxy;\r\n\r\n    // Currency key which identifies this Synth to the Synthetix system\r\n    bytes32 public currencyKey;\r\n\r\n    uint8 constant DECIMALS = 18;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address _proxy, TokenState _tokenState, address _synthetixProxy, address _feePoolProxy,\r\n        string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint _totalSupply\r\n    )\r\n        ExternStateToken(_proxy, _tokenState, _tokenName, _tokenSymbol, _totalSupply, DECIMALS, _owner)\r\n        public\r\n    {\r\n        require(_proxy != address(0), \"_proxy cannot be 0\");\r\n        require(_synthetixProxy != address(0), \"_synthetixProxy cannot be 0\");\r\n        require(_feePoolProxy != address(0), \"_feePoolProxy cannot be 0\");\r\n        require(_owner != 0, \"_owner cannot be 0\");\r\n        require(ISynthetix(_synthetixProxy).synths(_currencyKey) == Synth(0), \"Currency key is already in use\");\r\n\r\n        feePoolProxy = _feePoolProxy;\r\n        synthetixProxy = _synthetixProxy;\r\n        currencyKey = _currencyKey;\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice Set the SynthetixProxy should it ever change.\r\n     * The Synth requires Synthetix address as it has the authority\r\n     * to mint and burn synths\r\n     * */\r\n    function setSynthetixProxy(ISynthetix _synthetixProxy)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        synthetixProxy = _synthetixProxy;\r\n        emitSynthetixUpdated(_synthetixProxy);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the FeePoolProxy should it ever change.\r\n     * The Synth requires FeePool address as it has the authority\r\n     * to mint and burn for FeePool.claimFees()\r\n     * */\r\n    function setFeePoolProxy(address _feePoolProxy)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        feePoolProxy = _feePoolProxy;\r\n        emitFeePoolUpdated(_feePoolProxy);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice ERC20 transfer function\r\n     * forward call on to _internalTransfer */\r\n    function transfer(address to, uint value)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        bytes memory empty;\r\n        return super._internalTransfer(messageSender, to, value, empty);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC223 transfer function\r\n     */\r\n    function transfer(address to, uint value, bytes data)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        // And send their result off to the destination address\r\n        return super._internalTransfer(messageSender, to, value, data);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 transferFrom function\r\n     */\r\n    function transferFrom(address from, address to, uint value)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        require(from != 0xfeefeefeefeefeefeefeefeefeefeefeefeefeef, \"The fee address is not allowed\");\r\n        // Skip allowance update in case of infinite allowance\r\n        if (tokenState.allowance(from, messageSender) != uint(-1)) {\r\n            // Reduce the allowance by the amount we're transferring.\r\n            // The safeSub call will handle an insufficient allowance.\r\n            tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value));\r\n        }\r\n\r\n        bytes memory empty;\r\n        return super._internalTransfer(from, to, value, empty);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC223 transferFrom function\r\n     */\r\n    function transferFrom(address from, address to, uint value, bytes data)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        require(from != 0xfeefeefeefeefeefeefeefeefeefeefeefeefeef, \"The fee address is not allowed\");\r\n\r\n        // Skip allowance update in case of infinite allowance\r\n        if (tokenState.allowance(from, messageSender) != uint(-1)) {\r\n            // Reduce the allowance by the amount we're transferring.\r\n            // The safeSub call will handle an insufficient allowance.\r\n            tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value));\r\n        }\r\n\r\n        return super._internalTransfer(from, to, value, data);\r\n    }\r\n\r\n    // Allow synthetix to issue a certain number of synths from an account.\r\n    function issue(address account, uint amount)\r\n        external\r\n        onlySynthetixOrFeePool\r\n    {\r\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).add(amount));\r\n        totalSupply = totalSupply.add(amount);\r\n        emitTransfer(address(0), account, amount);\r\n        emitIssued(account, amount);\r\n    }\r\n\r\n    // Allow synthetix or another synth contract to burn a certain number of synths from an account.\r\n    function burn(address account, uint amount)\r\n        external\r\n        onlySynthetixOrFeePool\r\n    {\r\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).sub(amount));\r\n        totalSupply = totalSupply.sub(amount);\r\n        emitTransfer(account, address(0), amount);\r\n        emitBurned(account, amount);\r\n    }\r\n\r\n    // Allow owner to set the total supply on import.\r\n    function setTotalSupply(uint amount)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        totalSupply = amount;\r\n    }\r\n\r\n    // Allow synthetix to trigger a token fallback call from our synths so users get notified on\r\n    // exchange as well as transfer\r\n    function triggerTokenFallbackIfNeeded(address sender, address recipient, uint amount)\r\n        external\r\n        onlySynthetixOrFeePool\r\n    {\r\n        bytes memory empty;\r\n        callTokenFallbackIfNeeded(sender, recipient, amount, empty);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlySynthetixOrFeePool() {\r\n        bool isSynthetix = msg.sender == address(Proxy(synthetixProxy).target());\r\n        bool isFeePool = msg.sender == address(Proxy(feePoolProxy).target());\r\n\r\n        require(isSynthetix || isFeePool, \"Only Synthetix, FeePool allowed\");\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event SynthetixUpdated(address newSynthetix);\r\n    bytes32 constant SYNTHETIXUPDATED_SIG = keccak256(\"SynthetixUpdated(address)\");\r\n    function emitSynthetixUpdated(address newSynthetix) internal {\r\n        proxy._emit(abi.encode(newSynthetix), 1, SYNTHETIXUPDATED_SIG, 0, 0, 0);\r\n    }\r\n\r\n    event FeePoolUpdated(address newFeePool);\r\n    bytes32 constant FEEPOOLUPDATED_SIG = keccak256(\"FeePoolUpdated(address)\");\r\n    function emitFeePoolUpdated(address newFeePool) internal {\r\n        proxy._emit(abi.encode(newFeePool), 1, FEEPOOLUPDATED_SIG, 0, 0, 0);\r\n    }\r\n\r\n    event Issued(address indexed account, uint value);\r\n    bytes32 constant ISSUED_SIG = keccak256(\"Issued(address,uint256)\");\r\n    function emitIssued(address account, uint value) internal {\r\n        proxy._emit(abi.encode(value), 2, ISSUED_SIG, bytes32(account), 0, 0);\r\n    }\r\n\r\n    event Burned(address indexed account, uint value);\r\n    bytes32 constant BURNED_SIG = keccak256(\"Burned(address,uint256)\");\r\n    function emitBurned(address account, uint value) internal {\r\n        proxy._emit(abi.encode(value), 2, BURNED_SIG, bytes32(account), 0, 0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Synthetix interface contract\r\n * @notice Abstract contract to hold public getters\r\n * @dev pseudo interface, actually declared as contract to hold the public getters \r\n */\r\n\r\n\r\ncontract ISynthetix {\r\n\r\n    // ========== PUBLIC STATE VARIABLES ==========\r\n\r\n    IFeePool public feePool;\r\n    ISynthetixEscrow public escrow;\r\n    ISynthetixEscrow public rewardEscrow;\r\n    ISynthetixState public synthetixState;\r\n    IExchangeRates public exchangeRates;\r\n\r\n    uint public totalSupply;\r\n        \r\n    mapping(bytes32 => Synth) public synths;\r\n\r\n    // ========== PUBLIC FUNCTIONS ==========\r\n\r\n    function balanceOf(address account) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey) public view returns (uint);\r\n\r\n    function synthInitiatedExchange(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress) external returns (bool);\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey) external returns (bool);\r\n    function collateralisationRatio(address issuer) public view returns (uint);\r\n    function totalIssuedSynths(bytes32 currencyKey)\r\n        public\r\n        view\r\n        returns (uint);\r\n    function getSynth(bytes32 currencyKey) public view returns (ISynth);\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) public view returns (uint);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nThe SNX supply schedule contract determines the amount of SNX tokens\r\nmintable over the course of 195 weeks.\r\n\r\nExponential Decay Inflation Schedule\r\n\r\nSynthetix.mint() function is used to mint the inflationary supply.\r\n\r\nThe mechanics for Inflation Smoothing and Terminal Inflation \r\nhave been defined in these sips\r\nhttps://sips.synthetix.io/sips/sip-23\r\nhttps://sips.synthetix.io/sips/sip-24\r\n\r\nThe previous SNX Inflation Supply Schedule is at \r\nhttps://etherscan.io/address/0xA3de830b5208851539De8e4FF158D635E8f36FCb#code\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title SupplySchedule contract\r\n */\r\ncontract SupplySchedule is Owned {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n    using Math for uint;\r\n\r\n    // Time of the last inflation supply mint event\r\n    uint public lastMintEvent;\r\n\r\n    // Counter for number of weeks since the start of supply inflation\r\n    uint public weekCounter;\r\n\r\n    // The number of SNX rewarded to the caller of Synthetix.mint()\r\n    uint public minterReward = 200 * SafeDecimalMath.unit();\r\n\r\n    // The initial weekly inflationary supply is 75m / 52 until the start of the decay rate. \r\n    // 75e6 * SafeDecimalMath.unit() / 52\r\n    uint public constant INITIAL_WEEKLY_SUPPLY = 1442307692307692307692307;    \r\n\r\n    // Address of the SynthetixProxy for the onlySynthetix modifier\r\n    address public synthetixProxy;\r\n\r\n    // Max SNX rewards for minter\r\n    uint public constant MAX_MINTER_REWARD = 200 * SafeDecimalMath.unit();\r\n\r\n    // How long each inflation period is before mint can be called\r\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\r\n\r\n    uint public constant INFLATION_START_DATE = 1551830400; // 2019-03-06T00:00:00+00:00\r\n    uint public constant MINT_BUFFER = 1 days;\r\n    uint8 public constant SUPPLY_DECAY_START = 40; // Week 40\r\n    uint8 public constant SUPPLY_DECAY_END = 234; //  Supply Decay ends on Week 234 (inclusive of Week 234 for a total of 195 weeks of inflation decay)\r\n    \r\n    // Weekly percentage decay of inflationary supply from the first 40 weeks of the 75% inflation rate\r\n    uint public constant DECAY_RATE = 12500000000000000; // 1.25% weekly\r\n\r\n    // Percentage growth of terminal supply per annum\r\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 25000000000000000; // 2.5% pa\r\n    \r\n    constructor(\r\n        address _owner,\r\n        uint _lastMintEvent,\r\n        uint _currentWeek)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        lastMintEvent = _lastMintEvent;\r\n        weekCounter = _currentWeek;\r\n    }\r\n\r\n    // ========== VIEWS ==========     \r\n    \r\n    /**    \r\n    * @return The amount of SNX mintable for the inflationary supply\r\n    */\r\n    function mintableSupply()\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint totalAmount;\r\n\r\n        if (!isMintable()) {\r\n            return totalAmount;\r\n        }\r\n        \r\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\r\n          \r\n        uint currentWeek = weekCounter;\r\n        \r\n        // Calculate total mintable supply from exponential decay function\r\n        // The decay function stops after week 234\r\n        while (remainingWeeksToMint > 0) {\r\n            currentWeek++;            \r\n            \r\n            // If current week is before supply decay we add initial supply to mintableSupply\r\n            if (currentWeek < SUPPLY_DECAY_START) {\r\n                totalAmount = totalAmount.add(INITIAL_WEEKLY_SUPPLY);\r\n                remainingWeeksToMint--;\r\n            }\r\n            // if current week before supply decay ends we add the new supply for the week \r\n            else if (currentWeek <= SUPPLY_DECAY_END) {\r\n                \r\n                // diff between current week and (supply decay start week - 1)  \r\n                uint decayCount = currentWeek.sub(SUPPLY_DECAY_START -1);\r\n                \r\n                totalAmount = totalAmount.add(tokenDecaySupplyForWeek(decayCount));\r\n                remainingWeeksToMint--;\r\n            } \r\n            // Terminal supply is calculated on the total supply of Synthetix including any new supply\r\n            // We can compound the remaining week's supply at the fixed terminal rate  \r\n            else {\r\n                uint totalSupply = ISynthetix(synthetixProxy).totalSupply();\r\n                uint currentTotalSupply = totalSupply.add(totalAmount);\r\n\r\n                totalAmount = totalAmount.add(terminalInflationSupply(currentTotalSupply, remainingWeeksToMint));\r\n                remainingWeeksToMint = 0;\r\n            }\r\n        }\r\n        \r\n        return totalAmount;\r\n    }\r\n\r\n    /**\r\n    * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\r\n    * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * () \r\n    */\r\n    function tokenDecaySupplyForWeek(uint counter)\r\n        public \r\n        pure\r\n        returns (uint)\r\n    {   \r\n        // Apply exponential decay function to number of weeks since\r\n        // start of inflation smoothing to calculate diminishing supply for the week.\r\n        uint effectiveDecay = (SafeDecimalMath.unit().sub(DECAY_RATE)).powDecimal(counter);\r\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\r\n\r\n        return supplyForWeek;\r\n    }    \r\n    \r\n    /**\r\n    * @return A unit amount of terminal inflation supply\r\n    * @dev Weekly compound rate based on number of weeks     \r\n    */\r\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {   \r\n        // rate = (1 + weekly rate) ^ num of weeks\r\n        uint effectiveCompoundRate = SafeDecimalMath.unit().add(TERMINAL_SUPPLY_RATE_ANNUAL.div(52)).powDecimal(numOfWeeks);\r\n\r\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\r\n        return totalSupply.multiplyDecimal(effectiveCompoundRate.sub(SafeDecimalMath.unit()));\r\n    }\r\n\r\n    /**    \r\n    * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\r\n    * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\r\n    */\r\n    function weeksSinceLastIssuance()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        // Get weeks since lastMintEvent\r\n        // If lastMintEvent not set or 0, then start from inflation start date.\r\n        uint timeDiff = lastMintEvent > 0 ? now.sub(lastMintEvent) : now.sub(INFLATION_START_DATE);\r\n        return timeDiff.div(MINT_PERIOD_DURATION);\r\n    }\r\n\r\n    /**\r\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\r\n     * has passed since the lastMintEvent.\r\n     * */\r\n    function isMintable()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (now - lastMintEvent > MINT_PERIOD_DURATION)\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ========== MUTATIVE FUNCTIONS ==========\r\n\r\n    /**\r\n     * @notice Record the mint event from Synthetix by incrementing the inflation \r\n     * week counter for the number of weeks minted (probabaly always 1)\r\n     * and store the time of the event.\r\n     * @param supplyMinted the amount of SNX the total supply was inflated by.\r\n     * */\r\n    function recordMintEvent(uint supplyMinted)\r\n        external\r\n        onlySynthetix\r\n        returns (bool)\r\n    {\r\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\r\n\r\n        // add number of weeks minted to weekCounter\r\n        weekCounter = weekCounter.add(numberOfWeeksIssued);\r\n\r\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\r\n        // 1 day time buffer is added so inflation is minted after feePeriod closes \r\n        lastMintEvent = INFLATION_START_DATE.add(weekCounter.mul(MINT_PERIOD_DURATION)).add(MINT_BUFFER);\r\n\r\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent, now);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the reward amount of SNX for the caller of the public \r\n     * function Synthetix.mint(). \r\n     * This incentivises anyone to mint the inflationary supply and the mintr \r\n     * Reward will be deducted from the inflationary supply and sent to the caller.\r\n     * @param amount the amount of SNX to reward the minter.\r\n     * */\r\n    function setMinterReward(uint amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(amount <= MAX_MINTER_REWARD, \"Reward cannot exceed max minter reward\");\r\n        minterReward = amount;\r\n        emit MinterRewardUpdated(minterReward);\r\n    }\r\n\r\n    // ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice Set the SynthetixProxy should it ever change.\r\n     * SupplySchedule requires Synthetix address as it has the authority\r\n     * to record mint event.\r\n     * */\r\n    function setSynthetixProxy(ISynthetix _synthetixProxy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_synthetixProxy != address(0), \"Address cannot be 0\");\r\n        synthetixProxy = _synthetixProxy;\r\n        emit SynthetixProxyUpdated(synthetixProxy);\r\n    }\r\n\r\n    // ========== MODIFIERS ==========\r\n\r\n    /**\r\n     * @notice Only the Synthetix contract is authorised to call this function\r\n     * */\r\n    modifier onlySynthetix() {\r\n        require(msg.sender == address(Proxy(synthetixProxy).target()), \"Only the synthetix contract can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    /**\r\n     * @notice Emitted when the inflationary supply is minted\r\n     * */\r\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent, uint timestamp);\r\n\r\n    /**\r\n     * @notice Emitted when the SNX minter reward amount is updated\r\n     * */\r\n    event MinterRewardUpdated(uint newRewardAmount);\r\n\r\n    /**\r\n     * @notice Emitted when setSynthetixProxy is called changing the Synthetix Proxy address\r\n     * */\r\n    event SynthetixProxyUpdated(address newAddress);\r\n}\r\n\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n\r\n// AggregatorInterface from Chainlink represents a decentralized pricing network for a single currency keys\r\n\r\n\r\n/**\r\n * @title The repository for exchange rates\r\n */\r\n\r\ncontract ExchangeRates is SelfDestructible {\r\n\r\n\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    struct RateAndUpdatedTime {\r\n        uint216 rate;\r\n        uint40 time;\r\n    }\r\n\r\n    // Exchange rates and update times stored by currency code, e.g. 'SNX', or 'sUSD'\r\n    mapping(bytes32 => RateAndUpdatedTime) private _rates;\r\n\r\n    // The address of the oracle which pushes rate updates to this contract\r\n    address public oracle;\r\n\r\n    // Decentralized oracle networks that feed into pricing aggregators\r\n    mapping(bytes32 => AggregatorInterface) public aggregators;\r\n\r\n    // List of configure aggregator keys for convenient iteration\r\n    bytes32[] public aggregatorKeys;\r\n\r\n    // Do not allow the oracle to submit times any further forward into the future than this constant.\r\n    uint constant ORACLE_FUTURE_LIMIT = 10 minutes;\r\n\r\n    // How long will the contract assume the rate of any asset is correct\r\n    uint public rateStalePeriod = 3 hours;\r\n\r\n\r\n    // Each participating currency in the XDR basket is represented as a currency key with\r\n    // equal weighting.\r\n    // There are 5 participating currencies, so we'll declare that clearly.\r\n    bytes32[5] public xdrParticipants;\r\n\r\n    // A conveience mapping for checking if a rate is a XDR participant\r\n    mapping(bytes32 => bool) public isXDRParticipant;\r\n\r\n    // For inverted prices, keep a mapping of their entry, limits and frozen status\r\n    struct InversePricing {\r\n        uint entryPoint;\r\n        uint upperLimit;\r\n        uint lowerLimit;\r\n        bool frozen;\r\n    }\r\n    mapping(bytes32 => InversePricing) public inversePricing;\r\n    bytes32[] public invertedKeys;\r\n\r\n    //\r\n    // ========== CONSTRUCTOR ==========\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _owner The owner of this contract.\r\n     * @param _oracle The address which is able to update rate information.\r\n     * @param _currencyKeys The initial currency keys to store (in order).\r\n     * @param _newRates The initial currency amounts for each currency (in order).\r\n     */\r\n    constructor(\r\n        // SelfDestructible (Ownable)\r\n        address _owner,\r\n\r\n        // Oracle values - Allows for rate updates\r\n        address _oracle,\r\n        bytes32[] _currencyKeys,\r\n        uint[] _newRates\r\n    )\r\n        /* Owned is initialised in SelfDestructible */\r\n        SelfDestructible(_owner)\r\n        public\r\n    {\r\n        require(_currencyKeys.length == _newRates.length, \"Currency key length and rate length must match.\");\r\n\r\n        oracle = _oracle;\r\n\r\n        // The sUSD rate is always 1 and is never stale.\r\n        _setRate(\"sUSD\", SafeDecimalMath.unit(), now);\r\n\r\n        // These are the currencies that make up the XDR basket.\r\n        // These are hard coded because:\r\n        //  - This way users can depend on the calculation and know it won't change for this deployment of the contract.\r\n        //  - Adding new currencies would likely introduce some kind of weighting factor, which\r\n        //    isn't worth preemptively adding when all of the currencies in the current basket are weighted at 1.\r\n        //  - The expectation is if this logic needs to be updated, we'll simply deploy a new version of this contract\r\n        //    then point the system at the new version.\r\n        xdrParticipants = [\r\n            bytes32(\"sUSD\"),\r\n            bytes32(\"sAUD\"),\r\n            bytes32(\"sCHF\"),\r\n            bytes32(\"sEUR\"),\r\n            bytes32(\"sGBP\")\r\n        ];\r\n\r\n        // Mapping the XDR participants is cheaper than looping the xdrParticipants array to check if they exist\r\n        isXDRParticipant[bytes32(\"sUSD\")] = true;\r\n        isXDRParticipant[bytes32(\"sAUD\")] = true;\r\n        isXDRParticipant[bytes32(\"sCHF\")] = true;\r\n        isXDRParticipant[bytes32(\"sEUR\")] = true;\r\n        isXDRParticipant[bytes32(\"sGBP\")] = true;\r\n\r\n        internalUpdateRates(_currencyKeys, _newRates, now);\r\n    }\r\n\r\n    function getRateAndUpdatedTime(bytes32 code) internal view returns (RateAndUpdatedTime) {\r\n        if (aggregators[code] != address(0)) {\r\n            return RateAndUpdatedTime({\r\n                rate: uint216(aggregators[code].latestAnswer() * 1e10),\r\n                time: uint40(aggregators[code].latestTimestamp())\r\n            });\r\n        } else {\r\n            return _rates[code];\r\n        }\r\n    }\r\n    /**\r\n     * @notice Retrieves the exchange rate (sUSD per unit) for a given currency key\r\n     */\r\n    function rates(bytes32 code) public view returns(uint256) {\r\n        return getRateAndUpdatedTime(code).rate;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the timestamp the given rate was last updated.\r\n     */\r\n    function lastRateUpdateTimes(bytes32 code) public view returns(uint256) {\r\n        return getRateAndUpdatedTime(code).time;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the last update time for a list of currencies\r\n     */\r\n    function lastRateUpdateTimesForCurrencies(bytes32[] currencyKeys)\r\n        public\r\n        view\r\n        returns (uint[])\r\n    {\r\n        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            lastUpdateTimes[i] = lastRateUpdateTimes(currencyKeys[i]);\r\n        }\r\n\r\n        return lastUpdateTimes;\r\n    }\r\n\r\n    function _setRate(bytes32 code, uint256 rate, uint256 time) internal {\r\n        _rates[code] = RateAndUpdatedTime({\r\n            rate: uint216(rate),\r\n            time: uint40(time)\r\n        });\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice Set the rates stored in this contract\r\n     * @param currencyKeys The currency keys you wish to update the rates for (in order)\r\n     * @param newRates The rates for each currency (in order)\r\n     * @param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract\r\n     *                 This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\r\n     *                 if it takes a long time for the transaction to confirm.\r\n     */\r\n    function updateRates(bytes32[] currencyKeys, uint[] newRates, uint timeSent)\r\n        external\r\n        onlyOracle\r\n        returns(bool)\r\n    {\r\n        return internalUpdateRates(currencyKeys, newRates, timeSent);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function which sets the rates stored in this contract\r\n     * @param currencyKeys The currency keys you wish to update the rates for (in order)\r\n     * @param newRates The rates for each currency (in order)\r\n     * @param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract\r\n     *                 This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\r\n     *                 if it takes a long time for the transaction to confirm.\r\n     */\r\n    function internalUpdateRates(bytes32[] currencyKeys, uint[] newRates, uint timeSent)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        require(currencyKeys.length == newRates.length, \"Currency key array length must match rates array length.\");\r\n        require(timeSent < (now + ORACLE_FUTURE_LIMIT), \"Time is too far into the future\");\r\n\r\n        bool recomputeXDRRate = false;\r\n\r\n        // Loop through each key and perform update.\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            bytes32 currencyKey = currencyKeys[i];\r\n\r\n            // Should not set any rate to zero ever, as no asset will ever be\r\n            // truely worthless and still valid. In this scenario, we should\r\n            // delete the rate and remove it from the system.\r\n            require(newRates[i] != 0, \"Zero is not a valid rate, please call deleteRate instead.\");\r\n            require(currencyKey != \"sUSD\", \"Rate of sUSD cannot be updated, it's always UNIT.\");\r\n\r\n            // We should only update the rate if it's at least the same age as the last rate we've got.\r\n            if (timeSent < lastRateUpdateTimes(currencyKey)) {\r\n                continue;\r\n            }\r\n\r\n            newRates[i] = rateOrInverted(currencyKey, newRates[i]);\r\n\r\n            // Ok, go ahead with the update.\r\n            _setRate(currencyKey, newRates[i], timeSent);\r\n\r\n            // Flag if XDR needs to be recomputed. Note: sUSD is not sent and assumed $1\r\n            if (!recomputeXDRRate && isXDRParticipant[currencyKey]) {\r\n                recomputeXDRRate = true;\r\n            }\r\n        }\r\n\r\n        emit RatesUpdated(currencyKeys, newRates);\r\n\r\n        if (recomputeXDRRate) {\r\n            // Now update our XDR rate.\r\n            updateXDRRate(timeSent);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to get the inverted rate, if any, and mark an inverted\r\n     *  key as frozen if either limits are reached.\r\n     *\r\n     * Inverted rates are ones that take a regular rate, perform a simple calculation (double entryPrice and\r\n     * subtract the rate) on them and if the result of the calculation is over or under predefined limits, it freezes the\r\n     * rate at that limit, preventing any future rate updates.\r\n     *\r\n     * For example, if we have an inverted rate iBTC with the following parameters set:\r\n     * - entryPrice of 200\r\n     * - upperLimit of 300\r\n     * - lower of 100\r\n     *\r\n     * if this function is invoked with params iETH and 184 (or rather 184e18),\r\n     * then the rate would be: 200 * 2 - 184 = 216. 100 < 216 < 200, so the rate would be 216,\r\n     * and remain unfrozen.\r\n     *\r\n     * If this function is then invoked with params iETH and 301 (or rather 301e18),\r\n     * then the rate would be: 200 * 2 - 301 = 99. 99 < 100, so the rate would be 100 and the\r\n     * rate would become frozen, no longer accepting future price updates until the synth is unfrozen\r\n     * by the owner function: setInversePricing().\r\n     *\r\n     * @param currencyKey The price key to lookup\r\n     * @param rate The rate for the given price key\r\n     */\r\n    function rateOrInverted(bytes32 currencyKey, uint rate) internal returns (uint) {\r\n        // if an inverse mapping exists, adjust the price accordingly\r\n        InversePricing storage inverse = inversePricing[currencyKey];\r\n        if (inverse.entryPoint <= 0) {\r\n            return rate;\r\n        }\r\n\r\n        // set the rate to the current rate initially (if it's frozen, this is what will be returned)\r\n        uint newInverseRate = rates(currencyKey);\r\n\r\n        // get the new inverted rate if not frozen\r\n        if (!inverse.frozen) {\r\n            uint doubleEntryPoint = inverse.entryPoint.mul(2);\r\n            if (doubleEntryPoint <= rate) {\r\n                // avoid negative numbers for unsigned ints, so set this to 0\r\n                // which by the requirement that lowerLimit be > 0 will\r\n                // cause this to freeze the price to the lowerLimit\r\n                newInverseRate = 0;\r\n            } else {\r\n                newInverseRate = doubleEntryPoint.sub(rate);\r\n            }\r\n\r\n            // now if new rate hits our limits, set it to the limit and freeze\r\n            if (newInverseRate >= inverse.upperLimit) {\r\n                newInverseRate = inverse.upperLimit;\r\n            } else if (newInverseRate <= inverse.lowerLimit) {\r\n                newInverseRate = inverse.lowerLimit;\r\n            }\r\n\r\n            if (newInverseRate == inverse.upperLimit || newInverseRate == inverse.lowerLimit) {\r\n                inverse.frozen = true;\r\n                emit InversePriceFrozen(currencyKey);\r\n            }\r\n        }\r\n\r\n        return newInverseRate;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the Synthetix Drawing Rights exchange rate based on other rates already updated.\r\n     */\r\n    function updateXDRRate(uint timeSent)\r\n        internal\r\n    {\r\n        uint total = 0;\r\n\r\n        for (uint i = 0; i < xdrParticipants.length; i++) {\r\n            total = rates(xdrParticipants[i]).add(total);\r\n        }\r\n\r\n        // Set the rate and update time\r\n        _setRate(\"XDR\", total, timeSent);\r\n\r\n        // Emit our updated event separate to the others to save\r\n        // moving data around between arrays.\r\n        bytes32[] memory eventCurrencyCode = new bytes32[](1);\r\n        eventCurrencyCode[0] = \"XDR\";\r\n\r\n        uint[] memory eventRate = new uint[](1);\r\n        eventRate[0] = rates(\"XDR\");\r\n\r\n        emit RatesUpdated(eventCurrencyCode, eventRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Delete a rate stored in the contract\r\n     * @param currencyKey The currency key you wish to delete the rate for\r\n     */\r\n    function deleteRate(bytes32 currencyKey)\r\n        external\r\n        onlyOracle\r\n    {\r\n        require(rates(currencyKey) > 0, \"Rate is zero\");\r\n\r\n        delete _rates[currencyKey];\r\n\r\n        emit RateDeleted(currencyKey);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Oracle that pushes the rate information to this contract\r\n     * @param _oracle The new oracle address\r\n     */\r\n    function setOracle(address _oracle)\r\n        external\r\n        onlyOwner\r\n    {\r\n        oracle = _oracle;\r\n        emit OracleUpdated(oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the stale period on the updated rate variables\r\n     * @param _time The new rateStalePeriod\r\n     */\r\n    function setRateStalePeriod(uint _time)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rateStalePeriod = _time;\r\n        emit RateStalePeriodUpdated(rateStalePeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice Set an inverse price up for the currency key.\r\n     *\r\n     * An inverse price is one which has an entryPoint, an uppper and a lower limit. Each update, the\r\n     * rate is calculated as double the entryPrice minus the current rate. If this calculation is\r\n     * above or below the upper or lower limits respectively, then the rate is frozen, and no more\r\n     * rate updates will be accepted.\r\n     *\r\n     * @param currencyKey The currency to update\r\n     * @param entryPoint The entry price point of the inverted price\r\n     * @param upperLimit The upper limit, at or above which the price will be frozen\r\n     * @param lowerLimit The lower limit, at or below which the price will be frozen\r\n     * @param freeze Whether or not to freeze this rate immediately. Note: no frozen event will be configured\r\n     * @param freezeAtUpperLimit When the freeze flag is true, this flag indicates whether the rate\r\n     * to freeze at is the upperLimit or lowerLimit..\r\n     */\r\n    function setInversePricing(bytes32 currencyKey, uint entryPoint, uint upperLimit, uint lowerLimit, bool freeze, bool freezeAtUpperLimit)\r\n        external onlyOwner\r\n    {\r\n        require(entryPoint > 0, \"entryPoint must be above 0\");\r\n        require(lowerLimit > 0, \"lowerLimit must be above 0\");\r\n        require(upperLimit > entryPoint, \"upperLimit must be above the entryPoint\");\r\n        require(upperLimit < entryPoint.mul(2), \"upperLimit must be less than double entryPoint\");\r\n        require(lowerLimit < entryPoint, \"lowerLimit must be below the entryPoint\");\r\n\r\n        if (inversePricing[currencyKey].entryPoint <= 0) {\r\n            // then we are adding a new inverse pricing, so add this\r\n            invertedKeys.push(currencyKey);\r\n        }\r\n        inversePricing[currencyKey].entryPoint = entryPoint;\r\n        inversePricing[currencyKey].upperLimit = upperLimit;\r\n        inversePricing[currencyKey].lowerLimit = lowerLimit;\r\n        inversePricing[currencyKey].frozen = freeze;\r\n\r\n        emit InversePriceConfigured(currencyKey, entryPoint, upperLimit, lowerLimit);\r\n\r\n        // When indicating to freeze, we need to know the rate to freeze it at - either upper or lower\r\n        // this is useful in situations where ExchangeRates is updated and there are existing inverted\r\n        // rates already frozen in the current contract that need persisting across the upgrade\r\n        if (freeze) {\r\n            emit InversePriceFrozen(currencyKey);\r\n\r\n            _setRate(currencyKey, freezeAtUpperLimit ? upperLimit : lowerLimit, now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove an inverse price for the currency key\r\n     * @param currencyKey The currency to remove inverse pricing for\r\n     */\r\n    function removeInversePricing(bytes32 currencyKey) external onlyOwner\r\n    {\r\n        require(inversePricing[currencyKey].entryPoint > 0, \"No inverted price exists\");\r\n\r\n        inversePricing[currencyKey].entryPoint = 0;\r\n        inversePricing[currencyKey].upperLimit = 0;\r\n        inversePricing[currencyKey].lowerLimit = 0;\r\n        inversePricing[currencyKey].frozen = false;\r\n\r\n        // now remove inverted key from array\r\n        bool wasRemoved = removeFromArray(currencyKey, invertedKeys);\r\n\r\n        if (wasRemoved) {\r\n            emit InversePriceConfigured(currencyKey, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Add a pricing aggregator for the given key. Note: existing aggregators may be overridden.\r\n     * @param currencyKey The currency key to add an aggregator for\r\n     */\r\n    function addAggregator(bytes32 currencyKey, address aggregatorAddress) external onlyOwner {\r\n        AggregatorInterface aggregator = AggregatorInterface(aggregatorAddress);\r\n        require(aggregator.latestTimestamp() >= 0, \"Given Aggregator is invalid\");\r\n        if (aggregators[currencyKey] == address(0)) {\r\n            aggregatorKeys.push(currencyKey);\r\n        }\r\n        aggregators[currencyKey] = aggregator;\r\n        emit AggregatorAdded(currencyKey, aggregator);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a single value from an array by iterating through until it is found.\r\n     * @param entry The entry to find\r\n     * @param array The array to mutate\r\n     * @return bool Whether or not the entry was found and removed\r\n     */\r\n    function removeFromArray(bytes32 entry, bytes32[] storage array) internal returns (bool) {\r\n        for (uint i = 0; i < array.length; i++) {\r\n            if (array[i] == entry) {\r\n                delete array[i];\r\n\r\n                // Copy the last key into the place of the one we just deleted\r\n                // If there's only one key, this is array[0] = array[0].\r\n                // If we're deleting the last one, it's also a NOOP in the same way.\r\n                array[i] = array[array.length - 1];\r\n\r\n                // Decrease the size of the array by one.\r\n                array.length--;\r\n\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @notice Remove a pricing aggregator for the given key\r\n     * @param currencyKey THe currency key to remove an aggregator for\r\n     */\r\n    function removeAggregator(bytes32 currencyKey) external onlyOwner {\r\n        address aggregator = aggregators[currencyKey];\r\n        require(aggregator != address(0), \"No aggregator exists for key\");\r\n        delete aggregators[currencyKey];\r\n\r\n        bool wasRemoved = removeFromArray(currencyKey, aggregatorKeys);\r\n\r\n        if (wasRemoved) {\r\n            emit AggregatorRemoved(currencyKey, aggregator);\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * @notice A function that lets you easily convert an amount in a source currency to an amount in the destination currency\r\n     * @param sourceCurrencyKey The currency the amount is specified in\r\n     * @param sourceAmount The source amount, specified in UNIT base\r\n     * @param destinationCurrencyKey The destination currency\r\n     */\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\r\n        public\r\n        view\r\n        rateNotStale(sourceCurrencyKey)\r\n        rateNotStale(destinationCurrencyKey)\r\n        returns (uint)\r\n    {\r\n        // If there's no change in the currency, then just return the amount they gave us\r\n        if (sourceCurrencyKey == destinationCurrencyKey) return sourceAmount;\r\n\r\n        // Calculate the effective value by going from source -> USD -> destination\r\n        return sourceAmount.multiplyDecimalRound(rateForCurrency(sourceCurrencyKey))\r\n            .divideDecimalRound(rateForCurrency(destinationCurrencyKey));\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the rate for a specific currency\r\n     */\r\n    function rateForCurrency(bytes32 currencyKey)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return rates(currencyKey);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the rates for a list of currencies\r\n     */\r\n    function ratesForCurrencies(bytes32[] currencyKeys)\r\n        public\r\n        view\r\n        returns (uint[])\r\n    {\r\n        uint[] memory _localRates = new uint[](currencyKeys.length);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            _localRates[i] = rates(currencyKeys[i]);\r\n        }\r\n\r\n        return _localRates;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the rates and isAnyStale for a list of currencies\r\n     */\r\n    function ratesAndStaleForCurrencies(bytes32[] currencyKeys)\r\n        public\r\n        view\r\n        returns (uint[], bool)\r\n    {\r\n        uint[] memory _localRates = new uint[](currencyKeys.length);\r\n\r\n        bool anyRateStale = false;\r\n        uint period = rateStalePeriod;\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            RateAndUpdatedTime memory rateAndUpdateTime = getRateAndUpdatedTime(currencyKeys[i]);\r\n            _localRates[i] = uint256(rateAndUpdateTime.rate);\r\n            if (!anyRateStale) {\r\n                anyRateStale = (currencyKeys[i] != \"sUSD\" && uint256(rateAndUpdateTime.time).add(period) < now);\r\n            }\r\n        }\r\n\r\n        return (_localRates, anyRateStale);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a specific currency's rate hasn't been updated for longer than the stale period.\r\n     */\r\n    function rateIsStale(bytes32 currencyKey)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        // sUSD is a special case and is never stale.\r\n        if (currencyKey == \"sUSD\") return false;\r\n\r\n        return lastRateUpdateTimes(currencyKey).add(rateStalePeriod) < now;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if any rate is frozen (cannot be exchanged into)\r\n     */\r\n    function rateIsFrozen(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return inversePricing[currencyKey].frozen;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Check if any of the currency rates passed in haven't been updated for longer than the stale period.\r\n     */\r\n    function anyRateIsStale(bytes32[] currencyKeys)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        // Loop through each key and check whether the data point is stale.\r\n        uint256 i = 0;\r\n\r\n        while (i < currencyKeys.length) {\r\n            // sUSD is a special case and is never false\r\n            if (currencyKeys[i] != \"sUSD\" && lastRateUpdateTimes(currencyKeys[i]).add(rateStalePeriod) < now) {\r\n                return true;\r\n            }\r\n            i += 1;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier rateNotStale(bytes32 currencyKey) {\r\n        require(!rateIsStale(currencyKey), \"Rate stale or nonexistant currency\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle\r\n    {\r\n        require(msg.sender == oracle, \"Only the oracle can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event OracleUpdated(address newOracle);\r\n    event RateStalePeriodUpdated(uint rateStalePeriod);\r\n    event RatesUpdated(bytes32[] currencyKeys, uint[] newRates);\r\n    event RateDeleted(bytes32 currencyKey);\r\n    event InversePriceConfigured(bytes32 currencyKey, uint entryPoint, uint upperLimit, uint lowerLimit);\r\n    event InversePriceFrozen(bytes32 currencyKey);\r\n    event AggregatorAdded(bytes32 currencyKey, address aggregator);\r\n    event AggregatorRemoved(bytes32 currencyKey, address aggregator);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       LimitedSetup.sol\r\nversion:    1.1\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-15\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA contract with a limited setup period. Any function modified\r\nwith the setup modifier will cease to work after the\r\nconclusion of the configurable-length post-construction setup period.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title Any function decorated with the modifier this contract provides\r\n * deactivates after a specified setup period.\r\n */\r\ncontract LimitedSetup {\r\n\r\n    uint setupExpiryTime;\r\n\r\n    /**\r\n     * @dev LimitedSetup Constructor.\r\n     * @param setupDuration The time the setup period will last for.\r\n     */\r\n    constructor(uint setupDuration)\r\n        public\r\n    {\r\n        setupExpiryTime = now + setupDuration;\r\n    }\r\n\r\n    modifier onlyDuringSetup\r\n    {\r\n        require(now < setupExpiryTime, \"Can only perform this action during setup\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       SynthetixState.sol\r\nversion:    1.0\r\nauthor:     Kevin Brown\r\ndate:       2018-10-19\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA contract that holds issuance state and preferred currency of\r\nusers in the Synthetix system.\r\n\r\nThis contract is used side by side with the Synthetix contract\r\nto make it easier to upgrade the contract logic while maintaining\r\nissuance state.\r\n\r\nThe Synthetix contract is also quite large and on the edge of\r\nbeing beyond the contract size limit without moving this information\r\nout to another contract.\r\n\r\nThe first deployed contract would create this state contract,\r\nusing it as its store of issuance data.\r\n\r\nWhen a new contract is deployed, it links to the existing\r\nstate contract, whose owner would then change its associated\r\ncontract to the new one.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title Synthetix State\r\n * @notice Stores issuance information and preferred currency information of the Synthetix contract.\r\n */\r\ncontract SynthetixState is State, LimitedSetup {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    // A struct for handing values associated with an individual user's debt position\r\n    struct IssuanceData {\r\n        // Percentage of the total debt owned at the time\r\n        // of issuance. This number is modified by the global debt\r\n        // delta array. You can figure out a user's exit price and\r\n        // collateralisation ratio using a combination of their initial\r\n        // debt and the slice of global debt delta which applies to them.\r\n        uint initialDebtOwnership;\r\n        // This lets us know when (in relative terms) the user entered\r\n        // the debt pool so we can calculate their exit price and\r\n        // collateralistion ratio\r\n        uint debtEntryIndex;\r\n    }\r\n\r\n    // Issued synth balances for individual fee entitlements and exit price calculations\r\n    mapping(address => IssuanceData) public issuanceData;\r\n\r\n    // The total count of people that have outstanding issued synths in any flavour\r\n    uint public totalIssuerCount;\r\n\r\n    // Global debt pool tracking\r\n    uint[] public debtLedger;\r\n\r\n    // Import state\r\n    uint public importedXDRAmount;\r\n\r\n    // A quantity of synths greater than this ratio\r\n    // may not be issued against a given value of SNX.\r\n    uint public issuanceRatio = SafeDecimalMath.unit() / 5;\r\n    // No more synths may be issued than the value of SNX backing them.\r\n    uint constant MAX_ISSUANCE_RATIO = SafeDecimalMath.unit();\r\n\r\n    // Users can specify their preferred currency, in which case all synths they receive\r\n    // will automatically exchange to that preferred currency upon receipt in their wallet\r\n    mapping(address => bytes4) public preferredCurrency;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _owner The address which controls this contract.\r\n     * @param _associatedContract The ERC20 contract whose state this composes.\r\n     */\r\n    constructor(address _owner, address _associatedContract)\r\n        State(_owner, _associatedContract)\r\n        LimitedSetup(1 weeks)\r\n        public\r\n    {}\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice Set issuance data for an address\r\n     * @dev Only the associated contract may call this.\r\n     * @param account The address to set the data for.\r\n     * @param initialDebtOwnership The initial debt ownership for this address.\r\n     */\r\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        issuanceData[account].initialDebtOwnership = initialDebtOwnership;\r\n        issuanceData[account].debtEntryIndex = debtLedger.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Clear issuance data for an address\r\n     * @dev Only the associated contract may call this.\r\n     * @param account The address to clear the data for.\r\n     */\r\n    function clearIssuanceData(address account)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        delete issuanceData[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Increment the total issuer count\r\n     * @dev Only the associated contract may call this.\r\n     */\r\n    function incrementTotalIssuerCount()\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        totalIssuerCount = totalIssuerCount.add(1);\r\n    }\r\n\r\n    /**\r\n     * @notice Decrement the total issuer count\r\n     * @dev Only the associated contract may call this.\r\n     */\r\n    function decrementTotalIssuerCount()\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        totalIssuerCount = totalIssuerCount.sub(1);\r\n    }\r\n\r\n    /**\r\n     * @notice Append a value to the debt ledger\r\n     * @dev Only the associated contract may call this.\r\n     * @param value The new value to be added to the debt ledger.\r\n     */\r\n    function appendDebtLedgerValue(uint value)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        debtLedger.push(value);\r\n    }\r\n\r\n    /**\r\n     * @notice Set preferred currency for a user\r\n     * @dev Only the associated contract may call this.\r\n     * @param account The account to set the preferred currency for\r\n     * @param currencyKey The new preferred currency\r\n     */\r\n    function setPreferredCurrency(address account, bytes4 currencyKey)\r\n        external\r\n        onlyAssociatedContract\r\n    {\r\n        preferredCurrency[account] = currencyKey;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the issuanceRatio for issuance calculations.\r\n     * @dev Only callable by the contract owner.\r\n     */\r\n    function setIssuanceRatio(uint _issuanceRatio)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_issuanceRatio <= MAX_ISSUANCE_RATIO, \"New issuance ratio cannot exceed MAX_ISSUANCE_RATIO\");\r\n        issuanceRatio = _issuanceRatio;\r\n        emit IssuanceRatioUpdated(_issuanceRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Import issuer data from the old Synthetix contract before multicurrency\r\n     * @dev Only callable by the contract owner, and only for 1 week after deployment.\r\n     */\r\n    function importIssuerData(address[] accounts, uint[] sUSDAmounts)\r\n        external\r\n        onlyOwner\r\n        onlyDuringSetup\r\n    {\r\n        require(accounts.length == sUSDAmounts.length, \"Length mismatch\");\r\n\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            _addToDebtRegister(accounts[i], sUSDAmounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Import issuer data from the old Synthetix contract before multicurrency\r\n     * @dev Only used from importIssuerData above, meant to be disposable\r\n     */\r\n    function _addToDebtRegister(address account, uint amount)\r\n        internal\r\n    {\r\n        // This code is duplicated from Synthetix so that we can call it directly here\r\n        // during setup only.\r\n        Synthetix synthetix = Synthetix(associatedContract);\r\n\r\n        // What is the value of the requested debt in XDRs?\r\n        uint xdrValue = synthetix.effectiveValue(\"sUSD\", amount, \"XDR\");\r\n\r\n        // What is the value that we've previously imported?\r\n        uint totalDebtIssued = importedXDRAmount;\r\n\r\n        // What will the new total be including the new value?\r\n        uint newTotalDebtIssued = xdrValue.add(totalDebtIssued);\r\n\r\n        // Save that for the next import.\r\n        importedXDRAmount = newTotalDebtIssued;\r\n\r\n        // What is their percentage (as a high precision int) of the total debt?\r\n        uint debtPercentage = xdrValue.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n\r\n        // And what effect does this percentage have on the global debt holding of other issuers?\r\n        // The delta specifically needs to not take into account any existing debt as it's already\r\n        // accounted for in the delta from when they issued previously.\r\n        // The delta is a high precision integer.\r\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\r\n\r\n        uint existingDebt = synthetix.debtBalanceOf(account, \"XDR\");\r\n\r\n        // And what does their debt ownership look like including this previous stake?\r\n        if (existingDebt > 0) {\r\n            debtPercentage = xdrValue.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\r\n        }\r\n\r\n        // Are they a new issuer? If so, record them.\r\n        if (issuanceData[account].initialDebtOwnership == 0) {\r\n            totalIssuerCount = totalIssuerCount.add(1);\r\n        }\r\n\r\n        // Save the debt entry parameters\r\n        issuanceData[account].initialDebtOwnership = debtPercentage;\r\n        issuanceData[account].debtEntryIndex = debtLedger.length;\r\n\r\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\r\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\r\n        if (debtLedger.length > 0) {\r\n            debtLedger.push(\r\n                debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)\r\n            );\r\n        } else {\r\n            debtLedger.push(SafeDecimalMath.preciseUnit());\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * @notice Retrieve the length of the debt ledger array\r\n     */\r\n    function debtLedgerLength()\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return debtLedger.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the most recent entry from the debt ledger\r\n     */\r\n    function lastDebtLedgerEntry()\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return debtLedger[debtLedger.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @notice Query whether an account has issued and has an outstanding debt balance\r\n     * @param account The address to query for\r\n     */\r\n    function hasIssued(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return issuanceData[account].initialDebtOwnership > 0;\r\n    }\r\n\r\n    event IssuanceRatioUpdated(uint newRatio);\r\n}\r\n\r\n\r\n/**\r\n * @title RewardsDistribution interface\r\n */\r\ninterface IRewardsDistribution {\r\n    function distributeRewards(uint amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Synthetix ERC20 contract.\r\n * @notice The Synthetix contracts not only facilitates transfers, exchanges, and tracks balances,\r\n * but it also computes the quantity of fees each synthetix holder is entitled to.\r\n */\r\ncontract Synthetix is ExternStateToken {\r\n\r\n    // ========== STATE VARIABLES ==========\r\n\r\n    // Available Synths which can be used with the system\r\n    Synth[] public availableSynths;\r\n    mapping(bytes32 => Synth) public synths;\r\n    mapping(address => bytes32) public synthsByAddress;\r\n\r\n    IFeePool public feePool;\r\n    ISynthetixEscrow public escrow;\r\n    ISynthetixEscrow public rewardEscrow;\r\n    ExchangeRates public exchangeRates;\r\n    SynthetixState public synthetixState;\r\n    SupplySchedule public supplySchedule;\r\n    IRewardsDistribution public rewardsDistribution;\r\n\r\n    bool private protectionCircuit = false;\r\n\r\n    string constant TOKEN_NAME = \"Synthetix Network Token\";\r\n    string constant TOKEN_SYMBOL = \"SNX\";\r\n    uint8 constant DECIMALS = 18;\r\n    bool public exchangeEnabled = true;\r\n    uint public gasPriceLimit;\r\n\r\n    address public gasLimitOracle;\r\n    // ========== CONSTRUCTOR ==========\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _proxy The main token address of the Proxy contract. This will be ProxyERC20.sol\r\n     * @param _tokenState Address of the external immutable contract containing token balances.\r\n     * @param _synthetixState External immutable contract containing the SNX minters debt ledger.\r\n     * @param _owner The owner of this contract.\r\n     * @param _exchangeRates External immutable contract where the price oracle pushes prices onchain too.\r\n     * @param _feePool External upgradable contract handling SNX Fees and Rewards claiming\r\n     * @param _supplySchedule External immutable contract with the SNX inflationary supply schedule\r\n     * @param _rewardEscrow External immutable contract for SNX Rewards Escrow\r\n     * @param _escrow External immutable contract for SNX Token Sale Escrow\r\n     * @param _rewardsDistribution External immutable contract managing the Rewards Distribution of the SNX inflationary supply\r\n     * @param _totalSupply On upgrading set to reestablish the current total supply (This should be in SynthetixState if ever updated)\r\n     */\r\n    constructor(address _proxy, TokenState _tokenState, SynthetixState _synthetixState,\r\n        address _owner, ExchangeRates _exchangeRates, IFeePool _feePool, SupplySchedule _supplySchedule,\r\n        ISynthetixEscrow _rewardEscrow, ISynthetixEscrow _escrow, IRewardsDistribution _rewardsDistribution, uint _totalSupply\r\n    )\r\n        ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _owner)\r\n        public\r\n    {\r\n        synthetixState = _synthetixState;\r\n        exchangeRates = _exchangeRates;\r\n        feePool = _feePool;\r\n        supplySchedule = _supplySchedule;\r\n        rewardEscrow = _rewardEscrow;\r\n        escrow = _escrow;\r\n        rewardsDistribution = _rewardsDistribution;\r\n    }\r\n    // ========== SETTERS ========== */\r\n\r\n    function setFeePool(IFeePool _feePool)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        feePool = _feePool;\r\n    }\r\n\r\n    function setExchangeRates(ExchangeRates _exchangeRates)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        exchangeRates = _exchangeRates;\r\n    }\r\n\r\n    function setProtectionCircuit(bool _protectionCircuitIsActivated)\r\n        external\r\n        onlyOracle\r\n    {\r\n        protectionCircuit = _protectionCircuitIsActivated;\r\n    }\r\n\r\n    function setExchangeEnabled(bool _exchangeEnabled)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        exchangeEnabled = _exchangeEnabled;\r\n    }\r\n\r\n    function setGasLimitOracle(address _gasLimitOracle)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        gasLimitOracle = _gasLimitOracle;\r\n    }\r\n\r\n    function setGasPriceLimit(uint _gasPriceLimit)\r\n        external\r\n    {\r\n        require(msg.sender == gasLimitOracle, \"Only gas limit oracle allowed\");\r\n        require(_gasPriceLimit > 0, \"Needs to be greater than 0\");\r\n        gasPriceLimit = _gasPriceLimit;\r\n    }\r\n\r\n    /**\r\n     * @notice Add an associated Synth contract to the Synthetix system\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function addSynth(Synth synth)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        bytes32 currencyKey = synth.currencyKey();\r\n\r\n        require(synths[currencyKey] == Synth(0), \"Synth already exists\");\r\n        require(synthsByAddress[synth] == bytes32(0), \"Synth address already exists\");\r\n\r\n        availableSynths.push(synth);\r\n        synths[currencyKey] = synth;\r\n        synthsByAddress[synth] = currencyKey;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove an associated Synth contract from the Synthetix system\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function removeSynth(bytes32 currencyKey)\r\n        external\r\n        optionalProxy_onlyOwner\r\n    {\r\n        require(synths[currencyKey] != address(0), \"Synth does not exist\");\r\n        require(synths[currencyKey].totalSupply() == 0, \"Synth supply exists\");\r\n        require(currencyKey != \"XDR\", \"Cannot remove XDR synth\");\r\n        require(currencyKey != \"sUSD\", \"Cannot remove sUSD synth\");\r\n\r\n        // Save the address we're removing for emitting the event at the end.\r\n        address synthToRemove = synths[currencyKey];\r\n\r\n        // Remove the synth from the availableSynths array.\r\n        for (uint i = 0; i < availableSynths.length; i++) {\r\n            if (availableSynths[i] == synthToRemove) {\r\n                delete availableSynths[i];\r\n\r\n                // Copy the last synth into the place of the one we just deleted\r\n                // If there's only one synth, this is synths[0] = synths[0].\r\n                // If we're deleting the last one, it's also a NOOP in the same way.\r\n                availableSynths[i] = availableSynths[availableSynths.length - 1];\r\n\r\n                // Decrease the size of the array by one.\r\n                availableSynths.length--;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        // And remove it from the synths mapping\r\n        delete synthsByAddress[synths[currencyKey]];\r\n        delete synths[currencyKey];\r\n\r\n        // Note: No event here as Synthetix contract exceeds max contract size\r\n        // with these events, and it's unlikely people will need to\r\n        // track these events specifically.\r\n    }\r\n\r\n    // ========== VIEWS ==========\r\n\r\n    /**\r\n     * @notice A function that lets you easily convert an amount in a source currency to an amount in the destination currency\r\n     * @param sourceCurrencyKey The currency the amount is specified in\r\n     * @param sourceAmount The source amount, specified in UNIT base\r\n     * @param destinationCurrencyKey The destination currency\r\n     */\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return exchangeRates.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\r\n    }\r\n\r\n    /**\r\n     * @notice Total amount of synths issued by the system, priced in currencyKey\r\n     * @param currencyKey The currency to value the synths in\r\n     */\r\n    function totalIssuedSynths(bytes32 currencyKey)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint total = 0;\r\n        uint currencyRate = exchangeRates.rateForCurrency(currencyKey);\r\n\r\n        (uint[] memory rates, bool anyRateStale) = exchangeRates.ratesAndStaleForCurrencies(availableCurrencyKeys());\r\n        require(!anyRateStale, \"Rates are stale\");\r\n\r\n        for (uint i = 0; i < availableSynths.length; i++) {\r\n            // What's the total issued value of that synth in the destination currency?\r\n            // Note: We're not using our effectiveValue function because we don't want to go get the\r\n            //       rate for the destination currency and check if it's stale repeatedly on every\r\n            //       iteration of the loop\r\n            uint synthValue = availableSynths[i].totalSupply()\r\n                .multiplyDecimalRound(rates[i]);\r\n            total = total.add(synthValue);\r\n        }\r\n\r\n        return total.divideDecimalRound(currencyRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the currencyKeys of availableSynths for rate checking\r\n     */\r\n    function availableCurrencyKeys()\r\n        public\r\n        view\r\n        returns (bytes32[])\r\n    {\r\n        bytes32[] memory currencyKeys = new bytes32[](availableSynths.length);\r\n\r\n        for (uint i = 0; i < availableSynths.length; i++) {\r\n            currencyKeys[i] = synthsByAddress[availableSynths[i]];\r\n        }\r\n\r\n        return currencyKeys;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the count of available synths in the system, which you can use to iterate availableSynths\r\n     */\r\n    function availableSynthCount()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return availableSynths.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the effective fee rate for the exchange, taking into considering swing trading\r\n     */\r\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        // Get the base exchange fee rate\r\n        uint exchangeFeeRate = feePool.exchangeFeeRate();\r\n\r\n        uint multiplier = 1;\r\n\r\n        // Is this a swing trade? I.e. long to short or vice versa, excluding when going into or out of sUSD.\r\n        // Note: this assumes shorts begin with 'i' and longs with 's'.\r\n        if (\r\n            (sourceCurrencyKey[0] == 0x73 && sourceCurrencyKey != \"sUSD\" && destinationCurrencyKey[0] == 0x69) ||\r\n            (sourceCurrencyKey[0] == 0x69 && destinationCurrencyKey != \"sUSD\" && destinationCurrencyKey[0] == 0x73)\r\n        ) {\r\n            // If so then double the exchange fee multipler\r\n            multiplier = 2;\r\n        }\r\n\r\n        return exchangeFeeRate.mul(multiplier);\r\n    }\r\n    // ========== MUTATIVE FUNCTIONS ==========\r\n\r\n    /**\r\n     * @notice ERC20 transfer function.\r\n     */\r\n    function transfer(address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        bytes memory empty;\r\n        return transfer(to, value, empty);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC223 transfer function. Does not conform with the ERC223 spec, as:\r\n     *         - Transaction doesn't revert if the recipient doesn't implement tokenFallback()\r\n     *         - Emits a standard ERC20 event without the bytes data parameter so as not to confuse\r\n     *           tooling such as Etherscan.\r\n     */\r\n    function transfer(address to, uint value, bytes data)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        // Ensure they're not trying to exceed their locked amount\r\n        require(value <= transferableSynthetix(messageSender), \"Insufficient balance\");\r\n\r\n        // Perform the transfer: if there is a problem an exception will be thrown in this call.\r\n        _transfer_byProxy(messageSender, to, value, data);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 transferFrom function.\r\n     */\r\n    function transferFrom(address from, address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        bytes memory empty;\r\n        return transferFrom(from, to, value, empty);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC223 transferFrom function. Does not conform with the ERC223 spec, as:\r\n     *         - Transaction doesn't revert if the recipient doesn't implement tokenFallback()\r\n     *         - Emits a standard ERC20 event without the bytes data parameter so as not to confuse\r\n     *           tooling such as Etherscan.\r\n     */\r\n    function transferFrom(address from, address to, uint value, bytes data)\r\n        public\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        // Ensure they're not trying to exceed their locked amount\r\n        require(value <= transferableSynthetix(from), \"Insufficient balance\");\r\n\r\n        // Perform the transfer: if there is a problem,\r\n        // an exception will be thrown in this call.\r\n        _transferFrom_byProxy(messageSender, from, to, value, data);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Function that allows you to exchange synths you hold in one flavour for another.\r\n     * @param sourceCurrencyKey The source currency you wish to exchange from\r\n     * @param sourceAmount The amount, specified in UNIT of source currency you wish to exchange\r\n     * @param destinationCurrencyKey The destination currency you wish to obtain.\r\n     * @return Boolean that indicates whether the transfer succeeded or failed.\r\n     */\r\n    function exchange(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\r\n        external\r\n        optionalProxy\r\n        // Note: We don't need to insist on non-stale rates because effectiveValue will do it for us.\r\n        returns (bool)\r\n    {\r\n        require(sourceCurrencyKey != destinationCurrencyKey, \"Must use different synths\");\r\n        require(sourceAmount > 0, \"Zero amount\");\r\n\r\n        // verify gas price limit\r\n        validateGasPrice(tx.gasprice);\r\n\r\n        //  If the oracle has set protectionCircuit to true then burn the synths\r\n        if (protectionCircuit) {\r\n            synths[sourceCurrencyKey].burn(messageSender, sourceAmount);\r\n            return true;\r\n        } else {\r\n            // Pass it along, defaulting to the sender as the recipient.\r\n            return _internalExchange(\r\n                messageSender,\r\n                sourceCurrencyKey,\r\n                sourceAmount,\r\n                destinationCurrencyKey,\r\n                messageSender,\r\n                true // Charge fee on the exchange\r\n            );\r\n        }\r\n    }\r\n\r\n    /*\r\n        @dev validate that the given gas price is less than or equal to the gas price limit\r\n        @param _gasPrice tested gas price\r\n    */\r\n    function validateGasPrice(uint _givenGasPrice)\r\n        public\r\n        view\r\n    {\r\n        require(_givenGasPrice <= gasPriceLimit, \"Gas price above limit\");\r\n    }\r\n\r\n    /**\r\n     * @notice Function that allows synth contract to delegate exchanging of a synth that is not the same sourceCurrency\r\n     * @dev Only the synth contract can call this function\r\n     * @param from The address to exchange / burn synth from\r\n     * @param sourceCurrencyKey The source currency you wish to exchange from\r\n     * @param sourceAmount The amount, specified in UNIT of source currency you wish to exchange\r\n     * @param destinationCurrencyKey The destination currency you wish to obtain.\r\n     * @param destinationAddress Where the result should go.\r\n     * @return Boolean that indicates whether the transfer succeeded or failed.\r\n     */\r\n    function synthInitiatedExchange(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress\r\n    )\r\n        external\r\n        optionalProxy\r\n        returns (bool)\r\n    {\r\n        require(synthsByAddress[messageSender] != bytes32(0), \"Only synth allowed\");\r\n        require(sourceCurrencyKey != destinationCurrencyKey, \"Can't be same synth\");\r\n        require(sourceAmount > 0, \"Zero amount\");\r\n\r\n        // Pass it along\r\n        return _internalExchange(\r\n            from,\r\n            sourceCurrencyKey,\r\n            sourceAmount,\r\n            destinationCurrencyKey,\r\n            destinationAddress,\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Function that allows synth contract to delegate sending fee to the fee Pool.\r\n     * @dev fee pool contract address is not allowed to call function\r\n     * @param from The address to move synth from\r\n     * @param sourceCurrencyKey source currency from.\r\n     * @param sourceAmount The amount, specified in UNIT of source currency.\r\n     * @param destinationCurrencyKey The destination currency to obtain.\r\n     * @param destinationAddress Where the result should go.\r\n     * @param chargeFee Boolean to charge a fee for exchange.\r\n     * @return Boolean that indicates whether the transfer succeeded or failed.\r\n     */\r\n    function _internalExchange(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress,\r\n        bool chargeFee\r\n    )\r\n        internal\r\n        notFeeAddress(from)\r\n        returns (bool)\r\n    {\r\n        require(exchangeEnabled, \"Exchanging is disabled\");\r\n\r\n        // Note: We don't need to check their balance as the burn() below will do a safe subtraction which requires\r\n        // the subtraction to not overflow, which would happen if their balance is not sufficient.\r\n\r\n        // Burn the source amount\r\n        synths[sourceCurrencyKey].burn(from, sourceAmount);\r\n\r\n        // How much should they get in the destination currency?\r\n        uint destinationAmount = effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\r\n\r\n        // What's the fee on that currency that we should deduct?\r\n        uint amountReceived = destinationAmount;\r\n        uint fee = 0;\r\n\r\n        if (chargeFee) {\r\n            // Get the exchange fee rate\r\n            uint exchangeFeeRate = feeRateForExchange(sourceCurrencyKey, destinationCurrencyKey);\r\n\r\n            amountReceived = destinationAmount.multiplyDecimal(SafeDecimalMath.unit().sub(exchangeFeeRate));\r\n\r\n            fee = destinationAmount.sub(amountReceived);\r\n        }\r\n\r\n        // Issue their new synths\r\n        synths[destinationCurrencyKey].issue(destinationAddress, amountReceived);\r\n\r\n        // Remit the fee in XDRs\r\n        if (fee > 0) {\r\n            uint xdrFeeAmount = effectiveValue(destinationCurrencyKey, fee, \"XDR\");\r\n            synths[\"XDR\"].issue(feePool.FEE_ADDRESS(), xdrFeeAmount);\r\n            // Tell the fee pool about this.\r\n            feePool.recordFeePaid(xdrFeeAmount);\r\n        }\r\n\r\n        // Nothing changes as far as issuance data goes because the total value in the system hasn't changed.\r\n\r\n        // Call the ERC223 transfer callback if needed\r\n        synths[destinationCurrencyKey].triggerTokenFallbackIfNeeded(from, destinationAddress, amountReceived);\r\n\r\n        //Let the DApps know there was a Synth exchange\r\n        emitSynthExchange(from, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, amountReceived, destinationAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Function that registers new synth as they are issued. Calculate delta to append to synthetixState.\r\n     * @dev Only internal calls from synthetix address.\r\n     * @param currencyKey The currency to register synths in, for example sUSD or sAUD\r\n     * @param amount The amount of synths to register with a base of UNIT\r\n     */\r\n    function _addToDebtRegister(bytes32 currencyKey, uint amount)\r\n        internal\r\n    {\r\n        // What is the value of the requested debt in XDRs?\r\n        uint xdrValue = effectiveValue(currencyKey, amount, \"XDR\");\r\n\r\n        // What is the value of all issued synths of the system (priced in XDRs)?\r\n        uint totalDebtIssued = totalIssuedSynths(\"XDR\");\r\n\r\n        // What will the new total be including the new value?\r\n        uint newTotalDebtIssued = xdrValue.add(totalDebtIssued);\r\n\r\n        // What is their percentage (as a high precision int) of the total debt?\r\n        uint debtPercentage = xdrValue.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n\r\n        // And what effect does this percentage change have on the global debt holding of other issuers?\r\n        // The delta specifically needs to not take into account any existing debt as it's already\r\n        // accounted for in the delta from when they issued previously.\r\n        // The delta is a high precision integer.\r\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\r\n\r\n        // How much existing debt do they have?\r\n        uint existingDebt = debtBalanceOf(messageSender, \"XDR\");\r\n\r\n        // And what does their debt ownership look like including this previous stake?\r\n        if (existingDebt > 0) {\r\n            debtPercentage = xdrValue.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\r\n        }\r\n\r\n        // Are they a new issuer? If so, record them.\r\n        if (existingDebt == 0) {\r\n            synthetixState.incrementTotalIssuerCount();\r\n        }\r\n\r\n        // Save the debt entry parameters\r\n        synthetixState.setCurrentIssuanceData(messageSender, debtPercentage);\r\n\r\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\r\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\r\n        if (synthetixState.debtLedgerLength() > 0) {\r\n            synthetixState.appendDebtLedgerValue(\r\n                synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)\r\n            );\r\n        } else {\r\n            synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Issue synths against the sender's SNX.\r\n     * @dev Issuance is only allowed if the synthetix price isn't stale. Amount should be larger than 0.\r\n     * @param amount The amount of synths you wish to issue with a base of UNIT\r\n     */\r\n    function issueSynths(uint amount)\r\n        public\r\n        optionalProxy\r\n        // No need to check if price is stale, as it is checked in issuableSynths.\r\n    {\r\n        bytes32 currencyKey = \"sUSD\";\r\n\r\n        require(amount <= remainingIssuableSynths(messageSender, currencyKey), \"Amount too large\");\r\n\r\n        // Keep track of the debt they're about to create\r\n        _addToDebtRegister(currencyKey, amount);\r\n\r\n        // Create their synths\r\n        synths[currencyKey].issue(messageSender, amount);\r\n\r\n        // Store their locked SNX amount to determine their fee % for the period\r\n        _appendAccountIssuanceRecord();\r\n    }\r\n\r\n    /**\r\n     * @notice Issue the maximum amount of Synths possible against the sender's SNX.\r\n     * @dev Issuance is only allowed if the synthetix price isn't stale.\r\n     */\r\n    function issueMaxSynths()\r\n        external\r\n        optionalProxy\r\n    {\r\n        bytes32 currencyKey = \"sUSD\";\r\n\r\n        // Figure out the maximum we can issue in that currency\r\n        uint maxIssuable = remainingIssuableSynths(messageSender, currencyKey);\r\n\r\n        // Keep track of the debt they're about to create\r\n        _addToDebtRegister(currencyKey, maxIssuable);\r\n\r\n        // Create their synths\r\n        synths[currencyKey].issue(messageSender, maxIssuable);\r\n\r\n        // Store their locked SNX amount to determine their fee % for the period\r\n        _appendAccountIssuanceRecord();\r\n    }\r\n\r\n    /**\r\n     * @notice Burn synths to clear issued synths/free SNX.\r\n     * @param amount The amount (in UNIT base) you wish to burn\r\n     * @dev The amount to burn is debased to XDR's\r\n     */\r\n    function burnSynths(uint amount)\r\n        external\r\n        optionalProxy\r\n        // No need to check for stale rates as effectiveValue checks rates\r\n    {\r\n        bytes32 currencyKey = \"sUSD\";\r\n\r\n        // How much debt do they have?\r\n        uint debtToRemove = effectiveValue(currencyKey, amount, \"XDR\");\r\n        uint existingDebt = debtBalanceOf(messageSender, \"XDR\");\r\n\r\n        uint debtInCurrencyKey = debtBalanceOf(messageSender, currencyKey);\r\n\r\n        require(existingDebt > 0, \"No debt to forgive\");\r\n\r\n        // If they're trying to burn more debt than they actually owe, rather than fail the transaction, let's just\r\n        // clear their debt and leave them be.\r\n        uint amountToRemove = existingDebt < debtToRemove ? existingDebt : debtToRemove;\r\n\r\n        // Remove their debt from the ledger\r\n        _removeFromDebtRegister(amountToRemove, existingDebt);\r\n\r\n        uint amountToBurn = debtInCurrencyKey < amount ? debtInCurrencyKey : amount;\r\n\r\n        // synth.burn does a safe subtraction on balance (so it will revert if there are not enough synths).\r\n        synths[currencyKey].burn(messageSender, amountToBurn);\r\n\r\n        // Store their debtRatio against a feeperiod to determine their fee/rewards % for the period\r\n        _appendAccountIssuanceRecord();\r\n    }\r\n\r\n    /**\r\n     * @notice Store in the FeePool the users current debt value in the system in XDRs.\r\n     * @dev debtBalanceOf(messageSender, \"XDR\") to be used with totalIssuedSynths(\"XDR\") to get\r\n     *  users % of the system within a feePeriod.\r\n     */\r\n    function _appendAccountIssuanceRecord()\r\n        internal\r\n    {\r\n        uint initialDebtOwnership;\r\n        uint debtEntryIndex;\r\n        (initialDebtOwnership, debtEntryIndex) = synthetixState.issuanceData(messageSender);\r\n\r\n        feePool.appendAccountIssuanceRecord(\r\n            messageSender,\r\n            initialDebtOwnership,\r\n            debtEntryIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a debt position from the register\r\n     * @param amount The amount (in UNIT base) being presented in XDRs\r\n     * @param existingDebt The existing debt (in UNIT base) of address presented in XDRs\r\n     */\r\n    function _removeFromDebtRegister(uint amount, uint existingDebt)\r\n        internal\r\n    {\r\n        uint debtToRemove = amount;\r\n\r\n        // What is the value of all issued synths of the system (priced in XDRs)?\r\n        uint totalDebtIssued = totalIssuedSynths(\"XDR\");\r\n\r\n        // What will the new total after taking out the withdrawn amount\r\n        uint newTotalDebtIssued = totalDebtIssued.sub(debtToRemove);\r\n\r\n        uint delta = 0;\r\n\r\n        // What will the debt delta be if there is any debt left?\r\n        // Set delta to 0 if no more debt left in system after user\r\n        if (newTotalDebtIssued > 0) {\r\n\r\n            // What is the percentage of the withdrawn debt (as a high precision int) of the total debt after?\r\n            uint debtPercentage = debtToRemove.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n\r\n            // And what effect does this percentage change have on the global debt holding of other issuers?\r\n            // The delta specifically needs to not take into account any existing debt as it's already\r\n            // accounted for in the delta from when they issued previously.\r\n            delta = SafeDecimalMath.preciseUnit().add(debtPercentage);\r\n        }\r\n\r\n        // Are they exiting the system, or are they just decreasing their debt position?\r\n        if (debtToRemove == existingDebt) {\r\n            synthetixState.setCurrentIssuanceData(messageSender, 0);\r\n            synthetixState.decrementTotalIssuerCount();\r\n        } else {\r\n            // What percentage of the debt will they be left with?\r\n            uint newDebt = existingDebt.sub(debtToRemove);\r\n            uint newDebtPercentage = newDebt.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n\r\n            // Store the debt percentage and debt ledger as high precision integers\r\n            synthetixState.setCurrentIssuanceData(messageSender, newDebtPercentage);\r\n        }\r\n\r\n        // Update our cumulative ledger. This is also a high precision integer.\r\n        synthetixState.appendDebtLedgerValue(\r\n            synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)\r\n        );\r\n    }\r\n\r\n    // ========== Issuance/Burning ==========\r\n\r\n    /**\r\n     * @notice The maximum synths an issuer can issue against their total synthetix quantity, priced in XDRs.\r\n     * This ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.\r\n     */\r\n    function maxIssuableSynths(address issuer, bytes32 currencyKey)\r\n        public\r\n        view\r\n        // We don't need to check stale rates here as effectiveValue will do it for us.\r\n        returns (uint)\r\n    {\r\n        // What is the value of their SNX balance in the destination currency?\r\n        uint destinationValue = effectiveValue(\"SNX\", collateral(issuer), currencyKey);\r\n\r\n        // They're allowed to issue up to issuanceRatio of that value\r\n        return destinationValue.multiplyDecimal(synthetixState.issuanceRatio());\r\n    }\r\n\r\n    /**\r\n     * @notice The current collateralisation ratio for a user. Collateralisation ratio varies over time\r\n     * as the value of the underlying Synthetix asset changes,\r\n     * e.g. based on an issuance ratio of 20%. if a user issues their maximum available\r\n     * synths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value\r\n     * of Synthetix changes, the ratio returned by this function will adjust accordingly. Users are\r\n     * incentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by\r\n     * altering the amount of fees they're able to claim from the system.\r\n     */\r\n    function collateralisationRatio(address issuer)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint totalOwnedSynthetix = collateral(issuer);\r\n        if (totalOwnedSynthetix == 0) return 0;\r\n\r\n        uint debtBalance = debtBalanceOf(issuer, \"SNX\");\r\n        return debtBalance.divideDecimalRound(totalOwnedSynthetix);\r\n    }\r\n\r\n    /**\r\n     * @notice If a user issues synths backed by SNX in their wallet, the SNX become locked. This function\r\n     * will tell you how many synths a user has to give back to the system in order to unlock their original\r\n     * debt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price\r\n     * the debt in sUSD, XDR, or any other synth you wish.\r\n     */\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\r\n        public\r\n        view\r\n        // Don't need to check for stale rates here because totalIssuedSynths will do it for us\r\n        returns (uint)\r\n    {\r\n        // What was their initial debt ownership?\r\n        uint initialDebtOwnership;\r\n        uint debtEntryIndex;\r\n        (initialDebtOwnership, debtEntryIndex) = synthetixState.issuanceData(issuer);\r\n\r\n        // If it's zero, they haven't issued, and they have no debt.\r\n        if (initialDebtOwnership == 0) return 0;\r\n\r\n        // Figure out the global debt percentage delta from when they entered the system.\r\n        // This is a high precision integer.\r\n        uint currentDebtOwnership = synthetixState.lastDebtLedgerEntry()\r\n            .divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex))\r\n            .multiplyDecimalRoundPrecise(initialDebtOwnership);\r\n\r\n        // What's the total value of the system in their requested currency?\r\n        uint totalSystemValue = totalIssuedSynths(currencyKey);\r\n\r\n        // Their debt balance is their portion of the total system value.\r\n        uint highPrecisionBalance = totalSystemValue.decimalToPreciseDecimal()\r\n            .multiplyDecimalRoundPrecise(currentDebtOwnership);\r\n\r\n        return highPrecisionBalance.preciseDecimalToDecimal();\r\n    }\r\n\r\n    /**\r\n     * @notice The remaining synths an issuer can issue against their total synthetix balance.\r\n     * @param issuer The account that intends to issue\r\n     * @param currencyKey The currency to price issuable value in\r\n     */\r\n    function remainingIssuableSynths(address issuer, bytes32 currencyKey)\r\n        public\r\n        view\r\n        // Don't need to check for synth existing or stale rates because maxIssuableSynths will do it for us.\r\n        returns (uint)\r\n    {\r\n        uint alreadyIssued = debtBalanceOf(issuer, currencyKey);\r\n        uint max = maxIssuableSynths(issuer, currencyKey);\r\n\r\n        if (alreadyIssued >= max) {\r\n            return 0;\r\n        } else {\r\n            return max.sub(alreadyIssued);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice The total SNX owned by this account, both escrowed and unescrowed,\r\n     * against which synths can be issued.\r\n     * This includes those already being used as collateral (locked), and those\r\n     * available for further issuance (unlocked).\r\n     */\r\n    function collateral(address account)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint balance = tokenState.balanceOf(account);\r\n\r\n        if (escrow != address(0)) {\r\n            balance = balance.add(escrow.balanceOf(account));\r\n        }\r\n\r\n        if (rewardEscrow != address(0)) {\r\n            balance = balance.add(rewardEscrow.balanceOf(account));\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @notice The number of SNX that are free to be transferred for an account.\r\n     * @dev Escrowed SNX are not transferable, so they are not included\r\n     * in this calculation.\r\n     * @notice SNX rate not stale is checked within debtBalanceOf\r\n     */\r\n    function transferableSynthetix(address account)\r\n        public\r\n        view\r\n        rateNotStale(\"SNX\") // SNX is not a synth so is not checked in totalIssuedSynths\r\n        returns (uint)\r\n    {\r\n        // How many SNX do they have, excluding escrow?\r\n        // Note: We're excluding escrow here because we're interested in their transferable amount\r\n        // and escrowed SNX are not transferable.\r\n        uint balance = tokenState.balanceOf(account);\r\n\r\n        // How many of those will be locked by the amount they've issued?\r\n        // Assuming issuance ratio is 20%, then issuing 20 SNX of value would require\r\n        // 100 SNX to be locked in their wallet to maintain their collateralisation ratio\r\n        // The locked synthetix value can exceed their balance.\r\n        uint lockedSynthetixValue = debtBalanceOf(account, \"SNX\").divideDecimalRound(synthetixState.issuanceRatio());\r\n\r\n        // If we exceed the balance, no SNX are transferable, otherwise the difference is.\r\n        if (lockedSynthetixValue >= balance) {\r\n            return 0;\r\n        } else {\r\n            return balance.sub(lockedSynthetixValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the inflationary SNX supply. The inflation shedule is\r\n     * defined in the SupplySchedule contract.\r\n     * The mint() function is publicly callable by anyone. The caller will\r\n     receive a minter reward as specified in supplySchedule.minterReward().\r\n     */\r\n    function mint()\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(rewardsDistribution != address(0), \"RewardsDistribution not set\");\r\n\r\n        uint supplyToMint = supplySchedule.mintableSupply();\r\n        require(supplyToMint > 0, \"No supply is mintable\");\r\n\r\n        // record minting event before mutation to token supply\r\n        supplySchedule.recordMintEvent(supplyToMint);\r\n\r\n        // Set minted SNX balance to RewardEscrow's balance\r\n        // Minus the minterReward and set balance of minter to add reward\r\n        uint minterReward = supplySchedule.minterReward();\r\n        // Get the remainder\r\n        uint amountToDistribute = supplyToMint.sub(minterReward);\r\n\r\n        // Set the token balance to the RewardsDistribution contract\r\n        tokenState.setBalanceOf(rewardsDistribution, tokenState.balanceOf(rewardsDistribution).add(amountToDistribute));\r\n        emitTransfer(this, rewardsDistribution, amountToDistribute);\r\n\r\n        // Kick off the distribution of rewards\r\n        rewardsDistribution.distributeRewards(amountToDistribute);\r\n\r\n        // Assign the minters reward.\r\n        tokenState.setBalanceOf(msg.sender, tokenState.balanceOf(msg.sender).add(minterReward));\r\n        emitTransfer(this, msg.sender, minterReward);\r\n\r\n        totalSupply = totalSupply.add(supplyToMint);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ========== MODIFIERS ==========\r\n\r\n    modifier rateNotStale(bytes32 currencyKey) {\r\n        require(!exchangeRates.rateIsStale(currencyKey), \"Rate stale or not a synth\");\r\n        _;\r\n    }\r\n\r\n    modifier notFeeAddress(address account) {\r\n        require(account != feePool.FEE_ADDRESS(), \"Fee address not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle\r\n    {\r\n        require(msg.sender == exchangeRates.oracle(), \"Only oracle allowed\");\r\n        _;\r\n    }\r\n\r\n    // ========== EVENTS ==========\r\n    /* solium-disable */\r\n    event SynthExchange(address indexed account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey,  uint256 toAmount, address toAddress);\r\n    bytes32 constant SYNTHEXCHANGE_SIG = keccak256(\"SynthExchange(address,bytes32,uint256,bytes32,uint256,address)\");\r\n    function emitSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress) internal {\r\n        proxy._emit(abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress), 2, SYNTHEXCHANGE_SIG, bytes32(account), 0, 0);\r\n    }\r\n    /* solium-enable */\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"removeSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"synthsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"feeRateForExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimitOracle\",\"type\":\"address\"}],\"name\":\"setGasLimitOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synths\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRates\",\"type\":\"address\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"effectiveValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferableSynthetix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_givenGasPrice\",\"type\":\"uint256\"}],\"name\":\"validateGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableCurrencyKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"remainingIssuableSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"totalIssuedSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"synth\",\"type\":\"address\"}],\"name\":\"addSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeEnabled\",\"type\":\"bool\"}],\"name\":\"setExchangeEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenState\",\"type\":\"address\"}],\"name\":\"setTokenState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"collateralisationRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"maxIssuableSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"},{\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"synthInitiatedExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueMaxSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplySchedule\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_protectionCircuitIsActivated\",\"type\":\"bool\"}],\"name\":\"setProtectionCircuit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"debtBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthetixState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSynthCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasLimitOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_tokenState\",\"type\":\"address\"},{\"name\":\"_synthetixState\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_exchangeRates\",\"type\":\"address\"},{\"name\":\"_feePool\",\"type\":\"address\"},{\"name\":\"_supplySchedule\",\"type\":\"address\"},{\"name\":\"_rewardEscrow\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromCurrencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toCurrencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"SynthExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenState\",\"type\":\"address\"}],\"name\":\"TokenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"Synthetix","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c011a72400e58ecd99ee497cf89e3775d4bd732f0000000000000000000000005b1b5fea1b99d83ad479df0c222f0492385381dd0000000000000000000000004b9ca5607f1ff8019c1c6a3c2f0cc8de622d5b82000000000000000000000000b64ff7a4a33acdf48d97dab0d764afd0f6176882000000000000000000000000565c9eb432f4ae9633e50e1213ab4f23d8f31f54000000000000000000000000a8cb0b163cefb21f22c72f6a7d243184bd688a5a000000000000000000000000a05e45396703babaa9c276b5e5a9b6e2c175b521000000000000000000000000b671f2210b1f6621a2607ea63e6b2dc3e2464d1f000000000000000000000000971e78e0c92392a4e39099835cf7e6ab535b2227000000000000000000000000ffa72fd80d8a84032d855bfb67036baf45949009000000000000000000000000000000000000000000813f3978f89409843fffea","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"None","SwarmSource":"bzzr://13db7f2ef945de98bb6e1aad7a2961ea3171379aa9c96160599d2cf65d82338f"}]}