{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Ether airdrop for members\r\n * @author Ross_Campbell and Bill_Warren of LexDAO\r\n */\r\n\r\ncontract ETHDrop {\r\n\r\n    struct Member {\r\n        bool exists;\r\n        uint memberIndex;\r\n    }\r\n\r\n    mapping(address => Member) public memberList;\r\n    address payable[] members;\r\n    uint256 public drip;\r\n    address payable private secretary;\r\n    \r\n\r\n    modifier onlySecretary() {\r\n        require(msg.sender == secretary);\r\n        _;\r\n    }\r\n\r\n   function() external payable { }\r\n\r\n    constructor(uint256 _drip, address payable[] memory _members) payable public {\r\n        drip = _drip;\r\n\r\n         for (uint256 i = 0; i < _members.length; i++) {\r\n            require(_members[i] != address(0), \"member address cannot be 0\");\r\n            memberList[_members[i]].exists = true;\r\n            memberList[_members[i]].memberIndex = members.push(_members[i]) - 1;\r\n        }\r\n\r\n        secretary = members[0];\r\n    }\r\n    \r\n\r\n    function dripETH() public onlySecretary {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drip);\r\n        }\r\n    }\r\n    \r\n\r\n    function dropETH(uint256 drop) payable public onlySecretary {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drop);\r\n        }\r\n    }\r\n    \r\n\r\n    function customDropETH(uint256[] memory drop) payable public onlySecretary {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drop[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    function addMember(address payable newMember) public onlySecretary {\r\n        require(memberList[newMember].exists != true, \"member already exists\");\r\n        memberList[newMember].exists = true;\r\n        memberList[newMember].memberIndex = members.push(newMember) - 1;\r\n    }\r\n    \r\n\r\n    function getMembership() public view returns (address payable[] memory) {\r\n        return members;\r\n    }\r\n    \r\n\r\n    function getMemberCount() public view returns(uint256 memberCount) {\r\n        return members.length;\r\n    }\r\n\r\n\r\n    function isMember(address memberAddress) public view returns (bool memberExists) {\r\n        if(members.length == 0) return false;\r\n        return (members[memberList[memberAddress].memberIndex] == memberAddress);\r\n    }\r\n\r\n\r\n    function removeMember(address _removeMember) public onlySecretary {\r\n        require(memberList[_removeMember].exists = true, \"no such member to remove\");\r\n        uint256 memberToDelete = memberList[_removeMember].memberIndex;\r\n        address payable keyToMove = members[members.length-1];\r\n        members[memberToDelete] = keyToMove;\r\n        memberList[_removeMember].exists = false;\r\n        memberList[keyToMove].memberIndex = memberToDelete;\r\n        members.length--;\r\n    }\r\n\r\n\r\n    function transferSecretary(address payable newSecretary) public onlySecretary {\r\n        secretary = newSecretary;\r\n    }\r\n    \r\n\r\n    function updateDrip(uint256 newDrip) public onlySecretary {\r\n        drip = newDrip;\r\n    }\r\n}\r\n\r\ncontract ETHDropFactory {\r\n    ETHDrop private Drop;\r\n    address[] public drops;\r\n    \r\n\r\n    event newDrop(address indexed secretary, address indexed drop);\r\n    \r\n\r\n    function newETHDrop(uint256 _drip, address payable[] memory _members) payable public {\r\n        Drop = (new ETHDrop).value(msg.value)(_drip, _members);\r\n        drops.push(address(Drop));\r\n        emit newDrop(_members[0], address(Drop));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drip\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"}],\"name\":\"customDropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"}],\"name\":\"dropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembership\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberExists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"memberIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_removeMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newSecretary\",\"type\":\"address\"}],\"name\":\"transferSecretary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDrip\",\"type\":\"uint256\"}],\"name\":\"updateDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETHDrop","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000a2ddfa736214563cea9aef5100f2e90c402918","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d8231ba1cdefd2f5f11bd481d0af6113b6f820fde36998993a8b0124ff7f2d56"}]}