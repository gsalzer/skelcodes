{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n/// @title Registry\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.2.0\ncontract Registry is Ownable {\n\n    enum FactoryStatus { Unregistered, Registered, Retired }\n\n    event FactoryAdded(address owner, address factory, uint256 factoryID, bytes extraData);\n    event FactoryRetired(address owner, address factory, uint256 factoryID);\n    event InstanceRegistered(address indexed instance, address indexed factory, address indexed creator, uint256 instanceIndex, uint256 factoryID);\n\n    address[] private _factoryList;\n    mapping(address => Factory) private _factoryData;\n\n    struct Factory {\n        FactoryStatus status;\n        uint16 factoryID;\n        bytes extraData;\n    }\n\n    bytes4 private _instanceType;\n    Instance[] private _instances;\n\n    struct Instance {\n        address instance;\n        uint16 factoryID;\n        uint80 extraData;\n    }\n\n    constructor(string memory instanceType) public {\n        _instanceType = bytes4(keccak256(bytes(instanceType)));\n    }\n\n    // factory state functions\n\n    function addFactory(\n        address factory,\n        bytes calldata extraData\n    ) external onlyOwner() {\n        // get the factory object from storage.\n        Factory storage factoryData = _factoryData[factory];\n\n        // ensure that the provided factory is new.\n        require(\n            factoryData.status == FactoryStatus.Unregistered,\n            \"factory already exists at the provided factory address\"\n        );\n\n        // get the factoryID of the new factory.\n        uint16 factoryID = uint16(_factoryList.length);\n\n        // set all of the information for the new factory.\n        factoryData.status = FactoryStatus.Registered;\n        factoryData.factoryID = factoryID;\n        factoryData.extraData = extraData;\n\n        _factoryList.push(factory);\n\n        // emit an event.\n        emit FactoryAdded(msg.sender, factory, factoryID, extraData);\n    }\n\n    function retireFactory(address factory) external onlyOwner() {\n        // get the factory object from storage.\n        Factory storage factoryData = _factoryData[factory];\n\n        // ensure that the provided factory is new and not already retired.\n        require(\n            factoryData.status == FactoryStatus.Registered,\n            \"factory is not currently registered\"\n        );\n\n        // retire the factory.\n        factoryData.status = FactoryStatus.Retired;\n\n        emit FactoryRetired(msg.sender, factory, factoryData.factoryID);\n    }\n\n    // factory view functions\n\n    function getFactoryCount() external view returns (uint256 count) {\n        return _factoryList.length;\n    }\n\n    function getFactoryStatus(address factory) external view returns (FactoryStatus status) {\n        return _factoryData[factory].status;\n    }\n\n    function getFactoryID(address factory) external view returns (uint16 factoryID) {\n        return _factoryData[factory].factoryID;\n    }\n\n    function getFactoryData(address factory) external view returns (bytes memory extraData) {\n        return _factoryData[factory].extraData;\n    }\n\n    function getFactoryAddress(uint16 factoryID) external view returns (address factory) {\n        return _factoryList[factoryID];\n    }\n\n    function getFactory(address factory) public view returns (\n        FactoryStatus status,\n        uint16 factoryID,\n        bytes memory extraData\n    ) {\n        Factory memory factoryData = _factoryData[factory];\n        return (factoryData.status, factoryData.factoryID, factoryData.extraData);\n    }\n\n    function getFactories() external view returns (address[] memory factories) {\n        return _factoryList;\n    }\n\n    // Note: startIndex is inclusive, endIndex exclusive\n    function getPaginatedFactories(uint256 startIndex, uint256 endIndex) external view returns (address[] memory factories) {\n        require(startIndex < endIndex, \"startIndex must be less than endIndex\");\n        require(endIndex <= _factoryList.length, \"end index out of range\");\n\n        // initialize fixed size memory array\n        address[] memory range = new address[](endIndex - startIndex);\n\n        // Populate array with addresses in range\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _factoryList[i];\n        }\n\n        // return array of addresses\n        return range;\n    }\n\n    // instance state functions\n\n    function register(address instance, address creator, uint80 extraData) external {\n        (\n            FactoryStatus status,\n            uint16 factoryID,\n            // bytes memory extraData\n        ) = getFactory(msg.sender);\n\n        // ensure that the caller is a registered factory\n        require(\n            status == FactoryStatus.Registered,\n            \"factory in wrong status\"\n        );\n\n        uint256 instanceIndex = _instances.length;\n        _instances.push(\n            Instance({\n                instance: instance,\n                factoryID: factoryID,\n                extraData: extraData\n            })\n        );\n\n        emit InstanceRegistered(instance, msg.sender, creator, instanceIndex, factoryID);\n    }\n\n    // instance view functions\n\n    function getInstanceType() external view returns (bytes4 instanceType) {\n        return _instanceType;\n    }\n\n    function getInstanceCount() external view returns (uint256 count) {\n        return _instances.length;\n    }\n\n    function getInstance(uint256 index) external view returns (address instance) {\n        require(index < _instances.length, \"index out of range\");\n        return _instances[index].instance;\n    }\n\n    function getInstanceData(uint256 index) external view returns (\n        address instanceAddress,\n        uint16 factoryID,\n        uint80 extraData\n    ) {\n\n        require(index < _instances.length, \"index out of range\");\n\n        Instance memory instance = _instances[index];\n        return (instance.instance, instance.factoryID, instance.extraData);\n    }\n\n    function getInstances() external view returns (address[] memory instances) {\n        uint256 length = _instances.length;\n        address[] memory addresses = new address[](length);\n\n        // Populate array with addresses in range\n        for (uint256 i = 0; i < length; i++) {\n            addresses[i] = _instances[i].instance;\n        }\n        return addresses;\n    }\n\n    // Note: startIndex is inclusive, endIndex exclusive\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances) {\n        require(startIndex < endIndex, \"startIndex must be less than endIndex\");\n        require(endIndex <= _instances.length, \"end index out of range\");\n\n        // initialize fixed size memory array\n        address[] memory range = new address[](endIndex - startIndex);\n\n        // Populate array with addresses in range\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _instances[i].instance;\n        }\n\n        // return array of addresses\n        return range;\n    }\n}\n\n\n\n/// @title Erasure_Escrows\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.2.0\ncontract Erasure_Escrows is Registry {\n\n    constructor() public Registry('Escrow') {\n\n    }\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factoryID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factoryID\",\"type\":\"uint256\"}],\"name\":\"FactoryRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instanceIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factoryID\",\"type\":\"uint256\"}],\"name\":\"InstanceRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"factories\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"enum Registry.FactoryStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"factoryID\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factoryID\",\"type\":\"uint16\"}],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getFactoryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getFactoryID\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"factoryID\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getFactoryStatus\",\"outputs\":[{\"internalType\":\"enum Registry.FactoryStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInstanceData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instanceAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"factoryID\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"extraData\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstanceType\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"instanceType\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"factories\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"extraData\",\"type\":\"uint80\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"retireFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Erasure_Escrows","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://0e4a809c76472592e641223a906f419874a873ef2b43520259bb3fc64c85b01e"}]}