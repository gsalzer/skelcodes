{"status":"1","message":"OK","result":[{"SourceCode":"{\"MyAdvancedToken.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\n\\n\\nimport \\\"./owned.sol\\\";\\nimport \\\"./TokenERC20.sol\\\";\\n\\n/******************************************/\\n/*       ADVANCED TOKEN STARTS HERE       */\\n/******************************************/\\n\\ncontract MyAdvancedToken is owned, TokenERC20 {\\n\\n    uint256 public sellPrice;\\n    uint256 public buyPrice;\\n\\n    mapping (address =\\u003e bool) public frozenAccount;\\n\\n    /* This generates a public event on the blockchain that will notify clients */\\n    event FrozenFunds(address target, bool frozen);\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    constructor (\\n        uint256 initialSupply,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) payable public {}\\n\\n    /* Internal transfer, only can be called by this contract */\\n    function _transfer(address _from, address _to, uint _value) internal {\\n        require (_to != address(0x0));                               // Prevent transfer to 0x0 address. Use burn() instead\\n        require (balanceOf[_from] \\u003e= _value);               // Check if the sender has enough\\n        require (balanceOf[_to] + _value \\u003e balanceOf[_to]); // Check for overflows\\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\\n        balanceOf[_from] -= _value;                         // Subtract from the sender\\n        balanceOf[_to] += _value;                           // Add the same to the recipient\\n        emit Transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Create `mintedAmount` tokens and send it to `target`\\n    /// @param target Address to receive the tokens\\n    /// @param mintedAmount the amount of tokens it will receive\\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\\n        balanceOf[target] += mintedAmount;\\n        totalSupply += mintedAmount;\\n        emit Transfer(address(0), address(this), mintedAmount);\\n        emit Transfer(address(this), target, mintedAmount);\\n    }\\n\\n    /// @notice `freeze? Prevent | Allow` `target` from sending \\u0026 receiving tokens\\n    /// @param target Address to be frozen\\n    /// @param freeze either to freeze it or not\\n    function freezeAccount(address target, bool freeze) onlyOwner public {\\n        frozenAccount[target] = freeze;\\n        emit FrozenFunds(target, freeze);\\n    }\\n\\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\\n    /// @param newSellPrice Price the users can sell to the contract\\n    /// @param newBuyPrice Price users can buy from the contract\\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\\n        sellPrice = newSellPrice;\\n        buyPrice = newBuyPrice;\\n    }\\n\\n    /// @notice Buy tokens from contract by sending ether\\n    function buy() payable public {\\n        uint amount = msg.value / buyPrice;               // calculates the amount\\n        _transfer(address(this), msg.sender, amount);              // makes the transfers\\n    }\\n\\n    /// @notice Sell `amount` tokens to contract\\n    /// @param amount amount of tokens to be sold\\n    function sell(uint256 amount) public {\\n        require(address(this).balance \\u003e= amount * sellPrice);      // checks if the contract has enough ether to buy\\n        _transfer(msg.sender, address(this), amount);              // makes the transfers\\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It\\u0027s important to do this last to avoid recursion attacks\\n    }\\n}\\n\"},\"owned.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\n\\ncontract owned {\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) onlyOwner public {\\n        owner = newOwner;\\n    }\\n}\"},\"TokenERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\n\\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata_extraData) external; }\\n\\ncontract TokenERC20 {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals = 18;  // decimals 可以有的小数点个数，最小的代币单位。18 是建议的默认值\\n    uint256 public totalSupply;\\n\\n    // 用mapping保存每个地址对应的余额\\n    mapping (address =\\u003e uint256) public balanceOf;\\n    // 存储对账号的控制\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance;\\n\\n    // 事件，用来通知客户端交易发生\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // 事件，用来通知客户端代币被消费\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * 初始化构造\\n     */\\n    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // 供应的份额，份额跟最小的代币单位有关，份额 = 币数 * 10 ** decimals。\\n        balanceOf[msg.sender] = totalSupply;                // 创建者拥有所有的代币\\n        name = tokenName;                                   // 代币名称\\n        symbol = tokenSymbol;                               // 代币符号\\n    }\\n\\n    /**\\n     * 代币交易转移的内部实现\\n     */\\n    function _transfer(address _from, address _to, uint _value) internal {\\n        // 确保目标地址不为0x0，因为0x0地址代表销毁\\n        require(_to != address(0x0));\\n        // 检查发送者余额\\n        require(balanceOf[_from] \\u003e= _value);\\n        // 确保转移为正数个\\n        require(balanceOf[_to] + _value \\u003e balanceOf[_to]);\\n\\n        // 以下用来检查交易，\\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\\n        // Subtract from the sender\\n        balanceOf[_from] -= _value;\\n        // Add the same to the recipient\\n        balanceOf[_to] += _value;\\n        emit Transfer(_from, _to, _value);\\n\\n        // 用assert来检查代码逻辑。\\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\n    }\\n\\n    /**\\n     *  代币交易转移\\n     * 从创建交易者账号发送`_value`个代币到 `_to`账号\\n     *\\n     * @param _to 接收者地址\\n     * @param _value 转移数额\\n     */\\n    function transfer(address _to, uint256 _value) public {\\n        _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /**\\n     * 账号之间代币交易转移\\n     * @param _from 发送者地址\\n     * @param _to 接收者地址\\n     * @param _value 转移数额\\n     */\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= allowance[_from][msg.sender]);     // Check allowance\\n        allowance[_from][msg.sender] -= _value;\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * 设置某个地址（合约）可以交易者名义花费的代币数。\\n     *\\n     * 允许发送者`_spender` 花费不多于 `_value` 个代币\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(address _spender, uint256 _value) public\\n        returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        return true;\\n    }\\n\\n    /**\\n     * 设置允许一个地址（合约）以交易者名义可最多花费的代币数。\\n     *\\n     * @param _spender 被授权的地址（合约）\\n     * @param _value 最大可花费代币数\\n     * @param _extraData 发送给合约的附加数据\\n     */\\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\\n        public\\n        returns (bool success) {\\n        tokenRecipient spender = tokenRecipient(_spender);\\n        if (approve(_spender, _value)) {\\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * 销毁创建者账户中指定个代币\\n     */\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);   // Check if the sender has enough\\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\\n        totalSupply -= _value;                      // Updates totalSupply\\n        emit Burn(msg.sender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * 销毁用户账户中指定个代币\\n     *\\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\n     *\\n     * @param _from the address of the sender\\n     * @param _value the amount of money to burn\\n     */\\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\\n        require(balanceOf[_from] \\u003e= _value);                // Check if the targeted balance is enough\\n        require(_value \\u003c= allowance[_from][msg.sender]);    // Check allowance\\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender\\u0027s allowance\\n        totalSupply -= _value;                              // Update totalSupply\\n        emit Burn(_from, _value);\\n        return true;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000164573706f7274732047616d626c696e672d436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000034547430000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://e27f515f15e8c5d7e09ffcde67181b1ba6a49755dc9c65cd6c0b3b437a3e1575"}]}