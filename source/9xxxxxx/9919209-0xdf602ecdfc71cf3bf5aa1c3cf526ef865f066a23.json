{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\ninterface IToken { // brief ERC-20 interface\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract MemberDripDrop {\r\n    /***************\r\n    INTERNAL DETAILS\r\n    ***************/\r\n    uint256 public ethDrip;\r\n    uint256 public tokenDrip;\r\n    IToken public dripToken;\r\n    address payable[] members;\r\n    address payable public secretary;\r\n    \r\n    mapping(address => Member) public memberList;\r\n    \r\n    struct Member {\r\n        uint256 memberIndex;\r\n        bool exists;\r\n    }\r\n\r\n    modifier onlySecretary() {\r\n        require(msg.sender == secretary, \"caller must be secretary\");\r\n        _;\r\n    }\r\n    \r\n    // ******\r\n    // EVENTS\r\n    // ******\r\n    event DripTokenUpdated(address indexed updatedDripToken);\r\n    event TokenDripUpdated(uint256 indexed updatedTokenDrip);\r\n    event ETHDripUpdated(uint256 indexed updatedETHDrip);\r\n    event MemberAdded(address indexed addedMember);\r\n    event MemberRemoved(address indexed removedMember);\r\n    event SecretaryUpdated(address indexed updatedSecretary);\r\n    \r\n    function() external payable { } // contract receives ETH\r\n\r\n    constructor(\r\n        uint256 _ethDrip, \r\n        uint256 _tokenDrip,  \r\n        address dripTokenAddress, \r\n        address payable[] memory _members) payable public { // initializes contract\r\n        for (uint256 i = 0; i < _members.length; i++) {\r\n            require(_members[i] != address(0), \"member address cannot be 0\");\r\n            memberList[_members[i]].memberIndex = members.push(_members[i]) - 1;\r\n            memberList[_members[i]].exists = true;\r\n        }\r\n        \r\n        ethDrip = _ethDrip;\r\n        tokenDrip = _tokenDrip;\r\n        dripToken = IToken(dripTokenAddress);\r\n        secretary = members[0]; // first address in member array is secretary  \r\n    }\r\n    \r\n    /************************\r\n    DRIP/DROP TOKEN FUNCTIONS\r\n    ************************/\r\n    function dripTKN() public onlySecretary { // transfer token to members per stored drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            dripToken.transfer(members[i], tokenDrip);\r\n        }\r\n    }\r\n    \r\n    function dropTKN(uint256 drop, address dropTokenAddress) public onlySecretary { // transfer token to members per approved drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop);\r\n        }\r\n    }\r\n    \r\n    function customDropTKN(uint256[] memory drop, address dropTokenAddress) payable public onlySecretary { // transfer token to members per approved index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop[i]);\r\n        }\r\n    }\r\n    \r\n    /**********************\r\n    DRIP/DROP ETH FUNCTIONS\r\n    **********************/\r\n    function dripETH() public onlySecretary { // transfer ETH to members per stored drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(ethDrip);\r\n        }\r\n    }\r\n\r\n    function dropETH() payable public onlySecretary { // transfer ETH to members per attached drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(msg.value);\r\n        }\r\n    }\r\n    \r\n    function customDropETH(uint256[] memory drop) payable public onlySecretary { // transfer ETH to members per index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drop[i]);\r\n        }\r\n    }\r\n    \r\n    /******************\r\n    SECRETARY FUNCTIONS\r\n    ******************/\r\n    // ******************\r\n    // DRIP/DROP REGISTRY\r\n    // ******************\r\n    function addMember(address payable addedMember) public onlySecretary { \r\n        require(memberList[addedMember].exists != true, \"member already exists\");\r\n        memberList[addedMember].memberIndex = members.push(addedMember) - 1;\r\n        memberList[addedMember].exists = true;\r\n        emit MemberAdded(addedMember);\r\n    }\r\n\r\n    function removeMember(address removedMember) public onlySecretary {\r\n        require(memberList[removedMember].exists = true, \"no such member to remove\");\r\n        uint256 memberToDelete = memberList[removedMember].memberIndex;\r\n        address payable keyToMove = members[members.length-1];\r\n        members[memberToDelete] = keyToMove;\r\n        memberList[keyToMove].memberIndex = memberToDelete;\r\n        memberList[removedMember].exists = false;\r\n        members.length--;\r\n        emit MemberRemoved(removedMember);\r\n    }\r\n\r\n    function updateSecretary(address payable updatedSecretary) public onlySecretary {\r\n        secretary = updatedSecretary;\r\n        emit SecretaryUpdated(updatedSecretary);\r\n    }\r\n    \r\n    // ************\r\n    // DRIP DETAILS\r\n    // ************\r\n    function updateETHDrip(uint256 updatedETHDrip) public onlySecretary {\r\n        ethDrip = updatedETHDrip;\r\n        emit ETHDripUpdated(updatedETHDrip);\r\n    }\r\n    \r\n    function updateDripToken(address updatedDripToken) public onlySecretary {\r\n        dripToken = IToken(updatedDripToken);\r\n        emit DripTokenUpdated(updatedDripToken);\r\n    }\r\n    \r\n    function updateTokenDrip(uint256 updatedTokenDrip) public onlySecretary {\r\n        tokenDrip = updatedTokenDrip;\r\n        emit TokenDripUpdated(updatedTokenDrip);\r\n    }\r\n    \r\n    /***************\r\n    GETTER FUNCTIONS\r\n    ***************/\r\n    // ****\r\n    // DRIP\r\n    // ****\r\n    function TokenBalance() public view returns (uint256) { // get balance of drip token in contract\r\n        return dripToken.balanceOf(address(this));\r\n    }\r\n    \r\n    function ETHBalance() public view returns (uint256) { // get balance of ETH in contract\r\n        return address(this).balance;\r\n    }\r\n\r\n    // ******\r\n    // MEMBER\r\n    // ******\r\n    function Membership() public view returns (address payable[] memory) {\r\n        return members;\r\n    }\r\n\r\n    function MemberCount() public view returns(uint256 memberCount) {\r\n        return members.length;\r\n    }\r\n\r\n    function isMember(address memberAddress) public view returns (bool memberExists) {\r\n        if(members.length == 0) return false;\r\n        return (members[memberList[memberAddress].memberIndex] == memberAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDrip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dripTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"DripTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedETHDrip\",\"type\":\"uint256\"}],\"name\":\"ETHDripUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedSecretary\",\"type\":\"address\"}],\"name\":\"SecretaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"TokenDripUpdated\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Membership\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"}],\"name\":\"customDropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"customDropTKN\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dropETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"dropTKN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberExists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"updateDripToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedETHDrip\",\"type\":\"uint256\"}],\"name\":\"updateETHDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"updatedSecretary\",\"type\":\"address\"}],\"name\":\"updateSecretary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"updateTokenDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MemberDripDrop","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a20000000000000000000000000cc4dc8e92a6e30b6f5f6e65156b121d9f83ca18f000000000000000000000000f290f3d843826d00f8176182fd76550535f6dbb4000000000000000000000000756ce9c56b02f05b5faffafc707b552bedce83ee000000000000000000000000c2d6416f5be67aacbcd516580b36d06884e3a2e10000000000000000000000001bc9e52baa93dab1a47c3168f6d82ed08856ec83000000000000000000000000423afc4406d10c726d5d664d2997571e69d1875f000000000000000000000000625236038836cecc532664915bd0399647e7826b000000000000000000000000ec9c4bc462803f3d4d1ecbe5a7a618ab47defa0200000000000000000000000036306c060497b8df0b34485181c012b7acae77b1000000000000000000000000f8c75eba4b580059168e5319f225e94c490d1ac90000000000000000000000008ff008398413979264291650bf663ef5e5fb7364000000000000000000000000d5b3988ed0ab5ec375e51bb6fd10e205cec16a2e000000000000000000000000b98ec0012fba5de02ab506782862a63a7945ee9c0000000000000000000000005e5a1fe17a444e1c3ccced2684019be51294ad1b000000000000000000000000a21fbca7e840c1a5e61b9c6f171a0d084b39081d000000000000000000000000130093a5aebc07e78e16f0ecef09d1c45afd8178000000000000000000000000e84c9e202dc18e1107c8d096c4a2763265b9a07f000000000000000000000000b7f49e02552751b249cae86959fd50d887708b1d000000000000000000000000262b4f07e42bbc33f597fcf0d854e9dafaf3d469000000000000000000000000a5f4fde5aa9febeb566ad57d08f1169ae54ad5e0000000000000000000000000a3564677fc4907a15c9a7eae1dbc1ae9ac57b8e10000000000000000000000007136fbddd4dffa2369a9283b6e90a040318011ca000000000000000000000000bc69d78d8a001d8cb220cf931b23e55f9862865c0000000000000000000000004744cda32be7b3e75b9334001da9ed21789d4c0d0000000000000000000000007285502ed0a0ed25f65941e480bda7114492acf9000000000000000000000000132249c234a1b01c52e4a32ee5c73b4b6c4c0015","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://1511f5854f2451f3d4a5699587cd0c57229f1c8b6c9621158d2204b388aaaaa2"}]}