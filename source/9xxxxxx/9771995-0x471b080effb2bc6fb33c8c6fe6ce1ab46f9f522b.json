{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract HashTimeLock {\r\n\r\n    mapping(bytes32 => LockContract) public contracts;\r\n\r\n    //                   / - WITHDRAWN\r\n    // INVALID - ACTIVE |\r\n    //                   \\ - EXPIRED - REFUNDED\r\n\r\n    uint256 public constant INVALID = 0; // Uninitialized  swap -> can go to ACTIVE\r\n    uint256 public constant ACTIVE = 1; // Active swap -> can go to WITHDRAWN or EXPIRED\r\n    uint256 public constant REFUNDED = 2; // Swap is refunded -> final state.\r\n    uint256 public constant WITHDRAWN = 3; // Swap is withdrawn -> final state.\r\n    uint256 public constant EXPIRED = 4; // Swap is expired -> can go to REFUNDED\r\n\r\n    struct LockContract {\r\n        uint256 inputAmount;\r\n        uint256 outputAmount;\r\n        uint256 expiration;\r\n        uint256 status;\r\n        bytes32 hashLock;\r\n        address payable sender;\r\n        address payable receiver;\r\n        string outputNetwork;\r\n        string outputAddress;\r\n    }\r\n\r\n    event Withdraw(\r\n        bytes32 indexed id,\r\n        bytes32 secret,\r\n        bytes32 hashLock,\r\n        address indexed sender,\r\n        address indexed receiver\r\n    );\r\n\r\n    event Refund(\r\n        bytes32 indexed id,\r\n        bytes32 hashLock,\r\n        address indexed sender,\r\n        address indexed receiver\r\n    );\r\n\r\n    event NewContract(\r\n        uint256 inputAmount,\r\n        uint256 outputAmount,\r\n        uint256 expiration,\r\n        bytes32 indexed id,\r\n        bytes32 hashLock,\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        string outputNetwork,\r\n        string outputAddress\r\n    );\r\n\r\n    function newContract(\r\n        uint256 outputAmount,\r\n        uint256 expiration,\r\n        bytes32 hashLock,\r\n        address payable receiver,\r\n        string calldata outputNetwork,\r\n        string calldata outputAddress\r\n    ) external payable {\r\n        address payable sender = msg.sender;\r\n        uint256 inputAmount = msg.value;\r\n\r\n        require(expiration > block.timestamp, 'INVALID_TIME');\r\n\r\n        require(inputAmount > 0, 'INVALID_AMOUNT');\r\n\r\n        bytes32 id = sha256(\r\n            abi.encodePacked(sender, receiver, inputAmount, hashLock, expiration)\r\n        );\r\n\r\n        require(contracts[id].status == INVALID, \"SWAP_EXISTS\");\r\n\r\n        contracts[id] = LockContract(\r\n            inputAmount,\r\n            outputAmount,\r\n            expiration,\r\n            ACTIVE,\r\n            hashLock,\r\n            sender,\r\n            receiver,\r\n            outputNetwork,\r\n            outputAddress\r\n        );\r\n\r\n        emit NewContract(\r\n            inputAmount,\r\n            outputAmount,\r\n            expiration,\r\n            id,\r\n            hashLock,\r\n            sender,\r\n            receiver,\r\n            outputNetwork,\r\n            outputAddress\r\n        );\r\n    }\r\n\r\n    function withdraw(bytes32 id, bytes32 secret) external {\r\n        LockContract storage c = contracts[id];\r\n\r\n        require(c.status == ACTIVE, \"SWAP_NOT_ACTIVE\");\r\n\r\n        require(c.expiration > block.timestamp, \"INVALID_TIME\");\r\n\r\n        require(c.hashLock == sha256(abi.encodePacked(secret)),\"INVALID_SECRET\");\r\n\r\n        c.status = WITHDRAWN;\r\n\r\n        c.receiver.transfer(c.inputAmount);\r\n\r\n        emit Withdraw(id, secret, c.hashLock, c.sender, c.receiver);\r\n    }\r\n\r\n    function refund(bytes32 id) external {\r\n        LockContract storage c = contracts[id];\r\n\r\n        require(c.status == ACTIVE, \"SWAP_NOT_ACTIVE\");\r\n\r\n        require(c.expiration <= block.timestamp, \"INVALID_TIME\");\r\n\r\n        c.status = REFUNDED;\r\n\r\n        c.sender.transfer(c.inputAmount);\r\n\r\n        emit Refund(id, c.hashLock, c.sender, c.receiver);\r\n    }\r\n\r\n    function getStatus(bytes32[] memory ids) public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](ids.length);\r\n\r\n        for (uint256 index = 0; index < ids.length; index++) {\r\n            result[index] = getSingleStatus(ids[index]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getSingleStatus(bytes32 id) public view returns (uint256 result) {\r\n        LockContract memory tempContract = contracts[id];\r\n\r\n        if (\r\n            tempContract.status == ACTIVE &&\r\n            tempContract.expiration < block.timestamp\r\n        ) {\r\n            result = EXPIRED;\r\n        } else {\r\n            result = tempContract.status;\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"name\":\"NewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACTIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXPIRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVALID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFUNDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSingleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"outputNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputAddress\",\"type\":\"string\"}],\"name\":\"newContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HashTimeLock","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a86d30a8cc0b92853468189a4db0ebf3be78c3fb35466edc38e8a39dd268dee9"}]}