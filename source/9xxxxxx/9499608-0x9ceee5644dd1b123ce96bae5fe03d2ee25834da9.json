{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Contract for CertificateBase\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract CertificateBase {\r\n    \r\n    // Address used by off-chain controller service to sign certificate\r\n    mapping(address => bool) internal _certificateSigners;\r\n    mapping(address => uint256) internal _checkCount;\r\n    \r\n    event Checked(address sender);\r\n    \r\n    /**\r\n    * @dev Set signer authorization for operator.\r\n    * @param operator Address to add/remove as a certificate signer.\r\n    * @param authorized 'true' if operator shall be accepted as certificate signer, 'false' if not.\r\n    */\r\n    function _setCertificateSigner(address operator, bool authorized) internal {\r\n      require(operator != address(0), \"Action Blocked - Not a valid address\");\r\n      _certificateSigners[operator] = authorized;\r\n    }\r\n    \r\n    function _checkCertificate(bytes memory _data, bytes4 _function) internal view returns(bool) {\r\n        bytes memory sig = _extractBytes(_data, 0, 65);    // signature generated on offchain\r\n        bytes memory expHex = _extractBytes(_data, 65, 4); // expiration timestamp in Hex;\r\n        uint expUnix = _bytesToUint(expHex);               // expiration timestamp in Unix;\r\n\r\n        require(expUnix > now, 'Certificate Expired');\r\n       \r\n        bytes32 txHash = _getSignHash(_getPreSignedHash(_function, address(this), expUnix, _checkCount[msg.sender]));\r\n       \r\n        address recovered = _ecrecoverFromSig(txHash, sig);\r\n          \r\n        return _certificateSigners[recovered];\r\n    }\r\n    \r\n    function _ecrecoverFromSig(bytes32 hash, bytes memory sig) internal pure returns (address recoveredAddress) \r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        if (sig.length != 65) return address(0);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n    \r\n    function _getPreSignedHash(bytes4 _function, address _address, uint _expiration, uint _nonce) internal pure returns(bytes32) {\r\n         return keccak256(abi.encodePacked(_function, _address, _expiration, _nonce));\r\n    }\r\n    \r\n    function _getSignHash(bytes32 _hash) internal pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\r\n    }\r\n    \r\n    function _getRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n    \r\n    function getFunctionId(string calldata _function) external pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(_function));\r\n    }\r\n    \r\n    function _getStringHash(string memory _str) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_str));\r\n    }\r\n    \r\n    function _extractBytes(bytes memory _data, uint _pos, uint _length) internal pure returns(bytes memory) {\r\n        bytes memory result = new bytes(_length);\r\n        for(uint i = 0;i< _length; i++) {\r\n           result[i] = _data[_pos + i];\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function _bytesToUint(bytes memory _data) internal pure returns(uint256){\r\n        uint256 number;\r\n        for(uint i=0;i<_data.length;i++){\r\n            number = number + uint8(_data[i])*(2**(8*(_data.length-(i+1))));\r\n        }\r\n        return number;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract for CertificateController\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract CertificateController is Ownable, CertificateBase {\r\n    \r\n    /**\r\n     * @dev Modifier to protect methods with certificate control\r\n     */\r\n    modifier isValidCertificate(bytes memory data, bytes4 _function) {\r\n        require(_certificateSigners[msg.sender] || _checkCertificate(data, _function), \"Transfer Blocked - Sender lockup period not ended\");\r\n\r\n        _checkCount[msg.sender] += 1; // Increment sender check count\r\n\r\n        emit Checked(msg.sender);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set signer authorization for operator.\r\n     * @param operator Address to add/remove as a certificate signer.\r\n     * @param authorized 'true' if operator shall be accepted as certificate signer, 'false' if not.\r\n     */\r\n    function setCertificateSigner(address operator, bool authorized) external onlyOwner {\r\n        require(operator != address(0), \"Address should not be zero\");\r\n        _setCertificateSigner(operator, authorized);\r\n    }\r\n    \r\n\r\n   /**\r\n    * @dev Get number of transations already sent to this contract by the sender\r\n    * @param sender Address whom to check the counter of.\r\n    * @return uint256 Number of transaction already sent to this contract.\r\n    */\r\n   function checkCount(address sender) external view returns (uint256) {\r\n     return _checkCount[sender];\r\n   }\r\n\r\n   /**\r\n    * @dev Get certificate signer authorization for an operator.\r\n    * @param operator Address whom to check the certificate signer authorization for.\r\n    * @return bool 'true' if operator is authorized as certificate signer, 'false' if not.\r\n    */\r\n   function certificateSigners(address operator) external view returns (bool) {\r\n     return _certificateSigners[operator];\r\n   }\r\n   \r\n   /**\r\n    * @dev Get Blockchain timestamp \r\n    */\r\n   function getBlockTime() external view returns (uint) {\r\n        return now;\r\n   }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract for HiwayController\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract HiwayController is Ownable {\r\n  \r\n  // Array of controllers.\r\n  address[] internal _controllers;\r\n\r\n  // Mapping of controller status.\r\n  mapping(address => bool) internal _isController;\r\n  \r\n  modifier onlyController() {\r\n        require(_isController[msg.sender] , \"Only Controller can execute\");\r\n        _;\r\n  }\r\n    \r\n  /**\r\n   * @dev Get the list of controllers.\r\n   * @return List of addresses of all the controllers.\r\n   */\r\n  function controllers() external view returns (address[] memory) {\r\n    return _controllers;\r\n  }\r\n  \r\n  /**\r\n   *\r\n   * @dev Set list of token controllers.\r\n   * @param operators Controller addresses.\r\n   */\r\n  function setControllers(address[] calldata operators) external onlyOwner {\r\n    _setControllers(operators);\r\n  }\r\n  \r\n  /**\r\n   * @dev Set list of token controllers.\r\n   * @param operators Controller addresses.\r\n   */\r\n  function _setControllers(address[] memory operators) internal {\r\n    for (uint i = 0; i<_controllers.length; i++){\r\n      _isController[_controllers[i]] = false;\r\n    }\r\n    for (uint j = 0; j<operators.length; j++){\r\n      _isController[operators[j]] = true;\r\n    }\r\n    _controllers = operators;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contract for HiwayTokenManagement\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract HiwayTokenManagement is Ownable {\r\n\r\n  // Array of tokens.  \r\n  address[] internal _tokens;\r\n\r\n  // Mappfing of token instance\r\n  mapping(address => IERC20) internal _tokenInstances;\r\n  // Mapping of token status.\r\n  mapping(address => bool) internal _isToken;\r\n    \r\n  /**\r\n  * @dev Get the list of tokens.\r\n  * @return List of addresses of all the tokens.\r\n  */\r\n  function tokens() external view returns (address[] memory) {\r\n    return _tokens;\r\n  }\r\n  \r\n  /**\r\n   *\r\n   * @dev Set list of operators.\r\n   * @param operators Controller addresses.\r\n   */\r\n  function setTokens(address[] calldata operators) external onlyOwner {\r\n    _setTokens(operators);\r\n  }\r\n  \r\n  /**\r\n  * @dev Set list of operators.\r\n  * @param operators addresses.\r\n  */\r\n  function _setTokens(address[] memory operators) internal {\r\n    for (uint i = 0; i<_tokens.length; i++){\r\n      _isToken[operators[i]] = false;\r\n    }\r\n    for (uint j = 0; j<operators.length; j++){\r\n      _isToken[operators[j]] = true;\r\n      _tokenInstances[operators[j]] = IERC20(operators[j]);\r\n    }\r\n    _tokens = operators;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contract for HiwayEscrowBase\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract HiwayEscrowBase is HiwayController, HiwayTokenManagement, CertificateController {\r\n    using SafeMath for uint;\r\n\r\n    address public feeAccount;\r\n    \r\n    uint8 public feeMul = 3; // escrow percent fee, default 3%\r\n    uint public jobId;       // increase job id\r\n\r\n    struct Job {\r\n        string name;\r\n        address token;\r\n        address client;\r\n        address worker;\r\n        uint amount;\r\n\r\n        uint releasedAmount;\r\n        uint refundedAmount;\r\n\r\n        uint createdTime;\r\n        uint estimatedTime;\r\n        uint finishedTime;\r\n\r\n        uint8 status;       // 0: created, 1: accepted, 2: declined,  3: closed, 4: completed\r\n        bool refundable;\r\n    }\r\n\r\n    mapping (uint => Job) public jobs;\r\n    mapping (address => uint[]) public clientJobIds;\r\n    mapping (address => uint[]) public workerJobIds;\r\n    \r\n\r\n    modifier onlyClient(uint _id) {\r\n        require(msg.sender == jobs[_id].client , \"Only Client can execute\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWorker(uint _id) {\r\n        require(msg.sender == jobs[_id].worker , \"Only Worker can execute\");\r\n        _;\r\n    }\r\n\r\n    event CreateJob(address indexed _client, uint _id);\r\n    event AcceptJob(address indexed _worker, uint _id);\r\n    event DeclineJob(address indexed _worker, uint _id);\r\n    event CloseJob(address indexed _address, uint _id);\r\n    event CompleteJob(address indexed _client, uint _id);\r\n    event DepositJob(address indexed _client, uint _id);\r\n    event RefundJob(address indexed _address, uint _id);\r\n    event ReleaseJob(address indexed _client, uint _id);\r\n    event ClaimJob(address indexed _worker, uint _id);\r\n    event WithdrawHoldAmount(address indexed _to, uint _amount);\r\n    event SetRefundable(address indexed _address, uint _id);\r\n    \r\n    /**\r\n    * @dev The HiwayEscrowBase constructor.\r\n    */\r\n    constructor(address _feeAccount, uint8 _fee) public {\r\n        feeAccount = _feeAccount;\r\n        feeMul = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Return Job Info\r\n    * @param _id uint The Job Id which will get Job Info\r\n    * @return job that represents current info;\r\n    */\r\n    function returnJobInfo(uint _id)\r\n    external view returns (\r\n        string memory, \r\n        address, \r\n        address, \r\n        uint, \r\n        uint, \r\n        uint, \r\n        uint, \r\n        uint, \r\n        uint, \r\n        uint,\r\n        address, \r\n        bool\r\n    ) {\r\n        require(_id >= 0, \"Job ID should not be greather than zero\");\r\n        Job storage job = jobs[_id];\r\n\r\n        return (\r\n            job.name, \r\n            job.client, \r\n            job.worker, \r\n            job.amount, \r\n            job.releasedAmount, \r\n            job.refundedAmount, \r\n            job.createdTime, \r\n            job.estimatedTime, \r\n            job.finishedTime, \r\n            job.status,\r\n            job.token, \r\n            job.refundable\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Return Job Ids that client created\r\n    * @param _client address The Address which will get JobIds\r\n    * @return uint[] that represents created job Ids;\r\n    */\r\n    function returnClientJobIds(address _client) external view returns (uint[] memory) {\r\n        return clientJobIds[_client];\r\n    }\r\n\r\n    /**\r\n    * @dev Return Job Ids that awarded to worker\r\n    * @param _worker address The Address which will get JobIds\r\n    * @return uint[] that represents created job Ids;\r\n    */\r\n    function returnWorkerJobIds(address _worker) external view returns (uint[] memory) {\r\n        return workerJobIds[_worker];\r\n    }\r\n\r\n    /********************** HiwayEscrowBase INTERNAL FUNCTIONS **************************/\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to create a job.\r\n    * @param _name string The name which will present job's name.\r\n    * @param _tokenAddress address that represents Token\r\n    * @param _client address The address which will present client.\r\n    * @param _worker address The address which will present worker.\r\n    * @param _amount uint initial depositAmount\r\n    * @param _estimatedTime uint The estimatedTime which will present as epochtime.\r\n    * @return jobId if the operation was successful.\r\n    */\r\n    function _create(\r\n        string memory _name, \r\n        address _tokenAddress, \r\n        address _client, \r\n        address _worker,\r\n        uint _amount,\r\n        uint _estimatedTime\r\n        ) internal returns (uint) {\r\n        jobId ++;\r\n\r\n        jobs[jobId] = Job({\r\n            token: _tokenAddress,\r\n            name : _name,\r\n            client : _client,\r\n            worker : _worker,\r\n            amount : 0,\r\n            releasedAmount : 0,\r\n            refundedAmount : 0,\r\n            createdTime: now,\r\n            estimatedTime : _estimatedTime,\r\n            finishedTime : 0,\r\n            status: 0,\r\n            refundable: true\r\n            });\r\n\r\n        clientJobIds[_client].push(jobId);\r\n        workerJobIds[_worker].push(jobId);\r\n\r\n        emit CreateJob(_client, jobId);\r\n        \r\n        if(_amount > 0) {\r\n            _deposit(jobs[jobId], jobId, _amount);\r\n        }\r\n        return jobId;\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to accept job.\r\n    * @param _job Job.\r\n    * @param _id uint The Job Id which will accept.\r\n    */\r\n    function _accept(Job storage _job, uint _id) internal {\r\n        _job.status = 1;\r\n        _job.refundable = false;\r\n        \r\n        emit AcceptJob(_job.worker, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to claim job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will claim.\r\n    * @param _amount uint\r\n    */\r\n    function _claim(Job storage _job, uint _id, uint _amount) internal{\r\n        IERC20  token = _tokenInstances[_job.token];\r\n        \r\n        require(_job.amount.sub(_job.releasedAmount) >= _amount, \"Insufficient blance\");\r\n\r\n        _job.releasedAmount = _job.releasedAmount.add(_amount);\r\n\r\n        token.transfer(_job.worker, _amount);\r\n\r\n        emit ClaimJob(_job.worker, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to release job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will release.\r\n    * @param _amount uint\r\n    */\r\n    function _release(Job storage _job, uint _id, uint _amount) internal {\r\n        IERC20  token = _tokenInstances[_job.token];\r\n        \r\n        require(_job.amount.sub(_job.releasedAmount) >= _amount, \"Insufficient blance\");\r\n\r\n        _job.releasedAmount = _job.releasedAmount.add(_amount);\r\n\r\n        token.transfer(_job.worker, _amount);\r\n        \r\n        emit ReleaseJob(_job.client, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to deposit job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will deposit.\r\n    * @param _amount uint\r\n    */\r\n    function _deposit(Job storage _job, uint _id, uint _amount) internal {\r\n        IERC20  token = _tokenInstances[_job.token];\r\n        \r\n        uint fee = (_amount * feeMul) / 100;\r\n        require(token.balanceOf(_job.client) >= (_amount + fee), \"Insufficient balance\");\r\n\r\n        _job.amount = _job.amount.add(_amount);\r\n\r\n        token.transferFrom(_job.client, address(this), _amount);\r\n        token.transferFrom(_job.client, feeAccount, fee);\r\n\r\n        emit DepositJob(_job.client, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to refund job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will refund.\r\n    * @param _refundAmount uint\r\n    * @param _address address\r\n    */\r\n    function _refund(Job storage _job, uint _id, uint _refundAmount, address _address) internal {\r\n        IERC20  token = _tokenInstances[_job.token];\r\n        require(_job.amount.sub(_job.releasedAmount) >= _refundAmount, \"Insufficient blance\");\r\n\r\n        _job.amount = _job.amount.sub(_refundAmount);\r\n        _job.refundedAmount = _job.refundedAmount.add(_refundAmount);\r\n        _job.refundable = false;\r\n        \r\n        token.transfer(_job.client, _refundAmount);\r\n            \r\n        emit RefundJob(_address, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to decline job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will decline.\r\n    */\r\n    function _decline (Job storage _job, uint _id) internal {\r\n        _job.status = 2; // declined\r\n        _job.finishedTime = now;\r\n        \r\n        emit DeclineJob(_job.worker, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to close job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will close.\r\n    */\r\n    function _close (Job storage _job, uint _id, address _address) internal {\r\n        _job.status = 3; // closed\r\n        _job.finishedTime = now;\r\n        \r\n        emit CloseJob(_address, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to complete job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will close.\r\n    */\r\n    function _complete (Job storage _job, uint _id) internal {\r\n        _job.status = 4; // complete\r\n        _job.finishedTime = now;\r\n        \r\n        emit CompleteJob(_job.client, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to set Refundable to a job.\r\n    * @param _job Job\r\n    * @param _id uint The Job Id which will set Refundable.\r\n    * @param _controller address\r\n    */\r\n    function _setRefundable(Job storage _job, uint _id, address _controller) internal {\r\n        _job.refundable = true;\r\n         \r\n        emit SetRefundable(_controller, _id);\r\n    }\r\n    \r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to set an address to send fees.\r\n    * @param _feeAccount address The address which will set.\r\n    */\r\n    function _setFeeAccount(address _feeAccount) internal {\r\n        feeAccount = _feeAccount;\r\n    }\r\n\r\n    /**\r\n    * [INTERNAL]\r\n    * @dev Function to set fee percent.\r\n    * @param _fee uint8 This fee which will set.\r\n    */\r\n    function _setFee (uint8 _fee) internal {\r\n        feeMul = _fee;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract for HiwayEscrow\r\n * Copyright 2019, Hiway Blockchain Systems (Hiway.com)\r\n */\r\ncontract HiwayEscrow is Ownable, HiwayEscrowBase\r\n{\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * @dev The HiwayEscrow constructor.\r\n    */\r\n    constructor(address _feeAccount, uint8 _fee) public \r\n    HiwayEscrowBase(_feeAccount, _fee) {\r\n        require(_feeAccount != address(0), \"Address should not be zero\");\r\n        require(_fee >= 0 && _fee < 100, \"Fee percent should be less than 100\");\r\n    }\r\n\r\n    /**\r\n    * @dev Function to create a job.\r\n    * @param _name string The name which will present job's name.\r\n    * @param _tokenAddress address that represents Token\r\n    * @param _worker address The address which will present worker.\r\n    * @param _estimatedTime uint The estimatedTime which will present as epochtime.\r\n    * @param _data bytes memory\r\n    * @return jobId if the operation was successful.\r\n    */\r\n    function create(\r\n        string memory _name, \r\n        address _tokenAddress, \r\n        address _worker, \r\n        uint _amount,\r\n        uint _estimatedTime, \r\n        bytes memory _data ) public \r\n        isValidCertificate(_data, 0x8803719f) returns (uint) {\r\n        address client = msg.sender;\r\n        \r\n        require(_tokenAddress != address(0), \"Address should not be zero\");\r\n        require(_isToken[_tokenAddress], \"Token should be registered\");\r\n        require(_worker != address(0), \"Address should not be zero\");\r\n        require(client != address(0), \"Address should not be zero\");\r\n        require(_amount >= 0, \"Amount should be greater than zero\");\r\n        require(_estimatedTime >=0, \"EstimatedTime should be equals greater than zero\");\r\n        \r\n        return _create(_name, _tokenAddress, client, _worker, _amount, _estimatedTime);\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to accept job.\r\n    * @param _id uint The Job Id which will accept.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function accept(uint _id, bytes memory _data) public onlyWorker(_id) \r\n    isValidCertificate(_data, 0xc931b330) returns (bool) {\r\n        Job storage job = jobs[_id];\r\n        \r\n        require(job.status == 0, \"Only available during employer does not accept job\");\r\n\r\n        _accept(job, _id);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to decline job.\r\n    * @param _id uint The Job Id which will close.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function decline(uint _id, bytes memory _data) public onlyWorker(_id) \r\n    isValidCertificate(_data, 0x9385e3ac) returns (bool) {\r\n        address worker = msg.sender;\r\n        require(worker != address(0), \"Address should not be zero\");\r\n        Job storage job = jobs[_id];\r\n        \r\n        require(job.status == 1, \"Only available during employer did accept job\");\r\n\r\n        _decline(job, _id);\r\n        _refund(job, _id, job.amount, worker);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to close job.\r\n    * @param _id uint The Job Id which will close.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function close(uint _id, bytes memory _data) public onlyClient(_id) \r\n    isValidCertificate(_data, 0x0d7dad84) returns (bool) {\r\n        address client = msg.sender;\r\n        require(client != address(0), \"Address should not be zero\");\r\n        Job storage job = jobs[_id];\r\n\r\n        require(job.status == 0, \"Only available during woker does not accept job\");\r\n\r\n        _close(job, _id, client);\r\n        _refund(job, _id, job.amount, client);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to complete job.\r\n    * @param _id uint The Job Id which will complete.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function complete(uint _id, bytes memory _data) public onlyClient(_id) \r\n    isValidCertificate(_data, 0x7da64a23) returns (bool) {\r\n        address client = msg.sender;\r\n        require(client != address(0), \"Address should not be zero\");\r\n        Job storage job = jobs[_id];\r\n        \r\n        require(job.status != 3 || job.status != 4, \"Available once unclosed or uncompleted\");\r\n\r\n        _complete(job, _id);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to deposit amount of tokens.\r\n    * @param _id uint The Job Id which will deposit to.\r\n    * @param _amount uint The Amount which will deposit.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function deposit(uint _id, uint _amount, bytes memory _data) public onlyClient(_id) \r\n    isValidCertificate(_data, 0x48c73f68) returns (bool) {\r\n        address client = msg.sender;\r\n        require(client != address(0), \"Address should not be zero\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(feeAccount != address(0), \"Address should not be zero\");\r\n        \r\n        Job storage job = jobs[_id];\r\n        \r\n        _deposit(job, _id, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to refund amount of tokens.\r\n    * @param _id uint The Job Id which will refund from.\r\n    * @param _amount uint The Amount which will refund.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function refund(uint _id, uint _amount, bytes memory _data) public onlyClient(_id) \r\n    isValidCertificate(_data, 0x4fd96796) returns (bool) {\r\n        address client = msg.sender;\r\n        require(client != address(0), \"Address should not be zero\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n\r\n        Job storage job = jobs[_id];\r\n\r\n        require(job.status != 3 || job.status != 4, \"Available once unclosed or uncompleted\");\r\n        require(job.refundable == true);\r\n        \r\n        _refund(job, _id, _amount, client);\r\n         \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to refund job by worker.\r\n    * @param _id uint The Job Id which will close.\r\n    * @param _amount uint The Amount which will refund.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function refundByWorker(uint _id, uint _amount, bytes memory _data) public onlyWorker(_id) \r\n    isValidCertificate(_data, 0xf862ee7d) returns (bool) {\r\n        address worker = msg.sender;\r\n        require(worker != address(0), \"Address should not be zero\");\r\n        Job storage job = jobs[_id];\r\n \r\n        require(job.status == 1, \"Only available during woker accept job\");\r\n\r\n        _refund(job, _id, _amount, worker);\r\n       \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to release amount of tokens.\r\n    * @param _id uint The Job Id which will release from.\r\n    * @param _amount uint The Amount which will release.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function release(uint _id, uint _amount, bytes memory _data) public onlyClient(_id) \r\n    isValidCertificate(_data, 0x585a6dc6) returns (bool) {\r\n        address client = msg.sender;\r\n        require(client != address(0), \"Address should not be zero\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n\r\n        Job storage job = jobs[_id];\r\n        \r\n        require(job.status != 3 || job.status != 4, \"Available once unclosed or uncompleted\");\r\n        \r\n        _release(job, _id, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim amount of tokens.\r\n    * @param _id uint The Job Id which will claim from.\r\n    * @param _amount uint The Amount which will claim.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function claim(uint _id, uint _amount, bytes memory _data) public onlyWorker(_id) \r\n    isValidCertificate(_data, 0xb8b75836) returns (bool) {\r\n        address worker = msg.sender;\r\n        require(worker != address(0), \"Address should not be zero\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n\r\n        Job storage job = jobs[_id];\r\n        \r\n        require(job.status == 4, \"Available once completed\");\r\n        \r\n        _claim(job, _id, _amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to set Refundable to a job.\r\n    * @param _id uint The Job Id which will set Refundable.\r\n    * @param _data bytes memory\r\n    * @return True if the operation was successful.\r\n    */\r\n    function setRefundable(uint _id, bytes memory _data) public onlyController \r\n    isValidCertificate(_data, 0x7d0613f0) returns (bool) {\r\n        address contoller = msg.sender;\r\n        require(contoller != address(0), \"Address should not be zero\");\r\n\r\n        Job storage job = jobs[_id];\r\n\r\n        require(job.refundable == false);\r\n        \r\n        _setRefundable(job, _id, contoller);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set an address to send fees.\r\n    * @param _feeAccount address The address which will set.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function setFeeAccount(address _feeAccount) public onlyOwner  returns (bool) {\r\n        require(_feeAccount != address(0), \"Address should not be zero\");\r\n        \r\n        _setFeeAccount(_feeAccount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set fee percent.\r\n    * @param _fee uint8 This fee which will set.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function setFee (uint8 _fee) public onlyOwner returns (bool) {\r\n        require(_fee >= 0 && _fee < 100, \"Fee percent should be less than 100\");\r\n        \r\n        _setFee(_fee);\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"returnWorkerJobIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"complete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobs\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"worker\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"name\":\"createdTime\",\"type\":\"uint256\"},{\"name\":\"estimatedTime\",\"type\":\"uint256\"},{\"name\":\"finishedTime\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"refundable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_worker\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_estimatedTime\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decline\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"returnJobInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"close\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"workerJobIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"certificateSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setCertificateSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setRefundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clientJobIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"returnClientJobIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jobId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_function\",\"type\":\"string\"}],\"name\":\"getFunctionId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"refundByWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"setControllers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"accept\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeAccount\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CreateJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AcceptJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DeclineJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CloseJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CompleteJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DepositJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"RefundJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ReleaseJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ClaimJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawHoldAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"SetRefundable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Checked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HiwayEscrow","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0fe7749efef7372876cf6487691163e333d69860000000000000000000000000000000000000000000000000000000000000003","Library":"","LicenseType":"None","SwarmSource":"bzzr://85ea3fe8deae9c8c684ed5b0472f1cfba2c4f787042cba4162821321e0a5247d"}]}