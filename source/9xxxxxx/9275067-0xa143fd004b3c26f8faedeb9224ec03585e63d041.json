{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n *\r\n * In order to transfer ownership, a recipient must be specified, at which point\r\n * the specified recipient can call `acceptOwnership` and take ownership.\r\n */\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n/**\r\n * @title DharmaSpreadRegistry (prototype, staging)\r\n * @author 0age\r\n * @notice The Dharma Spread Registry is an owned contract that holds the spread\r\n * over Compound cTokens that is applied to the interest earned by a respective\r\n * Dharma dToken.\r\n */\r\ncontract DharmaSpreadRegistryPrototypeStaging is TwoStepOwnable {\r\n  uint256 internal _daiSpreadPerBlock;\r\n  uint256 internal _usdcSpreadPerBlock;\r\n\r\n  /**\r\n   * @notice Set a new spread per block to be applied on top of the cDai supply\r\n   * rate.\r\n   * @param spreadPerBlock uint256 The new Dai spread.\r\n   */\r\n  function setDaiSpreadPerBlock(uint256 spreadPerBlock) external onlyOwner {\r\n    _daiSpreadPerBlock = spreadPerBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Set a new spread per block to be applied on top of the cUSDC supply\r\n   * rate.\r\n   * @param spreadPerBlock uint256 The new USDC spread.\r\n   */\r\n  function setUSDCSpreadPerBlock(uint256 spreadPerBlock) external onlyOwner {\r\n    _usdcSpreadPerBlock = spreadPerBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current spread per block to be applied on top of the cDai\r\n   * supply rate.\r\n   * @return daiSpreadPerBlock uint256 The current Dai spread per block.\r\n   */\r\n  function getDaiSpreadPerBlock() external view returns (uint256 daiSpreadPerBlock) {\r\n    daiSpreadPerBlock = _daiSpreadPerBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current spread per block to be applied on top of the cUSDC\r\n   * supply rate.\r\n   * @return usdcSpreadPerBlock uint256 The current USDC spread per block.\r\n   */\r\n  function getUSDCSpreadPerBlock() external view returns (uint256 usdcSpreadPerBlock) {\r\n    usdcSpreadPerBlock = _usdcSpreadPerBlock;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaiSpreadPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiSpreadPerBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spreadPerBlock\",\"type\":\"uint256\"}],\"name\":\"setUSDCSpreadPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spreadPerBlock\",\"type\":\"uint256\"}],\"name\":\"setDaiSpreadPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUSDCSpreadPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcSpreadPerBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DharmaSpreadRegistryPrototypeStaging","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fac606f689e857dbb9b02ea13af2e6a4def466ef71aa6676637b72d8dc0e8f82"}]}