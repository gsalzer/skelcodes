{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  The interface for the molecule vault\n  */\ninterface IMoleculeVault {\n\n    /**\n      * @notice Allows an admin to add another admin.\n      * @param  _moleculeAdmin: The address of the new admin.\n      */\n    function addAdmin(address _moleculeAdmin) external;\n    \n    /**\n      * @notice Allows an admin to transfer colalteral out of the molecule\n      *         vault and into another address.\n      * @param  _to: The address that the collateral will be transfered to.\n      * @param  _amount: The amount of collateral being transfered.\n      */\n    function transfer(address _to, uint256 _amount) external;\n\n    /**\n      * @notice Allows an admin to approve a spender of the molecule vault\n      *         collateral.\n      * @param  _spender: The address that will be aproved as a spender.\n      * @param  _amount: The amount the spender will be approved to spend.\n      */\n    function approve(address _spender, uint256 _amount) external;\n\n    /**\n      * @notice Allows the admin to update the fee rate charged by the\n      *         molecule vault.\n      * @param  _newFeeRate : The new fee rate.\n      * @return bool: If the update was successful\n      */\n    function updateFeeRate(uint256 _newFeeRate) external returns(bool);\n\n    /**\n      * @return address: The address of the collateral token.\n      */\n    function collateralToken() external view returns(address);\n\n    /**\n      * @return uint256 : The fee rate the molecule vault has.\n      */\n    function feeRate() external view returns(uint256);\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n\n/**\n  * @title  ModifiedWhitelistAdminRole\n  * @dev    WhitelistAdmins are responsible for assigning and removing \n  *         Whitelisted accounts.\n  */\ncontract ModifiedWhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n    // this is a uint8 rather than a 256 for storage. \n    uint8 internal noOfAdmins_;\n    // Initial admin address \n    address internal initialAdmin_;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n        initialAdmin_ = msg.sender;\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(\n            isWhitelistAdmin(msg.sender), \n            \"ModifiedWhitelistAdminRole: caller does not have the WhitelistAdmin role\"\n        );\n        _;\n    }\n\n    /**\n      * @dev    This allows for the initial admin added to have additional admin\n      *         rights, such as removing another admin. \n      */\n    modifier onlyInitialAdmin() {\n        require(\n            msg.sender == initialAdmin_,\n            \"Only initial admin may remove another admin\"\n        );\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin() {\n        _addWhitelistAdmin(account);\n    }\n\n    /**\n      * @dev    This allows the initial admin to replace themselves as the super\n      *         admin.\n      * @param  account: The address of the new super admin\n      */\n    function addNewInitialAdmin(address account) public onlyInitialAdmin() {\n        if(!isWhitelistAdmin(account)) {\n            _addWhitelistAdmin(account);\n        }\n        initialAdmin_ = account;\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    /**\n      * @dev    Allows the super admin to remover other admins\n      * @param  account: The address of the admin to be removed\n      */\n    function removeWhitelistAdmin(address account) public onlyInitialAdmin() {\n        _removeWhitelistAdmin(account);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        if(!isWhitelistAdmin(account)) {\n            noOfAdmins_ += 1;\n        }\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        noOfAdmins_ -= 1;\n        require(noOfAdmins_ >= 1, \"Cannot remove all admins\");\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n\n    function getAdminCount() public view returns(uint8) {\n        return noOfAdmins_;\n    }\n}\n\n\n\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  Storage and acess to the molecule fee.\n  * @notice The vault will send the molecule vault its fee rate when a round of\n  *         funding has been successfully filled.\n  */\ncontract MoleculeVault is IMoleculeVault, ModifiedWhitelistAdminRole {\n    // The collateral token being used by the vaults and markets\n    IERC20 internal collateralToken_;\n    // The fee rate of the molecule vault\n    uint256 internal feeRate_ = 0;\n\n    /**\n      * @notice Setts the state variables for the contract.\n      * @param  _collateralToken : The address of the collateral token (ERC20).\n      * @param  _feeRate : The fee rate to be used by the vaults.\n      */\n    constructor(\n        address _collateralToken,\n        address _admin,\n        uint256 _feeRate\n    )\n        public\n        ModifiedWhitelistAdminRole()\n    {\n        // Ensures that the fee rate is correct\n        require(_feeRate < 100, \"Fee rate too high\");\n        // Checks the addresses cannot be 0\n        require(\n            address(_collateralToken) != address(0) &&\n            address(_admin) != address(0),\n            \"Address(s) cannot be 0\"\n        );\n\n        collateralToken_ = IERC20(_collateralToken);\n        feeRate_ = _feeRate;\n        super.addNewInitialAdmin(_admin);\n        super.renounceWhitelistAdmin();\n    }\n\n    /**\n      * @notice Allows an admin to add another admin.\n      * @param  _moleculeAdmin: The address of the new admin.\n      */\n    function addAdmin(address _moleculeAdmin) external onlyWhitelistAdmin() {\n        // Adding the Molecule admin address as an admin\n        super.addWhitelistAdmin(_moleculeAdmin);\n    }\n\n    /**\n      * @notice Allows an admin to transfer collateral out of the molecule\n      *         vault and into another address.\n      * @param  _to: The address that the collateral will be transferred to.\n      * @param  _amount: The amount of collateral being transferred.\n      */\n    function transfer(\n        address _to,\n        uint256 _amount\n    )\n        public\n        onlyWhitelistAdmin()\n    {\n        require(\n            IERC20(collateralToken_).transfer(_to, _amount),\n            \"Transfer failed\"\n        );\n    }\n\n    /**\n      * @notice Allows an admin to approve a spender of the molecule vault\n      *         collateral.\n      * @param  _spender: The address that will be approved as a spender.\n      * @param  _amount: The amount the spender will be approved to spend.\n      */\n    function approve(\n        address _spender,\n        uint256 _amount\n    )\n        public\n        onlyWhitelistAdmin()\n    {\n        require(\n            IERC20(collateralToken_).approve(_spender, _amount),\n            \"Approve failed\"\n        );\n    }\n\n    /**\n      * @notice Allows the admin to update the fee rate charged by the\n      *         molecule vault. Any change to this fee rate will not affect\n      *         future Markets. This was done to ensure transparency\n      *         and trust in the fee rates.\n      * @param  _newFeeRate : The new fee rate.\n      * @return bool: If the update was successful\n      */\n    function updateFeeRate(\n        uint256 _newFeeRate\n    )\n        external\n        onlyWhitelistAdmin()\n        returns(bool)\n    {\n        require(\n            feeRate_ != _newFeeRate,\n            \"New fee rate cannot be the same as old fee rate\"\n        );\n        // Ensures that the fee rate is correct\n        require(_newFeeRate < 100, \"Fee rate too high\");\n\n        feeRate_ = _newFeeRate;\n        return true;\n    }\n\n    /**\n      * @return address: The address of the collateral token.\n      */\n    function collateralToken() public view returns(address) {\n        return address(collateralToken_);\n    }\n\n    /**\n      * @return uint256 : The rate of fee\n      */\n    function feeRate() public view returns(uint256) {\n        return feeRate_;\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addNewInitialAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_moleculeAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"MoleculeVault","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000006636687f69853863c92b93de83040bcae8fe08240000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://07521e5a24cf807fc2143144c1755172f4e7734e7db6145bd87acfee9b247935"}]}