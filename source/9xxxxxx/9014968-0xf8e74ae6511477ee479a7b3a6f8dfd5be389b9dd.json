{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"_newOwner == 0\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Destructible.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IBadERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Bad formed ERC20 token interface.\r\n * @dev The interface of the a bad formed ERC20 token.\r\n */\r\ninterface IBadERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n    function transferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 value\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(\r\n      address who\r\n    ) external view returns (uint256);\r\n\r\n    function allowance(\r\n      address owner,\r\n      address spender\r\n    ) external view returns (uint256);\r\n\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 value\r\n    );\r\n    event Approval(\r\n      address indexed owner,\r\n      address indexed spender,\r\n      uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Utils/SafeTransfer.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeTransfer\r\n * @dev Transfer Bad ERC20 tokens\r\n */\r\nlibrary SafeTransfer {\r\n/**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function _safeTransferFrom(\r\n    address _tokenAddress,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n  function _safeTransfer(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  function _safeApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n  internal\r\n  returns (bool result)\r\n  {\r\n    IBadERC20(_token).approve(_spender, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"The contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"The contract is not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/MakerDAO.sol\r\n\r\npragma solidity ^0.4.0;\r\n\r\ninterface MakerDAO_ScdMcdMigration {\r\n    // Function to swap SAI to DAI\r\n    // This function is to be used by users that want to get new DAI in exchange of old one (aka SAI)\r\n    // wad amount has to be <= the value pending to reach the debt ceiling (the minimum between general and ilk one)\r\n    function swapSaiToDai(uint wad) external;\r\n}\r\n\r\n// This contract is intended to be executed via the Profile proxy of a user (DSProxy) which owns the SCD CDP\r\ninterface MakerDAO_MigrationProxyActions {\r\n    function swapSaiToDai(\r\n        address scdMcdMigration,            // Migration contract address\r\n        uint wad                            // Amount to swap\r\n    ) external;\r\n}\r\n\r\n// File: contracts/SaiDaiTokenSwap.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenSwap.\r\n * @author Eidoo SAGL.\r\n * @dev A swap asset contract. The offerAmount and wantAmount are collected and sent into the contract itself.\r\n */\r\ncontract SaiDaiTokenSwap is Pausable, Destructible\r\n{\r\n  using SafeMath for uint;\r\n  using SafeTransfer for ERC20;\r\n  address constant ETHER = address(0);\r\n  uint constant expScale = 1e18;\r\n  uint constant rateDecimals = 18;\r\n  uint constant rateUnit = 10 ** rateDecimals;\r\n\r\n  ERC20 sai;\r\n  ERC20 dai;\r\n  address migration;\r\n  MakerDAO_MigrationProxyActions proxy;\r\n\r\n  event LogWithdrawToken(\r\n    address indexed _from,\r\n    address indexed _token,\r\n    uint amount\r\n  );\r\n\r\n  event LogTokenSwap(\r\n    address indexed _userAddress,\r\n    address indexed _userSentTokenAddress,\r\n    uint _userSentTokenAmount,\r\n    address indexed _userReceivedTokenAddress,\r\n    uint _userReceivedTokenAmount\r\n  );\r\n\r\n  constructor(\r\n    address _sai,\r\n    address _dai,\r\n    address _migration,\r\n    address _proxy\r\n  )\r\n    public\r\n  {\r\n    sai = ERC20(_sai);\r\n    dai = ERC20(_dai);\r\n    migration = _migration;\r\n    proxy = MakerDAO_MigrationProxyActions(_proxy);\r\n  }\r\n\r\n  function() external {\r\n    revert(\"fallback function not allowed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw asset.\r\n   * @param _tokenAddress Asset to be withdrawed.\r\n   * @return bool.\r\n   */\r\n  function withdrawToken(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    uint tokenBalance;\r\n    if (_tokenAddress == ETHER) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\r\n      ERC20(_tokenAddress)._safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n    emit LogWithdrawToken(msg.sender, _tokenAddress, tokenBalance);\r\n  }\r\n\r\n  /******************* rate functions for interface compatibility *******************/\r\n\r\n  function buyRate() public pure returns(uint) {\r\n    return rateUnit;\r\n  }\r\n\r\n  function buyRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  function sellRate() public pure returns(uint) {\r\n    return 0;\r\n  }\r\n\r\n  function sellRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  /******************* end rate functions *******************/\r\n\r\n  /**\r\n * @dev For interface compatibility. Function to calculate the number of tokens the user is going to receive.\r\n * @param _offerTokenAmount The amount of tokens.\r\n * @param _isRedeem If true, the offered token is the LoanToken, otherwise is the underlying token.\r\n * @return uint.\r\n */\r\n  function getAmount(uint _offerTokenAmount, bool _isRedeem)\r\n    public pure returns(uint toUserAmount)\r\n  {\r\n    // Swap dai to sai forbidden\r\n    return _isRedeem? 0 : _offerTokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Release purchased asset to the buyer based on pair rate.\r\n   * @param _userOfferTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @param _userOfferTokenAmount The amount of token the user want to swap.\r\n   * @return bool.\r\n   */\r\n  function swapToken (\r\n    address _userOfferTokenAddress,\r\n    uint _userOfferTokenAmount\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_userOfferTokenAmount != 0, \"_userOfferTokenAmount == 0\");\r\n    require(\r\n      ERC20(_userOfferTokenAddress).allowance(msg.sender, address(this)) >= _userOfferTokenAmount,\r\n      \"ERC20 allowance < _userOfferTokenAmount\"\r\n    );\r\n    // check if offered token address is correct\r\n    require(_userOfferTokenAddress == address(sai), \"Swap dai to sai forbidden\");\r\n\r\n    // get user's tokens\r\n    sai._safeTransferFrom(msg.sender, address(this), _userOfferTokenAmount);\r\n\r\n    uint toUserAmount = _userOfferTokenAmount;\r\n    sai._safeApprove(address(proxy), _userOfferTokenAmount);\r\n    proxy.swapSaiToDai(migration, _userOfferTokenAmount);\r\n    require(dai.balanceOf(address(this)) >= toUserAmount, \"No enough dai after swap\");\r\n//    require(toUserAmount > 0, \"toUserAmount must be greater than 0\");\r\n    require(\r\n      dai.transfer(msg.sender, toUserAmount),\r\n      \"cannot transfer the dai tokens to the user\"\r\n    );\r\n\r\n    emit LogTokenSwap(\r\n      msg.sender,\r\n      address(sai),\r\n      _userOfferTokenAmount,\r\n      address(dai),\r\n      toUserAmount\r\n    );\r\n    return true;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/Interfaces/ICToken.sol\r\n\r\npragma solidity ^0.4.0;\r\n\r\ninterface ICToken {\r\n    function exchangeRateStored() external view returns (uint);\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n//    function balanceOfUnderlying(address owner) external returns (uint);\r\n}\r\n\r\n// File: contracts/Interfaces/ICErc20.sol\r\n\r\npragma solidity ^0.4.0;\r\n\r\n\r\ncontract  ICErc20 is ICToken {\r\n    function underlying() external view returns (address);\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n//    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n//    function borrow(uint borrowAmount) external returns (uint);\r\n//    function repayBorrow(uint repayAmount) external returns (uint);\r\n//    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n//    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n}\r\n\r\n// File: contracts/CErc20Swap.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenSwap.\r\n * @author Eidoo SAGL.\r\n * @dev A swap asset contract. The offerAmount and wantAmount are collected and sent into the contract itself.\r\n */\r\ncontract CErc20Swap is Pausable, Destructible\r\n{\r\n  using SafeMath for uint;\r\n  using SafeTransfer for ERC20;\r\n  address constant ETHER = address(0);\r\n  uint constant expScale = 1e18;\r\n  uint constant rateDecimals = 18;\r\n  uint constant rateUnit = 10 ** rateDecimals;\r\n\r\n  ICErc20 public cToken;\r\n\r\n  address public wallet;\r\n\r\n  uint public spread;\r\n  uint constant spreadDecimals = 6;\r\n  uint constant spreadUnit = 10 ** spreadDecimals;\r\n\r\n  event LogWithdrawToken(\r\n    address indexed _from,\r\n    address indexed _token,\r\n    uint amount\r\n  );\r\n\r\n  event LogTokenSwap(\r\n    address indexed _userAddress,\r\n    address indexed _userSentTokenAddress,\r\n    uint _userSentTokenAmount,\r\n    address indexed _userReceivedTokenAddress,\r\n    uint _userReceivedTokenAmount\r\n  );\r\n\r\n  event LogFee(address token, uint amount);\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _cTokenAddress  The CToken in the pair.\r\n   * @param _wallet The wallet for fees.\r\n   * @param _spread The initial spread (in millionths).\r\n   */\r\n  constructor(\r\n    address _cTokenAddress,\r\n    address _wallet,\r\n    uint _spread\r\n  )\r\n    public\r\n  {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    cToken = ICErc20(_cTokenAddress);\r\n    wallet = _wallet;\r\n    spread = _spread;\r\n  }\r\n\r\n  function() external {\r\n    revert(\"fallback function not allowed\");\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function setSpread(uint _spread) public onlyOwner {\r\n    spread = _spread;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw asset.\r\n   * @param _tokenAddress Asset to be withdrawed.\r\n   * @return bool.\r\n   */\r\n  function withdrawToken(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    uint tokenBalance;\r\n    if (_tokenAddress == ETHER) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\r\n      ERC20(_tokenAddress)._safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n    emit LogWithdrawToken(msg.sender, _tokenAddress, tokenBalance);\r\n  }\r\n\r\n  /******************* rate functions for interface compatibility *******************/\r\n\r\n  function buyRate() public view returns(uint) {\r\n    return getAmount(rateUnit, false);\r\n  }\r\n\r\n  function buyRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  function sellRate() public view returns(uint) {\r\n    return getAmount(rateUnit, true);\r\n  }\r\n\r\n  function sellRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  /******************* end rate functions *******************/\r\n\r\n  function _getExchangedAmount(uint _amount, bool _isRedeem) internal view returns(uint) {\r\n    uint rate = cToken.exchangeRateStored();\r\n    return _isRedeem\r\n      ? _amount.mul(rate).div(expScale)\r\n      : _amount.mul(expScale).div(rate);\r\n  }\r\n\r\n  function _getFee(uint underlyingTokenTotal) internal view returns(uint) {\r\n    return underlyingTokenTotal.mul(spread).div(spreadUnit);\r\n  }\r\n\r\n  /**\r\n * @dev For interface compatibility. Function to calculate the number of tokens the user is going to receive.\r\n * @param _offerTokenAmount The amount of tokens.\r\n * @param _isRedeem If true, the offered token is the CToken, otherwise is the underlying token.\r\n * @return uint.\r\n */\r\n  function getAmount(uint _offerTokenAmount, bool _isRedeem)\r\n    public view returns(uint toUserAmount)\r\n  {\r\n    if (_isRedeem) {\r\n      uint amount = _getExchangedAmount(_offerTokenAmount, _isRedeem);\r\n      // fee is always in underlying token, when minting the CToken is the received token\r\n      toUserAmount = amount.sub(_getFee(amount));\r\n    } else {\r\n      // fee is always in underlying token, when redeeming the CToken is the offered token\r\n      uint fee = _getFee(_offerTokenAmount);\r\n      toUserAmount = _getExchangedAmount(_offerTokenAmount.sub(fee), _isRedeem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Release purchased asset to the buyer based on pair rate.\r\n   * @param _userOfferTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @param _userOfferTokenAmount The amount of token the user want to swap.\r\n   * @return bool.\r\n   */\r\n  function swapToken (\r\n    address _userOfferTokenAddress,\r\n    uint _userOfferTokenAmount\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_userOfferTokenAmount != 0, \"_userOfferTokenAmount == 0\");\r\n    require(\r\n      ERC20(_userOfferTokenAddress).allowance(msg.sender, address(this)) >= _userOfferTokenAmount,\r\n      \"ERC20 allowance < _userOfferTokenAmount\"\r\n    );\r\n    address underlying = cToken.underlying();\r\n    // check if offered token address is the base or the quote token address\r\n    require(\r\n      _userOfferTokenAddress == underlying || _userOfferTokenAddress == address(cToken),\r\n      \"_userOfferTokenAddress not in pair\"\r\n    );\r\n    bool isRedeem = _userOfferTokenAddress == address(cToken);\r\n    uint toUserAmount;\r\n    uint fee;\r\n\r\n    // get user's tokens\r\n    ERC20(_userOfferTokenAddress)._safeTransferFrom(msg.sender, address(this), _userOfferTokenAmount);\r\n\r\n    if (isRedeem) {\r\n      require(\r\n        cToken.redeem(_userOfferTokenAmount) == 0,\r\n        \"cannot redeem the CToken\"\r\n      );\r\n      uint redeemedAmount = _getExchangedAmount(_userOfferTokenAmount, isRedeem);\r\n      require(\r\n        ERC20(underlying).balanceOf(address(this)) >= redeemedAmount,\r\n        \"No enough underlying tokens after redeem\"\r\n      );\r\n      fee = _getFee(redeemedAmount);\r\n      toUserAmount = redeemedAmount.sub(fee);\r\n      require(toUserAmount > 0, \"toUserAmount must be greater than 0\");\r\n      require(\r\n        ERC20(underlying)._safeTransfer(msg.sender, toUserAmount),\r\n        \"cannot transfer underlying token to the user\"\r\n      );\r\n    } else {\r\n      fee = _getFee(_userOfferTokenAmount);\r\n      uint toSwap = _userOfferTokenAmount.sub(fee);\r\n      ERC20(_userOfferTokenAddress)._safeApprove(address(cToken), toSwap);\r\n      require(\r\n        cToken.mint(toSwap) == 0,\r\n        \"cannot mint the CToken\"\r\n      );\r\n      toUserAmount = _getExchangedAmount(toSwap, isRedeem);\r\n      require(cToken.balanceOf(address(this)) >= toUserAmount, \"No enough CTokens after mint\");\r\n      require(toUserAmount > 0, \"toUserAmount must be greater than 0\");\r\n      require(\r\n        cToken.transfer(msg.sender, toUserAmount),\r\n        \"cannot transfer the CToken to the user\"\r\n      );\r\n    }\r\n    // get the fee\r\n    if (fee > 0) {\r\n      require(\r\n        ERC20(underlying)._safeTransfer(wallet, fee),\r\n        \"cannot transfer the CToken to the wallet for the fees\"\r\n      );\r\n      emit LogFee(address(cToken), fee);\r\n    }\r\n\r\n    emit LogTokenSwap(\r\n      msg.sender,\r\n      _userOfferTokenAddress,\r\n      _userOfferTokenAmount,\r\n      isRedeem ? underlying : address(cToken),\r\n      toUserAmount\r\n    );\r\n    return true;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/CSaiCDaiSwap.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenSwap.\r\n * @author Eidoo SAGL.\r\n * @dev A swap asset contract. The offerAmount and wantAmount are collected and sent into the contract itself.\r\n */\r\ncontract CSaiCDaiSwap is Pausable, Destructible\r\n{\r\n  using SafeMath for uint;\r\n  using SafeTransfer for ERC20;\r\n  address constant ETHER = address(0);\r\n  uint constant expScale = 1e18;\r\n  uint constant rateDecimals = 18;\r\n  uint constant rateUnit = 10 ** rateDecimals;\r\n\r\n  CErc20Swap public csaiSwap;\r\n  CErc20Swap public cdaiSwap;\r\n  SaiDaiTokenSwap public saidaiSwap;\r\n\r\n  event LogWithdrawToken(\r\n    address indexed _from,\r\n    address indexed _token,\r\n    uint amount\r\n  );\r\n\r\n  event LogTokenSwap(\r\n    address indexed _userAddress,\r\n    address indexed _userSentTokenAddress,\r\n    uint _userSentTokenAmount,\r\n    address indexed _userReceivedTokenAddress,\r\n    uint _userReceivedTokenAmount\r\n  );\r\n\r\n  event UnexpectedBalance(address token, uint balance);\r\n\r\n  constructor(\r\n    address _csaiSwap,\r\n    address _cdaiSwap,\r\n    address _saidaiSwap\r\n  )\r\n    public\r\n  {\r\n    csaiSwap = CErc20Swap(_csaiSwap);\r\n    cdaiSwap = CErc20Swap(_cdaiSwap);\r\n    saidaiSwap = SaiDaiTokenSwap(_saidaiSwap);\r\n\r\n//    ICErc20 csai = csaiSwap.cToken();\r\n//    require(csaiSwap.cToken().underlying() == address(saidaiSwap.sai()), \"SAI tokens mismatch\");\r\n//    require(cdaiSwap.cToken().underlying() == address(saidaiSwap.dai()), \"DAI tokens mismatch\");\r\n  }\r\n\r\n  function() external {\r\n    revert(\"fallback function not allowed\");\r\n  }\r\n  /**\r\n   * @dev Withdraw asset.\r\n   * @param _tokenAddress Asset to be withdrawed.\r\n   * @return bool.\r\n   */\r\n  function withdrawToken(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    uint tokenBalance;\r\n    if (_tokenAddress == ETHER) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\r\n      ERC20(_tokenAddress)._safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n    emit LogWithdrawToken(msg.sender, _tokenAddress, tokenBalance);\r\n  }\r\n\r\n  /******************* rate functions for interface compatibility *******************/\r\n\r\n  function buyRate() public view returns(uint) {\r\n    uint csairedeem = csaiSwap.sellRate().mul(10 ** (rateDecimals.sub(csaiSwap.sellRateDecimals())));\r\n    uint saidai = saidaiSwap.buyRate().mul(10 ** (rateDecimals.sub(saidaiSwap.buyRateDecimals())));\r\n    uint cdaimint = cdaiSwap.buyRate().mul(10 ** (rateDecimals.sub(cdaiSwap.buyRateDecimals())));\r\n    uint rate = csairedeem.mul(saidai).div(10 ** rateDecimals).mul(cdaimint).div(10 ** rateDecimals);\r\n    return rate;\r\n  }\r\n\r\n  function buyRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  function sellRate() public pure returns(uint) {\r\n    return 0;\r\n  }\r\n\r\n  function sellRateDecimals() public pure returns(uint) {\r\n    return rateDecimals;\r\n  }\r\n\r\n  /******************* end rate functions *******************/\r\n\r\n  /**\r\n * @dev For interface compatibility. Function to calculate the number of tokens the user is going to receive.\r\n * @param _offerTokenAmount The amount of tokens.\r\n * @param _isRedeem If true, the offered token is the CToken, otherwise is the underlying token.\r\n * @return uint.\r\n */\r\n  function getAmount(uint _offerTokenAmount, bool _isRedeem)\r\n    public view returns(uint toUserAmount)\r\n  {\r\n    // Swap cdai to csai forbidden\r\n    return _isRedeem? 0 : _offerTokenAmount.mul(buyRate()).div(rateUnit);\r\n  }\r\n\r\n  /**\r\n   * @dev Release purchased asset to the buyer based on pair rate.\r\n   * @param _userOfferTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @param _userOfferTokenAmount The amount of token the user want to swap.\r\n   * @return bool.\r\n   */\r\n  function swapToken (\r\n    address _userOfferTokenAddress,\r\n    uint _userOfferTokenAmount\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_userOfferTokenAmount != 0, \"_userOfferTokenAmount == 0\");\r\n    require(\r\n      ERC20(_userOfferTokenAddress).allowance(msg.sender, address(this)) >= _userOfferTokenAmount,\r\n      \"ERC20 allowance < _userOfferTokenAmount\"\r\n    );\r\n\r\n    ICErc20 csai = csaiSwap.cToken();\r\n    ERC20 sai = ERC20(csai.underlying());\r\n    ICErc20 cdai = cdaiSwap.cToken();\r\n    ERC20 dai = ERC20(cdai.underlying());\r\n\r\n    // check if offered token address is the base or the quote token address\r\n    require(\r\n      _userOfferTokenAddress == address(csai),\r\n      \"_userOfferTokenAddress must be CSAI address\"\r\n    );\r\n\r\n    emptyBalance(address(csai));\r\n    emptyBalance(address(sai));\r\n    emptyBalance(address(dai));\r\n    emptyBalance(address(cdai));\r\n\r\n    // get user's tokens\r\n    csai.transferFrom(msg.sender, address(this), _userOfferTokenAmount);\r\n\r\n    csai.approve(address(csaiSwap), _userOfferTokenAmount);\r\n    csaiSwap.swapToken(address(csai), _userOfferTokenAmount);\r\n    uint saiBalance = sai.balanceOf(address(this));\r\n    require(saiBalance > 0, \"SAI balance is 0\");\r\n\r\n    sai.approve(address(saidaiSwap), saiBalance);\r\n    saidaiSwap.swapToken(address(sai), saiBalance);\r\n    uint daiBalance = dai.balanceOf(address(this));\r\n    require(daiBalance > 0, \"DAI balance is 0\");\r\n\r\n    dai.approve(address(cdaiSwap), daiBalance);\r\n    cdaiSwap.swapToken(address(dai), daiBalance);\r\n    uint cdaiBalance = cdai.balanceOf(address(this));\r\n    require(cdaiBalance > 0, \"CDAI balance is 0\");\r\n\r\n    require(cdai.transfer(msg.sender, cdaiBalance), \"Cannot tranfer CDAI to the msg.sender address\");\r\n\r\n\r\n    emit LogTokenSwap(\r\n      msg.sender,\r\n      _userOfferTokenAddress,\r\n      _userOfferTokenAmount,\r\n      address(cdai),\r\n      cdaiBalance\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function emptyBalance(address token) private {\r\n    uint balance = ERC20(token).balanceOf(address(this));\r\n    if (balance > 0) {\r\n      require(ERC20(token)._safeTransfer(owner, balance), \"cannot tranfer tokens in order to empty balance\");\r\n      emit UnexpectedBalance(token, balance);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sellRateDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saidaiSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_isRedeem\",\"type\":\"bool\"}],\"name\":\"getAmount\",\"outputs\":[{\"name\":\"toUserAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRateDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"csaiSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userOfferTokenAddress\",\"type\":\"address\"},{\"name\":\"_userOfferTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdaiSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_csaiSwap\",\"type\":\"address\"},{\"name\":\"_cdaiSwap\",\"type\":\"address\"},{\"name\":\"_saidaiSwap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_userSentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userSentTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_userReceivedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userReceivedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"UnexpectedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CSaiCDaiSwap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000613f614a7c809e4da1e2f20db25c461be3a89781000000000000000000000000acd47a791f578a943770f9a0f4d74aa5c3c3e042000000000000000000000000f27656a58bf4f0115eadf5f163bb1a41b40e1798","Library":"","LicenseType":"None","SwarmSource":"bzzr://f803a7ca0f450aed83c698c82dccb5aae2ed8b290a45b5c1c74c720b0d7b53b3"}]}