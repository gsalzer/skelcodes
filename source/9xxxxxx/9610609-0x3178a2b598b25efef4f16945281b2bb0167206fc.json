{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title InstaConnectors\r\n * @dev Registry for Connectors.\r\n */\r\n\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\n\r\ncontract Controllers is DSMath {\r\n\r\n    event LogAddController(address addr);\r\n    event LogRemoveController(address addr);\r\n\r\n     // The InstaIndex Address.\r\n    address public constant instaIndex = 0x1c503F1544500C05da80cd326D97342f2B13a732;\r\n\r\n    // Enabled Cheif(Address of Cheif => bool).\r\n    mapping(address => bool) public chief;\r\n    // Enabled Connectors(Connector Address => bool).\r\n    mapping(address => bool) public connectors;\r\n    // Enbled Static Connectors(Connector Address => bool).\r\n    mapping(address => bool) public staticConnectors;\r\n\r\n    /**\r\n    * @dev Throws if the sender not is Master Address from InstaIndex\r\n    * or Enabled Cheif.\r\n    */\r\n    modifier isChief {\r\n        require(chief[msg.sender] || msg.sender == IndexInterface(instaIndex).master(), \"not-an-chief\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable a Cheif.\r\n     * @param _userAddress Cheif Address.\r\n    */\r\n    function enableChief(address _userAddress) external isChief {\r\n        chief[_userAddress] = true;\r\n        emit LogAddController(_userAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Disables a Cheif.\r\n     * @param _userAddress Cheif Address.\r\n    */\r\n    function disableChief(address _userAddress) external isChief {\r\n        delete chief[_userAddress];\r\n        emit LogRemoveController(_userAddress);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LinkedList is Controllers {\r\n\r\n    event LogEnable(address indexed connector);\r\n    event LogDisable(address indexed connector);\r\n    event LogEnableStatic(address indexed connector);\r\n\r\n    // Connectors Count.\r\n    uint public count;\r\n    // First enabled Connector Address.\r\n    address public first;\r\n    // Last enabled Connector Address.\r\n    address public last;\r\n    // Connectors List(Address of Connector => List(Previous and Next Enabled Connector)).\r\n    mapping (address => List) public list;\r\n\r\n    struct List {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Add Connector to Connector's Linked List.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function addToList(address _connector) internal {\r\n        if (last != address(0)) {\r\n            list[_connector].prev = last;\r\n            list[last].next = _connector;\r\n        }\r\n        if (first == address(0)) {\r\n            first = _connector;\r\n        }\r\n        last = _connector;\r\n        count = add(count, 1);\r\n\r\n        emit LogEnable(_connector);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Connector to Connector's Linked List.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function removeFromList(address _connector) internal {\r\n        if (list[_connector].prev != address(0)) {\r\n            list[list[_connector].prev].next = list[_connector].next;\r\n        } else {\r\n            first = list[_connector].next;\r\n        }\r\n        if (list[_connector].next != address(0)) {\r\n            list[list[_connector].next].prev = list[_connector].prev;\r\n        } else {\r\n            last = list[_connector].prev;\r\n        }\r\n        count = sub(count, 1);\r\n        delete list[_connector];\r\n\r\n        emit LogDisable(_connector);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaConnectors is LinkedList {\r\n    // Static Connectors Count.\r\n    uint public staticCount;\r\n    // Static Connectors (ID => Static Connector).\r\n    mapping (uint => address) public staticList;\r\n\r\n    /**\r\n     * @dev Enable Connector.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function enable(address _connector) external isChief {\r\n        require(!connectors[_connector], \"already-enabled\");\r\n        connectors[_connector] = true;\r\n        addToList(_connector);\r\n    }\r\n    /**\r\n     * @dev Disable Connector.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function disable(address _connector) external isChief {\r\n        require(connectors[_connector], \"not-connector\");\r\n        delete connectors[_connector];\r\n        removeFromList(_connector);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable Static Connector.\r\n     * @param _connector Static Connector Address.\r\n    */\r\n    function enableStatic(address _connector) external isChief {\r\n        require(!staticConnectors[_connector], \"already-enabled\");\r\n        staticCount++;\r\n        staticList[staticCount] = _connector;\r\n        staticConnectors[_connector] = true;\r\n        emit LogEnableStatic(_connector);\r\n    }\r\n\r\n     /**\r\n     * @dev Check if Connector addresses are enabled.\r\n     * @param _connectors Array of Connector Addresses.\r\n    */\r\n    function isConnector(address[] calldata _connectors) external view returns (bool isOk) {\r\n        isOk = true;\r\n        for (uint i = 0; i < _connectors.length; i++) {\r\n            if (!connectors[_connectors[i]]) {\r\n                isOk = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if Connector addresses are static enabled.\r\n     * @param _connectors Array of Connector Addresses.\r\n    */\r\n    function isStaticConnector(address[] calldata _connectors) external view returns (bool isOk) {\r\n        isOk = true;\r\n        for (uint i = 0; i < _connectors.length; i++) {\r\n            if (!staticConnectors[_connectors[i]]) {\r\n                isOk = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogAddController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"LogDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"LogEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"LogEnableStatic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogRemoveController\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chief\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"disableChief\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"enableChief\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"enableStatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"}],\"name\":\"isConnector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"}],\"name\":\"isStaticConnector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staticConnectors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staticList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaConnectors","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://9d51432ede6495fb45c5185151f36b634bc86bf52d54c6c57633fad54a3a910d"}]}