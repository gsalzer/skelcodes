{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.13;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * SafeMath from OpenZeppelin - commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/5dfe7215a9156465d550030eadc08770503b2b2f\r\n * \r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n* @title MBDAAsset is a template for MB Digital Asset token\r\n* */\r\ncontract MBDAAsset {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // events\r\n    //\r\n    // ERC20 events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // mint/burn events\r\n    event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n    event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n    // admin events\r\n    event BlockLockSet(uint256 _value);\r\n    event NewAdmin(address _newAdmin);\r\n    event NewManager(address _newManager);\r\n    event NewInvestor(address _newInvestor);\r\n    event RemovedInvestor(address _investor);\r\n    event FundAssetsChanged(string indexed tokenSymbol, string assetInfo, uint8 amount, uint totalAssetAmount);\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Only admin can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier managerOrAdmin {\r\n        require(msg.sender == manager || msg.sender == admin, \"Only manager or admin can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier boardOrAdmin {\r\n        require(msg.sender == board || msg.sender == admin, \"Only admin or board can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier blockLock(address _sender) {\r\n        require (!isLocked() || _sender == admin, \"Contract is locked except for the admin\");\r\n        _;\r\n    }\r\n\r\n    struct Asset {\r\n        string assetTicker;\r\n        string assetInfo;\r\n        uint8 assetPercentageParticipation;\r\n    }\r\n\r\n    struct Investor {\r\n        string info;\r\n        bool exists;\r\n    }\r\n\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public admin;\r\n    address public board;\r\n    address public manager;\r\n    uint256 public lockedUntilBlock;\r\n    bool public canChangeAssetsType;\r\n    bool public canChangeAssetsQuantity;\r\n    bool public hasWhiteList;\r\n    bool public isSyndicate;\r\n    string public urlFinancialDetailsDocument;\r\n    bytes32 public financialDetailsHash;\r\n    string[] public tradingPlatforms;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    mapping (address => Investor) public clearedInvestors;\r\n    Asset[] public assets;\r\n\r\n    /**\r\n    * @dev Constructor\r\n\t* @param _fundAdmin - Fund admin\r\n    * @param _fundBoard - Board\r\n    * @param _tokenName - Detailed ERC20 token name\r\n    * @param _decimalUnits - Detailed ERC20 decimal units\r\n    * @param _tokenSymbol - Detailed ERC20 token symbol\r\n    * @param _lockedUntilBlock - Block lock\r\n    * @param _newTotalSupply - Total Supply owned by the contract itself, only Manager can move\r\n    * @param _canChangeAssetsType - True allows the Manager to change assets in the portfolio\r\n    * @param _canChangeAssetsQuantity - True allows Manager to rebalance the portfolio\r\n    * @param _hasWhiteList - Allows transfering only between whitelisted addresses\r\n    * @param _isSyndicate - Allows secondary market\r\n    */\r\n    constructor\r\n    (\r\n        address _fundAdmin,\r\n        address _fundBoard,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        uint256 _lockedUntilBlock,\r\n        uint256 _newTotalSupply,\r\n        bool _canChangeAssetsType,\r\n        bool _canChangeAssetsQuantity,\r\n        bool _hasWhiteList,\r\n        bool _isSyndicate\r\n    )\r\n        public\r\n    {\r\n        name = _tokenName;\r\n        require(_decimalUnits<=18, \"Decimal units should be 18 or lower\");\r\n        decimals = _decimalUnits;\r\n        symbol = _tokenSymbol;\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        admin = _fundAdmin;\r\n        board = _fundBoard;\r\n        totalSupply = _newTotalSupply;\r\n        canChangeAssetsType = _canChangeAssetsType;\r\n        canChangeAssetsQuantity = _canChangeAssetsQuantity;\r\n        hasWhiteList = _hasWhiteList;\r\n        isSyndicate = _isSyndicate;\r\n        balances[address(this)] = totalSupply;\r\n        Investor memory tmp = Investor(\"Contract\", true);\r\n        clearedInvestors[address(this)] = tmp;\r\n        emit NewInvestor(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Set financial details url\r\n\t* @param _url - URL\r\n    * @return True if success\r\n    */\r\n    function setFinancialDetails(string memory _url)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        urlFinancialDetailsDocument = _url;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set financial details IPFS hash\r\n\t* @param _hash - URL\r\n    * @return True if success\r\n    */\r\n    function setFinancialDetailsHash(bytes32 _hash)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        financialDetailsHash = _hash;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add trading platform\r\n\t* @param _details - Details of the trading platform\r\n    * @return True if success\r\n    */\r\n    function addTradingPlatform(string memory _details)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        tradingPlatforms.push(_details);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove trading platform\r\n\t* @param _index - Index of the trading platform to be removed\r\n    * @return True if success\r\n    */\r\n    function removeTradingPlatform(uint256 _index)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_index < tradingPlatforms.length, \"Invalid platform index\");\r\n        tradingPlatforms[_index] = tradingPlatforms[tradingPlatforms.length - 1];\r\n        tradingPlatforms.length--;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Whitelists an Investor\r\n\t* @param _investor - Address of the investor\r\n    * @param _investorInfo - Info\r\n    * @return True if success\r\n    */\r\n    function addNewInvestor(address _investor, string memory _investorInfo)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        Investor memory tmp = Investor(_investorInfo, true);\r\n        clearedInvestors[_investor] = tmp;\r\n        emit NewInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Removes an Investor from whitelist\r\n\t* @param _investor - Address of the investor\r\n    * @return True if success\r\n    */\r\n    function removeInvestor(address _investor)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        delete(clearedInvestors[_investor]);\r\n        emit RemovedInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add new asset to Portfolio\r\n\t* @param _assetTicker - Ticker\r\n    * @param _assetInfo - Info\r\n    * @param _assetPercentageParticipation - % of portfolio taken by the asset\r\n    * @return True if success\r\n    */\r\n    function addNewAsset(string memory _assetTicker, string memory _assetInfo, uint8 _assetPercentageParticipation)\r\n        public\r\n        onlyAdmin\r\n        returns (bool success)\r\n    {\r\n        uint totalPercentageAssets = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            require(keccak256(bytes(_assetTicker)) != keccak256(bytes(assets[i].assetTicker)), \"An asset cannot be assigned twice\");\r\n            totalPercentageAssets = SafeMath.add(assets[i].assetPercentageParticipation, totalPercentageAssets);\r\n        }\r\n        totalPercentageAssets = SafeMath.add(totalPercentageAssets,_assetPercentageParticipation);\r\n        require(totalPercentageAssets<=100, \"Total assets number cannot be higher than 100\");\r\n        emit FundAssetsChanged(_assetTicker, _assetInfo, _assetPercentageParticipation, totalPercentageAssets);\r\n        Asset memory newAsset = Asset(_assetTicker, _assetInfo, _assetPercentageParticipation);\r\n        assets.push(newAsset);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove asset from Portfolio\r\n\t* @param _assetIndex - Asset\r\n    * @return True if success\r\n    */\r\n    function removeAnAsset(uint8 _assetIndex)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(canChangeAssetsType, \"Cannot change asset portfolio\");\r\n        require(_assetIndex<assets.length, \"Invalid asset index number. Greater than total assets\");\r\n        string memory assetTicker = assets[_assetIndex].assetTicker;\r\n        assets[_assetIndex] = assets[assets.length-1];\r\n        delete assets[assets.length-1];\r\n        assets.length--;\r\n        emit FundAssetsChanged(assetTicker, \"\", 0, 0);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Updates an asset\r\n\t* @param _assetTicker - Ticker\r\n    * @param _assetInfo - Info to update\r\n    * @param _newAmount - % of portfolio taken by the asset\r\n    * @return True if success\r\n    */\r\n    function updateAnAssetQuantity(string memory _assetTicker, string memory _assetInfo, uint8 _newAmount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(canChangeAssetsQuantity, \"Cannot change asset amount\");\r\n        require(_newAmount>0, \"Cannot set zero asset amount\");\r\n        uint256 totalAssets = 0;\r\n        uint256 assetIndex = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            if (keccak256(bytes(_assetTicker)) == keccak256(bytes(assets[i].assetTicker))) {\r\n                assetIndex = i;\r\n                totalAssets = SafeMath.add(totalAssets, _newAmount);\r\n            } else {\r\n                totalAssets = SafeMath.add(totalAssets, assets[i].assetPercentageParticipation);\r\n            }\r\n        }\r\n        emit FundAssetsChanged(_assetTicker, _assetInfo, _newAmount, totalAssets);\r\n        require(totalAssets<=100, \"Fund assets total percentage must be less than 100\");\r\n        assets[assetIndex].assetPercentageParticipation = _newAmount;\r\n        assets[assetIndex].assetInfo = _assetInfo;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @return Number of assets in Portfolio\r\n    */\r\n    function totalAssetsArray()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return assets.length;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 Transfer\r\n\t* @param _to - destination address\r\n    * @param _value - value to transfer\r\n    * @return True if success\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require(isTransferValid(from, _to, _value), \"Invalid Transfer Operation\");\r\n        balances[from] = balances[from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 Approve\r\n\t* @param _spender - destination address\r\n    * @param _value - value to be approved\r\n    * @return True if success\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        allowed[from][_spender] = _value;\r\n        emit Approval(from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 TransferFrom\r\n\t* @param _from - source address\r\n    * @param _to - destination address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        blockLock(_from)\r\n        returns (bool)\r\n    {\r\n        // check sufficient allowance\r\n        require(_value <= allowed[_from][msg.sender], \"Value informed is invalid\");\r\n        require(isTransferValid(_from, _to, _value), \"Invalid Transfer Operation\");\r\n        // transfer tokens\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value, \"Value lower than approval\");\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint new tokens. Can only be called by minter or owner\r\n    * @param _to - destination address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function mint(address _to, uint256 _value)\r\n        public\r\n        managerOrAdmin\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n\r\n        emit Mint(_to, _value, totalSupply);\r\n        emit Transfer(address(0), _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn tokens\r\n    * @param _account - address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function burn(address payable _account, uint256 _value)\r\n        public\r\n        payable\r\n        blockLock(msg.sender)\r\n        managerOrAdmin\r\n        returns (bool)\r\n      {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[_account] = balances[_account].sub(_value);\r\n        emit Transfer(_account, address(0), _value);\r\n        emit Burn(_account, _value, totalSupply);\r\n        if (msg.value > 0) {\r\n            (bool success,) = _account.call.value(msg.value)(\"\");\r\n            require(success, \"Ether transfer failed.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set block lock. Until that block (exclusive) transfers are disallowed\r\n    * @param _lockedUntilBlock - Block Number\r\n    * @return True if success\r\n    */\r\n    function setBlockLock(uint256 _lockedUntilBlock)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        emit BlockLockSet(_lockedUntilBlock);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Replace current admin with new one\r\n    * @param _newAdmin New token admin\r\n    * @return True if success\r\n    */\r\n    function replaceAdmin(address _newAdmin)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        require(_newAdmin != address(0x0), \"Null address\");\r\n        admin = _newAdmin;\r\n        emit NewAdmin(_newAdmin);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set an account can perform some operations\r\n    * @param _newManager Manager address\r\n    * @return True if success\r\n    */\r\n    function setManager(address _newManager)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        manager = _newManager;\r\n        emit NewManager(_newManager);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 balanceOf\r\n    * @param _owner Owner address\r\n    * @return True if success\r\n    */\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 allowance\r\n    * @param _owner Owner address\r\n    * @param _spender Address allowed to spend from Owner's balance\r\n    * @return uint256 allowance\r\n    */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Are transfers currently disallowed\r\n    * @return True if disallowed\r\n    */\r\n    function isLocked()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return lockedUntilBlock > block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if transfer parameters are valid\r\n    * @param _from Source address\r\n    * @param _to Destination address\r\n    * @param _amount Amount to check\r\n    * @return True if valid\r\n    */\r\n    function isTransferValid(address _from, address _to, uint256 _amount)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_from == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (_to == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (!hasWhiteList) {\r\n            return  balances[_from] >= _amount;    // sufficient balance\r\n        }\r\n\r\n        bool fromOK = clearedInvestors[_from].exists;\r\n\r\n        if (!isSyndicate) {\r\n            return  balances[_from] >= _amount &&   // sufficient balance\r\n            fromOK                                     // a seller holder within the whitelist\r\n            ;\r\n        }\r\n\r\n        bool toOK = clearedInvestors[_to].exists;\r\n\r\n        return  balances[_from] >= _amount &&   // sufficient balance\r\n            fromOK &&                              // a seller holder within the whitelist\r\n            toOK                                   // a buyer holder within the whitelist\r\n        ;\r\n    }\r\n}\r\n\r\ncontract MBDAWallet {\r\n\r\n    mapping(address => bool) public controllers;\r\n\taddress[] public controllerList;\r\n    bytes32 public recipientID;\r\n    string public recipient;\r\n\r\n\tmodifier onlyController() {\r\n\t\trequire(controllers[msg.sender], \"Sender must be a Controller Member\");\r\n\t\t_;\r\n\t}\r\n\r\n\tevent EtherReceived(address sender, uint256 amount);\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _controller - Controller of the new wallet\r\n    * @param recipientExternalID - The Recipient ID (managed externally)\r\n    */\r\n\tconstructor(address _controller, string memory recipientExternalID) public {\r\n\t\trequire(_controller != address(0), \"Invalid address of controller 1\");\r\n        controllers[_controller] = true;\r\n\t\tcontrollerList.push(_controller);\r\n\t\trecipientID = keccak256(abi.encodePacked(recipientExternalID));\r\n\t\trecipient = recipientExternalID;\r\n\t}\r\n\r\n    /**\r\n    * @dev Getter for the total number of controllers\r\n    * @return Total number of controllers\r\n    */\r\n\tfunction getTotalControllers() public view returns(uint256) {\r\n\t    return controllerList.length;\r\n\t}\r\n\r\n    /**\r\n    * @dev Adds a new Controller\r\n\t* @param _controller - Controller to be added\r\n    * @return True if success\r\n    */\r\n\tfunction newController(address _controller) public onlyController returns (bool) {\r\n\t\trequire(!controllers[_controller], \"Already a controller\");\r\n\t    require(_controller!=address(0), \"Invalid Controller address\");\r\n\t\trequire(msg.sender != _controller, \"The sender cannot vote to include himself\");\r\n\t\tcontrollers[_controller] = true;\r\n\t\tcontrollerList.push(_controller);\r\n\t\treturn true;\r\n\t}\r\n\r\n    /**\r\n    * @dev Deletes a Controller\r\n\t* @param _controller - Controller to be deleted\r\n    * @return True if success\r\n    */\r\n\tfunction deleteController(address _controller) public onlyController returns (bool) {\r\n\t    require(_controller!=address(0), \"Invalid Controller address\");\r\n\t\trequire(controllerList.length>1, \"Cannot leave the wallet without a controller\");\r\n\t\tdelete(controllers[_controller]);\r\n\t\tfor (uint256 i = 0; i < controllerList.length; i++) {\r\n\t\t    if (controllerList[i] == _controller) {\r\n\t\t        controllerList[i] = controllerList[controllerList.length-1];\r\n                delete controllerList[controllerList.length-1];\r\n                controllerList.length--;\r\n                return true;\r\n\t\t    }\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n    /**\r\n    * @dev Getter for the wallet balance for a given asset\r\n\t* @param _assetAddress - Asset to check balance\r\n    * @return Balance\r\n    */\r\n\tfunction getBalance(address _assetAddress) public view returns (uint256) {\r\n\t    MBDAAsset mbda2 = MBDAAsset(_assetAddress);\r\n\t\treturn mbda2.balanceOf(address(this));\r\n\t}\r\n\r\n    /**\r\n    * @dev Transfer and ERC20 asset\r\n\t* @param _assetAddress - Asset\r\n\t* @param _recipient - Recipient\r\n\t* @param _amount - Amount to be transferred\r\n\t* @notice USE NATIVE TOKEN DECIMAL PLACES\r\n    * @return True if success\r\n    */\r\n\tfunction transfer(address _assetAddress, address _recipient, uint256 _amount) public onlyController returns (bool) {\r\n\t\trequire(_recipient!=address(0), \"Invalid address\");\r\n\t\tMBDAAsset mbda = MBDAAsset(_assetAddress);\r\n\t\trequire(mbda.balanceOf(address(this))>=_amount, \"Insufficient balance\");\r\n\t\treturn mbda.transfer(_recipient, _amount);\r\n\t}\r\n\r\n    /**\r\n    * @dev Getter for the Recipient\r\n    * @return Recipient (string converted)\r\n    */\r\n    function getRecipient() public view returns (string memory) {\r\n        return recipient;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter for the Recipient ID\r\n    * @return Recipient (bytes32)\r\n    */\r\n    function getRecipientID() external view returns (bytes32) {\r\n        return recipientID;\r\n    }\r\n\r\n    /**\r\n    * @dev Change the recipient of the wallet\r\n\t* @param recipientExternalID - Recipient ID\r\n    * @return True if success\r\n    */\r\n    function changeRecipient(string memory recipientExternalID) public onlyController returns (bool) {\r\n\t\trecipientID = keccak256(abi.encodePacked(recipientExternalID));\r\n\t\trecipient = recipientExternalID;\r\n\t\treturn true;\r\n\t}\r\n\r\n    /**\r\n    * @dev Fallback\r\n\t* Emits an event on ether received\r\n    */\r\n\tfunction() external payable {\r\n\t    emit EtherReceived(msg.sender, msg.value);\r\n\t}\r\n\r\n    /**\r\n    * @dev Withdraw Ether from the contract\r\n\t* @param _beneficiary - Destination\r\n\t* @param _amount - Amount\r\n    * @return True if success\r\n    */\r\n\tfunction withdrawEther(address payable _beneficiary, uint256 _amount) public onlyController returns (bool) {\r\n\t    require(address(this).balance>=_amount, \"There is not enough balance\");\r\n\t    (bool success, ) = _beneficiary.call.value(_amount)(\"\");\r\n\t    require(success,\"Transfer failed.\"); \r\n\t    return success;\r\n\t}\r\n\r\n\tfunction isController(address _checkAddress) external view returns (bool) {\r\n\t    return controllers[_checkAddress];\r\n\t}\r\n}\r\n/**\r\n* @dev Wallet Factory\r\n*/\r\ncontract MBDAWalletFactory {\r\n    struct Wallet {\r\n        string recipientID;\r\n        address walletAddress;\r\n        address controller;\r\n    }\r\n\r\n    Wallet[] public wallets;\r\n    mapping(string => Wallet) public walletsIDMap;\r\n\r\n    event NewWalletCreated(address walletAddress, address indexed controller, string recipientExternalID);\r\n\r\n    /**\r\n    * @dev Creates a new wallet\r\n    * @param _controller - Controller of the new wallet\r\n    * @param recipientExternalID - The Recipient ID (managed externally)\r\n    * @return true if success\r\n    */\r\n    function CreateWallet(address _controller, string memory recipientExternalID)\r\n        public\r\n        returns (bool)\r\n    {\r\n        Wallet memory wallet = walletsIDMap[recipientExternalID];\r\n        if (wallet.walletAddress != address(0x0)) {\r\n            return false;\r\n        }\r\n        MBDAWallet newWallet = (new MBDAWallet)(_controller, recipientExternalID);\r\n        wallet = Wallet(recipientExternalID, address(newWallet), _controller);\r\n        wallets.push(wallet);\r\n        walletsIDMap[recipientExternalID] = wallet;\r\n        emit NewWalletCreated(address(newWallet), _controller,  recipientExternalID);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Total Wallets ever created\r\n    * @return the total wallets ever created\r\n    */\r\n    function getTotalWalletsCreated() public view returns(uint256) {\r\n        return wallets.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Wallet getter\r\n    * @param recipientID recipient ID\r\n    * @return Wallet (for frontend use)\r\n    */\r\n    function getWallet(string calldata recipientID) external view returns (Wallet memory) {\r\n        require(walletsIDMap[recipientID].walletAddress != address(0x0), \"invalid wallet\");\r\n        return walletsIDMap[recipientID];\r\n    }\r\n}\r\n\r\n/**\r\n * @title MBDAManager is a contract that generates tokens that represents a investment fund units and manages them\r\n */\r\ncontract MBDAManager {\r\n\r\n    struct FundTokenContract {\r\n        address fundManager;\r\n        address fundContractAddress;\r\n        string fundTokenSymbol;\r\n        bool exists;\r\n    }\r\n\r\n    FundTokenContract[] public contracts;\r\n    mapping(address => FundTokenContract) public contractsMap;\r\n\r\n    event NewFundCreated(address indexed fundManager, address indexed tokenAddress, string indexed tokenSymbol);\r\n\r\n    /**\r\n    * @dev Creates a new fund token\r\n\t* @param _fundManager - Manager\r\n    * @param _fundChairman - Chairman\r\n    * @param _tokenName - Detailed ERC20 token name\r\n    * @param _decimalUnits - Detailed ERC20 decimal units\r\n    * @param _tokenSymbol - Detailed ERC20 token symbol\r\n    * @param _lockedUntilBlock - Block lock\r\n    * @param _newTotalSupply - Total Supply owned by the contract itself, only Manager can move\r\n    * @param _canChangeAssetsType - True allows the Manager to change assets in the portfolio\r\n    * @param _canChangeAssetsQuantity - True allows Manager to rebalance the portfolio\r\n    * @param _hasWhiteList - Allows transfering only between whitelisted addresses\r\n    * @param _isSyndicate - Allows secondary market\r\n    * @return Address of the newly created token\r\n    */\r\n    function newFund\r\n    (\r\n        address _fundManager,\r\n        address _fundChairman,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        uint256 _lockedUntilBlock,\r\n        uint256 _newTotalSupply,\r\n        bool _canChangeAssetsType,\r\n        bool _canChangeAssetsQuantity,\r\n        bool _hasWhiteList,\r\n        bool _isSyndicate\r\n    )\r\n        public\r\n        returns (address newFundTokenAddress)\r\n    {\r\n        MBDAAsset ft = new MBDAAsset(\r\n            _fundManager,\r\n            _fundChairman,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _lockedUntilBlock,\r\n            _newTotalSupply,\r\n            _canChangeAssetsType,\r\n            _canChangeAssetsQuantity,\r\n            _hasWhiteList,\r\n            _isSyndicate\r\n        );\r\n        newFundTokenAddress = address(ft);\r\n        FundTokenContract memory ftc = FundTokenContract(_fundManager, newFundTokenAddress, _tokenSymbol, true);\r\n        contracts.push(ftc);\r\n        contractsMap[ftc.fundContractAddress] = ftc;\r\n        emit NewFundCreated(_fundManager, newFundTokenAddress, _tokenSymbol);\r\n        return newFundTokenAddress;\r\n    }\r\n\r\n    /**\r\n    * @return Total number of funds created\r\n    */\r\n    function totalContractsGenerated()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return contracts.length;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title MbdaBoard is the smart contract that will control all funds\r\n* */\r\ncontract MbdaBoard {\r\n\r\n    uint public minVotes; //minimum number of votes to execute a proposal\r\n\r\n    mapping(address => bool) public boardMembers; //board members\r\n    address[] public boardMembersList; // array with member addresses\r\n\r\n    /// @dev types of proposal allowed they are Solidity function signatures (bytes4) default ones are added on deploy later more can be added through a proposal\r\n    mapping (string => bytes4) public proposalTypes;\r\n    uint public totalProposals;\r\n\r\n    /// @notice proposal Struct\r\n\tstruct Proposal {\r\n\t    string proposalType;\r\n\t\taddress payable destination;\r\n\t    uint value;\r\n\t\tuint8 votes;\r\n\t\tbool executed;\r\n\t\tbool exists;\r\n\t\tbytes proposal; /// @dev ABI encoded parameters for the function of the proposal type\r\n\t\tbool success;\r\n\t\tbytes returnData;\r\n\t\tmapping(address => bool) voters;\r\n\t}\r\n\r\n    mapping (uint => Proposal) public proposals;\r\n\r\n    /// @dev restricts calls to board members\r\n    modifier onlyBoardMember() {\r\n\t\trequire(boardMembers[msg.sender], \"Sender must be a Board Member\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev restricts calls to the board itself (these can only be called from a voted proposal)\r\n    modifier onlyBoard() {\r\n\t\trequire(msg.sender == address(this), \"Sender must the Board\");\r\n\t\t_;\r\n\t}\r\n\r\n    /// @dev Events\r\n\tevent NewProposal(uint256 proposalID, string indexed proposalType, bytes proposalPayload);\r\n\tevent Voted(address boardMember, uint proposalId);\r\n\tevent ProposalApprovedAndEnforced(uint256 proposalID, bytes payload, bool success, bytes returnData);\r\n\tevent Deposit(uint value);\r\n\r\n    /**\r\n    * @dev Constructor\r\n\t* @param _initialMembers - Initial board's members\r\n    * @param _minVotes - minimum votes to approve a proposal\r\n\t* @param _proposalTypes - Proposal types to add upon deployment\r\n\t* @param _ProposalTypeDescriptions - Description of the proposal types\r\n    */\r\n\tconstructor (\r\n\t\taddress[] memory _initialMembers,\r\n\t\tuint _minVotes,\r\n\t\tbytes4[] memory _proposalTypes,\r\n\t\tstring[] memory _ProposalTypeDescriptions\r\n\t) public {\r\n\t    require (_initialMembers.length >= _minVotes, \"Member list length must be equal or higher than minVotes\");\r\n\t    for (uint i = 0; i < _initialMembers.length; i++) {\r\n\t        require(!boardMembers[_initialMembers[i]], \"Duplicate Board Member sent\");\r\n\t        boardMembersList.push(_initialMembers[i]);\r\n\t        boardMembers[_initialMembers[i]] = true;\r\n\t    }\r\n\t    minVotes = _minVotes;\r\n\r\n\t    // setting up default proposalTypes (board management txs)\r\n\t    proposalTypes[\"addProposalType\"] = 0xeaa0dff1;\r\n\t    proposalTypes[\"removeProposalType\"] = 0x746d26b5;\r\n\t    proposalTypes[\"changeMinVotes\"] = 0x9bad192a;\r\n\t    proposalTypes[\"addBoardMember\"] = 0x1eac03ae;\r\n\t    proposalTypes[\"removeBoardMember\"] = 0x39a169f9;\r\n\t    proposalTypes[\"replaceBoardMember\"] = 0xbec44b4f;\r\n\r\n\t    // setting up user provided approved proposalTypes\r\n\t    if (_proposalTypes.length > 0) {\r\n\t        require(_proposalTypes.length == _ProposalTypeDescriptions.length, \"Proposal types and descriptions do not match\");\r\n\t        for (uint i = 0; i < _proposalTypes.length; i++)\r\n\t            proposalTypes[_ProposalTypeDescriptions[i]] = _proposalTypes[i];\r\n\t    }\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Adds a proposal and vote on it (onlyMember)\r\n\t* @notice every proposal is a transaction to be executed by the board transaction type of proposal have to be previously approved (function sig)\r\n\t* @param _type - proposal type\r\n\t* @param _data - proposal data (ABI encoded)\r\n\t* @param _destination - address to send the transaction to\r\n\t* @param _value - value of the transaction\r\n    * @return The ID of the proposal\r\n    */\r\n\tfunction addProposal(\r\n\t\tstring memory _type,\r\n\t\tbytes memory _data,\r\n\t\taddress payable _destination,\r\n\t\tuint _value\r\n\t) public onlyBoardMember returns (uint proposalID) {\r\n\t\trequire(proposalTypes[_type] != bytes4(0x0), \"Invalid proposal type\");\r\n\t    totalProposals++;\r\n\t\tproposalID = totalProposals;\r\n\r\n\t\tProposal memory prop = Proposal(_type, _destination, _value, 0, false, true, _data, false, bytes(\"\"));\r\n\t\tproposals[proposalID] = prop;\r\n\t\temit NewProposal(proposalID, _type, _data);\r\n\r\n\t\t// proposer automatically votes\r\n\t\trequire (vote(proposalID), \"Voting on the new proposal failed\");\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Vote on a given proposal (onlyMember)\r\n\t* @param _proposalID - Proposal ID\r\n    * @return True if success\r\n    */\r\n\tfunction vote(uint _proposalID) public onlyBoardMember returns (bool) {\r\n\t    require(proposals[_proposalID].exists, \"The proposal is not found\");\r\n\t\trequire(!proposals[_proposalID].voters[msg.sender], \"This board member has voted already\");\r\n\t\trequire(!proposals[_proposalID].executed, \"This proposal has been approved and enforced\");\r\n\r\n\t\tproposals[_proposalID].votes++;\r\n\t\tproposals[_proposalID].voters[msg.sender] = true;\r\n\t\temit Voted(msg.sender, _proposalID);\r\n\r\n\t\tif (proposals[_proposalID].votes >= minVotes)\r\n\t\t    executeProposal(_proposalID);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Executes a proposal (internal)\r\n\t* @param _proposalID - Proposal ID\r\n    */\r\n\tfunction executeProposal(uint _proposalID) internal {\r\n\t    Proposal memory prop = proposals[_proposalID];\r\n\t    bytes memory payload = abi.encodePacked(proposalTypes[prop.proposalType],prop.proposal);\r\n\t\tproposals[_proposalID].executed = true;\r\n\t    (bool success, bytes memory returnData) = prop.destination.call.value(prop.value)(payload);\r\n\t    proposals[_proposalID].success = success;\r\n\t    proposals[_proposalID].returnData = returnData;\r\n\t    emit ProposalApprovedAndEnforced(_proposalID, payload,  success, returnData);\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Adds a proposal type (onlyBoard)\r\n\t* @param _id - The name of the proposal Type\r\n\t* @param _signature - 4 byte signature of the function to be called\r\n    * @return True if success\r\n    */\r\n\tfunction addProposalType(string memory _id, bytes4 _signature) public onlyBoard returns (bool) {\r\n\t    proposalTypes[_id] = _signature;\r\n\t    return true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Removes a proposal type (onlyBoard)\r\n\t* @param _id - The name of the proposal Type\r\n    * @return True if success\r\n    */\r\n\tfunction removeProposalType(string memory _id) public onlyBoard returns (bool) {\r\n\t    proposalTypes[_id] = bytes4(\"\");\r\n\t    return true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Changes the amount of votes needed to approve a proposal (onlyBoard)\r\n\t* @param _minVotes - New minimum quorum to approve proposals\r\n    * @return True if success\r\n    */\r\n\tfunction changeMinVotes(uint _minVotes) public onlyBoard returns (bool) {\r\n\t\trequire(_minVotes > 0, \"MinVotes cannot be less than 0\");\r\n\t\trequire(_minVotes <= boardMembersList.length, \"MinVotes lower than number of members\");\r\n\t    minVotes = _minVotes;\r\n\t    return true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Adds a board member (onlyBoard)\r\n\t* @param _newMember - New member to be added\r\n    * @return True if success\r\n    */\r\n\tfunction addBoardMember(address _newMember) public onlyBoard returns (bool) {\r\n        require(!boardMembers[_newMember], \"Duplicate Board Member sent\");\r\n        boardMembersList.push(_newMember);\r\n        boardMembers[_newMember] = true;\r\n        if (boardMembersList.length > 1 && minVotes == 0) {\r\n            minVotes = 1;\r\n        }\r\n        return true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Removes a board member (onlyBoard)\r\n\t* @param _member - Member to be added\r\n    * @return True if success\r\n    */\r\n\tfunction removeBoardMember(address _member) public onlyBoard returns (bool) {\r\n\t    boardMembers[_member] = false;\r\n\t    for (uint i = 0; i < boardMembersList.length; i++) {\r\n\t        if (boardMembersList[i] == _member) {\r\n\t            boardMembersList[i] = boardMembersList[boardMembersList.length - 1];\r\n\t            boardMembersList.length --;\r\n\t        }\r\n\t    }\r\n\t\tif (boardMembersList.length < minVotes) {\r\n\t\t    minVotes = boardMembersList.length;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Replaces a board member (onlyBoard)\r\n\t* @param _oldMember - Old member to be replaced\r\n\t* @param _newMember - New member to be added\r\n    * @return True if success\r\n    */\r\n\tfunction replaceBoardMember(address _oldMember, address _newMember) public onlyBoard returns (bool) {\r\n\t    require(removeBoardMember(_oldMember), \"Failed to remove old member\");\r\n\t    return addBoardMember(_newMember);\r\n\t}\r\n\r\n   \t/**\r\n    * @dev Fallback\r\n    */\r\n\tfunction () external payable{\r\n\t    emit Deposit(msg.value);\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"NewFundCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractsMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundChairman\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canChangeAssetsType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canChangeAssetsQuantity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSyndicate\",\"type\":\"bool\"}],\"name\":\"newFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFundTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContractsGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MBDAManager","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://84d171fa57d8c4eacab8b9003947c7b9f914d553d569154018d7ff71a0482242"}]}