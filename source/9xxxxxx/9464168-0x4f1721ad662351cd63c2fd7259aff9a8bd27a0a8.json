{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DharmaReserveManagerV1Interface {\r\n  event RoleModified(Role indexed role, address account);\r\n\r\n  event RolePaused(Role indexed role);\r\n\r\n  event RoleUnpaused(Role indexed role);\r\n\r\n  enum Role {\r\n    DEPOSIT_MANAGER,\r\n    ADJUSTER,\r\n    PAUSER\r\n  }\r\n\r\n  struct RoleStatus {\r\n    address account;\r\n    bool paused;\r\n  }\r\n\r\n  function finalizeDaiDeposit(\r\n    address smartWallet, address initialUserSigningKey, uint256 daiAmount\r\n  ) external;\r\n\r\n  function finalizeDharmaDaiDeposit(\r\n    address smartWallet, address initialUserSigningKey, uint256 dDaiAmount\r\n  ) external;\r\n\r\n  function mint(uint256 daiAmount) external;\r\n  \r\n  function redeem(uint256 dDaiAmount) external;\r\n\r\n  function withdrawDai(address recipient, uint256 daiAmount) external;\r\n\r\n  function withdrawDharmaDai(address recipient, uint256 dDaiAmount) external;\r\n\r\n  function withdraw(ERC20Interface token, address recipient, uint256 amount) external;\r\n\r\n  function call(\r\n    address payable target, uint256 amount, bytes calldata data\r\n  ) external returns (bool ok, bytes memory returnData);\r\n  \r\n  function setLimit(uint256 daiAmount) external;\r\n\r\n  function setRole(Role role, address account) external;\r\n\r\n  function removeRole(Role role) external;\r\n\r\n  function pause(Role role) external;\r\n\r\n  function unpause(Role role) external;\r\n\r\n  function isPaused(Role role) external view returns (bool paused);\r\n\r\n  function isRole(Role role) external view returns (bool hasRole);\r\n\r\n  function getDepositManager() external view returns (address operator);\r\n\r\n  function getAdjuster() external view returns (address recoverer);\r\n\r\n  function getPauser() external view returns (address pauser);\r\n  \r\n  function getReserves() external view returns (\r\n    uint256 dai, uint256 dDai, uint256 dDaiUnderlying\r\n  );\r\n  \r\n  function getLimit() external view returns (\r\n    uint256 daiAmount, uint256 dDaiAmount\r\n  );\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n  function balanceOf(address) external view returns (uint256);\r\n  function approve(address, uint256) external returns (bool);\r\n  function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ninterface DTokenInterface {\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n  function redeem(uint256 dTokensToBurn) external returns (uint256 underlyingReceived);\r\n  function balanceOf(address) external view returns (uint256);\r\n  function balanceOfUnderlying(address) external view returns (uint256);\r\n  function transfer(address, uint256) external returns (bool);\r\n  function exchangeRateCurrent() external view returns (uint256);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    return a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    return a / b;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n *\r\n * In order to transfer ownership, a recipient must be specified, at which point\r\n * the specified recipient can call `acceptOwnership` and take ownership.\r\n */\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaReserveManagerV0 (Proof of Concept)\r\n * @author 0age\r\n * @notice This contract is owned by an Reserve Manager multisig and manages\r\n * Dharma's reserves. It designates a collection of various \"roles\" - these\r\n * are dedicated accounts that can be modified by the owner, and that can\r\n * trigger specific functionality on the manager. These roles are:\r\n *  - depositManager (0): initiates token transfers to smart wallets\r\n *  - adjuster (1): mints and redeems dDai held in reserves to optimize for gas usage\r\n *  - pauser (2): pauses any role (where only the owner is then able to unpause it)\r\n */\r\ncontract DharmaReserveManagerV0 is DharmaReserveManagerV1Interface, TwoStepOwnable {\r\n  using SafeMath for uint256;\r\n\r\n  // Maintain a role status mapping with assigned accounts and paused states.\r\n  mapping(uint256 => RoleStatus) private _roles;\r\n  \r\n  // Maintain a maximum allowable transfer size (in Dai) for the deposit manager.\r\n  uint256 private _limit;\r\n\r\n  ERC20Interface internal constant _DAI = ERC20Interface(\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F // mainnet\r\n  );\r\n\r\n  DTokenInterface internal constant _DDAI = DTokenInterface(\r\n    0x00000000001876eB1444c986fD502e618c587430\r\n  );\r\n  \r\n  bytes internal constant _walletCreationCode = hex\"60806040526040516104423803806104428339818101604052602081101561002657600080fd5b810190808051604051939291908464010000000082111561004657600080fd5b90830190602082018581111561005b57600080fd5b825164010000000081118282018810171561007557600080fd5b82525081516020918201929091019080838360005b838110156100a257818101518382015260200161008a565b50505050905090810190601f1680156100cf5780820380516001836020036101000a031916815260200191505b5060405250505060006100e661019e60201b60201c565b6001600160a01b0316826040518082805190602001908083835b6020831061011f5780518252601f199092019160209182019101610100565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461017f576040519150601f19603f3d011682016040523d82523d6000602084013e610184565b606091505b5050905080610197573d6000803e3d6000fd5b50506102be565b60405160009081906060906e26750c571ce882b17016557279adaa9083818181855afa9150503d80600081146101f0576040519150601f19603f3d011682016040523d82523d6000602084013e6101f5565b606091505b509150915081819061029f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561026457818101518382015260200161024c565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508080602001905160208110156102b557600080fd5b50519392505050565b610175806102cd6000396000f3fe608060405261001461000f610016565b61011c565b005b60405160009081906060906e26750c571ce882b17016557279adaa9083818181855afa9150503d8060008114610068576040519150601f19603f3d011682016040523d82523d6000602084013e61006d565b606091505b50915091508181906100fd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156100c25781810151838201526020016100aa565b50505050905090810190601f1680156100ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080806020019051602081101561011357600080fd5b50519392505050565b3660008037600080366000845af43d6000803e80801561013b573d6000f35b3d6000fdfea265627a7a7231582020202020202055706772616465426561636f6e50726f7879563120202020202064736f6c634300050b0032\";\r\n\r\n  /**\r\n   * @notice In the constructor, set the initial owner to the transaction\r\n   * submitter and initial minimum timelock interval and default timelock\r\n   * expiration values.\r\n   */\r\n  constructor() public {\r\n    // Call Dai to set an allowance for Dharma Dai in order to mint dDai.\r\n    require(_DAI.approve(address(_DDAI), uint256(-1)));\r\n    \r\n    // Set the initial limit to 300 Dai.\r\n    _limit = 300000000000000000000;\r\n  }\r\n\r\n  function finalizeDaiDeposit(\r\n    address smartWallet, address initialUserSigningKey, uint256 daiAmount\r\n  ) external onlyOwnerOr(Role.DEPOSIT_MANAGER) {\r\n    // Ensure that the recipient is indeed a smart wallet.\r\n    _ensureRecipientIsSmartWallet(smartWallet, initialUserSigningKey);\r\n    \r\n    // Ensure that the amount to transfer is lower than the limit.\r\n    require(daiAmount < _limit, \"Transfer size exceeds the limit.\");\r\n    \r\n    // Transfer the Dai to the specified smart wallet.\r\n    require(_DAI.transfer(smartWallet, daiAmount), \"Dai transfer failed.\");\r\n  }\r\n\r\n  function finalizeDharmaDaiDeposit(\r\n    address smartWallet, address initialUserSigningKey, uint256 dDaiAmount\r\n  ) external onlyOwnerOr(Role.DEPOSIT_MANAGER) {\r\n    // Ensure that the recipient is indeed a smart wallet.\r\n    _ensureRecipientIsSmartWallet(smartWallet, initialUserSigningKey);\r\n    \r\n    // Get the current dDai exchange rate.\r\n    uint256 exchangeRate = _DDAI.exchangeRateCurrent();\r\n    \r\n    // Get the equivalent Dai amount of the transfer.\r\n    uint256 daiEquivalent = (dDaiAmount.mul(exchangeRate)) / 1e18;\r\n    \r\n    // Ensure that the amount to transfer is lower than the limit.\r\n    require(daiEquivalent < _limit, \"Transfer size exceeds the limit.\");\r\n\r\n    // Transfer the dDai to the specified smart wallet.\r\n    require(_DDAI.transfer(smartWallet, dDaiAmount), \"dDai transfer failed.\");\r\n  }\r\n\r\n  function mint(uint256 daiAmount) external onlyOwnerOr(Role.ADJUSTER) {\r\n    // Use the specified amount of Dai to mint dDai.\r\n    _DDAI.mint(daiAmount);\r\n  }\r\n  \r\n  function redeem(uint256 dDaiAmount) external onlyOwnerOr(Role.ADJUSTER) {\r\n    // Redeem the specified amount of dDai for Dai.\r\n    _DDAI.redeem(dDaiAmount);\r\n  }\r\n\r\n  function withdrawDai(address recipient, uint256 daiAmount) external onlyOwner {\r\n    // Transfer the Dai to the specified recipient.\r\n    require(_DAI.transfer(recipient, daiAmount), \"Dai transfer failed.\");\r\n  }\r\n\r\n  function withdrawDharmaDai(address recipient, uint256 dDaiAmount) external onlyOwner {\r\n    // Transfer the dDai to the specified recipient.\r\n    require(_DDAI.transfer(recipient, dDaiAmount), \"dDai transfer failed.\");\r\n  }\r\n  \r\n  function withdraw(\r\n    ERC20Interface token, address recipient, uint256 amount\r\n  ) external onlyOwner {\r\n    // Transfer the token to the specified recipient.\r\n    token.transfer(recipient, amount);\r\n  }  \r\n  \r\n  function call(\r\n    address payable target, uint256 amount, bytes calldata data\r\n  ) external onlyOwner returns (bool ok, bytes memory returnData) {\r\n    // Call the specified target and supply the specified data.\r\n    (ok, returnData) = target.call.value(amount)(data);\r\n  }\r\n  \r\n  function setLimit(uint256 daiAmount) external onlyOwner {\r\n    // Set the new limit.\r\n    _limit = daiAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Pause a currently unpaused role and emit a `RolePaused` event. Only\r\n   * the owner or the designated pauser may call this function. Also, bear in\r\n   * mind that only the owner may unpause a role once paused.\r\n   * @param role The role to pause. Permitted roles are deposit manager (0),\r\n   * adjuster (1), and pauser (2).\r\n   */\r\n  function pause(Role role) external onlyOwnerOr(Role.PAUSER) {\r\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\r\n    require(!storedRoleStatus.paused, \"Role in question is already paused.\");\r\n    storedRoleStatus.paused = true;\r\n    emit RolePaused(role);\r\n  }\r\n\r\n  /**\r\n   * @notice Unause a currently paused role and emit a `RoleUnpaused` event.\r\n   * Only the owner may call this function.\r\n   * @param role The role to pause. Permitted roles are deposit manager (0),\r\n   * adjuster (1), and pauser (2).\r\n   */\r\n  function unpause(Role role) external onlyOwner {\r\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\r\n    require(storedRoleStatus.paused, \"Role in question is already unpaused.\");\r\n    storedRoleStatus.paused = false;\r\n    emit RoleUnpaused(role);\r\n  }\r\n\r\n  /**\r\n   * @notice Set a new account on a given role and emit a `RoleModified` event\r\n   * if the role holder has changed. Only the owner may call this function.\r\n   * @param role The role that the account will be set for. Permitted roles are\r\n   * deposit manager (0), adjuster (1), and pauser (2).\r\n   * @param account The account to set as the designated role bearer.\r\n   */\r\n  function setRole(Role role, address account) external onlyOwner {\r\n    require(account != address(0), \"Must supply an account.\");\r\n    _setRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove any current role bearer for a given role and emit a\r\n   * `RoleModified` event if a role holder was previously set. Only the owner\r\n   * may call this function.\r\n   * @param role The role that the account will be removed from. Permitted roles\r\n   * are deposit manager (0), adjuster (1), and pauser (2).\r\n   */\r\n  function removeRole(Role role) external onlyOwner {\r\n    _setRole(role, address(0));\r\n  }\r\n\r\n  /**\r\n   * @notice External view function to check whether or not the functionality\r\n   * associated with a given role is currently paused or not. The owner or the\r\n   * pauser may pause any given role (including the pauser itself), but only the\r\n   * owner may unpause functionality. Additionally, the owner may call paused\r\n   * functions directly.\r\n   * @param role The role to check the pause status on. Permitted roles are\r\n   * deposit manager (0), adjuster (1), and pauser (2).\r\n   * @return A boolean to indicate if the functionality associated with the role\r\n   * in question is currently paused.\r\n   */\r\n  function isPaused(Role role) external view returns (bool paused) {\r\n    paused = _isPaused(role);\r\n  }\r\n\r\n  /**\r\n   * @notice External view function to check whether the caller is the current\r\n   * role holder.\r\n   * @param role The role to check for. Permitted roles are deposit manager (0),\r\n   * adjuster (1), and pauser (2).\r\n   * @return A boolean indicating if the caller has the specified role.\r\n   */\r\n  function isRole(Role role) external view returns (bool hasRole) {\r\n    hasRole = _isRole(role);\r\n  }\r\n\r\n  function getDepositManager() external view returns (address depositManager) {\r\n    depositManager = _roles[uint256(Role.DEPOSIT_MANAGER)].account;\r\n  }\r\n\r\n  function getAdjuster() external view returns (address adjuster) {\r\n    adjuster = _roles[uint256(Role.ADJUSTER)].account;\r\n  }\r\n\r\n  /**\r\n   * @notice External view function to check the account currently holding the\r\n   * pauser role. The pauser can pause any role from taking its standard action,\r\n   * though the owner will still be able to call the associated function in the\r\n   * interim and is the only entity able to unpause the given role once paused.\r\n   * @return The address of the current pauser, or the null address if none is\r\n   * set.\r\n   */\r\n  function getPauser() external view returns (address pauser) {\r\n    pauser = _roles[uint256(Role.PAUSER)].account;\r\n  }\r\n  \r\n  function getReserves() external view returns (\r\n    uint256 dai, uint256 dDai, uint256 dDaiUnderlying\r\n  ) {\r\n    dai = _DAI.balanceOf(address(this));\r\n    dDai = _DDAI.balanceOf(address(this));\r\n    dDaiUnderlying = _DDAI.balanceOfUnderlying(address(this));\r\n  }\r\n  \r\n  function getLimit() external view returns (\r\n    uint256 daiAmount, uint256 dDaiAmount\r\n  ) {\r\n    daiAmount = _limit;\r\n    dDaiAmount = (daiAmount.mul(1e18)).div(_DDAI.exchangeRateCurrent());   \r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set a new account on a given role and emit a\r\n   * `RoleModified` event if the role holder has changed.\r\n   * @param role The role that the account will be set for. Permitted roles are\r\n   * deposit manager (0), adjuster (1), and pauser (2).\r\n   * @param account The account to set as the designated role bearer.\r\n   */\r\n  function _setRole(Role role, address account) internal {\r\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\r\n\r\n    if (account != storedRoleStatus.account) {\r\n      storedRoleStatus.account = account;\r\n      emit RoleModified(role, account);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to check whether the caller is the current\r\n   * role holder.\r\n   * @param role The role to check for. Permitted roles are deposit manager (0),\r\n   * adjuster (1), and pauser (2).\r\n   * @return A boolean indicating if the caller has the specified role.\r\n   */\r\n  function _isRole(Role role) internal view returns (bool hasRole) {\r\n    hasRole = msg.sender == _roles[uint256(role)].account;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to check whether the given role is paused or\r\n   * not.\r\n   * @param role The role to check for. Permitted roles are deposit manager (0),\r\n   * adjuster (1), and pauser (2).\r\n   * @return A boolean indicating if the specified role is paused or not.\r\n   */\r\n  function _isPaused(Role role) internal view returns (bool paused) {\r\n    paused = _roles[uint256(role)].paused;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to enforce that the given initial user signing\r\n   * key resolves to the given smart wallet when deployed through the Dharma Smart\r\n   * Wallet Factory V1.\r\n   * @param smartWallet address The smart wallet.\r\n   * @param initialUserSigningKey address The initial user signing key.\r\n   */\r\n  function _ensureRecipientIsSmartWallet(\r\n    address smartWallet, address initialUserSigningKey\r\n  ) internal view {\r\n    bytes memory initCode = abi.encodePacked(\r\n      _walletCreationCode,\r\n      abi.encode(abi.encodeWithSelector(bytes4(0x30fc201f), smartWallet))\r\n    );\r\n\r\n    // Loop until an address that matches the provided one is found.\r\n    bool found = false;\r\n    address target;\r\n    uint256 nonce = 0;\r\n    while (nonce < 10) {\r\n      target = address(            // derive the target deployment address.\r\n        uint160(                   // downcast to match the address type.\r\n          uint256(                 // cast to uint to truncate upper digits.\r\n            keccak256(             // compute CREATE2 hash using 4 inputs.\r\n              abi.encodePacked(    // pack all inputs to the hash together.\r\n                bytes1(0xff),      // pass in the control character.\r\n                address(this),     // pass in the address of this contract.\r\n                nonce,             // pass in the salt from above.\r\n                initCode           // pass in hash of contract creation code.\r\n              )\r\n            )\r\n          )\r\n        )\r\n      );\r\n\r\n      // Exit the loop if provided smart wallet matches target address.\r\n      if (target == smartWallet) {\r\n        found = true;\r\n        break;\r\n      }\r\n\r\n      // Otherwise, increment the nonce and derive a new salt.\r\n      nonce++;\r\n    }\r\n    \r\n    require(found, \"Could not resolve smart wallet using provided signing key.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier that throws if called by any account other than the owner\r\n   * or the supplied role, or if the caller is not the owner and the role in\r\n   * question is paused.\r\n   * @param role The role to require unless the caller is the owner. Permitted\r\n   * roles are deposit manager (0), adjuster (1), and pauser (2).\r\n   */\r\n  modifier onlyOwnerOr(Role role) {\r\n    if (!isOwner()) {\r\n      require(_isRole(role), \"Caller does not have a required role.\");\r\n      require(!_isPaused(role), \"Role in question is currently paused.\");\r\n    }\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dDaiUnderlying\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialUserSigningKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"finalizeDaiDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdjuster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adjuster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dDaiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawDharmaDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dDaiAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"isRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialUserSigningKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dDaiAmount\",\"type\":\"uint256\"}],\"name\":\"finalizeDharmaDaiDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"removeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RolePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum DharmaReserveManagerV1Interface.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleUnpaused\",\"type\":\"event\"}]","ContractName":"DharmaReserveManagerV0","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e94d6ba93abce8c7f21e684aaa9738dba3ca9b69124c4f9b84a85208f4b475d8"}]}