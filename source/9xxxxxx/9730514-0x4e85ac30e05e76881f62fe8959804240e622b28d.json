{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: 9068f80\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\n@openzeppelin/contracts: (MIT) https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity 0.5.16;\n\n\ncontract Initializable {\n\n  \n  bool private initialized;\n\n  \n  bool private initializing;\n\n  \n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  \n  function isConstructor() private view returns (bool) {\n    \n    \n    \n    \n    \n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  \n  uint256[50] private ______gap;\n}\n\ncontract Context is Initializable {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract Claimable is Initializable, Ownable {\n    address public pendingOwner;\n\n    function initialize(address _nextOwner) public initializer {\n        Ownable.initialize(_nextOwner);\n    }\n\n    modifier onlyPendingOwner() {\n        require(\n            _msgSender() == pendingOwner,\n            \"Claimable: caller is not the pending owner\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(\n            newOwner != owner() && newOwner != pendingOwner,\n            \"Claimable: invalid new owner\"\n        );\n        pendingOwner = newOwner;\n    }\n\n    function claimOwnership() public onlyPendingOwner {\n        _transferOwnership(pendingOwner);\n        delete pendingOwner;\n    }\n}\n\nlibrary ECDSA {\n    \n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        \n        if (signature.length != 65) {\n            revert(\"ECDSA: signature length is invalid\");\n        }\n\n        \n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        \n        \n        \n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: signature.s is in the wrong range\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: signature.v is in the wrong range\");\n        }\n\n        \n        return ecrecover(hash, v, r, s);\n    }\n\n    \n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        \n        \n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\nlibrary String {\n    \n    \n    function fromUint(uint256 _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    \n    function fromBytes32(bytes32 _value) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(32 * 2 + 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < 32; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function fromAddress(address _addr) internal pure returns (string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(20 * 2 + 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < 20; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function add8(\n        string memory a,\n        string memory b,\n        string memory c,\n        string memory d,\n        string memory e,\n        string memory f,\n        string memory g,\n        string memory h\n    ) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b, c, d, e, f, g, h));\n    }\n}\n\nlibrary Compare {\n\n    function bytesEqual(bytes memory a, bytes memory b) internal pure returns (bool) {\n        if (a.length != b.length) {\n            return false;\n        }\n        for (uint i = 0; i < a.length; i ++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nlibrary Validate {\n    \n    \n    \n    \n    \n    function duplicatePropose(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        uint256 _validRound1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        uint256 _validRound2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(\n            !Compare.bytesEqual(_signature1, _signature2),\n            \"Validate: same signature\"\n        );\n        address signer1 = recoverPropose(\n            _height,\n            _round,\n            _blockhash1,\n            _validRound1,\n            _signature1\n        );\n        address signer2 = recoverPropose(\n            _height,\n            _round,\n            _blockhash2,\n            _validRound2,\n            _signature2\n        );\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPropose(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        uint256 _validRound,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return\n            ECDSA.recover(\n                sha256(\n                    proposeMessage(_height, _round, _blockhash, _validRound)\n                ),\n                _signature\n            );\n    }\n\n    function proposeMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        uint256 _validRound\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                \"Propose(Height=\",\n                String.fromUint(_height),\n                \",Round=\",\n                String.fromUint(_round),\n                \",BlockHash=\",\n                string(_blockhash),\n                \",ValidRound=\",\n                String.fromUint(_validRound),\n                \")\"\n            );\n    }\n\n    \n    \n    \n    \n    \n    function duplicatePrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(\n            !Compare.bytesEqual(_signature1, _signature2),\n            \"Validate: same signature\"\n        );\n        address signer1 = recoverPrevote(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1\n        );\n        address signer2 = recoverPrevote(\n            _height,\n            _round,\n            _blockhash2,\n            _signature2\n        );\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return\n            ECDSA.recover(\n                sha256(prevoteMessage(_height, _round, _blockhash)),\n                _signature\n            );\n    }\n\n    function prevoteMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                \"Prevote(Height=\",\n                String.fromUint(_height),\n                \",Round=\",\n                String.fromUint(_round),\n                \",BlockHash=\",\n                string(_blockhash),\n                \")\"\n            );\n    }\n\n    \n    \n    \n    \n    \n    function duplicatePrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(\n            !Compare.bytesEqual(_signature1, _signature2),\n            \"Validate: same signature\"\n        );\n        address signer1 = recoverPrecommit(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1\n        );\n        address signer2 = recoverPrecommit(\n            _height,\n            _round,\n            _blockhash2,\n            _signature2\n        );\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return\n            ECDSA.recover(\n                sha256(precommitMessage(_height, _round, _blockhash)),\n                _signature\n            );\n    }\n\n    function precommitMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                \"Precommit(Height=\",\n                String.fromUint(_height),\n                \",Round=\",\n                String.fromUint(_round),\n                \",BlockHash=\",\n                string(_blockhash),\n                \")\"\n            );\n    }\n\n    function recoverSecret(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return\n            ECDSA.recover(\n                sha256(secretMessage(_a, _b, _c, _d, _e, _f)),\n                _signature\n            );\n    }\n\n    function secretMessage(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                \"Secret(\",\n                \"ShamirShare(\",\n                String.fromUint(_a),\n                \",\",\n                String.fromUint(_b),\n                \",S256N(\",\n                String.fromUint(_c),\n                \"),\",\n                \"S256PrivKey(\",\n                \"S256N(\",\n                String.fromUint(_d),\n                \"),\",\n                \"S256P(\",\n                String.fromUint(_e),\n                \"),\",\n                \"S256P(\",\n                String.fromUint(_f),\n                \")\",\n                \")\",\n                \")\",\n                \")\"\n            );\n    }\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Proxy {\n  \n  function () payable external {\n    _fallback();\n  }\n\n  \n  function _implementation() internal view returns (address);\n\n  \n  function _delegate(address implementation) internal {\n    assembly {\n      \n      \n      \n      calldatacopy(0, 0, calldatasize)\n\n      \n      \n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      \n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      \n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  \n  function _willFallback() internal {\n  }\n\n  \n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\nlibrary OpenZeppelinUpgradesAddress {\n    \n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        \n        \n        \n        \n        \n        \n        \n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ncontract BaseUpgradeabilityProxy is Proxy {\n  \n  event Upgraded(address indexed implementation);\n\n  \n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  \n  function _implementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  \n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  \n  function _setImplementation(address newImplementation) internal {\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n  \n  constructor(address _logic, bytes memory _data) public payable {\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }  \n}\n\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n  \n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  \n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  \n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  \n  function admin() external ifAdmin returns (address) {\n    return _admin();\n  }\n\n  \n  function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  \n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  \n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  \n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  \n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  \n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  \n  function _willFallback() internal {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n  \n  function initialize(address _logic, bytes memory _data) public payable {\n    require(_implementation() == address(0));\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }  \n}\n\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\n  \n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\n    require(_implementation() == address(0));\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(_admin);\n  }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Detailed is Initializable, IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    \n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC20 is Initializable, Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    uint256[50] private ______gap;\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    function initialize(address sender) public initializer {\n        if (!isPauser(sender)) {\n            _addPauser(sender);\n        }\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract Pausable is Initializable, Context, PauserRole {\n    \n    event Paused(address account);\n\n    \n    event Unpaused(address account);\n\n    bool private _paused;\n\n    \n    function initialize(address sender) public initializer {\n        PauserRole.initialize(sender);\n\n        _paused = false;\n    }\n\n    \n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    \n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    \n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    \n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    \n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC20Pausable is Initializable, ERC20, Pausable {\n    function initialize(address sender) public initializer {\n        Pausable.initialize(sender);\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC20Burnable is Initializable, Context, ERC20 {\n    \n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    \n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\n    string private constant _name = \"REN\";\n    string private constant _symbol = \"REN\";\n    uint8 private constant _decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 *\n        10**uint256(_decimals);\n\n    \n    constructor() public {\n        ERC20Pausable.initialize(msg.sender);\n        ERC20Detailed.initialize(_name, _symbol, _decimals);\n        Ownable.initialize(msg.sender);\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function transferTokens(address beneficiary, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        \n        \n        require(amount > 0);\n\n        _transfer(msg.sender, beneficiary, amount);\n        emit Transfer(msg.sender, beneficiary, amount);\n\n        return true;\n    }\n}\n\nlibrary LinkedList {\n\n    \n    address public constant NULL = address(0);\n\n    \n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    \n    struct List {\n        mapping (address => Node) list;\n    }\n\n    \n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(newNode != address(0), \"LinkedList: invalid address\");\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(newNode != address(0), \"LinkedList: invalid address\");\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        \n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        \n        \n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    \n    function prepend(List storage self, address node) internal {\n        \n\n        insertBefore(self, begin(self), node);\n    }\n\n    \n    function append(List storage self, address node) internal {\n        \n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        \n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    \n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    \n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].previous;\n    }\n\n    function elements(List storage self, address _start, uint256 _count) internal view returns (address[] memory) {\n        require(_count > 0, \"LinkedList: invalid count\");\n        require(isInList(self, _start) || _start == address(0), \"LinkedList: not in list\");\n        address[] memory elems = new address[](_count);\n\n        \n        uint256 n = 0;\n        address nextItem = _start;\n        if (nextItem == address(0)) {\n            nextItem = begin(self);\n        }\n\n        while (n < _count) {\n            if (nextItem == address(0)) {\n                break;\n            }\n            elems[n] = nextItem;\n            nextItem = next(self, nextItem);\n            n += 1;\n        }\n        return elems;\n    }\n}\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        \n        \n        \n\n        \n        \n        \n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        \n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    \n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        \n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        \n        \n        \n        \n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    \n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        \n        \n\n        \n        \n        \n        \n        \n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        \n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { \n            \n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract CanReclaimTokens is Claimable {\n    using SafeERC20 for ERC20;\n\n    mapping(address => bool) private recoverableTokensBlacklist;\n\n    function initialize(address _nextOwner) public initializer {\n        Claimable.initialize(_nextOwner);\n    }\n\n    function blacklistRecoverableToken(address _token) public onlyOwner {\n        recoverableTokensBlacklist[_token] = true;\n    }\n\n    \n    \n    function recoverTokens(address _token) external onlyOwner {\n        require(\n            !recoverableTokensBlacklist[_token],\n            \"CanReclaimTokens: token is not recoverable\"\n        );\n\n        if (_token == address(0x0)) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20(_token).safeTransfer(\n                msg.sender,\n                ERC20(_token).balanceOf(address(this))\n            );\n        }\n    }\n}\n\ncontract DarknodeRegistryStore is Claimable, CanReclaimTokens {\n    using SafeMath for uint256;\n\n    string public VERSION; \n\n    \n    \n    \n    \n    \n    struct Darknode {\n        \n        \n        \n        \n        address payable owner;\n        \n        \n        \n        uint256 bond;\n        \n        uint256 registeredAt;\n        \n        uint256 deregisteredAt;\n        \n        \n        \n        \n        bytes publicKey;\n    }\n\n    \n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    \n    RenToken public ren;\n\n    \n    \n    \n    \n    constructor(string memory _VERSION, RenToken _ren) public {\n        Claimable.initialize(msg.sender);\n        CanReclaimTokens.initialize(msg.sender);\n        VERSION = _VERSION;\n        ren = _ren;\n        blacklistRecoverableToken(address(ren));\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function appendDarknode(\n        address _darknodeID,\n        address payable _darknodeOperator,\n        uint256 _bond,\n        bytes calldata _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOperator,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    \n    function begin() external view onlyOwner returns (address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    \n    \n    function next(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (address)\n    {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    \n    \n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(\n            ren.transfer(owner(), bond),\n            \"DarknodeRegistryStore: bond transfer failed\"\n        );\n    }\n\n    \n    \n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond)\n        external\n        onlyOwner\n    {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        require(\n            decreasedBond < previousBond,\n            \"DarknodeRegistryStore: bond not decreased\"\n        );\n        darknodeRegistry[darknodeID].bond = decreasedBond;\n        require(\n            ren.transfer(owner(), previousBond.sub(decreasedBond)),\n            \"DarknodeRegistryStore: bond transfer failed\"\n        );\n    }\n\n    \n    function updateDarknodeDeregisteredAt(\n        address darknodeID,\n        uint256 deregisteredAt\n    ) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    \n    function darknodeOperator(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (address payable)\n    {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    \n    function darknodeBond(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (uint256)\n    {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    \n    function darknodeRegisteredAt(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (uint256)\n    {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    \n    function darknodeDeregisteredAt(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (uint256)\n    {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    \n    function darknodePublicKey(address darknodeID)\n        external\n        view\n        onlyOwner\n        returns (bytes memory)\n    {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\ninterface IDarknodePaymentStore {}\n\ninterface IDarknodePayment {\n    function changeCycle() external returns (uint256);\n    function store() external view returns (IDarknodePaymentStore);\n}\n\ninterface IDarknodeSlasher {}\n\ncontract DarknodeRegistryStateV1 {\n    using SafeMath for uint256;\n\n    string public VERSION; \n\n    \n    \n    \n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocktime;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    \n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n    uint256 public deregistrationInterval;\n\n    \n    \n    \n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n\n    \n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    \n    RenToken public ren;\n\n    \n    DarknodeRegistryStore public store;\n\n    \n    IDarknodePayment public darknodePayment;\n\n    \n    IDarknodeSlasher public slasher;\n    IDarknodeSlasher public nextSlasher;\n}\n\ncontract DarknodeRegistryLogicV1 is\n    Claimable,\n    CanReclaimTokens,\n    DarknodeRegistryStateV1\n{\n    \n    \n    \n    \n    event LogDarknodeRegistered(\n        address indexed _darknodeOperator,\n        address indexed _darknodeID,\n        uint256 _bond\n    );\n\n    \n    \n    \n    event LogDarknodeDeregistered(\n        address indexed _darknodeOperator,\n        address indexed _darknodeID\n    );\n\n    \n    \n    \n    event LogDarknodeRefunded(\n        address indexed _darknodeOperator,\n        address indexed _darknodeID,\n        uint256 _amount\n    );\n\n    \n    \n    \n    \n    \n    event LogDarknodeSlashed(\n        address indexed _darknodeOperator,\n        address indexed _darknodeID,\n        address indexed _challenger,\n        uint256 _percentage\n    );\n\n    \n    event LogNewEpoch(uint256 indexed epochhash);\n\n    \n    event LogMinimumBondUpdated(\n        uint256 _previousMinimumBond,\n        uint256 _nextMinimumBond\n    );\n    event LogMinimumPodSizeUpdated(\n        uint256 _previousMinimumPodSize,\n        uint256 _nextMinimumPodSize\n    );\n    event LogMinimumEpochIntervalUpdated(\n        uint256 _previousMinimumEpochInterval,\n        uint256 _nextMinimumEpochInterval\n    );\n    event LogSlasherUpdated(\n        address indexed _previousSlasher,\n        address indexed _nextSlasher\n    );\n    event LogDarknodePaymentUpdated(\n        IDarknodePayment indexed _previousDarknodePayment,\n        IDarknodePayment indexed _nextDarknodePayment\n    );\n\n    \n    modifier onlyDarknodeOperator(address _darknodeID) {\n        require(\n            store.darknodeOperator(_darknodeID) == msg.sender,\n            \"DarknodeRegistry: must be darknode owner\"\n        );\n        _;\n    }\n\n    \n    modifier onlyRefunded(address _darknodeID) {\n        require(\n            isRefunded(_darknodeID),\n            \"DarknodeRegistry: must be refunded or never registered\"\n        );\n        _;\n    }\n\n    \n    modifier onlyRefundable(address _darknodeID) {\n        require(\n            isRefundable(_darknodeID),\n            \"DarknodeRegistry: must be deregistered for at least one epoch\"\n        );\n        _;\n    }\n\n    \n    \n    modifier onlyDeregisterable(address _darknodeID) {\n        require(\n            isDeregisterable(_darknodeID),\n            \"DarknodeRegistry: must be deregisterable\"\n        );\n        _;\n    }\n\n    \n    modifier onlySlasher() {\n        require(\n            address(slasher) == msg.sender,\n            \"DarknodeRegistry: must be slasher\"\n        );\n        _;\n    }\n\n    \n    \n    modifier onlyDarknode(address _darknodeID) {\n        require(\n            isRegistered(_darknodeID),\n            \"DarknodeRegistry: invalid darknode\"\n        );\n        _;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function initialize(\n        string memory _VERSION,\n        RenToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochIntervalSeconds,\n        uint256 _deregistrationIntervalSeconds\n    ) public initializer {\n        Claimable.initialize(msg.sender);\n        CanReclaimTokens.initialize(msg.sender);\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochIntervalSeconds;\n        nextMinimumEpochInterval = minimumEpochInterval;\n        deregistrationInterval = _deregistrationIntervalSeconds;\n\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocktime: block.timestamp\n        });\n        emit LogNewEpoch(epochhash);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function register(address _darknodeID, bytes calldata _publicKey)\n        external\n        onlyRefunded(_darknodeID)\n    {\n        require(\n            _darknodeID != address(0),\n            \"DarknodeRegistry: darknode address cannot be zero\"\n        );\n\n        \n        require(\n            ren.transferFrom(msg.sender, address(store), minimumBond),\n            \"DarknodeRegistry: bond transfer failed\"\n        );\n\n        \n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            minimumBond,\n            _publicKey,\n            currentEpoch.blocktime.add(minimumEpochInterval),\n            0\n        );\n\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\n\n        \n        emit LogDarknodeRegistered(msg.sender, _darknodeID, minimumBond);\n    }\n\n    \n    \n    \n    \n    \n    \n    function deregister(address _darknodeID)\n        external\n        onlyDeregisterable(_darknodeID)\n        onlyDarknodeOperator(_darknodeID)\n    {\n        deregisterDarknode(_darknodeID);\n    }\n\n    \n    \n    \n    function epoch() external {\n        if (previousEpoch.blocktime == 0) {\n            \n            require(\n                msg.sender == owner(),\n                \"DarknodeRegistry: not authorized to call first epoch\"\n            );\n        }\n\n        \n        require(\n            block.timestamp >= currentEpoch.blocktime.add(minimumEpochInterval),\n            \"DarknodeRegistry: epoch interval has not passed\"\n        );\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        \n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocktime: block.timestamp\n        });\n\n        \n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        \n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(\n                minimumEpochInterval,\n                nextMinimumEpochInterval\n            );\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\n        }\n        if (address(darknodePayment) != address(0x0)) {\n            darknodePayment.changeCycle();\n        }\n\n        \n        emit LogNewEpoch(epochhash);\n    }\n\n    \n    \n    \n    function transferStoreOwnership(DarknodeRegistryLogicV1 _newOwner)\n        external\n        onlyOwner\n    {\n        store.transferOwnership(address(_newOwner));\n        _newOwner.claimStoreOwnership();\n    }\n\n    \n    \n    \n    function claimStoreOwnership() external {\n        store.claimOwnership();\n\n        \n        \n        (\n            numDarknodesPreviousEpoch,\n            numDarknodes,\n            numDarknodesNextEpoch\n        ) = getDarknodeCountFromEpochs();\n    }\n\n    \n    \n    \n    \n    function updateDarknodePayment(IDarknodePayment _darknodePayment)\n        external\n        onlyOwner\n    {\n        require(\n            address(_darknodePayment) != address(0x0),\n            \"DarknodeRegistry: invalid Darknode Payment address\"\n        );\n        IDarknodePayment previousDarknodePayment = darknodePayment;\n        darknodePayment = _darknodePayment;\n        emit LogDarknodePaymentUpdated(\n            previousDarknodePayment,\n            darknodePayment\n        );\n    }\n\n    \n    \n    \n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        \n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    \n    \n    function updateMinimumPodSize(uint256 _nextMinimumPodSize)\n        external\n        onlyOwner\n    {\n        \n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    \n    \n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval)\n        external\n        onlyOwner\n    {\n        \n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    \n    \n    \n    function updateSlasher(IDarknodeSlasher _slasher) external onlyOwner {\n        require(\n            address(_slasher) != address(0),\n            \"DarknodeRegistry: invalid slasher address\"\n        );\n        nextSlasher = _slasher;\n    }\n\n    \n    \n    \n    \n    \n    function slash(address _guilty, address _challenger, uint256 _percentage)\n        external\n        onlySlasher\n        onlyDarknode(_guilty)\n    {\n        require(_percentage <= 100, \"DarknodeRegistry: invalid percent\");\n\n        \n        if (isDeregisterable(_guilty)) {\n            deregisterDarknode(_guilty);\n        }\n\n        uint256 totalBond = store.darknodeBond(_guilty);\n        uint256 penalty = totalBond.div(100).mul(_percentage);\n        uint256 challengerReward = penalty.div(2);\n        uint256 darknodePaymentReward = penalty.sub(challengerReward);\n        if (challengerReward > 0) {\n            \n            store.updateDarknodeBond(_guilty, totalBond.sub(penalty));\n\n            \n            require(\n                address(darknodePayment) != address(0x0),\n                \"DarknodeRegistry: invalid payment address\"\n            );\n            require(\n                ren.transfer(\n                    address(darknodePayment.store()),\n                    darknodePaymentReward\n                ),\n                \"DarknodeRegistry: reward transfer failed\"\n            );\n            require(\n                ren.transfer(_challenger, challengerReward),\n                \"DarknodeRegistry: reward transfer failed\"\n            );\n        }\n\n        emit LogDarknodeSlashed(\n            store.darknodeOperator(_guilty),\n            _guilty,\n            _challenger,\n            _percentage\n        );\n    }\n\n    \n    \n    \n    \n    \n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\n\n        \n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        \n        store.removeDarknode(_darknodeID);\n\n        \n        require(\n            ren.transfer(darknodeOperator, amount),\n            \"DarknodeRegistry: bond transfer failed\"\n        );\n\n        \n        emit LogDarknodeRefunded(darknodeOperator, _darknodeID, amount);\n    }\n\n    \n    \n    function getDarknodeOperator(address _darknodeID)\n        external\n        view\n        returns (address payable)\n    {\n        return store.darknodeOperator(_darknodeID);\n    }\n\n    \n    \n    function getDarknodeBond(address _darknodeID)\n        external\n        view\n        returns (uint256)\n    {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    \n    \n    function getDarknodePublicKey(address _darknodeID)\n        external\n        view\n        returns (bytes memory)\n    {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function getDarknodes(address _start, uint256 _count)\n        external\n        view\n        returns (address[] memory)\n    {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    \n    \n    function getPreviousDarknodes(address _start, uint256 _count)\n        external\n        view\n        returns (address[] memory)\n    {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    \n    \n    \n    function isPendingRegistration(address _darknodeID)\n        public\n        view\n        returns (bool)\n    {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocktime;\n    }\n\n    \n    \n    function isPendingDeregistration(address _darknodeID)\n        public\n        view\n        returns (bool)\n    {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocktime;\n    }\n\n    \n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocktime;\n    }\n\n    \n    \n    \n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        \n        \n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    \n    \n    \n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    \n    \n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return\n            isDeregistered(_darknodeID) &&\n            store.darknodeDeregisteredAt(_darknodeID) <=\n            (previousEpoch.blocktime - deregistrationInterval);\n    }\n\n    \n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    \n    function isRegisteredInPreviousEpoch(address _darknodeID)\n        public\n        view\n        returns (bool)\n    {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    \n    \n    \n    \n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch)\n        private\n        view\n        returns (bool)\n    {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocktime;\n        bool notDeregistered = deregisteredAt == 0 ||\n            deregisteredAt > _epoch.blocktime;\n        \n        \n        return registered && notDeregistered;\n    }\n\n    \n    \n    \n    \n    \n    function getDarknodesFromEpochs(\n        address _start,\n        uint256 _count,\n        bool _usePreviousEpoch\n    ) private view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        \n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = store.begin();\n        }\n\n        \n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            \n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n\n    \n    function deregisterDarknode(address _darknodeID) private {\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\n\n        \n        store.updateDarknodeDeregisteredAt(\n            _darknodeID,\n            currentEpoch.blocktime.add(minimumEpochInterval)\n        );\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\n\n        \n        emit LogDarknodeDeregistered(darknodeOperator, _darknodeID);\n    }\n\n    function getDarknodeCountFromEpochs()\n        private\n        view\n        returns (uint256, uint256, uint256)\n    {\n        \n        uint256 nPreviousEpoch = 0;\n        uint256 nCurrentEpoch = 0;\n        uint256 nNextEpoch = 0;\n        address next = store.begin();\n\n        \n        while (true) {\n            \n            if (next == address(0)) {\n                break;\n            }\n\n            if (isRegisteredInPreviousEpoch(next)) {\n                nPreviousEpoch += 1;\n            }\n\n            if (isRegistered(next)) {\n                nCurrentEpoch += 1;\n            }\n\n            \n            \n            if (\n                ((isRegistered(next) && !isPendingDeregistration(next)) ||\n                    isPendingRegistration(next))\n            ) {\n                nNextEpoch += 1;\n            }\n            next = store.next(next);\n        }\n        return (nPreviousEpoch, nCurrentEpoch, nNextEpoch);\n    }\n}\n\ncontract DarknodeRegistryProxy is InitializableAdminUpgradeabilityProxy {}\n\ncontract DarknodeSlasher is Claimable {\n    DarknodeRegistryLogicV1 public darknodeRegistry;\n\n    uint256 public blacklistSlashPercent;\n    uint256 public maliciousSlashPercent;\n    uint256 public secretRevealSlashPercent;\n\n    \n    \n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public slashed;\n\n    \n    mapping(address => bool) public secretRevealed;\n\n    \n    mapping(address => bool) public blacklisted;\n\n    \n    \n    \n    event LogDarknodeRegistryUpdated(\n        DarknodeRegistryLogicV1 indexed _previousDarknodeRegistry,\n        DarknodeRegistryLogicV1 indexed _nextDarknodeRegistry\n    );\n\n    \n    modifier validPercent(uint256 _percent) {\n        require(_percent <= 100, \"DarknodeSlasher: invalid percentage\");\n        _;\n    }\n\n    constructor(DarknodeRegistryLogicV1 _darknodeRegistry) public {\n        Claimable.initialize(msg.sender);\n        darknodeRegistry = _darknodeRegistry;\n    }\n\n    \n    \n    \n    \n    function updateDarknodeRegistry(DarknodeRegistryLogicV1 _darknodeRegistry)\n        external\n        onlyOwner\n    {\n        require(\n            address(_darknodeRegistry) != address(0x0),\n            \"DarknodeSlasher: invalid Darknode Registry address\"\n        );\n        DarknodeRegistryLogicV1 previousDarknodeRegistry = darknodeRegistry;\n        darknodeRegistry = _darknodeRegistry;\n        emit LogDarknodeRegistryUpdated(\n            previousDarknodeRegistry,\n            darknodeRegistry\n        );\n    }\n\n    function setBlacklistSlashPercent(uint256 _percentage)\n        public\n        validPercent(_percentage)\n        onlyOwner\n    {\n        blacklistSlashPercent = _percentage;\n    }\n\n    function setMaliciousSlashPercent(uint256 _percentage)\n        public\n        validPercent(_percentage)\n        onlyOwner\n    {\n        maliciousSlashPercent = _percentage;\n    }\n\n    function setSecretRevealSlashPercent(uint256 _percentage)\n        public\n        validPercent(_percentage)\n        onlyOwner\n    {\n        secretRevealSlashPercent = _percentage;\n    }\n\n    function slash(address _guilty, address _challenger, uint256 _percentage)\n        external\n        onlyOwner\n    {\n        darknodeRegistry.slash(_guilty, _challenger, _percentage);\n    }\n\n    function blacklist(address _guilty) external onlyOwner {\n        require(!blacklisted[_guilty], \"DarknodeSlasher: already blacklisted\");\n        blacklisted[_guilty] = true;\n        darknodeRegistry.slash(_guilty, owner(), blacklistSlashPercent);\n    }\n\n    function slashDuplicatePropose(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        uint256 _validRound1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        uint256 _validRound2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePropose(\n            _height,\n            _round,\n            _blockhash1,\n            _validRound1,\n            _signature1,\n            _blockhash2,\n            _validRound2,\n            _signature2\n        );\n        require(\n            !slashed[_height][_round][signer],\n            \"DarknodeSlasher: already slashed\"\n        );\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashDuplicatePrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePrevote(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1,\n            _blockhash2,\n            _signature2\n        );\n        require(\n            !slashed[_height][_round][signer],\n            \"DarknodeSlasher: already slashed\"\n        );\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashDuplicatePrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePrecommit(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1,\n            _blockhash2,\n            _signature2\n        );\n        require(\n            !slashed[_height][_round][signer],\n            \"DarknodeSlasher: already slashed\"\n        );\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashSecretReveal(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f,\n        bytes calldata _signature\n    ) external {\n        address signer = Validate.recoverSecret(\n            _a,\n            _b,\n            _c,\n            _d,\n            _e,\n            _f,\n            _signature\n        );\n        require(!secretRevealed[signer], \"DarknodeSlasher: already slashed\");\n        secretRevealed[signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, secretRevealSlashPercent);\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"_darknodeRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"_previousDarknodeRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"_nextDarknodeRegistry\",\"type\":\"address\"}],\"name\":\"LogDarknodeRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guilty\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklistSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeRegistry\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maliciousSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretRevealSlashPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"secretRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBlacklistSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setMaliciousSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setSecretRevealSlashPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guilty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePrecommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePrevote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash1\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_validRound1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blockhash2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_validRound2\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"slashDuplicatePropose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"slashSecretReveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"_darknodeRegistry\",\"type\":\"address\"}],\"name\":\"updateDarknodeRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DarknodeSlasher","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098525df99d846458afd9f30c1185c7ac9013111a","Library":"","LicenseType":"","SwarmSource":""}]}