{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ncontract Ownable {\r\n\r\n// A list of owners which will be saved as a list here, \r\n// and the values are the owner’s names. \r\n\r\n\r\n  string [] ownerName;  \r\n  address newOwner; // temp for confirm;\r\n  mapping (address=>bool) owners;\r\n  mapping (address=>uint256) ownerToProfile;\r\n  address owner;\r\n\r\n// all events will be saved as log files\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner,string name);\r\n  event RemoveOwner(address owner);\r\n  /**\r\n   * @dev Ownable constructor , initializes sender’s account and \r\n   * set as owner according to default value according to contract\r\n   *\r\n   */\r\n\r\n   // this function will be executed during initial load and will keep the smart contract creator (msg.sender) as Owner\r\n   // and also saved in Owners. This smart contract creator/owner is \r\n   // Mr. Samret Wajanasathian CTO of Shuttle One Pte Ltd (https://www.shuttle.one)\r\n\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n    uint256 idx = ownerName.push(\"SAMRET WAJANASATHIAN\");\r\n    ownerToProfile[msg.sender] = idx;\r\n\r\n  }\r\n\r\n// // function to check whether the given address is either Wallet address or Contract Address\r\n\r\n//   function isContract(address _addr) internal view returns(bool){\r\n//      uint256 length;\r\n//      assembly{\r\n//       length := extcodesize(_addr)\r\n//      }\r\n//      if(length > 0){\r\n//       return true;\r\n//     }\r\n//     else {\r\n//       return false;\r\n//     }\r\n\r\n//   }\r\n\r\n// function to check if the executor is the owner? This to ensure that only the person \r\n// who has right to execute/call the function has the permission to do so.\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner,\"SZO/ERROR-not-owner\");\r\n    _;\r\n  }\r\n\r\n// This function has only one Owner. The ownership can be transferrable and only\r\n//  the current Owner will only be  able to execute this function.\r\n//  Onwer can be Contract address\r\n  function transferOwnership(address  _newOwner, string memory newOwnerName) public onlyOwner{\r\n    \r\n    uint256 idx;\r\n    if(ownerToProfile[_newOwner] == 0)\r\n    {\r\n    \tidx = ownerName.push(newOwnerName);\r\n    \townerToProfile[_newOwner] = idx;\r\n    }\r\n\r\n\r\n    emit OwnershipTransferred(owner,_newOwner);\r\n    newOwner = _newOwner;\r\n\r\n  }\r\n  \r\n  // Function to confirm New Owner can execute\r\n  function newOwnerConfirm() public returns(bool){\r\n        if(newOwner == msg.sender)\r\n        {\r\n            owner = newOwner;\r\n            newOwner = address(0);\r\n            return true;\r\n        }\r\n        return false;\r\n  }\r\n\r\n// Function to check if the person is listed in a group of Owners and determine\r\n// if the person has the any permissions in this smart contract such as Exec permission.\r\n  \r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n// Function to add Owner into a list. The person who wanted to add a new owner into this list but be an existing\r\n// member of the Owners list. The log will be saved and can be traced / monitor who’s called this function.\r\n  \r\n  function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{\r\n    require(owners[_newOwner] == false,\"SZO/ERROR-already-owner\");\r\n    require(newOwner != msg.sender,\"SZO/ERROR-same-owner-add\");\r\n    if(ownerToProfile[_newOwner] == 0)\r\n    {\r\n    \tuint256 idx = ownerName.push(newOwnerName);\r\n    \townerToProfile[_newOwner] = idx;\r\n    }\r\n    owners[_newOwner] = true;\r\n    emit AddOwner(_newOwner,newOwnerName);\r\n  }\r\n\r\n// Function to remove the Owner from the Owners list. The person who wanted to remove any owner from Owners\r\n// List must be an existing member of the Owners List. The owner cannot evict himself from the Owners\r\n// List by his own, this is to ensure that there is at least one Owner of this ShuttleOne Smart Contract.\r\n// This ShuttleOne Smart Contract will become useless if there is no owner at all.\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender,\"SZO/ERROR-remove-yourself\");  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n// this function is to check of the given address is allowed to call/execute the particular function\r\n// return true if the given address has right to execute the function.\r\n// for transparency purpose, anyone can use this to trace/monitor the behaviors of this ShuttleOne smart contract.\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n\r\n// Function to check who’s executed the functions of smart contract. This returns the name of \r\n// Owner and this give transparency of whose actions on this ShuttleOne Smart Contract. \r\n\r\n  function getOwnerName(address ownerAddr) public view returns(string memory){\r\n  \trequire(ownerToProfile[ownerAddr] > 0,\"SZO/ERROR-NOT-OWNER-ADDRESS\");\r\n  \treturn ownerName[ownerToProfile[ownerAddr] - 1];\r\n  }\r\n}\r\n\r\n\r\ncontract SZO {\r\n\t   event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n       event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n  \r\n\t   function createKYCData(bytes32 _KycData1, bytes32 _kycData2,address  _wallet) public returns(uint256);\r\n}\r\n\r\ncontract ShuttleLockToken is  Ownable {\r\n     SZO public szoToken;\r\n     uint256 public version = 1;\r\n     address public genesis;\r\n     address public dev;\r\n     address public founder;\r\n     address public seedinvester;\r\n      \r\n     uint256  genesisQuota = 37000000 ether;\r\n     uint256  devQuota     = 23000000 ether;\r\n     uint256  founderQuota = 23000000 ether;\r\n     uint256  seedQuota    = 13800000 ether;\r\n     \r\n       constructor() public {\r\n           \r\n       }\r\n       \r\n       function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n             bytes memory tempEmptyStringTest = bytes(source);\r\n            if (tempEmptyStringTest.length == 0) {\r\n                return 0x0;\r\n             }\r\n\r\n            assembly {\r\n                 result := mload(add(source, 32))\r\n            }\r\n        }\r\n       \r\n       function setSZOContract(address _addr) public onlyOwners{\r\n           \r\n           szoToken = SZO(_addr);\r\n       }\r\n       \r\n       function tranferToGenesis(address _addr) public onlyOwners returns(bool){\r\n           require(genesis == address(0),\"ERROR Already Send to Genesis\");\r\n           genesis = _addr;\r\n           szoToken.transfer(genesis,genesisQuota);\r\n           szoToken.createKYCData(stringToBytes32(\"Genesis Address\"),stringToBytes32(\"NONE\"),genesis);\r\n           return true;\r\n       }\r\n       \r\n        function tranferToDev(address _addr) public onlyOwners returns(bool){\r\n           require(dev == address(0),\"ERROR Already Send to Developer\");\r\n           dev = _addr;\r\n           szoToken.transfer(dev,devQuota);\r\n           szoToken.createKYCData(stringToBytes32(\"Developer Address\"),stringToBytes32(\"NONE\"),dev);\r\n           return true;\r\n       }\r\n       \r\n        function tranferToFounder(address _addr) public onlyOwners returns(bool){\r\n           require(founder == address(0),\"ERROR Already Send to Founder\");\r\n           founder = _addr;\r\n           szoToken.transfer(founder,founderQuota);\r\n           szoToken.createKYCData(stringToBytes32(\"Founder Address\"),stringToBytes32(\"NONE\"),founder);\r\n           return true;\r\n       }\r\n       \r\n       function transferToSeed(address _addr) public onlyOwners returns(bool){\r\n           require(seedinvester == address(0),\"ERROR Already Send to SEED Investor\");\r\n           seedinvester = _addr;\r\n           szoToken.transfer(seedinvester,seedQuota);\r\n           szoToken.createKYCData(stringToBytes32(\"SEED Address\"),stringToBytes32(\"NONE\"),seedinvester);\r\n           return true;\r\n       }\r\n\r\n\r\n      function transfer(address _to,uint256 _amount) public onlyOwners returns(bool){\r\n          // Emegency Call just in case have problem\r\n          return szoToken.transfer(_to,_amount);\r\n      }\r\n\r\n      // 96.8M Token (GENESIS USERS = 37M,DEV = 23M,FOUNDER = 23M,EQUITY SEED A INVESTORS = 13.8M)\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"}],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newOwnerConfirm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedinvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSZOContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"szoToken\",\"outputs\":[{\"internalType\":\"contract SZO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tranferToDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tranferToFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tranferToGenesis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transferToSeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ShuttleLockToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f235e5aff715a1fec27c0e07ceb19c7a1c28f49acd79363c967bcfb20fe0173a"}]}