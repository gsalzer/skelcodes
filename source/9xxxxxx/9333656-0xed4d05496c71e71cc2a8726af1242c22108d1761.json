{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary IdToAddressBiMap {\r\n    struct Data {\r\n        mapping(uint16 => address) idToAddress;\r\n        mapping(address => uint16) addressToId;\r\n    }\r\n\r\n    function hasId(Data storage self, uint16 id) public view returns (bool) {\r\n        return self.idToAddress[id + 1] != address(0);\r\n    }\r\n\r\n    function hasAddress(Data storage self, address addr) public view returns (bool) {\r\n        return self.addressToId[addr] != 0;\r\n    }\r\n\r\n    function getAddressAt(Data storage self, uint16 id) public view returns (address) {\r\n        require(hasId(self, id), \"Must have ID to get Address\");\r\n        return self.idToAddress[id + 1];\r\n    }\r\n\r\n    function getId(Data storage self, address addr) public view returns (uint16) {\r\n        require(hasAddress(self, addr), \"Must have Address to get ID\");\r\n        return self.addressToId[addr] - 1;\r\n    }\r\n\r\n    function insert(Data storage self, uint16 id, address addr) public returns (bool) {\r\n        require(addr != address(0), \"Cannot insert zero address\");\r\n        require(id != uint16(-1), \"Cannot insert max uint16\");\r\n        // Ensure bijectivity of the mappings\r\n        if (self.addressToId[addr] != 0 || self.idToAddress[id + 1] != address(0)) {\r\n            return false;\r\n        }\r\n        self.idToAddress[id + 1] = addr;\r\n        self.addressToId[addr] = id + 1;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[]","ContractName":"IdToAddressBiMap","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://aebf624c79b17fd0232761c3f186dedc347cbdb7d0c6cff33b05eba89a3ea4a2"}]}