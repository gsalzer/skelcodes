{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IPublicLock.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n* @title The PublicLock Interface\r\n* @author Nick Furfaro (unlock-protocol.com)\r\n */\r\n\r\n\r\ncontract IPublicLock\r\n{\r\n\r\n// See indentationissue description here:\r\n// https://github.com/duaraghav8/Ethlint/issues/268\r\n// solium-disable indentation\r\n\r\n  /// Functions\r\n\r\n  function initialize(\r\n    address _lockCreator,\r\n    uint _expirationDuration,\r\n    address _tokenAddress,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys,\r\n    string calldata _lockName\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\r\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\r\n   */\r\n  function() external payable;\r\n\r\n  /**\r\n   * @dev Never used directly\r\n   */\r\n  function initialize() external;\r\n\r\n  /**\r\n  * @notice The version number of the current implementation on this network.\r\n  * @return The current version number.\r\n  */\r\n  function publicLockVersion() public pure returns (uint);\r\n\r\n  /**\r\n  * @notice Gets the current balance of the account provided.\r\n  * @param _tokenAddress The token type to retrieve the balance of.\r\n  * @param _account The account to get the balance of.\r\n  * @return The number of tokens of the given type for the given address, possibly 0.\r\n  */\r\n  function getBalance(\r\n    address _tokenAddress,\r\n    address _account\r\n  ) external view\r\n    returns (uint);\r\n\r\n  /**\r\n  * @notice Used to disable lock before migrating keys and/or destroying contract.\r\n  * @dev Throws if called by other than a lock manager.\r\n  * @dev Throws if lock contract has already been disabled.\r\n  */\r\n  function disableLock() external;\r\n\r\n  /**\r\n   * @dev Called by a lock manager or beneficiary to withdraw all funds from the lock and send them to the `beneficiary`.\r\n   * @dev Throws if called by other than a lock manager or beneficiary\r\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\r\n   * the same as `tokenAddress` in MixinFunds.\r\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\r\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\r\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\r\n   * use cases.\r\n   */\r\n  function withdraw(\r\n    address _tokenAddress,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /**\r\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if lock has been disabled\r\n   * @dev Throws if _tokenAddress is not a valid token\r\n   * @param _keyPrice The new price to set for keys\r\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\r\n   * or 0 to use ETH\r\n   */\r\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\r\n\r\n  /**\r\n   * A function which lets a Lock manager update the beneficiary account,\r\n   * which receives funds on withdrawal.\r\n   * @dev Throws if called by other than a Lock manager or beneficiary\r\n   * @dev Throws if _beneficiary is address(0)\r\n   * @param _beneficiary The new address to set as the beneficiary\r\n   */\r\n  function updateBeneficiary( address _beneficiary ) external;\r\n\r\n    /**\r\n   * Checks if the user has a non-expired key.\r\n   * @param _user The address of the key owner\r\n   */\r\n  function getHasValidKey(\r\n    address _user\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Find the tokenId for a given user\r\n   * @return The tokenId of the NFT, else returns 0\r\n   * @param _account The address of the key owner\r\n  */\r\n  function getTokenIdFor(\r\n    address _account\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n  * A function which returns a subset of the keys for this Lock as an array\r\n  * @param _page the page of key owners requested when faceted by page size\r\n  * @param _pageSize the number of Key Owners requested per page\r\n  * @dev Throws if there are no key owners yet\r\n  */\r\n  function getOwnersByPage(\r\n    uint _page,\r\n    uint _pageSize\r\n  ) external view returns (address[] memory);\r\n\r\n  /**\r\n   * Checks if the given address owns the given tokenId.\r\n   * @param _tokenId The tokenId of the key to check\r\n   * @param _keyOwner The potential key owners address\r\n   */\r\n  function isKeyOwner(\r\n    uint _tokenId,\r\n    address _keyOwner\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\r\n  * @param _keyOwner address of the user for whom we search the key\r\n  * @dev Returns 0 if the owner has never owned a key for this lock\r\n  */\r\n  function keyExpirationTimestampFor(\r\n    address _keyOwner\r\n  ) external view returns (uint timestamp);\r\n\r\n  /**\r\n   * Public function which returns the total number of unique owners (both expired\r\n   * and valid).  This may be larger than totalSupply.\r\n   */\r\n  function numberOfOwners() external view returns (uint);\r\n\r\n  /**\r\n   * Allows a Lock manager to assign a descriptive name for this Lock.\r\n   * @param _lockName The new name for the lock\r\n   * @dev Throws if called by other than a Lock manager\r\n   */\r\n  function updateLockName(\r\n    string calldata _lockName\r\n  ) external;\r\n\r\n  /**\r\n   * Allows a Lock manager to assign a Symbol for this Lock.\r\n   * @param _lockSymbol The new Symbol for the lock\r\n   * @dev Throws if called by other than a Lock manager\r\n   */\r\n  function updateLockSymbol(\r\n    string calldata _lockSymbol\r\n  ) external;\r\n\r\n  /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token symbol\r\n    */\r\n  function symbol()\r\n    external view\r\n    returns(string memory);\r\n\r\n    /**\r\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _baseTokenURI String representing the base of the URI for this lock.\r\n   */\r\n  function setBaseTokenURI(\r\n    string calldata _baseTokenURI\r\n  ) external;\r\n\r\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n   *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n   *  Metadata JSON Schema\".\r\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n   * @param _tokenId The tokenID we're inquiring about\r\n   * @return String representing the URI for the requested token\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  ) external view returns(string memory);\r\n\r\n  /**\r\n   * @notice Allows a Lock manager to add or remove an event hook\r\n   */\r\n  function setEventHooks(\r\n    address _onKeyPurchaseHook,\r\n    address _onKeyCancelHook\r\n  ) external;\r\n\r\n  /**\r\n   * Allows a Lock manager to give a collection of users a key with no charge.\r\n   * Each key may be assigned a different expiration date.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _recipients An array of receiving addresses\r\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\r\n   */\r\n  function grantKeys(\r\n    address[] calldata _recipients,\r\n    uint[] calldata _expirationTimestamps,\r\n    address[] calldata _keyManagers\r\n  ) external;\r\n\r\n  /**\r\n  * @dev Purchase function\r\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\r\n  * (_value is ignored when using ETH)\r\n  * @param _recipient address of the recipient of the purchased key\r\n  * @param _referrer address of the user making the referral\r\n  * @param _data arbitrary data populated by the front-end which initiated the sale\r\n  * @dev Throws if lock is disabled. Throws if lock is sold-out. Throws if _recipient == address(0).\r\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if a Lock manager increases the\r\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\r\n  * than keyPrice is approved for spending).\r\n  */\r\n  function purchase(\r\n    uint256 _value,\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice returns the minimum price paid for a purchase with these params.\r\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\r\n   */\r\n  function purchasePriceFor(\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external view\r\n    returns (uint);\r\n\r\n  /**\r\n   * Allow a Lock manager to change the transfer fee.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\r\n   * Ex: 200 bps = 2%\r\n   */\r\n  function updateTransferFee(\r\n    uint _transferFeeBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * Determines how much of a fee a key owner would need to pay in order to\r\n   * transfer the key to another account.  This is pro-rated so the fee goes down\r\n   * overtime.\r\n   * @dev Throws if _keyOwner does not have a valid key\r\n   * @param _keyOwner The owner of the key check the transfer fee for.\r\n   * @param _time The amount of time to calculate the fee for.\r\n   * @return The transfer fee in seconds.\r\n   */\r\n  function getTransferFee(\r\n    address _keyOwner,\r\n    uint _time\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\r\n   * @param _keyOwner The key owner to whom we wish to send a refund to\r\n   * @param amount The amount to refund the key-owner\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if _keyOwner does not have a valid key\r\n   */\r\n  function expireAndRefundFor(\r\n    address _keyOwner,\r\n    uint amount\r\n  ) external;\r\n\r\n   /**\r\n   * @dev allows the key manager to expire a given tokenId\r\n   * and send a refund to the keyOwner based on the amount of time remaining.\r\n   * @param _tokenId The id of the key to cancel.\r\n   */\r\n  function cancelAndRefund(uint _tokenId) external;\r\n\r\n  /**\r\n   * @dev Cancels a key managed by a different user and sends the funds to the keyOwner.\r\n   * @param _keyManager the key managed by this user will be canceled\r\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyManager\r\n   * @param _tokenId The key to cancel\r\n   */\r\n  function cancelAndRefundFor(\r\n    address _keyManager,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s,\r\n    uint _tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Sets the minimum nonce for a valid off-chain approval message from the\r\n   * senders account.\r\n   * @dev This can be used to invalidate a previously signed message.\r\n   */\r\n  function invalidateOffchainApproval(\r\n    uint _nextAvailableNonce\r\n  ) external;\r\n\r\n  /**\r\n   * Allow a Lock manager to change the refund penalty.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _freeTrialLength The new duration of free trials for this lock\r\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\r\n   */\r\n  function updateRefundPenalty(\r\n    uint _freeTrialLength,\r\n    uint _refundPenaltyBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Determines how much of a refund a key owner would receive if they issued\r\n   * @param _keyOwner The key owner to get the refund value for.\r\n   * a cancelAndRefund block.timestamp.\r\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\r\n   * than what the user reads from this call.\r\n   */\r\n  function getCancelAndRefundValueFor(\r\n    address _keyOwner\r\n  ) external view returns (uint refund);\r\n\r\n  function keyManagerToNonce(address ) external view returns (uint256 );\r\n\r\n  /**\r\n   * @notice returns the hash to sign in order to allow another user to cancel on your behalf.\r\n   * @dev this can be computed in JS instead of read from the contract.\r\n   * @param _keyManager The key manager's address (also the message signer)\r\n   * @param _txSender The address cancelling cancel on behalf of the keyOwner\r\n   * @return approvalHash The hash to sign\r\n   */\r\n  function getCancelAndRefundApprovalHash(\r\n    address _keyManager,\r\n    address _txSender\r\n  ) external view returns (bytes32 approvalHash);\r\n\r\n  function addKeyGranter(address account) external;\r\n\r\n  function addLockManager(address account) external;\r\n\r\n  function isKeyGranter(address account) external view returns (bool);\r\n\r\n  function isLockManager(address account) external view returns (bool);\r\n\r\n  function onKeyPurchaseHook() external view returns(address);\r\n\r\n  function onKeyCancelHook() external view returns(address);\r\n\r\n  function revokeKeyGranter(address _granter) external;\r\n\r\n  function renounceLockManager() external;\r\n\r\n  ///===================================================================\r\n  /// Auto-generated getter functions from public state variables\r\n\r\n  function beneficiary() external view returns (address );\r\n\r\n  function expirationDuration() external view returns (uint256 );\r\n\r\n  function freeTrialLength() external view returns (uint256 );\r\n\r\n  function isAlive() external view returns (bool );\r\n\r\n  function keyPrice() external view returns (uint256 );\r\n\r\n  function maxNumberOfKeys() external view returns (uint256 );\r\n\r\n  function owners(uint256 ) external view returns (address );\r\n\r\n  function refundPenaltyBasisPoints() external view returns (uint256 );\r\n\r\n  function tokenAddress() external view returns (address );\r\n\r\n  function transferFeeBasisPoints() external view returns (uint256 );\r\n\r\n  function unlockProtocol() external view returns (address );\r\n\r\n  function keyManagerOf(uint) external view returns (address );\r\n\r\n  ///===================================================================\r\n\r\n  /**\r\n  * @notice Allows the key owner to safely share their key (parent key) by\r\n  * transferring a portion of the remaining time to a new key (child key).\r\n  * @dev Throws if key is not valid.\r\n  * @dev Throws if `_to` is the zero address\r\n  * @param _to The recipient of the shared key\r\n  * @param _tokenId the key to share\r\n  * @param _timeShared The amount of time shared\r\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n  * `onERC721Received` on `_to` and throws if the return value is not\r\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\r\n  * @dev Emit Transfer event\r\n  */\r\n  function shareKey(\r\n    address _to,\r\n    uint _tokenId,\r\n    uint _timeShared\r\n  ) external;\r\n\r\n  /**\r\n  * @notice Update transfer and cancel rights for a given key\r\n  * @param _tokenId The id of the key to assign rights for\r\n  * @param _keyManager The address to assign the rights to for the given key\r\n  */\r\n  function setKeyManagerOf(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) external;\r\n\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name() external view returns (string memory _name);\r\n  ///===================================================================\r\n\r\n  /// From ERC165.sol\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool );\r\n  ///===================================================================\r\n\r\n  /// From ERC-721\r\n  /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address _owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    /**\r\n    * @notice Get the approved address for a single NFT\r\n    * @dev Throws if `_tokenId` is not a valid NFT.\r\n    * @param _tokenId The NFT to find the approved address for\r\n    * @return The approved address for this NFT, or the zero address if there is none\r\n    */\r\n    function getApproved(uint256 _tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address operator) public view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is Initializable, IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    function initialize() public initializer {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/mixins/MixinFunds.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An implementation of the money related functions.\r\n * @author HardlyDifficult (unlock-protocol.com)\r\n */\r\ncontract MixinFunds\r\n{\r\n  using Address for address payable;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /**\r\n   * The token-type that this Lock is priced in.  If 0, then use ETH, else this is\r\n   * a ERC20 token address.\r\n   */\r\n  address public tokenAddress;\r\n\r\n  function _initializeMixinFunds(\r\n    address _tokenAddress\r\n  ) internal\r\n  {\r\n    tokenAddress = _tokenAddress;\r\n    require(\r\n      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\r\n      'INVALID_TOKEN'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the current balance of the account provided.\r\n   */\r\n  function getBalance(\r\n    address _tokenAddress,\r\n    address _account\r\n  ) public view\r\n    returns (uint)\r\n  {\r\n    if(_tokenAddress == address(0)) {\r\n      return _account.balance;\r\n    } else {\r\n      return IERC20(_tokenAddress).balanceOf(_account);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfers funds from the contract to the account provided.\r\n   *\r\n   * Security: be wary of re-entrancy when calling this function.\r\n   */\r\n  function _transfer(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint _amount\r\n  ) internal\r\n  {\r\n    if(_amount > 0) {\r\n      if(_tokenAddress == address(0)) {\r\n        // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\r\n        address(uint160(_to)).sendValue(_amount);\r\n      } else {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.safeTransfer(_to, _amount);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/mixins/MixinLockManagerRole.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// This contract mostly follows the pattern established by openzeppelin in\r\n// openzeppelin/contracts-ethereum-package/contracts/access/roles\r\n\r\n\r\n\r\ncontract MixinLockManagerRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event LockManagerAdded(address indexed account);\r\n  event LockManagerRemoved(address indexed account);\r\n\r\n  Roles.Role private lockManagers;\r\n\r\n  function _initializeMixinLockManagerRole(address sender) internal {\r\n    if (!isLockManager(sender)) {\r\n      lockManagers.add(sender);\r\n    }\r\n  }\r\n\r\n  modifier onlyLockManager() {\r\n    require(isLockManager(msg.sender), 'MixinLockManager: caller does not have the LockManager role');\r\n    _;\r\n  }\r\n\r\n  function isLockManager(address account) public view returns (bool) {\r\n    return lockManagers.has(account);\r\n  }\r\n\r\n  function addLockManager(address account) public onlyLockManager {\r\n    lockManagers.add(account);\r\n    emit LockManagerAdded(account);\r\n  }\r\n\r\n  function renounceLockManager() public {\r\n    lockManagers.remove(msg.sender);\r\n    emit LockManagerRemoved(msg.sender);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinDisable.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/**\r\n * @title Mixin allowing the Lock owner to disable a Lock (preventing new purchases)\r\n * and then destroy it.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinDisable is\r\n  MixinLockManagerRole,\r\n  MixinFunds\r\n{\r\n  // Used to disable payable functions when deprecating an old lock\r\n  bool public isAlive;\r\n\r\n  event Disable();\r\n\r\n  function _initializeMixinDisable(\r\n  ) internal\r\n  {\r\n    isAlive = true;\r\n  }\r\n\r\n  // Only allow usage when contract is Alive\r\n  modifier onlyIfAlive() {\r\n    require(isAlive, 'LOCK_DEPRECATED');\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Used to disable lock before migrating keys and/or destroying contract\r\n   */\r\n  function disableLock()\r\n    external\r\n    onlyLockManager\r\n    onlyIfAlive\r\n  {\r\n    emit Disable();\r\n    isAlive = false;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is Initializable, IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is Initializable, IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IUnlock.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @title The Unlock Interface\r\n * @author Nick Furfaro (unlock-protocol.com)\r\n**/\r\n\r\ninterface IUnlock\r\n{\r\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\r\n  function initialize(address _unlockOwner) external;\r\n\r\n  /**\r\n  * @dev Create lock\r\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\r\n  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\r\n  * @param _salt an identifier for the Lock, which is unique for the user.\r\n  * This may be implemented as a sequence ID or with RNG. It's used with `create2`\r\n  * to know the lock's address before the transaction is mined.\r\n  */\r\n  function createLock(\r\n    uint _expirationDuration,\r\n    address _tokenAddress,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys,\r\n    string calldata _lockName,\r\n    bytes12 _salt\r\n  ) external;\r\n\r\n    /**\r\n   * This function keeps track of the added GDP, as well as grants of discount tokens\r\n   * to the referrer, if applicable.\r\n   * The number of discount tokens granted is based on the value of the referal,\r\n   * the current growth rate and the lock's discount token distribution rate\r\n   * This function is invoked by a previously deployed lock only.\r\n   */\r\n  function recordKeyPurchase(\r\n    uint _value,\r\n    address _referrer // solhint-disable-line no-unused-vars\r\n  )\r\n    external;\r\n\r\n    /**\r\n   * This function will keep track of consumed discounts by a given user.\r\n   * It will also grant discount tokens to the creator who is granting the discount based on the\r\n   * amount of discount and compensation rate.\r\n   * This function is invoked by a previously deployed lock only.\r\n   */\r\n  function recordConsumedDiscount(\r\n    uint _discount,\r\n    uint _tokens // solhint-disable-line no-unused-vars\r\n  )\r\n    external;\r\n\r\n    /**\r\n   * This function returns the discount available for a user, when purchasing a\r\n   * a key from a lock.\r\n   * This does not modify the state. It returns both the discount and the number of tokens\r\n   * consumed to grant that discount.\r\n   */\r\n  function computeAvailableDiscountFor(\r\n    address _purchaser, // solhint-disable-line no-unused-vars\r\n    uint _keyPrice // solhint-disable-line no-unused-vars\r\n  )\r\n    external\r\n    view\r\n    returns(uint discount, uint tokens);\r\n\r\n  // Function to read the globalTokenURI field.\r\n  function globalBaseTokenURI()\r\n    external\r\n    view\r\n    returns(string memory);\r\n\r\n  /**\r\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\r\n   */\r\n  function getGlobalBaseTokenURI()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n  // Function to read the globalTokenSymbol field.\r\n  function globalTokenSymbol()\r\n    external\r\n    view\r\n    returns(string memory);\r\n\r\n  /**\r\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\r\n   */\r\n  function getGlobalTokenSymbol()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n  /** Function for the owner to update configuration variables.\r\n   *  Should throw if called by other than owner.\r\n   */\r\n  function configUnlock(\r\n    string calldata _symbol,\r\n    string calldata _URI\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\r\n   * @dev This will initialize the template and revokeOwnership.\r\n   */\r\n  function setLockTemplate(\r\n    address payable _publicLockAddress\r\n  ) external;\r\n\r\n  // Allows the owner to change the value tracking variables as needed.\r\n  function resetTrackedValue(\r\n    uint _grossNetworkProduct,\r\n    uint _totalDiscountGranted\r\n  ) external;\r\n\r\n  function grossNetworkProduct() external view returns(uint);\r\n\r\n  function totalDiscountGranted() external view returns(uint);\r\n\r\n  function locks(address) external view returns(bool deployed, uint totalSales, uint yieldedDiscountTokens);\r\n\r\n  // The address of the public lock template, used when `createLock` is called\r\n  function publicLockAddress() external view returns(address);\r\n\r\n  // Map token address to exchange contract address if the token is supported\r\n  // Used for GDP calculations\r\n  function uniswapExchanges(address) external view returns(address);\r\n\r\n  // The version number of the current Unlock implementation on this network\r\n  function unlockVersion() external pure returns(uint16);\r\n\r\n  // allows the owner to set the exchange address to use for value conversions\r\n  // setting the _exchangeAddress to address(0) removes support for the token\r\n  function setExchange(\r\n    address _tokenAddress,\r\n    address _exchangeAddress\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() external view returns(bool);\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() external view returns(address);\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() external;\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: contracts/interfaces/hooks/ILockKeyCancelHook.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @notice Functions to be implemented by a keyCancelHook.\r\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\r\n */\r\ninterface ILockKeyCancelHook\r\n{\r\n  /**\r\n   * @notice If the lock owner has registered an implementer\r\n   * then this hook is called with every key cancel.\r\n   * @param operator the msg.sender issuing the cancel\r\n   * @param to the account which had the key canceled\r\n   * @param refund the amount sent to the `to` account (ETH or a ERC-20 token)\r\n   */\r\n  function onKeyCancel(\r\n    address operator,\r\n    address to,\r\n    uint256 refund\r\n  ) external;\r\n}\r\n\r\n// File: contracts/interfaces/hooks/ILockKeyPurchaseHook.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @notice Functions to be implemented by a keyPurchaseHook.\r\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\r\n */\r\ninterface ILockKeyPurchaseHook\r\n{\r\n  /**\r\n   * @notice Used to determine the purchase price before issueing a transaction.\r\n   * This allows the hook to offer a discount on purchases.\r\n   * This may revert to prevent a purchase.\r\n   * @param from the msg.sender making the purchase\r\n   * @param recipient the account which will be granted a key\r\n   * @param referrer the account which referred this key sale\r\n   * @param data arbitrary data populated by the front-end which initiated the sale\r\n   * @return the minimum value/price required to purchase a key with these settings\r\n   * @dev the lock's address is the `msg.sender` when this function is called via\r\n   * the lock's `purchasePriceFor` function\r\n   */\r\n  function keyPurchasePrice(\r\n    address from,\r\n    address recipient,\r\n    address referrer,\r\n    bytes calldata data\r\n  ) external view\r\n    returns (uint minKeyPrice);\r\n\r\n  /**\r\n   * @notice If the lock owner has registered an implementer then this hook\r\n   * is called with every key sold.\r\n   * @param from the msg.sender making the purchase\r\n   * @param recipient the account which will be granted a key\r\n   * @param referrer the account which referred this key sale\r\n   * @param data arbitrary data populated by the front-end which initiated the sale\r\n   * @param minKeyPrice the price including any discount granted from calling this\r\n   * hook's `keyPurchasePrice` function\r\n   * @param pricePaid the value/pricePaid included with the purchase transaction\r\n   * @dev the lock's address is the `msg.sender` when this function is called\r\n   */\r\n  function onKeyPurchase(\r\n    address from,\r\n    address recipient,\r\n    address referrer,\r\n    bytes calldata data,\r\n    uint minKeyPrice,\r\n    uint pricePaid\r\n  ) external;\r\n}\r\n\r\n// File: contracts/mixins/MixinLockCore.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin for core lock data and functions.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinLockCore is\r\n  IERC721Enumerable,\r\n  MixinLockManagerRole,\r\n  MixinFunds,\r\n  MixinDisable\r\n{\r\n  using Address for address;\r\n\r\n  event Withdrawal(\r\n    address indexed sender,\r\n    address indexed tokenAddress,\r\n    address indexed beneficiary,\r\n    uint amount\r\n  );\r\n\r\n  event PricingChanged(\r\n    uint oldKeyPrice,\r\n    uint keyPrice,\r\n    address oldTokenAddress,\r\n    address tokenAddress\r\n  );\r\n\r\n  // Unlock Protocol address\r\n  // TODO: should we make that private/internal?\r\n  IUnlock public unlockProtocol;\r\n\r\n  // Duration in seconds for which the keys are valid, after creation\r\n  // should we take a smaller type use less gas?\r\n  // TODO: add support for a timestamp instead of duration\r\n  uint public expirationDuration;\r\n\r\n  // price in wei of the next key\r\n  // TODO: allow support for a keyPriceCalculator which could set prices dynamically\r\n  uint public keyPrice;\r\n\r\n  // Max number of keys sold if the keyReleaseMechanism is public\r\n  uint public maxNumberOfKeys;\r\n\r\n  // A count of how many new key purchases there have been\r\n  uint internal _totalSupply;\r\n\r\n  // The account which will receive funds on withdrawal\r\n  address public beneficiary;\r\n\r\n  // The denominator component for values specified in basis points.\r\n  uint internal constant BASIS_POINTS_DEN = 10000;\r\n\r\n  ILockKeyPurchaseHook public onKeyPurchaseHook;\r\n  ILockKeyCancelHook public onKeyCancelHook;\r\n\r\n  // Ensure that the Lock has not sold all of its keys.\r\n  modifier notSoldOut() {\r\n    require(maxNumberOfKeys > _totalSupply, 'LOCK_SOLD_OUT');\r\n    _;\r\n  }\r\n\r\n  modifier onlyLockManagerOrBeneficiary()\r\n  {\r\n    require(\r\n      isLockManager(msg.sender) || msg.sender == beneficiary,\r\n      'ONLY_LOCK_MANAGER_OR_BENEFICIARY'\r\n    );\r\n    _;\r\n  }\r\n\r\n  function _initializeMixinLockCore(\r\n    address _beneficiary,\r\n    uint _expirationDuration,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys\r\n  ) internal\r\n  {\r\n    require(_expirationDuration <= 100 * 365 * 24 * 60 * 60, 'MAX_EXPIRATION_100_YEARS');\r\n    unlockProtocol = IUnlock(msg.sender); // Make sure we link back to Unlock's smart contract.\r\n    beneficiary = _beneficiary;\r\n    expirationDuration = _expirationDuration;\r\n    keyPrice = _keyPrice;\r\n    maxNumberOfKeys = _maxNumberOfKeys;\r\n  }\r\n\r\n  // The version number of the current implementation on this network\r\n  function publicLockVersion(\r\n  ) public pure\r\n    returns (uint)\r\n  {\r\n    return 7;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.\r\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\r\n   * the same as `tokenAddress` in MixinFunds.\r\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\r\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\r\n   *\r\n   * TODO: consider allowing anybody to trigger this as long as it goes to owner anyway?\r\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\r\n   * use cases.\r\n   */\r\n  function withdraw(\r\n    address _tokenAddress,\r\n    uint _amount\r\n  ) external\r\n    onlyLockManagerOrBeneficiary\r\n  {\r\n    uint balance = getBalance(_tokenAddress, address(this));\r\n    uint amount;\r\n    if(_amount == 0 || _amount > balance)\r\n    {\r\n      require(balance > 0, 'NOT_ENOUGH_FUNDS');\r\n      amount = balance;\r\n    }\r\n    else\r\n    {\r\n      amount = _amount;\r\n    }\r\n\r\n    emit Withdrawal(msg.sender, _tokenAddress, beneficiary, amount);\r\n    // Security: re-entrancy not a risk as this is the last line of an external function\r\n    _transfer(_tokenAddress, beneficiary, amount);\r\n  }\r\n\r\n  /**\r\n   * A function which lets the owner of the lock change the pricing for future purchases.\r\n   * This consists of 2 parts: The token address and the price in the given token.\r\n   * In order to set the token to ETH, use 0 for the token Address.\r\n   */\r\n  function updateKeyPricing(\r\n    uint _keyPrice,\r\n    address _tokenAddress\r\n  )\r\n    external\r\n    onlyLockManager\r\n    onlyIfAlive\r\n  {\r\n    uint oldKeyPrice = keyPrice;\r\n    address oldTokenAddress = tokenAddress;\r\n    require(\r\n      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\r\n      'INVALID_TOKEN'\r\n    );\r\n    keyPrice = _keyPrice;\r\n    tokenAddress = _tokenAddress;\r\n    emit PricingChanged(oldKeyPrice, keyPrice, oldTokenAddress, tokenAddress);\r\n  }\r\n\r\n  /**\r\n   * A function which lets the owner of the lock update the beneficiary account,\r\n   * which receives funds on withdrawal.\r\n   */\r\n  function updateBeneficiary(\r\n    address _beneficiary\r\n  ) external\r\n  {\r\n    require(msg.sender == beneficiary || isLockManager(msg.sender), 'ONLY_BENEFICIARY_OR_LOCKMANAGER');\r\n    require(_beneficiary != address(0), 'INVALID_ADDRESS');\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows a lock manager to add or remove an event hook\r\n   */\r\n  function setEventHooks(\r\n    address _onKeyPurchaseHook,\r\n    address _onKeyCancelHook\r\n  ) external\r\n    onlyLockManager()\r\n  {\r\n    require(_onKeyPurchaseHook == address(0) || _onKeyPurchaseHook.isContract(), 'INVALID_ON_KEY_SOLD_HOOK');\r\n    require(_onKeyCancelHook == address(0) || _onKeyCancelHook.isContract(), 'INVALID_ON_KEY_CANCEL_HOOK');\r\n    onKeyPurchaseHook = ILockKeyPurchaseHook(_onKeyPurchaseHook);\r\n    onKeyCancelHook = ILockKeyCancelHook(_onKeyCancelHook);\r\n  }\r\n\r\n  function totalSupply()\r\n    public\r\n    view returns(uint256)\r\n  {\r\n    return _totalSupply;\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinKeys.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin for managing `Key` data, as well as the * Approval related functions needed to meet the ERC721\r\n * standard.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinKeys is\r\n  MixinLockCore\r\n{\r\n  using SafeMath for uint;\r\n\r\n  // The struct for a key\r\n  struct Key {\r\n    uint tokenId;\r\n    uint expirationTimestamp;\r\n  }\r\n\r\n  // Emitted when the Lock owner expires a user's Key\r\n  event ExpireKey(uint indexed tokenId);\r\n\r\n  // Emitted when the expiration of a key is modified\r\n  event ExpirationChanged(\r\n    uint indexed _tokenId,\r\n    uint _amount,\r\n    bool _timeAdded\r\n  );\r\n\r\n  event KeyManagerChanged(uint indexed _tokenId, address indexed _newManager);\r\n\r\n\r\n  // Keys\r\n  // Each owner can have at most exactly one key\r\n  // TODO: could we use public here? (this could be confusing though because it getter will\r\n  // return 0 values when missing a key)\r\n  mapping (address => Key) internal keyByOwner;\r\n\r\n  // Each tokenId can have at most exactly one owner at a time.\r\n  // Returns 0 if the token does not exist\r\n  // TODO: once we decouple tokenId from owner address (incl in js), then we can consider\r\n  // merging this with totalSupply into an array instead.\r\n  mapping (uint => address) internal _ownerOf;\r\n\r\n  // Addresses of owners are also stored in an array.\r\n  // Addresses are never removed by design to avoid abuses around referals\r\n  address[] public owners;\r\n\r\n  // A given key has both an owner and a manager.\r\n  // If keyManager == address(0) then the key owner is also the manager\r\n  // Each key can have at most 1 keyManager.\r\n  mapping (uint => address) public keyManagerOf;\r\n\r\n    // Keeping track of approved transfers\r\n  // This is a mapping of addresses which have approved\r\n  // the transfer of a key to another address where their key can be transferred\r\n  // Note: the approver may actually NOT have a key... and there can only\r\n  // be a single approved address\r\n  mapping (uint => address) private approved;\r\n\r\n    // Keeping track of approved operators for a given Key manager.\r\n  // This approves a given operator for all keys managed by the calling \"keyManager\"\r\n  // The caller may not currently be the keyManager for ANY keys.\r\n  // These approvals are never reset/revoked automatically, unlike \"approved\",\r\n  // which is reset on transfer.\r\n  mapping (address => mapping (address => bool)) private managerToOperatorApproved;\r\n\r\n    // Ensure that the caller is the keyManager of the key\r\n  // or that the caller has been approved\r\n  // for ownership of that key\r\n  modifier onlyKeyManagerOrApproved(\r\n    uint _tokenId\r\n  )\r\n  {\r\n    require(\r\n      _isKeyManager(_tokenId, msg.sender) ||\r\n      _isApproved(_tokenId, msg.sender) ||\r\n      isApprovedForAll(_ownerOf[_tokenId], msg.sender),\r\n      'ONLY_KEY_MANAGER_OR_APPROVED'\r\n    );\r\n    _;\r\n  }\r\n\r\n  // Ensures that an owner owns or has owned a key in the past\r\n  modifier ownsOrHasOwnedKey(\r\n    address _keyOwner\r\n  ) {\r\n    require(\r\n      keyByOwner[_keyOwner].expirationTimestamp > 0, 'HAS_NEVER_OWNED_KEY'\r\n    );\r\n    _;\r\n  }\r\n\r\n  // Ensures that an owner has a valid key\r\n  modifier hasValidKey(\r\n    address _user\r\n  ) {\r\n    require(\r\n      getHasValidKey(_user), 'KEY_NOT_VALID'\r\n    );\r\n    _;\r\n  }\r\n\r\n  // Ensures that a key has an owner\r\n  modifier isKey(\r\n    uint _tokenId\r\n  ) {\r\n    require(\r\n      _ownerOf[_tokenId] != address(0), 'NO_SUCH_KEY'\r\n    );\r\n    _;\r\n  }\r\n\r\n  // Ensure that the caller owns the key\r\n  modifier onlyKeyOwner(\r\n    uint _tokenId\r\n  ) {\r\n    require(\r\n      isKeyOwner(_tokenId, msg.sender), 'ONLY_KEY_OWNER'\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * In the specific case of a Lock, each owner can own only at most 1 key.\r\n   * @return The number of NFTs owned by `_keyOwner`, either 0 or 1.\r\n  */\r\n  function balanceOf(\r\n    address _keyOwner\r\n  )\r\n    public\r\n    view\r\n    returns (uint)\r\n  {\r\n    require(_keyOwner != address(0), 'INVALID_ADDRESS');\r\n    return getHasValidKey(_keyOwner) ? 1 : 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user has a non-expired key.\r\n   */\r\n  function getHasValidKey(\r\n    address _keyOwner\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return keyByOwner[_keyOwner].expirationTimestamp > block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @notice Find the tokenId for a given user\r\n   * @return The tokenId of the NFT, else returns 0\r\n  */\r\n  function getTokenIdFor(\r\n    address _account\r\n  ) public view\r\n    returns (uint)\r\n  {\r\n    return keyByOwner[_account].tokenId;\r\n  }\r\n\r\n /**\r\n  * A function which returns a subset of the keys for this Lock as an array\r\n  * @param _page the page of key owners requested when faceted by page size\r\n  * @param _pageSize the number of Key Owners requested per page\r\n  */\r\n  function getOwnersByPage(uint _page, uint _pageSize)\r\n    public\r\n    view\r\n    returns (address[] memory)\r\n  {\r\n    require(owners.length > 0, 'NO_OUTSTANDING_KEYS');\r\n    uint pageSize = _pageSize;\r\n    uint _startIndex = _page * pageSize;\r\n    uint endOfPageIndex;\r\n\r\n    if (_startIndex + pageSize > owners.length) {\r\n      endOfPageIndex = owners.length;\r\n      pageSize = owners.length - _startIndex;\r\n    } else {\r\n      endOfPageIndex = (_startIndex + pageSize);\r\n    }\r\n\r\n    // new temp in-memory array to hold pageSize number of requested owners:\r\n    address[] memory ownersByPage = new address[](pageSize);\r\n    uint pageIndex = 0;\r\n\r\n    // Build the requested set of owners into a new temporary array:\r\n    for (uint i = _startIndex; i < endOfPageIndex; i++) {\r\n      ownersByPage[pageIndex] = owners[i];\r\n      pageIndex++;\r\n    }\r\n\r\n    return ownersByPage;\r\n  }\r\n\r\n  /**\r\n   * Checks if the given address owns the given tokenId.\r\n   */\r\n  function isKeyOwner(\r\n    uint _tokenId,\r\n    address _keyOwner\r\n  ) public view\r\n    returns (bool)\r\n  {\r\n    return _ownerOf[_tokenId] == _keyOwner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\r\n  * @param _keyOwner address of the user for whom we search the key\r\n  * @dev Returns 0 if the owner has never owned a key for this lock\r\n  */\r\n  function keyExpirationTimestampFor(\r\n    address _keyOwner\r\n  ) public view\r\n    returns (uint)\r\n  {\r\n    return keyByOwner[_keyOwner].expirationTimestamp;\r\n  }\r\n\r\n  /**\r\n   * Public function which returns the total number of unique owners (both expired\r\n   * and valid).  This may be larger than totalSupply.\r\n   */\r\n  function numberOfOwners()\r\n    public\r\n    view\r\n    returns (uint)\r\n  {\r\n    return owners.length;\r\n  }\r\n  // Returns the owner of a given tokenId\r\n  function ownerOf(\r\n    uint _tokenId\r\n  ) public view\r\n    isKey(_tokenId)\r\n    returns(address)\r\n  {\r\n    return _ownerOf[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @notice Public function for updating transfer and cancel rights for a given key\r\n  * @param _tokenId The id of the key to assign rights for\r\n  * @param _keyManager The address with the manager's rights for the given key.\r\n  * Setting _keyManager to address(0) means the keyOwner is also the keyManager\r\n   */\r\n  function setKeyManagerOf(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) public\r\n    isKey(_tokenId)\r\n  {\r\n    require(\r\n      _isKeyManager(_tokenId, msg.sender) ||\r\n      isLockManager(msg.sender),\r\n      'UNAUTHORIZED_KEY_MANAGER_UPDATE'\r\n    );\r\n    _setKeyManagerOf(_tokenId, _keyManager);\r\n  }\r\n\r\n  function _setKeyManagerOf(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) internal\r\n  {\r\n    if(keyManagerOf[_tokenId] != _keyManager) {\r\n      keyManagerOf[_tokenId] = _keyManager;\r\n      _clearApproval(_tokenId);\r\n      emit KeyManagerChanged(_tokenId, address(0));\r\n    }\r\n  }\r\n\r\n    /**\r\n   * This approves _approved to get ownership of _tokenId.\r\n   * Note: that since this is used for both purchase and transfer approvals\r\n   * the approved token may not exist.\r\n   */\r\n  function approve(\r\n    address _approved,\r\n    uint _tokenId\r\n  )\r\n    public\r\n    onlyIfAlive\r\n    onlyKeyManagerOrApproved(_tokenId)\r\n  {\r\n    require(msg.sender != _approved, 'APPROVE_SELF');\r\n\r\n    approved[_tokenId] = _approved;\r\n    emit Approval(_ownerOf[_tokenId], _approved, _tokenId);\r\n  }\r\n\r\n    /**\r\n   * @notice Get the approved address for a single NFT\r\n   * @dev Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId The NFT to find the approved address for\r\n   * @return The approved address for this NFT, or the zero address if there is none\r\n   */\r\n  function getApproved(\r\n    uint _tokenId\r\n  ) public view\r\n    isKey(_tokenId)\r\n    returns (address)\r\n  {\r\n    address approvedRecipient = approved[_tokenId];\r\n    return approvedRecipient;\r\n  }\r\n\r\n    /**\r\n   * @dev Tells whether an operator is approved by a given keyManager\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) public view\r\n    returns (bool)\r\n  {\r\n    uint tokenId = keyByOwner[_owner].tokenId;\r\n    address keyManager = keyManagerOf[tokenId];\r\n    if(keyManager == address(0)) {\r\n      return managerToOperatorApproved[_owner][_operator];\r\n    } else {\r\n      return managerToOperatorApproved[keyManager][_operator];\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Returns true if _keyManager is the manager of the key\r\n  * identified by _tokenId\r\n   */\r\n  function _isKeyManager(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) internal view\r\n    returns (bool)\r\n  {\r\n    if(keyManagerOf[_tokenId] == _keyManager ||\r\n      (keyManagerOf[_tokenId] == address(0) && isKeyOwner(_tokenId, _keyManager))) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assigns the key a new tokenId (from totalSupply) if it does not already have\r\n   * one assigned.\r\n   */\r\n  function _assignNewTokenId(\r\n    Key storage _key\r\n  ) internal\r\n  {\r\n    if (_key.tokenId == 0) {\r\n      // This is a brand new owner\r\n      // We increment the tokenId counter\r\n      _totalSupply++;\r\n      // we assign the incremented `_totalSupply` as the tokenId for the new key\r\n      _key.tokenId = _totalSupply;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Records the owner of a given tokenId\r\n   */\r\n  function _recordOwner(\r\n    address _keyOwner,\r\n    uint _tokenId\r\n  ) internal\r\n  {\r\n    if (_ownerOf[_tokenId] != _keyOwner) {\r\n      // TODO: this may include duplicate entries\r\n      owners.push(_keyOwner);\r\n      // We register the owner of the tokenID\r\n      _ownerOf[_tokenId] = _keyOwner;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice Modify the expirationTimestamp of a key\r\n  * by a given amount.\r\n  * @param _tokenId The ID of the key to modify.\r\n  * @param _deltaT The amount of time in seconds by which\r\n  * to modify the keys expirationTimestamp\r\n  * @param _addTime Choose whether to increase or decrease\r\n  * expirationTimestamp (false == decrease, true == increase)\r\n  * @dev Throws if owner does not have a valid key.\r\n  */\r\n  function _timeMachine(\r\n    uint _tokenId,\r\n    uint256 _deltaT,\r\n    bool _addTime\r\n  ) internal\r\n  {\r\n    address tokenOwner = _ownerOf[_tokenId];\r\n    require(tokenOwner != address(0), 'NON_EXISTENT_KEY');\r\n    Key storage key = keyByOwner[tokenOwner];\r\n    uint formerTimestamp = key.expirationTimestamp;\r\n    bool validKey = getHasValidKey(tokenOwner);\r\n    if(_addTime) {\r\n      if(validKey) {\r\n        key.expirationTimestamp = formerTimestamp.add(_deltaT);\r\n      } else {\r\n        key.expirationTimestamp = block.timestamp.add(_deltaT);\r\n      }\r\n    } else {\r\n      key.expirationTimestamp = formerTimestamp.sub(_deltaT);\r\n    }\r\n    emit ExpirationChanged(_tokenId, _deltaT, _addTime);\r\n  }\r\n\r\n    /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(\r\n    address _to,\r\n    bool _approved\r\n  ) public\r\n    onlyIfAlive\r\n  {\r\n    require(_to != msg.sender, 'APPROVE_SELF');\r\n    managerToOperatorApproved[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n    /**\r\n   * @dev Checks if the given user is approved to transfer the tokenId.\r\n   */\r\n  function _isApproved(\r\n    uint _tokenId,\r\n    address _user\r\n  ) internal view\r\n    returns (bool)\r\n  {\r\n    return approved[_tokenId] == _user;\r\n  }\r\n\r\n    /**\r\n   * @dev Function to clear current approval of a given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(\r\n    uint256 _tokenId\r\n  ) internal\r\n  {\r\n    if (approved[_tokenId] != address(0)) {\r\n      approved[_tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinERC721Enumerable.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Implements the ERC-721 Enumerable extension.\r\n */\r\ncontract MixinERC721Enumerable is\r\n  IERC721Enumerable,\r\n  ERC165,\r\n  MixinLockCore, // Implements totalSupply\r\n  MixinKeys\r\n{\r\n  function _initializeMixinERC721Enumerable() internal\r\n  {\r\n    /**\r\n     * register the supported interface to conform to ERC721Enumerable via ERC165\r\n     * 0x780e9d63 ===\r\n     *     bytes4(keccak256('totalSupply()')) ^\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n     *     bytes4(keccak256('tokenByIndex(uint256)'))\r\n     */\r\n    _registerInterface(0x780e9d63);\r\n  }\r\n\r\n  /// @notice Enumerate valid NFTs\r\n  /// @dev Throws if `_index` >= `totalSupply()`.\r\n  /// @param _index A counter less than `totalSupply()`\r\n  /// @return The token identifier for the `_index`th NFT,\r\n  ///  (sort order not specified)\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  ) public view\r\n    returns (uint256)\r\n  {\r\n    require(_index < _totalSupply, 'OUT_OF_RANGE');\r\n    return _index;\r\n  }\r\n\r\n  /// @notice Enumerate NFTs assigned to an owner\r\n  /// @dev Throws if `_index` >= `balanceOf(_keyOwner)` or if\r\n  ///  `_keyOwner` is the zero address, representing invalid NFTs.\r\n  /// @param _keyOwner An address where we are interested in NFTs owned by them\r\n  /// @param _index A counter less than `balanceOf(_keyOwner)`\r\n  /// @return The token identifier for the `_index`th NFT assigned to `_keyOwner`,\r\n  ///   (sort order not specified)\r\n  function tokenOfOwnerByIndex(\r\n    address _keyOwner,\r\n    uint256 _index\r\n  ) public view\r\n    returns (uint256)\r\n  {\r\n    require(_index == 0, 'ONLY_ONE_KEY_PER_OWNER');\r\n    return getTokenIdFor(_keyOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinKeyGranterRole.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// This contract mostly follows the pattern established by openzeppelin in\r\n// openzeppelin/contracts-ethereum-package/contracts/access/roles\r\n\r\n\r\n\r\n\r\ncontract MixinKeyGranterRole is MixinLockManagerRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event KeyGranterAdded(address indexed account);\r\n  event KeyGranterRemoved(address indexed account);\r\n\r\n  Roles.Role private keyGranters;\r\n\r\n  function _initializeMixinKeyGranterRole(address sender) internal {\r\n    if (!isKeyGranter(sender)) {\r\n      keyGranters.add(sender);\r\n    }\r\n  }\r\n\r\n  modifier onlyKeyGranterOrManager() {\r\n    require(isKeyGranter(msg.sender) || isLockManager(msg.sender), 'MixinKeyGranter: caller does not have the KeyGranter or LockManager role');\r\n    _;\r\n  }\r\n\r\n  function isKeyGranter(address account) public view returns (bool) {\r\n    return keyGranters.has(account);\r\n  }\r\n\r\n  function addKeyGranter(address account) public onlyLockManager {\r\n    keyGranters.add(account);\r\n    emit KeyGranterAdded(account);\r\n  }\r\n\r\n  function revokeKeyGranter(address _granter) public onlyLockManager {\r\n    keyGranters.remove(_granter);\r\n    emit KeyGranterRemoved(_granter);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinGrantKeys.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin allowing the Lock owner to grant / gift keys to users.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinGrantKeys is\r\n  MixinKeyGranterRole,\r\n  MixinKeys\r\n{\r\n  /**\r\n   * Allows the Lock owner to give a collection of users a key with no charge.\r\n   * Each key may be assigned a different expiration date.\r\n   */\r\n  function grantKeys(\r\n    address[] calldata _recipients,\r\n    uint[] calldata _expirationTimestamps,\r\n    address[] calldata _keyManagers\r\n  ) external\r\n    onlyKeyGranterOrManager\r\n  {\r\n    for(uint i = 0; i < _recipients.length; i++) {\r\n      address recipient = _recipients[i];\r\n      uint expirationTimestamp = _expirationTimestamps[i];\r\n      address keyManager = _keyManagers[i];\r\n\r\n      require(recipient != address(0), 'INVALID_ADDRESS');\r\n\r\n      Key storage toKey = keyByOwner[recipient];\r\n      require(expirationTimestamp > toKey.expirationTimestamp, 'ALREADY_OWNS_KEY');\r\n\r\n      uint idTo = toKey.tokenId;\r\n\r\n      if(idTo == 0) {\r\n        _assignNewTokenId(toKey);\r\n        idTo = toKey.tokenId;\r\n        _recordOwner(recipient, idTo);\r\n      }\r\n      // Set the key Manager\r\n      _setKeyManagerOf(idTo, keyManager);\r\n      emit KeyManagerChanged(idTo, keyManager);\r\n\r\n      toKey.expirationTimestamp = expirationTimestamp;\r\n      // trigger event\r\n      emit Transfer(\r\n        address(0), // This is a creation.\r\n        recipient,\r\n        idTo\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/UnlockUtils.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// This contract provides some utility methods for use with the unlock protocol smart contracts.\r\n// Borrowed from:\r\n// https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L943\r\n\r\nlibrary UnlockUtils {\r\n\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c,\r\n    string memory _d\r\n  ) internal pure\r\n    returns (string memory _concatenatedString)\r\n  {\r\n    return string(abi.encodePacked(_a, _b, _c, _d));\r\n  }\r\n\r\n  function uint2Str(\r\n    uint _i\r\n  ) internal pure\r\n    returns (string memory _uintAsString)\r\n  {\r\n    // make a copy of the param to avoid security/no-assign-params error\r\n    uint c = _i;\r\n    if (_i == 0) {\r\n      return '0';\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (c != 0) {\r\n      bstr[k--] = byte(uint8(48 + c % 10));\r\n      c /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n  function address2Str(\r\n    address _addr\r\n  ) internal pure\r\n    returns(string memory)\r\n  {\r\n    bytes32 value = bytes32(uint256(_addr));\r\n    bytes memory alphabet = '0123456789abcdef';\r\n    bytes memory str = new bytes(42);\r\n    str[0] = '0';\r\n    str[1] = 'x';\r\n    for (uint i = 0; i < 20; i++) {\r\n      str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\r\n      str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n    }\r\n    return string(str);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinLockMetadata.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin for metadata about the Lock.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinLockMetadata is\r\n  IERC721Enumerable,\r\n  ERC165,\r\n  MixinLockManagerRole,\r\n  MixinLockCore,\r\n  MixinKeys\r\n{\r\n  using UnlockUtils for uint;\r\n  using UnlockUtils for address;\r\n  using UnlockUtils for string;\r\n\r\n  /// A descriptive name for a collection of NFTs in this contract.Defaults to \"Unlock-Protocol\" but is settable by lock owner\r\n  string public name;\r\n\r\n  /// An abbreviated name for NFTs in this contract. Defaults to \"KEY\" but is settable by lock owner\r\n  string private lockSymbol;\r\n\r\n  // the base Token URI for this Lock. If not set by lock owner, the global URI stored in Unlock is used.\r\n  string private baseTokenURI;\r\n\r\n  event NewLockSymbol(\r\n    string symbol\r\n  );\r\n\r\n  function _initializeMixinLockMetadata(\r\n    string memory _lockName\r\n  ) internal\r\n  {\r\n    ERC165.initialize();\r\n    name = _lockName;\r\n    // registering the optional erc721 metadata interface with ERC165.sol using\r\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\r\n    _registerInterface(0x5b5e139f);\r\n  }\r\n\r\n  /**\r\n   * Allows the Lock owner to assign a descriptive name for this Lock.\r\n   */\r\n  function updateLockName(\r\n    string calldata _lockName\r\n  ) external\r\n    onlyLockManager\r\n  {\r\n    name = _lockName;\r\n  }\r\n\r\n  /**\r\n   * Allows the Lock owner to assign a Symbol for this Lock.\r\n   */\r\n  function updateLockSymbol(\r\n    string calldata _lockSymbol\r\n  ) external\r\n    onlyLockManager\r\n  {\r\n    lockSymbol = _lockSymbol;\r\n    emit NewLockSymbol(_lockSymbol);\r\n  }\r\n\r\n  /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token name\r\n    */\r\n  function symbol()\r\n    external view\r\n    returns(string memory)\r\n  {\r\n    if(bytes(lockSymbol).length == 0) {\r\n      return unlockProtocol.globalTokenSymbol();\r\n    } else {\r\n      return lockSymbol;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows the Lock owner to update the baseTokenURI for this Lock.\r\n   */\r\n  function setBaseTokenURI(\r\n    string calldata _baseTokenURI\r\n  ) external\r\n    onlyLockManager\r\n  {\r\n    baseTokenURI = _baseTokenURI;\r\n  }\r\n\r\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n   *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n   *  Metadata JSON Schema\".\r\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  ) external\r\n    view\r\n    isKey(_tokenId)\r\n    returns(string memory)\r\n  {\r\n    string memory URI;\r\n    if(bytes(baseTokenURI).length == 0) {\r\n      URI = unlockProtocol.globalBaseTokenURI();\r\n    } else {\r\n      URI = baseTokenURI;\r\n    }\r\n\r\n    return URI.strConcat(\r\n      address(this).address2Str(),\r\n      '/',\r\n      _tokenId.uint2Str()\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinPurchase.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin for the purchase-related functions.\r\n * @author HardlyDifficult\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\ncontract MixinPurchase is\r\n  MixinFunds,\r\n  MixinDisable,\r\n  MixinLockCore,\r\n  MixinKeys\r\n{\r\n  using SafeMath for uint;\r\n\r\n  event RenewKeyPurchase(address indexed owner, uint newExpiration);\r\n\r\n  /**\r\n  * @dev Purchase function\r\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\r\n  * (_value is ignored when using ETH)\r\n  * @param _recipient address of the recipient of the purchased key\r\n  * @param _referrer address of the user making the referral\r\n  * @param _data arbitrary data populated by the front-end which initiated the sale\r\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\r\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\r\n  * than keyPrice is approved for spending).\r\n  */\r\n  function purchase(\r\n    uint256 _value,\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external payable\r\n    onlyIfAlive\r\n    notSoldOut\r\n  {\r\n    require(_recipient != address(0), 'INVALID_ADDRESS');\r\n\r\n    // Assign the key\r\n    Key storage toKey = keyByOwner[_recipient];\r\n    uint idTo = toKey.tokenId;\r\n    uint newTimeStamp;\r\n\r\n    if (idTo == 0) {\r\n      // Assign a new tokenId (if a new owner or previously transferred)\r\n      _assignNewTokenId(toKey);\r\n      // refresh the cached value\r\n      idTo = toKey.tokenId;\r\n      _recordOwner(_recipient, idTo);\r\n      newTimeStamp = block.timestamp + expirationDuration;\r\n      toKey.expirationTimestamp = newTimeStamp;\r\n\r\n      // trigger event\r\n      emit Transfer(\r\n        address(0), // This is a creation.\r\n        _recipient,\r\n        idTo\r\n      );\r\n    } else if (toKey.expirationTimestamp > block.timestamp) {\r\n      // This is an existing owner trying to extend their key\r\n      newTimeStamp = toKey.expirationTimestamp.add(expirationDuration);\r\n      toKey.expirationTimestamp = newTimeStamp;\r\n      emit RenewKeyPurchase(_recipient, newTimeStamp);\r\n    } else {\r\n      // This is an existing owner trying to renew their expired key\r\n      // SafeAdd is not required here since expirationDuration is capped to a tiny value\r\n      // (relative to the size of a uint)\r\n      newTimeStamp = block.timestamp + expirationDuration;\r\n      toKey.expirationTimestamp = newTimeStamp;\r\n\r\n      // reset the key Manager to 0x00\r\n      _setKeyManagerOf(idTo, address(0));\r\n\r\n      emit RenewKeyPurchase(_recipient, newTimeStamp);\r\n    }\r\n\r\n    (uint inMemoryKeyPrice, uint discount, uint tokens) = _purchasePriceFor(_recipient, _referrer, _data);\r\n    if (discount > 0)\r\n    {\r\n      unlockProtocol.recordConsumedDiscount(discount, tokens);\r\n    }\r\n\r\n    // Record price without any tips\r\n    unlockProtocol.recordKeyPurchase(inMemoryKeyPrice, getHasValidKey(_referrer) ? _referrer : address(0));\r\n\r\n    // We explicitly allow for greater amounts of ETH or tokens to allow 'donations'\r\n    uint pricePaid;\r\n    if(tokenAddress != address(0))\r\n    {\r\n      pricePaid = _value;\r\n      IERC20 token = IERC20(tokenAddress);\r\n      token.safeTransferFrom(msg.sender, address(this), _value);\r\n    }\r\n    else\r\n    {\r\n      pricePaid = msg.value;\r\n    }\r\n    require(pricePaid >= inMemoryKeyPrice, 'INSUFFICIENT_VALUE');\r\n\r\n    if(address(onKeyPurchaseHook) != address(0))\r\n    {\r\n      onKeyPurchaseHook.onKeyPurchase(msg.sender, _recipient, _referrer, _data, inMemoryKeyPrice, pricePaid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice returns the minimum price paid for a purchase with these params.\r\n   * @dev minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\r\n   */\r\n  function purchasePriceFor(\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external view\r\n    returns (uint minKeyPrice)\r\n  {\r\n    (minKeyPrice, , ) = _purchasePriceFor(_recipient, _referrer, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice returns the minimum price paid for a purchase with these params.\r\n   * @dev minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\r\n   * unlockDiscount and unlockTokens are the values returned from `computeAvailableDiscountFor`\r\n   */\r\n  function _purchasePriceFor(\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes memory _data\r\n  ) internal view\r\n    returns (uint minKeyPrice, uint unlockDiscount, uint unlockTokens)\r\n  {\r\n    if(address(onKeyPurchaseHook) != address(0))\r\n    {\r\n      minKeyPrice = onKeyPurchaseHook.keyPurchasePrice(msg.sender, _recipient, _referrer, _data);\r\n    }\r\n    else\r\n    {\r\n      minKeyPrice = keyPrice;\r\n    }\r\n\r\n    if(minKeyPrice > 0)\r\n    {\r\n      (unlockDiscount, unlockTokens) = unlockProtocol.computeAvailableDiscountFor(_recipient, minKeyPrice);\r\n      require(unlockDiscount <= minKeyPrice, 'INVALID_DISCOUNT_FROM_UNLOCK');\r\n      minKeyPrice -= unlockDiscount;\r\n    }\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/mixins/MixinSignatures.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract MixinSignatures\r\n{\r\n  /// @notice emits anytime the nonce used for off-chain approvals changes.\r\n  event NonceChanged(\r\n    address indexed keyManager,\r\n    uint nextAvailableNonce\r\n  );\r\n\r\n  // Stores a nonce per user to use for signed messages\r\n  mapping(address => uint) public keyManagerToNonce;\r\n\r\n  /// @notice Validates an off-chain approval signature.\r\n  /// @dev If valid the nonce is consumed, else revert.\r\n  modifier consumeOffchainApproval(\r\n    bytes32 _hash,\r\n    address _keyManager,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s\r\n  )\r\n  {\r\n    require(\r\n      ecrecover(\r\n        ECDSA.toEthSignedMessageHash(_hash),\r\n        _v,\r\n        _r,\r\n        _s\r\n      ) == _keyManager, 'INVALID_SIGNATURE'\r\n    );\r\n    keyManagerToNonce[_keyManager]++;\r\n    emit NonceChanged(_keyManager, keyManagerToNonce[_keyManager]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the minimum nonce for a valid off-chain approval message from the\r\n   * senders account.\r\n   * @dev This can be used to invalidate a previously signed message.\r\n   */\r\n  function invalidateOffchainApproval(\r\n    uint _nextAvailableNonce\r\n  ) external\r\n  {\r\n    require(_nextAvailableNonce > keyManagerToNonce[msg.sender], 'NONCE_ALREADY_USED');\r\n    keyManagerToNonce[msg.sender] = _nextAvailableNonce;\r\n    emit NonceChanged(msg.sender, _nextAvailableNonce);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/MixinRefunds.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MixinRefunds is\r\n  MixinLockManagerRole,\r\n  MixinSignatures,\r\n  MixinFunds,\r\n  MixinLockCore,\r\n  MixinKeys\r\n{\r\n  using SafeMath for uint;\r\n\r\n  // CancelAndRefund will return funds based on time remaining minus this penalty.\r\n  // This is calculated as `proRatedRefund * refundPenaltyBasisPoints / BASIS_POINTS_DEN`.\r\n  uint public refundPenaltyBasisPoints;\r\n\r\n  uint public freeTrialLength;\r\n\r\n  /// @notice The typehash per the EIP-712 standard\r\n  /// @dev This can be computed in JS instead of read from the contract\r\n  bytes32 private constant CANCEL_TYPEHASH = keccak256('cancelAndRefundFor(address _keyOwner)');\r\n\r\n  event CancelKey(\r\n    uint indexed tokenId,\r\n    address indexed owner,\r\n    address indexed sendTo,\r\n    uint refund\r\n  );\r\n\r\n  event RefundPenaltyChanged(\r\n    uint freeTrialLength,\r\n    uint refundPenaltyBasisPoints\r\n  );\r\n\r\n  function _initializeMixinRefunds() internal\r\n  {\r\n    // default to 10%\r\n    refundPenaltyBasisPoints = 1000;\r\n  }\r\n\r\n  /**\r\n   * @dev Invoked by the lock owner to destroy the user's ket and perform a refund and cancellation\r\n   * of the key\r\n   */\r\n  function expireAndRefundFor(\r\n    address _keyOwner,\r\n    uint amount\r\n  ) external\r\n    onlyLockManager\r\n    hasValidKey(_keyOwner)\r\n  {\r\n    _cancelAndRefund(_keyOwner, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys the key and sends a refund based on the amount of time remaining.\r\n   * @param _tokenId The id of the key to cancel.\r\n   */\r\n  function cancelAndRefund(uint _tokenId)\r\n    external\r\n    onlyKeyManagerOrApproved(_tokenId)\r\n  {\r\n    address keyOwner = ownerOf(_tokenId);\r\n    uint refund = _getCancelAndRefundValue(keyOwner);\r\n\r\n    _cancelAndRefund(keyOwner, refund);\r\n  }\r\n\r\n  /**\r\n   * @dev Cancels a key managed by a different user and sends the funds to the msg.sender.\r\n   * @param _keyManager the key managed by this user will be canceled\r\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyOwner\r\n   * @param _tokenId The key to cancel\r\n   */\r\n  function cancelAndRefundFor(\r\n    address _keyManager,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s,\r\n    uint _tokenId\r\n  ) external\r\n    consumeOffchainApproval(\r\n      getCancelAndRefundApprovalHash(_keyManager, msg.sender),\r\n      _keyManager,\r\n      _v,\r\n      _r,\r\n      _s\r\n    )\r\n  {\r\n    address keyOwner = ownerOf(_tokenId);\r\n    uint refund = _getCancelAndRefundValue(keyOwner);\r\n    _cancelAndRefund(keyOwner, refund);\r\n  }\r\n\r\n  /**\r\n   * Allow the owner to change the refund penalty.\r\n   */\r\n  function updateRefundPenalty(\r\n    uint _freeTrialLength,\r\n    uint _refundPenaltyBasisPoints\r\n  ) external\r\n    onlyLockManager\r\n  {\r\n    emit RefundPenaltyChanged(\r\n      _freeTrialLength,\r\n      _refundPenaltyBasisPoints\r\n    );\r\n\r\n    freeTrialLength = _freeTrialLength;\r\n    refundPenaltyBasisPoints = _refundPenaltyBasisPoints;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how much of a refund a key owner would receive if they issued\r\n   * a cancelAndRefund block.timestamp.\r\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\r\n   * than what the user reads from this call.\r\n   */\r\n  function getCancelAndRefundValueFor(\r\n    address _keyOwner\r\n  )\r\n    external view\r\n    returns (uint refund)\r\n  {\r\n    return _getCancelAndRefundValue(_keyOwner);\r\n  }\r\n\r\n  /**\r\n   * @notice returns the hash to sign in order to allow another user to cancel on your behalf.\r\n   * @dev this can be computed in JS instead of read from the contract.\r\n   * @param _keyManager The key manager's address (also the message signer)\r\n   * @param _txSender The address cancelling cancel on behalf of the keyOwner\r\n   * @return approvalHash The hash to sign\r\n   */\r\n  function getCancelAndRefundApprovalHash(\r\n    address _keyManager,\r\n    address _txSender\r\n  ) public view\r\n    returns (bytes32 approvalHash)\r\n  {\r\n    return keccak256(\r\n      abi.encodePacked(\r\n        // Approval is specific to this Lock\r\n        address(this),\r\n        // The specific function the signer is approving\r\n        CANCEL_TYPEHASH,\r\n        // Approval enables only one cancel call\r\n        keyManagerToNonce[_keyManager],\r\n        // Approval allows only one account to broadcast the tx\r\n        _txSender\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev cancels the key for the given keyOwner and sends the refund to the msg.sender.\r\n   */\r\n  function _cancelAndRefund(\r\n    address _keyOwner,\r\n    uint refund\r\n  ) internal\r\n  {\r\n    Key storage key = keyByOwner[_keyOwner];\r\n\r\n    emit CancelKey(key.tokenId, _keyOwner, msg.sender, refund);\r\n    // expirationTimestamp is a proxy for hasKey, setting this to `block.timestamp` instead\r\n    // of 0 so that we can still differentiate hasKey from hasValidKey.\r\n    key.expirationTimestamp = block.timestamp;\r\n\r\n    if (refund > 0) {\r\n      // Security: doing this last to avoid re-entrancy concerns\r\n      _transfer(tokenAddress, _keyOwner, refund);\r\n    }\r\n\r\n    // inform the hook if there is one registered\r\n    if(address(onKeyCancelHook) != address(0))\r\n    {\r\n      onKeyCancelHook.onKeyCancel(msg.sender, _keyOwner, refund);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how much of a refund a key owner would receive if they issued\r\n   * a cancelAndRefund now.\r\n   * @param _keyOwner The owner of the key check the refund value for.\r\n   */\r\n  function _getCancelAndRefundValue(\r\n    address _keyOwner\r\n  )\r\n    private view\r\n    hasValidKey(_keyOwner)\r\n    returns (uint refund)\r\n  {\r\n    Key storage key = keyByOwner[_keyOwner];\r\n    // Math: safeSub is not required since `hasValidKey` confirms timeRemaining is positive\r\n    uint timeRemaining = key.expirationTimestamp - block.timestamp;\r\n    if(timeRemaining + freeTrialLength >= expirationDuration) {\r\n      refund = keyPrice;\r\n    } else {\r\n      // Math: using safeMul in case keyPrice or timeRemaining is very large\r\n      refund = keyPrice.mul(timeRemaining) / expirationDuration;\r\n    }\r\n\r\n    // Apply the penalty if this is not a free trial\r\n    if(freeTrialLength == 0 || timeRemaining + freeTrialLength < expirationDuration)\r\n    {\r\n      uint penalty = keyPrice.mul(refundPenaltyBasisPoints) / BASIS_POINTS_DEN;\r\n      if (refund > penalty) {\r\n        // Math: safeSub is not required since the if confirms this won't underflow\r\n        refund -= penalty;\r\n      } else {\r\n        refund = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: contracts/mixins/MixinTransfer.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mixin for the transfer-related functions needed to meet the ERC721\r\n * standard.\r\n * @author Nick Furfaro\r\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\r\n * separates logically groupings of code to ease readability.\r\n */\r\n\r\ncontract MixinTransfer is\r\n  MixinLockManagerRole,\r\n  MixinFunds,\r\n  MixinLockCore,\r\n  MixinKeys\r\n{\r\n  using SafeMath for uint;\r\n  using Address for address;\r\n\r\n  event TransferFeeChanged(\r\n    uint transferFeeBasisPoints\r\n  );\r\n\r\n  // 0x150b7a02 == bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // The fee relative to keyPrice to charge when transfering a Key to another account\r\n  // (potentially on a 0x marketplace).\r\n  // This is calculated as `keyPrice * transferFeeBasisPoints / BASIS_POINTS_DEN`.\r\n  uint public transferFeeBasisPoints;\r\n\r\n  /**\r\n  * @notice Allows the key owner to safely share their key (parent key) by\r\n  * transferring a portion of the remaining time to a new key (child key).\r\n  * @param _to The recipient of the shared key\r\n  * @param _tokenId the key to share\r\n  * @param _timeShared The amount of time shared\r\n  */\r\n  function shareKey(\r\n    address _to,\r\n    uint _tokenId,\r\n    uint _timeShared\r\n  ) public\r\n    onlyIfAlive\r\n    onlyKeyManagerOrApproved(_tokenId)\r\n  {\r\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\r\n    require(_to != address(0), 'INVALID_ADDRESS');\r\n    address keyOwner = _ownerOf[_tokenId];\r\n    require(getHasValidKey(keyOwner), 'KEY_NOT_VALID');\r\n    Key storage fromKey = keyByOwner[keyOwner];\r\n    Key storage toKey = keyByOwner[_to];\r\n    uint idTo = toKey.tokenId;\r\n    uint time;\r\n    // get the remaining time for the origin key\r\n    uint timeRemaining = fromKey.expirationTimestamp - block.timestamp;\r\n    // get the transfer fee based on amount of time wanted share\r\n    uint fee = getTransferFee(keyOwner, _timeShared);\r\n    uint timePlusFee = _timeShared.add(fee);\r\n\r\n    // ensure that we don't try to share too much\r\n    if(timePlusFee < timeRemaining) {\r\n      // now we can safely set the time\r\n      time = _timeShared;\r\n      // deduct time from parent key, including transfer fee\r\n      _timeMachine(_tokenId, timePlusFee, false);\r\n    } else {\r\n      // we have to recalculate the fee here\r\n      fee = getTransferFee(keyOwner, timeRemaining);\r\n      time = timeRemaining - fee;\r\n      fromKey.expirationTimestamp = block.timestamp; // Effectively expiring the key\r\n      emit ExpireKey(_tokenId);\r\n    }\r\n\r\n    if (idTo == 0) {\r\n      _assignNewTokenId(toKey);\r\n      idTo = toKey.tokenId;\r\n      _recordOwner(_to, idTo);\r\n      emit Transfer(\r\n        address(0), // This is a creation or time-sharing\r\n        _to,\r\n        idTo\r\n      );\r\n    } else if (toKey.expirationTimestamp <= block.timestamp) {\r\n      // reset the key Manager for expired keys\r\n      _setKeyManagerOf(idTo, address(0));\r\n    }\r\n\r\n    // add time to new key\r\n    _timeMachine(idTo, time, true);\r\n    // trigger event\r\n    emit Transfer(\r\n      keyOwner,\r\n      _to,\r\n      idTo\r\n    );\r\n\r\n    require(_checkOnERC721Received(keyOwner, _to, _tokenId, ''), 'NON_COMPLIANT_ERC721_RECEIVER');\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _recipient,\r\n    uint _tokenId\r\n  )\r\n    public\r\n    onlyIfAlive\r\n    hasValidKey(_from)\r\n    onlyKeyManagerOrApproved(_tokenId)\r\n  {\r\n    require(isKeyOwner(_tokenId, _from), 'TRANSFER_FROM: NOT_KEY_OWNER');\r\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\r\n    require(_recipient != address(0), 'INVALID_ADDRESS');\r\n    uint fee = getTransferFee(_from, 0);\r\n\r\n    Key storage fromKey = keyByOwner[_from];\r\n    Key storage toKey = keyByOwner[_recipient];\r\n\r\n    uint previousExpiration = toKey.expirationTimestamp;\r\n    // subtract the fee from the senders key before the transfer\r\n    _timeMachine(_tokenId, fee, false);\r\n\r\n    if (toKey.tokenId == 0) {\r\n      toKey.tokenId = _tokenId;\r\n      _recordOwner(_recipient, _tokenId);\r\n      // Clear any previous approvals\r\n      _clearApproval(_tokenId);\r\n    }\r\n\r\n    if (previousExpiration <= block.timestamp) {\r\n      // The recipient did not have a key, or had a key but it expired. The new expiration is the sender's key expiration\r\n      // An expired key is no longer a valid key, so the new tokenID is the sender's tokenID\r\n      toKey.expirationTimestamp = fromKey.expirationTimestamp;\r\n      toKey.tokenId = _tokenId;\r\n\r\n      // Reset the key Manager to the key owner\r\n      _setKeyManagerOf(_tokenId, address(0));\r\n\r\n      _recordOwner(_recipient, _tokenId);\r\n    } else {\r\n      // The recipient has a non expired key. We just add them the corresponding remaining time\r\n      // SafeSub is not required since the if confirms `previousExpiration - block.timestamp` cannot underflow\r\n      toKey.expirationTimestamp = fromKey\r\n        .expirationTimestamp.add(previousExpiration - block.timestamp);\r\n    }\r\n\r\n    // Effectively expiring the key for the previous owner\r\n    fromKey.expirationTimestamp = block.timestamp;\r\n\r\n    // Set the tokenID to 0 for the previous owner to avoid duplicates\r\n    fromKey.tokenId = 0;\r\n\r\n    // trigger event\r\n    emit Transfer(\r\n      _from,\r\n      _recipient,\r\n      _tokenId\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @notice Transfers the ownership of an NFT from one address to another address\r\n  * @dev This works identically to the other function with an extra data parameter,\r\n  *  except this function just sets data to ''\r\n  * @param _from The current owner of the NFT\r\n  * @param _to The new owner\r\n  * @param _tokenId The NFT to transfer\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId\r\n  )\r\n    public\r\n  {\r\n    safeTransferFrom(_from, _to, _tokenId, '');\r\n  }\r\n\r\n  /**\r\n  * @notice Transfers the ownership of an NFT from one address to another address.\r\n  * When transfer is complete, this functions\r\n  *  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n  *  `onERC721Received` on `_to` and throws if the return value is not\r\n  *  `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\r\n  * @param _from The current owner of the NFT\r\n  * @param _to The new owner\r\n  * @param _tokenId The NFT to transfer\r\n  * @param _data Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(_checkOnERC721Received(_from, _to, _tokenId, _data), 'NON_COMPLIANT_ERC721_RECEIVER');\r\n\r\n  }\r\n\r\n  /**\r\n   * Allow the Lock owner to change the transfer fee.\r\n   */\r\n  function updateTransferFee(\r\n    uint _transferFeeBasisPoints\r\n  )\r\n    external\r\n    onlyLockManager\r\n  {\r\n    emit TransferFeeChanged(\r\n      _transferFeeBasisPoints\r\n    );\r\n    transferFeeBasisPoints = _transferFeeBasisPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines how much of a fee a key owner would need to pay in order to\r\n   * transfer the key to another account.  This is pro-rated so the fee goes down\r\n   * overtime.\r\n   * @param _keyOwner The owner of the key check the transfer fee for.\r\n   */\r\n  function getTransferFee(\r\n    address _keyOwner,\r\n    uint _time\r\n  )\r\n    public view\r\n    hasValidKey(_keyOwner)\r\n    returns (uint)\r\n  {\r\n    Key storage key = keyByOwner[_keyOwner];\r\n    uint timeToTransfer;\r\n    uint fee;\r\n    // Math: safeSub is not required since `hasValidKey` confirms timeToTransfer is positive\r\n    // this is for standard key transfers\r\n    if(_time == 0) {\r\n      timeToTransfer = key.expirationTimestamp - block.timestamp;\r\n    } else {\r\n      timeToTransfer = _time;\r\n    }\r\n    fee = timeToTransfer.mul(transferFeeBasisPoints) / BASIS_POINTS_DEN;\r\n    return fee;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PublicLock.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The Lock contract\r\n * @author Julien Genestoux (unlock-protocol.com)\r\n * @dev ERC165 allows our contract to be queried to determine whether it implements a given interface.\r\n * Every ERC-721 compliant contract must implement the ERC165 interface.\r\n * https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract PublicLock is\r\n  IPublicLock,\r\n  Initializable,\r\n  ERC165,\r\n  MixinLockManagerRole,\r\n  MixinKeyGranterRole,\r\n  MixinSignatures,\r\n  MixinFunds,\r\n  MixinDisable,\r\n  MixinLockCore,\r\n  MixinKeys,\r\n  MixinLockMetadata,\r\n  MixinERC721Enumerable,\r\n  MixinGrantKeys,\r\n  MixinPurchase,\r\n  MixinTransfer,\r\n  MixinRefunds\r\n{\r\n  function initialize(\r\n    address _lockCreator,\r\n    uint _expirationDuration,\r\n    address _tokenAddress,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys,\r\n    string memory _lockName\r\n  ) public\r\n    initializer()\r\n  {\r\n    MixinFunds._initializeMixinFunds(_tokenAddress);\r\n    MixinDisable._initializeMixinDisable();\r\n    MixinLockCore._initializeMixinLockCore(_lockCreator, _expirationDuration, _keyPrice, _maxNumberOfKeys);\r\n    MixinLockMetadata._initializeMixinLockMetadata(_lockName);\r\n    MixinERC721Enumerable._initializeMixinERC721Enumerable();\r\n    MixinRefunds._initializeMixinRefunds();\r\n    MixinLockManagerRole._initializeMixinLockManagerRole(_lockCreator);\r\n    MixinKeyGranterRole._initializeMixinKeyGranterRole(_lockCreator);\r\n    // registering the interface for erc721 with ERC165.sol using\r\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\r\n    _registerInterface(0x80ac58cd);\r\n  }\r\n\r\n  /**\r\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\r\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\r\n   */\r\n  function() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"CancelKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Disable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_timeAdded\",\"type\":\"bool\"}],\"name\":\"ExpirationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExpireKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"KeyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NewLockSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keyManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableNonce\",\"type\":\"uint256\"}],\"name\":\"NonceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldKeyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PricingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeTrialLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"RefundPenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiration\",\"type\":\"uint256\"}],\"name\":\"RenewKeyPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKeyGranter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addLockManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefundFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"expireAndRefundFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeTrialLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_txSender\",\"type\":\"address\"}],\"name\":\"getCancelAndRefundApprovalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"approvalHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"getCancelAndRefundValueFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"getHasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageSize\",\"type\":\"uint256\"}],\"name\":\"getOwnersByPage\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokenIdFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirationTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_keyManagers\",\"type\":\"address[]\"}],\"name\":\"grantKeys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfKeys\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextAvailableNonce\",\"type\":\"uint256\"}],\"name\":\"invalidateOffchainApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKeyGranter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"isKeyOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLockManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"keyExpirationTimestampFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyManagerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyManagerToNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onKeyCancelHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyCancelHook\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onKeyPurchaseHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyPurchaseHook\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicLockVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"purchasePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundPenaltyBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceLockManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"}],\"name\":\"revokeKeyGranter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onKeyPurchaseHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onKeyCancelHook\",\"type\":\"address\"}],\"name\":\"setEventHooks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"}],\"name\":\"setKeyManagerOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeShared\",\"type\":\"uint256\"}],\"name\":\"shareKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockProtocol\",\"outputs\":[{\"internalType\":\"contract IUnlock\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateKeyPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"updateLockName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockSymbol\",\"type\":\"string\"}],\"name\":\"updateLockSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeTrialLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateRefundPenalty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PublicLock","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e6570f8bf01717c6b35e17be321624c59c8f788bfa8f0a41b0287b41cb66eac5"}]}