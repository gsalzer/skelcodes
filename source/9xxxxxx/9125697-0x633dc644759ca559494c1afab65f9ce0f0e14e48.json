{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\n\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  \n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  \n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  \n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  \n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  \n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  \n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  \n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    \n    \n    \n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  \n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); \n    uint256 c = a / b;\n    \n\n    return c;\n  }\n\n  \n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  \n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  \n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  \n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  \n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  \n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  \n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  \n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  \n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  \n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  \n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  \n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  \n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  \n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    \n    \n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  \n  function name() public view returns(string) {\n    return _name;\n  }\n\n  \n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  \n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  \n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  \n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  \n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n  \n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\ncontract JupiterCoin is ERC20, ERC20Detailed, ERC20Mintable, Ownable{\n\n  constructor(\n    string name,\n    string symbol,\n    uint8 decimals\n  )\n  public\n  ERC20Mintable()\n  ERC20Detailed(name, symbol, decimals)\n  ERC20() {\n  }\n\n  \n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    \n    require(totalSupply() + value <= 100000000000000000000000000, \"TOTAL_SUPPLY_EXCEEDED\");\n    return ERC20Mintable.mint(to, value);\n  }\n\n  \n  struct PledgeRecord {\n    address user;\n    uint256 tokens;\n  }\n\n  \n  mapping(string => PledgeRecord) private orderPledge;\n\n  \n  mapping(string => bool) orderIndex;\n\n  \n  event Pledge_Succeeded(\n    address pledger,\n    string order,\n    uint256 tokens\n  );\n\n  \n  event Refund_Succeeded(\n    address pledger,\n    string order\n  );\n\n  \n  \n  \n  function pledge(string order, uint256 tokens) external {\n    require(!isOwner(), \"INVALID_MSG_SENDER\");\n    require(orderIndex[order] != true, \"EXISTING_ORDER\");\n    require(balanceOf(msg.sender) >= tokens, \"NOT_ENOUGH_BALANCE\");\n    require(transfer(owner(), tokens), \"TRANSFER_FAILED\");\n    emit Pledge_Succeeded(msg.sender, order, tokens);\n    orderPledge[order] = PledgeRecord(msg.sender, tokens);\n    orderIndex[order] = true;\n  }\n\n  \n  \n  \n  function refund(string order, uint256 tokens) external onlyOwner {\n    require(orderIndex[order] == true, \"INVALID_ORDER\");\n\n    PledgeRecord memory pledgeRecord = orderPledge[order];\n    address user = pledgeRecord.user;\n    uint256 amount = pledgeRecord.tokens;\n\n    require((amount + amount) >= tokens, \"NOT_CORRECT_PLEDGE\");\n    require(balanceOf(msg.sender) >= amount, \"NOT_ENOUGH_TOKENS\");\n    require(transfer(user, amount), \"TRANSFER_FAILED\");\n    emit Refund_Succeeded(user, order);\n    delete orderPledge[order];\n    delete orderIndex[order];\n  }\n\n  \n  \n  function isPledged(string order) public view returns (bool) {\n    return orderIndex[order];\n  }\n\n  \n  \n  function pledgeRecord(string order) public view \n    returns (address pledger, uint256 tokens) {\n    PledgeRecord memory p = orderPledge[order];\n    return (p.user, p.tokens);\n  }\n\n  \n  struct TokenOrder {\n    address seller;\n    address buyer;\n    uint256 tokens;\n  }\n\n  \n  mapping(uint32 => TokenOrder) private tokenOrder;\n\n  \n  mapping(uint32 => bool) private tokenOrderIndex; \n\n  \n  event Transfer_Succeeded(\n    uint32 tokenOrderId,\n    address seller,\n    address buyer,\n    uint256 tokens\n  );\n\n  \n  event Cancel_Succeeded(\n    uint32 tokenOrderId,\n    address seller\n  );\n\n  \n  event Sell_Succeeded(\n    uint32 tokenOrderId,\n    address seller,\n    address buyer\n  );\n  \n  \n  \n  \n  \n  function transferForSale(uint32 tokenOrderId, address buyer, uint256 tokens) external {\n    require(!isOwner(), \"INVALID_ADDRESS\");\n    require(tokenOrderIndex[tokenOrderId] != true, \"EXISTING_TOKEN_ORDER\");\n    require(balanceOf(msg.sender) >= tokens, \"NOT_ENOUGH_BALANCE\");\n\n    require(transfer(owner(), tokens), \"TRANSFER_FAILED\");\n    emit Transfer_Succeeded(tokenOrderId, msg.sender, buyer, tokens);\n    tokenOrder[tokenOrderId] = TokenOrder(msg.sender, buyer, tokens);\n    tokenOrderIndex[tokenOrderId] = true;\n  }\n\n  \n  \n  function cancelForUser(uint32 tokenOrderId) external onlyOwner {\n    require(tokenOrderIndex[tokenOrderId] == true, \"INVALID_TOKEN_ORDER\");\n\n    TokenOrder memory order = tokenOrder[tokenOrderId];\n    uint256 amount = order.tokens;\n    address seller = order.seller;\n    \n    require(balanceOf(msg.sender) >= amount, \"NOT_ENOUGH_TOKENS\");\n    require(transfer(seller, amount), \"TRANSFER_FAILED\");\n    emit Cancel_Succeeded(tokenOrderId, seller);\n    delete tokenOrder[tokenOrderId];\n    delete tokenOrderIndex[tokenOrderId];\n  }\n\n  \n  \n  function sellForUser(uint32 tokenOrderId) external onlyOwner {\n    require(tokenOrderIndex[tokenOrderId] == true, \"INVALID_TOKEN_ORDER\");\n\n    TokenOrder memory order = tokenOrder[tokenOrderId];\n    uint256 amount = order.tokens;\n    address seller = order.seller;\n    address buyer = order.buyer;\n    \n    require(balanceOf(msg.sender) >= amount, \"NOT_ENOUGH_TOKENS\");\n    require(transfer(buyer, amount), \"TRANSFER_FAILED\");\n    emit Sell_Succeeded(tokenOrderId, seller, buyer);\n    delete tokenOrder[tokenOrderId];\n    delete tokenOrderIndex[tokenOrderId];\n  }\n\n  \n  \n  function isTransferred(uint32 tokenOrderId) public view returns (bool) {\n    return tokenOrderIndex[tokenOrderId];\n  }\n\n  \n  \n  function tokenOrderInfo(uint32 tokenOrderId) public view \n    returns (address seller, address buyer, uint256 tokens) {\n    TokenOrder memory t = tokenOrder[tokenOrderId];\n    return (t.seller, t.buyer, t.tokens);\n  }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOrderId\",\"type\":\"uint32\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOrderId\",\"type\":\"uint32\"}],\"name\":\"isTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"order\",\"type\":\"string\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"order\",\"type\":\"string\"}],\"name\":\"isPledged\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"order\",\"type\":\"string\"}],\"name\":\"pledgeRecord\",\"outputs\":[{\"name\":\"pledger\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOrderId\",\"type\":\"uint32\"}],\"name\":\"sellForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOrderId\",\"type\":\"uint32\"}],\"name\":\"tokenOrderInfo\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"order\",\"type\":\"string\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOrderId\",\"type\":\"uint32\"}],\"name\":\"cancelForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pledger\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"order\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Pledge_Succeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pledger\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"order\",\"type\":\"string\"}],\"name\":\"Refund_Succeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenOrderId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer_Succeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenOrderId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Cancel_Succeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenOrderId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Sell_Succeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"JupiterCoin","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000009e59586e4bfa1e8af81000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034243540000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://5533b704489fd79564c027d720fbc457101b5e48df2b9fe16bc98cae1783cfd9"}]}