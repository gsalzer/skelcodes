{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/upgradable/OwnableUpgradable.sol\n\npragma solidity ^0.5.16;\n\n\ncontract OwnableUpgradable is Initializable {\n    address payable public owner;\n    address payable internal newOwnerCandidate;\n\n    // Initializer â€“ Constructor for Upgradable contracts\n    function initialize() initializer public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        newOwnerCandidate = newOwner;\n    }\n\n    function acceptOwner() public {\n        require(msg.sender == newOwnerCandidate);\n        owner = newOwnerCandidate;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/utils/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/interfaces/TokenInterface.sol\n\npragma solidity ^0.5.16;\n\ninterface TokenInterface {\n    function decimals() external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\n// File: contracts/utils/SafeERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(TokenInterface token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(TokenInterface token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(TokenInterface token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(TokenInterface token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(TokenInterface token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(TokenInterface token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/utils/UniversalERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n\n\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for TokenInterface;\n\n    TokenInterface private constant ZERO_ADDRESS = TokenInterface(0x0000000000000000000000000000000000000000);\n    TokenInterface private constant ETH_ADDRESS = TokenInterface(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function universalTransfer(TokenInterface token, address to, uint256 amount) internal {\n        universalTransfer(token, to, amount, false);\n    }\n\n    function universalTransfer(TokenInterface token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            if (mayFail) {\n                return address(uint160(to)).send(amount);\n            } else {\n                address(uint160(to)).transfer(amount);\n                return true;\n            }\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function universalApprove(TokenInterface token, address to, uint256 amount) internal {\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(TokenInterface token, address from, address to, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(uint256(msg.value).sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(TokenInterface token, address who) internal view returns (uint256) {\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n\n// File: contracts/upgradable/FundsMgrUpgradable.sol\n\npragma solidity ^0.5.16;\n\n\n\n\ncontract FundsMgrUpgradable is Initializable, OwnableUpgradable {\n    using UniversalERC20 for TokenInterface;\n\n    // Initializer â€“ Constructor for Upgradable contracts\n    function initialize() initializer public {\n        OwnableUpgradable.initialize();  // Initialize Parent Contract\n    }\n\n    function withdraw(address token, uint256 amount) onlyOwner public  {\n        require(msg.sender == owner);\n\n        if (token == address(0x0)) {\n            owner.transfer(amount);\n        } else {\n            TokenInterface(token).universalTransfer(owner, amount);\n        }\n    }\n    function withdrawAll(address[] memory tokens) onlyOwner public  {\n        for(uint256 i = 0; i < tokens.length;i++) {\n            withdraw(tokens[i], TokenInterface(tokens[i]).universalBalanceOf(address(this)));\n        }\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/interfaces/PepInterface.sol\n\npragma solidity ^0.5.16;\n\ninterface PepInterface {\n    function peek() external view returns (bytes32, bool);\n    function read() external view returns (bytes32);\n}\n\n// File: contracts/interfaces/TubInterface.sol\n\npragma solidity ^0.5.16;\n\n\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function mat() external view returns (uint);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n    function pip() external view returns (PepInterface);\n    function ask(uint wad) external view returns (uint);\n}\n\n// File: contracts/utils/DSMath.sol\n\npragma solidity ^0.5.0;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\n        z = add(mul(x, y), base / 2) / base;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }*/\n}\n\n// File: contracts/DfProxyBet.sol\n\npragma solidity ^0.5.16;\n\n\n\n\n\n\n// ** INTERFACES**\n\ninterface BetsFactoryInterace {\n    function createBetEthPrice(uint256 targetPrice, uint256 endTime) external returns(address);\n}\n\ninterface BetEthPriceInterface {\n    function betOnLowPrice(address beneficiary, uint256 amount) external;\n    function targetPrice() external returns(uint256);\n    function endTime() external returns(uint256);\n}\n\n\ncontract DfProxyBet is Initializable, DSMath, FundsMgrUpgradable {\n    mapping(uint256 => BetEthPriceInterface) public betContracts;\n\n    TokenInterface public sai;\n    TokenInterface public usdt;\n\n    TubInterface public tub;\n\n    uint256 public swapRatio;  // sai/usdt\n\n\n    uint256 public curNewBetDuration;  //  in sec - new Bet instances â€“ now + curNewBetDuration\n    uint256 public minBetDuration;  //  in sec - bet in cur Bet instance â€“ now < now + minBetDuration\n\n    BetsFactoryInterace public betsFactory;\n\n\n    event CdpInsured(bytes32 cup, address indexed curBetPrice);\n\n\n    function initialize() initializer public {\n        FundsMgrUpgradable.initialize();  // Initialize Parent Contract\n\n        tub = TubInterface(0x448a5065aeBB8E423F0896E6c5D525C040f59af3);  // MainNet SaiTub: 0x448a5065aeBB8E423F0896E6c5D525C040f59af3\n        usdt = TokenInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // MainNet USDT: 0xdAC17F958D2ee523a2206206994597C13D831ec7\n        sai = TokenInterface(tub.sai());\n\n        swapRatio = 110 * 1e12;  // sai/usdt â€“ in percents (sai - 1e18, usdt - 1e6)\n\n        curNewBetDuration = 60 days;\n        minBetDuration = 15 days;\n\n        betsFactory = BetsFactoryInterace(0x1085b63c4A2Ef580dB9b02712eC2CEa84a14bc2D);\n    }\n\n\n    // **USER's functions**\n\n    function insure(address beneficiary, bytes32 cup, uint256 amountSai) public {\n        require(amountSai > 0, \"amountSai can not be zero\");\n\n        // transfer SAI\n        sai.transferFrom(msg.sender, address(this), amountSai);\n\n        uint256 amountUsdt = getUsdtAmount(amountSai);\n        uint256 liqPriceCeil = ceil(getLiquidationPrice(cup), 1e19);  // price * 1e18 and ceil 151 -> 160\n\n        BetEthPriceInterface curBetContract = betContracts[liqPriceCeil];\n\n        if (address(curBetContract) == address(0) || curBetContract.endTime() <= now + minBetDuration) {\n            curBetContract = BetEthPriceInterface(createBetContractHelper(liqPriceCeil, now + curNewBetDuration));\n        }\n\n        curBetContract.betOnLowPrice(beneficiary, amountUsdt);\n\n        emit CdpInsured(cup, address(curBetContract));\n    }\n\n\n    // **VIEW functions**\n\n    function getUsdtAmount(uint256 amountSai) public view returns(uint256 usdtAmount) {\n        usdtAmount = mul(amountSai, 100) / swapRatio;  // safe operation (swapRatio > 0)\n    }\n\n    function getUsdtBalance() public view returns(uint256 usdtBalance) {\n        usdtBalance = usdt.balanceOf(address(this));\n    }\n\n    function getSaiBalance() public view returns(uint256 saiBalance) {\n        saiBalance = sai.balanceOf(address(this));\n    }\n\n\n    // **ONLY OWNER functions**\n\n    function addBetContract(BetEthPriceInterface bet) public onlyOwner {\n        addBetContractHelper(bet);\n    }\n\n    function addBetContractArray(BetEthPriceInterface[] memory bets) public onlyOwner {\n        require(bets.length > 0, \"array lengths have to be greater than zero\");\n\n        for (uint i = 0; i < bets.length; i++) {\n            addBetContractHelper(bets[i]);\n        }\n    }\n\n    function createBetContract(uint256 targetPrice, uint256 endTime) public onlyOwner {\n        createBetContractHelper(targetPrice, endTime);\n    }\n\n    // prices interval - [fromTargetPrice; toTargetPrice]\n    function createBetContracts(uint256 fromTargetPrice, uint256 toTargetPrice, uint256 endTime) public onlyOwner {\n        require(fromTargetPrice < toTargetPrice, \"toTargetPrice must be more than fromTargetPrice\");\n\n        for (uint targetPrice = fromTargetPrice; targetPrice <= toTargetPrice; targetPrice += 10 * 1e18) {\n            createBetContractHelper(targetPrice, endTime);\n        }\n    }\n\n    function setSwapRatio(uint256 ratio) public onlyOwner {\n        require((ratio >= 50 * 1e12) && (ratio <= 200 * 1e12), \"Ratio is incorrect\");\n        swapRatio = ratio;\n    }\n\n    function setBetDuration(uint256 curDuration, uint256 minDuration) public onlyOwner {\n        curNewBetDuration = curDuration;  // in seconds\n        minBetDuration = minDuration;  // in seconds\n    }\n\n    function setBetFactory(address betsFactoryAddress) public onlyOwner {\n        betsFactory = BetsFactoryInterace(betsFactoryAddress);\n    }\n\n\n    // **INTERNAL functions**\n\n    function ceil(uint256 a, uint256 m) internal pure returns(uint256) {\n        return ((a + m - 1) / m) * m;\n    }\n\n    function getLiquidationPrice(bytes32 cup) internal returns(uint256 liqPrice) {\n        uint256 saiAmount = uint256(tub.tab(cup));\n        uint256 ethAmount = rmul(tub.ink(cup), tub.per());\n\n        liqPrice = wdiv(wmul(wdiv(saiAmount, ethAmount), 150), 100);  // 150 % * (saiAmount / ethAmount)\n    }\n\n    function addBetContractHelper(BetEthPriceInterface bet) internal {\n        require(bet.endTime() > now + minBetDuration, \"Betting time is invalid\");\n\n        uint256 targetPriceFloor = mul((bet.targetPrice() / 1e19), 1e19);  // price * 1e18 and floor 169 -> 160\n\n        betContracts[targetPriceFloor] = bet;\n\n        // all usdt of this contract approved to BetEthPrice Contract\n        usdt.approve(address(bet), uint(-1));\n    }\n\n    function createBetContractHelper(uint256 targetPrice, uint256 endTime) internal returns(address bet) {\n        bet = betsFactory.createBetEthPrice(targetPrice, endTime);\n        addBetContractHelper(BetEthPriceInterface(bet));\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"curBetPrice\",\"type\":\"address\"}],\"name\":\"CdpInsured\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BetEthPriceInterface\",\"name\":\"bet\",\"type\":\"address\"}],\"name\":\"addBetContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BetEthPriceInterface[]\",\"name\":\"bets\",\"type\":\"address[]\"}],\"name\":\"addBetContractArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betContracts\",\"outputs\":[{\"internalType\":\"contract BetEthPriceInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsFactory\",\"outputs\":[{\"internalType\":\"contract BetsFactoryInterace\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"createBetContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTargetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTargetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"createBetContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curNewBetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"saiBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSai\",\"type\":\"uint256\"}],\"name\":\"getUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountSai\",\"type\":\"uint256\"}],\"name\":\"insure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sai\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"curDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"}],\"name\":\"setBetDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"betsFactoryAddress\",\"type\":\"address\"}],\"name\":\"setBetFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setSwapRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"internalType\":\"contract TubInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfProxyBet","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}