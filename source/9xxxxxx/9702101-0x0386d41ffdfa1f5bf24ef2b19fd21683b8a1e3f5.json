{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC1820Registry {\r\n    function setManager(address account, address newManager) external;\r\n\r\n    function getManager(address account) external view returns (address);\r\n\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\ninterface IERC777Recipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC777 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function granularity() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount, bytes calldata data) external;\r\n\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    function authorizeOperator(address operator) external;\r\n\r\n    function revokeOperator(address operator) external;\r\n\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface ISmartexOracle {\r\n  function currentETHPrice() external view returns (uint256);\r\n  function lastETHPriceUpdate() external view returns (uint256);\r\n\r\n  function currentTokenPrice() external view returns (uint256);\r\n  function lastTokenPriceUpdate() external view returns (uint256);\r\n\r\n  function setETHPrice(uint256 price) external;\r\n  function updateTokenPrice() external;\r\n\r\n  event ETHPriceUpdated(uint256 price, uint256 timestamp);\r\n  event TokenPriceUpdated(uint256 price, uint256 timestamp);\r\n}\r\n\r\ncontract SmartexExchange is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  mapping (address => bool) public authorizedCallers;\r\n\r\n  struct OrderStruct {\r\n    bool exists;\r\n    address owner;\r\n    uint256 amount;\r\n  }\r\n\r\n  mapping (uint256 => OrderStruct) public orders;\r\n\r\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n\r\n  address payable private _wallet;\r\n  address payable private _secondWallet;\r\n\r\n  uint256 private _currentOrderID;\r\n\r\n  uint256 private _orderUSDMinAmount;\r\n\r\n  IERC777 private _token;\r\n  ISmartexOracle private _oracle;\r\n\r\n  bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\r\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n  event Order(address indexed owner, uint256 indexed id, uint256 amount, uint256 price, uint256 time);\r\n  event Cancel(address indexed owner, uint256 indexed id, uint256 time);\r\n  event Close(address indexed owner, uint256 indexed id, uint256 time);\r\n  event Trade(address indexed buyer, address indexed seller, uint256 indexed orderID, uint256 amount, uint256 price, uint256 time);\r\n\r\n  modifier onlyAuthorizedCaller() {\r\n    require(_msgSender() == owner() || authorizedCallers[_msgSender()], \"SmartexExchange: caller is not authorized\");\r\n    _;\r\n  }\r\n\r\n  constructor(address payable wallet, address payable secondWallet, IERC777 token) public {\r\n    _wallet = wallet;\r\n    _secondWallet = secondWallet;\r\n    _token = token;\r\n\r\n    _orderUSDMinAmount = 20 * (10 ** 8);\r\n\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\r\n  }\r\n\r\n  function setOracle(ISmartexOracle oracle) public onlyOwner {\r\n    _oracle = oracle;\r\n  }\r\n\r\n  function oracle() public view returns (ISmartexOracle) {\r\n    return _oracle;\r\n  }\r\n\r\n  function token() public view returns (IERC777) {\r\n    return _token;\r\n  }\r\n\r\n  function wallet() public view returns (address payable) {\r\n    return _wallet;\r\n  }\r\n\r\n  function secondWallet() public view returns (address payable) {\r\n    return _secondWallet;\r\n  }\r\n\r\n  function setOrderUSDMinAmount(uint256 amount) public onlyOwner {\r\n    _orderUSDMinAmount = amount;\r\n  }\r\n\r\n  function setAuthorizedCaller(address caller, bool allowed) public onlyOwner {\r\n    authorizedCallers[caller] = allowed;\r\n  }\r\n\r\n  function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external {\r\n    require(address(_token) == _msgSender(), \"Invalid sender\");\r\n    require(operator == from, \"Transfers from operators are not allowed\");\r\n    require(!from.isContract(), \"Transfers from contracts are not allowed\");\r\n\r\n    require(amount >= getOrderTokenMinAmount(), \"Amount is less than the minimum\");\r\n\r\n    _currentOrderID++;\r\n\r\n    OrderStruct memory order = OrderStruct({\r\n      exists: true,\r\n      owner: from,\r\n      amount: amount\r\n    });\r\n\r\n    orders[_currentOrderID] = order;\r\n\r\n    emit Order(from, _currentOrderID, amount, _oracle.currentTokenPrice(), now);\r\n  }\r\n\r\n  function cancelOrder(uint256 id) public {\r\n    OrderStruct storage order = orders[id];\r\n\r\n    require(order.exists, \"Unknown order\");\r\n    require(order.amount > 0, \"The order is already filled/cancelled\");\r\n    require(order.owner == _msgSender(), \"You are not the owner of this order\");\r\n\r\n    uint256 remaining = order.amount;\r\n\r\n    order.amount = 0;\r\n\r\n    _token.transfer(_msgSender(), remaining);\r\n\r\n    emit Cancel(_msgSender(), id, now);\r\n  }\r\n\r\n  function buyOrder(uint256 id, uint256 tokens) public nonReentrant payable {\r\n    OrderStruct storage order = orders[id];\r\n\r\n    require(order.exists, \"Unknown order\");\r\n    require(order.amount > 0, \"The order is already filled/cancelled\");\r\n    require(order.amount >= tokens, \"The order has insufficient funds\");\r\n\r\n    address payable buyer = _msgSender();\r\n\r\n    if (order.owner.isContract()) {\r\n      order.amount = 0;\r\n      emit Close(order.owner, id, now);\r\n\r\n      bool result = buyer.send(msg.value);\r\n\r\n      return;\r\n    }\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 weiToSend = getWeiAmount(tokens);\r\n\r\n    require(weiToSend > 100, \"Minimum trade wei amount 100\");\r\n\r\n    if (tokens >= order.amount) {\r\n      tokens = order.amount;\r\n      order.amount = 0;\r\n    } else {\r\n      order.amount = order.amount.sub(tokens);\r\n    }\r\n\r\n    if (_isDust(order.amount)) {\r\n      uint256 remaining = order.amount;\r\n\r\n      order.amount = 0;\r\n\r\n      emit Close(order.owner, id, now);\r\n\r\n      if (remaining > 0) {\r\n        _token.transfer(order.owner, remaining);\r\n      }\r\n    }\r\n\r\n    uint256 change = weiAmount.sub(weiToSend);\r\n    uint256 fee = weiToSend.div(100);\r\n    weiToSend = weiToSend.sub(fee);\r\n\r\n    bool result;\r\n\r\n    if (order.owner == owner()) {\r\n      _splitAndSendWei(weiToSend);\r\n    } else {\r\n      result = order.owner.toPayable().send(weiToSend);\r\n    }\r\n\r\n    _token.transfer(buyer, tokens);\r\n    result = owner().toPayable().send(fee);\r\n\r\n    emit Trade(buyer, order.owner, id, tokens, _oracle.currentTokenPrice(), now);\r\n\r\n    if (change > 0) {\r\n      result = buyer.send(change);\r\n    }\r\n  }\r\n\r\n  function _splitAndSendWei(uint256 weiAmount) internal {\r\n    uint256 ownerPayment = weiAmount.mul(70).div(100);\r\n    uint256 walletsPayment = weiAmount.sub(ownerPayment);\r\n\r\n    owner().toPayable().transfer(ownerPayment);\r\n\r\n    if (walletsPayment > 0) {\r\n      uint256 firstWalletPayment = walletsPayment.div(2);\r\n      uint256 secondWalletPayment = walletsPayment.sub(firstWalletPayment);\r\n\r\n      wallet().transfer(firstWalletPayment);\r\n      secondWallet().transfer(secondWalletPayment);\r\n    }\r\n  }\r\n\r\n  function getWeiAmount(uint256 tokens) public view returns (uint256) {\r\n    return tokens.mul(_oracle.currentTokenPrice()).div(_oracle.currentETHPrice());\r\n  }\r\n\r\n  function getTokenAmount(uint256 weiAmount) public view returns (uint256) {\r\n    return weiAmount.mul(_oracle.currentETHPrice()).div(_oracle.currentTokenPrice());\r\n  }\r\n\r\n  function getOrderTokenMinAmount() public view returns (uint256) {\r\n    return _orderUSDMinAmount.mul(10 ** uint256(_token.decimals())).div(_oracle.currentTokenPrice());\r\n  }\r\n\r\n\r\n  function _isDust(uint256 tokens) internal view returns (bool) {\r\n    return tokens.mul(_oracle.currentTokenPrice()).div(10 ** uint256(_token.decimals())) < (10 ** 6);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"secondWallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC777\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrderTokenMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getWeiAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ISmartexOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAuthorizedCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISmartexOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOrderUSDMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartexExchange","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000056d09385dae0bb4d6baddc1573d67fb02934d32700000000000000000000000093119efce1eec5b55578ea8e90baa1546d30aa3e000000000000000000000000294042bccb1357b47c1a6a23f1b6086945c37295","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0ec30a99017b07d545ce889fe349c6603dd631b50f5792ec49d582c5e13ac4e3"}]}