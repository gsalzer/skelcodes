{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IRealitio.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\ninterface IRealitio {\r\n    /// @notice Set a fee for asking a question with us as the arbitrator\r\n    /// @dev Default is no fee. Unlike the dispute fee, 0 is an acceptable setting.\r\n    /// You could set an impossibly high fee if you want to prevent us being used as arbitrator unless we submit the question.\r\n    /// (Submitting the question ourselves is not implemented here.)\r\n    /// This fee can be used as a revenue source, an anti-spam measure, or both.\r\n    /// @param fee The fee amount\r\n    function setQuestionFee(uint256 fee) external;\r\n\r\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\r\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\r\n    /// @param questionId The ID of the question\r\n    /// @param requester The account that requested arbitration\r\n    /// @param maxPrevious If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function notifyOfArbitrationRequest(\r\n        bytes32 questionId,\r\n        address requester,\r\n        uint256 maxPrevious\r\n    ) external;\r\n\r\n    /// @notice Submit the answer for a question, for use by the arbitrator.\r\n    /// @dev Doesn't require (or allow) a bond.\r\n    /// If the current final answer is correct, the account should be whoever submitted it.\r\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\r\n    /// However, the answerer stipulations are not enforced by the contract.\r\n    /// @param questionId The ID of the question\r\n    /// @param answer The answer, encoded into bytes32\r\n    /// @param answerer The account credited with this answer for the purpose of bond claims\r\n    function submitAnswerByArbitrator(\r\n        bytes32 questionId,\r\n        bytes32 answer,\r\n        address answerer\r\n    ) external;\r\n\r\n    /// @notice Report whether the answer to the specified question is finalized\r\n    /// @param questionId The ID of the question\r\n    /// @return Return true if finalized\r\n    function isFinalized(bytes32 questionId) external view returns (bool);\r\n\r\n    function withdraw() external;\r\n}\r\n\r\n// File: contracts/Arbitrator.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n\r\n\r\n\r\ncontract Arbitrator is Ownable {\r\n\r\n    IRealitio public realitio;\r\n\r\n    mapping(bytes32 => uint256) public arbitration_bounties;\r\n\r\n    uint256 disputeFee;\r\n    mapping(bytes32 => uint256) customDisputeFees;\r\n\r\n    string public metadata;\r\n\r\n    event LogRequestArbitration(\r\n        bytes32 indexed questionId,\r\n        uint256 feePaid,\r\n        address requester,\r\n        uint256 remaining\r\n    );\r\n\r\n    event LogSetRealitio(\r\n        address realitio\r\n    );\r\n\r\n    event LogSetQuestionFee(\r\n        uint256 fee\r\n    );\r\n\r\n\r\n    event LogSetDisputeFee(\r\n        uint256 fee\r\n    );\r\n\r\n    event LogSetCustomDisputeFee(\r\n        bytes32 indexed questionId,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Returns the IRealitio contract address - deprecated in favour of realitio()\r\n    function realitycheck() external view returns (IRealitio) {\r\n        return realitio;\r\n    }\r\n\r\n    /// @notice Set the Reality Check contract address\r\n    /// @param addr The address of the Reality Check contract\r\n    function setRealitio(address addr)\r\n        external\r\n        onlyOwner\r\n    {\r\n        realitio = IRealitio(addr);\r\n        emit LogSetRealitio(addr);\r\n    }\r\n\r\n    /// @notice Set the default fee\r\n    /// @param fee The default fee amount\r\n    function setDisputeFee(uint256 fee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        disputeFee = fee;\r\n        emit LogSetDisputeFee(fee);\r\n    }\r\n\r\n    /// @notice Set a custom fee for this particular question\r\n    /// @param questionId The question in question\r\n    /// @param fee The fee amount\r\n    function setCustomDisputeFee(bytes32 questionId, uint256 fee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        customDisputeFees[questionId] = fee;\r\n        emit LogSetCustomDisputeFee(questionId, fee);\r\n    }\r\n\r\n    /// @notice Return the dispute fee for the specified question. 0 indicates that we won't arbitrate it.\r\n    /// @param questionId The question in question\r\n    /// @dev Uses a general default, but can be over-ridden on a question-by-question basis.\r\n    function getDisputeFee(bytes32 questionId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (customDisputeFees[questionId] > 0) ? customDisputeFees[questionId] : disputeFee;\r\n    }\r\n\r\n    /// @notice Set a fee for asking a question with us as the arbitrator\r\n    /// @param fee The fee amount\r\n    /// @dev Default is no fee. Unlike the dispute fee, 0 is an acceptable setting.\r\n    /// You could set an impossibly high fee if you want to prevent us being used as arbitrator unless we submit the question.\r\n    /// (Submitting the question ourselves is not implemented here.)\r\n    /// This fee can be used as a revenue source, an anti-spam measure, or both.\r\n    function setQuestionFee(uint256 fee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        realitio.setQuestionFee(fee);\r\n        emit LogSetQuestionFee(fee);\r\n    }\r\n\r\n    /// @notice Submit the arbitrator's answer to a question.\r\n    /// @param questionId The question in question\r\n    /// @param answer The answer\r\n    /// @param answerer The answerer. If arbitration changed the answer, it should be the payer. If not, the old answerer.\r\n    function submitAnswerByArbitrator(bytes32 questionId, bytes32 answer, address answerer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        delete arbitration_bounties[questionId];\r\n        realitio.submitAnswerByArbitrator(questionId, answer, answerer);\r\n    }\r\n\r\n    /// @notice Request arbitration, freezing the question until we send submitAnswerByArbitrator\r\n    /// @dev The bounty can be paid only in part, in which case the last person to pay will be considered the payer\r\n    /// Will trigger an error if the notification fails, eg because the question has already been finalized\r\n    /// @param questionId The question in question\r\n    /// @param maxPrevious If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function requestArbitration(bytes32 questionId, uint256 maxPrevious)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        uint256 arbitrationFee = getDisputeFee(questionId);\r\n        require(arbitrationFee > 0, \"The arbitrator must have set a non-zero fee for the question\");\r\n\r\n        arbitration_bounties[questionId] += msg.value;\r\n        uint256 paid = arbitration_bounties[questionId];\r\n\r\n        if (paid >= arbitrationFee) {\r\n            realitio.notifyOfArbitrationRequest(questionId, msg.sender, maxPrevious);\r\n            emit LogRequestArbitration(questionId, msg.value, msg.sender, 0);\r\n            return true;\r\n        } else {\r\n            require(!realitio.isFinalized(questionId), \"The question must not have been finalized\");\r\n            emit LogRequestArbitration(questionId, msg.value, msg.sender, arbitrationFee - paid);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated ETH fees to the specified address\r\n    /// @param recipient The address to which the balance should be sent\r\n    function withdraw(address payable recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated token fees to the specified address\r\n    /// @param recipient The address to which the balance should be sent\r\n    /// @dev Only needed if the IRealitio contract used is using an ERC20 token\r\n    /// @dev Also only normally useful if a per-question fee is set, otherwise we only have ETH.\r\n    function withdrawERC20(IERC20 token, address recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            IERC20(token).transfer(recipient, token.balanceOf(address(this))),\r\n            \"withdrawing ERC-20 failed\"\r\n        );\r\n    }\r\n\r\n    function () external payable {}\r\n\r\n    /// @notice Withdraw any accumulated question fees from the specified address into this contract\r\n    /// @dev Funds can then be liberated from this contract with our withdraw() function\r\n    /// @dev This works in the same way whether the realitio contract is using ETH or an ERC20 token\r\n    function callWithdraw()\r\n        external\r\n        onlyOwner\r\n    {\r\n        realitio.withdraw();\r\n    }\r\n\r\n    /// @notice Set a metadata string, expected to be JSON, containing things like arbitrator TOS address\r\n    function setMetaData(string calldata _metadata)\r\n        external\r\n        onlyOwner\r\n    {\r\n        metadata = _metadata;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LogRequestArbitration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetCustomDisputeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetDisputeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetQuestionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"LogSetRealitio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitration_bounties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitycheck\",\"outputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxPrevious\",\"type\":\"uint256\"}],\"name\":\"requestArbitration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCustomDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setMetaData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setQuestionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRealitio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Arbitrator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://349d6ff85a91fc18aa63648271f1cf3ae03e54795fcff0e94441c6795c5e14ac"}]}