{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\npragma solidity 0.5.2;\r\n\r\ncontract PaymentSplitter {\r\n\r\n /**\r\n  * Transfers given token to multiple recipients as specified by _recepients and _splits arrays\r\n  *\r\n  * @dev This contract should have enough allowance of _tokenAddr from _payerAddr\r\n  * @param _recipients Array of payment recipients\r\n  * @param _splits Array of amounts for _tokenAddr ERC20 to transfer to corresponding recipient.\r\n  */\r\n  function split(\r\n    address payable[] memory _recipients,\r\n    uint256[] memory _splits\r\n  ) public payable {\r\n    uint256 amount = msg.value;\r\n    require(_recipients.length == _splits.length, \"splits and recipients should be of the same length\");\r\n\r\n    uint256 sumShares = 0;\r\n    for (uint i = 0; i < _recipients.length; i++) {\r\n      sumShares += _splits[i];\r\n    }\r\n\r\n    for (uint i = 0; i < _recipients.length - 1; i++) {\r\n      _recipients[i].transfer(amount * _splits[i] / sumShares);\r\n    }\r\n    // flush the rest, so that we don't have rounding errors or stuck funds\r\n    _recipients[_recipients.length - 1].transfer(address(this).balance);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_splits\",\"type\":\"uint256[]\"}],\"name\":\"split\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"PaymentSplitter","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","Library":"","LicenseType":"MPL-2.0","SwarmSource":"bzzr://44d9e9da2aacbf178bd18f0ec30960da61a3ae51388b2fb0987bb3ecf722233c"}]}