{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  string constant OVERFLOW = \"008001\";\r\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\r\n  string constant DIVISION_BY_ZERO = \"008003\";\r\n\r\n  \r\n  function mul(\r\n    uint256 _factor1,\r\n    uint256 _factor2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 product)\r\n  {\r\n    \r\n    \r\n    \r\n    if (_factor1 == 0)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    product = _factor1 * _factor2;\r\n    require(product / _factor1 == _factor2, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function div(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 quotient)\r\n  {\r\n    \r\n    require(_divisor > 0, DIVISION_BY_ZERO);\r\n    quotient = _dividend / _divisor;\r\n    \r\n  }\r\n\r\n  \r\n  function sub(\r\n    uint256 _minuend,\r\n    uint256 _subtrahend\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 difference)\r\n  {\r\n    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\r\n    difference = _minuend - _subtrahend;\r\n  }\r\n\r\n  \r\n  function add(\r\n    uint256 _addend1,\r\n    uint256 _addend2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 sum)\r\n  {\r\n    sum = _addend1 + _addend2;\r\n    require(sum >= _addend1, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function mod(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 remainder)\r\n  {\r\n    require(_divisor != 0, DIVISION_BY_ZERO);\r\n    remainder = _dividend % _divisor;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n\r\n  \r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\ncontract SupportsInterface is\r\n  ERC165\r\n{\r\n\r\n  \r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  \r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x01ffc9a7] = true; \r\n  }\r\n\r\n  \r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceID];\r\n  }\r\n\r\n}\r\n\r\ncontract Abilitable {\r\n  using SafeMath for uint;\r\n\r\n  \r\n  string constant NOT_AUTHORIZED = \"017001\";\r\n  string constant INVALID_INPUT = \"017002\";\r\n\r\n  \r\n  uint8 constant SUPER_ABILITY = 1;\r\n\r\n  \r\n  uint8 constant ALLOW_SUPER_ABILITY = 2;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_1 = 4;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_2 = 8;\r\n\r\n  \r\n  uint8 constant ALL_DEFAULT_ABILITIES = 15;\r\n\r\n  \r\n  mapping(address => uint256) public addressToAbility;\r\n\r\n  \r\n  event SetAbilities(\r\n    address indexed _target,\r\n    uint256 indexed _abilities\r\n  );\r\n\r\n  \r\n  modifier hasAbilities(\r\n    uint256 _abilities\r\n  )\r\n  {\r\n    require(_abilities > 0, INVALID_INPUT);\r\n    require(\r\n      addressToAbility[msg.sender] & _abilities == _abilities,\r\n      NOT_AUTHORIZED\r\n    );\r\n    _;\r\n  }\r\n\r\n  \r\n  constructor()\r\n    public\r\n  {\r\n    addressToAbility[msg.sender] = ALL_DEFAULT_ABILITIES;\r\n  }\r\n\r\n  \r\n  function grantAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] |= _abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function revokeAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] &= ~_abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function setAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] = _abilities;\r\n    emit SetAbilities(_target, _abilities);\r\n  }\r\n\r\n  \r\n  function isAble(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_abilities > 0, INVALID_INPUT);\r\n    return (addressToAbility[_target] & _abilities) == _abilities;\r\n  }\r\n\r\n}\r\n\r\ninterface MigrationReceiver {\r\n\r\n  \r\n  function onMigrationReceived(\r\n    address _migrator,\r\n    uint256 _amount\r\n  )\r\n    external\r\n    returns(bytes4 magicValue);\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n  \r\n  function name()\r\n    external\r\n    view\r\n    returns (string memory _name);\r\n\r\n  \r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string memory _symbol);\r\n\r\n  \r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals);\r\n\r\n  \r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply);\r\n\r\n  \r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance);\r\n\r\n  \r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  \r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  \r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  \r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining);\r\n\r\n  \r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  \r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n}\r\n\r\ncontract DappToken is\r\n  ERC20,\r\n  SupportsInterface,\r\n  Abilitable,\r\n  MigrationReceiver\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  \r\n  uint8 constant ABILITY_SET_WHITELISTED = 16;\r\n  uint8 constant ABILITY_SET_MIGRATE_ADDRESS = 32;\r\n  uint8 constant ABILITY_SET_MIGRATOR_ADDRESS = 64;\r\n\r\n  \r\n  string constant NOT_ENOUGH_BALANCE = \"010001\";\r\n  string constant NOT_ENOUGH_ALLOWANCE = \"010002\";\r\n  string constant NOT_WHITELISTED_ADDRESS = \"010003\";\r\n  string constant MIGRATION_NOT_STARTED = \"010004\";\r\n  string constant MIGRATION_STARTED = \"010005\";\r\n  string constant NOT_ABLE_TO_MIGRATE = \"010006\";\r\n  string constant INVALID_SIGNATURE = \"010007\";\r\n  string constant CLAIM_PERFORMED = \"010008\";\r\n  string constant CLAIM_EXPIRED = \"010009\";\r\n  string constant INVALID_SIGNATURE_KIND = \"010010\";\r\n  string constant CLAIM_CANCELED = \"010011\";\r\n\r\n  \r\n  string internal tokenName;\r\n\r\n  \r\n  string internal tokenSymbol;\r\n\r\n  \r\n  uint8 internal tokenDecimals;\r\n\r\n  \r\n  uint256 internal tokenTotalSupply;\r\n\r\n  \r\n  mapping (address => uint256) internal balances;\r\n\r\n  \r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  \r\n  address public tokenTransferProxy;\r\n\r\n  \r\n  mapping (address => bool) public whitelistedRecipients;\r\n\r\n  \r\n  ERC20 public barteredToken;\r\n\r\n  \r\n  address public migrationAddress;\r\n\r\n  \r\n  mapping (address => bool) public approvedMigrators;\r\n\r\n  \r\n  bytes4 constant MAGIC_ON_MIGRATION_RECEIVED = 0xc5b97e06;\r\n\r\n  \r\n  enum SignatureKind\r\n  {\r\n    eth_sign,\r\n    trezor,\r\n    no_prefix\r\n  }\r\n\r\n  \r\n  struct SignatureData\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    SignatureKind kind;\r\n  }\r\n\r\n  \r\n  mapping(bytes32 => bool) public claimPerformed;\r\n\r\n  \r\n  mapping(bytes32 => bool) public claimCancelled;\r\n\r\n  \r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  \r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n  \r\n  event WhitelistedRecipient(\r\n    address indexed _target,\r\n    bool state\r\n  );\r\n\r\n  \r\n  event ApprovedMigrator(\r\n    address indexed _target,\r\n    bool state\r\n  );\r\n\r\n  \r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x36372b07] = true; \r\n    supportedInterfaces[0x06fdde03] = true; \r\n    supportedInterfaces[0x95d89b41] = true; \r\n    supportedInterfaces[0x313ce567] = true; \r\n  }\r\n\r\n  \r\n  function name()\r\n    external\r\n    override\r\n    view\r\n    returns (string memory _name)\r\n  {\r\n    _name = tokenName;\r\n  }\r\n\r\n  \r\n  function symbol()\r\n    external\r\n    override\r\n    view\r\n    returns (string memory _symbol)\r\n  {\r\n    _symbol = tokenSymbol;\r\n  }\r\n\r\n  \r\n  function decimals()\r\n    external\r\n    override\r\n    view\r\n    returns (uint8 _decimals)\r\n  {\r\n    _decimals = tokenDecimals;\r\n  }\r\n\r\n  \r\n  function totalSupply()\r\n    external\r\n    override\r\n    view\r\n    returns (uint256 _totalSupply)\r\n  {\r\n    _totalSupply = tokenTotalSupply;\r\n  }\r\n\r\n  \r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256 _balance)\r\n  {\r\n    _balance = balances[_owner];\r\n  }\r\n\r\n  \r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256 _remaining)\r\n  {\r\n    _remaining = allowed[_owner][_spender];\r\n  }\r\n\r\n  \r\n  function setWhitelistedRecipient(\r\n    address _target,\r\n    bool _state\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_SET_WHITELISTED)\r\n  {\r\n    whitelistedRecipients[_target] = _state;\r\n    emit WhitelistedRecipient(_target, _state);\r\n  }\r\n\r\n  \r\n  function setApprovedMigrator(\r\n    address _target,\r\n    bool _state\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_SET_MIGRATOR_ADDRESS)\r\n  {\r\n    approvedMigrators[_target] = _state;\r\n    emit ApprovedMigrator(_target, _state);\r\n  }\r\n\r\n  \r\n  function startMigration(\r\n    address _target\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_SET_MIGRATE_ADDRESS)\r\n  {\r\n    require(_target != address(0), MIGRATION_NOT_STARTED);\r\n    migrationAddress = _target;\r\n  }\r\n\r\n  \r\n  function migrate()\r\n    external\r\n  {\r\n    require(migrationAddress != address(0), MIGRATION_NOT_STARTED);\r\n    uint256 balance = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    tokenTotalSupply = tokenTotalSupply.sub(balance);\r\n    barteredToken.transfer(migrationAddress, balance);\r\n    require(\r\n      MigrationReceiver(migrationAddress)\r\n        .onMigrationReceived(msg.sender, balance) == MAGIC_ON_MIGRATION_RECEIVED,\r\n      NOT_ABLE_TO_MIGRATE\r\n    );\r\n    emit Transfer(msg.sender, address(0), balance);\r\n  }\r\n\r\n  \r\n  function onMigrationReceived(\r\n    address _migrator,\r\n    uint256 _amount\r\n  )\r\n    external\r\n    override\r\n    returns(bytes4)\r\n  {\r\n    require(approvedMigrators[msg.sender], NOT_ABLE_TO_MIGRATE);\r\n    tokenTotalSupply = tokenTotalSupply.add(_amount);\r\n    balances[_migrator] = balances[_migrator].add(_amount);\r\n    allowed[_migrator][tokenTransferProxy] = allowed[_migrator][tokenTransferProxy].add(_amount);\r\n    emit Approval(_migrator, tokenTransferProxy, allowed[_migrator][tokenTransferProxy]);\r\n    emit Transfer(address(0), _migrator, _amount);\r\n    return MAGIC_ON_MIGRATION_RECEIVED;\r\n  }\r\n\r\n  \r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    override\r\n    returns (bool _success)\r\n  {\r\n    require(migrationAddress == address(0), MIGRATION_STARTED);\r\n    require(whitelistedRecipients[_to], NOT_WHITELISTED_ADDRESS);\r\n    require(_value <= balances[msg.sender], NOT_ENOUGH_BALANCE);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n  \r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    override\r\n    returns (bool _success)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n    _success = true;\r\n  }\r\n\r\n   \r\n  function approveWithSignature(\r\n    address _approver,\r\n    address _spender,\r\n    uint256 _value,\r\n    address _feeRecipient,\r\n    uint256 _feeValue,\r\n    uint256 _seed,\r\n    uint256 _expiration,\r\n    SignatureData memory _signature\r\n  )\r\n    public\r\n  {\r\n    bytes32 claim = generateClaim(\r\n      _approver,\r\n      _spender,\r\n      _value,\r\n      _feeRecipient,\r\n      _feeValue,\r\n      _seed,\r\n      _expiration\r\n    );\r\n    require(!claimCancelled[claim], CLAIM_CANCELED);\r\n    require(!claimPerformed[claim], CLAIM_PERFORMED);\r\n    require(\r\n      isValidSignature(\r\n        _approver,\r\n        claim,\r\n        _signature\r\n      ),\r\n      INVALID_SIGNATURE\r\n    );\r\n    require(_expiration > now, CLAIM_EXPIRED);\r\n    claimPerformed[claim] = true;\r\n\r\n    allowed[_approver][_spender] = _value;\r\n    emit Approval(_approver, _spender, _value);\r\n\r\n    require(_feeValue <= balances[_approver], NOT_ENOUGH_BALANCE);\r\n    balances[_approver] = balances[_approver].sub(_feeValue);\r\n    if (_feeRecipient == address(0)) {\r\n      _feeRecipient = msg.sender;\r\n    }\r\n    balances[_feeRecipient] = balances[_feeRecipient].add(_feeValue);\r\n    emit Transfer(_approver, _feeRecipient, _feeValue);\r\n  }\r\n\r\n  \r\n  function cancelApproveWithSignature(\r\n    address _spender,\r\n    uint256 _value,\r\n    address _feeRecipient,\r\n    uint256 _feeValue,\r\n    uint256 _seed,\r\n    uint256 _expiration\r\n  )\r\n    external\r\n  {\r\n    bytes32 claim = generateClaim(\r\n      msg.sender,\r\n      _spender,\r\n      _value,\r\n      _feeRecipient,\r\n      _feeValue,\r\n      _seed,\r\n      _expiration\r\n    );\r\n    require(!claimPerformed[claim], CLAIM_PERFORMED);\r\n    claimCancelled[claim] = true;\r\n  }\r\n\r\n  \r\n  function generateClaim(\r\n    address _approver,\r\n    address _spender,\r\n    uint256 _value,\r\n    address _feeRecipient,\r\n    uint256 _feeValue,\r\n    uint256 _seed,\r\n    uint256 _expiration\r\n  )\r\n    public\r\n    view\r\n    returns (bytes32 _claim)\r\n  {\r\n    _claim = keccak256(\r\n      abi.encodePacked(\r\n        address(this),\r\n        _approver,\r\n        _spender,\r\n        _value,\r\n        _feeRecipient,\r\n        _feeValue,\r\n        _seed,\r\n        _expiration\r\n      )\r\n    );\r\n  }\r\n\r\n  \r\n  function isValidSignature(\r\n    address _signer,\r\n    bytes32 _claim,\r\n    SignatureData memory _signature\r\n  )\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    if (_signature.kind == SignatureKind.eth_sign)\r\n    {\r\n      return _signer == ecrecover(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            _claim\r\n          )\r\n        ),\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    } else if (_signature.kind == SignatureKind.trezor)\r\n    {\r\n      return _signer == ecrecover(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n\\x20\",\r\n            _claim\r\n          )\r\n        ),\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    } else if (_signature.kind == SignatureKind.no_prefix)\r\n    {\r\n      return _signer == ecrecover(\r\n        _claim,\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    }\r\n\r\n    revert(INVALID_SIGNATURE_KIND);\r\n  }\r\n\r\n  \r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    override\r\n    returns (bool _success)\r\n  {\r\n    require(migrationAddress == address(0), MIGRATION_STARTED);\r\n    require(whitelistedRecipients[_to], NOT_WHITELISTED_ADDRESS);\r\n    require(_value <= balances[_from], NOT_ENOUGH_BALANCE);\r\n    require(_value <= allowed[_from][msg.sender], NOT_ENOUGH_ALLOWANCE);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n  \r\n  function deposit(\r\n    uint256 _value,\r\n    address _receiver\r\n  )\r\n    public\r\n  {\r\n    require(migrationAddress == address(0), MIGRATION_STARTED);\r\n    tokenTotalSupply = tokenTotalSupply.add(_value);\r\n    balances[_receiver] = balances[_receiver].add(_value);\r\n    barteredToken.transferFrom(msg.sender, address(this), _value);\r\n    allowed[_receiver][tokenTransferProxy] = allowed[_receiver][tokenTransferProxy].add(_value);\r\n    emit Transfer(address(0), _receiver, _value);\r\n    emit Approval(_receiver, tokenTransferProxy, allowed[_receiver][tokenTransferProxy]);\r\n  }\r\n\r\n  \r\n  function withdraw(\r\n    uint256 _value\r\n  )\r\n    public\r\n  {\r\n    require(_value <= balances[msg.sender], NOT_ENOUGH_BALANCE);\r\n    tokenTotalSupply = tokenTotalSupply.sub(_value);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    barteredToken.transfer(msg.sender, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract DappTokenMock is\r\n  DappToken\r\n{\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint8 _decimals,\r\n    address _barteredToken,\r\n    address _tokenTransferProxy\r\n  )\r\n    public\r\n  {\r\n    tokenName = _name;\r\n    tokenSymbol = _symbol;\r\n    tokenDecimals = _decimals;\r\n    barteredToken = ERC20(_barteredToken);\r\n    tokenTransferProxy = _tokenTransferProxy;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_barteredToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenTransferProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ApprovedMigrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"SetAbilities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"WhitelistedRecipient\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAbility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"enum DappToken.SignatureKind\",\"name\":\"kind\",\"type\":\"uint8\"}],\"internalType\":\"struct DappToken.SignatureData\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"approveWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedMigrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"barteredToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelApproveWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimPerformed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"generateClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"grantAbilities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"isAble\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claim\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"enum DappToken.SignatureKind\",\"name\":\"kind\",\"type\":\"uint8\"}],\"internalType\":\"struct DappToken.SignatureData\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onMigrationReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"revokeAbilities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"setAbilities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setApprovedMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelistedRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedRecipients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DappTokenMock","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000083e2be8d114f9661221384b3a50d24b96a5653f50000000000000000000000007bc5790fd0c23f45f29f893df2de8965a3e51f150000000000000000000000000000000000000000000000000000000000000011307863657274204461707020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004445a584300000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://2f39a5ff67862b0e68607abdbfab48d5ac60258a7f3c8f5dfca1ef6ed0fc999b"}]}