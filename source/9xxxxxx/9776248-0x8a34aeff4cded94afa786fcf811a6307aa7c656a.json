{"status":"1","message":"OK","result":[{"SourceCode":"/*\n\n⚠⚠⚠ WARNING WARNING WARNING ⚠⚠⚠\n\nThis is a TARGET contract - DO NOT CONNECT TO IT DIRECTLY IN YOUR CONTRACTS or DAPPS!\n\nThis contract has an associated PROXY that MUST be used for all integrations - this TARGET will be REPLACED in an upcoming Synthetix release!\nThe proxy for this contract can be found here:\n\nhttps://contracts.synthetix.io/ProxyFeePool\n\n*//*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: FeePool.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/FeePool.sol\n* Docs: https://docs.synthetix.io/contracts/FeePool\n*\n* Contract Dependencies: \n*\t- EternalStorage\n*\t- ExternStateToken\n*\t- LimitedSetup\n*\t- MixinResolver\n*\t- Owned\n*\t- Proxyable\n*\t- SelfDestructible\n*\t- State\n* Libraries: \n*\t- Math\n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n/* ===============================================\n* Flattened with Solidifier by Coinage\n* \n* https://solidifier.coina.ge\n* ===============================================\n*/\n\n\npragma solidity 0.4.25;\n\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    /**\n     * @dev Owned Constructor\n     */\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    /**\n     * @notice Nominate a new owner of this contract.\n     * @dev Only the current owner may nominate a new owner.\n     */\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    /**\n     * @notice Accept the nomination to be owner.\n     */\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.synthetix.io/contracts/Proxy\ncontract Proxy is Owned {\n    Proxyable public target;\n    bool public useDELEGATECALL;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(Proxyable _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(_target);\n    }\n\n    function setUseDELEGATECALL(bool value) external onlyOwner {\n        useDELEGATECALL = value;\n    }\n\n    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)\n        external\n        onlyTarget\n    {\n        uint size = callData.length;\n        bytes memory _callData = callData;\n\n        assembly {\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\n             * This means moving call_data across 32 bytes guarantees we correctly access\n             * the data itself. */\n            switch numTopics\n                case 0 {\n                    log0(add(_callData, 32), size)\n                }\n                case 1 {\n                    log1(add(_callData, 32), size, topic1)\n                }\n                case 2 {\n                    log2(add(_callData, 32), size, topic1, topic2)\n                }\n                case 3 {\n                    log3(add(_callData, 32), size, topic1, topic2, topic3)\n                }\n                case 4 {\n                    log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\n                }\n        }\n    }\n\n    function() external payable {\n        if (useDELEGATECALL) {\n            assembly {\n                /* Copy call data into free memory region. */\n                let free_ptr := mload(0x40)\n                calldatacopy(free_ptr, 0, calldatasize)\n\n                /* Forward all gas and call data to the target contract. */\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\n                returndatacopy(free_ptr, 0, returndatasize)\n\n                /* Revert if the call failed, otherwise return the result. */\n                if iszero(result) {\n                    revert(free_ptr, returndatasize)\n                }\n                return(free_ptr, returndatasize)\n            }\n        } else {\n            /* Here we are as above, but must send the messageSender explicitly\n             * since we are using CALL rather than DELEGATECALL. */\n            target.setMessageSender(msg.sender);\n            assembly {\n                let free_ptr := mload(0x40)\n                calldatacopy(free_ptr, 0, calldatasize)\n\n                /* We must explicitly forward ether to the underlying contract as well. */\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n                returndatacopy(free_ptr, 0, returndatasize)\n\n                if iszero(result) {\n                    revert(free_ptr, returndatasize)\n                }\n                return(free_ptr, returndatasize)\n            }\n        }\n    }\n\n    modifier onlyTarget {\n        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\n        _;\n    }\n\n    event TargetUpdated(Proxyable newTarget);\n}\n\n\n// https://docs.synthetix.io/contracts/Proxyable\ncontract Proxyable is Owned {\n    // This contract should be treated like an abstract contract\n\n    /* The proxy this contract exists behind. */\n    Proxy public proxy;\n    Proxy public integrationProxy;\n\n    /* The caller of the proxy, passed through to this contract.\n     * Note that every function using this member must apply the onlyProxy or\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\n    address public messageSender;\n\n    constructor(address _proxy, address _owner) public Owned(_owner) {\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setProxy(address _proxy) external onlyOwner {\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setIntegrationProxy(address _integrationProxy) external onlyOwner {\n        integrationProxy = Proxy(_integrationProxy);\n    }\n\n    function setMessageSender(address sender) external onlyProxy {\n        messageSender = sender;\n    }\n\n    modifier onlyProxy {\n        require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, \"Only the proxy can call\");\n        _;\n    }\n\n    modifier optionalProxy {\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\n            messageSender = msg.sender;\n        }\n        _;\n    }\n\n    modifier optionalProxy_onlyOwner {\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\n            messageSender = msg.sender;\n        }\n        require(messageSender == owner, \"Owner only function\");\n        _;\n    }\n\n    event ProxyUpdated(address proxyAddress);\n}\n\n\n// https://docs.synthetix.io/contracts/SelfDestructible\ncontract SelfDestructible is Owned {\n    uint public initiationTime;\n    bool public selfDestructInitiated;\n    address public selfDestructBeneficiary;\n    uint public constant SELFDESTRUCT_DELAY = 4 weeks;\n\n    /**\n     * @dev Constructor\n     * @param _owner The account which controls this contract.\n     */\n    constructor(address _owner) public Owned(_owner) {\n        require(_owner != address(0), \"Owner must not be zero\");\n        selfDestructBeneficiary = _owner;\n        emit SelfDestructBeneficiaryUpdated(_owner);\n    }\n\n    /**\n     * @notice Set the beneficiary address of this contract.\n     * @dev Only the contract owner may call this. The provided beneficiary must be non-null.\n     * @param _beneficiary The address to pay any eth contained in this contract to upon self-destruction.\n     */\n    function setSelfDestructBeneficiary(address _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0), \"Beneficiary must not be zero\");\n        selfDestructBeneficiary = _beneficiary;\n        emit SelfDestructBeneficiaryUpdated(_beneficiary);\n    }\n\n    /**\n     * @notice Begin the self-destruction counter of this contract.\n     * Once the delay has elapsed, the contract may be self-destructed.\n     * @dev Only the contract owner may call this.\n     */\n    function initiateSelfDestruct() external onlyOwner {\n        initiationTime = now;\n        selfDestructInitiated = true;\n        emit SelfDestructInitiated(SELFDESTRUCT_DELAY);\n    }\n\n    /**\n     * @notice Terminate and reset the self-destruction timer.\n     * @dev Only the contract owner may call this.\n     */\n    function terminateSelfDestruct() external onlyOwner {\n        initiationTime = 0;\n        selfDestructInitiated = false;\n        emit SelfDestructTerminated();\n    }\n\n    /**\n     * @notice If the self-destruction delay has elapsed, destroy this contract and\n     * remit any ether it owns to the beneficiary address.\n     * @dev Only the contract owner may call this.\n     */\n    function selfDestruct() external onlyOwner {\n        require(selfDestructInitiated, \"Self Destruct not yet initiated\");\n        require(initiationTime + SELFDESTRUCT_DELAY < now, \"Self destruct delay not met\");\n        address beneficiary = selfDestructBeneficiary;\n        emit SelfDestructed(beneficiary);\n        selfdestruct(beneficiary);\n    }\n\n    event SelfDestructTerminated();\n    event SelfDestructed(address beneficiary);\n    event SelfDestructInitiated(uint selfDestructDelay);\n    event SelfDestructBeneficiaryUpdated(address newBeneficiary);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n// https://docs.synthetix.io/contracts/SafeDecimalMath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/AddressResolver\ncontract AddressResolver is Owned {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] names, address[] destinations) public onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            repository[names[i]] = destinations[i];\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getAddress(bytes32 name) public view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string reason) public view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/MixinResolver\ncontract MixinResolver is Owned {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    bytes32[] public resolverAddressesRequired;\n\n    uint public constant MAX_ADDRESSES_FROM_RESOLVER = 24;\n\n    constructor(address _owner, address _resolver, bytes32[MAX_ADDRESSES_FROM_RESOLVER] _addressesToCache)\n        public\n        Owned(_owner)\n    {\n        for (uint i = 0; i < _addressesToCache.length; i++) {\n            if (_addressesToCache[i] != bytes32(0)) {\n                resolverAddressesRequired.push(_addressesToCache[i]);\n            } else {\n                // End early once an empty item is found - assumes there are no empty slots in\n                // _addressesToCache\n                break;\n            }\n        }\n        resolver = AddressResolver(_resolver);\n        // Do not sync the cache as addresses may not be in the resolver yet\n    }\n\n    /* ========== SETTERS ========== */\n    function setResolverAndSyncCache(AddressResolver _resolver) external onlyOwner {\n        resolver = _resolver;\n\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            addressCache[name] = resolver.requireAndGetAddress(name, \"Resolver missing target\");\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function requireAndGetAddress(bytes32 name, string reason) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    // Note: this could be made external in a utility contract if addressCache was made public\n    // (used for deployment)\n    function isResolverCached(AddressResolver _resolver) external view returns (bool) {\n        if (resolver != _resolver) {\n            return false;\n        }\n\n        // otherwise, check everything\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Note: can be made external into a utility contract (used for deployment)\n    function getResolverAddressesRequired() external view returns (bytes32[MAX_ADDRESSES_FROM_RESOLVER] addressesRequired) {\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            addressesRequired[i] = resolverAddressesRequired[i];\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n    function appendToAddressCache(bytes32 name) internal {\n        resolverAddressesRequired.push(name);\n        require(resolverAddressesRequired.length < MAX_ADDRESSES_FROM_RESOLVER, \"Max resolver cache size met\");\n        // Because this is designed to be called internally in constructors, we don't\n        // check the address exists already in the resolver\n        addressCache[name] = resolver.getAddress(name);\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/State\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _owner, address _associatedContract) public Owned(_owner) {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n// https://docs.synthetix.io/contracts/TokenState\ncontract TokenState is State {\n    /* ERC20 fields. */\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    /**\n     * @dev Constructor\n     * @param _owner The address which controls this contract.\n     * @param _associatedContract The ERC20 contract whose state this composes.\n     */\n    constructor(address _owner, address _associatedContract) public State(_owner, _associatedContract) {}\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Set ERC20 allowance.\n     * @dev Only the associated contract may call this.\n     * @param tokenOwner The authorising party.\n     * @param spender The authorised party.\n     * @param value The total value the authorised party may spend on the\n     * authorising party's behalf.\n     */\n    function setAllowance(address tokenOwner, address spender, uint value) external onlyAssociatedContract {\n        allowance[tokenOwner][spender] = value;\n    }\n\n    /**\n     * @notice Set the balance in a given account\n     * @dev Only the associated contract may call this.\n     * @param account The account whose value to set.\n     * @param value The new balance of the given account.\n     */\n    function setBalanceOf(address account, uint value) external onlyAssociatedContract {\n        balanceOf[account] = value;\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/ExternStateToken\ncontract ExternStateToken is SelfDestructible, Proxyable {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== STATE VARIABLES ========== */\n\n    /* Stores balances and allowances. */\n    TokenState public tokenState;\n\n    /* Other ERC20 fields. */\n    string public name;\n    string public symbol;\n    uint public totalSupply;\n    uint8 public decimals;\n\n    /**\n     * @dev Constructor.\n     * @param _proxy The proxy associated with this contract.\n     * @param _name Token's ERC20 name.\n     * @param _symbol Token's ERC20 symbol.\n     * @param _totalSupply The total supply of the token.\n     * @param _tokenState The TokenState contract address.\n     * @param _owner The owner of this contract.\n     */\n    constructor(\n        address _proxy,\n        TokenState _tokenState,\n        string _name,\n        string _symbol,\n        uint _totalSupply,\n        uint8 _decimals,\n        address _owner\n    ) public SelfDestructible(_owner) Proxyable(_proxy, _owner) {\n        tokenState = _tokenState;\n\n        name = _name;\n        symbol = _symbol;\n        totalSupply = _totalSupply;\n        decimals = _decimals;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Returns the ERC20 allowance of one party to spend on behalf of another.\n     * @param owner The party authorising spending of their funds.\n     * @param spender The party spending tokenOwner's funds.\n     */\n    function allowance(address owner, address spender) public view returns (uint) {\n        return tokenState.allowance(owner, spender);\n    }\n\n    /**\n     * @notice Returns the ERC20 token balance of a given account.\n     */\n    function balanceOf(address account) public view returns (uint) {\n        return tokenState.balanceOf(account);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Set the address of the TokenState contract.\n     * @dev This can be used to \"pause\" transfer functionality, by pointing the tokenState at 0x000..\n     * as balances would be unreachable.\n     */\n    function setTokenState(TokenState _tokenState) external optionalProxy_onlyOwner {\n        tokenState = _tokenState;\n        emitTokenStateUpdated(_tokenState);\n    }\n\n    function _internalTransfer(address from, address to, uint value) internal returns (bool) {\n        /* Disallow transfers to irretrievable-addresses. */\n        require(to != address(0) && to != address(this) && to != address(proxy), \"Cannot transfer to this address\");\n\n        // Insufficient balance will be handled by the safe subtraction.\n        tokenState.setBalanceOf(from, tokenState.balanceOf(from).sub(value));\n        tokenState.setBalanceOf(to, tokenState.balanceOf(to).add(value));\n\n        // Emit a standard ERC20 transfer event\n        emitTransfer(from, to, value);\n\n        return true;\n    }\n\n    /**\n     * @dev Perform an ERC20 token transfer. Designed to be called by transfer functions possessing\n     * the onlyProxy or optionalProxy modifiers.\n     */\n    function _transfer_byProxy(address from, address to, uint value) internal returns (bool) {\n        return _internalTransfer(from, to, value);\n    }\n\n    /**\n     * @dev Perform an ERC20 token transferFrom. Designed to be called by transferFrom functions\n     * possessing the optionalProxy or optionalProxy modifiers.\n     */\n    function _transferFrom_byProxy(address sender, address from, address to, uint value) internal returns (bool) {\n        /* Insufficient allowance will be handled by the safe subtraction. */\n        tokenState.setAllowance(from, sender, tokenState.allowance(from, sender).sub(value));\n        return _internalTransfer(from, to, value);\n    }\n\n    /**\n     * @notice Approves spender to transfer on the message sender's behalf.\n     */\n    function approve(address spender, uint value) public optionalProxy returns (bool) {\n        address sender = messageSender;\n\n        tokenState.setAllowance(sender, spender, value);\n        emitApproval(sender, spender, value);\n        return true;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    bytes32 constant TRANSFER_SIG = keccak256(\"Transfer(address,address,uint256)\");\n\n    function emitTransfer(address from, address to, uint value) internal {\n        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, bytes32(from), bytes32(to), 0);\n    }\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    bytes32 constant APPROVAL_SIG = keccak256(\"Approval(address,address,uint256)\");\n\n    function emitApproval(address owner, address spender, uint value) internal {\n        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, bytes32(owner), bytes32(spender), 0);\n    }\n\n    event TokenStateUpdated(address newTokenState);\n    bytes32 constant TOKENSTATEUPDATED_SIG = keccak256(\"TokenStateUpdated(address)\");\n\n    function emitTokenStateUpdated(address newTokenState) internal {\n        proxy._emit(abi.encode(newTokenState), 1, TOKENSTATEUPDATED_SIG, 0, 0, 0);\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/Math\nlibrary Math {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /**\n     * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\n     * vs 0(N) for naive repeated multiplication.\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\n     */\n    function powDecimal(uint x, uint n) internal pure returns (uint) {\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\n\n        uint result = SafeDecimalMath.unit();\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result = result.multiplyDecimal(x);\n            }\n            x = x.multiplyDecimal(x);\n            n /= 2;\n        }\n        return result;\n    }\n}\n\n\n/**\n * @title SynthetixState interface contract\n * @notice Abstract contract to hold public getters\n */\ncontract ISynthetixState {\n    // A struct for handing values associated with an individual user's debt position\n    struct IssuanceData {\n        // Percentage of the total debt owned at the time\n        // of issuance. This number is modified by the global debt\n        // delta array. You can figure out a user's exit price and\n        // collateralisation ratio using a combination of their initial\n        // debt and the slice of global debt delta which applies to them.\n        uint initialDebtOwnership;\n        // This lets us know when (in relative terms) the user entered\n        // the debt pool so we can calculate their exit price and\n        // collateralistion ratio\n        uint debtEntryIndex;\n    }\n\n    uint[] public debtLedger;\n    uint public issuanceRatio;\n    mapping(address => IssuanceData) public issuanceData;\n\n    function debtLedgerLength() external view returns (uint);\n\n    function hasIssued(address account) external view returns (bool);\n\n    function incrementTotalIssuerCount() external;\n\n    function decrementTotalIssuerCount() external;\n\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\n\n    function lastDebtLedgerEntry() external view returns (uint);\n\n    function appendDebtLedgerValue(uint value) external;\n\n    function clearIssuanceData(address account) external;\n}\n\n\ninterface ISynth {\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(address from, address to, uint value) external returns (bool);\n\n    function balanceOf(address owner) external view returns (uint);\n}\n\n\n/**\n * @title SynthetixEscrow interface\n */\ninterface ISynthetixEscrow {\n    function balanceOf(address account) public view returns (uint);\n\n    function appendVestingEntry(address account, uint quantity) public;\n}\n\n\n/**\n * @title FeePool Interface\n * @notice Abstract contract to hold public getters\n */\ncontract IFeePool {\n    address public FEE_ADDRESS;\n    uint public exchangeFeeRate;\n\n    function amountReceivedFromExchange(uint value) external view returns (uint);\n\n    function amountReceivedFromTransfer(uint value) external view returns (uint);\n\n    function recordFeePaid(uint sUSDAmount) external;\n\n    function appendAccountIssuanceRecord(address account, uint lockedAmount, uint debtEntryIndex) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\n/**\n * @title ExchangeRates interface\n */\ninterface IExchangeRates {\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function ratesForCurrencies(bytes32[] currencyKeys) external view returns (uint[] memory);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function anyRateIsStale(bytes32[] currencyKeys) external view returns (bool);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function ratesAndStaleForCurrencies(bytes32[] currencyKeys) external view returns (uint[], bool);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n}\n\n\ninterface ISystemStatus {\n    function requireSystemActive() external view;\n\n    function requireIssuanceActive() external view;\n\n    function requireExchangeActive() external view;\n\n    function requireSynthActive(bytes32 currencyKey) external view;\n\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n}\n\n\ninterface IExchanger {\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (uint reclaimAmount, uint rebateAmount, uint numEntries);\n\n    function settle(address from, bytes32 currencyKey) external returns (uint reclaimed, uint refunded, uint numEntries);\n\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint amount, uint refunded)\n        external\n        view\n        returns (uint amountAfterSettlement);\n}\n\n\ninterface IIssuer {\n    function issueSynths(address from, uint amount) external;\n\n    function issueSynthsOnBehalf(address issueFor, address from, uint amount) external;\n\n    function issueMaxSynths(address from) external;\n\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n\n    function burnSynths(address from, uint amount) external;\n\n    function burnSynthsOnBehalf(address burnForAddress, address from, uint amount) external;\n\n    function burnSynthsToTarget(address from) external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\n\n    function canBurnSynths(address account) external view returns (bool);\n\n    function lastIssueEvent(address account) external view returns (uint);\n}\n\n\n// https://docs.synthetix.io/contracts/Synth\ncontract Synth is ExternStateToken, MixinResolver {\n    /* ========== STATE VARIABLES ========== */\n\n    // Currency key which identifies this Synth to the Synthetix system\n    bytes32 public currencyKey;\n\n    uint8 public constant DECIMALS = 18;\n\n    // Where fees are pooled in sUSD\n    address public constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n\n    bytes32[24] internal addressesToCache = [\n        CONTRACT_SYSTEMSTATUS,\n        CONTRACT_SYNTHETIX,\n        CONTRACT_EXCHANGER,\n        CONTRACT_ISSUER,\n        CONTRACT_FEEPOOL\n    ];\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _proxy,\n        TokenState _tokenState,\n        string _tokenName,\n        string _tokenSymbol,\n        address _owner,\n        bytes32 _currencyKey,\n        uint _totalSupply,\n        address _resolver\n    )\n        public\n        ExternStateToken(_proxy, _tokenState, _tokenName, _tokenSymbol, _totalSupply, DECIMALS, _owner)\n        MixinResolver(_owner, _resolver, addressesToCache)\n    {\n        require(_proxy != address(0), \"_proxy cannot be 0\");\n        require(_owner != 0, \"_owner cannot be 0\");\n\n        currencyKey = _currencyKey;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function transfer(address to, uint value) public optionalProxy returns (bool) {\n        _ensureCanTransfer(messageSender, value);\n\n        // transfers to FEE_ADDRESS will be exchanged into sUSD and recorded as fee\n        if (to == FEE_ADDRESS) {\n            return _transferToFeeAddress(to, value);\n        }\n\n        // transfers to 0x address will be burned\n        if (to == address(0)) {\n            return _internalBurn(messageSender, value);\n        }\n\n        return super._internalTransfer(messageSender, to, value);\n    }\n\n    function transferAndSettle(address to, uint value) public optionalProxy returns (bool) {\n        systemStatus().requireSynthActive(currencyKey);\n\n        (, , uint numEntriesSettled) = exchanger().settle(messageSender, currencyKey);\n\n        // Save gas instead of calling transferableSynths\n        uint balanceAfter = value;\n\n        if (numEntriesSettled > 0) {\n            balanceAfter = tokenState.balanceOf(messageSender);\n        }\n\n        // Reduce the value to transfer if balance is insufficient after reclaimed\n        value = value > balanceAfter ? balanceAfter : value;\n\n        return super._internalTransfer(messageSender, to, value);\n    }\n\n    function transferFrom(address from, address to, uint value) public optionalProxy returns (bool) {\n        _ensureCanTransfer(from, value);\n\n        return _internalTransferFrom(from, to, value);\n    }\n\n    function transferFromAndSettle(address from, address to, uint value) public optionalProxy returns (bool) {\n        systemStatus().requireSynthActive(currencyKey);\n\n        (, , uint numEntriesSettled) = exchanger().settle(from, currencyKey);\n\n        // Save gas instead of calling transferableSynths\n        uint balanceAfter = value;\n\n        if (numEntriesSettled > 0) {\n            balanceAfter = tokenState.balanceOf(from);\n        }\n\n        // Reduce the value to transfer if balance is insufficient after reclaimed\n        value = value >= balanceAfter ? balanceAfter : value;\n\n        return _internalTransferFrom(from, to, value);\n    }\n\n    /**\n     * @notice _transferToFeeAddress function\n     * non-sUSD synths are exchanged into sUSD via synthInitiatedExchange\n     * notify feePool to record amount as fee paid to feePool */\n    function _transferToFeeAddress(address to, uint value) internal returns (bool) {\n        uint amountInUSD;\n\n        // sUSD can be transferred to FEE_ADDRESS directly\n        if (currencyKey == \"sUSD\") {\n            amountInUSD = value;\n            super._internalTransfer(messageSender, to, value);\n        } else {\n            // else exchange synth into sUSD and send to FEE_ADDRESS\n            amountInUSD = exchanger().exchange(messageSender, currencyKey, value, \"sUSD\", FEE_ADDRESS);\n        }\n\n        // Notify feePool to record sUSD to distribute as fees\n        feePool().recordFeePaid(amountInUSD);\n\n        return true;\n    }\n\n    // Allow synthetix to issue a certain number of synths from an account.\n    // forward call to _internalIssue\n    function issue(address account, uint amount) external onlyInternalContracts {\n        _internalIssue(account, amount);\n    }\n\n    // Allow synthetix or another synth contract to burn a certain number of synths from an account.\n    // forward call to _internalBurn\n    function burn(address account, uint amount) external onlyInternalContracts {\n        _internalBurn(account, amount);\n    }\n\n    function _internalIssue(address account, uint amount) internal {\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).add(amount));\n        totalSupply = totalSupply.add(amount);\n        emitTransfer(address(0), account, amount);\n        emitIssued(account, amount);\n    }\n\n    function _internalBurn(address account, uint amount) internal returns (bool) {\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).sub(amount));\n        totalSupply = totalSupply.sub(amount);\n        emitTransfer(account, address(0), amount);\n        emitBurned(account, amount);\n\n        return true;\n    }\n\n    // Allow owner to set the total supply on import.\n    function setTotalSupply(uint amount) external optionalProxy_onlyOwner {\n        totalSupply = amount;\n    }\n\n    /* ========== VIEWS ========== */\n    function systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS, \"Missing SystemStatus address\"));\n    }\n\n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX, \"Missing Synthetix address\"));\n    }\n\n    function feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL, \"Missing FeePool address\"));\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER, \"Missing Exchanger address\"));\n    }\n\n    function issuer() internal view returns (IIssuer) {\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER, \"Missing Issuer address\"));\n    }\n\n    function _ensureCanTransfer(address from, uint value) internal view {\n        require(exchanger().maxSecsLeftInWaitingPeriod(from, currencyKey) == 0, \"Cannot transfer during waiting period\");\n        require(transferableSynths(from) >= value, \"Insufficient balance after any settlement owing\");\n        systemStatus().requireSynthActive(currencyKey);\n    }\n\n    function transferableSynths(address account) public view returns (uint) {\n        (uint reclaimAmount, , ) = exchanger().settlementOwing(account, currencyKey);\n\n        // Note: ignoring rebate amount here because a settle() is required in order to\n        // allow the transfer to actually work\n\n        uint balance = tokenState.balanceOf(account);\n\n        if (reclaimAmount > balance) {\n            return 0;\n        } else {\n            return balance.sub(reclaimAmount);\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _internalTransferFrom(address from, address to, uint value) internal returns (bool) {\n        // Skip allowance update in case of infinite allowance\n        if (tokenState.allowance(from, messageSender) != uint(-1)) {\n            // Reduce the allowance by the amount we're transferring.\n            // The safeSub call will handle an insufficient allowance.\n            tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value));\n        }\n\n        return super._internalTransfer(from, to, value);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyInternalContracts() {\n        bool isSynthetix = msg.sender == address(synthetix());\n        bool isFeePool = msg.sender == address(feePool());\n        bool isExchanger = msg.sender == address(exchanger());\n        bool isIssuer = msg.sender == address(issuer());\n\n        require(\n            isSynthetix || isFeePool || isExchanger || isIssuer,\n            \"Only Synthetix, FeePool, Exchanger or Issuer contracts allowed\"\n        );\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    event Issued(address indexed account, uint value);\n    bytes32 private constant ISSUED_SIG = keccak256(\"Issued(address,uint256)\");\n\n    function emitIssued(address account, uint value) internal {\n        proxy._emit(abi.encode(value), 2, ISSUED_SIG, bytes32(account), 0, 0);\n    }\n\n    event Burned(address indexed account, uint value);\n    bytes32 private constant BURNED_SIG = keccak256(\"Burned(address,uint256)\");\n\n    function emitBurned(address account, uint value) internal {\n        proxy._emit(abi.encode(value), 2, BURNED_SIG, bytes32(account), 0, 0);\n    }\n}\n\n\n/**\n * @title Synthetix interface contract\n * @notice Abstract contract to hold public getters\n * @dev pseudo interface, actually declared as contract to hold the public getters\n */\n\n\ncontract ISynthetix {\n    // ========== PUBLIC STATE VARIABLES ==========\n\n    uint public totalSupply;\n\n    mapping(bytes32 => Synth) public synths;\n\n    mapping(address => bytes32) public synthsByAddress;\n\n    // ========== PUBLIC FUNCTIONS ==========\n\n    function balanceOf(address account) public view returns (uint);\n\n    function transfer(address to, uint value) public returns (bool);\n\n    function transferFrom(address from, address to, uint value) public returns (bool);\n\n    function exchange(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\n        external\n        returns (uint amountReceived);\n\n    function issueSynths(uint amount) external;\n\n    function issueMaxSynths() external;\n\n    function burnSynths(uint amount) external;\n\n    function burnSynthsToTarget() external;\n\n    function settle(bytes32 currencyKey) external returns (uint reclaimed, uint refunded, uint numEntries);\n\n    function collateralisationRatio(address issuer) public view returns (uint);\n\n    function totalIssuedSynths(bytes32 currencyKey) public view returns (uint);\n\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) public view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) public view returns (uint);\n\n    function debtBalanceOfAndTotalDebt(address issuer, bytes32 currencyKey)\n        public\n        view\n        returns (uint debtBalance, uint totalSystemValue);\n\n    function remainingIssuableSynths(address issuer)\n        public\n        view\n        returns (uint maxIssuable, uint alreadyIssued, uint totalSystemDebt);\n\n    function maxIssuableSynths(address issuer) public view returns (uint maxIssuable);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function emitSynthExchange(\n        address account,\n        bytes32 fromCurrencyKey,\n        uint fromAmount,\n        bytes32 toCurrencyKey,\n        uint toAmount,\n        address toAddress\n    ) external;\n\n    function emitExchangeReclaim(address account, bytes32 currencyKey, uint amount) external;\n\n    function emitExchangeRebate(address account, bytes32 currencyKey, uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/SupplySchedule\ncontract SupplySchedule is Owned {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n    using Math for uint;\n\n    // Time of the last inflation supply mint event\n    uint public lastMintEvent;\n\n    // Counter for number of weeks since the start of supply inflation\n    uint public weekCounter;\n\n    // The number of SNX rewarded to the caller of Synthetix.mint()\n    uint public minterReward = 200 * SafeDecimalMath.unit();\n\n    // The initial weekly inflationary supply is 75m / 52 until the start of the decay rate.\n    // 75e6 * SafeDecimalMath.unit() / 52\n    uint public constant INITIAL_WEEKLY_SUPPLY = 1442307692307692307692307;\n\n    // Address of the SynthetixProxy for the onlySynthetix modifier\n    address public synthetixProxy;\n\n    // Max SNX rewards for minter\n    uint public constant MAX_MINTER_REWARD = 200 * SafeDecimalMath.unit();\n\n    // How long each inflation period is before mint can be called\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\n\n    uint public constant INFLATION_START_DATE = 1551830400; // 2019-03-06T00:00:00+00:00\n    uint public constant MINT_BUFFER = 1 days;\n    uint8 public constant SUPPLY_DECAY_START = 40; // Week 40\n    uint8 public constant SUPPLY_DECAY_END = 234; //  Supply Decay ends on Week 234 (inclusive of Week 234 for a total of 195 weeks of inflation decay)\n\n    // Weekly percentage decay of inflationary supply from the first 40 weeks of the 75% inflation rate\n    uint public constant DECAY_RATE = 12500000000000000; // 1.25% weekly\n\n    // Percentage growth of terminal supply per annum\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 25000000000000000; // 2.5% pa\n\n    constructor(address _owner, uint _lastMintEvent, uint _currentWeek) public Owned(_owner) {\n        lastMintEvent = _lastMintEvent;\n        weekCounter = _currentWeek;\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @return The amount of SNX mintable for the inflationary supply\n     */\n    function mintableSupply() external view returns (uint) {\n        uint totalAmount;\n\n        if (!isMintable()) {\n            return totalAmount;\n        }\n\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\n\n        uint currentWeek = weekCounter;\n\n        // Calculate total mintable supply from exponential decay function\n        // The decay function stops after week 234\n        while (remainingWeeksToMint > 0) {\n            currentWeek++;\n\n            if (currentWeek < SUPPLY_DECAY_START) {\n                // If current week is before supply decay we add initial supply to mintableSupply\n                totalAmount = totalAmount.add(INITIAL_WEEKLY_SUPPLY);\n                remainingWeeksToMint--;\n            } else if (currentWeek <= SUPPLY_DECAY_END) {\n                // if current week before supply decay ends we add the new supply for the week\n                // diff between current week and (supply decay start week - 1)\n                uint decayCount = currentWeek.sub(SUPPLY_DECAY_START - 1);\n\n                totalAmount = totalAmount.add(tokenDecaySupplyForWeek(decayCount));\n                remainingWeeksToMint--;\n            } else {\n                // Terminal supply is calculated on the total supply of Synthetix including any new supply\n                // We can compound the remaining week's supply at the fixed terminal rate\n                uint totalSupply = ISynthetix(synthetixProxy).totalSupply();\n                uint currentTotalSupply = totalSupply.add(totalAmount);\n\n                totalAmount = totalAmount.add(terminalInflationSupply(currentTotalSupply, remainingWeeksToMint));\n                remainingWeeksToMint = 0;\n            }\n        }\n\n        return totalAmount;\n    }\n\n    /**\n     * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n     * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()\n     */\n    function tokenDecaySupplyForWeek(uint counter) public pure returns (uint) {\n        // Apply exponential decay function to number of weeks since\n        // start of inflation smoothing to calculate diminishing supply for the week.\n        uint effectiveDecay = (SafeDecimalMath.unit().sub(DECAY_RATE)).powDecimal(counter);\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\n\n        return supplyForWeek;\n    }\n\n    /**\n     * @return A unit amount of terminal inflation supply\n     * @dev Weekly compound rate based on number of weeks\n     */\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks) public pure returns (uint) {\n        // rate = (1 + weekly rate) ^ num of weeks\n        uint effectiveCompoundRate = SafeDecimalMath.unit().add(TERMINAL_SUPPLY_RATE_ANNUAL.div(52)).powDecimal(numOfWeeks);\n\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\n        return totalSupply.multiplyDecimal(effectiveCompoundRate.sub(SafeDecimalMath.unit()));\n    }\n\n    /**\n     * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n     * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\n     */\n    function weeksSinceLastIssuance() public view returns (uint) {\n        // Get weeks since lastMintEvent\n        // If lastMintEvent not set or 0, then start from inflation start date.\n        uint timeDiff = lastMintEvent > 0 ? now.sub(lastMintEvent) : now.sub(INFLATION_START_DATE);\n        return timeDiff.div(MINT_PERIOD_DURATION);\n    }\n\n    /**\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\n     * has passed since the lastMintEvent.\n     * */\n    function isMintable() public view returns (bool) {\n        if (now - lastMintEvent > MINT_PERIOD_DURATION) {\n            return true;\n        }\n        return false;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Record the mint event from Synthetix by incrementing the inflation\n     * week counter for the number of weeks minted (probabaly always 1)\n     * and store the time of the event.\n     * @param supplyMinted the amount of SNX the total supply was inflated by.\n     * */\n    function recordMintEvent(uint supplyMinted) external onlySynthetix returns (bool) {\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\n\n        // add number of weeks minted to weekCounter\n        weekCounter = weekCounter.add(numberOfWeeksIssued);\n\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\n        // 1 day time buffer is added so inflation is minted after feePeriod closes\n        lastMintEvent = INFLATION_START_DATE.add(weekCounter.mul(MINT_PERIOD_DURATION)).add(MINT_BUFFER);\n\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent, now);\n        return true;\n    }\n\n    /**\n     * @notice Sets the reward amount of SNX for the caller of the public\n     * function Synthetix.mint().\n     * This incentivises anyone to mint the inflationary supply and the mintr\n     * Reward will be deducted from the inflationary supply and sent to the caller.\n     * @param amount the amount of SNX to reward the minter.\n     * */\n    function setMinterReward(uint amount) external onlyOwner {\n        require(amount <= MAX_MINTER_REWARD, \"Reward cannot exceed max minter reward\");\n        minterReward = amount;\n        emit MinterRewardUpdated(minterReward);\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Set the SynthetixProxy should it ever change.\n     * SupplySchedule requires Synthetix address as it has the authority\n     * to record mint event.\n     * */\n    function setSynthetixProxy(ISynthetix _synthetixProxy) external onlyOwner {\n        require(_synthetixProxy != address(0), \"Address cannot be 0\");\n        synthetixProxy = _synthetixProxy;\n        emit SynthetixProxyUpdated(synthetixProxy);\n    }\n\n    // ========== MODIFIERS ==========\n\n    /**\n     * @notice Only the Synthetix contract is authorised to call this function\n     * */\n    modifier onlySynthetix() {\n        require(\n            msg.sender == address(Proxy(synthetixProxy).target()),\n            \"Only the synthetix contract can perform this action\"\n        );\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    /**\n     * @notice Emitted when the inflationary supply is minted\n     * */\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent, uint timestamp);\n\n    /**\n     * @notice Emitted when the SNX minter reward amount is updated\n     * */\n    event MinterRewardUpdated(uint newRewardAmount);\n\n    /**\n     * @notice Emitted when setSynthetixProxy is called changing the Synthetix Proxy address\n     * */\n    event SynthetixProxyUpdated(address newAddress);\n}\n\n\n/**\n * @title RewardsDistribution interface\n */\ninterface IRewardsDistribution {\n    function distributeRewards(uint amount) external;\n}\n\n\ncontract IEtherCollateral {\n    uint256 public totalIssuedSynths;\n}\n\n\n// https://docs.synthetix.io/contracts/Synthetix\ncontract Synthetix is ExternStateToken, MixinResolver {\n    // ========== STATE VARIABLES ==========\n\n    // Available Synths which can be used with the system\n    Synth[] public availableSynths;\n    mapping(bytes32 => Synth) public synths;\n    mapping(address => bytes32) public synthsByAddress;\n\n    string constant TOKEN_NAME = \"Synthetix Network Token\";\n    string constant TOKEN_SYMBOL = \"SNX\";\n    uint8 constant DECIMALS = 18;\n    bytes32 constant sUSD = \"sUSD\";\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_ETHERCOLLATERAL = \"EtherCollateral\";\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\n    bytes32 private constant CONTRACT_SYNTHETIXSTATE = \"SynthetixState\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n    bytes32 private constant CONTRACT_SUPPLYSCHEDULE = \"SupplySchedule\";\n    bytes32 private constant CONTRACT_REWARDESCROW = \"RewardEscrow\";\n    bytes32 private constant CONTRACT_SYNTHETIXESCROW = \"SynthetixEscrow\";\n    bytes32 private constant CONTRACT_REWARDSDISTRIBUTION = \"RewardsDistribution\";\n\n    bytes32[24] private addressesToCache = [\n        CONTRACT_SYSTEMSTATUS,\n        CONTRACT_EXCHANGER,\n        CONTRACT_ETHERCOLLATERAL,\n        CONTRACT_ISSUER,\n        CONTRACT_SYNTHETIXSTATE,\n        CONTRACT_EXRATES,\n        CONTRACT_FEEPOOL,\n        CONTRACT_SUPPLYSCHEDULE,\n        CONTRACT_REWARDESCROW,\n        CONTRACT_SYNTHETIXESCROW,\n        CONTRACT_REWARDSDISTRIBUTION\n    ];\n\n    // ========== CONSTRUCTOR ==========\n\n    /**\n     * @dev Constructor\n     * @param _proxy The main token address of the Proxy contract. This will be ProxyERC20.sol\n     * @param _tokenState Address of the external immutable contract containing token balances.\n     * @param _owner The owner of this contract.\n     * @param _totalSupply On upgrading set to reestablish the current total supply (This should be in SynthetixState if ever updated)\n     * @param _resolver The address of the Synthetix Address Resolver\n     */\n    constructor(address _proxy, TokenState _tokenState, address _owner, uint _totalSupply, address _resolver)\n        public\n        ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _owner)\n        MixinResolver(_owner, _resolver, addressesToCache)\n    {}\n\n    /* ========== VIEWS ========== */\n\n    function systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS, \"Missing SystemStatus address\"));\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER, \"Missing Exchanger address\"));\n    }\n\n    function etherCollateral() internal view returns (IEtherCollateral) {\n        return IEtherCollateral(requireAndGetAddress(CONTRACT_ETHERCOLLATERAL, \"Missing EtherCollateral address\"));\n    }\n\n    function issuer() internal view returns (IIssuer) {\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER, \"Missing Issuer address\"));\n    }\n\n    function synthetixState() internal view returns (ISynthetixState) {\n        return ISynthetixState(requireAndGetAddress(CONTRACT_SYNTHETIXSTATE, \"Missing SynthetixState address\"));\n    }\n\n    function exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES, \"Missing ExchangeRates address\"));\n    }\n\n    function feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL, \"Missing FeePool address\"));\n    }\n\n    function supplySchedule() internal view returns (SupplySchedule) {\n        return SupplySchedule(requireAndGetAddress(CONTRACT_SUPPLYSCHEDULE, \"Missing SupplySchedule address\"));\n    }\n\n    function rewardEscrow() internal view returns (ISynthetixEscrow) {\n        return ISynthetixEscrow(requireAndGetAddress(CONTRACT_REWARDESCROW, \"Missing RewardEscrow address\"));\n    }\n\n    function synthetixEscrow() internal view returns (ISynthetixEscrow) {\n        return ISynthetixEscrow(requireAndGetAddress(CONTRACT_SYNTHETIXESCROW, \"Missing SynthetixEscrow address\"));\n    }\n\n    function rewardsDistribution() internal view returns (IRewardsDistribution) {\n        return\n            IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION, \"Missing RewardsDistribution address\"));\n    }\n\n    /**\n     * @notice Total amount of synths issued by the system, priced in currencyKey\n     * @param currencyKey The currency to value the synths in\n     */\n    function _totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) internal view returns (uint) {\n        IExchangeRates exRates = exchangeRates();\n        uint total = 0;\n        uint currencyRate = exRates.rateForCurrency(currencyKey);\n\n        (uint[] memory rates, bool anyRateStale) = exRates.ratesAndStaleForCurrencies(availableCurrencyKeys());\n        require(!anyRateStale, \"Rates are stale\");\n\n        for (uint i = 0; i < availableSynths.length; i++) {\n            // What's the total issued value of that synth in the destination currency?\n            // Note: We're not using exchangeRates().effectiveValue() because we don't want to go get the\n            //       rate for the destination currency and check if it's stale repeatedly on every\n            //       iteration of the loop\n            uint totalSynths = availableSynths[i].totalSupply();\n\n            // minus total issued synths from Ether Collateral from sETH.totalSupply()\n            if (excludeEtherCollateral && availableSynths[i] == synths[\"sETH\"]) {\n                totalSynths = totalSynths.sub(etherCollateral().totalIssuedSynths());\n            }\n\n            uint synthValue = totalSynths.multiplyDecimalRound(rates[i]);\n            total = total.add(synthValue);\n        }\n\n        return total.divideDecimalRound(currencyRate);\n    }\n\n    /**\n     * @notice Total amount of synths issued by the system priced in currencyKey\n     * @param currencyKey The currency to value the synths in\n     */\n    function totalIssuedSynths(bytes32 currencyKey) public view returns (uint) {\n        return _totalIssuedSynths(currencyKey, false);\n    }\n\n    /**\n     * @notice Total amount of synths issued by the system priced in currencyKey, excluding ether collateral\n     * @param currencyKey The currency to value the synths in\n     */\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) public view returns (uint) {\n        return _totalIssuedSynths(currencyKey, true);\n    }\n\n    /**\n     * @notice Returns the currencyKeys of availableSynths for rate checking\n     */\n    function availableCurrencyKeys() public view returns (bytes32[]) {\n        bytes32[] memory currencyKeys = new bytes32[](availableSynths.length);\n\n        for (uint i = 0; i < availableSynths.length; i++) {\n            currencyKeys[i] = synthsByAddress[availableSynths[i]];\n        }\n\n        return currencyKeys;\n    }\n\n    /**\n     * @notice Returns the count of available synths in the system, which you can use to iterate availableSynths\n     */\n    function availableSynthCount() public view returns (uint) {\n        return availableSynths.length;\n    }\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool) {\n        return exchanger().maxSecsLeftInWaitingPeriod(messageSender, currencyKey) > 0;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Add an associated Synth contract to the Synthetix system\n     * @dev Only the contract owner may call this.\n     */\n    function addSynth(Synth synth) external optionalProxy_onlyOwner {\n        bytes32 currencyKey = synth.currencyKey();\n\n        require(synths[currencyKey] == Synth(0), \"Synth already exists\");\n        require(synthsByAddress[synth] == bytes32(0), \"Synth address already exists\");\n\n        availableSynths.push(synth);\n        synths[currencyKey] = synth;\n        synthsByAddress[synth] = currencyKey;\n    }\n\n    /**\n     * @notice Remove an associated Synth contract from the Synthetix system\n     * @dev Only the contract owner may call this.\n     */\n    function removeSynth(bytes32 currencyKey) external optionalProxy_onlyOwner {\n        require(synths[currencyKey] != address(0), \"Synth does not exist\");\n        require(synths[currencyKey].totalSupply() == 0, \"Synth supply exists\");\n        require(currencyKey != sUSD, \"Cannot remove synth\");\n\n        // Save the address we're removing for emitting the event at the end.\n        address synthToRemove = synths[currencyKey];\n\n        // Remove the synth from the availableSynths array.\n        for (uint i = 0; i < availableSynths.length; i++) {\n            if (availableSynths[i] == synthToRemove) {\n                delete availableSynths[i];\n\n                // Copy the last synth into the place of the one we just deleted\n                // If there's only one synth, this is synths[0] = synths[0].\n                // If we're deleting the last one, it's also a NOOP in the same way.\n                availableSynths[i] = availableSynths[availableSynths.length - 1];\n\n                // Decrease the size of the array by one.\n                availableSynths.length--;\n\n                break;\n            }\n        }\n\n        // And remove it from the synths mapping\n        delete synthsByAddress[synths[currencyKey]];\n        delete synths[currencyKey];\n\n        // Note: No event here as Synthetix contract exceeds max contract size\n        // with these events, and it's unlikely people will need to\n        // track these events specifically.\n\n    }\n\n    /**\n     * @notice ERC20 transfer function.\n     */\n    function transfer(address to, uint value) public optionalProxy returns (bool) {\n        systemStatus().requireSystemActive();\n\n        // Ensure they're not trying to exceed their staked SNX amount\n        require(value <= transferableSynthetix(messageSender), \"Cannot transfer staked or escrowed SNX\");\n\n        // Perform the transfer: if there is a problem an exception will be thrown in this call.\n        _transfer_byProxy(messageSender, to, value);\n\n        return true;\n    }\n\n    /**\n     * @notice ERC20 transferFrom function.\n     */\n    function transferFrom(address from, address to, uint value) public optionalProxy returns (bool) {\n        systemStatus().requireSystemActive();\n\n        // Ensure they're not trying to exceed their locked amount\n        require(value <= transferableSynthetix(from), \"Cannot transfer staked or escrowed SNX\");\n\n        // Perform the transfer: if there is a problem,\n        // an exception will be thrown in this call.\n        return _transferFrom_byProxy(messageSender, from, to, value);\n    }\n\n    function issueSynths(uint amount) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().issueSynths(messageSender, amount);\n    }\n\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().issueSynthsOnBehalf(issueForAddress, messageSender, amount);\n    }\n\n    function issueMaxSynths() external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().issueMaxSynths(messageSender);\n    }\n\n    function issueMaxSynthsOnBehalf(address issueForAddress) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().issueMaxSynthsOnBehalf(issueForAddress, messageSender);\n    }\n\n    function burnSynths(uint amount) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().burnSynths(messageSender, amount);\n    }\n\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().burnSynthsOnBehalf(burnForAddress, messageSender, amount);\n    }\n\n    function burnSynthsToTarget() external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().burnSynthsToTarget(messageSender);\n    }\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external optionalProxy {\n        systemStatus().requireIssuanceActive();\n\n        return issuer().burnSynthsToTargetOnBehalf(burnForAddress, messageSender);\n    }\n\n    function exchange(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\n        external\n        optionalProxy\n        returns (uint amountReceived)\n    {\n        systemStatus().requireExchangeActive();\n\n        systemStatus().requireSynthsActive(sourceCurrencyKey, destinationCurrencyKey);\n\n        return exchanger().exchange(messageSender, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, messageSender);\n    }\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external optionalProxy returns (uint amountReceived) {\n        systemStatus().requireExchangeActive();\n\n        systemStatus().requireSynthsActive(sourceCurrencyKey, destinationCurrencyKey);\n\n        return\n            exchanger().exchangeOnBehalf(\n                exchangeForAddress,\n                messageSender,\n                sourceCurrencyKey,\n                sourceAmount,\n                destinationCurrencyKey\n            );\n    }\n\n    function settle(bytes32 currencyKey)\n        external\n        optionalProxy\n        returns (uint reclaimed, uint refunded, uint numEntriesSettled)\n    {\n        return exchanger().settle(messageSender, currencyKey);\n    }\n\n    // ========== Issuance/Burning ==========\n\n    /**\n     * @notice The maximum synths an issuer can issue against their total synthetix quantity.\n     * This ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.\n     */\n    function maxIssuableSynths(address _issuer)\n        public\n        view\n        returns (\n            // We don't need to check stale rates here as effectiveValue will do it for us.\n            uint\n        )\n    {\n        // What is the value of their SNX balance in the destination currency?\n        uint destinationValue = exchangeRates().effectiveValue(\"SNX\", collateral(_issuer), sUSD);\n\n        // They're allowed to issue up to issuanceRatio of that value\n        return destinationValue.multiplyDecimal(synthetixState().issuanceRatio());\n    }\n\n    /**\n     * @notice The current collateralisation ratio for a user. Collateralisation ratio varies over time\n     * as the value of the underlying Synthetix asset changes,\n     * e.g. based on an issuance ratio of 20%. if a user issues their maximum available\n     * synths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value\n     * of Synthetix changes, the ratio returned by this function will adjust accordingly. Users are\n     * incentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by\n     * altering the amount of fees they're able to claim from the system.\n     */\n    function collateralisationRatio(address _issuer) public view returns (uint) {\n        uint totalOwnedSynthetix = collateral(_issuer);\n        if (totalOwnedSynthetix == 0) return 0;\n\n        uint debtBalance = debtBalanceOf(_issuer, \"SNX\");\n        return debtBalance.divideDecimalRound(totalOwnedSynthetix);\n    }\n\n    /**\n     * @notice If a user issues synths backed by SNX in their wallet, the SNX become locked. This function\n     * will tell you how many synths a user has to give back to the system in order to unlock their original\n     * debt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price\n     * the debt in sUSD, or any other synth you wish.\n     */\n    function debtBalanceOf(address _issuer, bytes32 currencyKey)\n        public\n        view\n        returns (\n            // Don't need to check for stale rates here because totalIssuedSynths will do it for us\n            uint\n        )\n    {\n        ISynthetixState state = synthetixState();\n\n        // What was their initial debt ownership?\n        (uint initialDebtOwnership, ) = state.issuanceData(_issuer);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        if (initialDebtOwnership == 0) return 0;\n\n        (uint debtBalance, ) = debtBalanceOfAndTotalDebt(_issuer, currencyKey);\n        return debtBalance;\n    }\n\n    function debtBalanceOfAndTotalDebt(address _issuer, bytes32 currencyKey)\n        public\n        view\n        returns (uint debtBalance, uint totalSystemValue)\n    {\n        ISynthetixState state = synthetixState();\n\n        // What was their initial debt ownership?\n        uint initialDebtOwnership;\n        uint debtEntryIndex;\n        (initialDebtOwnership, debtEntryIndex) = state.issuanceData(_issuer);\n\n        // What's the total value of the system excluding ETH backed synths in their requested currency?\n        totalSystemValue = totalIssuedSynthsExcludeEtherCollateral(currencyKey);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        if (initialDebtOwnership == 0) return (0, totalSystemValue);\n\n        // Figure out the global debt percentage delta from when they entered the system.\n        // This is a high precision integer of 27 (1e27) decimals.\n        uint currentDebtOwnership = state\n            .lastDebtLedgerEntry()\n            .divideDecimalRoundPrecise(state.debtLedger(debtEntryIndex))\n            .multiplyDecimalRoundPrecise(initialDebtOwnership);\n\n        // Their debt balance is their portion of the total system value.\n        uint highPrecisionBalance = totalSystemValue.decimalToPreciseDecimal().multiplyDecimalRoundPrecise(\n            currentDebtOwnership\n        );\n\n        // Convert back into 18 decimals (1e18)\n        debtBalance = highPrecisionBalance.preciseDecimalToDecimal();\n    }\n\n    /**\n     * @notice The remaining synths an issuer can issue against their total synthetix balance.\n     * @param _issuer The account that intends to issue\n     */\n    function remainingIssuableSynths(address _issuer)\n        public\n        view\n        returns (\n            // Don't need to check for synth existing or stale rates because maxIssuableSynths will do it for us.\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        )\n    {\n        (alreadyIssued, totalSystemDebt) = debtBalanceOfAndTotalDebt(_issuer, sUSD);\n        maxIssuable = maxIssuableSynths(_issuer);\n\n        if (alreadyIssued >= maxIssuable) {\n            maxIssuable = 0;\n        } else {\n            maxIssuable = maxIssuable.sub(alreadyIssued);\n        }\n    }\n\n    /**\n     * @notice The total SNX owned by this account, both escrowed and unescrowed,\n     * against which synths can be issued.\n     * This includes those already being used as collateral (locked), and those\n     * available for further issuance (unlocked).\n     */\n    function collateral(address account) public view returns (uint) {\n        uint balance = tokenState.balanceOf(account);\n\n        if (synthetixEscrow() != address(0)) {\n            balance = balance.add(synthetixEscrow().balanceOf(account));\n        }\n\n        if (rewardEscrow() != address(0)) {\n            balance = balance.add(rewardEscrow().balanceOf(account));\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice The number of SNX that are free to be transferred for an account.\n     * @dev Escrowed SNX are not transferable, so they are not included\n     * in this calculation.\n     * @notice SNX rate not stale is checked within debtBalanceOf\n     */\n    function transferableSynthetix(address account)\n        public\n        view\n        rateNotStale(\"SNX\") // SNX is not a synth so is not checked in totalIssuedSynths\n        returns (uint)\n    {\n        // How many SNX do they have, excluding escrow?\n        // Note: We're excluding escrow here because we're interested in their transferable amount\n        // and escrowed SNX are not transferable.\n        uint balance = tokenState.balanceOf(account);\n\n        // How many of those will be locked by the amount they've issued?\n        // Assuming issuance ratio is 20%, then issuing 20 SNX of value would require\n        // 100 SNX to be locked in their wallet to maintain their collateralisation ratio\n        // The locked synthetix value can exceed their balance.\n        uint lockedSynthetixValue = debtBalanceOf(account, \"SNX\").divideDecimalRound(synthetixState().issuanceRatio());\n\n        // If we exceed the balance, no SNX are transferable, otherwise the difference is.\n        if (lockedSynthetixValue >= balance) {\n            return 0;\n        } else {\n            return balance.sub(lockedSynthetixValue);\n        }\n    }\n\n    /**\n     * @notice Mints the inflationary SNX supply. The inflation shedule is\n     * defined in the SupplySchedule contract.\n     * The mint() function is publicly callable by anyone. The caller will\n     receive a minter reward as specified in supplySchedule.minterReward().\n     */\n    function mint() external returns (bool) {\n        require(rewardsDistribution() != address(0), \"RewardsDistribution not set\");\n\n        systemStatus().requireIssuanceActive();\n\n        SupplySchedule _supplySchedule = supplySchedule();\n        IRewardsDistribution _rewardsDistribution = rewardsDistribution();\n\n        uint supplyToMint = _supplySchedule.mintableSupply();\n        require(supplyToMint > 0, \"No supply is mintable\");\n\n        // record minting event before mutation to token supply\n        _supplySchedule.recordMintEvent(supplyToMint);\n\n        // Set minted SNX balance to RewardEscrow's balance\n        // Minus the minterReward and set balance of minter to add reward\n        uint minterReward = _supplySchedule.minterReward();\n        // Get the remainder\n        uint amountToDistribute = supplyToMint.sub(minterReward);\n\n        // Set the token balance to the RewardsDistribution contract\n        tokenState.setBalanceOf(_rewardsDistribution, tokenState.balanceOf(_rewardsDistribution).add(amountToDistribute));\n        emitTransfer(this, _rewardsDistribution, amountToDistribute);\n\n        // Kick off the distribution of rewards\n        _rewardsDistribution.distributeRewards(amountToDistribute);\n\n        // Assign the minters reward.\n        tokenState.setBalanceOf(msg.sender, tokenState.balanceOf(msg.sender).add(minterReward));\n        emitTransfer(this, msg.sender, minterReward);\n\n        totalSupply = totalSupply.add(supplyToMint);\n\n        return true;\n    }\n\n    // ========== MODIFIERS ==========\n\n    modifier rateNotStale(bytes32 currencyKey) {\n        require(!exchangeRates().rateIsStale(currencyKey), \"Rate stale or not a synth\");\n        _;\n    }\n\n    modifier onlyExchanger() {\n        require(msg.sender == address(exchanger()), \"Only the exchanger contract can invoke this function\");\n        _;\n    }\n\n    // ========== EVENTS ==========\n    /* solium-disable */\n    event SynthExchange(\n        address indexed account,\n        bytes32 fromCurrencyKey,\n        uint256 fromAmount,\n        bytes32 toCurrencyKey,\n        uint256 toAmount,\n        address toAddress\n    );\n    bytes32 constant SYNTHEXCHANGE_SIG = keccak256(\"SynthExchange(address,bytes32,uint256,bytes32,uint256,address)\");\n\n    function emitSynthExchange(\n        address account,\n        bytes32 fromCurrencyKey,\n        uint256 fromAmount,\n        bytes32 toCurrencyKey,\n        uint256 toAmount,\n        address toAddress\n    ) external onlyExchanger {\n        proxy._emit(\n            abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress),\n            2,\n            SYNTHEXCHANGE_SIG,\n            bytes32(account),\n            0,\n            0\n        );\n    }\n\n    event ExchangeReclaim(address indexed account, bytes32 currencyKey, uint amount);\n    bytes32 constant EXCHANGERECLAIM_SIG = keccak256(\"ExchangeReclaim(address,bytes32,uint256)\");\n\n    function emitExchangeReclaim(address account, bytes32 currencyKey, uint256 amount) external onlyExchanger {\n        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGERECLAIM_SIG, bytes32(account), 0, 0);\n    }\n\n    event ExchangeRebate(address indexed account, bytes32 currencyKey, uint amount);\n    bytes32 constant EXCHANGEREBATE_SIG = keccak256(\"ExchangeRebate(address,bytes32,uint256)\");\n\n    function emitExchangeRebate(address account, bytes32 currencyKey, uint256 amount) external onlyExchanger {\n        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGEREBATE_SIG, bytes32(account), 0, 0);\n    }\n    /* solium-enable */\n}\n\n\n// https://docs.synthetix.io/contracts/LimitedSetup\ncontract LimitedSetup {\n    uint setupExpiryTime;\n\n    /**\n     * @dev LimitedSetup Constructor.\n     * @param setupDuration The time the setup period will last for.\n     */\n    constructor(uint setupDuration) public {\n        setupExpiryTime = now + setupDuration;\n    }\n\n    modifier onlyDuringSetup {\n        require(now < setupExpiryTime, \"Can only perform this action during setup\");\n        _;\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/FeePoolState\ncontract FeePoolState is SelfDestructible, LimitedSetup {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== STATE VARIABLES ========== */\n\n    uint8 public constant FEE_PERIOD_LENGTH = 6;\n\n    address public feePool;\n\n    // The IssuanceData activity that's happened in a fee period.\n    struct IssuanceData {\n        uint debtPercentage;\n        uint debtEntryIndex;\n    }\n\n    // The IssuanceData activity that's happened in a fee period.\n    mapping(address => IssuanceData[FEE_PERIOD_LENGTH]) public accountIssuanceLedger;\n\n    /**\n     * @dev Constructor.\n     * @param _owner The owner of this contract.\n     */\n    constructor(address _owner, IFeePool _feePool) public SelfDestructible(_owner) LimitedSetup(6 weeks) {\n        feePool = _feePool;\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice set the FeePool contract as it is the only authority to be able to call\n     * appendAccountIssuanceRecord with the onlyFeePool modifer\n     * @dev Must be set by owner when FeePool logic is upgraded\n     */\n    function setFeePool(IFeePool _feePool) external onlyOwner {\n        feePool = _feePool;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Get an accounts issuanceData for\n     * @param account users account\n     * @param index Index in the array to retrieve. Upto FEE_PERIOD_LENGTH\n     */\n    function getAccountsDebtEntry(address account, uint index)\n        public\n        view\n        returns (uint debtPercentage, uint debtEntryIndex)\n    {\n        require(index < FEE_PERIOD_LENGTH, \"index exceeds the FEE_PERIOD_LENGTH\");\n\n        debtPercentage = accountIssuanceLedger[account][index].debtPercentage;\n        debtEntryIndex = accountIssuanceLedger[account][index].debtEntryIndex;\n    }\n\n    /**\n     * @notice Find the oldest debtEntryIndex for the corresponding closingDebtIndex\n     * @param account users account\n     * @param closingDebtIndex the last periods debt index on close\n     */\n    function applicableIssuanceData(address account, uint closingDebtIndex) external view returns (uint, uint) {\n        IssuanceData[FEE_PERIOD_LENGTH] memory issuanceData = accountIssuanceLedger[account];\n\n        // We want to use the user's debtEntryIndex at when the period closed\n        // Find the oldest debtEntryIndex for the corresponding closingDebtIndex\n        for (uint i = 0; i < FEE_PERIOD_LENGTH; i++) {\n            if (closingDebtIndex >= issuanceData[i].debtEntryIndex) {\n                return (issuanceData[i].debtPercentage, issuanceData[i].debtEntryIndex);\n            }\n        }\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Logs an accounts issuance data in the current fee period which is then stored historically\n     * @param account Message.Senders account address\n     * @param debtRatio Debt of this account as a percentage of the global debt.\n     * @param debtEntryIndex The index in the global debt ledger. synthetix.synthetixState().issuanceData(account)\n     * @param currentPeriodStartDebtIndex The startingDebtIndex of the current fee period\n     * @dev onlyFeePool to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\n     * per fee period so we know to allocate the correct proportions of fees and rewards per period\n      accountIssuanceLedger[account][0] has the latest locked amount for the current period. This can be update as many time\n      accountIssuanceLedger[account][1-2] has the last locked amount for a previous period they minted or burned\n     */\n    function appendAccountIssuanceRecord(\n        address account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint currentPeriodStartDebtIndex\n    ) external onlyFeePool {\n        // Is the current debtEntryIndex within this fee period\n        if (accountIssuanceLedger[account][0].debtEntryIndex < currentPeriodStartDebtIndex) {\n            // If its older then shift the previous IssuanceData entries periods down to make room for the new one.\n            issuanceDataIndexOrder(account);\n        }\n\n        // Always store the latest IssuanceData entry at [0]\n        accountIssuanceLedger[account][0].debtPercentage = debtRatio;\n        accountIssuanceLedger[account][0].debtEntryIndex = debtEntryIndex;\n    }\n\n    /**\n     * @notice Pushes down the entire array of debt ratios per fee period\n     */\n    function issuanceDataIndexOrder(address account) private {\n        for (uint i = FEE_PERIOD_LENGTH - 2; i < FEE_PERIOD_LENGTH; i--) {\n            uint next = i + 1;\n            accountIssuanceLedger[account][next].debtPercentage = accountIssuanceLedger[account][i].debtPercentage;\n            accountIssuanceLedger[account][next].debtEntryIndex = accountIssuanceLedger[account][i].debtEntryIndex;\n        }\n    }\n\n    /**\n     * @notice Import issuer data from synthetixState.issuerData on FeePeriodClose() block #\n     * @dev Only callable by the contract owner, and only for 6 weeks after deployment.\n     * @param accounts Array of issuing addresses\n     * @param ratios Array of debt ratios\n     * @param periodToInsert The Fee Period to insert the historical records into\n     * @param feePeriodCloseIndex An accounts debtEntryIndex is valid when within the fee peroid,\n     * since the input ratio will be an average of the pervious periods it just needs to be\n     * > recentFeePeriods[periodToInsert].startingDebtIndex\n     * < recentFeePeriods[periodToInsert - 1].startingDebtIndex\n     */\n    function importIssuerData(address[] accounts, uint[] ratios, uint periodToInsert, uint feePeriodCloseIndex)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        require(accounts.length == ratios.length, \"Length mismatch\");\n\n        for (uint i = 0; i < accounts.length; i++) {\n            accountIssuanceLedger[accounts[i]][periodToInsert].debtPercentage = ratios[i];\n            accountIssuanceLedger[accounts[i]][periodToInsert].debtEntryIndex = feePeriodCloseIndex;\n            emit IssuanceDebtRatioEntry(accounts[i], ratios[i], feePeriodCloseIndex);\n        }\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyFeePool {\n        require(msg.sender == address(feePool), \"Only the FeePool contract can perform this action\");\n        _;\n    }\n\n    /* ========== Events ========== */\n    event IssuanceDebtRatioEntry(address indexed account, uint debtRatio, uint feePeriodCloseIndex);\n}\n\n\n/**\n * @notice  This contract is based on the code available from this blog\n * https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88/\n * Implements support for storing a keccak256 key and value pairs. It is the more flexible\n * and extensible option. This ensures data schema changes can be implemented without\n * requiring upgrades to the storage contract.\n */\n// https://docs.synthetix.io/contracts/EternalStorage\ncontract EternalStorage is State {\n    constructor(address _owner, address _associatedContract) public State(_owner, _associatedContract) {}\n\n    /* ========== DATA TYPES ========== */\n    mapping(bytes32 => uint) UIntStorage;\n    mapping(bytes32 => string) StringStorage;\n    mapping(bytes32 => address) AddressStorage;\n    mapping(bytes32 => bytes) BytesStorage;\n    mapping(bytes32 => bytes32) Bytes32Storage;\n    mapping(bytes32 => bool) BooleanStorage;\n    mapping(bytes32 => int) IntStorage;\n\n    // UIntStorage;\n    function getUIntValue(bytes32 record) external view returns (uint) {\n        return UIntStorage[record];\n    }\n\n    function setUIntValue(bytes32 record, uint value) external onlyAssociatedContract {\n        UIntStorage[record] = value;\n    }\n\n    function deleteUIntValue(bytes32 record) external onlyAssociatedContract {\n        delete UIntStorage[record];\n    }\n\n    // StringStorage\n    function getStringValue(bytes32 record) external view returns (string memory) {\n        return StringStorage[record];\n    }\n\n    function setStringValue(bytes32 record, string value) external onlyAssociatedContract {\n        StringStorage[record] = value;\n    }\n\n    function deleteStringValue(bytes32 record) external onlyAssociatedContract {\n        delete StringStorage[record];\n    }\n\n    // AddressStorage\n    function getAddressValue(bytes32 record) external view returns (address) {\n        return AddressStorage[record];\n    }\n\n    function setAddressValue(bytes32 record, address value) external onlyAssociatedContract {\n        AddressStorage[record] = value;\n    }\n\n    function deleteAddressValue(bytes32 record) external onlyAssociatedContract {\n        delete AddressStorage[record];\n    }\n\n    // BytesStorage\n    function getBytesValue(bytes32 record) external view returns (bytes memory) {\n        return BytesStorage[record];\n    }\n\n    function setBytesValue(bytes32 record, bytes value) external onlyAssociatedContract {\n        BytesStorage[record] = value;\n    }\n\n    function deleteBytesValue(bytes32 record) external onlyAssociatedContract {\n        delete BytesStorage[record];\n    }\n\n    // Bytes32Storage\n    function getBytes32Value(bytes32 record) external view returns (bytes32) {\n        return Bytes32Storage[record];\n    }\n\n    function setBytes32Value(bytes32 record, bytes32 value) external onlyAssociatedContract {\n        Bytes32Storage[record] = value;\n    }\n\n    function deleteBytes32Value(bytes32 record) external onlyAssociatedContract {\n        delete Bytes32Storage[record];\n    }\n\n    // BooleanStorage\n    function getBooleanValue(bytes32 record) external view returns (bool) {\n        return BooleanStorage[record];\n    }\n\n    function setBooleanValue(bytes32 record, bool value) external onlyAssociatedContract {\n        BooleanStorage[record] = value;\n    }\n\n    function deleteBooleanValue(bytes32 record) external onlyAssociatedContract {\n        delete BooleanStorage[record];\n    }\n\n    // IntStorage\n    function getIntValue(bytes32 record) external view returns (int) {\n        return IntStorage[record];\n    }\n\n    function setIntValue(bytes32 record, int value) external onlyAssociatedContract {\n        IntStorage[record] = value;\n    }\n\n    function deleteIntValue(bytes32 record) external onlyAssociatedContract {\n        delete IntStorage[record];\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       FeePoolEternalStorage.sol\nversion:    1.0\nauthor:     Clinton Ennis\n            Jackson Chan\ndate:       2019-04-05\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThe FeePoolEternalStorage is for any state the FeePool contract\nneeds to persist between upgrades to the FeePool logic.\n\nPlease see EternalStorage.sol\n\n-----------------------------------------------------------------\n*/\n\n\n// https://docs.synthetix.io/contracts/FeePoolEternalStorage\ncontract FeePoolEternalStorage is EternalStorage, LimitedSetup {\n    bytes32 constant LAST_FEE_WITHDRAWAL = \"last_fee_withdrawal\";\n\n    /**\n     * @dev Constructor.\n     * @param _owner The owner of this contract.\n     */\n    constructor(address _owner, address _feePool) public EternalStorage(_owner, _feePool) LimitedSetup(6 weeks) {}\n\n    /**\n     * @notice Import data from FeePool.lastFeeWithdrawal\n     * @dev Only callable by the contract owner, and only for 6 weeks after deployment.\n     * @param accounts Array of addresses that have claimed\n     * @param feePeriodIDs Array feePeriodIDs with the accounts last claim\n     */\n    function importFeeWithdrawalData(address[] accounts, uint[] feePeriodIDs) external onlyOwner onlyDuringSetup {\n        require(accounts.length == feePeriodIDs.length, \"Length mismatch\");\n\n        for (uint8 i = 0; i < accounts.length; i++) {\n            this.setUIntValue(keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, accounts[i])), feePeriodIDs[i]);\n        }\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/DelegateApprovals\ncontract DelegateApprovals is Owned {\n    bytes32 public constant BURN_FOR_ADDRESS = \"BurnForAddress\";\n    bytes32 public constant ISSUE_FOR_ADDRESS = \"IssueForAddress\";\n    bytes32 public constant CLAIM_FOR_ADDRESS = \"ClaimForAddress\";\n    bytes32 public constant EXCHANGE_FOR_ADDRESS = \"ExchangeForAddress\";\n    bytes32 public constant APPROVE_ALL = \"ApproveAll\";\n\n    bytes32[5] private _delegatableFunctions = [\n        APPROVE_ALL,\n        BURN_FOR_ADDRESS,\n        ISSUE_FOR_ADDRESS,\n        CLAIM_FOR_ADDRESS,\n        EXCHANGE_FOR_ADDRESS\n    ];\n\n    /* ========== STATE VARIABLES ========== */\n    EternalStorage public eternalStorage;\n\n    /**\n     * @dev Constructor\n     * @param _owner The address which controls this contract.\n     * @param _eternalStorage The eternalStorage address.\n     */\n    constructor(address _owner, EternalStorage _eternalStorage) public Owned(_owner) {\n        eternalStorage = _eternalStorage;\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Move it to setter and associatedState\n\n    // util to get key based on action name + address of authoriser + address for delegate\n    function _getKey(bytes32 _action, address _authoriser, address _delegate) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_action, _authoriser, _delegate));\n    }\n\n    // hash of actionName + address of authoriser + address for the delegate\n    function canBurnFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(BURN_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canIssueFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(ISSUE_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canClaimFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(CLAIM_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(EXCHANGE_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function approvedAll(address authoriser, address delegate) public view returns (bool) {\n        return eternalStorage.getBooleanValue(_getKey(APPROVE_ALL, authoriser, delegate));\n    }\n\n    // internal function to check approval based on action\n    // if approved for all actions then will return true\n    // before checking specific approvals\n    function _checkApproval(bytes32 action, address authoriser, address delegate) internal view returns (bool) {\n        if (approvedAll(authoriser, delegate)) return true;\n\n        return eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate));\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Approve All\n    function approveAllDelegatePowers(address delegate) external {\n        _setApproval(APPROVE_ALL, msg.sender, delegate);\n    }\n\n    // Removes all delegate approvals\n    function removeAllDelegatePowers(address delegate) external {\n        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n            _withdrawApproval(_delegatableFunctions[i], msg.sender, delegate);\n        }\n    }\n\n    // Burn on behalf\n    function approveBurnOnBehalf(address delegate) external {\n        _setApproval(BURN_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeBurnOnBehalf(address delegate) external {\n        _withdrawApproval(BURN_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Issue on behalf\n    function approveIssueOnBehalf(address delegate) external {\n        _setApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeIssueOnBehalf(address delegate) external {\n        _withdrawApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Claim on behalf\n    function approveClaimOnBehalf(address delegate) external {\n        _setApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeClaimOnBehalf(address delegate) external {\n        _withdrawApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Exchange on behalf\n    function approveExchangeOnBehalf(address delegate) external {\n        _setApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeExchangeOnBehalf(address delegate) external {\n        _withdrawApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function _setApproval(bytes32 action, address authoriser, address delegate) internal {\n        require(delegate != address(0), \"Can't delegate to address(0)\");\n        eternalStorage.setBooleanValue(_getKey(action, authoriser, delegate), true);\n        emit Approval(authoriser, delegate, action);\n    }\n\n    function _withdrawApproval(bytes32 action, address authoriser, address delegate) internal {\n        // Check approval is set otherwise skip deleting approval\n        if (eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate))) {\n            eternalStorage.deleteBooleanValue(_getKey(action, authoriser, delegate));\n            emit WithdrawApproval(authoriser, delegate, action);\n        }\n    }\n\n    function setEternalStorage(EternalStorage _eternalStorage) external onlyOwner {\n        require(_eternalStorage != address(0), \"Can't set eternalStorage to address(0)\");\n        eternalStorage = _eternalStorage;\n        emit EternalStorageUpdated(eternalStorage);\n    }\n\n    /* ========== EVENTS ========== */\n    event Approval(address indexed authoriser, address delegate, bytes32 action);\n    event WithdrawApproval(address indexed authoriser, address delegate, bytes32 action);\n    event EternalStorageUpdated(address newEternalStorage);\n}\n\n\n// https://docs.synthetix.io/contracts/FeePool\ncontract FeePool is Proxyable, SelfDestructible, LimitedSetup, MixinResolver {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    // A percentage fee charged on each exchange between currencies.\n    uint public exchangeFeeRate;\n\n    // Exchange fee may not exceed 10%.\n    uint public constant MAX_EXCHANGE_FEE_RATE = SafeDecimalMath.unit() / 10;\n\n    // Where fees are pooled in sUSD.\n    address public constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\n\n    // sUSD currencyKey. Fees stored and paid in sUSD\n    bytes32 private sUSD = \"sUSD\";\n\n    // This struct represents the issuance activity that's happened in a fee period.\n    struct FeePeriod {\n        uint64 feePeriodId;\n        uint64 startingDebtIndex;\n        uint64 startTime;\n        uint feesToDistribute;\n        uint feesClaimed;\n        uint rewardsToDistribute;\n        uint rewardsClaimed;\n    }\n\n    // A staker(mintr) can claim from the previous fee period (7 days) only.\n    // Fee Periods stored and managed from [0], such that [0] is always\n    // the current active fee period which is not claimable until the\n    // public function closeCurrentFeePeriod() is called closing the\n    // current weeks collected fees. [1] is last weeks feeperiod\n    uint8 public constant FEE_PERIOD_LENGTH = 2;\n\n    FeePeriod[FEE_PERIOD_LENGTH] private _recentFeePeriods;\n    uint256 private _currentFeePeriod;\n\n    // How long a fee period lasts at a minimum. It is required for\n    // anyone to roll over the periods, so they are not guaranteed\n    // to roll over at exactly this duration, but the contract enforces\n    // that they cannot roll over any quicker than this duration.\n    uint public feePeriodDuration = 1 weeks;\n    // The fee period must be between 1 day and 60 days.\n    uint public constant MIN_FEE_PERIOD_DURATION = 1 days;\n    uint public constant MAX_FEE_PERIOD_DURATION = 60 days;\n\n    // Users are unable to claim fees if their collateralisation ratio drifts out of target treshold\n    uint public targetThreshold = (1 * SafeDecimalMath.unit()) / 100;\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant CONTRACT_FEEPOOLSTATE = \"FeePoolState\";\n    bytes32 private constant CONTRACT_FEEPOOLETERNALSTORAGE = \"FeePoolEternalStorage\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\n    bytes32 private constant CONTRACT_SYNTHETIXSTATE = \"SynthetixState\";\n    bytes32 private constant CONTRACT_REWARDESCROW = \"RewardEscrow\";\n    bytes32 private constant CONTRACT_DELEGATEAPPROVALS = \"DelegateApprovals\";\n    bytes32 private constant CONTRACT_REWARDSDISTRIBUTION = \"RewardsDistribution\";\n\n    bytes32[24] private addressesToCache = [\n        CONTRACT_SYSTEMSTATUS,\n        CONTRACT_EXRATES,\n        CONTRACT_SYNTHETIX,\n        CONTRACT_FEEPOOLSTATE,\n        CONTRACT_FEEPOOLETERNALSTORAGE,\n        CONTRACT_EXCHANGER,\n        CONTRACT_ISSUER,\n        CONTRACT_SYNTHETIXSTATE,\n        CONTRACT_REWARDESCROW,\n        CONTRACT_DELEGATEAPPROVALS,\n        CONTRACT_REWARDSDISTRIBUTION\n    ];\n\n    /* ========== ETERNAL STORAGE CONSTANTS ========== */\n\n    bytes32 private constant LAST_FEE_WITHDRAWAL = \"last_fee_withdrawal\";\n\n    constructor(address _proxy, address _owner, uint _exchangeFeeRate, address _resolver)\n        public\n        SelfDestructible(_owner)\n        Proxyable(_proxy, _owner)\n        LimitedSetup(3 weeks)\n        MixinResolver(_owner, _resolver, addressesToCache)\n    {\n        // Constructed fee rates should respect the maximum fee rates.\n        require(_exchangeFeeRate <= MAX_EXCHANGE_FEE_RATE, \"Exchange fee rate max exceeded\");\n\n        exchangeFeeRate = _exchangeFeeRate;\n\n        // Set our initial fee period\n        _recentFeePeriodsStorage(0).feePeriodId = 1;\n        _recentFeePeriodsStorage(0).startTime = uint64(now);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS, \"Missing SystemStatus address\"));\n    }\n\n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX, \"Missing Synthetix address\"));\n    }\n\n    function feePoolState() internal view returns (FeePoolState) {\n        return FeePoolState(requireAndGetAddress(CONTRACT_FEEPOOLSTATE, \"Missing FeePoolState address\"));\n    }\n\n    function feePoolEternalStorage() internal view returns (FeePoolEternalStorage) {\n        return\n            FeePoolEternalStorage(\n                requireAndGetAddress(CONTRACT_FEEPOOLETERNALSTORAGE, \"Missing FeePoolEternalStorage address\")\n            );\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER, \"Missing Exchanger address\"));\n    }\n\n    function issuer() internal view returns (IIssuer) {\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER, \"Missing Issuer address\"));\n    }\n\n    function synthetixState() internal view returns (ISynthetixState) {\n        return ISynthetixState(requireAndGetAddress(CONTRACT_SYNTHETIXSTATE, \"Missing SynthetixState address\"));\n    }\n\n    function rewardEscrow() internal view returns (ISynthetixEscrow) {\n        return ISynthetixEscrow(requireAndGetAddress(CONTRACT_REWARDESCROW, \"Missing RewardEscrow address\"));\n    }\n\n    function delegateApprovals() internal view returns (DelegateApprovals) {\n        return DelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS, \"Missing DelegateApprovals address\"));\n    }\n\n    function rewardsDistribution() internal view returns (IRewardsDistribution) {\n        return\n            IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION, \"Missing RewardsDistribution address\"));\n    }\n\n    function recentFeePeriods(uint index)\n        external\n        view\n        returns (\n            uint64 feePeriodId,\n            uint64 startingDebtIndex,\n            uint64 startTime,\n            uint feesToDistribute,\n            uint feesClaimed,\n            uint rewardsToDistribute,\n            uint rewardsClaimed\n        )\n    {\n        FeePeriod memory feePeriod = _recentFeePeriodsStorage(index);\n        return (\n            feePeriod.feePeriodId,\n            feePeriod.startingDebtIndex,\n            feePeriod.startTime,\n            feePeriod.feesToDistribute,\n            feePeriod.feesClaimed,\n            feePeriod.rewardsToDistribute,\n            feePeriod.rewardsClaimed\n        );\n    }\n\n    function _recentFeePeriodsStorage(uint index) internal view returns (FeePeriod storage) {\n        return _recentFeePeriods[(_currentFeePeriod + index) % FEE_PERIOD_LENGTH];\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Logs an accounts issuance data per fee period\n     * @param account Message.Senders account address\n     * @param debtRatio Debt percentage this account has locked after minting or burning their synth\n     * @param debtEntryIndex The index in the global debt ledger. synthetixState.issuanceData(account)\n     * @dev onlyIssuer to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\n     * per fee period so we know to allocate the correct proportions of fees and rewards per period\n     */\n    function appendAccountIssuanceRecord(address account, uint debtRatio, uint debtEntryIndex) external onlyIssuer {\n        feePoolState().appendAccountIssuanceRecord(\n            account,\n            debtRatio,\n            debtEntryIndex,\n            _recentFeePeriodsStorage(0).startingDebtIndex\n        );\n\n        emitIssuanceDebtRatioEntry(account, debtRatio, debtEntryIndex, _recentFeePeriodsStorage(0).startingDebtIndex);\n    }\n\n    /**\n     * @notice Set the exchange fee, anywhere within the range 0-10%.\n     * @dev The fee rate is in decimal format, with UNIT being the value of 100%.\n     */\n    function setExchangeFeeRate(uint _exchangeFeeRate) external optionalProxy_onlyOwner {\n        require(_exchangeFeeRate < MAX_EXCHANGE_FEE_RATE, \"rate < MAX_EXCHANGE_FEE_RATE\");\n        exchangeFeeRate = _exchangeFeeRate;\n    }\n\n    /**\n     * @notice Set the fee period duration\n     */\n    function setFeePeriodDuration(uint _feePeriodDuration) external optionalProxy_onlyOwner {\n        require(_feePeriodDuration >= MIN_FEE_PERIOD_DURATION, \"value < MIN_FEE_PERIOD_DURATION\");\n        require(_feePeriodDuration <= MAX_FEE_PERIOD_DURATION, \"value > MAX_FEE_PERIOD_DURATION\");\n\n        feePeriodDuration = _feePeriodDuration;\n\n        emitFeePeriodDurationUpdated(_feePeriodDuration);\n    }\n\n    function setTargetThreshold(uint _percent) external optionalProxy_onlyOwner {\n        require(_percent >= 0, \"Threshold should be positive\");\n        require(_percent <= 50, \"Threshold too high\");\n        targetThreshold = _percent.mul(SafeDecimalMath.unit()).div(100);\n    }\n\n    /**\n     * @notice The Exchanger contract informs us when fees are paid.\n     * @param amount susd amount in fees being paid.\n     */\n    function recordFeePaid(uint amount) external onlyExchangerOrSynth {\n        // Keep track off fees in sUSD in the open fee pool period.\n        _recentFeePeriodsStorage(0).feesToDistribute = _recentFeePeriodsStorage(0).feesToDistribute.add(amount);\n    }\n\n    /**\n     * @notice The RewardsDistribution contract informs us how many SNX rewards are sent to RewardEscrow to be claimed.\n     */\n    function setRewardsToDistribute(uint amount) external {\n        address rewardsAuthority = rewardsDistribution();\n        require(messageSender == rewardsAuthority || msg.sender == rewardsAuthority, \"Caller is not rewardsAuthority\");\n        // Add the amount of SNX rewards to distribute on top of any rolling unclaimed amount\n        _recentFeePeriodsStorage(0).rewardsToDistribute = _recentFeePeriodsStorage(0).rewardsToDistribute.add(amount);\n    }\n\n    /**\n     * @notice Close the current fee period and start a new one.\n     */\n    function closeCurrentFeePeriod() external {\n        require(_recentFeePeriodsStorage(0).startTime <= (now - feePeriodDuration), \"Too early to close fee period\");\n\n        systemStatus().requireIssuanceActive();\n\n        // Note:  when FEE_PERIOD_LENGTH = 2, periodClosing is the current period & periodToRollover is the last open claimable period\n        FeePeriod storage periodClosing = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2);\n        FeePeriod storage periodToRollover = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 1);\n\n        // Any unclaimed fees from the last period in the array roll back one period.\n        // Because of the subtraction here, they're effectively proportionally redistributed to those who\n        // have already claimed from the old period, available in the new period.\n        // The subtraction is important so we don't create a ticking time bomb of an ever growing\n        // number of fees that can never decrease and will eventually overflow at the end of the fee pool.\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).feesToDistribute = periodToRollover\n            .feesToDistribute\n            .sub(periodToRollover.feesClaimed)\n            .add(periodClosing.feesToDistribute);\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).rewardsToDistribute = periodToRollover\n            .rewardsToDistribute\n            .sub(periodToRollover.rewardsClaimed)\n            .add(periodClosing.rewardsToDistribute);\n\n        // Shift the previous fee periods across to make room for the new one.\n        _currentFeePeriod = _currentFeePeriod.add(FEE_PERIOD_LENGTH).sub(1).mod(FEE_PERIOD_LENGTH);\n\n        // Clear the first element of the array to make sure we don't have any stale values.\n        delete _recentFeePeriods[_currentFeePeriod];\n\n        // Open up the new fee period.\n        // Increment periodId from the recent closed period feePeriodId\n        _recentFeePeriodsStorage(0).feePeriodId = uint64(uint256(_recentFeePeriodsStorage(1).feePeriodId).add(1));\n        _recentFeePeriodsStorage(0).startingDebtIndex = uint64(synthetixState().debtLedgerLength());\n        _recentFeePeriodsStorage(0).startTime = uint64(now);\n\n        emitFeePeriodClosed(_recentFeePeriodsStorage(1).feePeriodId);\n    }\n\n    /**\n     * @notice Claim fees for last period when available or not already withdrawn.\n     */\n    function claimFees() external optionalProxy returns (bool) {\n        return _claimFees(messageSender);\n    }\n\n    /**\n     * @notice Delegated claimFees(). Call from the deletegated address\n     * and the fees will be sent to the claimingForAddress.\n     * approveClaimOnBehalf() must be called first to approve the deletage address\n     * @param claimingForAddress The account you are claiming fees for\n     */\n    function claimOnBehalf(address claimingForAddress) external optionalProxy returns (bool) {\n        require(delegateApprovals().canClaimFor(claimingForAddress, messageSender), \"Not approved to claim on behalf\");\n\n        return _claimFees(claimingForAddress);\n    }\n\n    function _claimFees(address claimingAddress) internal returns (bool) {\n        systemStatus().requireIssuanceActive();\n\n        uint rewardsPaid = 0;\n        uint feesPaid = 0;\n        uint availableFees;\n        uint availableRewards;\n\n        // Address won't be able to claim fees if it is too far below the target c-ratio.\n        // It will need to burn synths then try claiming again.\n        require(isFeesClaimable(claimingAddress), \"C-Ratio below penalty threshold\");\n\n        // Get the claimingAddress available fees and rewards\n        (availableFees, availableRewards) = feesAvailable(claimingAddress);\n\n        require(\n            availableFees > 0 || availableRewards > 0,\n            \"No fees or rewards available for period, or fees already claimed\"\n        );\n\n        // Record the address has claimed for this period\n        _setLastFeeWithdrawal(claimingAddress, _recentFeePeriodsStorage(1).feePeriodId);\n\n        if (availableFees > 0) {\n            // Record the fee payment in our recentFeePeriods\n            feesPaid = _recordFeePayment(availableFees);\n\n            // Send them their fees\n            _payFees(claimingAddress, feesPaid);\n        }\n\n        if (availableRewards > 0) {\n            // Record the reward payment in our recentFeePeriods\n            rewardsPaid = _recordRewardPayment(availableRewards);\n\n            // Send them their rewards\n            _payRewards(claimingAddress, rewardsPaid);\n        }\n\n        emitFeesClaimed(claimingAddress, feesPaid, rewardsPaid);\n\n        return true;\n    }\n\n    /**\n     * @notice Admin function to import the FeePeriod data from the previous contract\n     */\n    function importFeePeriod(\n        uint feePeriodIndex,\n        uint feePeriodId,\n        uint startingDebtIndex,\n        uint startTime,\n        uint feesToDistribute,\n        uint feesClaimed,\n        uint rewardsToDistribute,\n        uint rewardsClaimed\n    ) public optionalProxy_onlyOwner onlyDuringSetup {\n        require(startingDebtIndex <= synthetixState().debtLedgerLength(), \"Cannot import bad data\");\n\n        _recentFeePeriods[_currentFeePeriod.add(feePeriodIndex).mod(FEE_PERIOD_LENGTH)] = FeePeriod({\n            feePeriodId: uint64(feePeriodId),\n            startingDebtIndex: uint64(startingDebtIndex),\n            startTime: uint64(startTime),\n            feesToDistribute: feesToDistribute,\n            feesClaimed: feesClaimed,\n            rewardsToDistribute: rewardsToDistribute,\n            rewardsClaimed: rewardsClaimed\n        });\n    }\n\n    /**\n     * @notice Owner can escrow SNX. Owner to send the tokens to the RewardEscrow\n     * @param account Address to escrow tokens for\n     * @param quantity Amount of tokens to escrow\n     */\n    function appendVestingEntry(address account, uint quantity) public optionalProxy_onlyOwner {\n        // Transfer SNX from messageSender to the Reward Escrow\n        synthetix().transferFrom(messageSender, rewardEscrow(), quantity);\n\n        // Create Vesting Entry\n        rewardEscrow().appendVestingEntry(account, quantity);\n    }\n\n    /**\n     * @notice Record the fee payment in our recentFeePeriods.\n     * @param sUSDAmount The amount of fees priced in sUSD.\n     */\n    function _recordFeePayment(uint sUSDAmount) internal returns (uint) {\n        // Don't assign to the parameter\n        uint remainingToAllocate = sUSDAmount;\n\n        uint feesPaid;\n        // Start at the oldest period and record the amount, moving to newer periods\n        // until we've exhausted the amount.\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\n        for (uint i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\n            uint feesAlreadyClaimed = _recentFeePeriodsStorage(i).feesClaimed;\n            uint delta = _recentFeePeriodsStorage(i).feesToDistribute.sub(feesAlreadyClaimed);\n\n            if (delta > 0) {\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\n                uint amountInPeriod = delta < remainingToAllocate ? delta : remainingToAllocate;\n\n                _recentFeePeriodsStorage(i).feesClaimed = feesAlreadyClaimed.add(amountInPeriod);\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\n                feesPaid = feesPaid.add(amountInPeriod);\n\n                // No need to continue iterating if we've recorded the whole amount;\n                if (remainingToAllocate == 0) return feesPaid;\n\n                // We've exhausted feePeriods to distribute and no fees remain in last period\n                // User last to claim would in this scenario have their remainder slashed\n                if (i == 0 && remainingToAllocate > 0) {\n                    remainingToAllocate = 0;\n                }\n            }\n        }\n\n        return feesPaid;\n    }\n\n    /**\n     * @notice Record the reward payment in our recentFeePeriods.\n     * @param snxAmount The amount of SNX tokens.\n     */\n    function _recordRewardPayment(uint snxAmount) internal returns (uint) {\n        // Don't assign to the parameter\n        uint remainingToAllocate = snxAmount;\n\n        uint rewardPaid;\n\n        // Start at the oldest period and record the amount, moving to newer periods\n        // until we've exhausted the amount.\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\n        for (uint i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\n            uint toDistribute = _recentFeePeriodsStorage(i).rewardsToDistribute.sub(\n                _recentFeePeriodsStorage(i).rewardsClaimed\n            );\n\n            if (toDistribute > 0) {\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\n                uint amountInPeriod = toDistribute < remainingToAllocate ? toDistribute : remainingToAllocate;\n\n                _recentFeePeriodsStorage(i).rewardsClaimed = _recentFeePeriodsStorage(i).rewardsClaimed.add(amountInPeriod);\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\n                rewardPaid = rewardPaid.add(amountInPeriod);\n\n                // No need to continue iterating if we've recorded the whole amount;\n                if (remainingToAllocate == 0) return rewardPaid;\n\n                // We've exhausted feePeriods to distribute and no rewards remain in last period\n                // User last to claim would in this scenario have their remainder slashed\n                // due to rounding up of PreciseDecimal\n                if (i == 0 && remainingToAllocate > 0) {\n                    remainingToAllocate = 0;\n                }\n            }\n        }\n        return rewardPaid;\n    }\n\n    /**\n     * @notice Send the fees to claiming address.\n     * @param account The address to send the fees to.\n     * @param sUSDAmount The amount of fees priced in sUSD.\n     */\n    function _payFees(address account, uint sUSDAmount) internal notFeeAddress(account) {\n        // Checks not really possible but rather gaurds for the internal code.\n        require(\n            account != address(0) ||\n                account != address(this) ||\n                account != address(proxy) ||\n                account != address(synthetix()),\n            \"Can't send fees to this address\"\n        );\n\n        // Grab the sUSD Synth\n        Synth sUSDSynth = synthetix().synths(sUSD);\n\n        // NOTE: we do not control the FEE_ADDRESS so it is not possible to do an\n        // ERC20.approve() transaction to allow this feePool to call ERC20.transferFrom\n        // to the accounts address\n\n        // Burn the source amount\n        sUSDSynth.burn(FEE_ADDRESS, sUSDAmount);\n\n        // Mint their new synths\n        sUSDSynth.issue(account, sUSDAmount);\n    }\n\n    /**\n     * @notice Send the rewards to claiming address - will be locked in rewardEscrow.\n     * @param account The address to send the fees to.\n     * @param snxAmount The amount of SNX.\n     */\n    function _payRewards(address account, uint snxAmount) internal notFeeAddress(account) {\n        require(account != address(0), \"Account can't be 0\");\n        require(account != address(this), \"Can't send rewards to fee pool\");\n        require(account != address(proxy), \"Can't send rewards to proxy\");\n        require(account != address(synthetix()), \"Can't send rewards to synthetix\");\n\n        // Record vesting entry for claiming address and amount\n        // SNX already minted to rewardEscrow balance\n        rewardEscrow().appendVestingEntry(account, snxAmount);\n    }\n\n    /**\n     * @notice The amount the recipient will receive if you send a certain number of tokens.\n     * function used by Depot and stub will return value amount inputted.\n     * @param value The amount of tokens you intend to send.\n     */\n    function amountReceivedFromTransfer(uint value) external pure returns (uint) {\n        return value;\n    }\n\n    /**\n     * @notice Calculate the fee charged on top of a value being sent via an exchange\n     * @return Return the fee charged\n     */\n    function exchangeFeeIncurred(uint value) public view returns (uint) {\n        return value.multiplyDecimal(exchangeFeeRate);\n\n        // Exchanges less than the reciprocal of exchangeFeeRate should be completely eaten up by fees.\n        // This is on the basis that exchanges less than this value will result in a nil fee.\n        // Probably too insignificant to worry about, but the following code will achieve it.\n        //      if (fee == 0 && exchangeFeeRate != 0) {\n        //          return _value;\n        //      }\n        //      return fee;\n    }\n\n    /**\n     * @notice The amount the recipient will receive if you are performing an exchange and the\n     * destination currency will be worth a certain number of tokens.\n     * @param value The amount of destination currency tokens they received after the exchange.\n     */\n    function amountReceivedFromExchange(uint value) external view returns (uint) {\n        return value.multiplyDecimal(SafeDecimalMath.unit().sub(exchangeFeeRate));\n    }\n\n    /**\n     * @notice The total fees available in the system to be withdrawnn in sUSD\n     */\n    function totalFeesAvailable() external view returns (uint) {\n        uint totalFees = 0;\n\n        // Fees in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(_recentFeePeriodsStorage(i).feesToDistribute);\n            totalFees = totalFees.sub(_recentFeePeriodsStorage(i).feesClaimed);\n        }\n\n        return totalFees;\n    }\n\n    /**\n     * @notice The total SNX rewards available in the system to be withdrawn\n     */\n    function totalRewardsAvailable() external view returns (uint) {\n        uint totalRewards = 0;\n\n        // Rewards in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalRewards = totalRewards.add(_recentFeePeriodsStorage(i).rewardsToDistribute);\n            totalRewards = totalRewards.sub(_recentFeePeriodsStorage(i).rewardsClaimed);\n        }\n\n        return totalRewards;\n    }\n\n    /**\n     * @notice The fees available to be withdrawn by a specific account, priced in sUSD\n     * @dev Returns two amounts, one for fees and one for SNX rewards\n     */\n    function feesAvailable(address account) public view returns (uint, uint) {\n        // Add up the fees\n        uint[2][FEE_PERIOD_LENGTH] memory userFees = feesByPeriod(account);\n\n        uint totalFees = 0;\n        uint totalRewards = 0;\n\n        // Fees & Rewards in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(userFees[i][0]);\n            totalRewards = totalRewards.add(userFees[i][1]);\n        }\n\n        // And convert totalFees to sUSD\n        // Return totalRewards as is in SNX amount\n        return (totalFees, totalRewards);\n    }\n\n    /**\n     * @notice Check if a particular address is able to claim fees right now\n     * @param account The address you want to query for\n     */\n    function isFeesClaimable(address account) public view returns (bool) {\n        // Threshold is calculated from ratio % above the target ratio (issuanceRatio).\n        //  0  <  10%:   Claimable\n        // 10% > above:  Unable to claim\n        uint ratio = synthetix().collateralisationRatio(account);\n        uint targetRatio = synthetixState().issuanceRatio();\n\n        // Claimable if collateral ratio below target ratio\n        if (ratio < targetRatio) {\n            return true;\n        }\n\n        // Calculate the threshold for collateral ratio before fees can't be claimed.\n        uint ratio_threshold = targetRatio.multiplyDecimal(SafeDecimalMath.unit().add(targetThreshold));\n\n        // Not claimable if collateral ratio above threshold\n        if (ratio > ratio_threshold) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Calculates fees by period for an account, priced in sUSD\n     * @param account The address you want to query the fees for\n     */\n    function feesByPeriod(address account) public view returns (uint[2][FEE_PERIOD_LENGTH] memory results) {\n        // What's the user's debt entry index and the debt they owe to the system at current feePeriod\n        uint userOwnershipPercentage;\n        uint debtEntryIndex;\n        FeePoolState _feePoolState = feePoolState();\n\n        (userOwnershipPercentage, debtEntryIndex) = _feePoolState.getAccountsDebtEntry(account, 0);\n\n        // If they don't have any debt ownership and they never minted, they don't have any fees.\n        // User ownership can reduce to 0 if user burns all synths,\n        // however they could have fees applicable for periods they had minted in before so we check debtEntryIndex.\n        if (debtEntryIndex == 0 && userOwnershipPercentage == 0) return;\n\n        // The [0] fee period is not yet ready to claim, but it is a fee period that they can have\n        // fees owing for, so we need to report on it anyway.\n        uint feesFromPeriod;\n        uint rewardsFromPeriod;\n        (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(0, userOwnershipPercentage, debtEntryIndex);\n\n        results[0][0] = feesFromPeriod;\n        results[0][1] = rewardsFromPeriod;\n\n        // Retrieve user's last fee claim by periodId\n        uint lastFeeWithdrawal = getLastFeeWithdrawal(account);\n\n        // Go through our fee periods from the oldest feePeriod[FEE_PERIOD_LENGTH - 1] and figure out what we owe them.\n        // Condition checks for periods > 0\n        for (uint i = FEE_PERIOD_LENGTH - 1; i > 0; i--) {\n            uint next = i - 1;\n            uint nextPeriodStartingDebtIndex = _recentFeePeriodsStorage(next).startingDebtIndex;\n\n            // We can skip the period, as no debt minted during period (next period's startingDebtIndex is still 0)\n            if (nextPeriodStartingDebtIndex > 0 && lastFeeWithdrawal < _recentFeePeriodsStorage(i).feePeriodId) {\n                // We calculate a feePeriod's closingDebtIndex by looking at the next feePeriod's startingDebtIndex\n                // we can use the most recent issuanceData[0] for the current feePeriod\n                // else find the applicableIssuanceData for the feePeriod based on the StartingDebtIndex of the period\n                uint closingDebtIndex = uint256(nextPeriodStartingDebtIndex).sub(1);\n\n                // Gas optimisation - to reuse debtEntryIndex if found new applicable one\n                // if applicable is 0,0 (none found) we keep most recent one from issuanceData[0]\n                // return if userOwnershipPercentage = 0)\n                (userOwnershipPercentage, debtEntryIndex) = _feePoolState.applicableIssuanceData(account, closingDebtIndex);\n\n                (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(i, userOwnershipPercentage, debtEntryIndex);\n\n                results[i][0] = feesFromPeriod;\n                results[i][1] = rewardsFromPeriod;\n            }\n        }\n    }\n\n    /**\n     * @notice ownershipPercentage is a high precision decimals uint based on\n     * wallet's debtPercentage. Gives a precise amount of the feesToDistribute\n     * for fees in the period. Precision factor is removed before results are\n     * returned.\n     * @dev The reported fees owing for the current period [0] are just a\n     * running balance until the fee period closes\n     */\n    function _feesAndRewardsFromPeriod(uint period, uint ownershipPercentage, uint debtEntryIndex)\n        internal\n        view\n        returns (uint, uint)\n    {\n        // If it's zero, they haven't issued, and they have no fees OR rewards.\n        if (ownershipPercentage == 0) return (0, 0);\n\n        uint debtOwnershipForPeriod = ownershipPercentage;\n\n        // If period has closed we want to calculate debtPercentage for the period\n        if (period > 0) {\n            uint closingDebtIndex = uint256(_recentFeePeriodsStorage(period - 1).startingDebtIndex).sub(1);\n            debtOwnershipForPeriod = _effectiveDebtRatioForPeriod(closingDebtIndex, ownershipPercentage, debtEntryIndex);\n        }\n\n        // Calculate their percentage of the fees / rewards in this period\n        // This is a high precision integer.\n        uint feesFromPeriod = _recentFeePeriodsStorage(period).feesToDistribute.multiplyDecimal(debtOwnershipForPeriod);\n\n        uint rewardsFromPeriod = _recentFeePeriodsStorage(period).rewardsToDistribute.multiplyDecimal(\n            debtOwnershipForPeriod\n        );\n\n        return (feesFromPeriod.preciseDecimalToDecimal(), rewardsFromPeriod.preciseDecimalToDecimal());\n    }\n\n    function _effectiveDebtRatioForPeriod(uint closingDebtIndex, uint ownershipPercentage, uint debtEntryIndex)\n        internal\n        view\n        returns (uint)\n    {\n        // Figure out their global debt percentage delta at end of fee Period.\n        // This is a high precision integer.\n        ISynthetixState _synthetixState = synthetixState();\n        uint feePeriodDebtOwnership = _synthetixState\n            .debtLedger(closingDebtIndex)\n            .divideDecimalRoundPrecise(_synthetixState.debtLedger(debtEntryIndex))\n            .multiplyDecimalRoundPrecise(ownershipPercentage);\n\n        return feePeriodDebtOwnership;\n    }\n\n    function effectiveDebtRatioForPeriod(address account, uint period) external view returns (uint) {\n        require(period != 0, \"Current period is not closed yet\");\n        require(period < FEE_PERIOD_LENGTH, \"Exceeds the FEE_PERIOD_LENGTH\");\n\n        // If the period being checked is uninitialised then return 0. This is only at the start of the system.\n        if (_recentFeePeriodsStorage(period - 1).startingDebtIndex == 0) return 0;\n\n        uint closingDebtIndex = uint256(_recentFeePeriodsStorage(period - 1).startingDebtIndex).sub(1);\n\n        uint ownershipPercentage;\n        uint debtEntryIndex;\n        (ownershipPercentage, debtEntryIndex) = feePoolState().applicableIssuanceData(account, closingDebtIndex);\n\n        // internal function will check closingDebtIndex has corresponding debtLedger entry\n        return _effectiveDebtRatioForPeriod(closingDebtIndex, ownershipPercentage, debtEntryIndex);\n    }\n\n    /**\n     * @notice Get the feePeriodID of the last claim this account made\n     * @param _claimingAddress account to check the last fee period ID claim for\n     * @return uint of the feePeriodID this account last claimed\n     */\n    function getLastFeeWithdrawal(address _claimingAddress) public view returns (uint) {\n        return feePoolEternalStorage().getUIntValue(keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, _claimingAddress)));\n    }\n\n    /**\n     * @notice Calculate the collateral ratio before user is blocked from claiming.\n     */\n    function getPenaltyThresholdRatio() public view returns (uint) {\n        uint targetRatio = synthetixState().issuanceRatio();\n\n        return targetRatio.multiplyDecimal(SafeDecimalMath.unit().add(targetThreshold));\n    }\n\n    /**\n     * @notice Set the feePeriodID of the last claim this account made\n     * @param _claimingAddress account to set the last feePeriodID claim for\n     * @param _feePeriodID the feePeriodID this account claimed fees for\n     */\n    function _setLastFeeWithdrawal(address _claimingAddress, uint _feePeriodID) internal {\n        feePoolEternalStorage().setUIntValue(\n            keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, _claimingAddress)),\n            _feePeriodID\n        );\n    }\n\n    /* ========== Modifiers ========== */\n    modifier onlyExchangerOrSynth {\n        bool isExchanger = msg.sender == address(exchanger());\n        bool isSynth = synthetix().synthsByAddress(msg.sender) != bytes32(0);\n\n        require(isExchanger || isSynth, \"Only Exchanger, Synths Authorised\");\n        _;\n    }\n\n    modifier onlyIssuer {\n        require(msg.sender == address(issuer()), \"FeePool: Only Issuer Authorised\");\n        _;\n    }\n\n    modifier notFeeAddress(address account) {\n        require(account != FEE_ADDRESS, \"Fee address not allowed\");\n        _;\n    }\n\n    /* ========== Proxy Events ========== */\n\n    event IssuanceDebtRatioEntry(\n        address indexed account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint feePeriodStartingDebtIndex\n    );\n    bytes32 private constant ISSUANCEDEBTRATIOENTRY_SIG = keccak256(\n        \"IssuanceDebtRatioEntry(address,uint256,uint256,uint256)\"\n    );\n\n    function emitIssuanceDebtRatioEntry(\n        address account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint feePeriodStartingDebtIndex\n    ) internal {\n        proxy._emit(\n            abi.encode(debtRatio, debtEntryIndex, feePeriodStartingDebtIndex),\n            2,\n            ISSUANCEDEBTRATIOENTRY_SIG,\n            bytes32(account),\n            0,\n            0\n        );\n    }\n\n    event ExchangeFeeUpdated(uint newFeeRate);\n    bytes32 private constant EXCHANGEFEEUPDATED_SIG = keccak256(\"ExchangeFeeUpdated(uint256)\");\n\n    function emitExchangeFeeUpdated(uint newFeeRate) internal {\n        proxy._emit(abi.encode(newFeeRate), 1, EXCHANGEFEEUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodDurationUpdated(uint newFeePeriodDuration);\n    bytes32 private constant FEEPERIODDURATIONUPDATED_SIG = keccak256(\"FeePeriodDurationUpdated(uint256)\");\n\n    function emitFeePeriodDurationUpdated(uint newFeePeriodDuration) internal {\n        proxy._emit(abi.encode(newFeePeriodDuration), 1, FEEPERIODDURATIONUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodClosed(uint feePeriodId);\n    bytes32 private constant FEEPERIODCLOSED_SIG = keccak256(\"FeePeriodClosed(uint256)\");\n\n    function emitFeePeriodClosed(uint feePeriodId) internal {\n        proxy._emit(abi.encode(feePeriodId), 1, FEEPERIODCLOSED_SIG, 0, 0, 0);\n    }\n\n    event FeesClaimed(address account, uint sUSDAmount, uint snxRewards);\n    bytes32 private constant FEESCLAIMED_SIG = keccak256(\"FeesClaimed(address,uint256,uint256)\");\n\n    function emitFeesClaimed(address account, uint sUSDAmount, uint snxRewards) internal {\n        proxy._emit(abi.encode(account, sUSDAmount, snxRewards), 1, FEESCLAIMED_SIG, 0, 0, 0);\n    }\n}\n\n\n    ","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_feePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"setFeePeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimingAddress\",\"type\":\"address\"}],\"name\":\"getLastFeeWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"effectiveDebtRatioForPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePeriodDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordFeePaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTargetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesByPeriod\",\"outputs\":[{\"name\":\"results\",\"type\":\"uint256[2][2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolverAndSyncCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCurrentFeePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"recentFeePeriods\",\"outputs\":[{\"name\":\"feePeriodId\",\"type\":\"uint64\"},{\"name\":\"startingDebtIndex\",\"type\":\"uint64\"},{\"name\":\"startTime\",\"type\":\"uint64\"},{\"name\":\"feesToDistribute\",\"type\":\"uint256\"},{\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFeesAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeesClaimable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"isResolverCached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimingForAddress\",\"type\":\"address\"}],\"name\":\"claimOnBehalf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"name\":\"debtEntryIndex\",\"type\":\"uint256\"}],\"name\":\"appendAccountIssuanceRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResolverAddressesRequired\",\"outputs\":[{\"name\":\"addressesRequired\",\"type\":\"bytes32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPenaltyThresholdRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feePeriodIndex\",\"type\":\"uint256\"},{\"name\":\"feePeriodId\",\"type\":\"uint256\"},{\"name\":\"startingDebtIndex\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"feesToDistribute\",\"type\":\"uint256\"},{\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"name\":\"importFeePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"appendVestingEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountReceivedFromTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"exchangeFeeIncurred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERIOD_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FEE_PERIOD_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountReceivedFromExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADDRESSES_FROM_RESOLVER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE_PERIOD_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EXCHANGE_FEE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsToDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_exchangeFeeRate\",\"type\":\"uint256\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"debtEntryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feePeriodStartingDebtIndex\",\"type\":\"uint256\"}],\"name\":\"IssuanceDebtRatioEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFeePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"FeePeriodDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feePeriodId\",\"type\":\"uint256\"}],\"name\":\"FeePeriodClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snxRewards\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"FeePool","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"000000000000000000000000b440dd674e1243644791a4adfe3a2abb0a92d309000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe000000000000000000000000000000000000000000000000000aa87bee538000000000000000000000000000fbb6526ed92da8915d4843a86166020d0b7baad0","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","SwarmSource":""}]}