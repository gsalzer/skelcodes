{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0 <0.6.0;\r\n\r\ncontract EtherSwap {\r\n    struct Swap {\r\n        uint256 amount;\r\n\r\n        address payable claimAddress;\r\n        address payable refundAddress;\r\n\r\n        uint256 timelock;\r\n\r\n        // True if the swap is pending; false if it was claimed or refunded\r\n        bool pending;\r\n    }\r\n\r\n    mapping (bytes32 => Swap) private swaps;\r\n\r\n    event Claim(bytes32 _preimageHash);\r\n    event Creation(bytes32 _preimageHash);\r\n    event Refund(bytes32 _preimageHash);\r\n\r\n    modifier onlyPendingSwaps(bytes32 _preimageHash) {\r\n        require(swaps[_preimageHash].pending == true, \"there is no pending swap with this preimage hash\");\r\n        _;\r\n    }\r\n\r\n    function create(bytes32 _preimageHash, address payable _claimAddress, uint256 _timelock) external payable {\r\n        require(msg.value > 0, \"the amount must not be zero\");\r\n        require(swaps[_preimageHash].amount == 0, \"a swap with this preimage hash exists already\");\r\n\r\n        // Add the created swap to the map\r\n        swaps[_preimageHash] = Swap({\r\n            amount: msg.value,\r\n            claimAddress: _claimAddress,\r\n            refundAddress: msg.sender,\r\n            timelock: _timelock,\r\n            pending: true\r\n        });\r\n\r\n        // Emit an event for the swap creation\r\n        emit Creation(_preimageHash);\r\n    }\r\n\r\n    function claim(bytes32 _preimageHash, bytes calldata _preimage) external onlyPendingSwaps(_preimageHash) {\r\n        require(_preimageHash == sha256(_preimage), \"the preimage does not correspond the provided hash\");\r\n\r\n        swaps[_preimageHash].pending = false;\r\n        Swap memory swap = swaps[_preimageHash];\r\n\r\n        // Transfer the Ether to the recipient\r\n        swap.claimAddress.transfer(swap.amount);\r\n\r\n        // Emit an event for the successful claim\r\n        emit Claim(_preimageHash);\r\n    }\r\n\r\n    function refund(bytes32 _preimageHash) external onlyPendingSwaps(_preimageHash) {\r\n        require(swaps[_preimageHash].timelock <= block.timestamp, \"swap has not timed out yet\");\r\n\r\n        swaps[_preimageHash].pending = false;\r\n        Swap memory swap = swaps[_preimageHash];\r\n\r\n        // Transfer the Ether back to the initial sender\r\n        swap.refundAddress.transfer(swap.amount);\r\n\r\n        // Emit an event for the refund\r\n        emit Refund(_preimageHash);\r\n    }\r\n\r\n    function getSwapInfo(bytes32 _preimageHash) external view returns (\r\n        uint256 amount,\r\n        address claimAddress,\r\n        address refundAddress,\r\n        uint256 timelock,\r\n        bool pending\r\n    ) {\r\n        Swap memory swap = swaps[_preimageHash];\r\n        return (swap.amount, swap.claimAddress, swap.refundAddress, swap.timelock, swap.pending);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"}],\"name\":\"Creation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_claimAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"}],\"name\":\"getSwapInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_preimageHash\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtherSwap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b8afd8a84a0d75aabd21b0b2cdb2c7a997b8d9515f03fa03253e66f1db266988"}]}