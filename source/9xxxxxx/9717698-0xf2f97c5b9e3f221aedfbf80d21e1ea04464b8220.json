{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Token {\r\n  function transferFrom(address from, address to, uint value);\r\n  function transfer(address recipient, uint256 amount);\r\n}\r\n\r\ncontract Stats {\r\n  function getDay( uint128 day) public view returns (uint);\r\n}\r\n\r\n\r\ncontract NcovDeadPool  {\r\n    struct Bet {\r\n       uint256 amount;\r\n       uint128 day;\r\n       uint256 infections;\r\n    }\r\n    Stats statsc = Stats(0x8413746B162795eFf7d3C8a90e32B8921413b802);\r\n    function abssub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a - b;\r\n        return c >= 0 ? c : -c;\r\n    }\r\n    ERC20Token tok = ERC20Token(0x10Ef64cb79Fd4d75d4Aa7e8502d95C42124e434b);\r\n    mapping(address => Bet) public bets;\r\n    function bet(uint256 amount, uint128 day, uint256 infections) public {\r\n        require(bets[msg.sender].amount == 0, \"Address already made a bet\");\r\n        require(amount <= 50000000000000000000000 && amount >= 0, \"Amount must be between 0 and 50k\");\r\n        require(statsc.getDay(day) == 0, \"Past dates not allowed\");  \r\n        tok.transferFrom(msg.sender, address(this), amount);\r\n        bets[msg.sender] = Bet({amount:amount, day:day, infections:infections});\r\n}\r\n    function reward(uint256 amount) internal {\r\n        bets[msg.sender] = Bet({amount:0, day:0, infections:0});\r\n        tok.transfer(msg.sender, amount);\r\n    }\r\n    function claim() public {\r\n        require(bets[msg.sender].amount > 0, \"No bet found\");\r\n        uint resinf = statsc.getDay(bets[msg.sender].day);  \r\n        require(resinf > 0, \"No burn happened yet\");\r\n        uint myinf = bets[msg.sender].infections;\r\n        uint diffinf = abssub(resinf, myinf);\r\n        uint myamount = bets[msg.sender].amount;\r\n        if (diffinf <= 50000000000000000000) {\r\n            reward(myamount*3);\r\n        } else if (diffinf <= 80000000000000000000) {\r\n            reward(myamount*2);\r\n        } else if (diffinf <= 200000000000000000000) {\r\n            reward(myamount*3/2);\r\n        } else if (diffinf <= 300000000000000000000) {\r\n            reward(myamount*13/10);\r\n        } else if (diffinf <= 400000000000000000000) {\r\n            reward(myamount*6/5);\r\n        } else if (diffinf <= 500000000000000000000) {\r\n            reward(myamount*11/10);\r\n        } else {\r\n            bets[msg.sender] = Bet({amount:0, day:0, infections:0});\r\n        }\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint128\"},{\"name\":\"infections\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint128\"},{\"name\":\"infections\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NcovDeadPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0d4b2f5e91005ab6a1943c185d8c7620858283298fbb0eb3fabd30a58686d0e6"}]}