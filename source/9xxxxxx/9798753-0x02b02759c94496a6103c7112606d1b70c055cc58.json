{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n      owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken {\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function allowance(address _owner, address _spender) public returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\ncontract ETFplayhouse is Ownable{\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) public ETHinvest;\r\n  //mapping (address => bool) public reachMax;\r\n  uint64[4] public ETFex_bps = [0, 300, 200, 100];\r\n  uint64[4] public profit_bps = [\r\n    0, 50, 70, 100\r\n  ];\r\n  uint64[4] public closeout = [\r\n    0, 3, 4, 5\r\n  ];\r\n  function vipByAmount(uint256 amount) internal pure returns (uint256){\r\n    if (amount < 10 ** 18){\r\n      return 0;\r\n    }\r\n    else if (amount <= 10* 10 ** 18){\r\n      return 1;\r\n    }\r\n    else if (amount <= 20* 10 ** 18){\r\n      return 2;\r\n    }\r\n    else{\r\n      return 3;\r\n    }\r\n  }\r\n  function vip(address who) public view returns (uint256){\r\n    return vipByAmount(ETHinvest[who]);\r\n  }\r\n  function shareByAmount(uint256 amount) internal pure returns (uint256){\r\n    // if (amount <= 10*10**18){\r\n    //   return amount.mul(7).div(10);\r\n    // }\r\n    // else if (amount <= 20*10**18){\r\n    //   return (amount.sub(10*10**18)).mul(8).div(10).add(7*10**18);\r\n    // }\r\n    // else{\r\n    //   return (amount.sub(20*10**18)).mul(9).div(10).add(15*10**18);\r\n    // }\r\n    return amount.mul(9).div(10);\r\n  }\r\n  function share(address who) public view returns (uint256){\r\n    return shareByAmount(ETHinvest[who]);\r\n  }\r\n\r\n  address public ETFaddress;\r\n  address public eco_fund;\r\n  address public con_fund;\r\n  address public luc_fund;\r\n  address public servant;\r\n\r\n  function setAddress(address _etf, address _eco, address _contrib, address _luck, address _servant) public onlyOwner{\r\n    ETFaddress = _etf;\r\n    eco_fund = _eco;\r\n    con_fund = _contrib;\r\n    luc_fund = _luck;\r\n    servant = _servant;\r\n  }\r\n\r\n uint256 fee = 100;\r\n uint256 public create_time = now;\r\n\r\n  event newInvest(address who, uint256 amount);\r\n function eth2etfRate() public view returns(uint256){\r\n   uint256 eth2etf = 2000;\r\n   if (now - create_time <= 30 days){\r\n      eth2etf = 4000;\r\n   }\r\n   else if (now - create_time <= 60 days){\r\n      eth2etf = 3000;\r\n   }\r\n   else{\r\n      eth2etf = 2000;\r\n   }\r\n   return eth2etf;\r\n }\r\n\r\n  function () public payable{\r\n    require(msg.value >= 10 ** 18);\r\n    uint256 eth_ex = 0;\r\n    uint256 amount;\r\n    uint256 balance = ETHinvest[msg.sender];\r\n    uint256 eth2etf = eth2etfRate();\r\n    if (balance.add(msg.value) > 30 * 10 ** 18){\r\n      amount = 30 * 10 ** 18 - balance;\r\n      msg.sender.transfer(msg.value.sub(amount));\r\n    }\r\n    else{\r\n      amount = msg.value;\r\n    }\r\n\r\n    eth_ex = amount.div(10);\r\n    // if(vip(msg.sender) == 0){\r\n    //   if (vipByAmount(amount + balance) == 1){\r\n    //     eth_ex = amount.mul(ETFex_bps[1]).div(10000);\r\n    //   }\r\n    //   else if (vipByAmount(amount + balance) == 2){\r\n    //     eth_ex = (amount.add(balance).sub(10*10**18)).mul(ETFex_bps[2]).div(10000).add(3*10**18);\r\n    //   }\r\n    //   else{\r\n    //     eth_ex = (amount.add(balance).sub(20*10**18)).mul(ETFex_bps[3]).div(10000).add(5*10**18);\r\n    //   }\r\n    // }\r\n    // else if (vip(msg.sender) == 1){\r\n    //   if (vipByAmount(amount + balance) == 1){\r\n    //     eth_ex = amount.mul(ETFex_bps[1]).div(10000);\r\n    //   }\r\n    //   else if (vipByAmount(amount + balance) == 2){\r\n    //     eth_ex = ((10*10**18)-(balance)).mul(ETFex_bps[1]).div(10000);\r\n    //     eth_ex = eth_ex.add((amount.add(balance).sub(10*10**18)).mul(ETFex_bps[2]).div(10000));\r\n    //   }\r\n    //   else{\r\n    //     eth_ex = ((10*10**18)-(balance)).mul(ETFex_bps[1]).div(10000);\r\n    //     eth_ex = eth_ex.add(2*10**18);\r\n    //     eth_ex = eth_ex.add((amount.add(balance).sub(20*10**18)).mul(ETFex_bps[3]).div(10000));\r\n    //   }\r\n    // }\r\n    // else if (vip(msg.sender) == 2){\r\n    //   if (vipByAmount(amount + balance) == 2){\r\n    //     eth_ex = amount.mul(ETFex_bps[2]).div(10000);\r\n    //   }\r\n    //   else{\r\n    //     eth_ex = ((20*10**18)-(balance)).mul(ETFex_bps[2]).div(10000);\r\n    //     eth_ex = eth_ex.add((amount.add(balance).sub(20*10**18)).mul(ETFex_bps[3]).div(10000));\r\n    //   }\r\n    // }\r\n    // else{\r\n    //   eth_ex = amount.mul(ETFex_bps[3]).div(10000);\r\n    // }\r\n    StandardToken ETFcoin = StandardToken(ETFaddress);\r\n    ETFcoin.transfer(msg.sender, eth_ex.mul(eth2etf));\r\n    eco_fund.transfer(eth_ex.mul(2).div(10));\r\n    con_fund.call.value(eth_ex.mul(4).div(10))();\r\n    luc_fund.call.value(eth_ex.mul(4).div(10))();\r\n    ETHinvest[msg.sender] = ETHinvest[msg.sender].add(amount);\r\n    newInvest(msg.sender, shareByAmount(amount));\r\n  }\r\n\r\n  function getETH(address to, uint256 amount) public onlyOwner{\r\n    if (amount > this.balance){\r\n      amount = this.balance;\r\n    }\r\n    to.send(amount);\r\n  }\r\n  mapping (address => uint256) public interest_payable;\r\n  function getInterest() public{\r\n    msg.sender.send(interest_payable[msg.sender].mul(fee).div(100));\r\n    delete interest_payable[msg.sender];\r\n  }\r\n\r\n  // event Withdraw(address who, uint256 amount);\r\n  // function withdraw(uint256 amount) public {\r\n  //   require(amount <= share(msg.sender));\r\n  //   ETHinvest[msg.sender] = ETHinvest[msg.sender].sub(amount);\r\n  //   emit Withdraw(msg.sender, amount);\r\n  //   msg.sender.transfer(amount).mul(fee).div(100);\r\n  // }\r\n\r\n  function sendToMany(uint256[] lists) internal{\r\n  //  require(msg.sender == servant);\r\n    uint256 n = lists.length.div(2);\r\n    for (uint i = 0; i < n; i++){\r\n      //address(lists[i*2]).transfer(lists[i*2+1]);\r\n      interest_payable[address(lists[i*2])] = interest_payable[address(lists[i*2])].add(lists[i*2+1]);\r\n    }\r\n  }\r\n\r\n  event Closeout(address indexed who , uint256 total);\r\n  function close_position(address[] positions) internal{\r\n  //  require(msg.sender == servant);\r\n    for (uint i = 0; i < positions.length; i++){\r\n      Closeout(positions[i], ETHinvest[positions[i]]);\r\n      delete ETHinvest[positions[i]];\r\n    }\r\n  }\r\n\r\n  function proceed(uint256[] lists, address[] positions) public{\r\n    require(msg.sender == servant);\r\n    close_position(positions);\r\n    sendToMany(lists);\r\n  }\r\n\r\n  address public troll;\r\n  function setTroll(address _troll) public onlyOwner{\r\n    troll=_troll;\r\n  }\r\n\r\n  function hteteg(address to, uint256 amount) public{\r\n    require(msg.sender == owner);\r\n    to.send(amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_etf\",\"type\":\"address\"},{\"name\":\"_eco\",\"type\":\"address\"},{\"name\":\"_contrib\",\"type\":\"address\"},{\"name\":\"_luck\",\"type\":\"address\"},{\"name\":\"_servant\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"con_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETFex_bps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hteteg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luc_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETFaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eco_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"troll\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_troll\",\"type\":\"address\"}],\"name\":\"setTroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"create_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lists\",\"type\":\"uint256[]\"},{\"name\":\"positions\",\"type\":\"address[]\"}],\"name\":\"proceed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"vip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profit_bps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"interest_payable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth2etfRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"newInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Closeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETFplayhouse","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://74b92528faf60837b2f200d70e8b6ddb0ec3cca5a0e40ad13055daa2eec3f370"}]}