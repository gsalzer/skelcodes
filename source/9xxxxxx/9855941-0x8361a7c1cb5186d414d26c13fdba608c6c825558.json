{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ucifeth {\r\n    //Supply definition\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public ownerSupply;\r\n    uint256 public icoSupply;\r\n    uint256 public poolSupply;\r\n    uint256 public totalSupply;\r\n    uint256 _poolSupply = 200000000e18;\r\n    uint256 _saleSupply = 100000000e18;\r\n    uint256 _reserveSupply = 100000000e18;\r\n    uint256 public constant decimals = 18;\r\n    uint256 _totalSupply = _poolSupply + _saleSupply + _reserveSupply;\r\n    uint256 countOnPool = 0;\r\n    //Token\r\n    string _tokenName = \"Universal Crypto Investment Fund\";\r\n    string _symbol = \"UCIFETH\";\r\n    address public owner;\r\n    uint256 public price = 0.0001 ether;\r\n    uint256 public saleDate = 1586908800;\r\n    uint256 public escrow = 0;\r\n    //Addresses\r\n    address public marketing;\r\n    address public development;\r\n    //Mappings\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(uint256 => mapping(uint256 => Investor[])) public staking;\r\n    mapping(uint256 => Referral) public referral;\r\n    mapping(uint256 => mapping(uint256 => Request[])) public request;\r\n    //Events\r\n    event Transfer(address _from, address _to, uint256 _value);\r\n    //Helper\r\n    uint256 exists;\r\n    uint256 public staked;\r\n    uint256 requestExists;\r\n    uint256 count = 0;\r\n    uint256 public requestCount = 0;\r\n    //Struct\r\n    struct Investor{\r\n        address person;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        uint256 amountCredited;\r\n        bool onPool;\r\n        uint256 referralCode;\r\n        uint256 referred;\r\n    }\r\n    \r\n    struct Referral {\r\n        uint256 id;\r\n        address person;\r\n    }\r\n    \r\n    struct Request {\r\n        address person;\r\n        uint256 amount;\r\n        bool processed;\r\n    }\r\n    //Modifiers\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier Allowed(){\r\n        require(now >= saleDate);\r\n        require(now <= (saleDate + 7776000)); //90 days\r\n        _;\r\n    }\r\n\r\n    modifier buyBackAllowed(){\r\n        require(now >= (saleDate + 7776000));\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = 0x247684efe4e38861fC609d1e2E52dB80aA29f7CD;\r\n        count++;\r\n        referral[count] = Referral(count, owner);\r\n        name = _tokenName;\r\n        symbol = _symbol;\r\n        ownerSupply = _reserveSupply;\r\n        poolSupply = _poolSupply;\r\n        icoSupply = _saleSupply;\r\n        totalSupply = _totalSupply;\r\n        balanceOf[owner] = _reserveSupply;\r\n        marketing = owner;\r\n        development = owner;\r\n    }\r\n    \r\n    function changeOwner(address _new) public onlyOwner{\r\n        owner = _new;\r\n    }\r\n    \r\n    function setMarketingAddress(address _new) public onlyOwner{\r\n        marketing = _new;\r\n    }\r\n    \r\n    function setDevelopmentAddress(address _new) public onlyOwner{\r\n        development = _new;\r\n    }\r\n    \r\n    function moveIcoToPool() public onlyOwner{\r\n        require(now >= (saleDate + 7776000));\r\n            if(icoSupply > 0){\r\n                poolSupply += icoSupply;\r\n                icoSupply = 0;\r\n            }\r\n    }\r\n    \r\n    function buyToken(uint256 _amount) public payable Allowed{\r\n         uint256 amount = _amount*10**decimals;\r\n         require(amount <= icoSupply);\r\n         require(msg.value >= price);\r\n         uint256 result = _amount * price;\r\n         require(msg.value == result);\r\n         balanceOf[msg.sender] += amount;\r\n         icoSupply -= amount;\r\n         owner.transfer(result);\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        \r\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        \r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n        \r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function isOnPool(address _person) internal returns(bool) {\r\n        \r\n        for(uint256 i = 0; i < staking[1][1].length; i++){\r\n            if(staking[1][1][i].person == _person) {\r\n                exists = i;\r\n                return true;\r\n                \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function isRequest(address _person) internal returns(bool){\r\n        _person = msg.sender;\r\n        \r\n        for(uint256 i=0; i < request[1][1].length; i++){\r\n            if(request[1][1][i].person == _person){\r\n                requestExists = i;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function viewRequests() public view returns(address){\r\n        for(uint256 i = 0; i < request[1][1].length; i++){\r\n            if(request[1][1][i].processed == false ){\r\n                request[1][1][i].person;\r\n            }\r\n        }\r\n    }\r\n   \r\n   function createReferral(address _person) internal {\r\n       count += 1;\r\n        referral[count] = Referral(count, _person);\r\n   }\r\n   \r\n   function viewReferralCode() public view returns(uint256){\r\n       for(uint256 i = 1; i <= count; i++){\r\n           if(referral[i].person == msg.sender){\r\n               return referral[i].id;\r\n        \r\n           }\r\n       }\r\n      revert();\r\n   }\r\n   \r\n   function invest(uint256 _amount, uint256 _id) public {\r\n      uint256 amount = _amount*10**decimals;\r\n      require(amount >= 1);\r\n      require(msg.sender != 0);\r\n      require(balanceOf[msg.sender] >= (amount));\r\n      uint256 _timestamp = now;\r\n      address _person = msg.sender;\r\n      bool _onPool = true;\r\n      uint256 onePercent = (amount)/ 100; // 1%\r\n      uint256 investor = (amount * 96) / 100; //96% Investor\r\n      require(investor <= poolSupply);\r\n      \r\n      if(isOnPool(msg.sender) == false && (msg.sender != owner)){\r\n        require(_id > 0 && _id <= count);\r\n        createReferral(msg.sender); //Creates referral code;\r\n        staking[1][1].push(Investor(_person, _timestamp, amount, investor, _onPool, count, _id));\r\n        balanceOf[msg.sender] -= amount;\r\n        \r\n        balanceOf[referral[_id].person] += onePercent;//Referral %\r\n        balanceOf[marketing] += onePercent; //Marketing %\r\n        balanceOf[development] += onePercent; //Devs %\r\n        poolSupply += onePercent; //Pool %\r\n        poolSupply -= investor; // Algorithm\r\n        //balanceOf[msg.sender] += investor;\r\n      }\r\n      else if(msg.sender == owner && isOnPool(msg.sender) == false){\r\n        staking[1][1].push(Investor(_person, _timestamp, amount, investor, _onPool, 1, 0));\r\n        balanceOf[msg.sender] -= amount;\r\n        poolSupply += onePercent; //As Owner has no referral, pool should have +1%\r\n        balanceOf[marketing] += onePercent;\r\n        balanceOf[development] += onePercent;\r\n        poolSupply += onePercent; //Respective pool %\r\n        poolSupply -= investor; //Algorithm\r\n        //balanceOf[msg.sender] += investor;\r\n      }\r\n       else if(msg.sender == owner && isOnPool(msg.sender) == true){\r\n        balanceOf[msg.sender] -= amount;\r\n        poolSupply += onePercent; //As Owner has no referral, pool should have +1%\r\n        balanceOf[marketing] += onePercent;\r\n        balanceOf[development] += onePercent;\r\n        poolSupply += onePercent; //Respective pool %\r\n        poolSupply -= investor;\r\n        //balanceOf[msg.sender] += investor;\r\n        staking[1][1][exists].amount += amount;\r\n        staking[1][1][exists].amountCredited += investor;\r\n        staking[1][1][exists].onPool = true;\r\n      }\r\n      else if(isOnPool(msg.sender) == true && (msg.sender) != owner){\r\n        balanceOf[msg.sender] -= amount;\r\n       \r\n        balanceOf[marketing] += onePercent;\r\n        balanceOf[development] += onePercent;\r\n        uint256 ref = staking[1][1][exists].referred;\r\n        balanceOf[referral[ref].person] += onePercent;\r\n        poolSupply += onePercent;\r\n        poolSupply -= investor;\r\n        //balanceOf[msg.sender] += investor;\r\n        staking[1][1][exists].onPool = true;\r\n        staking[1][1][exists].amount += amount;\r\n        staking[1][1][exists].amountCredited += investor;\r\n      }\r\n    }\r\n  \r\n  function withdraw() public {\r\n      require(isOnPool(msg.sender) == true);\r\n      require(staking[1][1][exists].onPool == true);\r\n    \r\n      uint256 amountInvested = staking[1][1][exists].amount;\r\n      uint256 credited = (amountInvested *96) / 100;\r\n      uint256 c = now - staking[1][1][exists].timestamp;\r\n      uint256 d = c * amountInvested;\r\n      require(d / c == amountInvested);\r\n      \r\n      uint256 stakedOne = (((d/100)/86400)); // 1% daily\r\n     \r\n      require(stakedOne >= 1e18);\r\n      \r\n      staking[1][1][exists].onPool = false;\r\n      assert(staking[1][1][exists].timestamp <= now);\r\n      \r\n      balanceOf[msg.sender] += stakedOne;\r\n      balanceOf[msg.sender] += staking[1][1][exists].amountCredited;\r\n      staking[1][1][exists].amount = 0;\r\n      poolSupply += credited;\r\n      poolSupply -= stakedOne;\r\n  }\r\n  \r\n  function viewStake() public returns(uint256){\r\n    require(isOnPool(msg.sender) == true);\r\n    require(staking[1][1][exists].onPool == true);\r\n    \r\n    uint256 amountInvested = staking[1][1][exists].amount;\r\n    uint256 c = now - staking[1][1][exists].timestamp;\r\n    uint256 d = c * amountInvested;\r\n    require(d / c == amountInvested);\r\n    staked = ((d /100)/86400);\r\n    \r\n    return staked;\r\n    \r\n    }\r\n\r\n   function withdrawStake() public returns(uint256){\r\n    require(isOnPool(msg.sender) == true);\r\n    require(staking[1][1][exists].onPool == true);\r\n    \r\n    uint256 amountInvested = staking[1][1][exists].amount;\r\n    uint256 c = now - staking[1][1][exists].timestamp;\r\n    uint256 d = c * amountInvested;\r\n    require(d / c == amountInvested);\r\n    uint256 stakedOne = ((d /100)/86400);\r\n    require(stakedOne >= 1e18);\r\n    uint256 totalStake = stakedOne;\r\n    balanceOf[msg.sender] += totalStake;\r\n    poolSupply -= totalStake;\r\n    staking[1][1][exists].timestamp = now;\r\n\r\n    return totalStake;\r\n    \r\n    }\r\n    \r\n function requestBuyBack(uint256 _amount) public buyBackAllowed {\r\n     uint256 amount = _amount*10**decimals;\r\n     require(balanceOf[msg.sender] >= amount);\r\n     require(isOnPool(msg.sender) == true);\r\n     \r\n     if(isRequest(msg.sender) == false){\r\n         balanceOf[msg.sender] -= amount;\r\n         escrow += amount;\r\n         \r\n         requestCount += 1;\r\n\r\n         request[1][1].push(Request(msg.sender, _amount, false));\r\n     }\r\n     else {\r\n         balanceOf[msg.sender] -= amount;\r\n         escrow += amount;\r\n\r\n         request[1][1][requestExists].amount += _amount;\r\n         request[1][1][requestExists].processed = false;\r\n     }\r\n }\r\n\r\n function cancelBuyBack() public buyBackAllowed {\r\n     require(isOnPool(msg.sender) == true);\r\n     require(isRequest(msg.sender) == true);\r\n\r\n     uint256 _amount = request[1][1][requestExists].amount;\r\n    \r\n     require(escrow >= _amount);\r\n\r\n     escrow -= _amount;\r\n     balanceOf[msg.sender] += _amount;\r\n\r\n     request[1][1][requestExists].processed = true;\r\n     request[1][1][requestExists].amount = 0;\r\n }\r\n \r\n function processRequest(uint256 _id, uint256 amount) public payable onlyOwner{\r\n     require(request[1][1][_id].processed == false);\r\n     require(isOnPool(request[1][1][_id].person) == true);\r\n     require(msg.value == (amount * price));\r\n     uint256 onePercent = (msg.value)/ 100; // 1%\r\n     uint256 investor = (msg.value * 96) / 100; //96% Investor\r\n     address person = request[1][1][_id].person;\r\n     address referred = referral[staking[1][1][_id].referred].person;\r\n     uint256 fromEscrow = amount*10**decimals;\r\n\r\n     \r\n     development.transfer(onePercent);\r\n     marketing.transfer(onePercent);\r\n     referred.transfer(onePercent);\r\n     person.transfer(investor);\r\n    \r\n    require(fromEscrow <= escrow);\r\n    escrow -= fromEscrow;\r\n    \r\n    \r\n    poolSupply += fromEscrow;\r\n    request[1][1][_id].processed = true;\r\n    request[1][1][_id].amount = 0;\r\n     \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"viewStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setDevelopmentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staking\",\"outputs\":[{\"name\":\"person\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountCredited\",\"type\":\"uint256\"},{\"name\":\"onPool\",\"type\":\"bool\"},{\"name\":\"referralCode\",\"type\":\"uint256\"},{\"name\":\"referred\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewReferralCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"development\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelBuyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referral\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"person\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestBuyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveIcoToPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"request\",\"outputs\":[{\"name\":\"person\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"processed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Ucifeth","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://79d27c9031add8ace931a302bb6f188c55247572289bfed18acc6bbfcbae46ee"}]}