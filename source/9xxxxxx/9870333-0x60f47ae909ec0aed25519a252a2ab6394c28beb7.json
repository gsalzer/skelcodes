{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/flashloan/FlashLoanLogger.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract FlashLoanLogger {\r\n    event FlashLoan(string actionType, uint256 id, uint256 loanAmount, address sender);\r\n\r\n    function logFlashLoan(\r\n        string calldata _actionType,\r\n        uint256 _id,\r\n        uint256 _loanAmount,\r\n        address _sender\r\n    ) external {\r\n        emit FlashLoan(_actionType, _loanAmount, _id, _sender);\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSAuthority.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\n// File: localhost/DS/DSAuth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSGuard {\r\n    function canCall(address src_, address dst_, bytes4 sig) public view returns (bool);\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public;\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public;\r\n\r\n    function permit(address src, address dst, bytes32 sig) public;\r\n\r\n    function forbid(address src, address dst, bytes32 sig) public;\r\n}\r\n\r\n\r\ncontract DSGuardFactory {\r\n    function newGuard() public returns (DSGuard guard);\r\n}\r\n\r\n// File: localhost/auth/ProxyPermission.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ProxyPermission {\r\n\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n\r\n    function givePermission(address _contractAddr) internal {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        if (currAuthority == address(0)) {\r\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\r\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\r\n        }\r\n\r\n        guard.permit(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    function removePermission(address _contractAddr) internal {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        guard.forbid(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/mcd/maker/Manager.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Manager {\r\n    function last(address) public returns (uint);\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\n// File: localhost/mcd/maker/Vat.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) public view returns (uint);\r\n    function dai(address) public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\n// File: localhost/interfaces/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: localhost/interfaces/CTokenInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\n// File: localhost/flashloan/aave/ILendingPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external;\r\n}\r\n\r\n// File: localhost/flashloan/bridges/BridgeFlashLoanTaker.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BridgeFlashLoanTaker is DSMath, ProxyPermission {\r\n\r\n    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant cDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n\r\n    address payable public constant LOAN_MOVER = 0x3D7318a6038a0A4C09CD8A74198c7ffF91402824;\r\n\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    FlashLoanLogger public constant logger = FlashLoanLogger(\r\n        0xb9303686B0EE92F92f63973EF85f3105329D345c\r\n    );\r\n\r\n    function compound2Maker(\r\n        uint _cdpId,\r\n        address _joinAddr,\r\n        address _cCollateralAddr\r\n    ) external {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n        uint debtAmount = getAllDebtCompound();\r\n\r\n        bytes memory paramsData = abi.encode(_cdpId, _joinAddr, _cCollateralAddr, ilk, 1, address(this));\r\n\r\n        givePermission(LOAN_MOVER);\r\n\r\n        lendingPool.flashLoan(LOAN_MOVER, DAI_ADDRESS, debtAmount, paramsData);\r\n\r\n        removePermission(LOAN_MOVER);\r\n\r\n        logger.logFlashLoan(\"compound2Maker\", debtAmount, _cdpId, DAI_ADDRESS);\r\n    }\r\n\r\n    function maker2Compound(\r\n        uint _cdpId,\r\n        address _joinAddr,\r\n        address _cCollateralAddr\r\n    ) external {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n        uint debtAmount = getAllDebtCDP(VAT_ADDRESS, manager.urns(_cdpId), manager.urns(_cdpId), ilk);\r\n\r\n        bytes memory paramsData = abi.encode(_cdpId, _joinAddr, _cCollateralAddr, ilk, 2, address(this));\r\n\r\n        givePermission(LOAN_MOVER);\r\n\r\n        lendingPool.flashLoan(LOAN_MOVER, DAI_ADDRESS, debtAmount, paramsData);\r\n\r\n        removePermission(LOAN_MOVER);\r\n\r\n        logger.logFlashLoan(\"maker2Compound\", debtAmount, _cdpId, DAI_ADDRESS);\r\n    }\r\n\r\n    function getAllDebtCDP(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n        uint dai = Vat(_vat).dai(_usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        daiAmount = rad / RAY;\r\n\r\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\r\n    }\r\n\r\n    function getAllDebtCompound() internal returns (uint daiAmount) {\r\n        daiAmount = CTokenInterface(cDAI_ADDRESS).borrowBalanceCurrent(address(this));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOAN_MOVER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cCollateralAddr\",\"type\":\"address\"}],\"name\":\"compound2Maker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract FlashLoanLogger\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cCollateralAddr\",\"type\":\"address\"}],\"name\":\"maker2Compound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BridgeFlashLoanTaker","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a69fc6440109aec2c73e714bdc5f55dca5075156c658c6bb90b94810d146e316"}]}