{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/registry/IClaimTopicsRegistry.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\ninterface IClaimTopicsRegistry{\r\n    // EVENTS\r\n    event ClaimTopicAdded(uint256 indexed claimTopic);\r\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\r\n\r\n    // OPERATIONS\r\n    function addClaimTopic(uint256 claimTopic) external;\r\n    function removeClaimTopic(uint256 claimTopic) external;\r\n\r\n    // GETTERS\r\n    function getClaimTopics() external view returns (uint256[] memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/ClaimTopicsRegistry.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\n\r\ncontract ClaimTopicsRegistry is IClaimTopicsRegistry, Ownable {\r\n    uint256[] claimTopics;\r\n\r\n    /**\r\n    * @notice Add a trusted claim topic (For example: KYC=1, AML=2).\r\n    * Only owner can call.\r\n    *\r\n    * @param claimTopic The claim topic index\r\n    */\r\n    function addClaimTopic(uint256 claimTopic) public onlyOwner {\r\n        uint length = claimTopics.length;\r\n        for(uint i = 0; i<length; i++){\r\n            require(claimTopics[i]!=claimTopic, \"claimTopic already exists\");\r\n        }\r\n        claimTopics.push(claimTopic);\r\n        emit ClaimTopicAdded(claimTopic);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove a trusted claim topic (For example: KYC=1, AML=2).\r\n    * Only owner can call.\r\n    *\r\n    * @param claimTopic The claim topic index\r\n    */\r\n    function removeClaimTopic(uint256 claimTopic) public onlyOwner {\r\n        uint length = claimTopics.length;\r\n        for (uint i = 0; i<length; i++) {\r\n            if(claimTopics[i] == claimTopic) {\r\n                delete claimTopics[i];\r\n                claimTopics[i] = claimTopics[length-1];\r\n                delete claimTopics[length-1];\r\n                claimTopics.length--;\r\n                emit ClaimTopicRemoved(claimTopic);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Get the trusted claim topics for the security token\r\n    *\r\n    * @return Array of trusted claim topics\r\n    */\r\n    function getClaimTopics() public view returns (uint256[] memory) {\r\n        return claimTopics;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"}]","ContractName":"ClaimTopicsRegistry","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2bdbb055ad6c7fd5a8ba0c365c29e5d4b8179afa91d50a35355522bda19e8039"}]}