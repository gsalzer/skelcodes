{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract TestToken {\r\n    string  public name = \"Test1\";\r\n    string  public symbol = \"Test1\";\r\n    string  public standard = \"DApp Token v1.0\";\r\n    uint256 public totalSupply;\r\n    uint256 public decimals=18;\r\n    uint256 public stage = 0;\r\n    mapping(uint256 => uint256) public stages;\r\n    uint256 public difference =0;\r\n    uint256 public origin_block = 0;\r\n    \r\n    uint256 public loop = 0;\r\n    \r\n    uint256 lastBlockNumber;\r\n    \r\n    uint256 public dexamillions;\r\n    uint256 public millions;\r\n    uint256 public hundredks;\r\n    uint256 public tenks;\r\n    uint256 public ks;\r\n    uint256 public hundreds;\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public lastTransactionBlockNumber;\r\n    mapping(address => uint256) public temp_balances;\r\n \r\n\r\n  \r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    constructor (uint256 _initialSupply) public {\r\n        totalSupply = mul(_initialSupply, 10**(decimals));\r\n        balanceOf[msg.sender] = totalSupply;\r\n        temp_balances[msg.sender] = totalSupply;\r\n        origin_block = block.number;\r\n        lastTransactionBlockNumber[msg.sender] = origin_block;\r\n\r\n    }\r\n    \r\n    \r\n    function burn (address _add) public returns(bool success){\r\n        \r\n        if (lastTransactionBlockNumber[_add]!=0 && lastTransactionBlockNumber[_add]<add(27000000, origin_block)){\r\n            \r\n            dexamillions=0;\r\n            millions=0;\r\n            hundredks=0;\r\n            tenks=0;\r\n            ks=0;\r\n            hundreds=0;\r\n                \r\n            stage = 0;\r\n            loop = 0;\r\n            \r\n            lastBlockNumber = block.number;\r\n            \r\n            if (lastBlockNumber>add(origin_block, 27000000)){\r\n                lastBlockNumber = add(origin_block, 27000000);\r\n            }\r\n            \r\n            \r\n            \r\n            uint256 balance = temp_balances[_add];\r\n             \r\n            difference = sub(lastBlockNumber, lastTransactionBlockNumber[_add]);\r\n           \r\n\r\n            \r\n            if (difference>10000000){\r\n                \r\n                loop = add(loop, 1);\r\n                \r\n                dexamillions = div(difference, 10000000);\r\n                \r\n                for (uint256 i=0; i<dexamillions; i++){\r\n                    \r\n                    stages[stage]=balance;\r\n                \r\n                    stage = add(stage, 1);\r\n                    \r\n                    balance = div(mul(balance, 3593813), 100000000000);\r\n                }\r\n                \r\n                difference = sub(difference, mul(dexamillions, 10000000));\r\n            }\r\n            \r\n            if (difference>1000000){\r\n                \r\n                loop = add(loop, 1);\r\n                \r\n                millions = div(difference, 1000000);\r\n                \r\n                for (i=0; i<millions; i++){\r\n                    \r\n                    stages[stage]=balance;\r\n                \r\n                    stage = add(stage, 1);\r\n                    \r\n                    balance = div(mul(balance, 35938136636), 100000000000);\r\n                }\r\n                \r\n                difference = sub(difference, mul(millions, 1000000));\r\n            }\r\n            \r\n            if (difference>100000){\r\n                \r\n                loop = add(loop, 1);\r\n                \r\n                hundredks = div(difference,100000);\r\n                \r\n                for (i=0; i<hundredks; i++){\r\n                    \r\n                    stages[stage]=balance;\r\n                \r\n                    stage = add(stage, 1);\r\n                    \r\n                    balance = div(mul(balance, 90272517794), 100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = sub(difference, mul(hundredks, 100000));\r\n                \r\n                //balance = div(mul(balance, sub(100000000000, mul(9727482206, hundredks))), 100000000000);\r\n                \r\n                //stages[stage]=balance;\r\n                \r\n                //stage = add(stage, 1);\r\n                \r\n                \r\n            }\r\n            \r\n            if (difference>10000){\r\n                \r\n                loop = add(loop, 1);\r\n                \r\n                tenks=div(difference, 10000);\r\n                \r\n                for (i=0; i<tenks; i++){\r\n                    \r\n                    stages[stage]=balance;\r\n                \r\n                    stage = add(stage, 1);\r\n                    \r\n                    balance = div(mul(balance, 98981847473), 100000000000);\r\n                    \r\n                }\r\n                \r\n                //balance = div(mul(balance, sub(100000000000, mul(1018152528,tenks))), 100000000000);\r\n                \r\n                difference = sub(difference, mul(tenks, 10000));\r\n                \r\n                //stages[stage]=balance;\r\n                \r\n                //stage = add(stage, 1);\r\n            }\r\n            \r\n            if (difference>1000){\r\n                ks = div(difference, 1000);\r\n                \r\n                balance = div(mul(balance, sub(100000000000, mul(102284769, ks))), 100000000000);\r\n                difference = sub(difference, mul(ks, 1000));\r\n                \r\n                stages[stage]=balance;\r\n                \r\n                stage = add(stage, 1);\r\n                \r\n            }\r\n            \r\n            if (difference>100){\r\n                \r\n                hundreds = div(difference, 100);\r\n\r\n                balance = div(mul(balance, sub(100000000000, mul(10233188, hundreds))), 100000000000);\r\n                difference = sub(difference, mul(hundreds,100));\r\n                stages[stage]=balance;\r\n                \r\n                stage = add(stage, 1);\r\n                \r\n            }\r\n            \r\n            \r\n            balance = div(mul(balance, sub(100000000000, mul(102337, difference))), 100000000000);\r\n            \r\n            stages[stage]=balance;\r\n\r\n            totalSupply = add(sub(totalSupply, temp_balances[_add]), balance); \r\n            \r\n            temp_balances[_add] = balance;\r\n\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        burn(msg.sender);\r\n        balanceOf[msg.sender] = temp_balances[msg.sender];\r\n        \r\n        require(balanceOf[msg.sender] >= _value);\r\n        \r\n        temp_balances[msg.sender] = sub(temp_balances[msg.sender], _value);\r\n\r\n        balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);\r\n        balanceOf[_to] = add(balanceOf[_to], _value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        burn(_to);\r\n        temp_balances[_to] = add(temp_balances[_to], _value);\r\n        \r\n        lastTransactionBlockNumber[_to]=block.number;\r\n        lastTransactionBlockNumber[msg.sender]=block.number;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dexamillions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTransactionBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundreds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"temp_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"origin_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"millions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TestToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000005af3107a4000","Library":"","LicenseType":"None","SwarmSource":"bzzr://497df0c31fd12557d64ae79102edfece8015da6fcd23a33746b5b0594f96af51"}]}