{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\ninterface IACL {\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\n}\n\ninterface IPPGlobalRegistry {\n  function setContract(bytes32 _key, address _value) external;\n\n  // GETTERS\n  function getContract(bytes32 _key) external view returns (address);\n  function getACL() external view returns (IACL);\n  function getGaltTokenAddress() external view returns (address);\n  function getPPTokenRegistryAddress() external view returns (address);\n  function getPPLockerRegistryAddress() external view returns (address);\n  function getPPMarketAddress() external view returns (address);\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates if the contract has been initialized.\n   */\n  bool public initialized;\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n  }\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract OwnableAndInitializable is Ownable, Initializable {\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(tx.origin);\n  }\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\n   */\n  modifier initializeWithOwner(address _owner) {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(_owner);\n  }\n}\n\ncontract PPGlobalRegistry is IPPGlobalRegistry, OwnableAndInitializable {\n  // solium-disable-next-line mixedcase\n  address internal constant ZERO_ADDRESS = address(0);\n\n  bytes32 public constant PPGR_ACL = bytes32(\"ACL\");\n  bytes32 public constant PPGR_GALT_TOKEN = bytes32(\"galt_token\");\n  bytes32 public constant PPGR_LOCKER_REGISTRY = bytes32(\"locker_registry\");\n  bytes32 public constant PPGR_TOKEN_REGISTRY = bytes32(\"token_registry\");\n  bytes32 public constant PPGR_MARKET = bytes32(\"market\");\n\n  event SetContract(bytes32 indexed key, address addr);\n\n  mapping(bytes32 => address) internal contracts;\n\n  function initialize() public isInitializer {\n  }\n\n  function setContract(bytes32 _key, address _value) external onlyOwner {\n    contracts[_key] = _value;\n\n    emit SetContract(_key, _value);\n  }\n\n  // GETTERS\n  function getContract(bytes32 _key) external view returns (address) {\n    return contracts[_key];\n  }\n\n  function getACL() external view returns (IACL) {\n    require(contracts[PPGR_ACL] != ZERO_ADDRESS, \"PPGR: ACL not set\");\n    return IACL(contracts[PPGR_ACL]);\n  }\n\n  function getGaltTokenAddress() external view returns (address) {\n    require(contracts[PPGR_GALT_TOKEN] != ZERO_ADDRESS, \"PPGR: GALT_TOKEN not set\");\n    return contracts[PPGR_GALT_TOKEN];\n  }\n\n  function getPPTokenRegistryAddress() external view returns (address) {\n    require(contracts[PPGR_TOKEN_REGISTRY] != ZERO_ADDRESS, \"PPGR: TOKEN_REGISTRY not set\");\n    return contracts[PPGR_TOKEN_REGISTRY];\n  }\n\n  function getPPLockerRegistryAddress() external view returns (address) {\n    require(contracts[PPGR_LOCKER_REGISTRY] != ZERO_ADDRESS, \"PPGR: LOCKER_REGISTRY not set\");\n    return contracts[PPGR_LOCKER_REGISTRY];\n  }\n\n  function getPPMarketAddress() external view returns (address) {\n    require(contracts[PPGR_MARKET] != ZERO_ADDRESS, \"PPGR: MARKET not set\");\n    return contracts[PPGR_MARKET];\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetContract\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPGR_ACL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPGR_GALT_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPGR_LOCKER_REGISTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPGR_MARKET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPGR_TOKEN_REGISTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getACL\",\"outputs\":[{\"internalType\":\"contract IACL\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGaltTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPPLockerRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPPMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPPTokenRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPGlobalRegistry","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://d2c1bbccfbe8017612c0b5cdaa6b6eeacd2be1303b049c561e598a5f31792415"}]}