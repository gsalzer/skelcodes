{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a / _b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract King {\r\n    \r\n    using SafeMath for uint256;\r\n    event transferLogs(address indexed,string,uint256);\r\n    address internal owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function () external payable {}\r\n\r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function TransferOut (address[] memory _users,uint256[] memory _amount,uint256 _allBalance) public onlyOwner payable {\r\n        require(_users.length>0);\r\n        require(_amount.length>0);\r\n        require(address(this).balance>=_allBalance);\r\n        \r\n        for(uint256 i =0;i<_users.length;i++){\r\n            require(_users[i]!=address(0));\r\n            require(_amount[i]>0);\r\n            \r\n            address(uint160(_users[i])).transfer(_amount[i]);\r\n            emit transferLogs(_users[i],'转账',_amount[i]);\r\n        }\r\n    }\r\n    \r\n    function kill() public onlyOwner{\r\n      selfdestruct(address(uint160(owner))); \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_allBalance\",\"type\":\"uint256\"}],\"name\":\"TransferOut\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferLogs\",\"type\":\"event\"}]","ContractName":"King","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3df0202f18bc43342c2e845b68b7f465cd51cb8a7231b8e5cb4cc9f06b96cd79"}]}