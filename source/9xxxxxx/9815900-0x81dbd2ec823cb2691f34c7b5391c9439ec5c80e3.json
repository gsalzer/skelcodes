{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/LoihiViews.sol\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0 >=0.5.12 <0.6.0 >=0.5.15 <0.6.0;\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// src/LoihiDelegators.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\ncontract LoihiDelegators {\n\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize)\n            }\n        }\n        return returnData;\n    }\n\n    function staticTo(address callee, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returnData) = callee.staticcall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize)\n            }\n        }\n        return returnData;\n    }\n\n\n    function dViewRawAmount (address addr, uint256 amount) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSignature(\"viewRawAmount(uint256)\", amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dViewNumeraireAmount (address addr, uint256 amount) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSignature(\"viewNumeraireAmount(uint256)\", amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dViewNumeraireBalance (address addr, address _this) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSignature(\"viewNumeraireBalance(address)\", _this)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dGetNumeraireAmount (address addr, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"getNumeraireAmount(uint256)\", amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dGetNumeraireBalance (address addr) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"getNumeraireBalance()\")); // encoded selector of \"getNumeraireBalance()\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address to the interface wrapper to be delegatecall'd\n    /// @param amount the numeraire amount to be transfered into the contract. will be adjusted to the raw amount before transfer\n    function dIntakeRaw (address addr, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"intakeRaw(uint256)\", amount)); // encoded selector of \"intakeRaw(uint256)\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address to the interface wrapper to be delegatecall'd\n    /// @param amount the numeraire amount to be transfered into the contract. will be adjusted to the raw amount before transfer\n    function dIntakeNumeraire (address addr, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"intakeNumeraire(uint256)\", amount)); // encoded selector of \"intakeNumeraire(uint256)\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address of the interface wrapper to be delegatecall'd\n    /// @param dst the destination to which to send the raw amount\n    /// @param amount the raw amount of the asset to send\n    function dOutputRaw (address addr, address dst, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"outputRaw(address,uint256)\", dst, amount)); // encoded selector of \"outputRaw(address,uint256)\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions to retrieve the numeraire and raw values and vice versa\n    /// @param addr address of the interface wrapper\n    /// @param dst the destination to send the raw amount to\n    /// @param amount the numeraire amount of the asset to be sent. this will be adjusted to the corresponding raw amount\n    /// @return the raw amount of the asset that was transfered\n    function dOutputNumeraire (address addr, address dst, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSignature(\"outputNumeraire(address,uint256)\", dst, amount)); // encoded selector of \"outputNumeraire(address,uint256)\";\n        return abi.decode(result, (uint256));\n    }\n}\n////// src/LoihiRoot.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\n/* import \"ds-math/math.sol\"; */\n\ncontract LoihiRoot is DSMath {\n\n    string  public constant name = \"Shells\";\n    string  public constant symbol = \"SHL\";\n    uint8   public constant decimals = 18;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowances;\n    uint256 public totalSupply;\n\n    struct Flavor { address adapter; address reserve; }\n    mapping(address => Flavor) public flavors;\n\n    address[] public reserves;\n    address[] public numeraires;\n    uint256[] public weights;\n\n    address public owner;\n    bool internal notEntered = true;\n    bool public frozen = false;\n\n    uint256 public alpha;\n    uint256 public beta;\n    uint256 public delta;\n    uint256 public epsilon;\n    uint256 public lambda;\n    uint256 internal omega;\n\n    bytes4 constant internal ERC20ID = 0x36372b07;\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\n\n    // address constant exchange = 0x9FD98Fcd4A9B10297237c735a9cb9B2a64266AE6;\n    // address constant liquidity = 0xA3f4A860eFa4a60279E6E50f2169FDD080aAb655;\n    // address constant views = 0x5202b8156F3E0C2C3696514a5532667f2C2fe49D;\n    // address constant erc20 = 0x7422916F26BdFCC037Fe47CeDFf27Ddb7a8aa7cd;\n    address exchange;\n    address liquidity;\n    address views;\n    address erc20;\n\n    event ShellsMinted(address indexed minter, uint256 amount, address[] indexed coins, uint256[] amounts);\n    event ShellsBurned(address indexed burner, uint256 amount, address[] indexed coins, uint256[] amounts);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Trade(address indexed trader, address indexed origin, address indexed target, uint256 originAmount, uint256 targetAmount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    modifier nonReentrant() {\n        require(notEntered, \"re-entered\");\n        notEntered = false;\n        _;\n        notEntered = true;\n    }\n\n    modifier notFrozen () {\n        require(!frozen, \"swaps, selective deposits and selective withdraws have been frozen.\");\n        _;\n    }\n\n}\n////// src/LoihiViews.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\n/* import \"./LoihiRoot.sol\"; */\n/* import \"./LoihiDelegators.sol\"; */\n\ncontract LoihiViews is LoihiRoot, LoihiDelegators {\n\n    function viewTargetAmount (uint256 _oAmt, address _oAdptr, address _tAdptr, address _this, address[] memory _rsrvs, address _oRsrv, address _tRsrv, uint256[] memory _weights, uint256[] memory _globals) public view returns (uint256 tNAmt_) {\n\n        require(_oAdptr != address(0), \"origin flavor not supported\");\n        require(_tAdptr != address(0), \"target flavor not supported\");\n\n        if (_oRsrv == _tRsrv) {\n            uint256 _oNAmt = dViewNumeraireAmount(_oAdptr, _oAmt);\n            return dViewRawAmount(_tAdptr, _oNAmt);\n        }\n\n        uint256 _oNAmt = dViewNumeraireAmount(_oAdptr, _oAmt);\n\n        uint256 _grossLiq;\n        uint256[] memory _balances = new uint256[](_rsrvs.length);\n        for (uint i = 0; i < _rsrvs.length; i++) {\n            _balances[i] = dViewNumeraireBalance(_rsrvs[i], _this);\n            _grossLiq += _balances[i];\n        }\n\n        tNAmt_ = wmul(_oNAmt, WAD-_globals[3]);\n        uint256 _oNFAmt = tNAmt_;\n        uint256 _psi;\n        uint256 _nGLiq;\n        for (uint j = 0; j < 10; j++) {\n            _psi = 0;\n            _nGLiq = _grossLiq + _oNAmt - tNAmt_;\n            for (uint i = 0; i < _balances.length; i++) {\n                if (_rsrvs[i] == _oRsrv) _psi += makeFee(add(_balances[i], _oNAmt), wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n                else if (_rsrvs[i] == _tRsrv) _psi += makeFee(sub(_balances[i], tNAmt_), wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n                else _psi += makeFee(_balances[i], wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n            }\n\n            if (_globals[5] < _psi) {\n                if ((tNAmt_ = _oNFAmt + _globals[5] - _psi) / 10000000000 == tNAmt_ / 10000000000) break;\n            } else {\n                if ((tNAmt_ = _oNFAmt + wmul(_globals[4], _globals[5] - _psi)) / 10000000000 == tNAmt_ / 10000000000) break;\n            }\n\n        }\n\n        for (uint i = 0; i < _balances.length; i++) {\n            uint256 _ideal = wmul(_nGLiq, _weights[i]);\n            if (_rsrvs[i] == _oRsrv) require(_balances[i] + _oNAmt < wmul(_ideal, WAD + _globals[0]), \"origin halt check\");\n            if (_rsrvs[i] == _tRsrv) require(_balances[i] - tNAmt_ > wmul(_ideal, WAD - _globals[0]), \"target halt check\");\n        }\n\n        tNAmt_ = wmul(tNAmt_, WAD-_globals[3]);\n\n        return dViewRawAmount(_tAdptr, tNAmt_);\n\n    }\n\n    function viewOriginAmount (uint256 _tAmt, address _tAdptr, address _oAdptr, address _this, address[] memory _rsrvs, address _tRsrv, address _oRsrv, uint256[] memory _weights, uint256[] memory _globals) public view returns (uint256 oNAmt_) {\n\n\n        require(_oAdptr != address(0), \"origin flavor not supported\");\n        require(_tAdptr != address(0), \"target flavor not supported\");\n\n        if (_oRsrv == _tRsrv) {\n            uint256 _tNAmt = dViewNumeraireAmount(_tAdptr, _tAmt);\n            return dViewRawAmount(_oAdptr, _tNAmt);\n        }\n\n        uint256 _tNAmt = dViewNumeraireAmount(_tAdptr, _tAmt);\n\n        uint256 _grossLiq;\n        uint256[] memory _balances = new uint256[](_rsrvs.length);\n        for (uint i = 0; i < _rsrvs.length; i++) {\n            _balances[i] = dViewNumeraireBalance(_rsrvs[i], _this);\n            _grossLiq += _balances[i];\n        }\n\n        oNAmt_ = wmul(_tNAmt, WAD+_globals[3]);\n        uint256 _tNFAmt = oNAmt_;\n        uint256 _psi;\n        uint256 _nGLiq;\n        for (uint j = 0; j < 10; j++) {\n            _psi = 0;\n            _nGLiq = _grossLiq + oNAmt_ - _tNAmt;\n            for (uint i = 0; i < _rsrvs.length; i++) {\n                if (_rsrvs[i] == _oRsrv) _psi += makeFee(add(_balances[i], oNAmt_), wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n                else if (_rsrvs[i] == _tRsrv) _psi += makeFee(sub(_balances[i], _tNAmt), wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n                else _psi += makeFee(_balances[i], wmul(_nGLiq, _weights[i]), _globals[1], _globals[2]);\n            }\n\n            if (_globals[5] < _psi) {\n                if ((oNAmt_ = _tNFAmt + _psi - _globals[5]) / 10000000000 == oNAmt_ / 10000000000) break;\n            } else {\n                if ((oNAmt_ = _tNFAmt - wmul(_globals[4], _globals[5] - _psi)) / 10000000000 == oNAmt_ / 10000000000) break;\n            }\n\n        }\n\n        for (uint i = 0; i < _balances.length; i++) {\n            uint256 _ideal = wmul(_nGLiq, _weights[i]);\n            if (_rsrvs[i] == _oRsrv) require(_balances[i] + oNAmt_ < wmul(_ideal, WAD + _globals[0]), \"origin halt check\");\n            if (_rsrvs[i] == _tRsrv) require(_balances[i] - _tNAmt > wmul(_ideal, WAD - _globals[0]), \"target halt check\");\n        }\n\n        oNAmt_ = wmul(oNAmt_, WAD+_globals[3]);\n\n        return dViewRawAmount(_oAdptr, oNAmt_);\n\n    }\n\n    function makeFee (uint256 _bal, uint256 _ideal, uint256 _beta, uint256 _delta) internal view returns (uint256 _fee) {\n\n        uint256 threshold;\n        if (_bal < (threshold = wmul(_ideal, WAD-_beta))) {\n            _fee = wdiv(_delta, _ideal);\n            _fee = wmul(_fee, (threshold = sub(threshold, _bal)));\n            _fee = wmul(_fee, threshold);\n        } else if (_bal > (threshold = wmul(_ideal, WAD+_beta))) {\n            _fee = wdiv(_delta, _ideal);\n            _fee = wmul(_fee, (threshold = sub(_bal, threshold)));\n            _fee = wmul(_fee, threshold);\n        } else _fee = 0;\n\n    }\n\n    function viewSelectiveWithdraw (address[] calldata _rsrvs, address[] calldata _flvrs, uint256[] calldata _amts, address _this, uint256[] calldata _weights, uint256[] calldata _globals) external view returns (uint256) {\n\n        (uint256[] memory _balances, uint256[] memory _withdrawals) = viewBalancesAndAmounts(_rsrvs, _flvrs, _amts, _this);\n\n        uint256 shellsBurned_;\n\n        uint256 _nSum; uint256 _oSum;\n        for (uint i = 0; i < _balances.length; i++) {\n            _nSum = add(_nSum, sub(_balances[i], _withdrawals[i]));\n            _oSum = add(_oSum, _balances[i]);\n        }\n\n        uint256 _psi = viewBurnFees(_balances, _withdrawals, _globals, _weights, _nSum, _oSum);\n\n        if (_globals[5] < _psi) {\n            uint256 _oUtil = sub(_oSum, _globals[5]);\n            uint256 _nUtil = sub(_nSum, _psi);\n            if (_oUtil == 0) return wmul(_nUtil, WAD+_globals[3]);\n            shellsBurned_ = wdiv(wmul(sub(_oUtil, _nUtil), _globals[6]), _oUtil);\n        } else {\n            uint256 _oUtil = sub(_oSum, _globals[5]);\n            uint256 _nUtil = sub(_nSum, wmul(_psi, _globals[4]));\n            if (_oUtil == 0) return wmul(_nUtil, WAD+_globals[3]);\n            uint256 _oUtilPrime = wmul(_globals[5], _globals[4]);\n            _oUtilPrime = sub(_oSum, _oUtilPrime);\n            shellsBurned_ = wdiv(wmul(sub(_oUtilPrime, _nUtil), _globals[6]), _oUtil);\n        }\n\n        return wmul(shellsBurned_, WAD+_globals[3]);\n\n    }\n\n    function viewSelectiveDeposit (address[] calldata _rsrvs, address[] calldata _flvrs, uint256[] calldata _amts, address _this, uint256[] calldata _weights, uint256[] calldata _globals) external view returns (uint256) {\n\n        (uint256[] memory _balances, uint256[] memory _deposits) = viewBalancesAndAmounts(_rsrvs, _flvrs, _amts, _this);\n\n        uint256 shellsMinted_;\n\n        uint256 _nSum; uint256 _oSum;\n        for (uint i = 0; i < _balances.length; i++) {\n            _nSum = add(_nSum, add(_balances[i], _deposits[i]));\n            _oSum = add(_oSum, _balances[i]);\n        }\n\n        require(_oSum < _nSum, \"insufficient-deposit\");\n\n        uint256 _psi = viewMintFees(_balances, _deposits, _globals, _weights, _nSum, _oSum);\n\n        if (_globals[5] < _psi) {\n            uint256 _oUtil = sub(_oSum, _globals[5]);\n            uint256 _nUtil = sub(_nSum, _psi);\n            if (_oUtil == 0 || _globals[6] == 0) return wmul(_nUtil, WAD-_globals[3]);\n            shellsMinted_ = wdiv(wmul(sub(_nUtil, _oUtil), _globals[6]), _oUtil);\n        } else {\n            uint256 _oUtil = sub(_oSum, _globals[5]);\n            uint256 _nUtil = sub(_nSum, wmul(_psi, _globals[4]));\n            if (_oUtil == 0 || _globals[6] == 0) return wmul(_nUtil, WAD-_globals[3]);\n            uint256 _oUtilPrime = wmul(_globals[5], _globals[4]);\n            _oUtilPrime = sub(_oSum, _oUtilPrime);\n            shellsMinted_ = wdiv(wmul(sub(_nUtil, _oUtilPrime), _globals[6]), _oUtil);\n        }\n\n        return wmul(shellsMinted_, WAD-_globals[3]);\n    }\n\n    function viewMintFees (uint256[] memory _balances, uint256[] memory _deposits, uint256[] memory _globals, uint256[] memory _weights, uint256 _nSum, uint256 _oSum) public view returns (uint256 psi_) {\n\n        for (uint i = 0; i < _balances.length; i++) {\n            uint256 _nBal = add(_balances[i], _deposits[i]);\n            uint256 _nIdeal = wmul(_nSum, _weights[i]);\n            require(_nBal <= wmul(_nIdeal, WAD + _globals[0]), \"deposit upper halt check\");\n            require(_nBal >= wmul(_nIdeal, WAD - _globals[0]), \"deposit lower halt check\");\n            psi_ += makeFee(_nBal, _nIdeal, _globals[1], _globals[2]);\n        }\n\n    }\n\n    function viewBurnFees (uint256[] memory _balances, uint256[] memory _withdrawals, uint256[] memory _globals, uint256[] memory _weights, uint256 _nSum, uint256 _oSum) public view returns (uint256 psi_) {\n\n        for (uint i = 0; i < _balances.length; i++) {\n            uint256 _nBal = sub(_balances[i], _withdrawals[i]);\n            uint256 _nIdeal = wmul(_nSum, _weights[i]);\n            require(_nBal <= wmul(_nIdeal, WAD + _globals[0]), \"withdraw upper halt check\");\n            require(_nBal >= wmul(_nIdeal, WAD - _globals[0]), \"withdraw lower halt check\");\n            psi_ += makeFee(_nBal, _nIdeal, _globals[1], _globals[2]);\n        }\n\n    }\n\n\n    function viewBalancesAndAmounts (address[] memory _rsrvs, address[] memory _flvrs, uint256[] memory _amts, address _this) private view returns (uint256[] memory, uint256[] memory) {\n\n        uint256[] memory balances_ = new uint256[](_rsrvs.length);\n        uint256[] memory amounts_ = new uint256[](_rsrvs.length);\n\n        for (uint i = 0; i < _flvrs.length/2; i++) {\n            require(_flvrs[i*2] != address(0), \"flavor not supported\");\n            for (uint j = 0; j < _rsrvs.length; j++) {\n                if (balances_[j] == 0) balances_[j] = dViewNumeraireBalance(_rsrvs[j], _this);\n                if (_rsrvs[j] == _flvrs[i*2+1] && _amts[i] > 0) amounts_[j] += dViewNumeraireAmount(_flvrs[i*2], _amts[i]);\n            }\n        }\n\n        return (balances_, amounts_);\n\n    }\n\n    function totalReserves (address[] calldata _reserves, address _addr) external view returns (uint256, uint256[] memory) {\n        uint256 totalBalance_;\n        uint256[] memory balances_ = new uint256[](_reserves.length);\n        for (uint i = 0; i < _reserves.length; i++) {\n            balances_[i] = dViewNumeraireBalance(_reserves[i], _addr);\n            totalBalance_ += balances_[i];\n        }\n        return (totalBalance_, balances_);\n    }\n\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ShellsBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ShellsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"alpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epsilon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flavors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lambda\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numeraires\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_reserves\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oSum\",\"type\":\"uint256\"}],\"name\":\"viewBurnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"psi_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_deposits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oSum\",\"type\":\"uint256\"}],\"name\":\"viewMintFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"psi_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tAdptr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oAdptr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_this\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rsrvs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_tRsrv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oRsrv\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"}],\"name\":\"viewOriginAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oNAmt_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rsrvs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_flvrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_this\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"}],\"name\":\"viewSelectiveDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rsrvs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_flvrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_this\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"}],\"name\":\"viewSelectiveWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oAdptr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tAdptr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_this\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rsrvs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_oRsrv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tRsrv\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globals\",\"type\":\"uint256[]\"}],\"name\":\"viewTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tNAmt_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoihiViews","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}