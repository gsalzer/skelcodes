{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: contracts/IHolder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IFlashLoan {\r\n    function flashLoan(IERC20 asset, uint256 amount, bytes calldata data) external;\r\n    function repayFlashLoan(IERC20 token, uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IExchange {\r\n    function exchangeExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    ) external view returns(uint256, uint256[] memory);\r\n\r\n    function exchange(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 disableFlags\r\n    ) external payable returns(uint256);\r\n}\r\n\r\n\r\ninterface IOracle {\r\n    function getPrice(IERC20 token) external view returns(uint256);\r\n}\r\n\r\n\r\ninterface IProtocol {\r\n    function collateralAmount(IERC20 token, address who) external returns(uint256);\r\n    function borrowAmount(IERC20 token, address who) external returns(uint256);\r\n\r\n    function deposit(IERC20 token, uint256 amount) external;\r\n    function redeem(IERC20 token, uint256 amount) external;\r\n    function redeemAll(IERC20 token) external;\r\n    function borrow(IERC20 token, uint256 amount) external;\r\n    function repay(IERC20 token, address who, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract IHolder {\r\n    address public owner = msg.sender;\r\n    address public delegate;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"IHolder: access denied\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\r\n                token.safeApprove(to, 0);\r\n            }\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalInfiniteApproveIfNeeded(IERC20 token, address to) internal {\r\n        if (!isETH(token)) {\r\n            if ((token.allowance(address(this), to) >> 255) == 0) {\r\n                token.safeApprove(to, uint256(-1));\r\n            }\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns(uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalSymbol(IERC20 token) internal view returns(string memory) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        } else {\r\n            return ERC20Detailed(address(token)).symbol();\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns(uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall.gas(5000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return success ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n}\r\n\r\n// File: contracts/HolderBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HolderBase is IHolder {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    modifier onlyCallback {\r\n        require(msg.sender == address(this), \"HolderBase: access denied\");\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    // function closePosition(\r\n    //     IERC20 collateral,\r\n    //     IERC20 debt,\r\n    //     address user,\r\n    //     uint256 minReturn\r\n    // )\r\n    //     external\r\n    //     onlyOwner\r\n    // {\r\n    //     uint256 borrowedAmount = borrowAmount(debt);\r\n\r\n    //     _flashLoan(\r\n    //         debt,\r\n    //         borrowedAmount,\r\n    //         abi.encodeWithSelector(\r\n    //             this.closePositionCallback.selector,\r\n    //             collateral,\r\n    //             debt,\r\n    //             user,\r\n    //             minReturn,\r\n    //             borrowedAmount\r\n    //             // repayAmount added dynamically in executeOperation\r\n    //         )\r\n    //     );\r\n    // }\r\n\r\n    // function closePositionCallback(\r\n    //     IERC20 collateral,\r\n    //     IERC20 debt,\r\n    //     address user,\r\n    //     uint256 minReturn,\r\n    //     uint256 borrowedAmount,\r\n    //     uint256 repayAmount\r\n    // )\r\n    //     external\r\n    //     onlyCallback\r\n    // {\r\n    //     _repay(debt, borrowedAmount);\r\n    //     _redeemAll(collateral);\r\n    //     uint256 returnedAmount = _exchange(collateral, debt, collateral.universalBalanceOf(address(this)), minReturn);\r\n    //     _repayFlashLoan(debt, repayAmount);\r\n    //     debt.universalTransfer(user, returnedAmount.sub(repayAmount));\r\n    // }\r\n\r\n    // Callback for Aave flashLoan\r\n    function executeOperation(\r\n        address /*reserve*/,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata params\r\n    ) external {\r\n        require(msg.sender == 0x398eC7346DcD622eDc5ae82352F02bE94C62d119, \"Access denied, only aave pool alowed\");\r\n        (bool success, bytes memory data) = address(this).call(abi.encodePacked(params, amount.add(fee)));\r\n        require(success, string(abi.encodePacked(\"External call failed: \", data)));\r\n    }\r\n\r\n    // IFlashLoan\r\n\r\n    function _flashLoan(IFlashLoan flashLoaner, IERC20 asset, uint256 amount, bytes memory data) internal {\r\n        (bool success, bytes memory res) = address(flashLoaner).delegatecall(\r\n            abi.encodeWithSelector(\r\n                flashLoaner.flashLoan.selector,\r\n                asset,\r\n                amount,\r\n                data\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _flashLoan():\", res)));\r\n    }\r\n\r\n    function _repayFlashLoan(IFlashLoan flashLoaner, IERC20 token, uint256 amount) internal {\r\n        (bool success, bytes memory res) = address(flashLoaner).delegatecall(\r\n            abi.encodeWithSelector(\r\n                flashLoaner.repayFlashLoan.selector,\r\n                token,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _repayFlashLoan():\", res)));\r\n    }\r\n\r\n    // IExchange\r\n\r\n    function _exchangeExpectedReturn(\r\n        IExchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        (bool success, bytes memory res) = address(exchange).delegatecall(\r\n            abi.encodeWithSelector(\r\n                exchange.exchangeExpectedReturn.selector,\r\n                fromToken,\r\n                toToken,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _exchangeExpectedReturn():\", res)));\r\n        return abi.decode(res, (uint256));\r\n    }\r\n\r\n    function _exchange(\r\n        IExchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal returns(uint256) {\r\n        (bool success, bytes memory res) = address(exchange).delegatecall(\r\n            abi.encodeWithSelector(\r\n                exchange.exchange.selector,\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                minReturn,\r\n                distribution,\r\n                disableFlags\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _exchange():\", res)));\r\n        return abi.decode(res, (uint256));\r\n    }\r\n\r\n    // IOracle\r\n\r\n    function _getPrice(IOracle oracle, IERC20 token) internal returns(uint256) {\r\n        (bool success, bytes memory res) = address(oracle).delegatecall(\r\n            abi.encodeWithSelector(\r\n                oracle.getPrice.selector,\r\n                token\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _getPrice():\", res)));\r\n        return abi.decode(res, (uint256));\r\n    }\r\n\r\n    // IProtocol\r\n\r\n    function _collateralAmount(IProtocol protocol, IERC20 token, address who) internal returns(uint256) {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.collateralAmount.selector,\r\n                token,\r\n                who\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _collateralAmount():\", res)));\r\n        return abi.decode(res, (uint256));\r\n    }\r\n\r\n    function _borrowAmount(IProtocol protocol, IERC20 token, address who) internal returns(uint256) {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.borrowAmount.selector,\r\n                token,\r\n                who\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _borrowAmount():\", res)));\r\n        return abi.decode(res, (uint256));\r\n    }\r\n\r\n    function _deposit(IProtocol protocol, IERC20 token, uint256 amount) internal {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.deposit.selector,\r\n                token,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _deposit():\", res)));\r\n    }\r\n\r\n    function _redeem(IProtocol protocol, IERC20 token, uint256 amount) internal {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.redeem.selector,\r\n                token,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _redeem():\", res)));\r\n    }\r\n\r\n    function _redeemAll(IProtocol protocol, IERC20 token) internal {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.redeemAll.selector,\r\n                token\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _redeemAll():\", res)));\r\n    }\r\n\r\n    function _borrow(IProtocol protocol, IERC20 token, uint256 amount) internal {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.borrow.selector,\r\n                token,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _borrow():\", res)));\r\n    }\r\n\r\n    function _repay(IProtocol protocol, IERC20 token, address who, uint256 amount) internal {\r\n        (bool success, bytes memory res) = address(protocol).delegatecall(\r\n            abi.encodeWithSelector(\r\n                protocol.repay.selector,\r\n                token,\r\n                who,\r\n                amount\r\n            )\r\n        );\r\n        require(success, string(abi.encodePacked(\"IHolder: failed in _repay():\", res)));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/aave/IFlashLoanReceiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/interface/aave/ILendingPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ILendingPool {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/mixins/FlashLoanAave.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FlashLoanAave is IFlashLoan {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    ILendingPool public constant POOL = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    address public constant CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\r\n\r\n    function flashLoan(IERC20 token, uint256 amount, bytes calldata data) external {\r\n        POOL.flashLoan(\r\n            address(this),\r\n            token.isETH() ? 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE : address(token),\r\n            amount,\r\n            data\r\n        );\r\n    }\r\n\r\n    function repayFlashLoan(IERC20 token, uint256 amount) external {\r\n        token.universalTransfer(CORE, amount);\r\n    }\r\n\r\n    // // Callback for Aave flashLoan\r\n    // function executeOperation(\r\n    //     address /*reserve*/,\r\n    //     uint256 amount,\r\n    //     uint256 fee,\r\n    //     bytes calldata params\r\n    // ) external {\r\n    //     require(msg.sender == address(POOL), \"Access denied, only pool alowed\");\r\n    //     (bool success, bytes memory data) = address(this).call(abi.encodePacked(params, amount.add(fee)));\r\n    //     require(success, string(abi.encodePacked(\"External call failed: \", data)));\r\n    // }\r\n}\r\n\r\n// File: contracts/interface/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IOneSplit {\r\n\r\n    // disableFlags = FLAG_UNISWAP + FLAG_KYBER + ...\r\n    uint256 constant public FLAG_UNISWAP = 0x01;\r\n    uint256 constant public FLAG_KYBER = 0x02;\r\n    uint256 constant public FLAG_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\r\n    uint256 constant public FLAG_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\r\n    uint256 constant public FLAG_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\r\n    uint256 constant public FLAG_BANCOR = 0x04;\r\n    uint256 constant public FLAG_OASIS = 0x08;\r\n    uint256 constant public FLAG_COMPOUND = 0x10;\r\n    uint256 constant public FLAG_FULCRUM = 0x20;\r\n    uint256 constant public FLAG_CHAI = 0x40;\r\n    uint256 constant public FLAG_AAVE = 0x80;\r\n    uint256 constant public FLAG_SMART_TOKEN = 0x100;\r\n    uint256 constant public FLAG_MULTI_PATH_ETH = 0x200; // Turned off by default\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        payable;\r\n\r\n    function goodSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        payable;\r\n}\r\n\r\n// File: contracts/mixins/ExchangeOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeOneSplit is IExchange {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    IOneSplit public constant ONE_SPLIT = IOneSplit(0xDFf2AA5689FCBc7F479d8c84aC857563798436DD);\r\n\r\n    function exchangeExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    ) external view returns(uint256, uint256[] memory) {\r\n        return ONE_SPLIT.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function exchange(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 disableFlags\r\n    ) external payable returns(uint256) {\r\n        fromToken.universalApprove(address(ONE_SPLIT), amount);\r\n\r\n        uint256 beforeBalance = toToken.universalBalanceOf(address(this));\r\n        ONE_SPLIT.swap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            minReturn,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n\r\n        return toToken.universalBalanceOf(address(this)).sub(beforeBalance);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/compound/IPriceOracle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IPriceOracle {\r\n    /**\r\n      * @notice Get the underlying price of a cToken asset\r\n      * @param cToken The cToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(address cToken) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/interface/compound/ICompoundController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface ICompoundController {\r\n    function oracle() external view returns(IPriceOracle);\r\n    function enterMarkets(address[] calldata cTokens) external returns(uint256[] memory);\r\n    function checkMembership(address account, address cToken) external view returns(bool);\r\n}\r\n\r\n// File: contracts/interface/compound/ICERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ICERC20 is IERC20 {\r\n    function comptroller() external view returns(ICompoundController);\r\n    function balanceOfUnderlying(address account) external returns(uint256);\r\n    function borrowBalanceCurrent(address account) external returns(uint256);\r\n\r\n    function mint() external payable;\r\n    function mint(uint256 amount) external returns(uint256);\r\n    function redeem(uint256 amount) external returns(uint256);\r\n    function borrow(uint256 amount) external returns(uint256);\r\n    function repayBorrow() external payable returns(uint256);\r\n    function repayBorrow(uint256 repayAmount) external returns(uint256);\r\n    function repayBorrowBehalf(address who) external payable returns(uint256);\r\n    function repayBorrowBehalf(address who, uint256 repayAmount) external returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/mixins/CompoundUtils.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract CompoundUtils {\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function _getCToken(IERC20 token) internal pure returns(ICERC20) {\r\n        if (token.isETH()) {                                                // ETH\r\n            return ICERC20(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n        }\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {  // DAI\r\n            return ICERC20(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) {  // BAT\r\n            return ICERC20(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) {  // REP\r\n            return ICERC20(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {  // USDC\r\n            return ICERC20(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {  // WBTC\r\n            return ICERC20(0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) {  // ZRX\r\n            return ICERC20(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407);\r\n        }\r\n\r\n        revert(\"Unsupported token\");\r\n    }\r\n}\r\n\r\n// File: contracts/mixins/ProtocolCompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProtocolCompound is IProtocol, CompoundUtils {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function collateralAmount(IERC20 token, address who) public returns(uint256) {\r\n        return _getCToken(token).balanceOfUnderlying(who);\r\n    }\r\n\r\n    function borrowAmount(IERC20 token, address who) public returns(uint256) {\r\n        return _getCToken(token).borrowBalanceCurrent(who);\r\n    }\r\n\r\n    function deposit(IERC20 token, uint256 amount) public {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (!cToken.comptroller().checkMembership(address(this), address(cToken))) {\r\n            _enterMarket(cToken);\r\n        }\r\n\r\n        if (token.isETH()) {\r\n            // cToken.mint.value(amount)();\r\n            // TypeError: Member \"mint\" not unique after argument-dependent lookup in contract ICERC20.\r\n            (bool success,) = address(cToken).call.value(amount)(abi.encodeWithSignature(\"mint()\"));\r\n            require(success);\r\n        } else {\r\n            token.universalApprove(address(cToken), amount);\r\n            cToken.mint(amount);\r\n        }\r\n    }\r\n\r\n    function redeem(IERC20 token, uint256 amount) public {\r\n        ICERC20 cToken = _getCToken(token);\r\n        cToken.redeem(amount);\r\n    }\r\n\r\n    function redeemAll(IERC20 token) public {\r\n        ICERC20 cToken = _getCToken(token);\r\n        redeem(token, IERC20(cToken).universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function borrow(IERC20 token, uint256 amount) public {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (!cToken.comptroller().checkMembership(address(this), address(cToken))) {\r\n            _enterMarket(cToken);\r\n        }\r\n\r\n        cToken.borrow(amount);\r\n    }\r\n\r\n    function repay(IERC20 token, address who, uint256 amount) public {\r\n        if (who == address(this)) {\r\n            _repaySelf(token, amount);\r\n        } else {\r\n            _repayOnBehalf(token, who, amount);\r\n        }\r\n    }\r\n\r\n    // Private\r\n\r\n    function _repaySelf(IERC20 token, uint256 amount) private {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (token.isETH()) {\r\n            // cToken.repayBorrow.value(amount)();\r\n            // TypeError: Member \"repayBorrow\" not unique after argument-dependent lookup in contract ICERC20.\r\n            (bool success, bytes memory res) = address(cToken).call.value(amount)(abi.encodeWithSignature(\"repayBorrow()\"));\r\n            require(success, string(abi.encodePacked(\"_repaySelf: \", res)));\r\n        } else {\r\n            token.universalApprove(address(cToken), amount);\r\n            cToken.repayBorrow(amount);\r\n        }\r\n    }\r\n\r\n    function _repayOnBehalf(IERC20 token, address who, uint256 amount) private {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (token.isETH()) {\r\n            // cToken.repayBorrowBehalf.value(amount)();\r\n            // TypeError: Member \"repayBorrow\" not unique after argument-dependent lookup in contract ICERC20.\r\n            (bool success, bytes memory res) = address(cToken).call.value(amount)(abi.encodeWithSignature(\"repayBorrowBehalf()\", who));\r\n            require(success, string(abi.encodePacked(\"_repaySelf: \", res)));\r\n        } else {\r\n            token.universalApprove(address(cToken), amount);\r\n            cToken.repayBorrowBehalf(who, amount);\r\n        }\r\n    }\r\n\r\n    function _enterMarket(ICERC20 cToken) private {\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = address(cToken);\r\n        cToken.comptroller().enterMarkets(tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/chainlink/IAggregator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAggregator {\r\n  function latestAnswer() external view returns(int256);\r\n}\r\n\r\n// File: contracts/mixins/OracleChainLink.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OracleChainLink is IOracle {\r\n\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function getPrice(IERC20 token) external view returns(uint256) {\r\n        if (token.isETH()) {\r\n            return 1e18;\r\n        }\r\n\r\n        return uint256(_getChainLinkOracleByToken(token).latestAnswer());\r\n    }\r\n\r\n    function _getChainLinkOracleByToken(IERC20 token) private pure returns(IAggregator) {\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {  // DAI\r\n            return IAggregator(0x037E8F2125bF532F3e228991e051c8A7253B642c);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) {  // BAT\r\n            return IAggregator(0x9b4e2579895efa2b4765063310Dc4109a7641129);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) {  // REP\r\n            return IAggregator(0xb8b513d9cf440C1b6f5C7142120d611C94fC220c);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {  // USDC\r\n            return IAggregator(0xdE54467873c3BCAA76421061036053e371721708);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {  // WBTC\r\n            return IAggregator(0x0133Aa47B6197D0BA090Bf2CD96626Eb71fFd13c);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) {  // ZRX\r\n            return IAggregator(0xA0F9D94f060836756FFC84Db4C78d097cA8C23E8);\r\n        }\r\n\r\n        revert(\"Unsupported token\");\r\n    }\r\n}\r\n\r\n// File: contracts/Holder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n//import \"./mixins/OracleCompound.sol\";\r\n\r\n\r\ncontract Holder is HolderBase {\r\n    function moveIn(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol protocol,\r\n        IERC20 collateral,\r\n        IERC20 debt\r\n    ) external onlyOwner {\r\n        address user = IERC721(owner).ownerOf(uint256(address(this)));\r\n        uint256 borrowedAmount = _borrowAmount(protocol, debt, user);\r\n\r\n        _flashLoan(\r\n            flashLoaner,\r\n            debt,\r\n            borrowedAmount,\r\n            abi.encodeWithSelector(\r\n                this.moveInCallback.selector,\r\n                flashLoaner,\r\n                protocol,\r\n                collateral,\r\n                debt,\r\n                user,\r\n                borrowedAmount\r\n                // repayAmount added dynamically in executeOperation\r\n            )\r\n        );\r\n    }\r\n\r\n    function moveInCallback(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol protocol,\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        address user,\r\n        uint256 borrowedAmount,\r\n        uint256 repayAmount\r\n    ) external onlyCallback {\r\n        _repay(protocol, debt, user, borrowedAmount);\r\n        collateral.universalTransferFrom(user, address(this), collateral.balanceOf(user));\r\n        _borrow(protocol, debt, repayAmount);\r\n        _repayFlashLoan(flashLoaner, debt, repayAmount);\r\n    }\r\n\r\n    function migrate(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol fromProtocol,\r\n        IProtocol toProtocol,\r\n        IERC20 collateral,\r\n        IERC20 debt\r\n    ) external onlyOwner {\r\n        uint256 borrowedAmount = _borrowAmount(fromProtocol, debt, address(this));\r\n\r\n        _flashLoan(\r\n            flashLoaner,\r\n            debt,\r\n            borrowedAmount,\r\n            abi.encodeWithSelector(\r\n                this.migrateCallback.selector,\r\n                flashLoaner,\r\n                fromProtocol,\r\n                toProtocol,\r\n                collateral,\r\n                debt,\r\n                borrowedAmount\r\n                // repayAmount added dynamically in executeOperation\r\n            )\r\n        );\r\n    }\r\n\r\n    function migrateCallback(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol fromProtocol,\r\n        IProtocol toProtocol,\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        uint256 borrowedAmount,\r\n        uint256 repayAmount\r\n    ) external onlyCallback {\r\n        _repay(fromProtocol, debt, address(this), borrowedAmount);\r\n        _redeemAll(fromProtocol, collateral);\r\n        _deposit(toProtocol, collateral, collateral.universalBalanceOf(address(this)));\r\n        _borrow(toProtocol, debt, repayAmount);\r\n        _repayFlashLoan(flashLoaner, debt, repayAmount);\r\n    }\r\n\r\n    function convertCollateral(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol protocol,\r\n        IExchange exchange,\r\n        IERC20 fromCollateral,\r\n        IERC20 toCollateral,\r\n        IERC20 debt,\r\n        uint256 minReturn,\r\n        uint256[] calldata dist,\r\n        uint256 disableFlags\r\n    ) external onlyOwner {\r\n        uint256 borrowedAmount = _borrowAmount(protocol, debt, address(this));\r\n\r\n        _flashLoan(\r\n            flashLoaner,\r\n            debt,\r\n            borrowedAmount,\r\n            abi.encodeWithSelector(\r\n                this.convertCollateralCallback.selector,\r\n                flashLoaner,\r\n                protocol,\r\n                exchange,\r\n                fromCollateral,\r\n                toCollateral,\r\n                debt,\r\n                minReturn,\r\n                dist,\r\n                disableFlags,\r\n                borrowedAmount\r\n                // repayAmount added dynamically in executeOperation\r\n            )\r\n        );\r\n    }\r\n\r\n    function convertCollateralCallback(\r\n        IFlashLoan flashLoaner,\r\n        IProtocol protocol,\r\n        IExchange exchange,\r\n        IERC20 fromCollateral,\r\n        IERC20 toCollateral,\r\n        IERC20 debt,\r\n        uint256 minReturn,\r\n        uint256[] calldata dist,\r\n        uint256 disableFlags,\r\n        uint256 borrowedAmount,\r\n        uint256 repayAmount\r\n    ) external onlyCallback {\r\n        _repay(protocol, debt, address(this), borrowedAmount);\r\n        _redeemAll(protocol, fromCollateral);\r\n        _exchange(exchange, fromCollateral, toCollateral, fromCollateral.universalBalanceOf(address(this)), minReturn, dist, disableFlags);\r\n        _deposit(protocol, toCollateral, toCollateral.universalBalanceOf(address(this)));\r\n        _borrow(protocol, debt, repayAmount);\r\n        _repayFlashLoan(flashLoaner, debt, repayAmount);\r\n    }\r\n\r\n    // function convertDebt(\r\n    //     IFlashLoan flashLoaner,\r\n    //     IProtocol protocol,\r\n    //     IExchange exchange,\r\n    //     IERC20 collateral,\r\n    //     IERC20 fromDebt,\r\n    //     IERC20 toDebt,\r\n    //     uint256 minReturn,\r\n    //     uint256[] calldata dist,\r\n    //     uint256 disableFlags\r\n    // ) external onlyOwner {\r\n    //     uint256 borrowedAmount = _borrowAmount(protocol, fromDebt, address(this));\r\n\r\n    //     _flashLoan(\r\n    //         flashLoaner,\r\n    //         debt,\r\n    //         borrowedAmount,\r\n    //         abi.encodeWithSelector(\r\n    //             this.convertDebtCallback.selector,\r\n    //             flashLoaner,\r\n    //             protocol,\r\n    //             exchange,\r\n    //             collateral,\r\n    //             fromDebt,\r\n    //             toDebt,\r\n    //             minReturn,\r\n    //             dist,\r\n    //             disableFlags,\r\n    //             borrowedAmount\r\n    //             // repayAmount added dynamically in executeOperation\r\n    //         )\r\n    //     );\r\n    // }\r\n\r\n    // function convertDebtCallback(\r\n    //     IFlashLoan flashLoaner,\r\n    //     IProtocol protocol,\r\n    //     IExchange exchange,\r\n    //     IERC20 collateral,\r\n    //     IERC20 fromDebt,\r\n    //     IERC20 toDebt,\r\n    //     uint256 minReturn,\r\n    //     uint256[] calldata dist,\r\n    //     uint256 disableFlags,\r\n    //     uint256 borrowedAmount,\r\n    //     uint256 repayAmount\r\n    // ) external onlyCallback {\r\n    //     _repay(protocol, fromDebt, address(this), borrowedAmount);\r\n    //     _borrow(protocol, toDebt, repayAmount);\r\n    //     _exchange(exchange, fromDebt, toDebt, fromDebt.universalBalanceOf(address(this)), minReturn, dist, disableFlags);\r\n    //     _repayFlashLoan(flashLoaner, fromDebt, repayAmount);\r\n    //     // _repay(protocol, toDebt, who, amount);\r\n    // }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"fromCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dist\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"convertCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"fromCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dist\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"convertCollateralCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"fromProtocol\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"toProtocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"fromProtocol\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"toProtocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"migrateCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"}],\"name\":\"moveIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IFlashLoan\",\"name\":\"flashLoaner\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"moveInCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Holder","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://178d0963a34ef853a1d7ebbc9993b55c55f7e5fe6286be012986b8246bbea0f2"}]}