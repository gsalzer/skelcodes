{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: 0.5-contracts/normal_deployment/racing/RacingAdmins.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ncontract RacingAdmins is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _admins;\r\n\r\n    constructor () internal {\r\n        _addAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(_msgSender()), \"AdminRole: caller does not have the Admin role\");\r\n        _;\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins.has(account);\r\n    }\r\n\r\n    function addAdmin(address account) public onlyAdmin {\r\n        _addAdmin(account);\r\n    }\r\n\r\n    function renounceAdmin(address account) public onlyAdmin {\r\n        _removeAdmin(account);\r\n    }\r\n\r\n    function _addAdmin(address account) internal {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _removeAdmin(address account) internal {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: 0.5-contracts/normal_deployment/racing/RacingFeeReceiver.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ncontract RacingFeeReceiver is RacingAdmins {\r\n    address payable private _feeWallet;\r\n\r\n    event FeeWalletTransferred(address indexed previousFeeWallet, address indexed newFeeWallet);\r\n\r\n    /**\r\n     * @dev Returns the address of the current fee receiver.\r\n     */\r\n    function feeWallet() public view returns (address payable) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the fee receiver wallet.\r\n     */\r\n    modifier onlyFeeWallet() {\r\n        require(isFeeWallet(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current fee receiver wallet.\r\n     */\r\n    function isFeeWallet() public view returns (bool) {\r\n        return _msgSender() == _feeWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without fee receiver wallet.\r\n     *\r\n     * NOTE: Renouncing will leave the contract without an fee receiver wallet.\r\n     * It means that fee will be transferred to the zero address.\r\n     */\r\n    function renounceFeeWallet() public onlyAdmin {\r\n        emit FeeWalletTransferred(_feeWallet, address(0));\r\n        _feeWallet = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers address of the fee receiver to a new address (`newFeeWallet`).\r\n     * Can only be called by admins.\r\n     */\r\n    function transferFeeWalletOwnership(address payable newFeeWallet) public onlyAdmin {\r\n        _transferFeeWalletOwnership(newFeeWallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers address of the fee receiver to a new address (`newFeeWallet`).\r\n     */\r\n    function _transferFeeWalletOwnership(address payable newFeeWallet) internal {\r\n        require(newFeeWallet != address(0), \"Ownable: new owner is the zero address\");\r\n        emit FeeWalletTransferred(_feeWallet, newFeeWallet);\r\n        _feeWallet = newFeeWallet;\r\n    }\r\n}\r\n\r\n// File: 0.5-contracts/normal_deployment/racing/RacingStorage.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ncontract RacingStorage is RacingFeeReceiver, ReentrancyGuard {\r\n    // --\r\n    // Permanent Storage Variables\r\n    // --\r\n\r\n    mapping(bytes32 => Race) public Races; // The race mapping structure.\r\n    mapping(uint256 => address) public Owner_Horse; // Owner of the Horse ID.\r\n    mapping(uint256 => uint256) public Horse_Active_Races; // Number of races the horse is registered for.\r\n    mapping(bytes32 => bool) public ID_Saved; // Returns whether or not the race ID is present on storage already.\r\n    mapping(uint256 => uint256) public Position_To_Payment; // Returns the percentage of the payment depending on horse's position in a race.\r\n    mapping(address => bool) public Is_Authorized; // Returns whether an address is authorized or not.\r\n    mapping(bytes32 => string) public Cancelled_Races; // Returns a cancelled race and its reason to be cancelled.\r\n    mapping(bytes32 => bool) public Has_Zed_Claimed; // Returns whether or not winnings for a race have been claimed for Zed.\r\n\r\n    address BB; // Blockchain Brain\r\n    address Core; // Core contract.\r\n\r\n    struct Race {\r\n        string Track_Name; // Name of the track or event.\r\n        bytes32 Race_ID; // Key provided for Race ID.\r\n        uint256 Length; // Length of the track (m).\r\n        uint256 Horses_Registered; // Current number of horses registered.\r\n        uint256 Unix_Start; // Timestamp the race starts.\r\n        uint256 Entrance_Fee; // Entrance fee for a particular race (10^18).\r\n        uint256 Prize_Pool; // Total bets in the prize pool (10^18).\r\n        uint256 Horses_Allowed; // Total number of horses allowed for a race.\r\n        uint256[] Horses; // List of Horse IDs on Race.\r\n        State Race_State; // Current state of the race.\r\n        mapping(uint256 => Horse) Lineup; // Mapping of the Horse ID => Horse struct.\r\n        mapping(uint256 => uint256) Gate_To_ID; // Mapping of the Gate # => Horse ID.\r\n        mapping(uint256 => bool) Is_Gate_Taken; // Whether or not a gate number has been taken.\r\n    }\r\n\r\n    struct Horse {\r\n        uint256 Gate; // Gate this horse is currently at.\r\n        uint256 Total_Bet; // Total amount bet on this horse.\r\n        uint256 Final_Position; // Final position of the horse (1 to Horses allowed in race).\r\n        mapping(address => uint256) Bet_Placed; // Amount a specific address bet on this horse.\r\n        mapping(address => bool) Bet_Claimed; // Whether or not that specific address claimed their bet.\r\n    }\r\n\r\n    enum State {Null, Registration, Betting, Final, Fail_Safe}\r\n}\r\n\r\n// File: 0.5-contracts/normal_deployment/racing/RacingArena.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\ncontract RacingArena is RacingStorage, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // --\r\n    // Events\r\n    // --\r\n\r\n    event BetPlaced(\r\n        bytes32 indexed _raceId,\r\n        address indexed _bettor,\r\n        uint256 _betAmount,\r\n        uint256 indexed _horseID\r\n    );\r\n\r\n    event PrizeClaimed(\r\n        bytes32 indexed _raceId,\r\n        address indexed _bettor,\r\n        uint256 _claimAmount,\r\n        uint256 indexed _horseID\r\n    );\r\n\r\n    event HorseRegistered(\r\n        bytes32 indexed _raceId,\r\n        address indexed _horseOwner,\r\n        uint256 indexed _horseID,\r\n        uint256 _gateNumber\r\n    );\r\n\r\n    event HorseTransferredIn(address indexed _horseOwner, uint256[] _horseIDs);\r\n\r\n    event HorseTransferredOut(address indexed _horseOwner, uint256[] _horseIDs);\r\n\r\n    event RaceCreated(\r\n        bytes32 indexed _raceId,\r\n        string _name,\r\n        uint256 _length,\r\n        uint256 _registrationFee\r\n    );\r\n\r\n    event RaceScheduled(\r\n        bytes32 indexed _raceId,\r\n        uint256 _unixStart,\r\n        string _name\r\n    );\r\n\r\n    event RaceFull(bytes32 indexed _raceId);\r\n\r\n    event ResultsPosted(\r\n        bytes32 indexed _raceId,\r\n        uint256 _firstPlaceHorseID,\r\n        uint256 _secondPlaceHorseID,\r\n        uint256 _thirdPlaceHorseID\r\n    );\r\n\r\n    event RaceCancelled(\r\n        bytes32 indexed _raceId,\r\n        string _reason,\r\n        address _canceller\r\n    );\r\n\r\n    // --\r\n    // Admin Functions\r\n    // --\r\n\r\n    // Admin creates upcoming races, specifying the track name, the track length, and the entrance fee.\r\n    function createRace(\r\n        bytes32 _raceId,\r\n        string memory _name,\r\n        uint256 _horsesAllowed,\r\n        uint256 _entranceFee,\r\n        uint256 _length\r\n    ) public onlyAdmin() nonReentrant() whenNotPaused() {\r\n        // Pre-check and struct inialization.\r\n        require(_entranceFee > 0, \"Entrance fee lower than zero\");\r\n        require(!ID_Saved[_raceId], \"Race ID exists\");\r\n\r\n        Race memory race;\r\n        race.Race_ID = _raceId;\r\n        race.Track_Name = _name;\r\n        race.Horses_Allowed = _horsesAllowed;\r\n        race.Entrance_Fee = _entranceFee;\r\n        race.Length = _length;\r\n        race.Race_State = State.Registration;\r\n\r\n        Races[_raceId] = race;\r\n        ID_Saved[_raceId] = true;\r\n\r\n        // Event trigger.\r\n        emit RaceCreated(_raceId, _name, _length, _entranceFee);\r\n    }\r\n\r\n    // Admin can schedule a race when it's full (12 horses).\r\n    function scheduleRace(bytes32 _raceId, uint256 _startTime)\r\n        public\r\n        onlyAdmin()\r\n        nonReentrant()\r\n    {\r\n        // Prechecks.\r\n        Race storage race = Races[_raceId];\r\n\r\n        require(\r\n            race.Horses_Registered == race.Horses_Allowed,\r\n            \"Not enough horses registered\"\r\n        );\r\n        require(\r\n            race.Race_State == State.Registration,\r\n            \"Race is not in registration state\"\r\n        );\r\n        require(\r\n            _startTime > now + 5 minutes,\r\n            \"Start time doesnt meet criteria\"\r\n        );\r\n\r\n        // State changes.\r\n        race.Unix_Start = _startTime;\r\n        race.Race_State = State.Betting; // State transition from Registration -> Betting.\r\n\r\n        emit RaceScheduled(_raceId, _startTime, race.Track_Name);\r\n    }\r\n\r\n    function initSetup(address _core, address _bb)\r\n        public\r\n        onlyAdmin()\r\n    {\r\n        Position_To_Payment[1] = 60;\r\n        Position_To_Payment[2] = 20;\r\n        Position_To_Payment[3] = 10;\r\n\r\n        BB = _bb;\r\n        Core = _core;\r\n    }\r\n\r\n    function setBbAddress(address _bb)\r\n        public\r\n        onlyAdmin()\r\n    {\r\n        BB = _bb;\r\n    }\r\n\r\n    // Admin posts the result of the race, enabling bettors to claim their winnings.\r\n    /*\r\n    @dev Receives results for a given race, removes 1 active race from the given horses.\r\n    Transitions race state and sends funds to one of the owner addresses as well.\r\n    @param _raceId Race ID we're going to post the results to.\r\n    @param _results List of of horse IDs that participated on the race in position order.\r\n    */\r\n    function postResults(bytes32 _raceId, uint256[12] memory _results)\r\n        public\r\n        onlyAdmin()\r\n        nonReentrant()\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        // Pre-checks\r\n        require(\r\n            race.Race_State == State.Betting,\r\n            \"Race is not on betting state\"\r\n        );\r\n        require(race.Unix_Start <= now + 1 minutes, \"Mismatch on unix start\");\r\n\r\n        race.Race_State = State.Final; // State transition from Betting -> Final.\r\n\r\n        for (uint256 k = 0; k < race.Horses_Allowed; k++) {\r\n            require(race.Lineup[_results[k]].Gate != 0, \"ID not registered\");\r\n        }\r\n\r\n        // Update the Race struct. Active race reduced.\r\n        for (uint256 j = 0; j < race.Horses_Allowed; j++) {\r\n            race.Lineup[_results[j]].Final_Position = j + 1;\r\n            Horse_Active_Races[_results[j]]--;\r\n        }\r\n\r\n        // Duplication post-check.\r\n        for (uint256 i = 0; i < race.Horses_Allowed; i++) {\r\n            require(\r\n                race.Lineup[_results[i]].Final_Position == i + 1,\r\n                \"ID not submitted properly\"\r\n            );\r\n        }\r\n\r\n        // Sends funds to one of Zed's accounts.\r\n        feeWallet().transfer(race.Prize_Pool.mul(10).div(100));\r\n\r\n        emit ResultsPosted(_raceId, _results[0], _results[1], _results[2]);\r\n    }\r\n\r\n    function cancelRace(bytes32 _raceId, string memory _reason)\r\n        public\r\n        onlyAdmin()\r\n        nonReentrant()\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        // Pre-checks.\r\n        require(\r\n            race.Race_State == State.Registration ||\r\n                race.Race_State == State.Betting,\r\n            \"Race not on regs or betting state\"\r\n        );\r\n\r\n        race.Race_State = State.Fail_Safe;\r\n\r\n        Cancelled_Races[_raceId] = _reason;\r\n\r\n        // Loops through the IDs on a race by index and removes them out of an active race.\r\n        for (uint256 i = 0; i < race.Horses_Registered; i++) {\r\n            Horse_Active_Races[race.Horses[i]]--;\r\n        }\r\n\r\n        emit RaceCancelled(_raceId, _reason, msg.sender);\r\n    }\r\n\r\n    // --\r\n    // Public Functions\r\n    // --\r\n\r\n    // Bulk transfers horses into race contract.\r\n    // Limit of 15.\r\n    function bulkTransferIn(uint256[] memory _horseIDs) public nonReentrant() {\r\n        require(_horseIDs.length < 16, \"Only 15 horses allowed per transfer\");\r\n\r\n        for (uint8 i = 0; i < _horseIDs.length; i++) {\r\n            Owner_Horse[_horseIDs[i]] = msg.sender;\r\n            ERC721(Core).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _horseIDs[i]\r\n            );\r\n        }\r\n\r\n        emit HorseTransferredIn(msg.sender, _horseIDs);\r\n    }\r\n\r\n    // Bulk transfers horses out of race contract.\r\n    // Limit of 15.\r\n    function bulkTransferOut(uint256[] memory _horseIDs) public nonReentrant() {\r\n        require(_horseIDs.length < 16, \"Only 15 horses allowed per transfer\");\r\n\r\n        for (uint8 i = 0; i < _horseIDs.length; i++) {\r\n            require(\r\n                Owner_Horse[_horseIDs[i]] == msg.sender,\r\n                \"Caller is not the owner.\"\r\n            );\r\n            require(\r\n                Horse_Active_Races[_horseIDs[i]] == 0,\r\n                \"Horse currently active in a race.\"\r\n            );\r\n\r\n            Owner_Horse[_horseIDs[i]] = address(0);\r\n\r\n            ERC721(Core).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                _horseIDs[i]\r\n            );\r\n        }\r\n\r\n        emit HorseTransferredOut(msg.sender, _horseIDs);\r\n    }\r\n\r\n    // Registers a horse for the selected race. Enacts transfer of the entrance fee, and transfer of the ERC-721 horse.\r\n    function registerHorse(\r\n        bytes32 _raceId,\r\n        uint256 _horseID,\r\n        uint256 _gateNumber\r\n    ) public payable nonReentrant() whenNotPaused() {\r\n        Race storage race = Races[_raceId];\r\n\r\n        // Pre-checks.\r\n        require(msg.value >= race.Entrance_Fee, \"Entrance fee not met\");\r\n        require(\r\n            race.Race_State == State.Registration,\r\n            \"Race not accepting registrations\"\r\n        );\r\n        require(\r\n            race.Horses_Registered < race.Horses_Allowed,\r\n            \"Max number of horses for race\"\r\n        );\r\n        require(_gateNumber >= 1, \"Gate number lower than 1.\");\r\n        require(\r\n            _gateNumber <= race.Horses_Allowed,\r\n            \"Gate number greater than max\"\r\n        );\r\n        require(!race.Is_Gate_Taken[_gateNumber], \"Gate number already taken\");\r\n        require(\r\n            Horse_Active_Races[_horseID] < 3,\r\n            \"Horse currently active in 3 races\"\r\n        );\r\n        require(\r\n            race.Lineup[_horseID].Gate == 0,\r\n            \"Horse already registered for this race\"\r\n        );\r\n        require(\r\n            ERC721(Core).ownerOf(_horseID) == address(this),\r\n            \"Racing contract not owner of horse.\"\r\n        );\r\n\r\n        // Insert a new Horse struct with the appropriate information.\r\n        Horse_Active_Races[_horseID]++;\r\n        race.Horses_Registered++;\r\n        race.Lineup[_horseID] = Horse(_gateNumber, 0, 0);\r\n        race.Gate_To_ID[_gateNumber] = _horseID;\r\n\r\n        // Mark gate number as taken.\r\n        race.Is_Gate_Taken[_gateNumber] = true;\r\n\r\n        // Handle accounting of the registration fee as a bet on their horse.\r\n        race.Prize_Pool += race.Entrance_Fee;\r\n        race.Lineup[_horseID].Total_Bet += race.Entrance_Fee;\r\n        race.Lineup[_horseID].Bet_Placed[msg.sender] += race.Entrance_Fee;\r\n        race.Horses.push(_horseID);\r\n\r\n        if (race.Horses_Registered == race.Horses_Allowed) {\r\n            emit RaceFull(_raceId);\r\n        }\r\n\r\n        emit HorseRegistered(_raceId, msg.sender, _horseID, _gateNumber);\r\n        emit BetPlaced(_raceId, msg.sender, race.Entrance_Fee, _horseID);\r\n    }\r\n\r\n    // function placeBet(bytes32 _raceId, uint _horseID, uint _amount) public nonReentrant() {\r\n    //     Race storage race = Races[_raceId];\r\n\r\n    //     // Pre-checks.\r\n    //     require(race.Race_State == State.Betting, \"Bets are not allowed\");\r\n    //     require(race.Unix_Start > now - 5 minutes, \"The betting period has ended.\");\r\n    //     require(race.Lineup[_horseID].Gate != 0, \"Horse not registered for this race.\");\r\n    //     require(_amount % 1 ether == 0, \"Bet should have no remainder\");\r\n\r\n    //     // Transfer bet and update Race struct.\r\n    //     require(ERC20(DAI).transferFrom(msg.sender, address(this), _amount), \"Caller lacks funds, or contract lacks approval for the bet.\");\r\n\r\n    //     race.Prize_Pool += _amount;\r\n    //     race.Lineup[_horseID].Total_Bet += _amount;\r\n    //     race.Lineup[_horseID].Bet_Placed[msg.sender] += _amount;\r\n\r\n    //     emit BetPlaced(_raceId, msg.sender, _amount, _horseID);\r\n    // }\r\n\r\n    function claimWinningsHelper(bytes32 _raceId, uint256 _horseID)\r\n        public\r\n        nonReentrant()\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        address horseOwner = Owner_Horse[_horseID];\r\n\r\n        // Pre-checks.\r\n        // For now only the owner is able to claim the winnings for a horse.\r\n        require(msg.sender == horseOwner, \"Not horse owner\");\r\n        require(race.Race_State == State.Final, \"Race still running\");\r\n        require(\r\n            !race.Lineup[_horseID].Bet_Claimed[horseOwner],\r\n            \"Winnings have already been claimed\"\r\n        );\r\n\r\n        race.Lineup[_horseID].Bet_Claimed[horseOwner] = true;\r\n\r\n        uint256 horsePosition = race.Lineup[_horseID].Final_Position;\r\n\r\n        // Limit is race's prize pool.\r\n        uint256 toTransfer = race\r\n            .Prize_Pool\r\n            .mul(Position_To_Payment[horsePosition])\r\n            .div(100);\r\n\r\n        msg.sender.transfer(toTransfer);\r\n\r\n        emit PrizeClaimed(_raceId, horseOwner, toTransfer, _horseID);\r\n    }\r\n\r\n    // function reclaimBetHelper(bytes32 _raceId, uint _horseID, address payable _bettor) public nonReentrant() {\r\n    //     Race storage race = Races[_raceId];\r\n\r\n    //     // Pre-checks.\r\n    //     require(race.Race_State == State.Fail_Safe, \"Contract not in fail safe mode\");\r\n    //     require(!race.Lineup[_horseID].Bet_Claimed[_bettor], \"Bet already reclaimed\");\r\n    //     race.Lineup[_horseID].Bet_Claimed[_bettor] = true;\r\n\r\n    //     // Reclaim bet.\r\n    //     uint bet = race.Lineup[_horseID].Bet_Placed[_bettor];\r\n\r\n    //     _bettor.transfer(bet);\r\n\r\n    //     // ? Add an event.\r\n    // }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata)\r\n        external\r\n        pure\r\n        returns (bytes4)\r\n    {\r\n        return\r\n            bytes4(\r\n                keccak256(\"onERC721Received(address,address,uint256,bytes)\")\r\n            );\r\n    }\r\n\r\n    // Small helper function for retreieving the Horse ID based off Gate # (1 - 12, no 0 element).\r\n    function getHorseID(bytes32 _raceId, uint256 _gate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return Races[_raceId].Gate_To_ID[_gate];\r\n    }\r\n\r\n    // Small helper function for retreieving more detailed information about a horse (for Retrieval purposes) based off Gate # (1 - 12, no 0 element).\r\n    function getHorseInfo(bytes32 _raceId, uint256 _gate)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        return (\r\n            race.Gate_To_ID[_gate],\r\n            race.Lineup[race.Gate_To_ID[_gate]].Final_Position\r\n        );\r\n    }\r\n\r\n    // Small helper function for personal bet information based off Gate # (1 - 12, no 0 element).\r\n    function getBetInfo(bytes32 _raceId, uint256 _gate, address _bettor)\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, bool, uint256)\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        return (\r\n            race.Prize_Pool,\r\n            race.Lineup[race.Gate_To_ID[_gate]].Total_Bet,\r\n            race.Lineup[race.Gate_To_ID[_gate]].Bet_Placed[_bettor],\r\n            race.Lineup[race.Gate_To_ID[_gate]].Bet_Claimed[_bettor],\r\n            race.Lineup[race.Gate_To_ID[_gate]].Final_Position\r\n        );\r\n    }\r\n\r\n    function getHorsesInRace(bytes32 _raceId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Race storage race = Races[_raceId];\r\n\r\n        return race.Horses;\r\n    }\r\n\r\n    function getCoreAddress()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return Core;\r\n    }\r\n\r\n    function getBBAddress()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return BB;\r\n    }\r\n\r\n    /*  RESTRICTED  */\r\n    function changePaymentAllocation(uint256 _position, uint256 _percentage)\r\n        public\r\n        onlyAdmin()\r\n    {\r\n        Position_To_Payment[_position] = _percentage;\r\n    }\r\n\r\n    function() external payable {}\r\n}\r\n\r\ninterface ERC721 {\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 indexed _tokenId\r\n    );\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _approved,\r\n        uint256 indexed _tokenId\r\n    );\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function setApprovalForAll(address _to, bool _approved) external;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_gate\",\"type\":\"uint256\"}],\"name\":\"getHorseID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_horseIDs\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_horsesAllowed\",\"type\":\"uint256\"},{\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"createRace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"}],\"name\":\"getHorsesInRace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Cancelled_Races\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ID_Saved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bb\",\"type\":\"address\"}],\"name\":\"setBbAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_horseIDs\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"scheduleRace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_results\",\"type\":\"uint256[12]\"}],\"name\":\"postResults\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changePaymentAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Is_Authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Races\",\"outputs\":[{\"name\":\"Track_Name\",\"type\":\"string\"},{\"name\":\"Race_ID\",\"type\":\"bytes32\"},{\"name\":\"Length\",\"type\":\"uint256\"},{\"name\":\"Horses_Registered\",\"type\":\"uint256\"},{\"name\":\"Unix_Start\",\"type\":\"uint256\"},{\"name\":\"Entrance_Fee\",\"type\":\"uint256\"},{\"name\":\"Prize_Pool\",\"type\":\"uint256\"},{\"name\":\"Horses_Allowed\",\"type\":\"uint256\"},{\"name\":\"Race_State\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_horseID\",\"type\":\"uint256\"},{\"name\":\"_gateNumber\",\"type\":\"uint256\"}],\"name\":\"registerHorse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFeeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_gate\",\"type\":\"uint256\"}],\"name\":\"getHorseInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Owner_Horse\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBBAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"transferFeeWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelRace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_core\",\"type\":\"address\"},{\"name\":\"_bb\",\"type\":\"address\"}],\"name\":\"initSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_gate\",\"type\":\"uint256\"},{\"name\":\"_bettor\",\"type\":\"address\"}],\"name\":\"getBetInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Horse_Active_Races\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Position_To_Payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Has_Zed_Claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"name\":\"_horseID\",\"type\":\"uint256\"}],\"name\":\"claimWinningsHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_bettor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_horseID\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_bettor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_horseID\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_horseOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_horseID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gateNumber\",\"type\":\"uint256\"}],\"name\":\"HorseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_horseOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_horseIDs\",\"type\":\"uint256[]\"}],\"name\":\"HorseTransferredIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_horseOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_horseIDs\",\"type\":\"uint256[]\"}],\"name\":\"HorseTransferredOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_length\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"name\":\"RaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_unixStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"RaceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"}],\"name\":\"RaceFull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_firstPlaceHorseID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_secondPlaceHorseID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_thirdPlaceHorseID\",\"type\":\"uint256\"}],\"name\":\"ResultsPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_canceller\",\"type\":\"address\"}],\"name\":\"RaceCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"RacingArena","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://ff29f9489794267c57c4078e929d282ece975f3d819a0f9ef5df6802186526d1"}]}