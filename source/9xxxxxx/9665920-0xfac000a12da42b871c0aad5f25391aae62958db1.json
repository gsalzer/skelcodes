{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract CounterfactualFactory\r\n{\r\n\tfunction _create2(bytes memory _code, bytes32 _salt)\r\n\tinternal returns(address)\r\n\t{\r\n\t\tbytes memory code = _code;\r\n\t\tbytes32      salt = _salt;\r\n\t\taddress      addr;\r\n\t\t// solium-disable-next-line security/no-inline-assembly\r\n\t\tassembly\r\n\t\t{\r\n\t\t\taddr := create2(0, add(code, 0x20), mload(code), salt)\r\n\t\t\tif iszero(extcodesize(addr)) { revert(0, 0) }\r\n\t\t}\r\n\t\treturn addr;\r\n\t}\r\n\r\n\tfunction _predictAddress(bytes memory _code, bytes32 _salt)\r\n\tinternal view returns (address)\r\n\t{\r\n\t\treturn address(bytes20(keccak256(abi.encodePacked(\r\n\t\t\tbytes1(0xff),\r\n\t\t\taddress(this),\r\n\t\t\t_salt,\r\n\t\t\tkeccak256(_code)\r\n\t\t)) << 0x60));\r\n\t}\r\n}\r\n\r\ncontract GenericFactory is CounterfactualFactory\r\n{\r\n\tevent NewContract(address indexed addr);\r\n\r\n\tfunction predictAddress(bytes memory _code, bytes32 _salt)\r\n\tpublic view returns(address)\r\n\t{\r\n\t\treturn predictAddressWithCall(_code, _salt, bytes(\"\"));\r\n\t}\r\n\r\n\tfunction createContract(bytes memory _code, bytes32 _salt)\r\n\tpublic returns(address)\r\n\t{\r\n\t\treturn createContractAndCall(_code, _salt, bytes(\"\"));\r\n\t}\r\n\r\n\tfunction predictAddressWithCall(bytes memory _code, bytes32 _salt, bytes memory _call)\r\n\tpublic view returns(address)\r\n\t{\r\n\t\treturn _predictAddress(_code, keccak256(abi.encodePacked(_salt, _call)));\r\n\t}\r\n\r\n\tfunction createContractAndCall(bytes memory _code, bytes32 _salt, bytes memory _call)\r\n\tpublic returns(address)\r\n\t{\r\n\t\taddress addr = _create2(_code, keccak256(abi.encodePacked(_salt, _call)));\r\n\t\temit NewContract(addr);\r\n\t\tif (_call.length > 0)\r\n\t\t{\r\n\t\t\t// solium-disable-next-line security/no-low-level-calls\r\n\t\t\t(bool success, bytes memory reason) = addr.call(_call);\r\n\t\t\trequire(success, string(reason));\r\n\t\t}\r\n\t\treturn addr;\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_call\",\"type\":\"bytes\"}],\"name\":\"createContractAndCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_call\",\"type\":\"bytes\"}],\"name\":\"predictAddressWithCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GenericFactory","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://d30d7bad226f3b603fe6d87b4642d706cee02daab1e811fe1e12f76f2718be25"}]}