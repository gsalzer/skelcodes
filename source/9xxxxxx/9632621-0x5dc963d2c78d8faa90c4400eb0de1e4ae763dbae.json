{"status":"1","message":"OK","result":[{"SourceCode":"// File: ../common/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/SmokeSig.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract SmokeSig {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    mapping (bytes32 => uint) public amountBurnedForSignal;\r\n\r\n    event SmokeSignalWithMessage(\r\n        bytes32 indexed _hash,\r\n        address indexed _from,\r\n        uint _burnAmount,\r\n        string _message\r\n    );\r\n\r\n    function smokeSignalWithMessage(string memory _message, uint _burnAmount)\r\n        public\r\n        returns(bytes32)\r\n    {\r\n        bytes32 hash = keccak256(abi.encode(_message));\r\n\r\n        processSmokeSignal(hash, _burnAmount);\r\n\r\n        emit SmokeSignalWithMessage(\r\n            hash,\r\n            msg.sender,\r\n            _burnAmount,\r\n            _message\r\n        );\r\n\r\n        return hash;\r\n    }\r\n\r\n    event SmokeSignalWithoutMessage(\r\n        bytes32 indexed _hash,\r\n        address indexed _from,\r\n        uint _burnAmount\r\n    );\r\n\r\n    function smokeSignalWithHash(bytes32 _hash, uint _burnAmount)\r\n        public\r\n    {\r\n        processSmokeSignal(_hash, _burnAmount);\r\n\r\n        emit SmokeSignalWithoutMessage(\r\n            _hash,\r\n            msg.sender,\r\n            _burnAmount\r\n        );\r\n    }\r\n\r\n    function processSmokeSignal(bytes32 _hash, uint _burnAmount)\r\n        internal\r\n    {\r\n        require(_burnAmount > 0, \"Gotta burn something!\");\r\n        bool burnTransferSuccess = burnFrom(msg.sender, _burnAmount);\r\n        require(burnTransferSuccess, \"The burn did not complete!\");\r\n\r\n        amountBurnedForSignal[_hash] += _burnAmount;\r\n    }\r\n\r\n    function burnFrom(address _who, uint _burnAmount)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        return token.transferFrom(_who, address(0), _burnAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"SmokeSignalWithMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"SmokeSignalWithoutMessage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"amountBurnedForSignal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"smokeSignalWithHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"smokeSignalWithMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmokeSig","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","Library":"","LicenseType":"None","SwarmSource":"ipfs://5bf41473354b0a7b79094322579c98ad24e7cefcbd0bf55583a015600b615c61"}]}