{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  The interface for the curve registry.\n  */\ninterface ICurveRegistry {\n\t// Emitted when a curve is registered\n    event CurveRegisterd(\n        uint256 index,\n        address indexed libraryAddress,\n        string curveFunction\n    );\n\t// Emitted when a curve is registered\n    event CurveActivated(uint256 index, address indexed libraryAddress);\n\t// Emitted when a curve is deactivated\n    event CurveDeactivated(uint256 index, address indexed libraryAddress);\n\n    /**\n      * @dev    Logs the market into the registery.\n      * @param  _libraryAddress: Address of the library.\n      * @param  _curveFunction: Curve title/statement.\n      * @return uint256: Returns the index of market for looking up\n      */\n    function registerCurve(\n        address _libraryAddress,\n        string calldata _curveFunction)\n        external\n        returns(uint256);\n\n    /**\n      * @notice Allows an dmin to set a curves state to inactive. This function\n      *         is for the case of an incorect curve module, or vunrability.\n      * @param  _index: The index of the curve to be set as inactive.\n      */\n    function deactivateCurve(uint256 _index) external;\n\n    /**\n      * @notice Allows an admin to set a curves state to active.\n      * @param  _index: The index of the curve to be set as active.\n      */\n    function reactivateCurve(uint256 _index) external;\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed curves by\n      *         index, kept as interface for later intergration.\n      * @param  _index: Index of the curve library\n      * @return address: The address of the curve\n      */\n    function getCurveAddress(uint256 _index)\n        external\n        view\n        returns(address);\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed curves by\n      *         index, kept as interface for later intergration.\n      * @param  _index: Index of the curve library.\n      * @return address: The address of the math library.\n      * @return string: The function of the curve.\n      * @return bool: The curves active state.\n      */\n    function getCurveData(uint256 _index)\n        external\n        view\n        returns(\n            address,\n            string memory,\n            bool\n        );\n\n    /**\n      * @dev    Fetchs the current number of curves infering maximum callable\n      *         index.\n      * @return uint256: Returns the total number of curves registered.\n      */\n    function getIndex()\n        external\n        view\n        returns(uint256);\n\n    /**\n      * @dev    In order to look up logs efficently, the published block is\n      *         available.\n      * @return uint256: The block when the contract was published\n      */\n    function publishedBlocknumber() external view returns(uint256);\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n\n/**\n  * @title  ModifiedWhitelistAdminRole\n  * @dev    WhitelistAdmins are responsible for assigning and removing \n  *         Whitelisted accounts.\n  */\ncontract ModifiedWhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n    // this is a uint8 rather than a 256 for storage. \n    uint8 internal noOfAdmins_;\n    // Initial admin address \n    address internal initialAdmin_;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n        initialAdmin_ = msg.sender;\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(\n            isWhitelistAdmin(msg.sender), \n            \"ModifiedWhitelistAdminRole: caller does not have the WhitelistAdmin role\"\n        );\n        _;\n    }\n\n    /**\n      * @dev    This allows for the initial admin added to have additional admin\n      *         rights, such as removing another admin. \n      */\n    modifier onlyInitialAdmin() {\n        require(\n            msg.sender == initialAdmin_,\n            \"Only initial admin may remove another admin\"\n        );\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin() {\n        _addWhitelistAdmin(account);\n    }\n\n    /**\n      * @dev    This allows the initial admin to replace themselves as the super\n      *         admin.\n      * @param  account: The address of the new super admin\n      */\n    function addNewInitialAdmin(address account) public onlyInitialAdmin() {\n        if(!isWhitelistAdmin(account)) {\n            _addWhitelistAdmin(account);\n        }\n        initialAdmin_ = account;\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    /**\n      * @dev    Allows the super admin to remover other admins\n      * @param  account: The address of the admin to be removed\n      */\n    function removeWhitelistAdmin(address account) public onlyInitialAdmin() {\n        _removeWhitelistAdmin(account);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        if(!isWhitelistAdmin(account)) {\n            noOfAdmins_ += 1;\n        }\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        noOfAdmins_ -= 1;\n        require(noOfAdmins_ >= 1, \"Cannot remove all admins\");\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n\n    function getAdminCount() public view returns(uint8) {\n        return noOfAdmins_;\n    }\n}\n\n\n/**\n  * @author @veronicaLC (Veronica Coutts) & @RyRy79261 (Ryan Nobel)\n  * @title  Storage of curves and active deployers.\n  */\ncontract CurveRegistry is ICurveRegistry, ModifiedWhitelistAdminRole {\n    // The total number of curves\n    uint256 internal numberOfCurves_ = 0;\n    // The block number when this contract was published\n    uint256 internal publishedBlocknumber_;\n    // The init function can only be called once \n    bool internal isInitialized_  = false;\n\n    // Mapping of all the curves deployed by their index\n    mapping(uint256 => CurveOption) internal curveContracts_;\n\n    // The information stored about each curve\n    struct CurveOption{\n        address libraryAddress;\n        string curveFunction;\n        bool active;\n    }\n\n    /**\n      * @notice The deployer of this contract will be the admin.\n      */\n    constructor() public ModifiedWhitelistAdminRole() {\n        publishedBlocknumber_ = block.number;\n    }\n\n    function init(address _admin) public onlyWhitelistAdmin() {\n        require(!isInitialized_, \"Contract is initialized\");\n        super.addNewInitialAdmin(_admin);\n        super.renounceWhitelistAdmin();\n        isInitialized_ = true;\n    }\n\n    /**\n      * @dev    Logs the market into the registery.\n      * @param  _libraryAddress: Address of the library.\n      * @param  _curveFunction: Curve title/statement.\n      * @return uint256: Returns the index of market for looking up\n      */\n    function registerCurve(\n        address _libraryAddress,\n        string calldata _curveFunction)\n        external\n        onlyWhitelistAdmin()\n        returns(uint256)\n    {\n        require(\n            address(_libraryAddress) != address(0),\n            \"Address cannot be 0\"\n        );\n        \n        uint256 index = numberOfCurves_;\n        numberOfCurves_ = numberOfCurves_ + 1;\n\n        curveContracts_[index].libraryAddress = _libraryAddress;\n        curveContracts_[index].curveFunction = _curveFunction;\n        curveContracts_[index].active = true;\n\n        emit CurveRegisterd(\n            index,\n            _libraryAddress,\n            _curveFunction\n        );\n\n        return index;\n    }\n\n    /**\n      * @notice Allows an dmin to set a curves state to inactive. This function\n      *         is for the case of an incorect curve module, or vunrability.\n      * @param  _index: The index of the curve to be set as inactive.\n      */\n    function deactivateCurve(uint256 _index) external onlyWhitelistAdmin() {\n        require(\n            curveContracts_[_index].active == true,\n            \"Curve already deactivated\"\n        );\n        require(\n            curveContracts_[_index].libraryAddress != address(0),\n            \"Curve not registered\"\n        );\n\n        curveContracts_[_index].active = false;\n\n        emit CurveDeactivated(_index, curveContracts_[_index].libraryAddress);\n    }\n\n    /**\n      * @notice Allows an admin to set a curves state to active.\n      * @param  _index: The index of the curve to be set as active.\n      */\n    function reactivateCurve(uint256 _index) external onlyWhitelistAdmin() {\n        require(\n            curveContracts_[_index].active == false,\n            \"Curve already activated\"\n        );\n        require(\n            curveContracts_[_index].libraryAddress != address(0),\n            \"Curve not registered\"\n        );\n        \n        curveContracts_[_index].active = true;\n        \n        emit CurveActivated(_index, curveContracts_[_index].libraryAddress);\n    }\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed curves by\n      *         index, kept as interface for later intergration.\n      * @param  _index: Index of the curve library\n      * @return address: The address of the curve\n      */\n    function getCurveAddress(uint256 _index)\n        external\n        view\n        returns(address)\n    {\n        return curveContracts_[_index].libraryAddress;\n    }\n\n    /**\n      * @dev    Fetches all data and contract addresses of deployed curves by\n      *         index, kept as interface for later intergration.\n      * @param  _index: Index of the curve library.\n      * @return address: The address of the math library.\n      * @return string: The function of the curve.\n      * @return bool: The curves active state.\n      */\n    function getCurveData(uint256 _index)\n        external\n        view\n        returns(\n            address,\n            string memory,\n            bool\n        )\n    {\n        return (\n            curveContracts_[_index].libraryAddress,\n            curveContracts_[_index].curveFunction,\n            curveContracts_[_index].active\n        );\n    }\n\n    /**\n      * @dev    Fetchs the current number of curves infering maximum callable\n      *         index.\n      * @return uint256: Returns the total number of curves registered.\n      */\n    function getIndex()\n        external\n        view\n        returns(uint256)\n    {\n        return numberOfCurves_;\n    }\n\n    /**\n      * @dev    In order to look up logs efficently, the published block is\n      *         available.\n      * @return uint256: The block when the contract was published\n      */\n    function publishedBlocknumber() external view returns(uint256) {\n        return publishedBlocknumber_;\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addNewInitialAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurveData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"reactivateCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_libraryAddress\",\"type\":\"address\"},{\"name\":\"_curveFunction\",\"type\":\"string\"}],\"name\":\"registerCurve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publishedBlocknumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deactivateCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"libraryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curveFunction\",\"type\":\"string\"}],\"name\":\"CurveRegisterd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CurveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CurveDeactivated\",\"type\":\"event\"}]","ContractName":"CurveRegistry","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://f3ff5c3a6aadc43cff12eb34756c6992e11d2276fafd0311ee506f1592e1f491"}]}