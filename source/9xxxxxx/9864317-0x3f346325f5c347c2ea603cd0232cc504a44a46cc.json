{"status":"1","message":"OK","result":[{"SourceCode":"interface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\ninterface OneSplit {\r\n    function swap(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256[] calldata,\r\n        uint256\r\n    )\r\n        external\r\n        payable;\r\n    function getExpectedReturn(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, uint256[] memory);\r\n}\r\n\r\ncontract Test {\r\n    address internal constant ONE_SPLIT = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n\r\n    function getReturn(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256, uint256[] memory)\r\n    {\r\n        OneSplit oneSplit = OneSplit(ONE_SPLIT);\r\n        uint256 amount = ethAmount > 0 ? ethAmount : tokenAmount;\r\n        uint256 returnAmount;\r\n        uint256[] memory distribution;\r\n        (returnAmount, distribution) = oneSplit.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            1,\r\n            0\r\n        );\r\n    }\r\n    \r\n    function getReturnAndSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256, uint256[] memory)\r\n    {\r\n        OneSplit oneSplit = OneSplit(ONE_SPLIT);\r\n        uint256 amount = ethAmount > 0 ? ethAmount : tokenAmount;\r\n        uint256 returnAmount;\r\n        uint256[] memory distribution;\r\n        (returnAmount, distribution) = oneSplit.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            1,\r\n            0\r\n        );\r\n        oneSplit.swap.value(ethAmount)(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            1,\r\n            distribution,\r\n            0\r\n        );\r\n        ERC20(toToken).transfer(msg.sender, ERC20(toToken).balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getReturnAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Test","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://5de2fd816113418d3b0484d16f8a9d45d4fcc6bf0c54f9b46b59390f0cf83964"}]}