{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\npragma solidity 0.5.2;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap; // solium-disable-line mixedcase\r\n}\r\n\r\n\r\n/**\r\n * @title Adminable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Adminable is Initializable {\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, fails.\r\n   */\r\n  modifier ifAdmin() {\r\n    require(msg.sender == _admin(), \"sender not admin\");\r\n    _;\r\n  }\r\n\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  function implementation() external view returns (address impl) {\r\n    bytes32 slot = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract Bridge is Adminable {\r\n\r\n\r\n  struct Period {\r\n    uint32 height;            // the height of last block in period\r\n    uint32 timestamp;         // the block.timestamp at submission of period\r\n    uint32 parentBlockNumber; // the block.number at submission of period\r\n    bytes32 parentBlockHash;  // the blockhash(block.number -1) at submission of period\r\n  }\r\n\r\n  address public operator; // the operator contract\r\n\r\n  mapping(bytes32 => Period) public periods;\r\n\r\n}\r\n\r\ncontract Vault {\r\n\r\n\r\n  function getTokenAddr(uint16 _color) public view returns (address) {\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract SwapExchange {\r\n\r\n  address factory;\r\n  address token;\r\n  address nativeToken;\r\n  bytes32 public name;\r\n  bytes32 public symbol;\r\n  uint256 public decimals;\r\n\r\n  function setup(address _nativeToken, address _tokenAddr) public {\r\n    require(factory == address(0) && token == address(0), \"setup can only be executed once\");\r\n    require(_nativeToken != address(0), \"tokenAddr not valid\");\r\n    require(_tokenAddr != address(0), \"tokenAddr not valid\");\r\n    factory = msg.sender;\r\n    token = _tokenAddr;\r\n    nativeToken = _nativeToken;\r\n    name = 0x4c65617020537761702056310000000000000000000000000000000000000000;   // Leap Swap V1\r\n    symbol = 0x4c4541502d563100000000000000000000000000000000000000000000000000; // LEAP-V1\r\n    decimals = 18;\r\n  }\r\n\r\n  // to be implemented\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SwapRegistryMigration is Adminable {\r\n  using SafeMath for uint256;\r\n\r\n  // Claim Related\r\n  Bridge bridge;\r\n  Vault vault;\r\n  uint256 constant maxTax = 1000; // 100%\r\n  uint256 taxRate; // as perMil (1000 == 100%, 1 == 0.1%)\r\n  uint256 constant inflationFactor = 10 ** 15;\r\n  uint256 constant maxInflation = 2637549827; // the x from (1 + x*10^-18)^(30 * 24 * 363) = 2\r\n  uint256 inflationRate; // between 0 and maxInflation/inflationFactor\r\n  uint256 constant poaSupplyTarget = 7000000 * 10 ** 18;\r\n  uint256 poaReward;\r\n  mapping(uint256 => uint256) public slotToHeight;\r\n\r\n  function initialize(\r\n    address _bridge,\r\n    address _vault,\r\n    uint256 _poaReward\r\n  ) public initializer {\r\n    require(_bridge != address(0), \"invalid bridge address\");\r\n    bridge = Bridge(_bridge);\r\n    require(_bridge != address(0), \"invalid vault address\");\r\n    vault = Vault(_vault);\r\n    // todo: check that this contract is admin of token;\r\n    taxRate = maxTax;\r\n    inflationRate = maxInflation;\r\n    poaReward = _poaReward;\r\n  }\r\n\r\n  function claim(\r\n    uint256 _slotId,\r\n    bytes32[] memory _consensusRoots,\r\n    bytes32[] memory _cas,\r\n    bytes32[] memory _validatorData,\r\n    bytes32[] memory _rest\r\n  ) public {\r\n    uint256 maxHeight = slotToHeight[_slotId];\r\n    uint32 claimCount = 0;\r\n    for (uint256 i = 0; i < _consensusRoots.length; i += 1) {\r\n      require(_slotId == uint256(_validatorData[i] >> 160), \"unexpected slotId\");\r\n      require(msg.sender == address(uint160(uint256(_validatorData[i]))), \"unexpected claimant\");\r\n      uint256 height;\r\n      bytes32 left = _validatorData[i];\r\n      bytes32 right = _rest[i];\r\n      assembly {\r\n        mstore(0, left)\r\n        mstore(0x20, right)\r\n        right := keccak256(0, 0x40)\r\n      }\r\n      left = _cas[i];\r\n      assembly {\r\n        mstore(0, left)\r\n        mstore(0x20, right)\r\n        right := keccak256(0, 0x40)\r\n      }\r\n      left = _consensusRoots[i];\r\n      assembly {\r\n        mstore(0, left)\r\n        mstore(0x20, right)\r\n        right := keccak256(0, 0x40)\r\n      }\r\n      (height ,,,) = bridge.periods(right);\r\n      require(height > maxHeight, \"unorderly claim\");\r\n      maxHeight = height;\r\n      claimCount += 1;\r\n    }\r\n    slotToHeight[_slotId] = maxHeight;\r\n    ERC20Mintable token = ERC20Mintable(vault.getTokenAddr(0));\r\n    uint256 total = token.totalSupply();\r\n    uint256 staked = token.balanceOf(bridge.operator());\r\n\r\n    // calculate reward according to:\r\n    // https://ethresear.ch/t/riss-reflexive-inflation-through-staked-supply/3633\r\n    uint256 reward = total.mul(inflationRate).div(inflationFactor);\r\n    if (staked > total.div(2)) {\r\n      reward = reward.mul(total.sub(staked).mul(staked).mul(4)).div(total);\r\n    }\r\n    if (total < poaSupplyTarget) {\r\n      reward = poaReward;\r\n    }\r\n    reward = reward.mul(claimCount);\r\n    uint256 tax = reward.mul(taxRate).div(maxTax);  // taxRate perMil (1000 == 100%, 1 == 0.1%)\r\n    // mint tokens\r\n    token.mint(msg.sender, reward.sub(tax));\r\n    token.mint(bridge.admin(), tax);\r\n  }\r\n\r\n  // Governance Params\r\n\r\n  function getTaxRate() public view returns(uint256) {\r\n    return taxRate;\r\n  }\r\n\r\n  function setTaxRate(uint256 _taxRate) public ifAdmin {\r\n    require(_taxRate <= maxTax, \"tax rate can not be more than 100%\");\r\n    taxRate = _taxRate;\r\n  }\r\n\r\n  function getInflationRate() public view returns(uint256) {\r\n    return inflationRate;\r\n  }\r\n\r\n  function setInflationRate(uint256 _inflationRate) public ifAdmin {\r\n    require(_inflationRate < maxInflation, \"inflation too high\");\r\n    inflationRate = _inflationRate;\r\n  }\r\n\r\n  // Swap Exchanges\r\n\r\n  event NewExchange(address indexed token, address indexed exchange);\r\n  mapping(address => address) tokenToExchange;\r\n  mapping(address => address) exchangeToToken;\r\n  address exchangeCodeAddr;\r\n\r\n  function createExchange(address _token) public returns (address) {\r\n    require(_token != address(0), \"invalid token address\");\r\n    address nativeToken = vault.getTokenAddr(0);\r\n    require(_token != nativeToken, \"token can not be nativeToken\");\r\n    require(tokenToExchange[_token] == address(0), \"exchange already created\");\r\n    address exchange = createClone(exchangeCodeAddr);\r\n    SwapExchange(exchange).setup(nativeToken, _token);\r\n    tokenToExchange[_token] = exchange;\r\n    exchangeToToken[exchange] = _token;\r\n    emit NewExchange(_token, exchange);\r\n    return exchange;\r\n  }\r\n\r\n  function getExchangeCodeAddr() public view returns(address) {\r\n    return exchangeCodeAddr;\r\n  }\r\n\r\n  function setExchangeCodeAddr(address _exchangeCodeAddr) public ifAdmin {\r\n    exchangeCodeAddr = _exchangeCodeAddr;\r\n  }\r\n\r\n  function getExchange(address _token) public view returns(address) {\r\n    return tokenToExchange[_token];\r\n  }\r\n\r\n  function getToken(address _exchange) public view returns(address) {\r\n    return exchangeToToken[_exchange];\r\n  }\r\n\r\n  function createClone(address target) internal returns (address result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n      mstore(add(clone, 0x14), targetBytes)\r\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n      result := create(0, clone, 0x37)\r\n    }\r\n  }\r\n\r\n  modifier onlyMultisig() {\r\n    require(msg.sender == 0xC5cDcD5470AEf35fC33BDDff3f8eCeC027F95B1d, \"msg.sender not multisig\");\r\n    _;\r\n  }\r\n\r\n  function transferMinter() public onlyMultisig {\r\n    ERC20Mintable token = ERC20Mintable(vault.getTokenAddr(0));\r\n    token.addMinter(msg.sender);\r\n    token.renounceMinter();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_consensusRoots\",\"type\":\"bytes32[]\"},{\"name\":\"_cas\",\"type\":\"bytes32[]\"},{\"name\":\"_validatorData\",\"type\":\"bytes32[]\"},{\"name\":\"_rest\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeCodeAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_poaReward\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotToHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInflationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeCodeAddr\",\"type\":\"address\"}],\"name\":\"setExchangeCodeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inflationRate\",\"type\":\"uint256\"}],\"name\":\"setInflationRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaxRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"NewExchange\",\"type\":\"event\"}]","ContractName":"SwapRegistryMigration","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","Library":"","LicenseType":"MPL-2.0","SwarmSource":"bzzr://a8216590ed8c5340d5b7a705eba19e9b1a703547e185ccca5d20a6b4538518b3"}]}