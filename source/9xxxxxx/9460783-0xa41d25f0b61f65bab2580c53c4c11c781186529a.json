{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nc = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn a / b;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nc = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\n/**\r\n* @title Math\r\n* @dev Assorted math operations\r\n*/\r\nlibrary Math {\r\nfunction max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\nreturn a >= b ? a : b;\r\n}\r\n\r\nfunction min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\nreturn a < b ? a : b;\r\n}\r\n\r\nfunction max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a >= b ? a : b;\r\n}\r\n\r\nfunction min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a < b ? a : b;\r\n}\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender)\r\npublic view returns (uint256);\r\n\r\nfunction transferFrom(address from, address to, uint256 value)\r\npublic returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances.\r\n*/\r\ncontract BasicToken is ERC20Basic {\r\nusing SafeMath for uint256;\r\nmapping(address => uint256) balances;\r\n\r\nuint256 totalSupply_;\r\n\r\n/**\r\n* @dev total number of tokens in existence\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n}\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address _owner) public view returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n\r\n}\r\n\r\n/**\r\n* @title Burnable Token\r\n* @dev Token that can be irreversibly burned (destroyed).\r\n*/\r\ncontract BurnableToken is BasicToken {\r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\n/**\r\n* @dev Burns a specific amount of tokens.\r\n* @param _value The amount of token to be burned.\r\n*/\r\nfunction burn(uint256 _value) public {\r\n_burn(msg.sender, _value);\r\n}\r\n\r\nfunction _burn(address _who, uint256 _value) internal {\r\nrequire(_value <= balances[_who]);\r\n// no need to require value <= totalSupply, since that would imply the\r\n// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\nbalances[_who] = balances[_who].sub(_value);\r\ntotalSupply_ = totalSupply_.sub(_value);\r\nemit Burn(_who, _value);\r\nemit Transfer(_who, address(0), _value);\r\n}\r\n}\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\nmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n*\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\nfunction allowance(\r\naddress _owner,\r\naddress _spender\r\n)\r\npublic\r\nview\r\nreturns (uint256)\r\n{\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n/**\r\n* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To increment\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _addedValue The amount of tokens to increase the allowance by.\r\n*/\r\nfunction increaseApproval(\r\naddress _spender,\r\nuint _addedValue\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nallowed[msg.sender][_spender] = (\r\nallowed[msg.sender][_spender].add(_addedValue));\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To decrement\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n*/\r\nfunction decreaseApproval(\r\naddress _spender,\r\nuint _subtractedValue\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nuint oldValue = allowed[msg.sender][_spender];\r\nif (_subtractedValue > oldValue) {\r\nallowed[msg.sender][_spender] = 0;\r\n} else {\r\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n}\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n}\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\naddress public owner;\r\naddress public tokenManager;\r\n\r\n\r\nevent OwnershipRenounced(address indexed previousOwner);\r\nevent OwnershipTransferred(\r\naddress indexed previousOwner,\r\naddress indexed newOwner\r\n);\r\nevent MagegerTransferred(\r\naddress indexed previousManager,\r\naddress indexed newManager\r\n);\r\n\r\n\r\n\r\n/**\r\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n* account.\r\n*/\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyManager() {\r\nrequire(msg.sender == tokenManager);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n* @param newOwner The address to transfer ownership to.\r\n*/\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\nrequire(newOwner != address(0));\r\nemit OwnershipTransferred(owner, newOwner);\r\nowner = newOwner;\r\n}\r\n\r\n/**\r\n\r\n\r\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n* @param newManager The address to transfer managerShip to.\r\n*/\r\nfunction transferTokenManager(address newManager) public onlyOwner {\r\nrequire(newManager != address(0));\r\nemit MagegerTransferred(tokenManager, newManager);\r\ntokenManager = newManager;\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to relinquish control of the contract.\r\n*/\r\nfunction renounceOwnership() public onlyOwner {\r\nemit OwnershipRenounced(owner);\r\nowner = address(0);\r\n}\r\n\r\n}\r\n\r\n/**\r\n* @title Mintable token\r\n* @dev Simple ERC20 Token example, with mintable token creation\r\n* @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n*/\r\ncontract MintableToken is StandardToken, Ownable {\r\nevent Mint(address indexed to, uint256 amount);\r\nevent MintFinished();\r\nuint256 public maxMint=25000000000000000000000000000;\r\n\r\nbool public mintingFinished = false;\r\n\r\n\r\nmodifier canMint() {\r\nrequire(!mintingFinished);\r\n_;\r\n}\r\n\r\nmodifier hasMintPermission() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Function to mint tokens\r\n* @param _to The address that will receive the minted tokens.\r\n* @param _amount The amount of tokens to mint.\r\n* @return A boolean that indicates if the operation was successful.\r\n*/\r\nfunction mint(\r\naddress _to,\r\nuint256 _amount\r\n)\r\nhasMintPermission\r\ncanMint\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(maxMint >= totalSupply_.add(_amount));\r\ntotalSupply_ = totalSupply_.add(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nemit Mint(_to, _amount);\r\nemit Transfer(address(0), _to, _amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to stop minting new tokens.\r\n* @return True if the operation was successful.\r\n*/\r\nfunction finishMinting() onlyOwner canMint public returns (bool) {\r\nmintingFinished = true;\r\nemit MintFinished();\r\nreturn true;\r\n}\r\n}\r\n\r\ncontract Pausable is Ownable {\r\nevent Pause();\r\nevent Unpause();\r\n\r\nbool public paused = false;\r\n\r\n\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is not paused.\r\n*/\r\nmodifier whenNotPaused() {\r\nrequire(!paused);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is paused.\r\n*/\r\nmodifier whenPaused() {\r\nrequire(paused);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev called by the owner to pause, triggers stopped state\r\n*/\r\nfunction pause() onlyOwner whenNotPaused public {\r\npaused = true;\r\nemit Pause();\r\n}\r\n\r\n/**\r\n* @dev called by the owner to unpause, returns to normal state\r\n*/\r\nfunction unpause() onlyOwner whenPaused public {\r\npaused = false;\r\nemit Unpause();\r\n}\r\n}\r\ncontract ManagedToken is StandardToken, Ownable {\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction managedTransferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nonlyManager\r\nreturns (bool)\r\n{\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[_from]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\nfunction transfer(\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nwhenNotPaused\r\nreturns (bool)\r\n{\r\nreturn super.transfer(_to, _value);\r\n}\r\n\r\nfunction transferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nwhenNotPaused\r\nreturns (bool)\r\n{\r\nreturn super.transferFrom(_from, _to, _value);\r\n}\r\n\r\nfunction approve(\r\naddress _spender,\r\nuint256 _value\r\n)\r\npublic\r\nwhenNotPaused\r\nreturns (bool)\r\n{\r\nreturn super.approve(_spender, _value);\r\n}\r\n\r\nfunction increaseApproval(\r\naddress _spender,\r\nuint _addedValue\r\n)\r\npublic\r\nwhenNotPaused\r\nreturns (bool success)\r\n{\r\nreturn super.increaseApproval(_spender, _addedValue);\r\n}\r\n\r\nfunction decreaseApproval(\r\naddress _spender,\r\nuint _subtractedValue\r\n)\r\npublic\r\nwhenNotPaused\r\nreturns (bool success)\r\n{\r\nreturn super.decreaseApproval(_spender, _subtractedValue);\r\n}\r\n}\r\n/**\r\n* @title SampleCrowdsaleToken\r\n* @dev Very simple ERC20 Token that can be minted.\r\n* It is meant to be used in a crowdsale contract.\r\n*/\r\ncontract IMEX is MintableToken,PausableToken,BurnableToken,ManagedToken {\r\n\r\n// solium-disable-next-line uppercase\r\nstring public constant name = \"IMEX\";\r\nstring public constant symbol = \"IMEX\"; // solium-disable-line uppercase\r\nuint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"MagegerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"managedTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IMEX","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://bd0872b0bec23743be61c5e8e21249205480afaabc5347508174ceb529653f63"}]}