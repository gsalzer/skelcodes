{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return True if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title GLDS\r\n * @dev ERC20 Token\r\n */\r\n\r\ncontract GLDS is IERC20, Ownable, ReentrancyGuard, Pausable  {\r\n   using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => bool) private status;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _initSupply;\r\n    // Address Admin\r\n     address private _walletAdmin;\r\n    // Address where ETH  can be collected\r\n     address payable _walletFund;\r\n    // Address where tokens for 25% bonus can be collected\r\n     address private _walletB25;\r\n    // Address where tokens for 20% bonus can be collected\r\n     address private _walletB20;\r\n     // Address where tokens for 10% bonus can be collected\r\n     address private _walletB10;\r\n     // Amount of wei raised\r\n     uint256 private _weiRaised;\r\n     // Min wei qty required to buy\r\n     uint256 private _minWeiQty;\r\n     // Max wei qty required to buy\r\n     uint256 private _maxWeiQty;\r\n     // Payment info\r\n     struct Payment{\r\n         uint256 index; // index start 1 to keyList.length\r\n         uint256 valueETH;\r\n     }\r\n     // Awaiting list for GLDS tokens after payment. Iterable mapping\r\n     mapping(address => Payment) internal awaitGLDS;\r\n     address[] internal keyList;\r\n     // Bonus 25% info\r\n     struct B25{\r\n         uint256 index; // index start 1 to keyList.length\r\n         uint256 valueGLDS;\r\n     }\r\n     // Awaiting list for Bonus 25%. Iterable mapping\r\n     mapping(address => B25) internal awaitB25;\r\n     address[] internal keyListB25;\r\n     // Bonus 20% info\r\n     struct B20{\r\n         uint256 index; // index start 1 to keyList.length\r\n         uint256 valueGLDS;\r\n     }\r\n     // Awaiting list for Bonus 20%. Iterable mapping\r\n     mapping(address => B20) internal awaitB20;\r\n     address[] internal keyListB20;\r\n     // Bonus 10% info\r\n     struct B10{\r\n         uint256 index; // index start 1 to keyList.length\r\n         uint256 valueGLDS;\r\n     }\r\n     // Awaiting list for Bonus 20%. Iterable mapping\r\n     mapping(address => B10) internal awaitB10;\r\n     address[] internal keyListB10;\r\n\r\n     /**\r\n      * @dev Internal function that mints an amount of the token and assigns it to\r\n      * an account. This encapsulates the modification of balances such that the\r\n      * proper events are emitted.\r\n      * @param account The account that will receive the created tokens.\r\n      * @param value The amount that will be created.\r\n      */\r\n     function _mint(address account, uint256 value) internal {\r\n         require(account != address(0));\r\n         _totalSupply = _totalSupply.add(value);\r\n         _balances[account] = _balances[account].add(value);\r\n         emit Transfer(address(0), account, value);\r\n     }\r\n\r\n     /**\r\n       * @dev Function to mint tokens.onlyOwner\r\n       * @param to The address that will receive the minted tokens.\r\n       * @param value The amount of tokens to mint.\r\n       * @return A boolean that indicates if the operation was successful.\r\n       */\r\n      function mint(address to, uint256 value) public onlyOwner returns (bool) {\r\n          _mint(to, value);\r\n          return true;\r\n      }\r\n\r\n     constructor (string memory name, string memory symbol, uint8 decimals, uint256 initSupply) public {\r\n         _name = name;\r\n         _symbol = symbol;\r\n         _decimals = decimals;\r\n         _initSupply = initSupply.mul(10 **uint256(decimals));\r\n         _mint(msg.sender, _initSupply);\r\n     }\r\n\r\n     /**\r\n      * @return the name of the token.\r\n      */\r\n     function name() public view returns (string memory) {\r\n         return _name;\r\n     }\r\n\r\n     /**\r\n      * @return the symbol of the token.\r\n      */\r\n     function symbol() public view returns (string memory) {\r\n         return _symbol;\r\n     }\r\n\r\n     /**\r\n      * @return the number of decimals of the token.\r\n      */\r\n     function decimals() public view returns (uint8) {\r\n         return _decimals;\r\n     }\r\n     /**\r\n      * @return the initial Supply of the token.\r\n      */\r\n     function initSupply() public view returns (uint256) {\r\n         return _initSupply;\r\n     }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        require(value <= _balances[account]);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n      * @dev Function to burn tokens.onlyOwner\r\n      * @param from The address to burn tokens.\r\n      * @param value The amount of tokens to burn.\r\n      * @return A boolean that indicates if the operation was successful.\r\n      */\r\n     function burn(address from, uint256 value) public onlyOwner returns (bool) {\r\n         _burn(from, value);\r\n         return true;\r\n     }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(value <= _balances[from]);\r\n        if (from == _walletB25){addB25(to, value);}\r\n        if (from == _walletB20){addB20(to, value);}\r\n        if (from == _walletB10){addB10(to, value);}\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address.onlyOwner\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transferOwner(address to, uint256 value) public onlyOwner returns (bool) {\r\n        require(value > 0);\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        require(from != address(0));\r\n        require(value <= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.onlyAdmin\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferAdminFrom(address from, address to, uint256 value) public onlyAdmin returns (bool) {\r\n        require(from != address(0));\r\n        require(value <= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n     * @dev check an account's status\r\n     * @return bool\r\n     */\r\n    function checkStatus(address account) public view returns (bool) {\r\n        require(account != address(0));\r\n        bool currentStatus = status[account];\r\n        return currentStatus;\r\n    }\r\n\r\n    /**\r\n     * @dev change an account's status. OnlyOwner\r\n     * @return bool\r\n     */\r\n    function changeStatus(address account) public  onlyOwner {\r\n        require(account != address(0));\r\n        bool currentStatus1 = status[account];\r\n       status[account] = (currentStatus1 == true) ? false : true;\r\n    }\r\n\r\n   /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer fund with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    function () external payable {\r\n        payTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    function payTokens(address beneficiary, uint256 weiAmount) public nonReentrant payable {\r\n        // check beneficiary\r\n        require(beneficiary != address(0));\r\n        require(checkStatus(beneficiary) != true);\r\n        // check weiAmount\r\n        require(weiAmount > 0);\r\n        require(weiAmount >= _minWeiQty);\r\n        require(weiAmount <= _maxWeiQty);\r\n        // check _walletFund\r\n        require(_walletFund != address(0));\r\n        // transfer 100% weiAmount to _walletFund\r\n        _walletFund.transfer(weiAmount);\r\n        // update state\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n        // add beneficiary to awaiting list for GLDS tokens\r\n        addPay(beneficiary, weiAmount);\r\n\r\n    }\r\n\r\n    function transferTokens(uint256 rateX, uint256 rateY) public onlyAdmin returns (bool) {\r\n      uint len = keyList.length;\r\n      for (uint i = 0; i < len; i++) {\r\n      address beneficiary = keyList[i];\r\n      uint256 qtyWei = awaitGLDS[keyList[i]].valueETH;\r\n      uint256 qtyGLDS = qtyWei.div(rateY).mul(rateX);\r\n      uint256 FromWalletB25 = (balanceOf(_walletB25) <= qtyGLDS)? balanceOf(_walletB25) : qtyGLDS;\r\n      qtyGLDS -= FromWalletB25;\r\n      uint256 FromWalletB20 = (balanceOf(_walletB20) <= qtyGLDS)? balanceOf(_walletB20) : qtyGLDS;\r\n      qtyGLDS -= FromWalletB20;\r\n      uint256 FromWalletB10 = (balanceOf(_walletB10) <= qtyGLDS)? balanceOf(_walletB10) : qtyGLDS;\r\n      qtyGLDS -= FromWalletB10;\r\n      if (FromWalletB25 > 0){transferFrom(_walletB25, beneficiary, FromWalletB25);}\r\n      if (FromWalletB20 > 0){transferFrom(_walletB20, beneficiary, FromWalletB20);}\r\n      if (FromWalletB10 > 0){transferFrom(_walletB10, beneficiary, FromWalletB10);}\r\n      qtyWei = qtyGLDS.div(rateX).mul(rateY);\r\n      awaitGLDS[keyList[i]].valueETH = qtyWei;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Set _walletFund for ETH collected. onlyOwner\r\n     */\r\n    function setWalletFund(address payable WalletFund) public onlyOwner returns (bool){\r\n       require(WalletFund != address(0));\r\n        _walletFund = WalletFund;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the _walletFund.\r\n     */\r\n    function walletFund() public view returns (address) {\r\n        return _walletFund;\r\n    }\r\n\r\n    /**\r\n     * Set the _walletAdmin. onlyOwner\r\n     */\r\n    function setWalletAdmin(address WalletAdmin) public onlyOwner returns (bool){\r\n        require(WalletAdmin != address(0));\r\n        _walletAdmin = WalletAdmin;\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @return the _walletAdmin.\r\n     */\r\n    function walletAdmin() public view returns (address) {\r\n        return _walletAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the admin.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the admin of the contract.\r\n     */\r\n    function isAdmin() public view returns (bool) {\r\n        return msg.sender == _walletAdmin;\r\n    }\r\n\r\n    /**\r\n     * Set _walletB25, _walletB20, _walletB10 for GLDS collected. onlyOwner\r\n     */\r\n    function setWalletsTokenSale(address WalletB25, address WalletB20, address WalletB10) public onlyOwner returns (bool){\r\n        require(WalletB25 != address(0));\r\n        require(WalletB20 != address(0));\r\n        require(WalletB10 != address(0));\r\n        _walletB25 = WalletB25;\r\n        _walletB20 = WalletB20;\r\n        _walletB10 = WalletB10;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the _walletB25, _walletB20, _walletB10.\r\n     */\r\n    function walletsTokenSale() public view returns (address, address, address) {\r\n        return (_walletB25, _walletB20, _walletB10);\r\n    }\r\n\r\n    /**\r\n     * Charge _walletB25, _walletB20, _walletB10 for GLDS collected. onlyOwner\r\n     */\r\n    function chargeWalletsTokenSale(uint256 AmountB25, uint256 AmountB20, uint256 AmountB10) public onlyOwner returns (bool){\r\n        uint256 total = AmountB25.add(AmountB20).add(AmountB10);\r\n        require(total <= balanceOf(owner()));\r\n        if (AmountB25 > 0) {transfer(_walletB25, AmountB25);}\r\n        if (AmountB20 > 0) {transfer(_walletB20, AmountB20);}\r\n        if (AmountB10 > 0) {transfer(_walletB10, AmountB10);}\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the _MinTokenQty. onlyOwner\r\n     */\r\n    function setMinWeiQty(uint256 MinWeiQty) public onlyOwner returns (bool){\r\n        _minWeiQty = MinWeiQty;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the _MaxTokenQty. onlyOwner\r\n     */\r\n    function setMaxWeiQty(uint256 MaxWeiQty) public onlyOwner returns (bool){\r\n        _maxWeiQty = MaxWeiQty;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the number of wei income Total.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @return _MinTokenQty.\r\n     */\r\n    function minWeiQty() public view returns (uint256) {\r\n        return _minWeiQty;\r\n    }\r\n\r\n    /**\r\n     * @return _MaxTokenQty.\r\n     */\r\n    function maxWeiQty() public view returns (uint256) {\r\n        return _maxWeiQty;\r\n    }\r\n\r\n    function addPay(address _key, uint256 _valueETH) internal {\r\n        Payment storage pay = awaitGLDS[_key];\r\n        pay.valueETH += _valueETH;\r\n        if(pay.index > 0){ // payer exists\r\n            // do nothing\r\n            return;\r\n        }else { // new payer\r\n            keyList.push(_key);\r\n            uint keyListIndex = keyList.length - 1;\r\n            pay.index = keyListIndex + 1;\r\n        }\r\n    }\r\n\r\n    function removePay(address _key) public onlyOwner returns (bool){\r\n        Payment storage pay = awaitGLDS[_key];\r\n        require(pay.index != 0); // payer not exist\r\n        require(pay.index <= keyList.length); // invalid index value\r\n        // Move an last element of array into the vacated key slot.\r\n        uint keyListIndex = pay.index - 1;\r\n        uint keyListLastIndex = keyList.length - 1;\r\n        awaitGLDS[keyList[keyListLastIndex]].index = keyListIndex + 1;\r\n        keyList[keyListIndex] = keyList[keyListLastIndex];\r\n        keyList.length--;\r\n        delete awaitGLDS[_key];\r\n        return true;\r\n    }\r\n\r\n    function sizeAwaitingList() public view returns (uint) {\r\n        return uint(keyList.length);\r\n    }\r\n\r\n    function sumAwaitingList() public view returns (uint256) {\r\n        uint len = keyList.length;\r\n        uint256 sum = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n        sum += awaitGLDS[keyList[i]].valueETH;\r\n        }\r\n        return uint256(sum);\r\n    }\r\n\r\n    function keysAwaitingList() public view returns (address[] memory) {\r\n        return keyList;\r\n    }\r\n\r\n    function containsAwaitingList(address _key) public view returns (bool) {\r\n        return awaitGLDS[_key].index > 0;\r\n    }\r\n\r\n    function getIndex(address _key) public view returns (uint256) {\r\n        return awaitGLDS[_key].index;\r\n    }\r\n\r\n   function getValueETH(address _key) public view returns (uint256) {\r\n        return awaitGLDS[_key].valueETH;\r\n    }\r\n\r\n    function getByIndex(uint256 _index) public view returns (uint256, address, uint256) {\r\n        require(_index >= 0);\r\n        require(_index < keyList.length);\r\n        return (awaitGLDS[keyList[_index]].index, keyList[_index], awaitGLDS[keyList[_index]].valueETH);\r\n    }\r\n\r\n    function addB25(address _key, uint256 _valueGLDS) internal {\r\n        B25 storage bonus25 = awaitB25[_key];\r\n        bonus25.valueGLDS += _valueGLDS;\r\n        if(bonus25.index > 0){ // payer exists\r\n            // do nothing\r\n            return;\r\n        }else { // new payer\r\n            keyListB25.push(_key);\r\n            uint keyListIndex = keyListB25.length - 1;\r\n            bonus25.index = keyListIndex + 1;\r\n        }\r\n    }\r\n\r\n    function removeB25(address _key) public onlyOwner returns (bool) {\r\n        B25 storage bonus25 = awaitB25[_key];\r\n        require(bonus25.index != 0); // payer not exist\r\n        require(bonus25.index <= keyListB25.length); // invalid index value\r\n        // Move an last element of array into the vacated key slot.\r\n        uint keyListIndex = bonus25.index - 1;\r\n        uint keyListLastIndex = keyListB25.length - 1;\r\n        awaitB25[keyListB25[keyListLastIndex]].index = keyListIndex + 1;\r\n        keyListB25[keyListIndex] = keyListB25[keyListLastIndex];\r\n        keyListB25.length--;\r\n        delete awaitB25[_key];\r\n        return true;\r\n    }\r\n\r\n    function sizeB25List() public view returns (uint) {\r\n        return uint(keyListB25.length);\r\n    }\r\n\r\n    function sumB25List() public view returns (uint256) {\r\n        uint len = keyListB25.length;\r\n        uint256 sum = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n        sum += awaitB25[keyListB25[i]].valueGLDS;\r\n        }\r\n        return uint256(sum);\r\n    }\r\n\r\n    function keysB25List() public view returns (address[] memory) {\r\n        return keyListB25;\r\n    }\r\n\r\n    function containsB25List(address _key) public view returns (bool) {\r\n        return awaitB25[_key].index > 0;\r\n    }\r\n\r\n    function getB25Index(address _key) public view returns (uint256) {\r\n        return awaitB25[_key].index;\r\n    }\r\n\r\n   function getB25ValueGLDS(address _key) public view returns (uint256) {\r\n        return awaitB25[_key].valueGLDS;\r\n    }\r\n\r\n    function getB25ByIndex(uint256 _index) public view returns (uint256, address, uint256) {\r\n        require(_index >= 0);\r\n        require(_index < keyListB25.length);\r\n        return (awaitB25[keyListB25[_index]].index, keyListB25[_index], awaitB25[keyListB25[_index]].valueGLDS);\r\n    }\r\n\r\n    function addB20(address _key, uint256 _valueGLDS) internal {\r\n        B20 storage bonus20 = awaitB20[_key];\r\n        bonus20.valueGLDS += _valueGLDS;\r\n        if(bonus20.index > 0){ // payer exists\r\n            // do nothing\r\n            return;\r\n        }else { // new payer\r\n            keyListB20.push(_key);\r\n            uint keyListIndex = keyListB20.length - 1;\r\n            bonus20.index = keyListIndex + 1;\r\n        }\r\n    }\r\n\r\n    function removeB20(address _key) public onlyOwner returns (bool) {\r\n        B20 storage bonus20 = awaitB20[_key];\r\n        require(bonus20.index != 0); // payer not exist\r\n        require(bonus20.index <= keyListB20.length); // invalid index value\r\n        // Move an last element of array into the vacated key slot.\r\n        uint keyListIndex = bonus20.index - 1;\r\n        uint keyListLastIndex = keyListB20.length - 1;\r\n        awaitB20[keyListB20[keyListLastIndex]].index = keyListIndex + 1;\r\n        keyListB20[keyListIndex] = keyListB20[keyListLastIndex];\r\n        keyListB20.length--;\r\n        delete awaitB20[_key];\r\n        return true;\r\n    }\r\n\r\n    function sizeB20List() public view returns (uint) {\r\n        return uint(keyListB20.length);\r\n    }\r\n\r\n    function sumB20List() public view returns (uint256) {\r\n        uint len = keyListB20.length;\r\n        uint256 sum = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n        sum += awaitB20[keyListB20[i]].valueGLDS;\r\n        }\r\n        return uint256(sum);\r\n    }\r\n\r\n    function keysB20List() public view returns (address[] memory) {\r\n        return keyListB20;\r\n    }\r\n\r\n    function containsB20List(address _key) public view returns (bool) {\r\n        return awaitB20[_key].index > 0;\r\n    }\r\n\r\n    function getB20Index(address _key) public view returns (uint256) {\r\n        return awaitB20[_key].index;\r\n    }\r\n\r\n    function getB20ValueGLDS(address _key) public view returns (uint256) {\r\n        return awaitB20[_key].valueGLDS;\r\n    }\r\n\r\n    function getB20ByIndex(uint256 _index) public view returns (uint256, address, uint256) {\r\n        require(_index >= 0);\r\n        require(_index < keyListB20.length);\r\n        return (awaitB20[keyListB20[_index]].index, keyListB20[_index], awaitB20[keyListB20[_index]].valueGLDS);\r\n    }\r\n\r\n    function addB10(address _key, uint256 _valueGLDS) internal {\r\n        B10 storage bonus10 = awaitB10[_key];\r\n        bonus10.valueGLDS += _valueGLDS;\r\n        if(bonus10.index > 0){ // payer exists\r\n            // do nothing\r\n            return;\r\n        }else { // new payer\r\n            keyListB10.push(_key);\r\n            uint keyListIndex = keyListB10.length - 1;\r\n            bonus10.index = keyListIndex + 1;\r\n        }\r\n    }\r\n\r\n    function removeB10(address _key) public onlyOwner returns (bool) {\r\n        B10 storage bonus10 = awaitB10[_key];\r\n        require(bonus10.index != 0); // payer not exist\r\n        require(bonus10.index <= keyListB10.length); // invalid index value\r\n        // Move an last element of array into the vacated key slot.\r\n        uint keyListIndex = bonus10.index - 1;\r\n        uint keyListLastIndex = keyListB10.length - 1;\r\n        awaitB10[keyListB10[keyListLastIndex]].index = keyListIndex + 1;\r\n        keyListB10[keyListIndex] = keyListB10[keyListLastIndex];\r\n        keyListB10.length--;\r\n        delete awaitB10[_key];\r\n        return true;\r\n    }\r\n\r\n    function sizeB10List() public view returns (uint) {\r\n        return uint(keyListB10.length);\r\n    }\r\n\r\n    function sumB10List() public view returns (uint256) {\r\n        uint len = keyListB10.length;\r\n        uint256 sum = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n        sum += awaitB10[keyListB10[i]].valueGLDS;\r\n        }\r\n        return uint256(sum);\r\n    }\r\n\r\n    function keysB10List() public view returns (address[] memory) {\r\n        return keyListB10;\r\n    }\r\n\r\n    function containsB10List(address _key) public view returns (bool) {\r\n        return awaitB10[_key].index > 0;\r\n    }\r\n\r\n    function getB10Index(address _key) public view returns (uint256) {\r\n        return awaitB10[_key].index;\r\n    }\r\n\r\n    function getB10ValueGLDS(address _key) public view returns (uint256) {\r\n        return awaitB10[_key].valueGLDS;\r\n    }\r\n\r\n    function getB10ByIndex(uint256 _index) public view returns (uint256, address, uint256) {\r\n        require(_index >= 0);\r\n        require(_index < keyListB10.length);\r\n        return (awaitB10[keyListB10[_index]].index, keyListB10[_index], awaitB10[keyListB10[_index]].valueGLDS);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sizeB20List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletsTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WalletFund\",\"type\":\"address\"}],\"name\":\"setWalletFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WalletAdmin\",\"type\":\"address\"}],\"name\":\"setWalletAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MinWeiQty\",\"type\":\"uint256\"}],\"name\":\"setMinWeiQty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeAwaitingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keysB20List\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB10ValueGLDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"removeB25\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"payTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rateX\",\"type\":\"uint256\"},{\"name\":\"rateY\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumAwaitingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAdminFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumB25List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keysAwaitingList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getB25ByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"removeB10\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keysB10List\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumB20List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"containsB20List\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeB10List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MaxWeiQty\",\"type\":\"uint256\"}],\"name\":\"setMaxWeiQty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB20ValueGLDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB10Index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB25Index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keysB25List\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWeiQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"containsAwaitingList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"AmountB25\",\"type\":\"uint256\"},{\"name\":\"AmountB20\",\"type\":\"uint256\"},{\"name\":\"AmountB10\",\"type\":\"uint256\"}],\"name\":\"chargeWalletsTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getValueETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"removeB20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB25ValueGLDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getB20Index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"removePay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"containsB25List\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getB10ByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeB25List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumB10List\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"containsB10List\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getB20ByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WalletB25\",\"type\":\"address\"},{\"name\":\"WalletB20\",\"type\":\"address\"},{\"name\":\"WalletB10\",\"type\":\"address\"}],\"name\":\"setWalletsTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"initSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GLDS","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000e4e1c00000000000000000000000000000000000000000000000000000000000000011476f6c6444696769745374616e646172740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004474c445300000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://6b5fe854ceb47a92f8f08207b31edcfaf746207625803eab2946b790b3f217ff"}]}