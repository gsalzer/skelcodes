{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/OpenZepplinOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/OpenZepplinSafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/OpenZepplinIERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/OpenZepplinReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/PoolsFYI_UniSwapPool_ETH_MKR.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Interface for ETH_MKR_Addliquidity\r\ninterface UniSwap_Zap_Contract{\r\n    function LetsInvest() external payable;\r\n}\r\n\r\n// Objectives\r\n// - ServiceProvider's users should be able to send ETH to the UniSwap_ZAP contracts and get the UniTokens and the residual ERC20 tokens\r\n// - ServiceProvider should have the ability to charge a commission, should is choose to do so\r\n// - ServiceProvider should be able to provide a commission rate in basis points\r\n// - ServiceProvider WILL receive its commission from the incomimg UniTokens\r\n// - ServiceProvider WILL have to withdraw its commission tokens separately \r\n\r\n\r\ncontract ServiceProvider_UniSwap_Zap is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n\r\n    UniSwap_Zap_Contract public UniSwap_Zap_ContractAddress;\r\n    IERC20 public MKR_TokenContractAddress;\r\n    IERC20 public UniSwapMKRExchangeContractAddress;\r\n    \r\n    address internal ServiceProviderAddress;\r\n\r\n    uint public balance = address(this).balance;\r\n    uint private TotalServiceChargeTokens;\r\n    uint private serviceChargeInBasisPoints = 0;\r\n    \r\n    event TransferredToUser_liquidityTokens_residualMKR(uint, uint);\r\n    event ServiceChargeTokensTransferred(uint);\r\n\r\n    constructor (\r\n        UniSwap_Zap_Contract _UniSwap_Zap_ContractAddress, \r\n        IERC20 _MKR_TokenContractAddress, \r\n        IERC20 _UniSwapMKRExchangeContractAddress, \r\n        address _ServiceProviderAddress) \r\n        public {\r\n        UniSwap_Zap_ContractAddress = _UniSwap_Zap_ContractAddress;\r\n        MKR_TokenContractAddress = _MKR_TokenContractAddress;\r\n        UniSwapMKRExchangeContractAddress = _UniSwapMKRExchangeContractAddress;\r\n        ServiceProviderAddress = _ServiceProviderAddress;\r\n    }\r\n\r\n     // - in relation to the emergency functioning of this contract\r\n    bool private stopped = false;\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {if (!stopped) _;}\r\n    \r\n    \r\n    function toggleContractActive() public onlyOwner {\r\n    stopped = !stopped;\r\n    }\r\n\r\n    \r\n    // should we ever want to change the address of ZapContractAddress\r\n    function set_UniSwap_Zap_ContractAddress(UniSwap_Zap_Contract _new_UniSwap_Zap_ContractAddress) public onlyOwner  {\r\n        UniSwap_Zap_ContractAddress = _new_UniSwap_Zap_ContractAddress;\r\n    }\r\n  \r\n    // should we ever want to change the address of the MKR_TOKEN_ADDRESS Contract\r\n    function set_MKR_TokenContractAddress (IERC20 _new_MKR_TokenContractAddress) public onlyOwner {\r\n        MKR_TokenContractAddress = _new_MKR_TokenContractAddress;\r\n    }\r\n\r\n    // should we ever want to change the address of the _UniSwap MKRExchange Contract Address\r\n    function set_UniSwapMKRExchangeContractAddress (IERC20 _new_UniSwapMKRExchangeContractAddress) public onlyOwner {\r\n        UniSwapMKRExchangeContractAddress = _new_UniSwapMKRExchangeContractAddress;\r\n    }\r\n\r\n \r\n    // to get the ServiceProviderAddress, only the Owner can call this fx\r\n    function get_ServiceProviderAddress() public view onlyOwner returns (address) {\r\n        return ServiceProviderAddress;\r\n    }\r\n    \r\n    // to set the ServiceProviderAddress, only the Owner can call this fx\r\n    function set_ServiceProviderAddress (address _new_ServiceProviderAddress) public onlyOwner  {\r\n        ServiceProviderAddress = _new_ServiceProviderAddress;\r\n    }\r\n\r\n    // to find out the serviceChargeRate, only the Owner can call this fx\r\n    function get_serviceChargeRate () public view onlyOwner returns (uint) {\r\n        return serviceChargeInBasisPoints;\r\n    }\r\n    \r\n    // should the ServiceProvider ever want to change the Service Charge rate, only the Owner can call this fx\r\n    function set_serviceChargeRate (uint _new_serviceChargeInBasisPoints) public onlyOwner {\r\n        require (_new_serviceChargeInBasisPoints <= 10000, \"Setting Service Charge more than 100%\");\r\n        serviceChargeInBasisPoints = _new_serviceChargeInBasisPoints;\r\n    }\r\n\r\n\r\n    function LetsInvest() public payable stopInEmergency nonReentrant returns (bool) {\r\n        UniSwap_Zap_ContractAddress.LetsInvest.value(msg.value)();\r\n        \r\n\r\n        // finding out the UniTokens received and the residual MKR Tokens Received\r\n        uint MKRLiquidityTokens = UniSwapMKRExchangeContractAddress.balanceOf(address(this));\r\n        uint residualMKRHoldings = MKR_TokenContractAddress.balanceOf(address(this));\r\n\r\n        // Adjusting for ServiceCharge\r\n        uint ServiceChargeTokens = SafeMath.div(SafeMath.mul(MKRLiquidityTokens,serviceChargeInBasisPoints),10000);\r\n        TotalServiceChargeTokens = TotalServiceChargeTokens + ServiceChargeTokens;\r\n        \r\n\r\n        // Sending Back the Balance LiquityTokens and residual MKR Tokens to user\r\n        uint UserLiquidityTokens = SafeMath.sub(MKRLiquidityTokens,ServiceChargeTokens);\r\n        require(UniSwapMKRExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens), \"Failure to send Liquidity Tokens to User\");\r\n        require(MKR_TokenContractAddress.transfer(msg.sender, residualMKRHoldings), \"Failure to send residual MKR holdings\");\r\n        emit TransferredToUser_liquidityTokens_residualMKR(UserLiquidityTokens, residualMKRHoldings);\r\n        return true;\r\n    }\r\n\r\n\r\n    // to find out the totalServiceChargeTokens, only the Owner can call this fx\r\n    function get_TotalServiceChargeTokens() public view onlyOwner returns (uint) {\r\n        return TotalServiceChargeTokens;\r\n    }\r\n    \r\n    \r\n    function withdrawServiceChargeTokens(uint _amountInUnits) public onlyOwner {\r\n        require(_amountInUnits <= TotalServiceChargeTokens, \"You are asking for more than what you have earned\");\r\n        TotalServiceChargeTokens = SafeMath.sub(TotalServiceChargeTokens,_amountInUnits);\r\n        require(UniSwapMKRExchangeContractAddress.transfer(ServiceProviderAddress, _amountInUnits), \"Failure to send ServiceChargeTokens\");\r\n        emit ServiceChargeTokensTransferred(_amountInUnits);\r\n    }\r\n\r\n\r\n    // Should there be a need to withdraw any other ERC20 token\r\n    function withdrawAnyOtherERC20Token(IERC20 _targetContractAddress) public onlyOwner {\r\n        uint OtherTokenBalance = _targetContractAddress.balanceOf(address(this));\r\n        _targetContractAddress.transfer(_owner, OtherTokenBalance);\r\n    }\r\n    \r\n\r\n    // incase of half-way error\r\n    function withdrawMKR() public onlyOwner {\r\n        uint StuckMKRHoldings = MKR_TokenContractAddress.balanceOf(address(this));\r\n        MKR_TokenContractAddress.transfer(_owner, StuckMKRHoldings);\r\n    }\r\n    \r\n    function withdrawMKRLiquityTokens() public onlyOwner {\r\n        uint StuckMKRLiquityTokens = UniSwapMKRExchangeContractAddress.balanceOf(address(this));\r\n        UniSwapMKRExchangeContractAddress.transfer(_owner, StuckMKRLiquityTokens);\r\n    }\r\n\r\n    \r\n    // fx in relation to ETH held by the contract sent by the owner\r\n    \r\n    // - this function lets you deposit ETH into this wallet\r\n    function depositETH() public payable onlyOwner {\r\n        balance += msg.value;\r\n    }\r\n    \r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {\r\n        if (msg.sender == _owner) {\r\n            depositETH();\r\n        } else {\r\n            LetsInvest();\r\n        }\r\n    }\r\n    \r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract UniSwap_Zap_Contract\",\"name\":\"_UniSwap_Zap_ContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_MKR_TokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_UniSwapMKRExchangeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ServiceProviderAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ServiceChargeTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransferredToUser_liquidityTokens_residualMKR\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"LetsInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_TokenContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniSwapMKRExchangeContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniSwap_Zap_ContractAddress\",\"outputs\":[{\"internalType\":\"contract UniSwap_Zap_Contract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_ServiceProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_TotalServiceChargeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_serviceChargeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_new_MKR_TokenContractAddress\",\"type\":\"address\"}],\"name\":\"set_MKR_TokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_ServiceProviderAddress\",\"type\":\"address\"}],\"name\":\"set_ServiceProviderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_new_UniSwapMKRExchangeContractAddress\",\"type\":\"address\"}],\"name\":\"set_UniSwapMKRExchangeContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract UniSwap_Zap_Contract\",\"name\":\"_new_UniSwap_Zap_ContractAddress\",\"type\":\"address\"}],\"name\":\"set_UniSwap_Zap_ContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_serviceChargeInBasisPoints\",\"type\":\"uint256\"}],\"name\":\"set_serviceChargeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_targetContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawAnyOtherERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMKR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMKRLiquityTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUnits\",\"type\":\"uint256\"}],\"name\":\"withdrawServiceChargeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ServiceProvider_UniSwap_Zap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000013240b97c40d7e306cedf3adc9cb057cec74c3610000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000002c4bd064b998838076fa341a83d007fc2fa50957000000000000000000000000bf6b745307a874e9330440a4c1ecff369fd9d680","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://ab6da0dda96f25ca20fb1432f5158f98f3c901faa4d4baaebcf5a8780b821711"}]}