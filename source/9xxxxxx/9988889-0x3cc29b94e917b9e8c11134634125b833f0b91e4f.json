{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface Minereum {\r\n  function Payment (  ) payable external;  \r\n}\r\n\r\ncontract MinereumLuckyDraw\r\n{\r\n\tMinereum public mne;\r\n\tRNG public rng;\r\n\tuint public stakeHoldersfee = 50;\r\n\tuint public percentWin = 80;\r\n\tuint public mnefee = 500000000;\r\n\tuint public ethfee = 10000000000000000;\r\n\tuint public totalSentToStakeHolders = 0;\r\n\tuint public totalPaidOut = 0;\r\n\tuint public ticketsSold = 0;\r\n\taddress public owner = 0x0000000000000000000000000000000000000000;\t\r\n\tuint public maxNumber = 1001;\r\n\tuint public systemNumber = 323;\r\n\tuint public previousEndPeriod = 1588447830 + 2629743;\r\n\t\r\n\taddress[] public winner;\r\n\tuint[] public winnerTickets;\r\n\tuint[] public winnerETHAmount;\r\n\tuint[] public winnerTimestamp;\r\n\t\r\n\taddress[] public lost;\r\n\tuint[] public lostTickets;\r\n\tuint[] public lostTimestamp;\r\n\t\r\n\tevent Numbers(address indexed from, uint[] n, string m);\r\n\t\r\n\tconstructor() public\r\n\t{\r\n\t\tmne = Minereum(0x7eE48259C4A894065d4a5282f230D00908Fd6D96);\r\n\t\towner = payable(msg.sender);\r\n\t\trng = new RNG(1588447830, previousEndPeriod, address(this));\r\n\t}\r\n\t\r\n\treceive() external payable { }\r\n    \r\n\t\r\n    function BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)\r\n    {\r\n\t\trequire(msg.sender == address(mne));\r\n\t\t\r\n\t\tif (block.timestamp > previousEndPeriod)\r\n\t\t{\r\n\t\t\t//Some sort of security to prevent miners from hacking block.timestamp. Contract Valid for 1 month. \r\n\t\t\t//After 1 month a new RNG contract is generated automatically in the first call\r\n\t\t\trng = new RNG(previousEndPeriod, (previousEndPeriod + 2629743), address(this));\r\n\t\t}\t\t\r\n        \r\n\t\tbool win = false;\r\n\t\t\r\n\t\tuint[] memory numbers = new uint[](_max[0]);\r\n\t\t\r\n\t\t(numbers, win) = rng.rng(_max[0], systemNumber, maxNumber, _sender);\r\n\t\t\r\n\t\tuint valueStakeHolder = msg.value * stakeHoldersfee / 100;\r\n\t\t\r\n        if (win)\r\n\t\t{\r\n\t\t\taddress payable add = payable(_sender);\r\n\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\temit Numbers(msg.sender, numbers, \"You WON!\");\r\n\t\t\tuint winAmount = contractBalance * percentWin / 100;\r\n\t\t\tuint totalToPay = winAmount - stakeHoldersfee;\r\n\t\t\tif (!add.send(totalToPay)) revert('Error While Executing Payment.');\r\n\t\t\ttotalPaidOut += totalToPay;\r\n\t\t\twinner.push(_sender);\r\n\t\t\twinnerTickets.push(_max[0]);\r\n\t\t\twinnerETHAmount.push(totalToPay);\r\n\t\t\twinnerTimestamp.push(block.timestamp);\r\n\t\t}\r\n        else\r\n\t\t{\t\r\n\t\t\tlost.push(_sender);\r\n\t\t\tlostTickets.push(_max[0]);\r\n\t\t\tlostTimestamp.push(block.timestamp);\r\n            emit Numbers(msg.sender, numbers, \"Your numbers don't match the System Number! Try Again.\");\r\n\t\t}\r\n\t\tticketsSold += _max[0];\r\n\t\t\r\n\t\tuint totalEthfee = ethfee * _max[0];\r\n\t\tuint totalMneFee = mnefee * _max[0];\r\n\t\tif (msg.value < totalEthfee) revert('Not enough ETH.');\r\n\t\tmne.Payment.value(valueStakeHolder)();\r\n\t\ttotalSentToStakeHolders += valueStakeHolder;\r\n\t\t\r\n\t\treturn totalMneFee;\r\n    }\r\n\t\r\n\tfunction transferFundsOut() public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\taddress payable add = payable(msg.sender);\r\n\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\tif (!add.send(contractBalance)) revert('Error While Executing Payment.');\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tstakeHoldersfee = _stakeHoldersfee;\r\n\t\t\tmnefee = _mnefee;\r\n\t\t\tethfee = _ethfee;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateSystemNumber(uint _systemNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tsystemNumber = _systemNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateMaxNumber(uint _maxNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmaxNumber = _maxNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateMNEContract(address _mneAddress) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmne = Minereum(_mneAddress);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract RNG\r\n{\r\n\taddress public owner;\r\n\tuint public periodStart;\r\n\tuint public periodEnd;\r\n\t\r\n\tconstructor(uint _periodStart, uint _periodEnd, address _owner) public\r\n\t{\r\n\t\towner = _owner;\r\n\t\tperiodStart = _periodStart;\r\n\t\tperiodEnd = _periodEnd;\r\n\t}\r\n\t\r\n\tfunction rng(uint max, uint systemNumber, uint maxNumber, address _sender) public view returns (uint[] memory, bool)\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t\r\n\t\t//Some sort of security to prevent miners from hacking block.timestamp. Contract Valid for 1 month. \r\n\t\t//After 1 month a new RNG contract is generated automatically in the first call\r\n\t\tif (!(block.timestamp >= periodStart && block.timestamp <= periodEnd))\r\n\t\t\trevert('wrong timestamp');\t\t\r\n\t\t\r\n\t\tuint[] memory numbers = new uint[](max);\r\n        uint i = 0;\r\n        bool win = false;\r\n\t\t\r\n\t\twhile (i < max)\r\n        {\t\r\n            //Random number generation\r\n\t\t\tnumbers[i] = uint256(uint256(keccak256(abi.encodePacked(block.timestamp, _sender, i)))%maxNumber);\r\n            if (numbers[i] == systemNumber)\r\n                win = true;\r\n            i++;\r\n        }\r\n\t\t\r\n\t\treturn (numbers, win);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"n\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"}],\"name\":\"Numbers\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_max\",\"type\":\"uint256[]\"}],\"name\":\"BuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lostTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lostTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mne\",\"outputs\":[{\"internalType\":\"contract Minereum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEndPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rng\",\"outputs\":[{\"internalType\":\"contract RNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeHoldersfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSentToStakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeHoldersfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mnefee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethfee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mneAddress\",\"type\":\"address\"}],\"name\":\"updateMNEContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_systemNumber\",\"type\":\"uint256\"}],\"name\":\"updateSystemNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MinereumLuckyDraw","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://d24599a7969754d741c38afd3e7d217906cd78e3acb316916ce7d81aa469e75e"}]}