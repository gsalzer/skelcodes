{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.13;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * SafeMath from OpenZeppelin - commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/5dfe7215a9156465d550030eadc08770503b2b2f\r\n * \r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n* @title MBDAAsset is a template for MB Digital Asset token\r\n* */\r\ncontract MBDAAsset {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // events\r\n    //\r\n    // ERC20 events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // mint/burn events\r\n    event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n    event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n    // admin events\r\n    event BlockLockSet(uint256 _value);\r\n    event NewAdmin(address _newAdmin);\r\n    event NewManager(address _newManager);\r\n    event NewInvestor(address _newInvestor);\r\n    event RemovedInvestor(address _investor);\r\n    event FundAssetsChanged(string indexed tokenSymbol, string assetInfo, uint8 amount, uint totalAssetAmount);\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Only admin can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier managerOrAdmin {\r\n        require(msg.sender == manager || msg.sender == admin, \"Only manager or admin can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier boardOrAdmin {\r\n        require(msg.sender == board || msg.sender == admin, \"Only admin or board can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier blockLock(address _sender) {\r\n        require (!isLocked() || _sender == admin, \"Contract is locked except for the admin\");\r\n        _;\r\n    }\r\n\r\n    struct Asset {\r\n        string assetTicker;\r\n        string assetInfo;\r\n        uint8 assetPercentageParticipation;\r\n    }\r\n\r\n    struct Investor {\r\n        string info;\r\n        bool exists;\r\n    }\r\n\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public admin;\r\n    address public board;\r\n    address public manager;\r\n    uint256 public lockedUntilBlock;\r\n    bool public canChangeAssetsType;\r\n    bool public canChangeAssetsQuantity;\r\n    bool public hasWhiteList;\r\n    bool public isSyndicate;\r\n    string public urlFinancialDetailsDocument;\r\n    bytes32 public financialDetailsHash;\r\n    string[] public tradingPlatforms;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    mapping (address => Investor) public clearedInvestors;\r\n    Asset[] public assets;\r\n\r\n    /**\r\n    * @dev Constructor\r\n\t* @param _fundAdmin - Fund admin\r\n    * @param _fundBoard - Board\r\n    * @param _tokenName - Detailed ERC20 token name\r\n    * @param _decimalUnits - Detailed ERC20 decimal units\r\n    * @param _tokenSymbol - Detailed ERC20 token symbol\r\n    * @param _lockedUntilBlock - Block lock\r\n    * @param _newTotalSupply - Total Supply owned by the contract itself, only Manager can move\r\n    * @param _canChangeAssetsType - True allows the Manager to change assets in the portfolio\r\n    * @param _canChangeAssetsQuantity - True allows Manager to rebalance the portfolio\r\n    * @param _hasWhiteList - Allows transfering only between whitelisted addresses\r\n    * @param _isSyndicate - Allows secondary market\r\n    */\r\n    constructor\r\n    (\r\n        address _fundAdmin,\r\n        address _fundBoard,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        uint256 _lockedUntilBlock,\r\n        uint256 _newTotalSupply,\r\n        bool _canChangeAssetsType,\r\n        bool _canChangeAssetsQuantity,\r\n        bool _hasWhiteList,\r\n        bool _isSyndicate\r\n    )\r\n        public\r\n    {\r\n        name = _tokenName;\r\n        require(_decimalUnits<=18, \"Decimal units should be 18 or lower\");\r\n        decimals = _decimalUnits;\r\n        symbol = _tokenSymbol;\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        admin = _fundAdmin;\r\n        board = _fundBoard;\r\n        totalSupply = _newTotalSupply;\r\n        canChangeAssetsType = _canChangeAssetsType;\r\n        canChangeAssetsQuantity = _canChangeAssetsQuantity;\r\n        hasWhiteList = _hasWhiteList;\r\n        isSyndicate = _isSyndicate;\r\n        balances[address(this)] = totalSupply;\r\n        Investor memory tmp = Investor(\"Contract\", true);\r\n        clearedInvestors[address(this)] = tmp;\r\n        emit NewInvestor(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Set financial details url\r\n\t* @param _url - URL\r\n    * @return True if success\r\n    */\r\n    function setFinancialDetails(string memory _url)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        urlFinancialDetailsDocument = _url;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set financial details IPFS hash\r\n\t* @param _hash - URL\r\n    * @return True if success\r\n    */\r\n    function setFinancialDetailsHash(bytes32 _hash)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        financialDetailsHash = _hash;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add trading platform\r\n\t* @param _details - Details of the trading platform\r\n    * @return True if success\r\n    */\r\n    function addTradingPlatform(string memory _details)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        tradingPlatforms.push(_details);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove trading platform\r\n\t* @param _index - Index of the trading platform to be removed\r\n    * @return True if success\r\n    */\r\n    function removeTradingPlatform(uint256 _index)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_index < tradingPlatforms.length, \"Invalid platform index\");\r\n        tradingPlatforms[_index] = tradingPlatforms[tradingPlatforms.length - 1];\r\n        tradingPlatforms.length--;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Whitelists an Investor\r\n\t* @param _investor - Address of the investor\r\n    * @param _investorInfo - Info\r\n    * @return True if success\r\n    */\r\n    function addNewInvestor(address _investor, string memory _investorInfo)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        Investor memory tmp = Investor(_investorInfo, true);\r\n        clearedInvestors[_investor] = tmp;\r\n        emit NewInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Removes an Investor from whitelist\r\n\t* @param _investor - Address of the investor\r\n    * @return True if success\r\n    */\r\n    function removeInvestor(address _investor)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        delete(clearedInvestors[_investor]);\r\n        emit RemovedInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Add new asset to Portfolio\r\n\t* @param _assetTicker - Ticker\r\n    * @param _assetInfo - Info\r\n    * @param _assetPercentageParticipation - % of portfolio taken by the asset\r\n    * @return True if success\r\n    */\r\n    function addNewAsset(string memory _assetTicker, string memory _assetInfo, uint8 _assetPercentageParticipation)\r\n        public\r\n        onlyAdmin\r\n        returns (bool success)\r\n    {\r\n        uint totalPercentageAssets = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            require(keccak256(bytes(_assetTicker)) != keccak256(bytes(assets[i].assetTicker)), \"An asset cannot be assigned twice\");\r\n            totalPercentageAssets = SafeMath.add(assets[i].assetPercentageParticipation, totalPercentageAssets);\r\n        }\r\n        totalPercentageAssets = SafeMath.add(totalPercentageAssets,_assetPercentageParticipation);\r\n        require(totalPercentageAssets<=100, \"Total assets number cannot be higher than 100\");\r\n        emit FundAssetsChanged(_assetTicker, _assetInfo, _assetPercentageParticipation, totalPercentageAssets);\r\n        Asset memory newAsset = Asset(_assetTicker, _assetInfo, _assetPercentageParticipation);\r\n        assets.push(newAsset);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove asset from Portfolio\r\n\t* @param _assetIndex - Asset\r\n    * @return True if success\r\n    */\r\n    function removeAnAsset(uint8 _assetIndex)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(canChangeAssetsType, \"Cannot change asset portfolio\");\r\n        require(_assetIndex<assets.length, \"Invalid asset index number. Greater than total assets\");\r\n        string memory assetTicker = assets[_assetIndex].assetTicker;\r\n        assets[_assetIndex] = assets[assets.length-1];\r\n        delete assets[assets.length-1];\r\n        assets.length--;\r\n        emit FundAssetsChanged(assetTicker, \"\", 0, 0);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Updates an asset\r\n\t* @param _assetTicker - Ticker\r\n    * @param _assetInfo - Info to update\r\n    * @param _newAmount - % of portfolio taken by the asset\r\n    * @return True if success\r\n    */\r\n    function updateAnAssetQuantity(string memory _assetTicker, string memory _assetInfo, uint8 _newAmount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(canChangeAssetsQuantity, \"Cannot change asset amount\");\r\n        require(_newAmount>0, \"Cannot set zero asset amount\");\r\n        uint256 totalAssets = 0;\r\n        uint256 assetIndex = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            if (keccak256(bytes(_assetTicker)) == keccak256(bytes(assets[i].assetTicker))) {\r\n                assetIndex = i;\r\n                totalAssets = SafeMath.add(totalAssets, _newAmount);\r\n            } else {\r\n                totalAssets = SafeMath.add(totalAssets, assets[i].assetPercentageParticipation);\r\n            }\r\n        }\r\n        emit FundAssetsChanged(_assetTicker, _assetInfo, _newAmount, totalAssets);\r\n        require(totalAssets<=100, \"Fund assets total percentage must be less than 100\");\r\n        assets[assetIndex].assetPercentageParticipation = _newAmount;\r\n        assets[assetIndex].assetInfo = _assetInfo;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @return Number of assets in Portfolio\r\n    */\r\n    function totalAssetsArray()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return assets.length;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 Transfer\r\n\t* @param _to - destination address\r\n    * @param _value - value to transfer\r\n    * @return True if success\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require(isTransferValid(from, _to, _value), \"Invalid Transfer Operation\");\r\n        balances[from] = balances[from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 Approve\r\n\t* @param _spender - destination address\r\n    * @param _value - value to be approved\r\n    * @return True if success\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        allowed[from][_spender] = _value;\r\n        emit Approval(from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 TransferFrom\r\n\t* @param _from - source address\r\n    * @param _to - destination address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        blockLock(_from)\r\n        returns (bool)\r\n    {\r\n        // check sufficient allowance\r\n        require(_value <= allowed[_from][msg.sender], \"Value informed is invalid\");\r\n        require(isTransferValid(_from, _to, _value), \"Invalid Transfer Operation\");\r\n        // transfer tokens\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value, \"Value lower than approval\");\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint new tokens. Can only be called by minter or owner\r\n    * @param _to - destination address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function mint(address _to, uint256 _value)\r\n        public\r\n        managerOrAdmin\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n\r\n        emit Mint(_to, _value, totalSupply);\r\n        emit Transfer(address(0), _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn tokens\r\n    * @param _account - address\r\n    * @param _value - value\r\n    * @return True if success\r\n    */\r\n    function burn(address payable _account, uint256 _value)\r\n        public\r\n        payable\r\n        blockLock(msg.sender)\r\n        managerOrAdmin\r\n        returns (bool)\r\n      {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[_account] = balances[_account].sub(_value);\r\n        emit Transfer(_account, address(0), _value);\r\n        emit Burn(_account, _value, totalSupply);\r\n        if (msg.value > 0) {\r\n            (bool success,) = _account.call.value(msg.value)(\"\");\r\n            require(success, \"Ether transfer failed.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set block lock. Until that block (exclusive) transfers are disallowed\r\n    * @param _lockedUntilBlock - Block Number\r\n    * @return True if success\r\n    */\r\n    function setBlockLock(uint256 _lockedUntilBlock)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        emit BlockLockSet(_lockedUntilBlock);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Replace current admin with new one\r\n    * @param _newAdmin New token admin\r\n    * @return True if success\r\n    */\r\n    function replaceAdmin(address _newAdmin)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        require(_newAdmin != address(0x0), \"Null address\");\r\n        admin = _newAdmin;\r\n        emit NewAdmin(_newAdmin);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set an account can perform some operations\r\n    * @param _newManager Manager address\r\n    * @return True if success\r\n    */\r\n    function setManager(address _newManager)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        manager = _newManager;\r\n        emit NewManager(_newManager);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 balanceOf\r\n    * @param _owner Owner address\r\n    * @return True if success\r\n    */\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 allowance\r\n    * @param _owner Owner address\r\n    * @param _spender Address allowed to spend from Owner's balance\r\n    * @return uint256 allowance\r\n    */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Are transfers currently disallowed\r\n    * @return True if disallowed\r\n    */\r\n    function isLocked()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return lockedUntilBlock > block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if transfer parameters are valid\r\n    * @param _from Source address\r\n    * @param _to Destination address\r\n    * @param _amount Amount to check\r\n    * @return True if valid\r\n    */\r\n    function isTransferValid(address _from, address _to, uint256 _amount)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_from == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (_to == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (!hasWhiteList) {\r\n            return  balances[_from] >= _amount;    // sufficient balance\r\n        }\r\n\r\n        bool fromOK = clearedInvestors[_from].exists;\r\n\r\n        if (!isSyndicate) {\r\n            return  balances[_from] >= _amount &&   // sufficient balance\r\n            fromOK                                     // a seller holder within the whitelist\r\n            ;\r\n        }\r\n\r\n        bool toOK = clearedInvestors[_to].exists;\r\n\r\n        return  balances[_from] >= _amount &&   // sufficient balance\r\n            fromOK &&                              // a seller holder within the whitelist\r\n            toOK                                   // a buyer holder within the whitelist\r\n        ;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundBoard\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canChangeAssetsType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canChangeAssetsQuantity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSyndicate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BlockLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetInfo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"}],\"name\":\"FundAssetsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newInvestor\",\"type\":\"address\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"NewManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"RemovedInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetTicker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_assetInfo\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_assetPercentageParticipation\",\"type\":\"uint8\"}],\"name\":\"addNewAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_investorInfo\",\"type\":\"string\"}],\"name\":\"addNewInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"addTradingPlatform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"assetTicker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetInfo\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"assetPercentageParticipation\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"board\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canChangeAssetsQuantity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canChangeAssetsType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clearedInvestors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financialDetailsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSyndicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isTransferValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetIndex\",\"type\":\"uint8\"}],\"name\":\"removeAnAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeTradingPlatform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setBlockLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setFinancialDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setFinancialDetailsHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetsArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingPlatforms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetTicker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_assetInfo\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_newAmount\",\"type\":\"uint8\"}],\"name\":\"updateAnAssetQuantity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"urlFinancialDetailsDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MBDAAsset","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a1a2bf87fd49e1d222353821b4335fc21a61880f000000000000000000000000a1a2bf87fd49e1d222353821b4335fc21a61880f0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c4b400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a54657374204d4220436f6e736f7263696f20546f6b656e203031000000000000000000000000000000000000000000000000000000000000000000000000000b546573744d42434f4e3031000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://d385d50a550f5f0cb51736676db9c620849489c4c4e7b754eb7bb562fd58eacb"}]}