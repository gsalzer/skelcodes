{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\GTBExchanger.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// * Ethereum smart contract\r\n// * Uses hybrid commit-reveal + block hash random number generation that is immune\r\n//   to tampering by players, house and miners. Apart from being fully transparent,\r\n//   this also allows arbitrarily high bets.\r\n\r\ninterface UniswapExchangeApi{\r\n    /*\r\n        @notice Public price function for ETH to Token trades with an exact input.\r\n        @param eth_sold Amount of ETH sold.\r\n        @return Amount of Tokens that can be bought with input ETH.\r\n    */\r\n    function getEthToTokenInputPrice(uint256 amountOfEth) external view returns(uint256);\r\n    function tokenToEthSwapInput(uint256 tokens_sold,uint256 min_eth,uint256 deadline) external returns(uint256);\r\n\r\n}\r\n\r\n\r\ninterface UniswapFactoryApi{\r\n    /*\r\n        @notice Function that returns right exchange\r\n        @param _adr  address of token\r\n        @return address of an exchange\r\n    */\r\n    function getExchange(address _adr) external returns(address);\r\n\r\n}\r\n\r\ncontract GTBExchanger is Ownable{\r\n\r\n    address public dai_adr = address(0x006b175474e89094c44da98b954eedeac495271d0f);\r\n    address public rinkeby_dai_adr = address(0x2448eE2641d78CC42D7AD76498917359D961A783);\r\n\taddress public uniswap;\r\n\r\n    UniswapExchangeApi public _daiEx;\r\n    constructor (address _uniswap) public {\r\n\t\tuniswap = _uniswap;\r\n\r\n        bool status ;\r\n        bytes memory data ;\r\n        //calls fakeDAI() from Uniswap mock, takes no effect on prod\r\n        (status,data)=uniswap.call.gas(100000)(abi.encodePacked(bytes4(0xe46cdfe6)));\r\n        if(status){\r\n           uint256 local_dai;\r\n           assembly {\r\n                local_dai := mload(add(0x20,data))\r\n           } \r\n           dai_adr = address(local_dai);\r\n        }\r\n    }\r\n\r\n\tfunction changeUniswap(address _a) public onlyOwner{\r\n\t\tuniswap = _a;\r\n\t\t_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));\r\n\t}\r\n\r\n\tfunction init() public{\r\n\t\trequire(address(_daiEx)==address(0),\"can set exchange only once\");\r\n\t\tif(uniswap==address(0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36)){\r\n\t\t\tdai_adr = rinkeby_dai_adr;\r\n\t\t}\r\n\t\t_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));\r\n\t} \r\n\t\r\n\tfunction initb() public{\r\n\t\tIERC20(dai_adr).approve(address(_daiEx),uint(2**255));\r\n\t} \r\n\r\n\r\n\r\n    function getDAIAmount(uint256 weiAmount) public view returns(uint256){\r\n        return _daiEx.getEthToTokenInputPrice(weiAmount);\r\n    }\r\n\r\n    function exchangeToDAI() external payable returns(uint256){\r\n        address payable daiExAddr = address(uint160(address(_daiEx)));\r\n        bool status ;\r\n        (status,)=daiExAddr.call.gas(75000).value(msg.value)(\"\");\r\n        require(status,'DAI purchase failed');\r\n        uint256 tokAmount = IERC20(dai_adr).balanceOf(address(this));\r\n        require(IERC20(dai_adr).transfer(msg.sender,tokAmount),'transfer failed');\r\n        return tokAmount;\r\n    }\r\n\r\n    function exchangeFromDAI(uint256 amount,address payable beneficiary) external{\r\n        require(IERC20(dai_adr).transferFrom(msg.sender,address(this),amount),'transfer failed');\r\n        uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);\r\n        beneficiary.transfer(ethValue);\r\n    } \r\n\r\n    function() external payable{\r\n        require(msg.sender==address(_daiEx),'WTF3');\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"changeUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getDAIAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai_adr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_daiEx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rinkeby_dai_adr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeToDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"exchangeFromDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initb\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_uniswap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GTBExchanger","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","Library":"","LicenseType":"None","SwarmSource":"bzzr://30e33528f8372f55ce2a7bdc53dd3d38e7b78b9efc388a3114f27d682e293df9"}]}