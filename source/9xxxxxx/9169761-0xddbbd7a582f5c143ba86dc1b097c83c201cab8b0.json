{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256){\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256){\r\n    uint256 c = _a / _b;\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256){\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  function add(uint256 _a,uint256 _b) internal pure returns (uint256){\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor () public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20StdToken is Ownable, SafeMath {\r\n  uint256 public totalSupply;\r\n\tstring  public name;\r\n\tuint8   public decimals;\r\n\tstring  public symbol;\r\n\tbool    public isMint;     // 是否可增发\r\n    bool    public isBurn;    // 是否可销毁\r\n    bool    public isFreeze; // 是否可冻结\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => uint256) public freezeOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  constructor(\r\n    address _owner,\r\n    string _name,\r\n    string _symbol,\r\n    uint8 _decimals,\r\n    uint256 _initialSupply,\r\n    bool _isMint,\r\n    bool _isBurn,\r\n    bool _isFreeze) public {\r\n    require(_owner != address(0));\r\n    owner             = _owner;\r\n  \tdecimals          = _decimals;\r\n  \tsymbol            = _symbol;\r\n  \tname              = _name;\r\n  \tisMint            = _isMint;\r\n    isBurn            = _isBurn;\r\n    isFreeze          = _isFreeze;\r\n  \ttotalSupply       = _initialSupply * 10 ** uint256(decimals);\r\n    balanceOf[_owner] = totalSupply;\r\n }\r\n\r\n // This generates a public event on the blockchain that will notify clients\r\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n /* This notifies clients about the amount burnt */\r\n event Burn(address indexed _from, uint256 value);\r\n\r\n  /* This notifies clients about the amount frozen */\r\n event Freeze(address indexed _from, uint256 value);\r\n\r\n  /* This notifies clients about the amount unfrozen */\r\n event Unfreeze(address indexed _from, uint256 value);\r\n\r\n function approve(address _spender, uint256 _value) public returns (bool success) {\r\n   allowance[msg.sender][_spender] = _value;\r\n   emit Approval(msg.sender, _spender, _value);\r\n   success = true;\r\n }\r\n\r\n /// @notice send `_value` token to `_to` from `msg.sender`\r\n /// @param _to The address of the recipient\r\n /// @param _value The amount of token to be transferred\r\n /// @return Whether the transfer was successful or not\r\n function transfer(address _to, uint256 _value) public returns (bool success) {\r\n   require(_to != 0);\r\n   require(balanceOf[msg.sender] >= _value);\r\n   require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n   // balanceOf[msg.sender] -= _value;\r\n   balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);\r\n\r\n   // balanceOf[_to] += _value;\r\n   balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\r\n\r\n   emit Transfer(msg.sender, _to, _value);\r\n   success = true;\r\n }\r\n\r\n /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n /// @param _from The address of the sender\r\n /// @param _to The address of the recipient\r\n /// @param _value The amount of token to be transferred\r\n /// @return Whether the transfer was successful or not\r\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n   require(_to != 0);\r\n   require(balanceOf[_from] >= _value);\r\n   require(allowance[_from][msg.sender] >= _value);\r\n   require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n   // balanceOf[_from] -= _value;\r\n   balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);\r\n   // balanceOf[_to] += _value;\r\n   balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\r\n\r\n   // allowance[_from][msg.sender] -= _value;\r\n   allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\r\n\r\n   emit Transfer(_from, _to, _value);\r\n   success = true;\r\n }\r\n\r\n  function mint(uint256 amount) onlyOwner public {\r\n  \trequire(isMint);\r\n  \trequire(amount >= 0);\r\n  \t// balanceOf[msg.sender] += amount;\r\n    balanceOf[msg.sender] = SafeMath.add(balanceOf[msg.sender], amount);\r\n  \t// totalSupply += amount;\r\n    totalSupply = SafeMath.add(totalSupply, amount);\r\n  }\r\n\r\n  function burn(uint256 _value) public returns (bool success) {\r\n    require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n    require(_value > 0);\r\n    balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n    totalSupply = SafeMath.sub(totalSupply, _value);                                // Updates totalSupply\r\n    emit Burn(msg.sender, _value);\r\n    success = true;\r\n }\r\n\r\n  function freeze(uint256 _value) public returns (bool success) {\r\n    require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n    require(_value > 0);\r\n    balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n    freezeOf[msg.sender] = SafeMath.add(freezeOf[msg.sender], _value);                                // Updates totalSupply\r\n    emit Freeze(msg.sender, _value);\r\n    success = true;\r\n  }\r\n\r\n  function unfreeze(uint256 _value) public returns (bool success) {\r\n    require(freezeOf[msg.sender] >= _value);            // Check if the sender has enough\r\n    require(_value > 0);\r\n    freezeOf[msg.sender] = SafeMath.sub(freezeOf[msg.sender], _value);                      // Subtract from the sender\r\n    balanceOf[msg.sender] = SafeMath.add(balanceOf[msg.sender], _value);\r\n    emit Unfreeze(msg.sender, _value);\r\n    success = true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_isMint\",\"type\":\"bool\"},{\"name\":\"_isBurn\",\"type\":\"bool\"},{\"name\":\"_isFreeze\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ERC20StdToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a7536a83f4ef88b0435cc83695b7101f21e9ad2f000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000004e9e57c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054c41524b5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024c54000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://75bfe20b4b8713c4ccc9645c864499b1d32032cb37e816e6a076349345bd15a7"}]}