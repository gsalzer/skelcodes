{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\ncontract Token {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HumaniqToken is Token {\r\n    function issueTokens(address _for, uint tokenCount) payable returns (bool);\r\n    function changeEmissionContractAddress(address newAddress) returns (bool);\r\n}\r\n\r\n/// @title HumaniqICO contract - Takes funds from users and issues tokens.\r\n/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\r\ncontract HumaniqICO {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    HumaniqToken public humaniqToken = HumaniqToken(0x9734c136F5c63531b60D02548Bca73a3d72E024D);\r\n\r\n    /*\r\n     * Crowdfunding parameters\r\n     */\r\n    uint constant public CROWDFUNDING_PERIOD = 12 days;\r\n    // Goal threshold, 10000 ETH\r\n    uint constant public CROWDSALE_TARGET = 10000 ether;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public founder;\r\n    address public multisig;\r\n    uint public startDate = 0;\r\n    uint public icoBalance = 0;\r\n    uint public baseTokenPrice = 666 szabo; // 0.000666 ETH\r\n    uint public discountedPrice = baseTokenPrice;\r\n    bool public isICOActive = false;\r\n\r\n    // participant address => value in Wei\r\n    mapping (address => uint) public investments;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyFounder() {\r\n        // Only founder is allowed to do this action.\r\n        if (msg.sender != founder) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier minInvestment() {\r\n        // User has to send at least the ether value of one token.\r\n        if (msg.value < baseTokenPrice) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier icoActive() {\r\n        if (isICOActive == false) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier applyBonus() {\r\n        uint icoDuration = now - startDate;\r\n        if (icoDuration >= 248 hours) {\r\n            discountedPrice = baseTokenPrice;\r\n        }\r\n        else if (icoDuration >= 176 hours) {\r\n            discountedPrice = (baseTokenPrice * 100) / 107;\r\n        }\r\n        else if (icoDuration >= 104 hours) {\r\n            discountedPrice = (baseTokenPrice * 100) / 120;\r\n        }\r\n        else if (icoDuration >= 32 hours) {\r\n            discountedPrice = (baseTokenPrice * 100) / 142;\r\n        }\r\n        else if (icoDuration >= 12 hours) {\r\n            discountedPrice = (baseTokenPrice * 100) / 150;\r\n        }\r\n        else {\r\n            discountedPrice = (baseTokenPrice * 100) / 170;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows user to create tokens if token creation is still going\r\n    /// and cap was not reached. Returns token count.\r\n    function fund()\r\n        public\r\n        applyBonus\r\n        icoActive\r\n        minInvestment\r\n        payable\r\n        returns (uint)\r\n    {\r\n        // Token count is rounded down. Sent ETH should be multiples of baseTokenPrice.\r\n        uint tokenCount = msg.value / discountedPrice;\r\n        // Ether spent by user.\r\n        uint investment = tokenCount * discountedPrice;\r\n        // Send change back to user.\r\n        if (msg.value > investment && !msg.sender.send(msg.value - investment)) {\r\n            throw;\r\n        }\r\n        // Update fund's and user's balance and total supply of tokens.\r\n        icoBalance += investment;\r\n        investments[msg.sender] += investment;\r\n        // Send funds to founders.\r\n        if (!multisig.send(investment)) {\r\n            // Could not send money\r\n            throw;\r\n        }\r\n        if (!humaniqToken.issueTokens(msg.sender, tokenCount)) {\r\n            // Tokens could not be issued.\r\n            throw;\r\n        }\r\n        return tokenCount;\r\n    }\r\n\r\n    /// @dev Issues tokens for users who made BTC purchases.\r\n    /// @param beneficiary Address the tokens will be issued to.\r\n    /// @param _tokenCount Number of tokens to issue.\r\n    function fundBTC(address beneficiary, uint _tokenCount)\r\n        external\r\n        applyBonus\r\n        icoActive\r\n        onlyFounder\r\n        returns (uint)\r\n    {\r\n        // Approximate ether spent.\r\n        uint investment = _tokenCount * discountedPrice;\r\n        // Update fund's and user's balance and total supply of tokens.\r\n        icoBalance += investment;\r\n        investments[beneficiary] += investment;\r\n        if (!humaniqToken.issueTokens(beneficiary, _tokenCount)) {\r\n            // Tokens could not be issued.\r\n            throw;\r\n        }\r\n        return _tokenCount;\r\n    }\r\n\r\n    /// @dev If ICO has successfully finished sends the money to multisig\r\n    /// wallet.\r\n    function finishCrowdsale()\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        if (isICOActive == true) {\r\n            isICOActive = false;\r\n            // Founders receive 14% of all created tokens.\r\n            uint founderBonus = ((icoBalance / baseTokenPrice) * 114) / 100;\r\n            if (!humaniqToken.issueTokens(multisig, founderBonus)) {\r\n                // Tokens could not be issued.\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets token value in Wei.\r\n    /// @param valueInWei New value.\r\n    function changeBaseTokenPrice(uint valueInWei)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        baseTokenPrice = valueInWei;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function that activates ICO.\r\n    function startICO()\r\n        external\r\n        onlyFounder\r\n    {\r\n        if (isICOActive == false && startDate == 0) {\r\n          // Start ICO\r\n          isICOActive = true;\r\n          // Set start-date of token creation\r\n          startDate = now;\r\n        }\r\n    }\r\n\r\n    /// @dev Contract constructor function sets founder and multisig addresses.\r\n    function HumaniqICO(address _multisig) {\r\n        // Set founder address\r\n        founder = msg.sender;\r\n        // Set multisig address\r\n        multisig = _multisig;\r\n    }\r\n\r\n    /// @dev Fallback function. Calls fund() function to create tokens.\r\n    function () payable {\r\n        fund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDFUNDING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"fundBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humaniqToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"changeBaseTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"HumaniqICO","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a2c9a7578e2172f32a36c5c0e49d64776f9e7883","Library":"","SwarmSource":""}]}