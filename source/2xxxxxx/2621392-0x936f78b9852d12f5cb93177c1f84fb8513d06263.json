{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n// ERC20-compliant wrapper token for GNT\r\n// adapted from code provided by u/JonnyLatte\r\n\r\ncontract TokenInterface {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) returns (bool success);\r\n    function transferFrom(\r\n        address _from, address _to, uint256 _amount) returns (bool success);\r\n    function approve(address _spender, uint256 _amount) returns (bool success);\r\n    function allowance(\r\n        address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner, address indexed _spender, uint256 _amount);\r\n}\r\n\r\ncontract Token is TokenInterface {\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _to,\r\n                       uint256 _amount) internal returns (bool success) {\r\n        if (balances[msg.sender] >= _amount && _amount > 0) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n           return false;\r\n        }\r\n    }\r\n\r\n    function _transferFrom(address _from,\r\n                           address _to,\r\n                           uint256 _amount) internal returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0) {\r\n\r\n            balances[_to] += _amount;\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner,\r\n                       address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract DepositSlot {\r\n    address public constant GNT = 0xa74476443119A942dE498590Fe1f2454d7D4aC0d;\r\n\r\n    address public wrapper;\r\n\r\n    modifier onlyWrapper {\r\n        if (msg.sender != wrapper) throw;\r\n        _;\r\n    }\r\n\r\n    function DepositSlot(address _wrapper) {\r\n        wrapper = _wrapper;\r\n    }\r\n\r\n    function collect() onlyWrapper {\r\n        uint amount = TokenInterface(GNT).balanceOf(this);\r\n        if (amount == 0) throw;\r\n\r\n        TokenInterface(GNT).transfer(wrapper, amount);\r\n    }\r\n}\r\n\r\ncontract GolemNetworkTokenWrapped is Token {\r\n    string public constant standard = \"Token 0.1\";\r\n    string public constant name = \"Golem Network Token Wrapped\";\r\n    string public constant symbol = \"GNTW\";\r\n    uint8 public constant decimals = 18;     // same as GNT\r\n\r\n    address public constant GNT = 0xa74476443119A942dE498590Fe1f2454d7D4aC0d;\r\n\r\n    mapping (address => address) depositSlots;\r\n\r\n    function createPersonalDepositAddress() returns (address depositAddress) {\r\n        if (depositSlots[msg.sender] == 0) {\r\n            depositSlots[msg.sender] = new DepositSlot(this);\r\n        }\r\n\r\n        return depositSlots[msg.sender];\r\n    }\r\n\r\n    function getPersonalDepositAddress(\r\n                address depositer) constant returns (address depositAddress) {\r\n        return depositSlots[depositer];\r\n    }\r\n\r\n    function processDeposit() {\r\n        address depositSlot = depositSlots[msg.sender];\r\n        if (depositSlot == 0) throw;\r\n\r\n        DepositSlot(depositSlot).collect();\r\n\r\n        uint balance = TokenInterface(GNT).balanceOf(this);\r\n        if (balance <= totalSupply) throw;\r\n\r\n        uint freshGNTW = balance - totalSupply;\r\n        totalSupply += freshGNTW;\r\n        balances[msg.sender] += freshGNTW;\r\n        Transfer(address(this), msg.sender, freshGNTW);\r\n    }\r\n\r\n    function transfer(address _to,\r\n                      uint256 _amount) returns (bool success) {\r\n        if (_to == address(this)) {\r\n            withdrawGNT(_amount);   // convert back to GNT\r\n            return true;\r\n        } else {\r\n            return _transfer(_to, _amount);     // standard transfer\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from,\r\n                          address _to,\r\n                          uint256 _amount) returns (bool success) {\r\n        if (_to == address(this)) throw;        // not supported\r\n        return _transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    function withdrawGNT(uint amount) internal {\r\n        if (balances[msg.sender] < amount) throw;\r\n\r\n        balances[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        Transfer(msg.sender, address(this), amount);\r\n\r\n        TokenInterface(GNT).transfer(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"getPersonalDepositAddress\",\"outputs\":[{\"name\":\"depositAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPersonalDepositAddress\",\"outputs\":[{\"name\":\"depositAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GNT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GolemNetworkTokenWrapped","CompilerVersion":"v0.4.5-nightly.2016.11.11+commit.6248e92d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}