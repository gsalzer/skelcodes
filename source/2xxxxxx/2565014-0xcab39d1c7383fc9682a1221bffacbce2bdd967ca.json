{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract Destination {\r\n    function recover(address _from, address _to) returns(bool);\r\n}\r\n\r\ncontract RecoveryWithTenant {\r\n    event Recovery(uint indexed nonce, address indexed from, address indexed to);\r\n    event Setup(uint indexed nonce, address indexed user);\r\n    \r\n    //1: user not existing\r\n    //2: conflict, user exists already\r\n    //3: signature not by tenant\r\n    //4: nonce/signature used before\r\n    //5: contract call failed\r\n    //6: oracle access denied\r\n    //8: requested user not found\r\n    event Error(uint indexed nonce, uint code);\r\n    \r\n    struct User {\r\n        address addr;\r\n    }\r\n    \r\n    mapping (address => uint) userIndex;\r\n    User[] public users;\r\n\r\n    address public oracle;\r\n    address public tenant;\r\n    mapping(uint => bool) nonceUsed;\r\n    address public callDestination;\r\n\r\n\r\n    modifier onlyOracle() {\r\n        if (msg.sender == oracle) {\r\n            _;\r\n        }\r\n        Error(0, 6);\r\n    }\r\n    \r\n    modifier noEther() {\r\n        if (msg.value > 0) throw;\r\n        _;\r\n    }\r\n\r\n    function RecoveryWithTenant() {\r\n        oracle = msg.sender;\r\n        tenant = msg.sender;\r\n        users.length++;\r\n    }\r\n    \r\n    //############# INTERNAL FUNCTIONS\r\n    \r\n    function _checkSigned(bytes32 _hash, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool) {\r\n        address recovered = ecrecover(_hash, _v, _r, _s);\r\n\r\n        if (tenant != recovered) {\r\n            Error(_nonce, 3);\r\n            return false;\r\n        }\r\n        if (nonceUsed[_nonce]) {\r\n            Error(_nonce, 4);\r\n            return false;\r\n        }\r\n        nonceUsed[_nonce] = true; \r\n        return true;\r\n    }\r\n    \r\n    \r\n    //############# PUBLIC FUNCTIONS\r\n    \r\n    function setOracle(address _newOracle) noEther onlyOracle {\r\n        oracle = _newOracle;\r\n    }\r\n    \r\n    function configure(address _tenant, address _callDestination, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\r\n        if(tenant != oracle && !_checkSigned(sha3(_tenant, _callDestination, _nonce), _nonce, _v, _r, _s))\r\n            return false;\r\n        tenant = _tenant;\r\n        callDestination = _callDestination;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function addUser(address _userAddr, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\r\n        if(userIndex[_userAddr] > 0) {\r\n            Error(_nonce, 2);\r\n            return false;\r\n        }\r\n        if(!_checkSigned(sha3(_userAddr, _nonce), _nonce, _v, _r, _s))\r\n            return false;\r\n        uint posUser = users.length++;\r\n        userIndex[_userAddr] = posUser;\r\n        users[posUser] = User(_userAddr);\r\n        Setup(_nonce, _userAddr);\r\n        return true;\r\n    }\r\n    \r\n    function recoverUser(address _oldAddr, address _newAddr, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\r\n        uint userPos = userIndex[_oldAddr];\r\n        if (userPos == 0) {\r\n            Error(_nonce, 1); //user doesn't exsit\r\n            return false;\r\n        }\r\n        \r\n        if (!_checkSigned(sha3(_oldAddr, _newAddr, _nonce), _nonce, _v, _r, _s))\r\n            return false;\r\n        bool result = Destination(callDestination).recover(_oldAddr, _newAddr);\r\n        if (result) {\r\n            users[userPos].addr = _newAddr;\r\n            delete userIndex[_oldAddr];\r\n            userIndex[_newAddr] = userPos;\r\n            Recovery(_nonce, _oldAddr, _newAddr);\r\n            return true;\r\n        }\r\n        Error(_nonce, 5);\r\n        return false;\r\n    }\r\n\r\n    function () noEther {\r\n        throw;\r\n    }\r\n    \r\n    //############# STATIC FUNCTIONS\r\n    \r\n    function isUser(address _userAddr) constant returns (bool) {\r\n        return (userIndex[_userAddr] > 0);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"addUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tenant\",\"type\":\"address\"},{\"name\":\"_callDestination\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"configure\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddr\",\"type\":\"address\"},{\"name\":\"_newAddr\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"recoverUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Recovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"RecoveryWithTenant","CompilerVersion":"v0.4.5-nightly.2016.11.4+commit.d97d267a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}