{"status":"1","message":"OK","result":[{"SourceCode":"contract CMHome {\r\naddress CMAdmin = 0xD97C2Ecbd1ba8C1785cf416a7111197fd677F638; \r\n////////////////////COYPRIGHT INFORMATION///////////////\t\r\n/*copyright 2016 @coinmechanics.com. All rights reserved*/\t\r\n///////////////DATA STRUCTURE & STORES/////////\r\nstruct WhiteList{\r\nbool Valid;\r\nbool Created;\r\nbool Abitration;\t\r\n}\r\nmapping(address => WhiteList) public whitelist;\r\n\t\r\nstruct MyContracts {\r\nbool Created;\r\naddress Contr;\t\r\n}\t\t\r\nmapping(uint32 => mapping (address => MyContracts)) public mycontracts;\r\n\r\nstruct Factories {\r\nbool Authorised;\r\nbool Controlled;\r\n}\r\nmapping (address => Factories) public factory;\r\n\r\n/////////////CONFIGURE FACTORY//////////////\r\nfunction Config(uint8 control, address _factory){\r\nif(msg.sender != CMAdmin)throw;\r\n\r\nfactory[_factory].Authorised = true;\r\n\r\nif(control == 0){\r\nfactory[_factory].Controlled = false;\r\n}\r\nif(control == 1){\r\nfactory[_factory].Controlled = true;\r\n}\r\n}\r\n/////////UPDATE ARBITRATION STATUS//////////////\r\nfunction Auth(uint8 state, address _contract){\r\nif(msg.sender != CMAdmin)throw;\r\n\r\nif(state == 0){\r\nwhitelist[_contract].Abitration = false;\r\n}\r\nif(state == 1){\r\nwhitelist[_contract].Abitration = true;\r\n}\r\n}\t\t\r\n///////////////START REGISTRATION////////////////\r\nfunction RegisterOne(uint32 _id, address _owner, address _contract){\r\nif(factory[msg.sender].Authorised == false) throw;\r\nwhitelist[_contract].Created = true;\r\nwhitelist[_contract].Valid = false;\r\nwhitelist[_contract].Abitration = false;\r\nmycontracts[_id][_owner].Created = true;\r\nmycontracts[_id][_owner].Contr = _contract;\r\n}\r\n\r\n//////////////COMPLETE REGISTERATION//////////\r\n\r\nfunction RegisterTwo(address _contract, address _factr){\r\n\r\nif(whitelist[_contract].Created == false)throw;\r\nif(whitelist[_contract].Valid == true)throw;\r\nwhitelist[_contract].Valid = true;\r\n\r\nif(factory[_factr].Controlled == true) {\r\nwhitelist[_contract].Abitration = false;\r\n}\r\n\r\nif(factory[_factr].Controlled == false) {\r\nwhitelist[_contract].Abitration = true;\r\n}\r\n}\r\nfunction(){ throw; }\t\r\n}///////////////////////////////end of cm home contract\r\n\r\n\r\ncontract BookieFactory {\r\naddress CMAdmin = 0xD97C2Ecbd1ba8C1785cf416a7111197fd677F638;\r\n\t\r\n///////////////CONTRACT ADDRESS////\r\nfunction GetContractAddr() constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContrAddr2 = GetContractAddr();\r\n\t\r\n//////CREATE BOOKIE CONTRACT////////////\r\n\r\nfunction Create(uint32 pin, address _cmhome){\r\n\r\naddress sender = msg.sender;\r\naddress atlantis = new Bookie(sender,ContrAddr2);\r\n\r\nCMHome\r\nHomeCall = CMHome(_cmhome);\t\r\n(HomeCall.RegisterOne(pin,sender,atlantis));\t\r\n}\r\n\r\n////////DATA STRUCTURE & STORES////////\r\n\r\nstruct Pricing {\r\nuint32 ServiceFee;\r\nuint32 DefaultFee;\t\r\n}\r\nPricing pri;\r\n\r\n/////////UPDATE PRICES////////\r\nfunction UpdatePrice(uint8 component, uint32 price){\r\nif(msg.sender != CMAdmin) throw;       \r\nif(component == 1) pri.ServiceFee = price;\r\nif(component == 2) pri.DefaultFee = price;  \r\n}\r\n\r\n//////////GET PRICES////////\r\nfunction GetPrice(uint8 get)returns (uint32){\r\nif(get == 1) return pri.ServiceFee;\r\nif(get == 2) return pri.DefaultFee;\r\n}\r\n\r\nfunction() { throw; }\r\n}//////////////////////////end of moonraker factory\r\n\r\ncontract Bookie {\r\naddress CMAccount = 0x346a16921af2db3788d29FB171604f1251A25aBF;\r\naddress CMAdmin = 0xD97C2Ecbd1ba8C1785cf416a7111197fd677F638;\r\nuint256 WeiConverter = 1000000000000000000;\r\nuint32 Factor = 100000000;\r\nuint32 ServiceFee;\r\nuint32 DefaultFee;\r\nuint256 Fee;\t\r\nuint256 Pay;\r\nuint256 NetPayout;\r\n////////////CONTRACT ADDRESS///////////////////////////\r\nfunction GetContractAddr() constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContrAddr = GetContractAddr();\r\n\r\n/////////////CONTRACT DATA STRUCTURE//////////////////\r\n\r\nstruct Core {\r\naddress Owner;\r\naddress Factory;\r\naddress Home;\r\nbool SetUp;\r\n}\r\n\r\nstruct fContr1 {\r\nuint256 ContractID;\t\r\nstring ContractType;\r\nstring Event;\r\nstring EventDateTime;\r\n}\t\r\n\t\r\nstruct fContr2 {\r\nuint32 CounterPartyDeposit;\r\nuint32 OwnerDeposit;\r\n}\r\n\r\nstruct fContr3 {\r\nstring ContractCurrency;\t\r\nstring BetAmount;\t\r\nstring PriceOffered;\r\nstring OutcomeOffered;\r\n}\r\n\r\nstruct Status {\r\nbool Dispute;\r\nbool ActivePro;\r\nbool ActiveSet;\r\nbool ActiveArb;\r\n}\r\n\r\nstruct Deposits {\r\nbool CounterPartyFunded;\r\nbool OwnerFunded;\r\naddress CounterPartyAddr;\r\naddress OwnerAddr;\r\n}\r\n\r\nstruct Settlement {\r\nbool CounterPartySettled; \r\nbool OwnerSettled;\r\nuint32 CounterPartyPayout;\r\nuint32 OwnerPayout;\r\n} \r\n\r\nstruct Arbitration {\r\nbool OwnerDefault;\r\nuint32 PayCounterParty;\r\nuint32 PayOwner;\r\n}\r\n///////////////MAP DATA STORES///////////////////\r\nmapping (uint256 => fContr1) public contractPartOne;\t\r\nmapping (uint256 => fContr2) public contractPartTwo;\r\nmapping (uint256 => fContr3) public contractPartThree;\r\nmapping (uint256 => Settlement) public settlement;\r\nmapping (uint256 => Arbitration) public arbitration;\r\nmapping (uint256 => Deposits) public deposits;\r\nmapping (uint256 => Status) public status;\t\r\n\t\r\n////////////INITIALIZE DATA STORES/////////////\r\nfContr1 c1;\t\r\nfContr2 c2;\r\nfContr3 c3;\r\nSettlement se;\r\nArbitration ar;\r\nDeposits de;\r\nStatus st;\r\nCore co;\r\n\r\n////////////////CONSTRUCTOR///////////////////////\r\nfunction Bookie(address _sender,address _factory){\r\nco.Owner = _sender;\r\nco.Factory = _factory;\r\n}\r\n\r\n//////////////////COMPLETE REGISTRATION////////////////////\r\nfunction Register(address cmhome){\r\nCMHome\r\nHomeCall = CMHome(cmhome);\t\r\n(HomeCall.RegisterTwo(ContrAddr,co.Factory));\r\nco.Home = cmhome;\r\nco.SetUp = true;\r\n}\r\n\r\n//////////////////////////CONTRACT REFERENCE///////////////////\r\nuint256 ContractNum = 1;\t\r\nevent ProposalLog(uint256 contract_id);\t\t\t\r\n////////////////////////////PROPOSAL//////////////////////////\r\nfunction CreateProposal(\r\nstring Event,\r\nstring EventDateTime,\r\nstring ContractCurrency,\t\r\nstring BetAmount,\r\nstring OutcomeOffered,\r\nstring PriceOffered,\r\nuint32 CounterPartyDeposit,\r\nuint32 OwnerDeposit) {\r\nif(msg.sender != co.Owner) throw;   \r\nif(co.SetUp != true) throw;        \r\nif(st.ActivePro == true) throw;   \r\nif(st.ActiveSet == true) throw;   \r\nif(st.ActiveArb == true) throw; \r\nc1.ContractID = ContractNum;\t\r\nc1.ContractType = 'PEER TO PEER BETTING';\t\r\nc1.Event = Event;\r\nc1.EventDateTime = EventDateTime;\t\r\nc2.CounterPartyDeposit = CounterPartyDeposit;\t\r\nc2.OwnerDeposit = OwnerDeposit;\t\r\nc3.ContractCurrency = ContractCurrency;\t\r\nc3.BetAmount = BetAmount;\r\nc3.OutcomeOffered = OutcomeOffered;\r\nc3.PriceOffered = PriceOffered;\r\ncontractPartOne[ContractNum].ContractID = ContractNum;\r\ncontractPartOne[ContractNum].ContractType = 'PEER TO PEER BETTING';\t\r\ncontractPartOne[ContractNum].Event = Event; \r\ncontractPartOne[ContractNum].EventDateTime = EventDateTime; \r\ncontractPartTwo[ContractNum].CounterPartyDeposit = CounterPartyDeposit;\r\ncontractPartTwo[ContractNum].OwnerDeposit = OwnerDeposit;\r\ncontractPartThree[ContractNum].ContractCurrency = ContractCurrency;\t\r\ncontractPartThree[ContractNum].BetAmount = BetAmount;\r\ncontractPartThree[ContractNum].OutcomeOffered = OutcomeOffered;\r\ncontractPartThree[ContractNum].PriceOffered = PriceOffered;\r\nst.ActivePro = true;\r\nstatus[ContractNum].ActivePro = true;\r\nProposalLog(ContractNum);\t\r\n}\r\n\t\r\n////////////////OWNER DEPOSIT//////////////\r\n\r\nfunction OwnerDeposit(){\r\nuint256 _OwnerDeposit = c2.OwnerDeposit *  WeiConverter;\r\nif(st.ActivePro == false) throw; \r\nif(msg.sender != co.Owner) throw;\r\nif(msg.value != _OwnerDeposit) throw;\r\nif(deposits[ContractNum].OwnerFunded == true) throw;\r\nse.OwnerSettled = false;\r\nde.OwnerAddr = co.Owner;\r\nde.OwnerFunded = true;\r\ndeposits[ContractNum].OwnerFunded = true;\t\r\ndeposits[ContractNum].OwnerAddr = co.Owner;\r\n}\r\n\r\n/////////COUNTER PARTY DEPOSIT/////////////\r\n\r\nfunction CounterPartyDeposit(){\r\nuint256 _CounterPartyDeposit = c2.CounterPartyDeposit * WeiConverter;\r\nif(st.ActivePro == false) throw; \r\nif(msg.sender == co.Owner) throw;\r\nif(msg.value != _CounterPartyDeposit) throw;\r\nif(deposits[ContractNum].CounterPartyFunded == true) throw;\r\nse.CounterPartySettled = false;\r\nde.CounterPartyAddr = msg.sender;\r\nde.CounterPartyFunded = true;\r\ndeposits[ContractNum].CounterPartyFunded = true;\t\r\ndeposits[ContractNum].CounterPartyAddr = msg.sender;\t\t\r\n}\r\n\r\n////////////////////////////SETTLEMENT//////////////////\r\n\r\nfunction Settle (\r\nuint32 CounterPartyPayout,\r\nuint32 OwnerPayout){\r\nif(msg.sender != co.Owner) throw;\r\nif(st.Dispute == true) throw;\t\r\nif(st.ActivePro == false) throw;   \r\nif(st.ActiveSet == true) throw;   \r\nif(de.CounterPartyFunded == false) throw;   \r\nif(de.OwnerFunded == false) throw;        \r\nif(CounterPartyPayout < 100) throw; \r\nif(OwnerPayout < 100) throw;       \r\nse.CounterPartyPayout = CounterPartyPayout;\r\nse.OwnerPayout = OwnerPayout;\r\nsettlement[ContractNum].CounterPartyPayout = CounterPartyPayout;\r\nsettlement[ContractNum].OwnerPayout = OwnerPayout;\r\nst.ActiveSet = true;\r\nstatus[ContractNum].ActiveSet = true;\t\r\n}\r\n\r\n///////////SETTLEMENT PAYOUT/////////////////\r\nfunction Payout (){\r\nif(st.ActiveSet != true) throw;\r\nif(st.Dispute == true) throw;\r\nif(st.ActiveArb == true) throw;\r\nif((msg.sender != de.CounterPartyAddr) && (msg.sender != de.OwnerAddr))throw; \r\nif(msg.sender == de.OwnerAddr && se.CounterPartySettled == false)throw;\r\n\r\nBookieFactory\r\nFactoryCall = BookieFactory(co.Factory);\t\r\nServiceFee = (FactoryCall.GetPrice(1));\r\n\t\r\nif((msg.sender == de.OwnerAddr) && (se.OwnerSettled == false)){\r\nPay = ((se.OwnerPayout * WeiConverter) / 100);\r\nse.OwnerSettled = true;\r\nsettlement[ContractNum].OwnerSettled = true;\r\nif(!de.OwnerAddr.send(Pay)) throw;\r\n}\r\nif((msg.sender == de.CounterPartyAddr) && (se.CounterPartySettled == false)){\r\nFee = ((se.CounterPartyPayout * ServiceFee * WeiConverter) / Factor);\r\nPay = ((se.CounterPartyPayout * WeiConverter) / 100);\r\nNetPayout = Pay - Fee;\r\nse.CounterPartySettled = true;\r\nsettlement[ContractNum].CounterPartySettled = true;\r\nif(!de.CounterPartyAddr.send(NetPayout)) throw;\r\nif(!CMAccount.send(Fee)) throw;\r\n}\r\n}\t\r\n/////////////DISPUTE/////////////////\r\nfunction Dispute() {\r\nif((msg.sender != co.Owner) && (msg.sender != de.CounterPartyAddr)) throw;     \r\nif(st.Dispute == true) throw; \r\nif(se.CounterPartySettled == true) throw;\r\nif(se.OwnerSettled == true) throw;\r\nif(de.OwnerFunded == false && msg.sender == co.Owner)throw; \r\nif(de.CounterPartyFunded == false && msg.sender == de.CounterPartyAddr)throw;\r\nif(de.OwnerFunded != true && de.CounterPartyFunded != true)throw; \r\nst.Dispute = true;\r\nstatus[ContractNum].Dispute = true;\r\n}\r\n////////////////////////////ARBITRATION////////////////////\r\n\r\nfunction Arbitrate(\r\nuint32 PayCounterParty,\r\nuint32 PayOwner,\r\nbool OwnerDefault){\r\nif(msg.sender != CMAdmin) throw;   \r\nif(st.ActivePro == false) throw;  \r\nif(st.Dispute == false) throw;    \r\nif(st.ActiveArb == true) throw;  \r\nif(PayCounterParty < 100) throw; \r\nif(PayOwner < 100) throw;       \r\nar.PayCounterParty = PayCounterParty;\r\nar.PayOwner = PayOwner;\r\nar.OwnerDefault = OwnerDefault;\t\r\narbitration[ContractNum].PayCounterParty = PayCounterParty;\t\r\narbitration[ContractNum].PayOwner = PayOwner;\r\narbitration[ContractNum].OwnerDefault = OwnerDefault;\r\nst.ActiveArb = true;\t\r\nstatus[ContractNum].ActiveArb = true;\t\r\n}\r\n\r\n///////////COUNTER PARTY ARBITRATION PAYOUT/////////////\r\nfunction CCPayoutArb (){\t\r\nif(st.Dispute == false) throw;\r\nif(st.ActiveArb == false) throw;\r\nif(msg.sender != de.CounterPartyAddr)throw; \r\n\r\nBookieFactory\r\nFactoryCall = BookieFactory(co.Factory);\t\r\nServiceFee = (FactoryCall.GetPrice(1));\r\nDefaultFee = (FactoryCall.GetPrice(2));\r\n\r\nif((ar.OwnerDefault == true) && (se.CounterPartySettled == false)){\r\nFee = ((ar.PayCounterParty * ServiceFee * WeiConverter) / Factor);\t\r\nPay = ((ar.PayCounterParty * WeiConverter) / 100);\r\nNetPayout = Pay - Fee;\r\nse.CounterPartySettled = true;\r\nsettlement[ContractNum].CounterPartySettled = true;\r\nif(!de.CounterPartyAddr.send(NetPayout)) throw;\r\nif(!CMAccount.send(Fee)) throw;\r\n}\r\nif((ar.OwnerDefault == false) && (se.CounterPartySettled == false)){\r\nFee = ((ar.PayCounterParty * DefaultFee * WeiConverter) / Factor);\r\nPay = ((ar.PayCounterParty * WeiConverter) / 100);\r\nNetPayout = Pay - Fee;\r\nse.CounterPartySettled = true;\r\nsettlement[ContractNum].CounterPartySettled = true;\r\nif(!de.CounterPartyAddr.send(NetPayout)) throw;\r\nif(!CMAccount.send(Fee)) throw;\r\n}\r\n}\r\n\r\n//////////////////OWNER ARBITRATION PAYOUT////////////\t\r\nfunction OWPayoutArb (){\t\t\r\nif(st.Dispute == false) throw;\r\nif(st.ActiveArb == false) throw;\r\nif(msg.sender != de.OwnerAddr)throw; \r\n\r\nBookieFactory\r\nFactoryCall = BookieFactory(co.Factory);\t\r\nServiceFee = (FactoryCall.GetPrice(1));\r\nDefaultFee = (FactoryCall.GetPrice(2));\r\n\r\nif((ar.OwnerDefault == false) && (se.OwnerSettled == false)){\r\nPay = ((ar.PayOwner * WeiConverter) / 100);\r\nif(!de.OwnerAddr.send(Pay)) throw;\r\nse.OwnerSettled = true;\r\nsettlement[ContractNum].OwnerSettled = true;\r\n}\r\n\r\nif((ar.OwnerDefault == true) && (se.OwnerSettled == false)){\r\nFee = ((ar.PayOwner * DefaultFee * WeiConverter) / Factor);\t\r\nPay = ((ar.PayOwner * WeiConverter) / 100); \r\nNetPayout = Pay - Fee;\r\nif(!de.OwnerAddr.send(NetPayout)) throw;\r\nif(!CMAccount.send(Fee)) throw;\r\nse.OwnerSettled = true;\r\nsettlement[ContractNum].OwnerSettled = true;\r\n}\r\n}\r\n\t\r\n//////////////////////////REFUNDS////////////////////////\r\nfunction Refund(){\r\nif(st.ActivePro == false) throw;\t\r\nif(st.ActiveSet == true) throw;\r\nif(st.ActiveArb == true) throw;\r\nif(st.Dispute == true) throw;\r\n\r\nif(msg.sender == co.Owner && de.CounterPartyFunded == false \r\n&& de.OwnerFunded == true){\r\nuint256 _OwnerDeposit = c2.OwnerDeposit * WeiConverter;\r\nif(!de.OwnerAddr.send(_OwnerDeposit)) throw;\r\ndeposits[ContractNum].OwnerFunded = false;\r\nde.OwnerFunded = false;\r\nsettlement[ContractNum].OwnerSettled = true;\r\nse.OwnerSettled = true;\r\n}\r\n\r\nif(msg.sender == de.CounterPartyAddr && de.CounterPartyFunded == true \r\n&& de.OwnerFunded == false){\r\nuint256 _CounterPartyDeposit = c2.CounterPartyDeposit * WeiConverter;\r\nif(!de.CounterPartyAddr.send(_CounterPartyDeposit)) throw;\r\ndeposits[ContractNum].CounterPartyFunded = false;\r\ndeposits[ContractNum].CounterPartyAddr = 0;\r\nde.CounterPartyFunded = false;\r\nde.CounterPartyAddr = 0;\r\nse.CounterPartySettled = true;\r\nsettlement[ContractNum].CounterPartySettled = true;\r\n}\r\n}\r\n////////////////OWNER ADMINISTRATION////////////////\r\nfunction Reset(){\r\nif(msg.sender != co.Owner)throw;\r\nif(de.CounterPartyFunded == true && se.CounterPartySettled == false) throw;\t\r\nif(de.OwnerFunded == true && se.OwnerSettled == false) throw;\r\nst.Dispute = false;\r\nst.ActivePro = false;\r\nst.ActiveSet = false;\r\nst.ActiveArb = false;\t\r\nContractNum++;\t\r\n}\r\n\r\nfunction() { throw; }\t\t\r\n}/////////////////////////////end of bookie contract","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"get\",\"type\":\"uint8\"}],\"name\":\"GetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"component\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint32\"}],\"name\":\"UpdatePrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pin\",\"type\":\"uint32\"},{\"name\":\"_cmhome\",\"type\":\"address\"}],\"name\":\"Create\",\"outputs\":[],\"type\":\"function\"}]","ContractName":"BookieFactory","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}