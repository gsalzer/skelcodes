{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n**   Signed Digital Asset - A contract to store signatures of digital assets.\r\n**   Martin Stellnberger\r\n**   05-Dec-2016\r\n**   martinstellnberger.co\r\n**\r\n**   This software is distributed in the hope that it will be useful,\r\n**   but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n**   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n**   GNU lesser General Public License for more details.\r\n**   <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\npragma solidity ^0.4.2;\r\n\r\ncontract SignedDigitalAsset {\r\n    // The owner of the contract\r\n    address owner = msg.sender;\r\n    // Name of the institution (for reference purposes only)\r\n    string public institution;\r\n    // Storage for linking the signatures to the digital fingerprints\r\n\tmapping (bytes32 => string) fingerprintSignatureMapping;\r\n\r\n    // Event functionality\r\n\tevent SignatureAdded(string digitalFingerprint, string signature, uint256 timestamp);\r\n    // Modifier restricting only the owner of this contract to perform certain operations\r\n    modifier isOwner() { if (msg.sender != owner) throw; _; }\r\n\r\n    // Constructor of the Signed Digital Asset contract\r\n    function SignedDigitalAsset(string _institution) {\r\n        institution = _institution;\r\n    }\r\n    // Adds a new signature and links it to its corresponding digital fingerprint\r\n\tfunction addSignature(string digitalFingerprint, string signature)\r\n        isOwner {\r\n        // Add signature to the mapping\r\n        fingerprintSignatureMapping[sha3(digitalFingerprint)] = signature;\r\n        // Broadcast the token added event\r\n        SignatureAdded(digitalFingerprint, signature, now);\r\n\t}\r\n\r\n    // Removes a signature from this contract\r\n\tfunction removeSignature(string digitalFingerprint)\r\n        isOwner {\r\n        // Replaces an existing Signature with empty string\r\n\t\tfingerprintSignatureMapping[sha3(digitalFingerprint)] = \"\";\r\n\t}\r\n\r\n    // Returns the corresponding signature for a specified digital fingerprint\r\n\tfunction getSignature(string digitalFingerprint) constant returns(string){\r\n\t\treturn fingerprintSignatureMapping[sha3(digitalFingerprint)];\r\n\t}\r\n\r\n    // Removes the entire contract from the blockchain and invalidates all signatures\r\n    function removeSdaContract()\r\n        isOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"digitalFingerprint\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"addSignature\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"digitalFingerprint\",\"type\":\"string\"}],\"name\":\"removeSignature\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"digitalFingerprint\",\"type\":\"string\"}],\"name\":\"getSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeSdaContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"institution\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_institution\",\"type\":\"string\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"digitalFingerprint\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SignatureAdded\",\"type\":\"event\"}]","ContractName":"SignedDigitalAsset","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021566963746f72696120556e6976657273697479206f662057656c6c696e67746f6e00000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}