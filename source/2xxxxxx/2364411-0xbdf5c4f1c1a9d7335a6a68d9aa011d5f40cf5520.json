{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n    \r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract SingularDTVToken is Token {\r\n    function issueTokens(address _for, uint tokenCount) returns (bool);\r\n}\r\ncontract SingularDTVFund {\r\n    function workshop() returns (address);\r\n    function softWithdrawRevenueFor(address forAddress) returns (uint);\r\n}\r\n\r\n\r\n\r\n\r\ncontract SingularDTVCrowdfunding {\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    SingularDTVToken public singularDTVToken;\r\n    SingularDTVFund public singularDTVFund;\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public CAP = 1000000000; \r\n    uint constant public CROWDFUNDING_PERIOD = 4 weeks; \r\n    uint constant public TOKEN_LOCKING_PERIOD = 2 years; \r\n    uint constant public TOKEN_TARGET = 534000000; \r\n\r\n    /*\r\n     *  Enums\r\n     */\r\n    enum Stages {\r\n        CrowdfundingGoingAndGoalNotReached,\r\n        CrowdfundingEndedAndGoalNotReached,\r\n        CrowdfundingGoingAndGoalReached,\r\n        CrowdfundingEndedAndGoalReached\r\n    }\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    uint public startDate;\r\n    uint public fundBalance;\r\n    uint public baseValue = 1250 szabo; \r\n    uint public valuePerShare = baseValue; \r\n\r\n    \r\n    mapping (address => uint) public investments;\r\n\r\n    \r\n    Stages public stage = Stages.CrowdfundingGoingAndGoalNotReached;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        \r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier minInvestment() {\r\n        \r\n        if (msg.value < valuePerShare) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier atStageOR(Stages _stage1, Stages _stage2) {\r\n        if (stage != _stage1 && stage != _stage2) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier timedTransitions() {\r\n        uint crowdfundDuration = now - startDate;\r\n        if (crowdfundDuration >= 22 days) {\r\n            valuePerShare = baseValue * 1500 / 1000;\r\n        }\r\n        else if (crowdfundDuration >= 18 days) {\r\n            valuePerShare = baseValue * 1375 / 1000;\r\n        }\r\n        else if (crowdfundDuration >= 14 days) {\r\n            valuePerShare = baseValue * 1250 / 1000;\r\n        }\r\n        else if (crowdfundDuration >= 10 days) {\r\n            valuePerShare = baseValue * 1125 / 1000;\r\n        }\r\n        else {\r\n            valuePerShare = baseValue;\r\n        }\r\n        if (crowdfundDuration >= CROWDFUNDING_PERIOD) {\r\n            if (stage == Stages.CrowdfundingGoingAndGoalNotReached) {\r\n                stage = Stages.CrowdfundingEndedAndGoalNotReached;\r\n            }\r\n            else if (stage == Stages.CrowdfundingGoingAndGoalReached) {\r\n                stage = Stages.CrowdfundingEndedAndGoalReached;\r\n            }\r\n        }\r\n        _\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    \r\n    function checkInvariants() constant internal {\r\n        if (fundBalance > this.balance) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    \r\n    function emergencyCall()\r\n        external\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        if (fundBalance > this.balance) {\r\n            if (this.balance > 0 && !singularDTVFund.workshop().send(this.balance)) {\r\n                throw;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    function fund()\r\n        external\r\n        timedTransitions\r\n        atStageOR(Stages.CrowdfundingGoingAndGoalNotReached, Stages.CrowdfundingGoingAndGoalReached)\r\n        minInvestment\r\n        returns (uint)\r\n    {\r\n        uint tokenCount = msg.value / valuePerShare; \r\n        if (singularDTVToken.totalSupply() + tokenCount > CAP) {\r\n            \r\n            tokenCount = CAP - singularDTVToken.totalSupply();\r\n        }\r\n        uint investment = tokenCount * valuePerShare; \r\n        \r\n        if (msg.value > investment && !msg.sender.send(msg.value - investment)) {\r\n            throw;\r\n        }\r\n        \r\n        fundBalance += investment;\r\n        investments[msg.sender] += investment;\r\n        if (!singularDTVToken.issueTokens(msg.sender, tokenCount)) {\r\n            \r\n            throw;\r\n        }\r\n        \r\n        if (stage == Stages.CrowdfundingGoingAndGoalNotReached) {\r\n            if (singularDTVToken.totalSupply() >= TOKEN_TARGET) {\r\n                stage = Stages.CrowdfundingGoingAndGoalReached;\r\n            }\r\n        }\r\n        \r\n        if (stage == Stages.CrowdfundingGoingAndGoalReached) {\r\n            if (singularDTVToken.totalSupply() == CAP) {\r\n                stage = Stages.CrowdfundingEndedAndGoalReached;\r\n            }\r\n        }\r\n        checkInvariants();\r\n        return tokenCount;\r\n    }\r\n\r\n    \r\n    function withdrawFunding()\r\n        external\r\n        noEther\r\n        timedTransitions\r\n        atStage(Stages.CrowdfundingEndedAndGoalNotReached)\r\n        returns (bool)\r\n    {\r\n        \r\n        uint investment = investments[msg.sender];\r\n        investments[msg.sender] = 0;\r\n        fundBalance -= investment;\r\n        \r\n        if (investment > 0  && !msg.sender.send(investment)) {\r\n            throw;\r\n        }\r\n        checkInvariants();\r\n        return true;\r\n    }\r\n\r\n    \r\n    function withdrawForWorkshop()\r\n        external\r\n        noEther\r\n        timedTransitions\r\n        atStage(Stages.CrowdfundingEndedAndGoalReached)\r\n        returns (bool)\r\n    {\r\n        uint value = fundBalance;\r\n        fundBalance = 0;\r\n        if (value > 0  && !singularDTVFund.workshop().send(value)) {\r\n            throw;\r\n        }\r\n        checkInvariants();\r\n        return true;\r\n    }\r\n\r\n    \r\n    \r\n    function changeBaseValue(uint valueInWei)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        baseValue = valueInWei;\r\n        return true;\r\n    }\r\n\r\n    \r\n    function twoYearsPassed()\r\n        constant\r\n        external\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        return now - startDate >= TOKEN_LOCKING_PERIOD;\r\n    }\r\n\r\n    \r\n    function campaignEndedSuccessfully()\r\n        constant\r\n        external\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        if (stage == Stages.CrowdfundingEndedAndGoalReached) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function updateStage()\r\n        external\r\n        timedTransitions\r\n        noEther\r\n        returns (Stages)\r\n    {\r\n        return stage;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function setup(address singularDTVFundAddress, address singularDTVTokenAddress)\r\n        external\r\n        onlyOwner\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        if (address(singularDTVFund) == 0 && address(singularDTVToken) == 0) {\r\n            singularDTVFund = SingularDTVFund(singularDTVFundAddress);\r\n            singularDTVToken = SingularDTVToken(singularDTVTokenAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    function SingularDTVCrowdfunding() noEther {\r\n        \r\n        owner = msg.sender;\r\n        \r\n        startDate = now;\r\n    }\r\n\r\n    \r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDFUNDING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"singularDTVFundAddress\",\"type\":\"address\"},{\"name\":\"singularDTVTokenAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twoYearsPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singularDTVFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singularDTVToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"changeBaseValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valuePerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LOCKING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignEndedSuccessfully\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForWorkshop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"SingularDTVCrowdfunding","CompilerVersion":"v0.3.5+commit.5f97274","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}