{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n/**\r\n * @dev Double linked list with address items\r\n */\r\nlibrary AddressList {\r\n    struct Data {\r\n        address head;\r\n        address tail;\r\n        uint    length;\r\n        mapping(address => bool)    isContain;\r\n        mapping(address => address) nextOf;\r\n        mapping(address => address) prevOf;\r\n    }\r\n\r\n    function first(Data storage _data) constant returns (address)\r\n    { return _data.head; }\r\n\r\n    function last(Data storage _data) constant returns (address)\r\n    { return _data.tail; }\r\n\r\n    /**\r\n     * @dev Chec list for element\r\n     * @param _data is list storage ref\r\n     * @param _item is an element\r\n     * @return `true` when element in list\r\n     */\r\n    function contains(Data storage _data, address _item) constant returns (bool)\r\n    { return _data.isContain[_item]; }\r\n\r\n    /**\r\n     * @dev Next element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is current element of list\r\n     * @return next elemen of list\r\n     */\r\n    function next(Data storage _data, address _item) constant returns (address)\r\n    { return _data.nextOf[_item]; }\r\n\r\n    /**\r\n     * @dev Previous element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is current element of list\r\n     * @return previous element of list \r\n     */\r\n    function prev(Data storage _data, address _item) constant returns (address)\r\n    { return _data.prevOf[_item]; }\r\n\r\n    /**\r\n     * @dev Append element to end of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element  \r\n     */\r\n    function append(Data storage _data, address _item)\r\n    { append(_data, _item, _data.tail); }\r\n\r\n    /**\r\n     * @dev Append element to end of element\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element  \r\n     * @param _to is a item element before new \r\n     * @notice gas usage < 100000\r\n     */\r\n    function append(Data storage _data, address _item, address _to) {\r\n        // Unable to contain double element\r\n        if (_data.isContain[_item]) throw;\r\n\r\n        // Empty list\r\n        if (_data.head == 0) {\r\n            _data.head = _data.tail = _item;\r\n        } else {\r\n            if (!_data.isContain[_to]) throw;\r\n \r\n            var nextTo = _data.nextOf[_to];\r\n            if (nextTo != 0) {\r\n                _data.prevOf[nextTo] = _item;\r\n            } else {\r\n                _data.tail = _item;\r\n            }\r\n\r\n            _data.nextOf[_to]    = _item;\r\n            _data.prevOf[_item]  = _to;\r\n            _data.nextOf[_item]  = nextTo;\r\n        }\r\n        _data.isContain[_item] = true;\r\n        ++_data.length;\r\n    }\r\n \r\n    /**\r\n     * @dev Prepend element to begin of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element  \r\n     */\r\n    function prepend(Data storage _data, address _item)\r\n    { prepend(_data, _item, _data.head); }\r\n\r\n    /**\r\n     * @dev Prepend element to element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element  \r\n     * @param _to is a item element before new \r\n     */\r\n    function prepend(Data storage _data, address _item, address _to) {\r\n        // Unable to contain double element\r\n        if (_data.isContain[_item]) throw;\r\n\r\n        // Empty list\r\n        if (_data.head == 0) {\r\n            _data.head = _data.tail = _item;\r\n        } else {\r\n            if (!_data.isContain[_to]) throw;\r\n \r\n            var prevTo = _data.prevOf[_to];\r\n            if (prevTo != 0) {\r\n                _data.nextOf[prevTo] = _item;\r\n            } else {\r\n                _data.head = _item;\r\n            }\r\n\r\n            _data.prevOf[_item]  = prevTo;\r\n            _data.nextOf[_item]  = _to;\r\n            _data.prevOf[_to]    = _item;\r\n        }\r\n        _data.isContain[_item] = true;\r\n        ++_data.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove element from list\r\n     * @param _data is list storage ref\r\n     * @param _item is a removed list element\r\n     */\r\n    function remove(Data storage _data, address _item) {\r\n        if (!_data.isContain[_item]) throw;\r\n\r\n        var elemPrev = _data.prevOf[_item];\r\n        var elemNext = _data.nextOf[_item];\r\n\r\n        if (elemPrev != 0) {\r\n            _data.nextOf[elemPrev] = elemNext;\r\n        } else {\r\n            _data.head = elemNext;\r\n        }\r\n\r\n        if (elemNext != 0) {\r\n            _data.prevOf[elemNext] = elemPrev;\r\n        } else {\r\n            _data.tail = elemPrev;\r\n        }\r\n\r\n        _data.isContain[_item] = false;\r\n        --_data.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Replace element on list\r\n     * @param _data is list storage ref\r\n     * @param _from is old element\r\n     * @param _to is a new element\r\n     */\r\n    function replace(Data storage _data, address _from, address _to) {\r\n        if (!_data.isContain[_from]) throw;\r\n\r\n        var elemPrev = _data.prevOf[_from];\r\n        var elemNext = _data.nextOf[_from];\r\n\r\n        if (elemPrev != 0) {\r\n            _data.nextOf[elemPrev] = _to;\r\n        } else {\r\n            _data.head = _to;\r\n        }\r\n            \r\n        if (elemNext != 0) {\r\n            _data.prevOf[elemNext] = _to;\r\n        } else {\r\n            _data.tail = _to;\r\n        }\r\n\r\n        _data.prevOf[_to] = elemPrev;\r\n        _data.nextOf[_to] = elemNext;\r\n        _data.isContain[_from] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Swap two elements of list\r\n     * @param _data is list storage ref\r\n     * @param _a is a first element\r\n     * @param _b is a second element\r\n     */\r\n    function swap(Data storage _data, address _a, address _b) {\r\n        if (!_data.isContain[_a] || !_data.isContain[_b]) throw; \r\n\r\n        var prevA = _data.prevOf[_a];\r\n\r\n        remove(_data, _a);\r\n        replace(_data, _b, _a);\r\n\r\n        if (prevA == 0) {\r\n            prepend(_data, _b);\r\n        } else {\r\n            append(_data, _b, prevA);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"prev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"prepend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"prepend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"append\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"}],\"name\":\"first\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"next\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_b\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"}],\"name\":\"last\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"replace\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"AddressList.Data storage\"},{\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"append\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"AddressList","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}