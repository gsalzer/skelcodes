{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\ncontract MetaPoc {\r\n    /* VARIABLES */\r\n    address public _owner;\r\n    address public _filiate;\r\n\r\n    struct Execution {\r\n        uint dateCreated;\r\n        string hash;\r\n        bool validated;\r\n        uint dateValidated;\r\n    }\r\n    \r\n    mapping (string => uint) private mapExecs;\r\n    Execution[] private executions;\r\n    \r\n    /* PRIVATE CONST */\r\n    uint private nb_total = 0;\r\n    uint private nb_notVal = 0;\r\n    uint private nb_val = 0;\r\n    \r\n    string private last_exec = \"none\";\r\n    uint private last_execDateCreated = 0;\r\n    \r\n    string private notVal_list = \"none\";\r\n    uint private notVal_since = 0;\r\n    string private notVal_last = \"none\";\r\n    uint private notVal_lastDateCreated = 0;\r\n    \r\n    string private val_list = \"none\";\r\n    uint private val_since = 0;\r\n    string private val_last = \"none\";\r\n    uint private val_lastDateCreated = 0;\r\n    uint private val_lastDateValidated = 0;\r\n    \r\n    /* EVENTS */\r\n    event Executed(string Hash, uint Created);\r\n    event Validated(string Hash, uint Validated);\r\n    event Checked(string Hash, bool IsExit, uint Created, bool IsValidated, uint Validated);\r\n    event Listed_Validated(uint Since, string List);\r\n    event Listed_NotValidated(uint Since, string List);\r\n    event Owner_Changed(address Owner);\r\n    event Filiate_Changed(address Filiate);\r\n    \r\n    \r\n    /* CONSTRUCTOR */\r\n    function MetaPoc(address filiate) {\r\n        _owner = msg.sender;\r\n        _filiate = filiate;\r\n    }\r\n    \r\n    /* MAPPING */\r\n    function map(string hash) internal returns(uint) {\r\n        uint ret = mapExecs[hash];\r\n        if(ret >= executions.length || !strEqual(executions[ret].hash, hash)) throw;\r\n        return ret;\r\n    }\r\n    \r\n    /* MODIFIERS */\r\n    modifier bothAllowed() {\r\n        if(msg.sender != _owner && msg.sender != _filiate) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier ownerAllowed() {\r\n        if(msg.sender != _owner) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier filiateAllowed() {\r\n        if(msg.sender != _filiate) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier notYetExist(string hash) {\r\n        uint num = mapExecs[hash];\r\n        if(num < executions.length && strEqual(executions[num].hash, hash)) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier notYetValidated(string hash) {\r\n        Execution e = executions[map(hash)];\r\n        if(e.validated) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier orderExist(string hash) {\r\n        Execution e = executions[map(hash)];\r\n        if(!strEqual(e.hash, hash)) throw;\r\n        _;\r\n    }\r\n    \r\n    /* INIT */\r\n    function ChangeOwner(address owner) ownerAllowed() {\r\n        if(owner.balance <= 0) throw;\r\n        \r\n        _owner = owner;\r\n        Owner_Changed(_owner);\r\n    }\r\n    \r\n    function ChangeFiliate(address filiate) bothAllowed() {\r\n        if(filiate.balance <= 0) throw;\r\n        \r\n        _filiate = filiate;\r\n        Filiate_Changed(_filiate);\r\n    }\r\n    \r\n    function kill() ownerAllowed() {\r\n        suicide(_owner);\r\n    }\r\n    \r\n    /* PUBLIC FUNCTIONS */\r\n    function AddExec(string Hash) public ownerAllowed() notYetExist(Hash) {\r\n        uint num = executions.length++;\r\n        mapExecs[Hash] = num;\r\n        Execution e = executions[num];\r\n        e.dateCreated = now;\r\n        e.hash = Hash;\r\n        executions[num] = e;\r\n        \r\n        /* màj public const */\r\n        nb_total++;\r\n        nb_notVal++;\r\n        notVal_last = e.hash;\r\n        notVal_lastDateCreated = e.dateCreated;\r\n        MajListAll();\r\n        \r\n        Executed(e.hash, e.dateCreated);\r\n    }\r\n    \r\n    function ValidateExec(string Hash) public filiateAllowed() notYetValidated(Hash) {\r\n        Execution e = executions[map(Hash)];\r\n        e.validated = true;\r\n        e.dateValidated = now;\r\n        executions[map(Hash)] = e;\r\n        \r\n        /* màj public const */\r\n        nb_val++;\r\n        nb_notVal--;\r\n        val_last = e.hash;\r\n        val_lastDateCreated = e.dateCreated;\r\n        val_lastDateValidated = e.dateValidated;\r\n        MajListAll();\r\n        MajLastNotVal();\r\n        \r\n        Validated(e.hash, e.dateValidated);\r\n    }\r\n    \r\n    function CheckExec(string Hash) public bothAllowed() {\r\n        uint ret = mapExecs[Hash];\r\n        if(ret >= executions.length || !strEqual(executions[ret].hash, Hash)) {\r\n            Checked(Hash, false, 0, false, 0);\r\n        } else {\r\n            Execution e = executions[ret];\r\n            Checked(e.hash, true, e.dateCreated, e.validated, e.dateValidated);\r\n        }\r\n    }\r\n    \r\n    function ListAllSince(uint timestampFrom) public bothAllowed() {\r\n        val_since = timestampFrom;\r\n        notVal_since = timestampFrom;\r\n        MajListAll();\r\n        Listed_Validated(val_since, val_list);\r\n        Listed_NotValidated(notVal_since, notVal_list);\r\n    }\r\n    \r\n    function ListNotValSince(uint timestampFrom) public bothAllowed() {\r\n        notVal_since = timestampFrom;\r\n        MajListNotVal();\r\n        Listed_NotValidated(notVal_since, notVal_list);\r\n    }\r\n    \r\n    function ListValSince(uint timestampFrom) public bothAllowed() {\r\n        val_since = timestampFrom;\r\n        MajListVal();\r\n        Listed_Validated(val_since, val_list);\r\n    }\r\n    \r\n    \r\n    /* CONSTANTS */\r\n    function CountExecs() public constant returns(uint Total, uint NbValidated, uint NbNotVal) {\r\n        return (nb_total, nb_val, nb_notVal);\r\n    }\r\n    \r\n    function LastExec() public constant returns(string Hash, uint Created) {\r\n        return (notVal_last, notVal_lastDateCreated);\r\n    }\r\n    \r\n    function LastValidated() public constant returns(string Hash, uint Created, uint Validated) {\r\n        return (val_last, val_lastDateCreated, val_lastDateValidated);\r\n    }\r\n    \r\n    function ListNotValidated() public constant returns(uint Since, string List) {\r\n        return (notVal_since, notVal_list);\r\n    }\r\n\r\n    function ListValidated() public constant returns(uint Since, string List) {\r\n        return (val_since, val_list);\r\n    }\r\n    \r\n    /* PRIVATE FUNCTIONS */\r\n    function MajListAll() private {\r\n        MajListVal();\r\n        MajListNotVal();\r\n    }\r\n    \r\n    function MajListVal() private {\r\n        val_list = \"none\";\r\n        for(uint i = 0; i < executions.length; i++) {\r\n            if(executions[i].dateCreated >= val_since && executions[i].validated) {\r\n                if(strEqual(val_list, \"none\")) val_list = executions[i].hash;\r\n                else val_list = strConcat(val_list, \" ; \", executions[i].hash);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function MajListNotVal() private {\r\n        notVal_list = \"none\";\r\n        for(uint i = 0; i < executions.length; i++) {\r\n            if(executions[i].dateCreated >= notVal_since && !executions[i].validated) {\r\n                if(strEqual(notVal_list, \"none\")) notVal_list = executions[i].hash;\r\n                else notVal_list = strConcat(notVal_list, \" ; \", executions[i].hash);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function MajLastNotVal() private {\r\n        notVal_lastDateCreated = 0;\r\n        notVal_last = \"none\";\r\n        if(executions.length > 0) {\r\n            if(!executions[0].validated) {\r\n                notVal_last = executions[0].hash;\r\n                notVal_lastDateCreated = executions[0].dateCreated;\r\n            }\r\n            for(uint i = executions.length - 1; i > 0; i--) {\r\n                if(!executions[i].validated && executions[i].dateCreated > notVal_lastDateCreated) {\r\n                    notVal_last = executions[i].hash;\r\n                    notVal_lastDateCreated = executions[i].dateCreated;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /* UTILS */\r\n    function strEqual(string _a, string _b) internal returns(bool) {\r\n\t\tbytes memory a = bytes(_a);\r\n\t\tbytes memory b = bytes(_b);\r\n\t\tif (a.length != b.length)\r\n\t\t\treturn false;\r\n\r\n\t\tfor (uint i = 0; i < a.length; i ++)\r\n\t\t\tif (a[i] != b[i])\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction strConcat(string _a, string _b, string _c, string _d, string _e) internal returns(string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns(string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal returns(string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal returns(string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"Hash\",\"type\":\"string\"}],\"name\":\"CheckExec\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Hash\",\"type\":\"string\"}],\"name\":\"ValidateExec\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestampFrom\",\"type\":\"uint256\"}],\"name\":\"ListNotValSince\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ListNotValidated\",\"outputs\":[{\"name\":\"Since\",\"type\":\"uint256\"},{\"name\":\"List\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastExec\",\"outputs\":[{\"name\":\"Hash\",\"type\":\"string\"},{\"name\":\"Created\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ListValidated\",\"outputs\":[{\"name\":\"Since\",\"type\":\"uint256\"},{\"name\":\"List\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_filiate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestampFrom\",\"type\":\"uint256\"}],\"name\":\"ListValSince\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Hash\",\"type\":\"string\"}],\"name\":\"AddExec\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestampFrom\",\"type\":\"uint256\"}],\"name\":\"ListAllSince\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastValidated\",\"outputs\":[{\"name\":\"Hash\",\"type\":\"string\"},{\"name\":\"Created\",\"type\":\"uint256\"},{\"name\":\"Validated\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CountExecs\",\"outputs\":[{\"name\":\"Total\",\"type\":\"uint256\"},{\"name\":\"NbValidated\",\"type\":\"uint256\"},{\"name\":\"NbNotVal\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"filiate\",\"type\":\"address\"}],\"name\":\"ChangeFiliate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"filiate\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Created\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Validated\",\"type\":\"uint256\"}],\"name\":\"Validated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"IsExit\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"Created\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"IsValidated\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"Validated\",\"type\":\"uint256\"}],\"name\":\"Checked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Since\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"List\",\"type\":\"string\"}],\"name\":\"Listed_Validated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Since\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"List\",\"type\":\"string\"}],\"name\":\"Listed_NotValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"Owner_Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Filiate\",\"type\":\"address\"}],\"name\":\"Filiate_Changed\",\"type\":\"event\"}]","ContractName":"MetaPoc","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000121218a61b652ccc5b77ba0df1a81f3f8fe41aa6","Library":"","SwarmSource":""}]}