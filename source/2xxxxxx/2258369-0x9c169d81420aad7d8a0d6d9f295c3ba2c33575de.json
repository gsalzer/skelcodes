{"status":"1","message":"OK","result":[{"SourceCode":"contract Ballot {\r\n    struct Voter {\r\n        uint weight;\r\n        bool voted;\r\n        uint8 vote;\r\n        address delegate;\r\n    }\r\n    struct Proposal {\r\n        uint voteCount;\r\n    }\r\n    address chairperson;\r\n    mapping(address => Voter) voters;\r\n    Proposal[] proposals;\r\n\r\n    /// Create a new ballot with $(_numProposals) different proposals.\r\n    function Ballot(uint8 _numProposals) {\r\n        chairperson = msg.sender;\r\n        voters[chairperson].weight = 1;\r\n        proposals.length = _numProposals;\r\n    }\r\n\r\n    /// Give $(voter) the right to vote on this ballot.\r\n    /// May only be called by $(chairperson).\r\n    function giveRightToVote(address voter) {\r\n        if (msg.sender != chairperson || voters[voter].voted) return;\r\n        voters[voter].weight = 1;\r\n    }\r\n\r\n    /// Delegate your vote to the voter $(to).\r\n    function delegate(address to) {\r\n        Voter sender = voters[msg.sender]; // assigns reference\r\n        if (sender.voted) return;\r\n        while (voters[to].delegate != address(0) && voters[to].delegate != msg.sender)\r\n            to = voters[to].delegate;\r\n        if (to == msg.sender) return;\r\n        sender.voted = true;\r\n        sender.delegate = to;\r\n        Voter delegate = voters[to];\r\n        if (delegate.voted)\r\n            proposals[delegate.vote].voteCount += sender.weight;\r\n        else\r\n            delegate.weight += sender.weight;\r\n    }\r\n\r\n    /// Give a single vote to proposal $(proposal).\r\n    function vote(uint8 proposal) {\r\n        Voter sender = voters[msg.sender];\r\n        if (sender.voted || proposal >= proposals.length) return;\r\n        sender.voted = true;\r\n        sender.vote = proposal;\r\n        proposals[proposal].voteCount += sender.weight;\r\n    }\r\n\r\n    function winningProposal() constant returns (uint8 winningProposal) {\r\n        uint256 winningVoteCount = 0;\r\n        for (uint8 proposal = 0; proposal < proposals.length; proposal++)\r\n            if (proposals[proposal].voteCount > winningVoteCount) {\r\n                winningVoteCount = proposals[proposal].voteCount;\r\n                winningProposal = proposal;\r\n            }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"name\":\"winningProposal\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_numProposals\",\"type\":\"uint8\"}],\"type\":\"constructor\"}]","ContractName":"Ballot","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}