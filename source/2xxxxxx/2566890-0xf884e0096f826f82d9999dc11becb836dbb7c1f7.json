{"status":"1","message":"OK","result":[{"SourceCode":"/* */\r\n\r\n/* Deployment:\r\nOwner: 0xeb5fa6cbf2aca03a0df228f2df67229e2d3bd01e\r\nLast address: TBD\r\nABI: TBD\r\nOptimized: yes\r\nSolidity version: v0.4.3\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract Arith {\r\n    \r\n    address private owner;\r\n    uint constant internal P = 115792089237316195423570985008687907853269984665640564039457584007908834671663;\r\n    uint constant internal N = 115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n    uint constant internal M = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n    uint constant internal Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240;\r\n    uint constant internal Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424;\r\n    \r\n    uint k1x;\r\n    uint k1y;\r\n    uint k1z;\r\n    uint k2x;\r\n    uint k2y;\r\n    uint k2z;\r\n    uint pub1x;\r\n    uint pub1y;\r\n    uint pub2x;\r\n    uint pub2y;\r\n    uint k3x;\r\n    uint k3y;\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner)\r\n          throw;\r\n        _;\r\n    }\r\n    \r\n    function Arith() { owner = msg.sender; }\r\n\r\n    function kill() onlyOwner { suicide(owner); }\r\n\r\n    function jdouble(uint _ax, uint _ay, uint _az) returns (uint, uint, uint) {\r\n\r\n        if(_ay == 0) return (0, 0, 0);\r\n\r\n        uint ysq = _ay * _ay;\r\n        uint s = 4 * _ax * ysq;\r\n        uint m = 3 * _ax * _ax;\r\n        uint nx = m * m - 2 * s;\r\n        uint ny = m * (s - nx) - 8 * ysq * ysq;\r\n        uint nz = 2 * _ay * _az;\r\n        return (nx, ny, nz);\r\n    }\r\n\r\n    function jadd(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) returns (uint, uint, uint) {\r\n\r\n        if(_ay == 0) return (0, 0, 0);\r\n        if(_ay == 0) return(_bx, _by, _bz);\r\n        if(_by == 0) return(_ax, _ay, _az);\r\n\r\n        uint u1 = _ax * _bz * _bz;\r\n        uint u2 = _bx * _az * _az;\r\n        uint s1 = _ay * _bz * _bz * _bz;\r\n        uint s2 = _by * _az * _az * _az;\r\n\r\n        if(u1 == u2) {\r\n           if(s1 != s2) return(0, 0, 1);\r\n           return jdouble(_ax, _ay, _az);\r\n        }\r\n        \r\n        uint nx = (s2 - s1) * (s2 - s1) - (u2 - u1) * (u2 - u1) * (u2 - u1) - 2 * u1 * (u2 - u1) * (u2 - u1);\r\n\r\n        return\r\n            (nx,\r\n             (s2 - s1) * (u1 * (u2 - u1) * (u2 - u1) - nx) - s1 * (u2 - u1) * (u2 - u1) * (u2 - u1),\r\n             (u2 - u1) * _az * _bz);\r\n    }\r\n\r\n    function jmul(uint _bx, uint _by, uint _bz, uint _n) returns (uint, uint, uint) {\r\n\r\n        _n = _n % N;\r\n        if(((_bx == 0) && (_by == 0)) || (_n == 0)) return(0, 0, 1);\r\n\r\n        uint ax;\r\n        uint ay;\r\n        uint az;\r\n        (ax, ay, az) = (0, 0, 1);\r\n        uint b = M;\r\n        \r\n        while(b > 0) {\r\n\r\n           (ax, ay, az) = jdouble(ax, ay, az);\r\n           if((_n & b) != 0) {\r\n              \r\n              if(ay == 0) {\r\n                 (ax, ay, az) = (_bx, _by, _bz);\r\n              } else {\r\n                 (ax, ay, az) = jadd(ax, ay, az, _bx, _by, _bz);\r\n              }\r\n           }\r\n\r\n           b = b / 2;\r\n        }\r\n\r\n        return (ax, ay, az);\r\n    }\r\n    \r\n    function jexp(uint _b, uint _e, uint _m) returns (uint) {\r\n        uint o = 1;\r\n        uint bit = M;\r\n        \r\n        while (bit > 0) {\r\n            uint bitval = 0;\r\n            if(_e & bit > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 2) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 4) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 8) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bit = (bit / 16);\r\n        }\r\n        return o;\r\n    }\r\n    \r\n    function jrecover_y(uint _x, uint _y_bit) returns (uint) {\r\n\r\n        uint xcubed = mulmod(mulmod(_x, _x, P), _x, P);\r\n        uint beta = jexp(addmod(xcubed, 7, P), ((P + 1) / 4), P);\r\n        uint y_is_positive = _y_bit ^ (beta % 2) ^ 1;\r\n        return(beta * y_is_positive + (P - beta) * (1 - y_is_positive));\r\n    }\r\n\r\n    function jdecompose(uint _q0, uint _q1, uint _q2) returns (uint, uint) {\r\n        uint ox = mulmod(_q0, jexp(_q2, P - 3, P), P);\r\n        uint oy = mulmod(_q1, jexp(_q2, P - 4, P), P);\r\n        return(ox, oy);\r\n    }\r\n\r\n    function ecmul(uint _x, uint _y, uint _z, uint _n) returns (uint, uint, uint) {\r\n        return jmul(_x, _y, _z, _n);\r\n    }\r\n\r\n    function ecadd(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) returns (uint, uint, uint) {\r\n        return jadd(_ax, _ay, _az, _bx, _by, _bz);\r\n    }\r\n\r\n    function ecsubtract(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) returns (uint, uint, uint) {\r\n        return jadd(_ax, _ay, _az, _bx, P - _by, _bz);\r\n    }\r\n\r\n    function bit(uint _data, uint _bit) returns (uint) {\r\n        return (_data / 2**(_bit % 8)) % 2;\r\n    }\r\n\r\n    function hash_pubkey_to_pubkey(uint _pub1, uint _pub2) returns (uint, uint) {\r\n        uint x = uint(sha3(_pub1, _pub2));\r\n        while(true) {\r\n            uint xcubed = mulmod(mulmod(x, x, P), x, P);\r\n            uint beta = jexp(addmod(xcubed, 7, P), ((P + 1) / 4), P);\r\n            uint y = beta * (beta % 2) + (P - beta) * (1 - (beta % 2));\r\n            if(addmod(xcubed, 7, P) == mulmod(y, y, P)) return(x, y);\r\n            x = ((x + 1) % P);\r\n        }\r\n    }\r\n    \r\n    function verify(uint _msgHash, uint _x0, uint[] _s, uint _Ix, uint _Iy, uint[] _pub_xs, uint[] _pub_ys) returns (bool) {\r\n        //_Iy = jrecover_y(_Ix, _Iy);\r\n        uint[] memory ex = new uint[](_pub_xs.length);\r\n        uint[] memory ey = new uint[](_pub_xs.length);\r\n        ex[0] = _x0;\r\n        ey[0] = uint(sha3(_x0));\r\n        uint i = 1;\r\n        while(i < (_pub_xs.length + 1)) {\r\n\r\n           //uint pub_yi = jrecover_y(_pub_xs[i % _pub_xs.length], bit(_pub_ys, i % _pub_xs.length));\r\n           (k1x, k1y, k1z) = ecmul(Gx, Gy, 1, _s[(i - 1) % _pub_xs.length]);\r\n           (k2x, k2y, k2z) = ecmul(_pub_xs[i % _pub_xs.length], _pub_ys[i % _pub_xs.length], 1, ey[(i - 1) % _pub_xs.length]);\r\n           (k1x, k1y, k1z) = ecsubtract(k1x, k1y, k1z, k2x, k2y, k2z);\r\n           (pub1x, pub1y) = jdecompose(k1x, k1y, k1z);\r\n           (k3x, k3y) = hash_pubkey_to_pubkey(_pub_xs[i % _pub_xs.length], _pub_ys[i % _pub_xs.length]);\r\n           (k1x, k1y, k1z) = ecmul(k3x, k3y, 1, _s[(i - 1) % _pub_xs.length]);\r\n           (k2x, k2y, k2z) = ecmul(_Ix, _Iy, 1, ey[(i - 1) % _pub_xs.length]);\r\n           (k1x, k1y, k1z) = ecsubtract(k1x, k1y, k1z, k2x, k2y, k2z);\r\n           (pub2x, pub2y) = jdecompose(k1x, k1y, k1z);\r\n           uint left = uint(sha3([_msgHash, pub1x, pub1y, pub2x, pub2y]));\r\n           uint right = uint(sha3(left));\r\n           ex[i] = left;\r\n           ey[i] = right;\r\n           i += 1;\r\n        }\r\n        \r\n        return((ex[_pub_xs.length] == ex[0]) && (ey[_pub_xs.length] == ey[0]));\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"},{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"}],\"name\":\"jadd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pub1\",\"type\":\"uint256\"},{\"name\":\"_pub2\",\"type\":\"uint256\"}],\"name\":\"hash_pubkey_to_pubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgHash\",\"type\":\"uint256\"},{\"name\":\"_x0\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256[]\"},{\"name\":\"_Ix\",\"type\":\"uint256\"},{\"name\":\"_Iy\",\"type\":\"uint256\"},{\"name\":\"_pub_xs\",\"type\":\"uint256[]\"},{\"name\":\"_pub_ys\",\"type\":\"uint256[]\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"},{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"}],\"name\":\"ecadd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y_bit\",\"type\":\"uint256\"}],\"name\":\"jrecover_y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"},{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"}],\"name\":\"ecsubtract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_q0\",\"type\":\"uint256\"},{\"name\":\"_q1\",\"type\":\"uint256\"},{\"name\":\"_q2\",\"type\":\"uint256\"}],\"name\":\"jdecompose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256\"},{\"name\":\"_bit\",\"type\":\"uint256\"}],\"name\":\"bit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"}],\"name\":\"jdouble\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_z\",\"type\":\"uint256\"},{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"ecmul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256\"},{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"jexp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"},{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"jmul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]","ContractName":"Arith","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}