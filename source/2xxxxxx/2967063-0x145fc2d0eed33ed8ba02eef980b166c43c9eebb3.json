{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n/*\r\n *\r\n * This file is part of Pass DAO.\r\n *\r\n * The Manager smart contract is used for the management of accounts and tokens.\r\n *\r\n * Recipient is 0 for the Dao account manager and the address of\r\n * contractor's recipient for the contractors's mahagers.\r\n *\r\n*/\r\n\r\n/// @title Manager smart contract of the Pass Decentralized Autonomous Organisation\r\ncontract PassManagerInterface {\r\n\r\n    struct proposal {\r\n        // Amount (in wei) of the proposal\r\n        uint amount;\r\n        // A description of the proposal\r\n        string description;\r\n        // The hash of the proposal's document\r\n        bytes32 hashOfTheDocument;\r\n        // A unix timestamp, denoting the date when the proposal was created\r\n        uint dateOfProposal;\r\n        // The index of the last approved client proposal\r\n        uint lastClientProposalID;\r\n        // The sum amount (in wei) ordered for this proposal \r\n        uint orderAmount;\r\n        // A unix timestamp, denoting the date of the last order for the approved proposal\r\n        uint dateOfOrder;\r\n    }\r\n        \r\n    // Proposals to work for the client\r\n    proposal[] public proposals;\r\n\r\n    struct fundingData {\r\n        // True if public funding without a main partner\r\n        bool publicCreation; \r\n        // The address which sets partners and manages the funding in case of private funding\r\n        address mainPartner;\r\n        // The maximum amount (in wei) of the funding\r\n        uint maxAmountToFund;\r\n        // The actual funded amount (in wei)\r\n        uint fundedAmount;\r\n        // A unix timestamp, denoting the start time of the funding\r\n        uint startTime; \r\n        // A unix timestamp, denoting the closing time of the funding\r\n        uint closingTime;  \r\n        // The price multiplier for a share or a token without considering the inflation rate\r\n        uint initialPriceMultiplier;\r\n        // Rate per year in percentage applied to the share or token price \r\n        uint inflationRate; \r\n        // Index of the client proposal\r\n        uint proposalID;\r\n    } \r\n    \r\n    // Rules for the actual funding and the contractor token price\r\n    fundingData[2] public FundingRules;\r\n\r\n    // The address of the last Manager before cloning\r\n    address public clonedFrom;\r\n    // Unix date when shares and tokens can be transferred after cloning (for the Dao manager)\r\n    uint closingTimeForCloning;\r\n    // End date of the setup procedure\r\n    uint public smartContractStartDate;\r\n\r\n    // Address of the creator of the smart contract\r\n    address public creator;\r\n    // Address of the Dao (for the Dao manager)\r\n    address client;\r\n    // Address of the recipient;\r\n    address public recipient;\r\n    // Address of the Dao manager (for contractor managers)\r\n    PassManager public daoManager;\r\n    \r\n    // The token name for display purpose\r\n    string public name;\r\n    // The token symbol for display purpose\r\n    string public symbol;\r\n    // The quantity of decimals for display purpose\r\n    uint8 public decimals;\r\n\r\n    // True if the initial token supply is over\r\n    bool initialTokenSupplyDone;\r\n    \r\n    // Total amount of tokens\r\n    uint256 totalTokenSupply;\r\n\r\n    // Array with all balances\r\n    mapping (address => uint256) balances;\r\n    // Array with all allowances\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Map of the result (in wei) of fundings\r\n    mapping (uint => uint) fundedAmount;\r\n\r\n    // Array of token or share holders\r\n    address[] holders;\r\n    // Map with the indexes of the holders\r\n    mapping (address => uint) public holderID;\r\n\r\n    // If true, the shares or tokens can be transfered\r\n    bool public transferable;\r\n    // Map of blocked Dao share accounts. Points to the date when the share holder can transfer shares\r\n    mapping (address => uint) public blockedDeadLine; \r\n\r\n    // @return The client of this manager\r\n    function Client() constant returns (address);\r\n    \r\n    // @return The unix date when shares and tokens can be transferred after cloning\r\n    function ClosingTimeForCloning() constant returns (uint);\r\n    \r\n    /// @return The total supply of shares or tokens \r\n    function totalSupply() constant external returns (uint256);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n     function balanceOf(address _owner) constant external returns (uint256 balance);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Quantity of remaining tokens of _owner that _spender is allowed to spend\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n\r\n    /// @param _proposalID The index of the Dao proposal\r\n    /// @return The result (in wei) of the funding\r\n    function FundedAmount(uint _proposalID) constant external returns (uint);\r\n\r\n    /// @param _saleDate in case of presale, the date of the presale\r\n    /// @return the share or token price divisor condidering the sale date and the inflation rate\r\n    function priceDivisor(uint _saleDate) constant internal returns (uint);\r\n    \r\n    /// @return the actual price divisor of a share or token\r\n    function actualPriceDivisor() constant external returns (uint);\r\n\r\n    /// @return The maximal amount a main partner can fund at this moment\r\n    /// @param _mainPartner The address of the main parner\r\n    function fundingMaxAmount(address _mainPartner) constant external returns (uint);\r\n    \r\n    /// @return The number of share or token holders \r\n    function numberOfHolders() constant returns (uint);\r\n\r\n    /// @param _index The index of the holder\r\n    /// @return the address of the an holder\r\n    function HolderAddress(uint _index) constant returns (address);\r\n\r\n    /// @return The number of Dao rules proposals     \r\n    function numberOfProposals() constant returns (uint);\r\n    \r\n    /// @dev The constructor function\r\n    /// @param _client The address of the Dao\r\n    /// @param _daoManager The address of the Dao manager (for contractor managers)\r\n    /// @param _recipient The address of the recipient. 0 for the Dao\r\n    /// @param _clonedFrom The address of the last Manager before cloning\r\n    /// @param _tokenName The token name for display purpose\r\n    /// @param _tokenSymbol The token symbol for display purpose\r\n    /// @param _tokenDecimals The quantity of decimals for display purpose\r\n    /// @param _transferable True if allows the transfer of tokens\r\n    //function PassManager(\r\n    //    address _client,\r\n    //    address _daoManager,\r\n    //    address _recipient,\r\n    //    address _clonedFrom,\r\n    //    string _tokenName,\r\n    //    string _tokenSymbol,\r\n    //    uint8 _tokenDecimals,\r\n    //    bool _transferable);\r\n    \r\n    /// @dev Function to create initial tokens    \r\n    /// @param _recipient The beneficiary of the created tokens\r\n    /// @param _quantity The quantity of tokens to create    \r\n    /// @param _last True if the initial token suppy is over\r\n    /// @return Whether the function was successful or not     \r\n    function initialTokenSupply(\r\n        address _recipient, \r\n        uint _quantity,\r\n        bool _last) returns (bool success);\r\n        \r\n    /// @notice Function to clone a proposal from the last manager\r\n    /// @param _amount Amount (in wei) of the proposal\r\n    /// @param _description A description of the proposal\r\n    /// @param _hashOfTheDocument The hash of the proposal's document\r\n    /// @param _dateOfProposal A unix timestamp, denoting the date when the proposal was created\r\n    /// @param _lastClientProposalID The index of the last approved client proposal\r\n    /// @param _orderAmount The sum amount (in wei) ordered for this proposal \r\n    /// @param _dateOfOrder A unix timestamp, denoting the date of the last order for the approved proposal\r\n    /// @return Whether the function was successful or not \r\n    function cloneProposal(\r\n        uint _amount,\r\n        string _description,\r\n        bytes32 _hashOfTheDocument,\r\n        uint _dateOfProposal,\r\n        uint _lastClientProposalID,\r\n        uint _orderAmount,\r\n        uint _dateOfOrder) returns (bool success);\r\n    \r\n    /// @notice Function to clone tokens from a manager\r\n    /// @param _from The index of the first holder\r\n    /// @param _to The index of the last holder\r\n    /// @return Whether the function was successful or not \r\n    function cloneTokens(\r\n        uint _from,\r\n        uint _to) returns (bool success);\r\n    \r\n    /// @notice Function to close the setup procedure of this contract\r\n    function closeSetup();\r\n\r\n    /// @notice Function to update the recipent address\r\n    /// @param _newRecipient The adress of the recipient\r\n    function updateRecipient(address _newRecipient);\r\n\r\n    /// @notice Function to receive payments or deposits\r\n    function () payable;\r\n    \r\n    /// @notice Function to allow contractors to withdraw ethers\r\n    /// @param _amount The amount (in wei) to withdraw\r\n    function withdraw(uint _amount);\r\n\r\n    /// @notice Function to update the client address\r\n    function updateClient(address _newClient);\r\n    \r\n    /// @notice Function to make a proposal to work for the client\r\n    /// @param _amount The amount (in wei) of the proposal\r\n    /// @param _description String describing the proposal\r\n    /// @param _hashOfTheDocument The hash of the proposal document\r\n    /// @return The index of the contractor proposal\r\n    function newProposal(\r\n        uint _amount,\r\n        string _description, \r\n        bytes32 _hashOfTheDocument\r\n    ) returns (uint);\r\n        \r\n    /// @notice Function used by the client to order according to the contractor proposal\r\n    /// @param _clientProposalID The index of the last approved client proposal\r\n    /// @param _proposalID The index of the contractor proposal\r\n    /// @param _amount The amount (in wei) of the order\r\n    /// @return Whether the order was made or not\r\n    function order(\r\n        uint _clientProposalID,\r\n        uint _proposalID,\r\n        uint _amount\r\n    ) external returns (bool) ;\r\n    \r\n    /// @notice Function used by the client to send ethers from the Dao manager\r\n    /// @param _recipient The address to send to\r\n    /// @param _amount The amount (in wei) to send\r\n    /// @return Whether the transfer was successful or not\r\n    function sendTo(\r\n        address _recipient, \r\n        uint _amount\r\n    ) external returns (bool);\r\n    \r\n    /// @dev Internal function to add a new token or share holder\r\n    /// @param _holder The address of the token or share holder\r\n    function addHolder(address _holder) internal;\r\n    \r\n    /// @dev Internal function to create initial tokens    \r\n    /// @param _holder The beneficiary of the created tokens\r\n    /// @param _quantity The quantity of tokens to create\r\n    /// @return Whether the function was successful or not \r\n    function createInitialTokens(address _holder, uint _quantity) internal returns (bool success) ;\r\n    \r\n    /// @notice Function that allow the contractor to propose a token price\r\n    /// @param _initialPriceMultiplier The initial price multiplier of contractor tokens\r\n    /// @param _inflationRate If 0, the contractor token price doesn't change during the funding\r\n    /// @param _closingTime The initial price and inflation rate can be changed after this date\r\n    function setTokenPriceProposal(        \r\n        uint _initialPriceMultiplier, \r\n        uint _inflationRate,\r\n        uint _closingTime\r\n    );\r\n\r\n    /// @notice Function to set a funding. Can be private or public\r\n    /// @param _mainPartner The address of the smart contract to manage a private funding\r\n    /// @param _publicCreation True if public funding\r\n    /// @param _initialPriceMultiplier Price multiplier without considering any inflation rate\r\n    /// @param _maxAmountToFund The maximum amount (in wei) of the funding\r\n    /// @param _minutesFundingPeriod Period in minutes of the funding\r\n    /// @param _inflationRate If 0, the token price doesn't change during the funding\r\n    /// @param _proposalID Index of the client proposal (not mandatory)\r\n    function setFundingRules(\r\n        address _mainPartner,\r\n        bool _publicCreation, \r\n        uint _initialPriceMultiplier, \r\n        uint _maxAmountToFund, \r\n        uint _minutesFundingPeriod, \r\n        uint _inflationRate,\r\n        uint _proposalID\r\n    ) external;\r\n    \r\n    /// @dev Internal function for the creation of shares or tokens\r\n    /// @param _recipient The recipient address of shares or tokens\r\n    /// @param _amount The funded amount (in wei)\r\n    /// @param _saleDate In case of presale, the date of the presale\r\n    /// @return Whether the creation was successful or not\r\n    function createToken(\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _saleDate\r\n    ) internal returns (bool success);\r\n\r\n    /// @notice Function used by the main partner to set the start time of the funding\r\n    /// @param _startTime The unix start date of the funding \r\n    function setFundingStartTime(uint _startTime) external;\r\n\r\n    /// @notice Function used by the main partner to reward shares or tokens\r\n    /// @param _recipient The address of the recipient of shares or tokens\r\n    /// @param _amount The amount (in Wei) to calculate the quantity of shares or tokens to create\r\n    /// @param _date The unix date to consider for the share or token price calculation\r\n    /// @return Whether the transfer was successful or not\r\n    function rewardToken(\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _date\r\n        ) external;\r\n\r\n    /// @dev Internal function to close the actual funding\r\n    function closeFunding() internal;\r\n    \r\n    /// @notice Function used by the main partner to set the funding fueled\r\n    function setFundingFueled() external;\r\n\r\n    /// @notice Function to able the transfer of Dao shares or contractor tokens\r\n    function ableTransfer();\r\n\r\n    /// @notice Function to disable the transfer of Dao shares\r\n    /// @param _closingTime Date when shares or tokens can be transferred\r\n    function disableTransfer(uint _closingTime);\r\n\r\n    /// @notice Function used by the client to block the transfer of shares from and to a share holder\r\n    /// @param _shareHolder The address of the share holder\r\n    /// @param _deadLine When the account will be unblocked\r\n    function blockTransfer(address _shareHolder, uint _deadLine) external;\r\n\r\n    /// @notice Function to buy Dao shares according to the funding rules \r\n    /// with `msg.sender` as the beneficiary\r\n    function buyShares() payable;\r\n    \r\n    /// @notice Function to buy Dao shares according to the funding rules \r\n    /// @param _recipient The beneficiary of the created shares\r\n    function buySharesFor(address _recipient) payable;\r\n    \r\n    /// @dev Internal function to send `_value` token to `_to` from `_From`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    /// @return Whether the function was successful or not \r\n    function transferFromTo(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n        ) internal returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    /// @return Whether the function was successful or not \r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n        ) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    event FeesReceived(address indexed From, uint Amount);\r\n    event AmountReceived(address indexed From, uint Amount);\r\n    event paymentReceived(address indexed daoManager, uint Amount);\r\n    event ProposalCloned(uint indexed LastClientProposalID, uint indexed ProposalID, uint Amount, string Description, bytes32 HashOfTheDocument);\r\n    event ClientUpdated(address LastClient, address NewClient);\r\n    event RecipientUpdated(address LastRecipient, address NewRecipient);\r\n    event ProposalAdded(uint indexed ProposalID, uint Amount, string Description, bytes32 HashOfTheDocument);\r\n    event Order(uint indexed clientProposalID, uint indexed ProposalID, uint Amount);\r\n    event Withdawal(address indexed Recipient, uint Amount);\r\n    event TokenPriceProposalSet(uint InitialPriceMultiplier, uint InflationRate, uint ClosingTime);\r\n    event holderAdded(uint Index, address Holder);\r\n    event TokensCreated(address indexed Sender, address indexed TokenHolder, uint Quantity);\r\n    event FundingRulesSet(address indexed MainPartner, uint indexed FundingProposalId, uint indexed StartTime, uint ClosingTime);\r\n    event FundingFueled(uint indexed FundingProposalID, uint FundedAmount);\r\n    event TransferAble();\r\n    event TransferDisable(uint closingTime);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\r\n}    \r\n\r\ncontract PassManager is PassManagerInterface {\r\n\r\n// Constant functions\r\n\r\n    function Client() constant returns (address) {\r\n        if (recipient == 0) return client;\r\n        else return daoManager.Client();\r\n    }\r\n    \r\n    function ClosingTimeForCloning() constant returns (uint) {\r\n        if (recipient == 0) return closingTimeForCloning;\r\n        else return daoManager.ClosingTimeForCloning();\r\n    }\r\n    \r\n    function totalSupply() constant external returns (uint256) {\r\n        return totalTokenSupply;\r\n    }\r\n\r\n     function balanceOf(address _owner) constant external returns (uint256 balance) {\r\n        return balances[_owner];\r\n     }\r\n\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function FundedAmount(uint _proposalID) constant external returns (uint) {\r\n        return fundedAmount[_proposalID];\r\n    }\r\n\r\n    function priceDivisor(uint _saleDate) constant internal returns (uint) {\r\n        uint _date = _saleDate;\r\n        \r\n        if (_saleDate > FundingRules[0].closingTime) _date = FundingRules[0].closingTime;\r\n        if (_saleDate < FundingRules[0].startTime) _date = FundingRules[0].startTime;\r\n\r\n        return 100 + 100*FundingRules[0].inflationRate*(_date - FundingRules[0].startTime)/(100*365 days);\r\n    }\r\n    \r\n    function actualPriceDivisor() constant external returns (uint) {\r\n        return priceDivisor(now);\r\n    }\r\n\r\n    function fundingMaxAmount(address _mainPartner) constant external returns (uint) {\r\n        \r\n        if (now > FundingRules[0].closingTime\r\n            || now < FundingRules[0].startTime\r\n            || _mainPartner != FundingRules[0].mainPartner) {\r\n            return 0;   \r\n        } else {\r\n            return FundingRules[0].maxAmountToFund;\r\n        }\r\n        \r\n    }\r\n\r\n    function numberOfHolders() constant returns (uint) {\r\n        return holders.length - 1;\r\n    }\r\n    \r\n    function HolderAddress(uint _index) constant returns (address) {\r\n        return holders[_index];\r\n    }\r\n\r\n    function numberOfProposals() constant returns (uint) {\r\n        return proposals.length - 1;\r\n    }\r\n\r\n// Modifiers\r\n\r\n    // Modifier that allows only the client to manage this account manager\r\n    modifier onlyClient {if (msg.sender != Client()) throw; _;}\r\n    \r\n    // Modifier that allows only the main partner to manage the actual funding\r\n    modifier onlyMainPartner {if (msg.sender !=  FundingRules[0].mainPartner) throw; _;}\r\n    \r\n    // Modifier that allows only the contractor propose set the token price or withdraw\r\n    modifier onlyContractor {if (recipient == 0 || (msg.sender != recipient && msg.sender != creator)) throw; _;}\r\n    \r\n    // Modifier for Dao functions\r\n    modifier onlyDao {if (recipient != 0) throw; _;}\r\n    \r\n// Constructor function\r\n\r\n    function PassManager(\r\n        address _client,\r\n        address _daoManager,\r\n        address _recipient,\r\n        address _clonedFrom,\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        bool _transferable\r\n    ) {\r\n\r\n        if ((_recipient == 0 && _client == 0)\r\n            || _client == _recipient) throw;\r\n\r\n        creator = msg.sender; \r\n        client = _client;\r\n        recipient = _recipient;\r\n        \r\n        if (_recipient !=0) daoManager = PassManager(_daoManager);\r\n\r\n        clonedFrom = _clonedFrom;            \r\n        \r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _tokenDecimals;\r\n          \r\n        if (_transferable) {\r\n            transferable = true;\r\n            TransferAble();\r\n        } else {\r\n            transferable = false;\r\n            TransferDisable(0);\r\n        }\r\n\r\n        holders.length = 1;\r\n        proposals.length = 1;\r\n        \r\n    }\r\n\r\n// Setting functions\r\n\r\n    function initialTokenSupply(\r\n        address _recipient, \r\n        uint _quantity,\r\n        bool _last) returns (bool success) {\r\n\r\n        if (smartContractStartDate != 0 || initialTokenSupplyDone) throw;\r\n        \r\n        if (_recipient != 0 && _quantity != 0) {\r\n            return (createInitialTokens(_recipient, _quantity));\r\n        }\r\n        \r\n        if (_last) initialTokenSupplyDone = true;\r\n            \r\n    }\r\n\r\n    function cloneProposal(\r\n        uint _amount,\r\n        string _description,\r\n        bytes32 _hashOfTheDocument,\r\n        uint _dateOfProposal,\r\n        uint _lastClientProposalID,\r\n        uint _orderAmount,\r\n        uint _dateOfOrder\r\n    ) returns (bool success) {\r\n            \r\n        if (smartContractStartDate != 0 || recipient == 0\r\n        || msg.sender != creator) throw;\r\n        \r\n        uint _proposalID = proposals.length++;\r\n        proposal c = proposals[_proposalID];\r\n\r\n        c.amount = _amount;\r\n        c.description = _description;\r\n        c.hashOfTheDocument = _hashOfTheDocument; \r\n        c.dateOfProposal = _dateOfProposal;\r\n        c.lastClientProposalID = _lastClientProposalID;\r\n        c.orderAmount = _orderAmount;\r\n        c.dateOfOrder = _dateOfOrder;\r\n        \r\n        ProposalCloned(_lastClientProposalID, _proposalID, c.amount, c.description, c.hashOfTheDocument);\r\n        \r\n        return true;\r\n            \r\n    }\r\n\r\n    function cloneTokens(\r\n        uint _from,\r\n        uint _to) returns (bool success) {\r\n        \r\n        if (smartContractStartDate != 0) throw;\r\n        \r\n        PassManager _clonedFrom = PassManager(clonedFrom);\r\n        \r\n        if (_from < 1 || _to > _clonedFrom.numberOfHolders()) throw;\r\n\r\n        address _holder;\r\n\r\n        for (uint i = _from; i <= _to; i++) {\r\n            _holder = _clonedFrom.HolderAddress(i);\r\n            if (balances[_holder] == 0) {\r\n                createInitialTokens(_holder, _clonedFrom.balanceOf(_holder));\r\n            }\r\n        }\r\n\r\n        return true;\r\n        \r\n    }\r\n\r\n    function closeSetup() {\r\n        \r\n        if (smartContractStartDate != 0 || msg.sender != creator) throw;\r\n\r\n        smartContractStartDate = now;\r\n\r\n    }\r\n\r\n// Function to receive payments or deposits\r\n\r\n    function () payable {\r\n        AmountReceived(msg.sender, msg.value);\r\n    }\r\n    \r\n// Contractors Account Management\r\n\r\n    function updateRecipient(address _newRecipient) onlyContractor {\r\n\r\n        if (_newRecipient == 0 \r\n            || _newRecipient == client) throw;\r\n\r\n        RecipientUpdated(recipient, _newRecipient);\r\n        recipient = _newRecipient;\r\n\r\n    } \r\n\r\n    function withdraw(uint _amount) onlyContractor {\r\n        if (!recipient.send(_amount)) throw;\r\n        Withdawal(recipient, _amount);\r\n    }\r\n    \r\n// DAO Proposals Management\r\n\r\n    function updateClient(address _newClient) onlyClient {\r\n        \r\n        if (_newClient == 0 \r\n            || _newClient == recipient) throw;\r\n\r\n        ClientUpdated(client, _newClient);\r\n        client = _newClient;        \r\n\r\n    }\r\n\r\n    function newProposal(\r\n        uint _amount,\r\n        string _description, \r\n        bytes32 _hashOfTheDocument\r\n    ) onlyContractor returns (uint) {\r\n\r\n        uint _proposalID = proposals.length++;\r\n        proposal c = proposals[_proposalID];\r\n\r\n        c.amount = _amount;\r\n        c.description = _description;\r\n        c.hashOfTheDocument = _hashOfTheDocument; \r\n        c.dateOfProposal = now;\r\n        \r\n        ProposalAdded(_proposalID, c.amount, c.description, c.hashOfTheDocument);\r\n        \r\n        return _proposalID;\r\n        \r\n    }\r\n    \r\n    function order(\r\n        uint _clientProposalID,\r\n        uint _proposalID,\r\n        uint _orderAmount\r\n    ) external onlyClient returns (bool) {\r\n    \r\n        proposal c = proposals[_proposalID];\r\n        \r\n        uint _sum = c.orderAmount + _orderAmount;\r\n        if (_sum > c.amount\r\n            || _sum < c.orderAmount\r\n            || _sum < _orderAmount) return; \r\n\r\n        c.lastClientProposalID =  _clientProposalID;\r\n        c.orderAmount = _sum;\r\n        c.dateOfOrder = now;\r\n        \r\n        Order(_clientProposalID, _proposalID, _orderAmount);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function sendTo(\r\n        address _recipient,\r\n        uint _amount\r\n    ) external onlyClient onlyDao returns (bool) {\r\n\r\n        if (_recipient.send(_amount)) return true;\r\n        else return false;\r\n\r\n    }\r\n    \r\n// Token Management\r\n    \r\n    function addHolder(address _holder) internal {\r\n        \r\n        if (holderID[_holder] == 0) {\r\n            \r\n            uint _holderID = holders.length++;\r\n            holders[_holderID] = _holder;\r\n            holderID[_holder] = _holderID;\r\n            holderAdded(_holderID, _holder);\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n    function createInitialTokens(\r\n        address _holder, \r\n        uint _quantity\r\n    ) internal returns (bool success) {\r\n\r\n        if (_quantity > 0 && balances[_holder] == 0) {\r\n            addHolder(_holder);\r\n            balances[_holder] = _quantity; \r\n            totalTokenSupply += _quantity;\r\n            TokensCreated(msg.sender, _holder, _quantity);\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function setTokenPriceProposal(        \r\n        uint _initialPriceMultiplier, \r\n        uint _inflationRate,\r\n        uint _closingTime\r\n    ) onlyContractor {\r\n        \r\n        if (_closingTime < now \r\n            || now < FundingRules[1].closingTime) throw;\r\n        \r\n        FundingRules[1].initialPriceMultiplier = _initialPriceMultiplier;\r\n        FundingRules[1].inflationRate = _inflationRate;\r\n        FundingRules[1].startTime = now;\r\n        FundingRules[1].closingTime = _closingTime;\r\n        \r\n        TokenPriceProposalSet(_initialPriceMultiplier, _inflationRate, _closingTime);\r\n    }\r\n    \r\n    function setFundingRules(\r\n        address _mainPartner,\r\n        bool _publicCreation, \r\n        uint _initialPriceMultiplier,\r\n        uint _maxAmountToFund, \r\n        uint _minutesFundingPeriod, \r\n        uint _inflationRate,\r\n        uint _proposalID\r\n    ) external onlyClient {\r\n\r\n        if (now < FundingRules[0].closingTime\r\n            || _mainPartner == address(this)\r\n            || _mainPartner == client\r\n            || (!_publicCreation && _mainPartner == 0)\r\n            || (_publicCreation && _mainPartner != 0)\r\n            || (recipient == 0 && _initialPriceMultiplier == 0)\r\n            || (recipient != 0 \r\n                && (FundingRules[1].initialPriceMultiplier == 0\r\n                    || _inflationRate < FundingRules[1].inflationRate\r\n                    || now < FundingRules[1].startTime\r\n                    || FundingRules[1].closingTime < now + (_minutesFundingPeriod * 1 minutes)))\r\n            || _maxAmountToFund == 0\r\n            || _minutesFundingPeriod == 0\r\n            ) throw;\r\n\r\n        FundingRules[0].startTime = now;\r\n        FundingRules[0].closingTime = now + _minutesFundingPeriod * 1 minutes;\r\n            \r\n        FundingRules[0].mainPartner = _mainPartner;\r\n        FundingRules[0].publicCreation = _publicCreation;\r\n        \r\n        if (recipient == 0) FundingRules[0].initialPriceMultiplier = _initialPriceMultiplier;\r\n        else FundingRules[0].initialPriceMultiplier = FundingRules[1].initialPriceMultiplier;\r\n        \r\n        if (recipient == 0) FundingRules[0].inflationRate = _inflationRate;\r\n        else FundingRules[0].inflationRate = FundingRules[1].inflationRate;\r\n        \r\n        FundingRules[0].fundedAmount = 0;\r\n        FundingRules[0].maxAmountToFund = _maxAmountToFund;\r\n\r\n        FundingRules[0].proposalID = _proposalID;\r\n\r\n        FundingRulesSet(_mainPartner, _proposalID, FundingRules[0].startTime, FundingRules[0].closingTime);\r\n            \r\n    } \r\n    \r\n    function createToken(\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _saleDate\r\n    ) internal returns (bool success) {\r\n\r\n        if (now > FundingRules[0].closingTime\r\n            || now < FundingRules[0].startTime\r\n            ||_saleDate > FundingRules[0].closingTime\r\n            || _saleDate < FundingRules[0].startTime\r\n            || FundingRules[0].fundedAmount + _amount > FundingRules[0].maxAmountToFund) return;\r\n\r\n        uint _a = _amount*FundingRules[0].initialPriceMultiplier;\r\n        uint _multiplier = 100*_a;\r\n        uint _quantity = _multiplier/priceDivisor(_saleDate);\r\n        if (_a/_amount != FundingRules[0].initialPriceMultiplier\r\n            || _multiplier/100 != _a\r\n            || totalTokenSupply + _quantity <= totalTokenSupply \r\n            || totalTokenSupply + _quantity <= _quantity) return;\r\n\r\n        addHolder(_recipient);\r\n        balances[_recipient] += _quantity;\r\n        totalTokenSupply += _quantity;\r\n        FundingRules[0].fundedAmount += _amount;\r\n\r\n        TokensCreated(msg.sender, _recipient, _quantity);\r\n        \r\n        if (FundingRules[0].fundedAmount == FundingRules[0].maxAmountToFund) closeFunding();\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function setFundingStartTime(uint _startTime) external onlyMainPartner {\r\n        if (now > FundingRules[0].closingTime) throw;\r\n        FundingRules[0].startTime = _startTime;\r\n    }\r\n    \r\n    function rewardToken(\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _date\r\n        ) external onlyMainPartner {\r\n\r\n        uint _saleDate;\r\n        if (_date == 0) _saleDate = now; else _saleDate = _date;\r\n\r\n        if (!createToken(_recipient, _amount, _saleDate)) throw;\r\n\r\n    }\r\n\r\n    function closeFunding() internal {\r\n        if (recipient == 0) fundedAmount[FundingRules[0].proposalID] = FundingRules[0].fundedAmount;\r\n        FundingRules[0].closingTime = now;\r\n    }\r\n    \r\n    function setFundingFueled() external onlyMainPartner {\r\n        if (now > FundingRules[0].closingTime) throw;\r\n        closeFunding();\r\n        if (recipient == 0) FundingFueled(FundingRules[0].proposalID, FundingRules[0].fundedAmount);\r\n    }\r\n    \r\n    function ableTransfer() onlyClient {\r\n        if (!transferable) {\r\n            transferable = true;\r\n            closingTimeForCloning = 0;\r\n            TransferAble();\r\n        }\r\n    }\r\n\r\n    function disableTransfer(uint _closingTime) onlyClient {\r\n        if (transferable && _closingTime == 0) transferable = false;\r\n        else closingTimeForCloning = _closingTime;\r\n            \r\n        TransferDisable(_closingTime);\r\n    }\r\n    \r\n    function blockTransfer(address _shareHolder, uint _deadLine) external onlyClient onlyDao {\r\n        if (_deadLine > blockedDeadLine[_shareHolder]) {\r\n            blockedDeadLine[_shareHolder] = _deadLine;\r\n        }\r\n    }\r\n    \r\n    function buyShares() payable {\r\n        buySharesFor(msg.sender);\r\n    } \r\n    \r\n    function buySharesFor(address _recipient) payable onlyDao {\r\n        \r\n        if (!FundingRules[0].publicCreation \r\n            || !createToken(_recipient, msg.value, now)) throw;\r\n\r\n    }\r\n    \r\n    function transferFromTo(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n        ) internal returns (bool success) {  \r\n\r\n        if ((transferable && now > ClosingTimeForCloning())\r\n            && now > blockedDeadLine[_from]\r\n            && now > blockedDeadLine[_to]\r\n            && _to != address(this)\r\n            && balances[_from] >= _value\r\n            && balances[_to] + _value > balances[_to]\r\n            && balances[_to] + _value >= _value\r\n        ) {\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            addHolder(_to);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {  \r\n        if (!transferFromTo(msg.sender, _to, _value)) throw;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n        ) returns (bool success) { \r\n        \r\n        if (allowed[_from][msg.sender] < _value\r\n            || !transferFromTo(_from, _to, _value)) throw;\r\n            \r\n        allowed[_from][msg.sender] -= _value;\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"hashOfTheDocument\",\"type\":\"bytes32\"},{\"name\":\"dateOfProposal\",\"type\":\"uint256\"},{\"name\":\"lastClientProposalID\",\"type\":\"uint256\"},{\"name\":\"orderAmount\",\"type\":\"uint256\"},{\"name\":\"dateOfOrder\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_last\",\"type\":\"bool\"}],\"name\":\"initialTokenSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clientProposalID\",\"type\":\"uint256\"},{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_orderAmount\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"cloneTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_hashOfTheDocument\",\"type\":\"bytes32\"},{\"name\":\"_dateOfProposal\",\"type\":\"uint256\"},{\"name\":\"_lastClientProposalID\",\"type\":\"uint256\"},{\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"name\":\"_dateOfOrder\",\"type\":\"uint256\"}],\"name\":\"cloneProposal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FundingRules\",\"outputs\":[{\"name\":\"publicCreation\",\"type\":\"bool\"},{\"name\":\"mainPartner\",\"type\":\"address\"},{\"name\":\"maxAmountToFund\",\"type\":\"uint256\"},{\"name\":\"fundedAmount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"inflationRate\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"rewardToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ableTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newClient\",\"type\":\"address\"}],\"name\":\"updateClient\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_hashOfTheDocument\",\"type\":\"bytes32\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"buySharesFor\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shareHolder\",\"type\":\"address\"},{\"name\":\"_deadLine\",\"type\":\"uint256\"}],\"name\":\"blockTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSetup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ClosingTimeForCloning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setFundingStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartContractStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"FundedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualPriceDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedDeadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Client\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainPartner\",\"type\":\"address\"},{\"name\":\"_publicCreation\",\"type\":\"bool\"},{\"name\":\"_initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"_maxAmountToFund\",\"type\":\"uint256\"},{\"name\":\"_minutesFundingPeriod\",\"type\":\"uint256\"},{\"name\":\"_inflationRate\",\"type\":\"uint256\"},{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"setFundingRules\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"_inflationRate\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceProposal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFundingFueled\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"HolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mainPartner\",\"type\":\"address\"}],\"name\":\"fundingMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"disableTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clonedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyShares\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"updateRecipient\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_daoManager\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_clonedFrom\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_transferable\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"AmountReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"daoManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"paymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"LastClientProposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"HashOfTheDocument\",\"type\":\"bytes32\"}],\"name\":\"ProposalCloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"LastClient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"NewClient\",\"type\":\"address\"}],\"name\":\"ClientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"LastRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"NewRecipient\",\"type\":\"address\"}],\"name\":\"RecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"HashOfTheDocument\",\"type\":\"bytes32\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"clientProposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Withdawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InitialPriceMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"InflationRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ClosingTime\",\"type\":\"uint256\"}],\"name\":\"TokenPriceProposalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Holder\",\"type\":\"address\"}],\"name\":\"holderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"TokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Quantity\",\"type\":\"uint256\"}],\"name\":\"TokensCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"MainPartner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"FundingProposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"StartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ClosingTime\",\"type\":\"uint256\"}],\"name\":\"FundingRulesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"FundingProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"FundedAmount\",\"type\":\"uint256\"}],\"name\":\"FundingFueled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferAble\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"closingTime\",\"type\":\"uint256\"}],\"name\":\"TransferDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PassManager","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000058f792248d5fe5cadcc8cc222eaa97c1f4089f8b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009bc331c4938215e3cc221be26757dd4679a4acd0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e504153532044414f20536861726500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045041534400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}