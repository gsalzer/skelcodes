{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/// @title GNT Allocation - Time-locked vault of tokens allocated\r\n/// to developers and Golem Factory\r\ncontract GNTAllocation {\r\n    // Total number of allocations to distribute additional tokens among\r\n    // developers and the Golem Factory. The Golem Factory has right to 20000\r\n    // allocations, developers to 10000 allocations, divides among individual\r\n    // developers by numbers specified in  `allocations` table.\r\n    uint256 constant totalAllocations = 30000;\r\n\r\n    // Addresses of developer and the Golem Factory to allocations mapping.\r\n    mapping (address => uint256) allocations;\r\n\r\n    GolemNetworkToken gnt;\r\n    uint256 unlockedAt;\r\n\r\n    uint256 tokensCreated = 0;\r\n\r\n    function GNTAllocation(address _golemFactory) internal {\r\n        gnt = GolemNetworkToken(msg.sender);\r\n        unlockedAt = now + 30 minutes;\r\n\r\n        // For the Golem Factory:\r\n        allocations[_golemFactory] = 20000; // 12/18 pp of 30000 allocations.\r\n\r\n        // For developers:\r\n        allocations[0x3F4e79023273E82EfcD8B204fF1778e09df1a597] = 2500; // 25.0% of developers' allocations (10000).\r\n        allocations[0x1A5218B6E5C49c290745552481bb0335be2fB0F4] =  730; //  7.3% of developers' allocations.\r\n        allocations[0x00eA32D8DAe74c01eBe293C74921DB27a6398D57] =  730;\r\n        allocations[0xde03] =  730;\r\n        allocations[0xde04] =  730;\r\n        allocations[0xde05] =  730;\r\n        allocations[0xde06] =  630; //  6.3% of developers' allocations.\r\n        allocations[0xde07] =  630;\r\n        allocations[0xde08] =  630;\r\n        allocations[0xde09] =  630;\r\n        allocations[0xde10] =  310; //  3.1% of developers' allocations.\r\n        allocations[0xde11] =  153; //  1.53% of developers' allocations.\r\n        allocations[0xde12] =  150; //  1.5% of developers' allocations.\r\n        allocations[0xde13] =  100; //  1.0% of developers' allocations.\r\n        allocations[0xde14] =  100;\r\n        allocations[0xde15] =  100;\r\n        allocations[0xde16] =   70; //  0.7% of developers' allocations.\r\n        allocations[0xde17] =   70;\r\n        allocations[0xde18] =   70;\r\n        allocations[0xde19] =   70;\r\n        allocations[0xde20] =   70;\r\n        allocations[0xde21] =   42; //  0.42% of developers' allocations.\r\n        allocations[0xde22] =   25; //  0.25% of developers' allocations.\r\n    }\r\n\r\n    /// @notice Allow developer to unlock allocated tokens by transferring them\r\n    /// from GNTAllocation to developer's address.\r\n    function unlock() external {\r\n        if (now < unlockedAt) throw;\r\n\r\n        // During first unlock attempt fetch total number of locked tokens.\r\n        if (tokensCreated == 0)\r\n            tokensCreated = gnt.balanceOf(this);\r\n\r\n        var allocation = allocations[msg.sender];\r\n        allocations[msg.sender] = 0;\r\n        var toTransfer = tokensCreated * allocation / totalAllocations;\r\n\r\n        // Will fail if allocation (and therefore toTransfer) is 0.\r\n        if (!gnt.transfer(msg.sender, toTransfer)) throw;\r\n    }\r\n}\r\n\r\n/// @title Migration Agent interface\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\n/// @title Golem Network Token (GNT) - crowdfunding code for Golem Project\r\ncontract GolemNetworkToken {\r\n    string public constant name = \"Test Network Token\";\r\n    string public constant symbol = \"TNT\";\r\n    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\r\n\r\n    uint256 public constant tokenCreationRate = 1000;\r\n\r\n    // The funding cap in weis.\r\n    uint256 public constant tokenCreationCap = 3 ether * tokenCreationRate;\r\n    uint256 public constant tokenCreationMin = 1 ether * tokenCreationRate;\r\n\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n\r\n    // The flag indicates if the GNT contract is in Funding state.\r\n    bool public funding = true;\r\n\r\n    // Receives ETH and its own GNT endowment.\r\n    address public golemFactory;\r\n\r\n    // Has control over token migration to next version of token.\r\n    address public migrationMaster;\r\n\r\n    GNTAllocation lockedAllocation;\r\n\r\n    // The current total token supply.\r\n    uint256 totalTokens;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    address public migrationAgent;\r\n    uint256 public totalMigrated;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n    event Refund(address indexed _from, uint256 _value);\r\n\r\n    function GolemNetworkToken(address _golemFactory,\r\n                               address _migrationMaster,\r\n                               uint256 _fundingStartBlock,\r\n                               uint256 _fundingEndBlock) {\r\n\r\n        if (_golemFactory == 0) throw;\r\n        if (_migrationMaster == 0) throw;\r\n        if (_fundingStartBlock <= block.number) throw;\r\n        if (_fundingEndBlock   <= _fundingStartBlock) throw;\r\n\r\n        lockedAllocation = new GNTAllocation(_golemFactory);\r\n        migrationMaster = _migrationMaster;\r\n        golemFactory = _golemFactory;\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n    }\r\n\r\n    /// @notice Transfer `_value` GNT tokens from sender's account\r\n    /// `msg.sender` to provided account address `_to`.\r\n    /// @notice This function is disabled during the funding.\r\n    /// @dev Required state: Operational\r\n    /// @param _to The address of the tokens recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        // Abort if not in Operational state.\r\n        if (funding) throw;\r\n\r\n        var senderBalance = balances[msg.sender];\r\n        if (senderBalance >= _value && _value > 0) {\r\n            senderBalance -= _value;\r\n            balances[msg.sender] = senderBalance;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function totalSupply() external constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Token migration support:\r\n\r\n    /// @notice Migrate tokens to the new token contract.\r\n    /// @dev Required state: Operational Migration\r\n    /// @param _value The amount of token to be migrated\r\n    function migrate(uint256 _value) external {\r\n        // Abort if not in Operational Migration state.\r\n        if (funding) throw;\r\n        if (migrationAgent == 0) throw;\r\n\r\n        // Validate input value.\r\n        if (_value == 0) throw;\r\n        if (_value > balances[msg.sender]) throw;\r\n\r\n        balances[msg.sender] -= _value;\r\n        totalTokens -= _value;\r\n        totalMigrated += _value;\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, migrationAgent, _value);\r\n    }\r\n\r\n    /// @notice Set address of migration target contract and enable migration\r\n\t/// process.\r\n    /// @dev Required state: Operational Normal\r\n    /// @dev State transition: -> Operational Migration\r\n    /// @param _agent The address of the MigrationAgent contract\r\n    function setMigrationAgent(address _agent) external {\r\n        // Abort if not in Operational Normal state.\r\n        if (funding) throw;\r\n        if (migrationAgent != 0) throw;\r\n        if (msg.sender != migrationMaster) throw;\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    function setMigrationMaster(address _master) external {\r\n        if (msg.sender != migrationMaster) throw;\r\n        if (_master == 0) throw;\r\n        migrationMaster = _master;\r\n    }\r\n\r\n    // Crowdfunding:\r\n\r\n    /// @notice Create tokens when funding is active.\r\n    /// @dev Required state: Funding Active\r\n    /// @dev State transition: -> Funding Success (only if cap reached)\r\n    function create() payable external {\r\n        // Abort if not in Funding Active state.\r\n        // The checks are split (instead of using or operator) because it is\r\n        // cheaper this way.\r\n        if (!funding) throw;\r\n        if (block.number < fundingStartBlock) throw;\r\n        if (block.number > fundingEndBlock) throw;\r\n\r\n        // Do not allow creating 0 or more than the cap tokens.\r\n        if (msg.value == 0) throw;\r\n        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\r\n            throw;\r\n\r\n        var numTokens = msg.value * tokenCreationRate;\r\n        totalTokens += numTokens;\r\n\r\n        // Assign new tokens to the sender\r\n        balances[msg.sender] += numTokens;\r\n\r\n        // Log token creation event\r\n        Transfer(0, msg.sender, numTokens);\r\n    }\r\n\r\n    /// @notice Finalize crowdfunding\r\n    /// @dev If cap was reached or crowdfunding has ended then:\r\n    /// create GNT for the Golem Factory and developer,\r\n    /// transfer ETH to the Golem Factory address.\r\n    /// @dev Required state: Funding Success\r\n    /// @dev State transition: -> Operational Normal\r\n    function finalize() external {\r\n        // Abort if not in Funding Success state.\r\n        if (!funding) throw;\r\n        if ((block.number <= fundingEndBlock ||\r\n             totalTokens < tokenCreationMin) &&\r\n            totalTokens < tokenCreationCap) throw;\r\n\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        funding = false;\r\n\r\n        // Create additional GNT for the Golem Factory and developers as\r\n        // the 18% of total number of tokens.\r\n        // All additional tokens are transfered to the account controller by\r\n        // GNTAllocation contract which will not allow using them for 6 months.\r\n        uint256 percentOfTotal = 18;\r\n        uint256 additionalTokens =\r\n            totalTokens * percentOfTotal / (100 - percentOfTotal);\r\n        totalTokens += additionalTokens;\r\n        balances[lockedAllocation] += additionalTokens;\r\n        Transfer(0, lockedAllocation, additionalTokens);\r\n\r\n        // Transfer ETH to the Golem Factory address.\r\n        if (!golemFactory.send(this.balance)) throw;\r\n    }\r\n\r\n    /// @notice Get back the ether sent during the funding in case the funding\r\n    /// has not reached the minimum level.\r\n    /// @dev Required state: Funding Failure\r\n    function refund() external {\r\n        // Abort if not in Funding Failure state.\r\n        if (!funding) throw;\r\n        if (block.number <= fundingEndBlock) throw;\r\n        if (totalTokens >= tokenCreationMin) throw;\r\n\r\n        var gntValue = balances[msg.sender];\r\n        if (gntValue == 0) throw;\r\n        balances[msg.sender] = 0;\r\n        totalTokens -= gntValue;\r\n\r\n        var ethValue = gntValue / tokenCreationRate;\r\n        Refund(msg.sender, ethValue);\r\n        if (!msg.sender.send(ethValue)) throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"golemFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMigrationMaster\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_golemFactory\",\"type\":\"address\"},{\"name\":\"_migrationMaster\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"GolemNetworkToken","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008acd97bd3de5aab7e0d28819e898296c8e9d27400000000000000000000000000fe0b0740387fcad310c88330c59725c1349eea200000000000000000000000000000000000000000000000000000000002785ad000000000000000000000000000000000000000000000000000000000027862f","Library":"","SwarmSource":""}]}