{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\ncontract DFS {\r\n  \r\n    struct Deposit {\r\n        uint amount;\r\n        uint plan;\r\n        uint time;\r\n        uint payed;\r\n        address sender;\r\n    }\r\n    uint numDeposits;\r\n    mapping (uint => Deposit) deposits;\r\n    \r\n    address constant owner1 = 0x8D98b4360F20FD285FF38bd2BB2B0e4E9159D77e;\r\n    address constant owner2 = 0x1D8850Ff087b3256Cb98945D478e88bAeF892Bd4;\r\n    \r\n    function makeDeposit(\r\n        uint plan,\r\n        address ref1,\r\n        address ref2,\r\n        address ref3\r\n    ) payable {\r\n\r\n        /* minimum amount is 3 ether, plan must be 1, 2 or 3 */\r\n        if (msg.value < 3 ether || (plan != 1 && plan !=2 && plan !=3)) {\r\n            throw;\r\n        }\r\n\r\n        uint amount;\r\n        /* maximum amount is 1000 ether */\r\n        if (msg.value > 1000 ether) {\r\n            if(!msg.sender.send(msg.value - 1000 ether)) {\r\n                throw;\r\n            }\r\n            amount = 1000 ether;\r\n        } else {\r\n            amount = msg.value;\r\n        }\r\n        \r\n        deposits[numDeposits++] = Deposit({\r\n            sender: msg.sender,\r\n            time: now,\r\n            amount: amount,\r\n            plan: plan,\r\n            payed: 0,\r\n        });\r\n        \r\n        /* fee */\r\n        if(!owner1.send(amount *  5/2 / 100)) {\r\n            throw;\r\n        }\r\n        if(!owner2.send(amount *  5/2 / 100)) {\r\n            throw;\r\n        }\r\n        \r\n        /* referral rewards */\r\n        if(ref1 != address(0x0)){\r\n            /* 1st level referral rewards */\r\n            if(!ref1.send(amount * 5 / 100)) {\r\n                throw;\r\n            }\r\n            if(ref2 != address(0x0)){\r\n                /* 2nd level referral rewards */\r\n                if(!ref2.send(amount * 2 / 100)) {\r\n                    throw;\r\n                }\r\n                if(ref3 != address(0x0)){\r\n                    /* 3nd level referral rewards */\r\n                    if(!ref3.send(amount / 100)) {\r\n                        throw;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    uint i;\r\n\r\n    function pay(){\r\n\r\n        while (i < numDeposits && msg.gas > 200000) {\r\n\r\n            uint rest =  (now - deposits[i].time) % 1 days;\r\n            uint depositDays =  (now - deposits[i].time - rest) / 1 days;\r\n            uint profit;\r\n            uint amountToWithdraw;\r\n            \r\n            if(deposits[i].plan == 1){\r\n                if(depositDays > 30){\r\n                    depositDays = 30;\r\n                }\r\n                profit = deposits[i].amount * depositDays  * 7/2 / 100;\r\n            }\r\n            \r\n            if(deposits[i].plan == 2){\r\n                if(depositDays > 90){\r\n                    depositDays = 90;\r\n                }\r\n                profit = deposits[i].amount * depositDays  * 27/20 / 100;\r\n            }\r\n            \r\n            if(deposits[i].plan == 3){\r\n                if(depositDays > 180){\r\n                    depositDays = 180;\r\n                }\r\n                profit = deposits[i].amount * depositDays  * 9/10 / 100;\r\n            }\r\n            \r\n \r\n            if(profit > deposits[i].payed){\r\n                amountToWithdraw = profit - deposits[i].payed;\r\n                if(this.balance > amountToWithdraw){\r\n                    if(!deposits[i].sender.send(amountToWithdraw)) {}\r\n                    deposits[i].payed = profit;\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        if(i == numDeposits){\r\n             i = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint256\"},{\"name\":\"ref1\",\"type\":\"address\"},{\"name\":\"ref2\",\"type\":\"address\"},{\"name\":\"ref3\",\"type\":\"address\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"DFS","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}