{"status":"1","message":"OK","result":[{"SourceCode":"contract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;       \r\n    }\r\n\r\n    function transferOwnership(address newOwner)  {\r\n\t\tif(msg.sender!=owner) throw;\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract GSIToken is owned  {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\t\t    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimalUnits;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function GSIToken(\r\n        uint256 initialSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        address centralMinter\r\n    )  {\r\n        if(centralMinter != 0 ) owner = centralMinter;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)\r\n        balanceOf[owner] = initialSupply;                   // Give the owner all initial tokens\r\n\t\ttotalSupply=initialSupply;\r\n\t\tname=_tokenName;\r\n\t\tdecimalUnits=_decimalUnits;\r\n\t\tsymbol=_tokenSymbol;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (frozenAccount[_from]) throw;                        // Check if frozen            \r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) {\r\n\t    if(msg.sender!=owner) throw;\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, owner, mintedAmount);\r\n        Transfer(owner, target, mintedAmount);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) {\r\n\t\tif(msg.sender!=owner) throw;\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice)  {\r\n\t\tif(msg.sender!=owner) throw;\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function buy() {\r\n        uint amount = msg.value / buyPrice;                // calculates the amount\r\n        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\r\n        balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n        balanceOf[this] -= amount;                         // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n    }\r\n\r\n    function sell(uint256 amount) {\r\n        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n        balanceOf[this] += amount;                         // adds the amount to owner's balance\r\n        balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n        if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important\r\n            throw;                                         // to do this last to avoid recursion attacks\r\n        } else {\r\n            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\r\n        }               \r\n    }\r\n\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}\r\n\r\ncontract GSI is owned {\r\n\t\tevent OracleRequest(address target);\r\n\t\tevent MintedGreen(address target,uint256 amount);\r\n\t\tevent MintedGrey(address target,uint256 amount);\r\n\t\t\r\n\t\tGSIToken public greenToken;\r\n\t\tGSIToken public greyToken;\r\n\t\tuint256 public requiredGas;\r\n\t\tuint256 public secondsBetweenReadings;\r\n\t\t\r\n\t\tmapping(address=>Reading) public lastReading;\r\n\t\tmapping(address=>Reading) public requestReading;\r\n\t\tmapping(address=>uint8) public freeReadings;\r\n\t\tmapping(address=>string) public plz;\r\n\t\tmapping(address=>uint8) public oracles;\r\n\t\t\r\n\t\tstruct Reading {\r\n\t\t\tuint256 timestamp;\r\n\t\t\tuint256 value;\r\n\t\t\tstring zip;\r\n\t\t}\r\n\t\t\r\n\t\tfunction GSI() {\r\n\t\t\tgreenToken = new GSIToken(\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t'GreenPower',\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t'P+',\r\n\t\t\t\t\t\t\tthis\r\n\t\t\t);\t\t\t\r\n\t\t\tgreyToken = new GSIToken(\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t'GreyPower',\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t'P-',\r\n\t\t\t\t\t\t\tthis\r\n\t\t\t);\t\t\r\n\t\t\toracles[msg.sender]=1;\r\n\t\t}\r\n\t\t\r\n\t\tfunction oracalizeReading(uint256 _reading) {\r\n\t\t\tif(msg.value<requiredGas) {  \r\n\t\t\t\tif(freeReadings[msg.sender]==0) throw;\r\n\t\t\t\tfreeReadings[msg.sender]--;\r\n\t\t\t} \t\t\r\n\t\t\tif(_reading<lastReading[msg.sender].value) throw;\r\n\t\t\tif(_reading<requestReading[msg.sender].value) throw;\r\n\t\t\tif(now<lastReading[msg.sender].timestamp+secondsBetweenReadings) throw;\t\t\t\r\n\t\t\t//lastReading[msg.sender]=requestReading[msg.sender];\r\n\t\t\trequestReading[msg.sender]=Reading(now,_reading,plz[msg.sender]);\r\n\t\t\tOracleRequest(msg.sender);\r\n\t\t\towner.send(msg.value);\r\n\t\t}\t\r\n\t\t\r\n\t\tfunction addOracle(address oracle) {\r\n\t\t\tif(msg.sender!=owner) throw;\r\n\t\t\toracles[oracle]=1;\r\n\t\t\t\r\n\t\t}\r\n\t\tfunction setPlz(string _plz) {\r\n\t\t\tplz[msg.sender]=_plz;\r\n\t\t}\r\n\t\tfunction setReadingDelay(uint256 delay) {\r\n\t\t\tif(msg.sender!=owner) throw;\r\n\t\t\tsecondsBetweenReadings=delay;\r\n\t\t}\r\n\t\t\r\n\t\tfunction assignFreeReadings(address _receiver,uint8 _count)  {\r\n\t\t\tif(oracles[msg.sender]!=1) throw;\r\n\t\t\tfreeReadings[_receiver]+=_count;\r\n\t\t}\t\r\n\t\t\r\n\t\tfunction mintGreen(address recipient,uint256 tokens) {\r\n\t\t\tif(oracles[msg.sender]!=1) throw;\r\n\t\t\tgreenToken.mintToken(recipient, tokens);\t\r\n\t\t\tMintedGreen(recipient,tokens);\r\n\t\t}\r\n\t\t\r\n\t\tfunction mintGrey(address recipient,uint256 tokens) {\r\n\t\t\tif(oracles[msg.sender]!=1) throw;\t\r\n\t\t\tgreyToken.mintToken(recipient, tokens);\t\t\r\n\t\t\tMintedGrey(recipient,tokens);\r\n\t\t}\r\n\t\t\r\n\t\tfunction commitReading(address recipient) {\r\n\t\t  if(oracles[msg.sender]!=1) throw;\r\n\t\t  lastReading[recipient]=requestReading[recipient];\r\n\t\t  msg.sender.send(this.balance);\r\n\t\t  //owner.send(this.balance);\r\n\t\t}\r\n\t\t\r\n\t\tfunction setGreenToken(GSIToken _greenToken) {\r\n\t\t\tif(msg.sender!=owner) throw;\r\n\t\t\tgreenToken=_greenToken;\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\tfunction setGreyToken(GSIToken _greyToken) {\r\n\t\t\tif(msg.sender!=owner) throw;\r\n\t\t\tgreyToken=_greyToken;\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\tfunction setOracleGas(uint256 _requiredGas)  {\r\n\t\t\tif(msg.sender!=owner) throw;\r\n\t\t\trequiredGas=_requiredGas;\r\n\t\t}\r\n\t\t\r\n\t\tfunction() {\r\n\t\t\tif(msg.value>0) {\r\n\t\t\t\towner.send(msg.value);\r\n\t\t\t}\r\n\t\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"greenToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"assignFreeReadings\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_greyToken\",\"type\":\"address\"}],\"name\":\"setGreyToken\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeReadings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"plz\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsBetweenReadings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"commitReading\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReading\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"zip\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setReadingDelay\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"greyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestReading\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"zip\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reading\",\"type\":\"uint256\"}],\"name\":\"oracalizeReading\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintGrey\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredGas\",\"type\":\"uint256\"}],\"name\":\"setOracleGas\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_greenToken\",\"type\":\"address\"}],\"name\":\"setGreenToken\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintGreen\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plz\",\"type\":\"string\"}],\"name\":\"setPlz\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedGreen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedGrey\",\"type\":\"event\"}]","ContractName":"GSI","CompilerVersion":"v0.3.4-2016-06-08-d593166","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}