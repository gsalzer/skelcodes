{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\ncontract TheEthereumLottery {\r\n /*\r\n    Brief introduction:\r\n    \r\n    To play you need to pick 4 numbers (range 0-255) and provide them sorted to Play() function.\r\n    To win you need to hit at least 1 number out of 4 WinningNums which will be announced once every week\r\n    (or more often if the lottery will become more popular). If you hit all of the 4 numbers you will win\r\n    about 10 million times more than you payed for lottery ticket. The exact values are provided as GuessXOutOf4\r\n    entries in Ledger - notice that they are provided in Wei, not Ether (10^18 Wei = Ether).\r\n    Use Withdraw() function to pay out.\r\n\r\n\r\n    The advantage of TheEthereumLottery is that it uses secret random value which only owner knows (called TheRand).\r\n    A hash of TheRand (called OpeningHash) is announced at the beginning of every draw (lets say draw number N) - \r\n    at this moment ticket price and the values of GuessXOutOf4 are publicly available and can not be changed.\r\n    When draw N+1 is announced in a block X, a hash of block X-1 is assigned to ClosingHash field of draw N.\r\n    After few minutes, owner announces TheRand which satisfy following expression: sha3(TheRand)==drawN.OpeningHash\r\n    then Rand32B=sha3(TheRand, ClosingHash) is calculated an treated as a source for WinningNumbers, \r\n    also ClosingHash is changed to Rand32B as it might be more interesting for someone watching lottery ledger\r\n    to see that number instead of hash of some block. \r\n\r\n    This approach (1) unable players to cheat, as as long as no one knows TheRand, \r\n    no one can predict what WinningNums will be, (2) unable owner to influence the WinningNums (in order to\r\n    reduce average amount won) because OpeningHash=sha3(TheRand) was public before bets were made, and (3) reduces \r\n    owner capability of playing it's own lottery and making winning bets to very short window of one\r\n    exactly the same block as new draw was announced - so anyone, with big probability, can think that if winning\r\n    bet was made in this particular block - probably it was the owner, especially if no more bets were made \r\n    at this block (which is very likely).\r\n\r\n    Withdraw is possible only after TheRand was announced, if the owner will not announce TheRand in 2 weeks,\r\n    players can use Refund function in order to refund their ETH used to make bet. \r\n    That moment is called ExpirationTime on contract Ledger (which is visible from JSON interface).\r\n */\r\n/*\r\n  Name:\r\n  TheEthereumLottery\r\n\r\n  JSON interface:\r\n\r\n[{\"constant\":true,\"inputs\":[],\"name\":\"Announcements\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IndexOfCurrentDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ledger\",\"outputs\":[{\"name\":\"WinningNum1\",\"type\":\"uint8\"},{\"name\":\"WinningNum2\",\"type\":\"uint8\"},{\"name\":\"WinningNum3\",\"type\":\"uint8\"},{\"name\":\"WinningNum4\",\"type\":\"uint8\"},{\"name\":\"ClosingHash\",\"type\":\"bytes32\"},{\"name\":\"OpeningHash\",\"type\":\"bytes32\"},{\"name\":\"Guess4OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess3OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess2OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess1OutOf4\",\"type\":\"uint256\"},{\"name\":\"PriceOfTicket\",\"type\":\"uint256\"},{\"name\":\"ExpirationTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TheRand\",\"type\":\"bytes32\"}],\"name\":\"CheckHash\",\"outputs\":[{\"name\":\"OpeningHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint8\"},{\"name\":\"PlayerAddress\",\"type\":\"address\"}],\"name\":\"MyBet\",\"outputs\":[{\"name\":\"Nums\",\"type\":\"uint8[4]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referral_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral_ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyNum1\",\"type\":\"uint8\"},{\"name\":\"MyNum2\",\"type\":\"uint8\"},{\"name\":\"MyNum3\",\"type\":\"uint8\"},{\"name\":\"MyNum4\",\"type\":\"uint8\"}],\"name\":\"Play\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint32\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint32\"}],\"name\":\"Refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyNum1\",\"type\":\"uint8\"},{\"name\":\"MyNum2\",\"type\":\"uint8\"},{\"name\":\"MyNum3\",\"type\":\"uint8\"},{\"name\":\"MyNum4\",\"type\":\"uint8\"},{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"PlayReferred\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw_referral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Deposit_referral\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IndexOfDraw\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"OpeningHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"PriceOfTicketInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WeiToWin\",\"type\":\"uint256\"}],\"name\":\"NewDrawReadyToPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IndexOfDraw\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"WinningNumber1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"TheRand\",\"type\":\"bytes32\"}],\"name\":\"DrawReadyToPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Wei\",\"type\":\"uint256\"}],\"name\":\"PlayerWon\",\"type\":\"event\"}]\r\n\r\n*/\r\n//constructor\r\nfunction TheEthereumLottery()\r\n{\r\n  owner=msg.sender;\r\n  ledger.length=0;\r\n  IndexOfCurrentDraw=0;\r\n  referral_fee=90;\r\n}\r\nmodifier OnlyOwner()\r\n{ // Modifier\r\n  if (msg.sender != owner) throw;\r\n  _;\r\n}\r\naddress owner;\r\nstring public Announcements;//just additional feature\r\nuint public IndexOfCurrentDraw;//starting from 0\r\nuint8 public referral_fee;\r\nmapping(address=>uint256) public referral_ledger;\r\nstruct bet_t {\r\n  address referral;\r\n  uint8[4] Nums;\r\n  bool can_withdraw;//default==false\r\n}\r\nstruct ledger_t {\r\n  uint8 WinningNum1;\r\n  uint8 WinningNum2;\r\n  uint8 WinningNum3;\r\n  uint8 WinningNum4;\r\n  bytes32 ClosingHash;\r\n  bytes32 OpeningHash;\r\n  mapping(address=>bet_t) bets;\r\n  uint Guess4OutOf4;\r\n  uint Guess3OutOf4;\r\n  uint Guess2OutOf4;\r\n  uint Guess1OutOf4;\r\n  uint PriceOfTicket;\r\n  uint ExpirationTime;//for eventual refunds only, ~2 weeks after draw announced\r\n}\r\nledger_t[] public ledger;\r\n \r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@ Here begins what probably you want to analyze @@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nfunction next_draw(bytes32 new_hash,\r\n\t  uint priceofticket,\r\n\t  uint guess4outof4,\r\n\t  uint guess3outof4,\r\n\t  uint guess2outof4,\r\n\t  uint guess1outof4\r\n\t  )\r\nOnlyOwner\r\n{\r\n  ledger.length++;\r\n  ledger[IndexOfCurrentDraw].ClosingHash =\r\n    //sha3(block.blockhash(block.number-1));               //this, or\r\n    //sha3(block.blockhash(block.number-1),block.coinbase);//this adds complexity, but safety remains the same\r\n    block.blockhash(block.number-1);//adds noise to the previous draw\r\n  //if you are just checking how it works, just pass the comment below, and come back when you finish analyzing\r\n  //the contract - it explains how the owner could win this lottery \r\n  //if the owner was about to cheat, he has to make a bet, and then use this f-n. both in a single block.\r\n  //its because if you know TheRand and blockhash of a last block before new draw then you can determine the numbers\r\n  //achieving it would be actually simple, another contract is needed which would get signed owner tx of this f-n call\r\n  //and just calculate what the numbers would be (the previous block hash is available), play with that nums,\r\n  //and then run this f-n. It is guaranteed that both actions are made in a single block, as it is a single call\r\n  //so if someone have made winning bet in exactly the same block as announcement of next draw,\r\n  //then you can be suspicious that it was the owner\r\n  //also assuming this scenario, TheRand needs to be present on that contract - so if transaction is not mined\r\n  //immediately - it makes a window for anyone to do the same and win.\r\n  IndexOfCurrentDraw=ledger.length-1;\r\n  ledger[IndexOfCurrentDraw].OpeningHash = new_hash;\r\n  ledger[IndexOfCurrentDraw].Guess4OutOf4=guess4outof4;\r\n  ledger[IndexOfCurrentDraw].Guess3OutOf4=guess3outof4;\r\n  ledger[IndexOfCurrentDraw].Guess2OutOf4=guess2outof4;\r\n  ledger[IndexOfCurrentDraw].Guess1OutOf4=guess1outof4;\r\n  ledger[IndexOfCurrentDraw].PriceOfTicket=priceofticket;\r\n  ledger[IndexOfCurrentDraw].ExpirationTime=now + 2 weeks;//You can refund after ExpirationTime if owner will not announce TheRand satisfying TheHash\r\n  NewDrawReadyToPlay(IndexOfCurrentDraw, new_hash, priceofticket, guess4outof4);//event\r\n}\r\nfunction announce_therand(uint32 index,\r\n\t\t\t  bytes32 the_rand\r\n\t\t\t  )\r\nOnlyOwner\r\n{\r\n  if(sha3(the_rand)\r\n     !=\r\n     ledger[index].OpeningHash)\r\n    throw;//this implies that if Numbers are present, broadcasted TheRand has to satisfy TheHash\r\n\r\n\r\n  bytes32 combined_rand=sha3(the_rand, ledger[index].ClosingHash);//from this number we'll calculate WinningNums\r\n  //usually the last 4 Bytes will be the WinningNumbers, but it is not always true, as some Byte could\r\n  //be the same, then we need to take one more Byte from combined_rand and so on\r\n\r\n  ledger[index].ClosingHash = combined_rand;//changes the closing blockhash to seed for WinningNums\r\n    //this line is useless from the perspective of lottery\r\n    //but maybe some of the players will find it interesting that something\r\n    //which is connected to the WinningNums is present in a ledger\r\n\r\n\r\n  //the algorithm of assigning an int from some range to single bet takes too much code\r\n  uint8[4] memory Numbers;//relying on that combined_rand should be random - lets pick Nums into this array \r\n\r\n  uint8 i=0;//i = how many numbers are picked\r\n  while(i<4)\r\n    {\r\n      Numbers[i]=uint8(combined_rand);//same as '=combined_rand%256;'\r\n      combined_rand>>=8;//same as combined_rand/=256;\r\n      for(uint j=0;j<i;++j)//is newly picked val in a set?\r\n\tif(Numbers[j]==Numbers[i]) {--i;break;}//yes, break back to while loop and look for another Num[i]\r\n      ++i;\r\n    }\r\n  //probability that in 32 random bytes there was only 3 or less different ones ~=2.65e-55\r\n  //it's like winning this lottery 2.16*10^46 times in a row\r\n  //p.s. there are 174792640 possible combinations of picking 4 numbers out of 256\r\n\r\n  //now we have to sort the values\r\n  for(uint8 n=4;n>1;n--)//bubble sort\r\n    {\r\n      bool sorted=true; \r\n      for(uint8 k=0;k<n-1;++k)\r\n\tif(Numbers[k] > Numbers[k+1])//then mark array as not sorted & swap\r\n\t  {\r\n\t    sorted=false;\r\n\t    (Numbers[k], Numbers[k+1])=(Numbers[k+1], Numbers[k]);\r\n\t  }\r\n      if(sorted) break;//breaks as soon as the array is sorted\r\n    }\r\n\r\n  \r\n  ledger[index].WinningNum1 = Numbers[0];\r\n  ledger[index].WinningNum2 = Numbers[1];\r\n  ledger[index].WinningNum3 = Numbers[2];\r\n  ledger[index].WinningNum4 = Numbers[3];\r\n  \r\n  DrawReadyToPayout(index,\r\n\t\t    Numbers[0],Numbers[1],Numbers[2],Numbers[3],\r\n\t\t    the_rand);//event\r\n}\r\n\r\nfunction PlayReferred(uint8 MyNum1,\r\n\t\t      uint8 MyNum2,\r\n\t\t      uint8 MyNum3,\r\n\t\t      uint8 MyNum4,\r\n\t\t      address ref\r\n\t\t      )\r\npayable\r\n{\r\n  if(msg.value != ledger[IndexOfCurrentDraw].PriceOfTicket ||//to play you need to pay \r\n     ledger[IndexOfCurrentDraw].bets[msg.sender].Nums[3] != 0)//if your bet already exist\r\n    throw;\r\n\r\n  //if numbers are not sorted\r\n  if(MyNum1 >= MyNum2 ||\r\n     MyNum2 >= MyNum3 ||\r\n     MyNum3 >= MyNum4\r\n     )\r\n    throw;//because you should sort the values yourself\r\n  if(ref!=0)//when there is no refferal, function is cheaper for ~20k gas\r\n    ledger[IndexOfCurrentDraw].bets[msg.sender].referral=ref;\r\n  ledger[IndexOfCurrentDraw].bets[msg.sender].Nums[0]=MyNum1;\r\n  ledger[IndexOfCurrentDraw].bets[msg.sender].Nums[1]=MyNum2;\r\n  ledger[IndexOfCurrentDraw].bets[msg.sender].Nums[2]=MyNum3;\r\n  ledger[IndexOfCurrentDraw].bets[msg.sender].Nums[3]=MyNum4;\r\n  ledger[IndexOfCurrentDraw].bets[msg.sender].can_withdraw=true;\r\n}\r\n// Play wrapper:\r\nfunction Play(uint8 MyNum1,\r\n\t      uint8 MyNum2,\r\n\t      uint8 MyNum3,\r\n\t      uint8 MyNum4\r\n\t      )\r\n{\r\n  PlayReferred(MyNum1,\r\n\t       MyNum2,\r\n\t       MyNum3,\r\n\t       MyNum4,\r\n\t       0//no referral\r\n\t       );\r\n}\r\nfunction Deposit_referral()//this function is not mandatory to become referral\r\n  payable//might be used to not withdraw all the funds at once or to invest\r\n{//probably needed only at the beginnings\r\n  referral_ledger[msg.sender]+=msg.value;\r\n}\r\nfunction Withdraw_referral()\r\n{\r\n  uint val=referral_ledger[msg.sender];\r\n  referral_ledger[msg.sender]=0;\r\n  if(!msg.sender.send(val)) //payment\r\n    throw;\r\n}\r\nfunction set_referral_fee(uint8 new_fee)\r\nOnlyOwner\r\n{\r\n  if(new_fee<50 || new_fee>100)\r\n    throw;//referrals have at least 50% of the income\r\n  referral_fee=new_fee;\r\n}\r\nfunction Withdraw(uint32 DrawIndex)\r\n{\r\n  //if(msg.value!=0) //compiler deals with that, as there is no payable modifier in this f-n\r\n  //  throw;//this function is free\r\n\r\n  if(ledger[DrawIndex].bets[msg.sender].can_withdraw==false)\r\n    throw;//throw if player didnt played\r\n\r\n  //by default, every non existing value is equal to 0\r\n  //so if there was no announcement WinningNums are zeros\r\n  if(ledger[DrawIndex].WinningNum4 == 0)//the least possible value == 3\r\n    throw;//this condition checks if the numbers were announced\r\n  //see announce_therand f-n to see why this check is enough\r\n  \r\n  uint8 hits=0;\r\n  uint8 i=0;\r\n  uint8 j=0;\r\n  uint8[4] memory playernum=ledger[DrawIndex].bets[msg.sender].Nums;\r\n  uint8[4] memory nums;\r\n  (nums[0],nums[1],nums[2],nums[3])=\r\n    (ledger[DrawIndex].WinningNum1,\r\n     ledger[DrawIndex].WinningNum2,\r\n     ledger[DrawIndex].WinningNum3,\r\n     ledger[DrawIndex].WinningNum4);\r\n  //data ready\r\n  \r\n  while(i<4)//count player hits\r\n    {//both arrays are sorted\r\n      while(j<4 && playernum[j] < nums[i]) ++j;\r\n      if(j==4) break;//nothing more to check - break loop here\r\n      if(playernum[j] == nums[i]) ++hits;\r\n      ++i;\r\n    }\r\n  if(hits==0) throw;\r\n  uint256 win=0;\r\n  if(hits==1) win=ledger[DrawIndex].Guess1OutOf4;\r\n  if(hits==2) win=ledger[DrawIndex].Guess2OutOf4;\r\n  if(hits==3) win=ledger[DrawIndex].Guess3OutOf4;\r\n  if(hits==4) win=ledger[DrawIndex].Guess4OutOf4;\r\n    \r\n  ledger[DrawIndex].bets[msg.sender].can_withdraw=false;\r\n  if(!msg.sender.send(win)) //payment\r\n    throw;\r\n\r\n  if(ledger[DrawIndex].bets[msg.sender].referral==0)//it was not referred bet\r\n    referral_ledger[owner]+=win/100;\r\n  else\r\n    {\r\n      referral_ledger[ledger[DrawIndex].bets[msg.sender].referral]+=\r\n\twin/10000*referral_fee;//(win/100)*(referral_fee/100);\r\n      referral_ledger[owner]+=\r\n\twin/10000*(100-referral_fee);//(win/100)*((100-referral_fee)/100);\r\n    }\r\n\r\n  \r\n  PlayerWon(win);//event\r\n}\r\nfunction Refund(uint32 DrawIndex)\r\n{\r\n  //if(msg.value!=0) //compiler deals with that, as there is no payable modifier in this f-n\r\n  //  throw;//this function is free\r\n\r\n  if(ledger[DrawIndex].WinningNum4 != 0)//if TheRand was announced, WinningNum4 >= 3\r\n    throw; //no refund if there was a valid announce\r\n\r\n  if(now < ledger[DrawIndex].ExpirationTime)\r\n    throw;//no refund while there is still TIME to announce TheRand\r\n  \r\n \r\n  if(ledger[DrawIndex].bets[msg.sender].can_withdraw==false)\r\n    throw;//throw if player didnt played or already refunded\r\n  \r\n  ledger[DrawIndex].bets[msg.sender].can_withdraw=false;\r\n  if(!msg.sender.send(ledger[DrawIndex].PriceOfTicket)) //refund\r\n    throw;\r\n}\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@ Here ends what probably you wanted to analyze @@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\nfunction CheckHash(bytes32 TheRand)\r\n  constant returns(bytes32 OpeningHash)\r\n{\r\n  return sha3(TheRand);\r\n}\r\nfunction MyBet(uint8 DrawIndex, address PlayerAddress)\r\n  constant returns (uint8[4] Nums)\r\n{//check your nums\r\n  return ledger[DrawIndex].bets[PlayerAddress].Nums;\r\n}\r\nfunction announce(string MSG)\r\n  OnlyOwner\r\n{\r\n  Announcements=MSG;\r\n}\r\nevent NewDrawReadyToPlay(uint indexed IndexOfDraw,\r\n\t\t\t bytes32 OpeningHash,\r\n\t\t\t uint PriceOfTicketInWei,\r\n\t\t\t uint WeiToWin);\r\nevent DrawReadyToPayout(uint32 indexed IndexOfDraw,\r\n\t\t\tuint8 WinningNumber1,\r\n\t\t\tuint8 WinningNumber2,\r\n\t\t\tuint8 WinningNumber3,\r\n\t\t\tuint8 WinningNumber4,\r\n\t\t\tbytes32 TheRand);\r\nevent PlayerWon(uint Wei);\r\n\r\n}//contract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ledger\",\"outputs\":[{\"name\":\"WinningNum1\",\"type\":\"uint8\"},{\"name\":\"WinningNum2\",\"type\":\"uint8\"},{\"name\":\"WinningNum3\",\"type\":\"uint8\"},{\"name\":\"WinningNum4\",\"type\":\"uint8\"},{\"name\":\"ClosingHash\",\"type\":\"bytes32\"},{\"name\":\"OpeningHash\",\"type\":\"bytes32\"},{\"name\":\"Guess4OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess3OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess2OutOf4\",\"type\":\"uint256\"},{\"name\":\"Guess1OutOf4\",\"type\":\"uint256\"},{\"name\":\"PriceOfTicket\",\"type\":\"uint256\"},{\"name\":\"ExpirationTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TheRand\",\"type\":\"bytes32\"}],\"name\":\"CheckHash\",\"outputs\":[{\"name\":\"OpeningHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyNum1\",\"type\":\"uint8\"},{\"name\":\"MyNum2\",\"type\":\"uint8\"},{\"name\":\"MyNum3\",\"type\":\"uint8\"},{\"name\":\"MyNum4\",\"type\":\"uint8\"}],\"name\":\"Play\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral_ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint32\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Announcements\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_hash\",\"type\":\"bytes32\"},{\"name\":\"priceofticket\",\"type\":\"uint256\"},{\"name\":\"guess4outof4\",\"type\":\"uint256\"},{\"name\":\"guess3outof4\",\"type\":\"uint256\"},{\"name\":\"guess2outof4\",\"type\":\"uint256\"},{\"name\":\"guess1outof4\",\"type\":\"uint256\"}],\"name\":\"next_draw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint32\"}],\"name\":\"Refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw_referral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_fee\",\"type\":\"uint8\"}],\"name\":\"set_referral_fee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Deposit_referral\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IndexOfCurrentDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DrawIndex\",\"type\":\"uint8\"},{\"name\":\"PlayerAddress\",\"type\":\"address\"}],\"name\":\"MyBet\",\"outputs\":[{\"name\":\"Nums\",\"type\":\"uint8[4]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referral_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyNum1\",\"type\":\"uint8\"},{\"name\":\"MyNum2\",\"type\":\"uint8\"},{\"name\":\"MyNum3\",\"type\":\"uint8\"},{\"name\":\"MyNum4\",\"type\":\"uint8\"},{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"PlayReferred\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MSG\",\"type\":\"string\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint32\"},{\"name\":\"the_rand\",\"type\":\"bytes32\"}],\"name\":\"announce_therand\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IndexOfDraw\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"OpeningHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"PriceOfTicketInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WeiToWin\",\"type\":\"uint256\"}],\"name\":\"NewDrawReadyToPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IndexOfDraw\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"WinningNumber1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"WinningNumber4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"TheRand\",\"type\":\"bytes32\"}],\"name\":\"DrawReadyToPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Wei\",\"type\":\"uint256\"}],\"name\":\"PlayerWon\",\"type\":\"event\"}]","ContractName":"TheEthereumLottery","CompilerVersion":"v0.4.7+commit.822622cf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69785532b459b37f3bdf5c888a7ff54e1c6f65c68d78616b08cbfa3668049076"}]}