{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract Token {\r\n\tfunction balanceOf(address user) constant returns (uint256 balance);\r\n\tfunction transfer(address receiver, uint amount) returns(bool);\r\n}\r\n\r\ncontract BonusDealer {\r\n    address public owner;\r\n    Token public nexium;\r\n    uint public totalDistributed;\r\n    address[] public paidAddress;\r\n    mapping(address => uint) public paid;\r\n    \r\n    struct Bonus {\r\n        uint bonusInNxc;\r\n        uint step;\r\n    }\r\n    \r\n    Bonus[] bonuses;\r\n    \r\n    event Paid(address);\r\n    \r\n    uint nxcBought;\r\n    \r\n    function BonusDealer(){\r\n        nexium = Token(0x45e42D659D9f9466cD5DF622506033145a9b89Bc);\r\n        owner = msg.sender;\r\n        totalDistributed = 0;\r\n        bonuses.length++;\r\n        bonuses[0] = Bonus(0, 0);\r\n        bonuses.length++;\r\n        bonuses[1] = Bonus(80*1000, 4000*1000);\r\n        bonuses.length++;\r\n        bonuses[2] = Bonus(640*1000, 16000*1000);\r\n        bonuses.length++;\r\n        bonuses[3] = Bonus(3000*1000, 50000*1000);\r\n        bonuses.length++;\r\n        bonuses[4] = Bonus(8000*1000, 100000*1000);\r\n        bonuses.length++;\r\n        bonuses[5] = Bonus(40000*1000, 400000*1000);\r\n        bonuses.length++;\r\n        bonuses[6] = Bonus(78000*1000, 650000*1000);\r\n        bonuses.length++;\r\n        bonuses[7] = Bonus(140000*1000, 1000000*1000);\r\n        bonuses.length++;\r\n        bonuses[8] = Bonus(272000*1000, 1700000*1000);\r\n    }\r\n    \r\n    function bonusCalculation(uint _nxcBought) returns(uint){\r\n        nxcBought = _nxcBought;\r\n        uint totalToPay = 0;\r\n        uint toAdd = 1;\r\n        while (toAdd != 0){\r\n            toAdd = recursiveCalculation();\r\n            totalToPay += toAdd;\r\n        }\r\n        \r\n        return totalToPay;\r\n    }\r\n    \r\n    function recursiveCalculation() internal returns(uint){\r\n        var i = 8;\r\n        while (i != 0 && bonuses[i].step > nxcBought) i--;\r\n        nxcBought -= bonuses[i].step;\r\n        return bonuses[i].bonusInNxc;\r\n    }\r\n    \r\n    function payDiff(address backer, uint totalNxcBought){\r\n        if (msg.sender != owner) throw;\r\n        if (paid[backer] == 0) paidAddress[paidAddress.length++] = msg.sender;\r\n        uint totalToPay = bonusCalculation(totalNxcBought);\r\n        if(totalToPay <= paid[backer]) throw;\r\n        totalToPay -= paid[backer];\r\n        if (!nexium.transfer(backer, totalToPay)) throw;\r\n        paid[backer] += totalToPay;\r\n        totalDistributed += totalToPay;\r\n        Paid(backer);\r\n    }\r\n    \r\n    function withdrawNexiums(address a){\r\n        if (msg.sender != owner) throw;\r\n        nexium.transfer(a, nexium.balanceOf(this));\r\n    }\r\n    \r\n    function(){\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_nxcBought\",\"type\":\"uint256\"}],\"name\":\"bonusCalculation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexium\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"backer\",\"type\":\"address\"},{\"name\":\"totalNxcBought\",\"type\":\"uint256\"}],\"name\":\"payDiff\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"withdrawNexiums\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"BonusDealer","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}