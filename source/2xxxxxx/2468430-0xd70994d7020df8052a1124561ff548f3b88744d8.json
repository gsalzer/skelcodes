{"status":"1","message":"OK","result":[{"SourceCode":"//! DappReg is a Dapp Registry\r\n//! By Parity Team (Ethcore), 2016.\r\n//! Released under the Apache Licence 2.\r\n\r\npragma solidity ^0.4.1;\r\n\r\ncontract Owned {\r\n  event NewOwner(address indexed old, address indexed current);\r\n\r\n  modifier only_owner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  address public owner = msg.sender;\r\n\r\n  function setOwner(address _new) only_owner {\r\n    NewOwner(owner, _new);\r\n    owner = _new;\r\n  }\r\n}\r\n\r\ncontract DappReg is Owned {\r\n  // id       - shared to be the same accross all contracts for a specific dapp (including GithuHint for the repo)\r\n  // owner    - that guy\r\n  // meta     - meta information for the dapp\r\n  struct Dapp {\r\n    bytes32 id;\r\n    address owner;\r\n    mapping (bytes32 => bytes32) meta;\r\n  }\r\n\r\n  modifier when_fee_paid {\r\n    if (msg.value < fee) throw;\r\n    _;\r\n  }\r\n\r\n  modifier only_dapp_owner(bytes32 _id) {\r\n    if (dapps[_id].owner != msg.sender) throw;\r\n    _;\r\n  }\r\n\r\n  modifier either_owner(bytes32 _id) {\r\n    if (dapps[_id].owner != msg.sender && owner != msg.sender) throw;\r\n    _;\r\n  }\r\n\r\n  modifier when_id_free(bytes32 _id) {\r\n    if (dapps[_id].id != 0) throw;\r\n    _;\r\n  }\r\n\r\n  event MetaChanged(bytes32 indexed id, bytes32 indexed key, bytes32 value);\r\n  event OwnerChanged(bytes32 indexed id, address indexed owner);\r\n  event Registered(bytes32 indexed id, address indexed owner);\r\n  event Unregistered(bytes32 indexed id);\r\n\r\n  mapping (bytes32 => Dapp) dapps;\r\n  bytes32[] ids;\r\n\r\n  uint public fee = 1 ether;\r\n\r\n  // returns the count of the dapps we have\r\n  function count() constant returns (uint) {\r\n    return ids.length;\r\n  }\r\n\r\n  // a dapp from the list\r\n  function at(uint _index) constant returns (bytes32 id, address owner) {\r\n    Dapp d = dapps[ids[_index]];\r\n    id = d.id;\r\n    owner = d.owner;\r\n  }\r\n\r\n  // get with the id\r\n  function get(bytes32 _id) constant returns (bytes32 id, address owner) {\r\n    Dapp d = dapps[_id];\r\n    id = d.id;\r\n    owner = d.owner;\r\n  }\r\n\r\n  // add apps\r\n  function register(bytes32 _id) payable when_fee_paid when_id_free(_id) {\r\n    ids.push(_id);\r\n    dapps[_id] = Dapp(_id, msg.sender);\r\n    Registered(_id, msg.sender);\r\n  }\r\n\r\n  // remove apps\r\n  function unregister(bytes32 _id) either_owner(_id) {\r\n    delete dapps[_id];\r\n    Unregistered(_id);\r\n  }\r\n\r\n  // get meta information\r\n  function meta(bytes32 _id, bytes32 _key) constant returns (bytes32) {\r\n    return dapps[_id].meta[_key];\r\n  }\r\n\r\n  // set meta information\r\n  function setMeta(bytes32 _id, bytes32 _key, bytes32 _value) only_dapp_owner(_id) {\r\n    dapps[_id].meta[_key] = _value;\r\n    MetaChanged(_id, _key, _value);\r\n  }\r\n\r\n  // set the dapp owner\r\n  function setDappOwner(bytes32 _id, address _owner) only_dapp_owner(_id) {\r\n    dapps[_id].owner = _owner;\r\n    OwnerChanged(_id, _owner);\r\n  }\r\n\r\n  // set the registration fee\r\n  function setFee(uint _fee) only_owner {\r\n    fee = _fee;\r\n  }\r\n\r\n  // retrieve funds paid\r\n  function drain() only_owner {\r\n    if (!msg.sender.send(this.balance)) {\r\n      throw;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"meta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMeta\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setDappOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"MetaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"DappReg","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}