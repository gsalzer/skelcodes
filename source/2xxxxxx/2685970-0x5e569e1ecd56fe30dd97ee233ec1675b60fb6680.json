{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n/**\r\n * @title Project Kudos\r\n *\r\n * Events voting system of the Virtual Accelerator.\r\n * Includes the voting for both judges and fans.\r\n *\r\n */\r\ncontract ProjectKudos {\r\n\r\n    // votes limit for judge\r\n    uint KUDOS_LIMIT_JUDGE = 1000;\r\n\r\n    // votes limit for regular user\r\n    uint KUDOS_LIMIT_USER  = 10;\r\n\r\n    // additional votes given for social account proof\r\n    uint SOCIAL_PROOF_KUDOS = 100;\r\n\r\n    // Grant Reason\r\n    uint GRANT_REASON_FACEBOOK = 0;\r\n    uint GRANT_REASON_TWITTER = 1;\r\n\r\n    // keeps project votes data\r\n    struct ProjectInfo {\r\n        mapping(address => uint) kudosByUser;\r\n        uint kudosTotal;\r\n    }\r\n\r\n    // keeps user votes data\r\n    struct UserInfo {\r\n        uint kudosLimit;\r\n        uint kudosGiven;\r\n        bool isJudge;\r\n        mapping(uint => bool) grant;\r\n    }\r\n\r\n    // keeps links between user's votes\r\n    // and projects he voted for\r\n    struct UserIndex {\r\n        bytes32[] projects;\r\n        uint[] kudos;\r\n        mapping(bytes32 => uint) kudosIdx;\r\n    }\r\n\r\n    // keeps time frames for vote period\r\n    struct VotePeriod {\r\n        uint start;\r\n        uint end;\r\n    }\r\n\r\n    // contract creator's address\r\n    address owner;\r\n\r\n    // vote period\r\n    VotePeriod votePeriod;\r\n\r\n    // user votes mapping\r\n    mapping(address => UserInfo) users;\r\n\r\n    // user index,\r\n    // helps to get votes given by one user for every project\r\n    mapping(address => UserIndex) usersIndex;\r\n\r\n    // project votes mapping\r\n    mapping(bytes32 => ProjectInfo) projects;\r\n\r\n    // emitted when vote is done\r\n    event Vote(\r\n        // address of voter\r\n        address indexed voter,\r\n        // sha3 of project code\r\n        bytes32 indexed projectCode,\r\n        // votes given\r\n        uint indexed count\r\n    );\r\n\r\n    /**\r\n     * @dev Contract's constructor.\r\n     * Stores contract's owner and sets up vote period\r\n     */\r\n    function ProjectKudos() {\r\n\r\n        owner = msg.sender;\r\n\r\n        votePeriod = VotePeriod(\r\n            1479996000,     // GMT: 24-Nov-2016 14:00, Voting starts, 1st week passed\r\n            1482415200      // GMT: 22-Dec-2016 14:00, Voting ends, Hackathon ends\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Registers voter to the event.\r\n     * Executable only by contract's owner.\r\n     *\r\n     * @param userAddress address of the user to register\r\n     * @param isJudge should be true if user is judge, false otherwise\r\n     */\r\n    function register(address userAddress, bool isJudge) onlyOwner {\r\n\r\n        UserInfo user = users[userAddress];\r\n\r\n        if (user.kudosLimit > 0) throw;\r\n\r\n        if (isJudge)\r\n            user.kudosLimit = KUDOS_LIMIT_JUDGE;\r\n        else\r\n            user.kudosLimit = KUDOS_LIMIT_USER;\r\n\r\n        user.isJudge = isJudge;\r\n\r\n        users[userAddress] = user;\r\n    }\r\n\r\n    /**\r\n     *  @dev Gives votes to the project.\r\n     *  Can only be executed within vote period.\r\n     *  User signed the Tx becomes votes giver.\r\n     *\r\n     *  @param projectCode code of the project, must be less than or equal to 32 bytes\r\n     *  @param kudos - votes to be given\r\n     */\r\n    function giveKudos(bytes32 projectCode, uint kudos) {\r\n\r\n        // throw if called not during the vote period\r\n        if (now < votePeriod.start) throw;\r\n        if (now >= votePeriod.end) throw;        \r\n        \r\n        UserInfo giver = users[msg.sender];\r\n\r\n        if (giver.kudosGiven + kudos > giver.kudosLimit) throw;\r\n\r\n        ProjectInfo project = projects[projectCode];\r\n\r\n        giver.kudosGiven += kudos;\r\n        project.kudosTotal += kudos;\r\n        project.kudosByUser[msg.sender] += kudos;\r\n\r\n        // save index of user voting history\r\n        updateUsersIndex(projectCode, project.kudosByUser[msg.sender]);\r\n\r\n        Vote(msg.sender, projectCode, kudos);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants extra kudos for identity proof.\r\n     *\r\n     * @param userToGrant address of user to grant additional\r\n     * votes for social proof\r\n     * \r\n     * @param reason granting reason,  0 - Facebook, 1 - Twitter\r\n     */         \r\n    function grantKudos(address userToGrant, uint reason) onlyOwner {\r\n\r\n        UserInfo user = users[userToGrant];\r\n\r\n        if (user.kudosLimit == 0) throw; //probably user does not exist then\r\n\r\n        if (reason != GRANT_REASON_FACEBOOK &&        // Facebook\r\n            reason != GRANT_REASON_TWITTER) throw;    // Twitter\r\n\r\n        // if user is judge his identity is known\r\n        // not reasonble to grant more kudos for social\r\n        // proof.\r\n        if (user.isJudge) throw;\r\n\r\n        // if not granted for that reason yet\r\n        if (user.grant[reason]) throw;\r\n\r\n        // grant 100 votes\r\n        user.kudosLimit += SOCIAL_PROOF_KUDOS;\r\n        \r\n        user.grant[reason] = true;\r\n    }\r\n\r\n\r\n    // ********************* //\r\n    // *   Constant Calls  * //\r\n    // ********************* //\r\n\r\n    /**\r\n     * @dev Returns total votes given to the project\r\n     *\r\n     * @param projectCode project's code\r\n     *\r\n     * @return number of give votes\r\n     */\r\n    function getProjectKudos(bytes32 projectCode) constant returns(uint) {\r\n        ProjectInfo project = projects[projectCode];\r\n        return project.kudosTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array of votes given to the project\r\n     * corresponding to array of users passed in function call\r\n     *\r\n     * @param projectCode project's code\r\n     * @param users array of user addresses\r\n     *\r\n     * @return array of votes given by passed users\r\n     */\r\n    function getProjectKudosByUsers(bytes32 projectCode, address[] users) constant returns(uint[]) {\r\n        ProjectInfo project = projects[projectCode];\r\n        mapping(address => uint) kudosByUser = project.kudosByUser;\r\n        uint[] memory userKudos = new uint[](users.length);\r\n        for (uint i = 0; i < users.length; i++) {\r\n            userKudos[i] = kudosByUser[users[i]];\r\n       }\r\n\r\n       return userKudos;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns votes given by specified user\r\n     * to the list of projects ever voted by that user\r\n     *\r\n     * @param giver user's address\r\n     * @return projects array of project codes represented by bytes32 array\r\n     * @return kudos array of votes given by user,\r\n     *         index of vote corresponds to index of project from projects array\r\n     */\r\n    function getKudosPerProject(address giver) constant returns (bytes32[] projects, uint[] kudos) {\r\n        UserIndex idx = usersIndex[giver];\r\n        projects = idx.projects;\r\n        kudos = idx.kudos;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns votes allowed to be given by user\r\n     *\r\n     * @param addr user's address\r\n     * @return number of votes left\r\n     */\r\n    function getKudosLeft(address addr) constant returns(uint) {\r\n        UserInfo user = users[addr];\r\n        return user.kudosLimit - user.kudosGiven;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns votes given by user\r\n     *\r\n     * @param addr user's address\r\n     * @return number of votes given\r\n     */\r\n    function getKudosGiven(address addr) constant returns(uint) {\r\n        UserInfo user = users[addr];\r\n        return user.kudosGiven;\r\n    }\r\n\r\n\r\n    // ********************* //\r\n    // *   Private Calls   * //\r\n    // ********************* //\r\n\r\n    /**\r\n     * @dev Private function. Updates users index\r\n     *\r\n     * @param code project code represented by bytes32 array\r\n     * @param kudos votes total given to the project by sender\r\n     */\r\n    function updateUsersIndex(bytes32 code, uint kudos) private {\r\n\r\n        UserIndex idx = usersIndex[msg.sender];\r\n        uint i = idx.kudosIdx[code];\r\n\r\n        // add new entry to index\r\n        if (i == 0) {\r\n            i = idx.projects.length + 1;\r\n            idx.projects.length += 1;\r\n            idx.kudos.length += 1;\r\n            idx.projects[i - 1] = code;\r\n            idx.kudosIdx[code] = i;\r\n        }\r\n\r\n        idx.kudos[i - 1] = kudos;\r\n    }\r\n\r\n\r\n    // ********************* //\r\n    // *     Modifiers     * //\r\n    // ********************* //\r\n\r\n    /**\r\n     * @dev Throws if called not by contract's owner\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"projectCode\",\"type\":\"bytes32\"},{\"name\":\"kudos\",\"type\":\"uint256\"}],\"name\":\"giveKudos\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectCode\",\"type\":\"bytes32\"},{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getProjectKudosByUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectCode\",\"type\":\"bytes32\"}],\"name\":\"getProjectKudos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"}],\"name\":\"getKudosPerProject\",\"outputs\":[{\"name\":\"projects\",\"type\":\"bytes32[]\"},{\"name\":\"kudos\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getKudosLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userToGrant\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"grantKudos\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isJudge\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getKudosGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"projectCode\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"}]","ContractName":"ProjectKudos","CompilerVersion":"v0.4.5+commit.b318366e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}