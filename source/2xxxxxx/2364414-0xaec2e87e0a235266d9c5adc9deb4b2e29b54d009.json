{"status":"1","message":"OK","result":[{"SourceCode":"/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract Token {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract SingularDTVFund {\r\n    function workshop() returns (address);\r\n    function softWithdrawRevenueFor(address forAddress) returns (uint);\r\n}\r\ncontract SingularDTVCrowdfunding {\r\n    function twoYearsPassed() returns (bool);\r\n    function startDate() returns (uint);\r\n    function CROWDFUNDING_PERIOD() returns (uint);\r\n    function TOKEN_TARGET() returns (uint);\r\n    function valuePerShare() returns (uint);\r\n    function fundBalance() returns (uint);\r\n    function campaignEndedSuccessfully() returns (bool);\r\n}\r\n\r\n\r\n/// @title Token contract - Implements token issuance.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract SingularDTVToken is StandardToken {\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    SingularDTVFund constant singularDTVFund = SingularDTVFund(0xe736091fc36f1ad476f5e4e03e4425940822d3ba);\r\n    SingularDTVCrowdfunding constant singularDTVCrowdfunding = SingularDTVCrowdfunding(0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520);\r\n\r\n    /*\r\n     *  Token meta data\r\n     */\r\n    string constant public name = \"SingularDTV\";\r\n    string constant public symbol = \"SNGLS\";\r\n    uint8 constant public decimals = 0;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier workshopWaitedTwoYears() {\r\n        // Workshop can only transfer tokens after a two years period.\r\n        if (msg.sender == singularDTVFund.workshop() && !singularDTVCrowdfunding.twoYearsPassed()) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier isCrowdfundingContract () {\r\n        // Only crowdfunding contract is allowed to proceed.\r\n        if (msg.sender != address(singularDTVCrowdfunding)) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\r\n    /// @param _for Address of receiver.\r\n    /// @param tokenCount Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        isCrowdfundingContract\r\n        returns (bool)\r\n    {\r\n        if (tokenCount == 0) {\r\n            return false;\r\n        }\r\n        balances[_for] += tokenCount;\r\n        totalSupply += tokenCount;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param to Address of token receiver.\r\n    /// @param value Number of tokens to transfer.\r\n    function transfer(address to, uint256 value)\r\n        noEther\r\n        workshopWaitedTwoYears\r\n        returns (bool)\r\n    {\r\n        // Both parties withdraw their revenue first\r\n        singularDTVFund.softWithdrawRevenueFor(msg.sender);\r\n        singularDTVFund.softWithdrawRevenueFor(to);\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param from Address from where tokens are withdrawn.\r\n    /// @param to Address to where tokens are sent.\r\n    /// @param value Number of tokens to transfer.\r\n    function transferFrom(address from, address to, uint256 value)\r\n        noEther\r\n        workshopWaitedTwoYears\r\n        returns (bool)\r\n    {\r\n        // Both parties withdraw their revenue first\r\n        singularDTVFund.softWithdrawRevenueFor(from);\r\n        singularDTVFund.softWithdrawRevenueFor(to);\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /// @dev Contract constructor function sets initial token balances.\r\n    function SingularDTVToken() noEther {\r\n        // Set token creation for workshop\r\n        balances[singularDTVFund.workshop()] = 400000000; // ~400M\r\n        // Set token creation for core\r\n        balances[0x0196b712a0459cbee711e7c1d34d2c85a9910379] = 5000000;\r\n        balances[0x0f94dc84ce0f5fa2a8cc8d27a6969e25b5a39273] = 200000;\r\n        balances[0x122b7eb5f629d806c8adb0baa0560266abb3ec80] = 450000;\r\n        balances[0x13870d30fcdb7d7ae875668f2a1219225295d57c] = 50000;\r\n        balances[0x26640e826547bc700b8c7a9cc2c1c39a4ab3cbb3] = 900000;\r\n        balances[0x26bbfc6b23bc36e84447f061c6804f3a8b1a3698] = 250000;\r\n        balances[0x2d37383a45b5122a27efade69f7180eee4d965da] = 1270000;\r\n        balances[0x2e79b81121193d55c4934c0f32ad3d0474ca7b9c] = 4200000;\r\n        balances[0x3114844fc0e3de03963bbd1d983ba17ca89ad010] = 5000000;\r\n        balances[0x378e6582e4e3723f7076c7769eef6febf51258e1] = 680000;\r\n        balances[0x3e18530a4ee49a0357ffc8e74c08bfdee3915482] = 2490000;\r\n        balances[0x43fed1208d25ca0ef5681a5c17180af50c19f826] = 100000;\r\n        balances[0x4f183b18302c0ac5804b8c455018efc51af15a56] = 10000;\r\n        balances[0x55a886834658ccb6f26c39d5fdf6d833df3a276a] = 100000;\r\n        balances[0x5faa1624422db662c654ab35ce57bf3242888937] = 5000000;\r\n        balances[0x6407b662b306e2353b627488da952337a5a0bbaa] = 5000000;\r\n        balances[0x66c334fff8c8b8224b480d8da658ca3b032fe625] = 10000000;\r\n        balances[0x6c24991c6a40cd5ad6fab78388651fb324b35458] = 250000;\r\n        balances[0x781ba492f786b2be48c2884b733874639f50022c] = 500000;\r\n        balances[0x79b48f6f1ac373648c509b74a2c04a3281066457] = 2000000;\r\n        balances[0x835898804ed30e20aa29f2fe35c9f225175b049f] = 100000;\r\n        balances[0x93c56ea8848150389e0917de868b0a23c87cf7b1] = 2790000;\r\n        balances[0x93f959df3df3c6ee01ee9748327b881b2137bf2a] = 450000;\r\n        balances[0x9adc0215372e4ffd8c89621a6bd9cfddf230349f] = 550000;\r\n        balances[0xae4dbd3dae66722315541d66fe9457b342ac76d9] = 500000;\r\n        balances[0xbae02fe006f115e45b372f2ddc053eedca2d6fff] = 1800000;\r\n        balances[0xcc835821f643e090d8157de05451b416cd1202c4] = 300000;\r\n        balances[0xce75342b92a7d0b1a2c6e9835b6b85787e12e585] = 670000;\r\n        balances[0xd2b388467d9d0c30bab0a68070c6f49c473583a0] = 990000;\r\n        balances[0xdca0724ddde95bbace1b557cab4375d9a813da49] = 3500000;\r\n        balances[0xe3ef62165b60cac0fcbe9c2dc6a03aab4c5c8462] = 150000;\r\n        balances[0xe4f7d5083baeea7810b6d816581bb0ee7cd4b6f4] = 10560000;\r\n        balances[0xef08eb55d3482973c178b02bd4d5f2cea420325f] = 80000;\r\n        balances[0xfdecc9f2ee374cedc94f72ab4da2de896ce58c19] = 5000000;\r\n        balances[0xe5ff71dc1dea8cd2552eec59e9a5e8813da9bb01] = 29110000;\r\n        totalSupply = 500000000; // 500M\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SingularDTVToken","CompilerVersion":"v0.3.5+commit.5f97274","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}