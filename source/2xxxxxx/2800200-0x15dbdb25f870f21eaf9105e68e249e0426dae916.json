{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nMillionEther smart contract - decentralized advertising platform.\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\npragma solidity ^0.4.2;\r\n\r\ncontract MillionEther {\r\n\r\n    address private admin;\r\n\r\n    // Users\r\n    uint private numUsers = 0;\r\n    struct User {\r\n        address referal;\r\n        uint8 handshakes;\r\n        uint balance;\r\n        uint32 activationTime;\r\n        bool banned;\r\n        uint userID;\r\n        bool refunded;\r\n        uint investments;\r\n    }\r\n    mapping(address => User) private users;\r\n    mapping(uint => address) private userAddrs;\r\n\r\n    // Blocks. Blocks are 10x10 pixel areas. There are 10 000 blocks.\r\n    uint16 private blocksSold = 0;\r\n    uint private numNewStatus = 0;\r\n    struct Block {\r\n        address landlord;\r\n        uint imageID;\r\n        uint sellPrice;\r\n    }\r\n    Block[101][101] private blocks; \r\n\r\n    // Images\r\n    uint private numImages = 0;\r\n    struct Image {\r\n        uint8 fromX;\r\n        uint8 fromY;\r\n        uint8 toX;\r\n        uint8 toY;\r\n        string imageSourceUrl;\r\n        string adUrl;\r\n        string adText;\r\n    }\r\n    mapping(uint => Image) private images;\r\n\r\n    // Contract settings and security\r\n    uint public charityBalance = 0;\r\n    address public charityAddress;\r\n    uint8 private refund_percent = 0;\r\n    uint private totalWeiInvested = 0; //1 024 000 Ether max\r\n    bool private setting_stopped = false;\r\n    bool private setting_refundMode = false;\r\n    uint32 private setting_delay = 3600;\r\n    uint private setting_imagePlacementPriceInWei = 0;\r\n\r\n    // Events\r\n    event NewUser(uint ID, address newUser, address invitedBy, uint32 activationTime);\r\n    event NewAreaStatus (uint ID, uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint price);\r\n    event NewImage(uint ID, uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, string imageSourceUrl, string adUrl, string adText);\r\n\r\n\r\n// ** INITIALIZE ** //\r\n\r\n    function MillionEther () {\r\n        admin = msg.sender;\r\n        users[admin].referal = admin;\r\n        users[admin].handshakes = 0;\r\n        users[admin].activationTime = uint32(now);\r\n        users[admin].userID = 0;\r\n        userAddrs[0] = admin;\r\n        userAddrs[numUsers] = admin;\r\n    }\r\n\r\n\r\n// ** FUNCTION MODIFIERS (PERMISSIONS) ** //\r\n\r\n    modifier onlyAdmin {\r\n        if (msg.sender != admin) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenInvitedBy (address someUser) {\r\n        if (users[msg.sender].referal != address(0x0)) throw;   //user already exists\r\n        if (users[someUser].referal == address(0x0)) throw;     //referral does not exist\r\n        if (now < users[someUser].activationTime) throw;        //referral is not active yet\r\n        _;\r\n    }\r\n\r\n    modifier onlySignedIn {\r\n        if (users[msg.sender].referal == address(0x0)) throw;   //user does not exist\r\n        _;\r\n    }\r\n\r\n    modifier onlyForSale (uint8 _x, uint8 _y) {\r\n        if (blocks[_x][_y].landlord != address(0x0) && blocks[_x][_y].sellPrice == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithin100x100Area (uint8 _fromX, uint8 _fromY, uint8 _toX, uint8 _toY) {\r\n        if ((_fromX < 1) || (_fromY < 1)  || (_toX > 100) || (_toY > 100)) throw;\r\n        _;\r\n    }    \r\n\r\n    modifier onlyByLandlord (uint8 _x, uint8 _y) {\r\n        if (msg.sender != admin) {\r\n            if (blocks[_x][_y].landlord != msg.sender) throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier noBannedUsers {\r\n        if (users[msg.sender].banned == true) throw;\r\n        _;\r\n    }\r\n\r\n    modifier stopInEmergency { \r\n        if (msg.sender != admin) {\r\n            if (setting_stopped) throw; \r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyInRefundMode { \r\n        if (!setting_refundMode) throw;\r\n        _;\r\n    }\r\n\r\n\r\n// ** USER SIGN IN ** //\r\n\r\n    function getActivationTime (uint _currentLevel, uint _setting_delay) private constant returns (uint32) {\r\n        return uint32(now + _setting_delay * (2**(_currentLevel-1)));\r\n    }\r\n\r\n    function signIn (address referal) \r\n        public \r\n        stopInEmergency ()\r\n        onlyWhenInvitedBy (referal) \r\n        returns (uint) \r\n    {\r\n        numUsers++;\r\n        // get user's referral handshakes and increase by one\r\n        uint8 currentLevel = users[referal].handshakes + 1;\r\n        users[msg.sender].referal = referal;\r\n        users[msg.sender].handshakes = currentLevel;\r\n        // 1,2,4,8,16,32,64 hours for activation depending on number of handshakes (if setting delay = 1 hour)\r\n        users[msg.sender].activationTime = getActivationTime (currentLevel, setting_delay); \r\n        users[msg.sender].refunded = false;\r\n        users[msg.sender].userID = numUsers;\r\n        userAddrs[numUsers] = msg.sender;\r\n        NewUser(numUsers, msg.sender, referal, users[msg.sender].activationTime);\r\n        return numUsers;\r\n    }\r\n\r\n\r\n // ** BUY AND SELL BLOCKS ** //\r\n\r\n    function getBlockPrice (uint8 fromX, uint8 fromY, uint blocksSold) private constant returns (uint) {\r\n        if (blocks[fromX][fromY].landlord == address(0x0)) { \r\n                // when buying at initial sale price doubles every 1000 blocks sold\r\n                return 1 ether * (2 ** (blocksSold/1000));\r\n            } else {\r\n                // when the block is already bought and landlord have set a sell price\r\n                return blocks[fromX][fromY].sellPrice;\r\n            }\r\n        }\r\n\r\n    function buyBlock (uint8 x, uint8 y) \r\n        private  \r\n        onlyForSale (x, y) \r\n        returns (uint)\r\n    {\r\n        uint blockPrice;\r\n        blockPrice = getBlockPrice(x, y, blocksSold);\r\n        // Buy at initial sale\r\n        if (blocks[x][y].landlord == address(0x0)) {\r\n            blocksSold += 1;  \r\n            totalWeiInvested += blockPrice;\r\n        // Buy from current landlord and pay him or her the blockPrice\r\n        } else {\r\n            users[blocks[x][y].landlord].balance += blockPrice;  \r\n        }\r\n        blocks[x][y].landlord = msg.sender;\r\n        return blockPrice;\r\n    }\r\n\r\n    // buy an area of blocks at coordinates [fromX, fromY, toX, toY]\r\n    function buyBlocks (uint8 fromX, uint8 fromY, uint8 toX, uint8 toY) \r\n        public\r\n        payable\r\n        stopInEmergency ()\r\n        onlySignedIn () \r\n        onlyWithin100x100Area (fromX, fromY, toX, toY)\r\n        returns (uint) \r\n    {   \r\n        // Put funds to buyerBalance\r\n        if (users[msg.sender].balance + msg.value < users[msg.sender].balance) throw; //checking for overflow\r\n        uint previousWeiInvested = totalWeiInvested;\r\n        uint buyerBalance = users[msg.sender].balance + msg.value;\r\n\r\n        // perform buyBlock for coordinates [fromX, fromY, toX, toY] and withdraw funds\r\n        uint purchasePrice;\r\n        for (uint8 ix=fromX; ix<=toX; ix++) {\r\n            for (uint8 iy=fromY; iy<=toY; iy++) {\r\n                purchasePrice = buyBlock (ix,iy);\r\n                if (buyerBalance < purchasePrice) throw;\r\n                buyerBalance -= purchasePrice;\r\n            }\r\n        }\r\n        // update user balance\r\n        users[msg.sender].balance = buyerBalance;\r\n        // user's total investments are used for refunds calculations in emergency\r\n        users[msg.sender].investments += totalWeiInvested - previousWeiInvested;\r\n        // pay rewards to the referral chain starting from the current user referral\r\n        payOut (totalWeiInvested - previousWeiInvested, users[msg.sender].referal);\r\n        numNewStatus += 1;\r\n        // fire new area status event (0 sell price means the area is not for sale)\r\n        NewAreaStatus (numNewStatus, fromX, fromY, toX, toY, 0);\r\n        return purchasePrice;\r\n    }\r\n\r\n\r\n    //Mark block for sale (set a sell price)\r\n    function sellBlock (uint8 x, uint8 y, uint sellPrice) \r\n        private\r\n        onlyByLandlord (x, y) \r\n    {\r\n        blocks[x][y].sellPrice = sellPrice;\r\n    }\r\n\r\n    // sell an area of blocks at coordinates [fromX, fromY, toX, toY]\r\n    function sellBlocks (uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint priceForEachBlockInWei) \r\n        public \r\n        stopInEmergency ()\r\n        onlyWithin100x100Area (fromX, fromY, toX, toY) \r\n        returns (bool) \r\n    {\r\n        if (priceForEachBlockInWei == 0) throw;\r\n        for (uint8 ix=fromX; ix<=toX; ix++) {\r\n            for (uint8 iy=fromY; iy<=toY; iy++) {\r\n                sellBlock (ix, iy, priceForEachBlockInWei);\r\n            }\r\n        }\r\n        numNewStatus += 1;\r\n        // fire NewAreaStatus event\r\n        NewAreaStatus (numNewStatus, fromX, fromY, toX, toY, priceForEachBlockInWei);\r\n        return true;\r\n    }\r\n\r\n\r\n// ** ASSIGNING IMAGES ** //\r\n    \r\n    function chargeForImagePlacement () private {\r\n        if (users[msg.sender].balance + msg.value < users[msg.sender].balance) throw; //check for overflow`\r\n        uint buyerBalance = users[msg.sender].balance + msg.value;\r\n        if (buyerBalance < setting_imagePlacementPriceInWei) throw;\r\n        buyerBalance -= setting_imagePlacementPriceInWei;\r\n        users[admin].balance += setting_imagePlacementPriceInWei;\r\n        users[msg.sender].balance = buyerBalance;\r\n    }\r\n\r\n    // every block has its own image id assigned\r\n    function assignImageID (uint8 x, uint8 y, uint _imageID) \r\n        private\r\n        onlyByLandlord (x, y) \r\n    {\r\n        blocks[x][y].imageID = _imageID;\r\n    }\r\n\r\n    // place new ad to user owned area\r\n    function placeImage (uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, string imageSourceUrl, string adUrl, string adText) \r\n        public \r\n        payable\r\n        stopInEmergency ()\r\n        noBannedUsers ()\r\n        onlyWithin100x100Area (fromX, fromY, toX, toY)\r\n        returns (uint) \r\n    {\r\n        chargeForImagePlacement();\r\n        numImages++;\r\n        for (uint8 ix=fromX; ix<=toX; ix++) {\r\n            for (uint8 iy=fromY; iy<=toY; iy++) {\r\n                assignImageID (ix, iy, numImages);\r\n            }\r\n        }\r\n        images[numImages].fromX = fromX;\r\n        images[numImages].fromY = fromY;\r\n        images[numImages].toX = toX;\r\n        images[numImages].toY = toY;\r\n        images[numImages].imageSourceUrl = imageSourceUrl;\r\n        images[numImages].adUrl = adUrl;\r\n        images[numImages].adText = adText;\r\n        NewImage(numImages, fromX, fromY, toX, toY, imageSourceUrl, adUrl, adText);\r\n        return numImages;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n// ** PAYOUTS ** //\r\n\r\n    // reward the chain of referrals, admin and charity\r\n    function payOut (uint _amount, address referal) private {\r\n        address iUser = referal;\r\n        address nextUser;\r\n        uint totalPayed = 0;\r\n        for (uint8 i = 1; i < 7; i++) {                 // maximum 6 handshakes from the buyer \r\n            users[iUser].balance += _amount / (2**i);   // with every handshake far from the buyer reward halves:\r\n            totalPayed += _amount / (2**i);             // 50%, 25%, 12.5%, 6.25%, 3.125%, 1.5625%\r\n            if (iUser == admin) { break; }              // breaks at admin\r\n            nextUser = users[iUser].referal;\r\n            iUser = nextUser;\r\n        }\r\n        goesToCharity(_amount - totalPayed);            // the rest goes to charity\r\n    }\r\n\r\n    // charity is the same type of user as everyone else\r\n    function goesToCharity (uint amount) private {\r\n        // if no charityAddress is set yet funds go to charityBalance (see further)\r\n        if (charityAddress == address(0x0)) {\r\n            charityBalance += amount;\r\n        } else {\r\n            users[charityAddress].balance += amount;\r\n        }\r\n    }\r\n\r\n    // withdraw funds (no external calls for safety)\r\n    function withdrawAll () \r\n        public\r\n        stopInEmergency () \r\n    {\r\n        uint withdrawAmount = users[msg.sender].balance;\r\n        users[msg.sender].balance = 0;\r\n        if (!msg.sender.send(withdrawAmount)) {\r\n            users[msg.sender].balance = withdrawAmount;\r\n        }\r\n    }\r\n\r\n\r\n // ** GET INFO (CONSTANT FUNCTIONS)** //\r\n\r\n    //USERS\r\n    function getUserInfo (address userAddress) public constant returns (\r\n        address referal,\r\n        uint8 handshakes,\r\n        uint balance,\r\n        uint32 activationTime,\r\n        bool banned,\r\n        uint userID,\r\n        bool refunded,\r\n        uint investments\r\n    ) {\r\n        referal = users[userAddress].referal; \r\n        handshakes = users[userAddress].handshakes; \r\n        balance = users[userAddress].balance; \r\n        activationTime = users[userAddress].activationTime; \r\n        banned = users[userAddress].banned; \r\n        userID = users[userAddress].userID;\r\n        refunded = users[userAddress].refunded; \r\n        investments = users[userAddress].investments;\r\n    }\r\n\r\n    function getUserAddressByID (uint userID) \r\n        public constant returns (address userAddress) \r\n    {\r\n        return userAddrs[userID];\r\n    }\r\n    \r\n    function getMyInfo() \r\n        public constant returns(uint balance, uint32 activationTime) \r\n    {   \r\n        return (users[msg.sender].balance, users[msg.sender].activationTime);\r\n    }\r\n\r\n    //BLOCKS\r\n    function getBlockInfo(uint8 x, uint8 y) \r\n        public constant returns (address landlord, uint imageID, uint sellPrice) \r\n    {\r\n        return (blocks[x][y].landlord, blocks[x][y].imageID, blocks[x][y].sellPrice);\r\n    }\r\n\r\n    function getAreaPrice (uint8 fromX, uint8 fromY, uint8 toX, uint8 toY)\r\n        public\r\n        constant\r\n        onlyWithin100x100Area (fromX, fromY, toX, toY)\r\n        returns (uint) \r\n    {\r\n        uint blockPrice;\r\n        uint totalPrice = 0;\r\n        uint16 iblocksSold = blocksSold;\r\n        for (uint8 ix=fromX; ix<=toX; ix++) {\r\n            for (uint8 iy=fromY; iy<=toY; iy++) {\r\n                blockPrice = getBlockPrice(ix,iy,iblocksSold);\r\n                if (blocks[ix][iy].landlord == address(0x0)) { \r\n                        iblocksSold += 1; \r\n                    }\r\n                if (blockPrice == 0) { \r\n                    return 0; // not for sale\r\n                    } \r\n                totalPrice += blockPrice;\r\n            }\r\n        }\r\n        return totalPrice;\r\n    }\r\n\r\n    //IMAGES\r\n    function getImageInfo(uint imageID) \r\n        public constant returns (uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, string imageSourceUrl, string adUrl, string adText)\r\n    {\r\n        Image i = images[imageID];\r\n        return (i.fromX, i.fromY, i.toX, i.toY, i.imageSourceUrl, i.adUrl, i.adText);\r\n    }\r\n\r\n    //CONTRACT STATE\r\n    function getStateInfo () public constant returns (\r\n        uint _numUsers, \r\n        uint16 _blocksSold, \r\n        uint _totalWeiInvested, \r\n        uint _numImages, \r\n        uint _setting_imagePlacementPriceInWei,\r\n        uint _numNewStatus,\r\n        uint32 _setting_delay\r\n    ){\r\n        return (numUsers, blocksSold, totalWeiInvested, numImages, setting_imagePlacementPriceInWei, numNewStatus, setting_delay);\r\n    }\r\n\r\n\r\n// ** ADMIN ** //\r\n\r\n    function adminContractSecurity (address violator, bool banViolator, bool pauseContract, bool refundInvestments)\r\n        public \r\n        onlyAdmin () \r\n    {\r\n        //freeze/unfreeze user\r\n        if (violator != address(0x0)) {\r\n            users[violator].banned = banViolator;\r\n        }\r\n        //pause/resume contract \r\n        setting_stopped = pauseContract;\r\n\r\n        //terminate contract, refund investments\r\n        if (refundInvestments) {\r\n            setting_refundMode = refundInvestments;\r\n            refund_percent = uint8((this.balance*100)/totalWeiInvested);\r\n        }\r\n    }\r\n\r\n    function adminContractSettings (uint32 newDelayInSeconds, address newCharityAddress, uint newImagePlacementPriceInWei)\r\n        public \r\n        onlyAdmin () \r\n    {   \r\n        // setting_delay affects user activation time.\r\n        if (newDelayInSeconds > 0) setting_delay = newDelayInSeconds;\r\n        // when the charityAddress is set charityBalance immediately transfered to it's balance \r\n        if (newCharityAddress != address(0x0)) {\r\n            if (users[newCharityAddress].referal == address(0x0)) throw;\r\n            charityAddress = newCharityAddress;\r\n            users[charityAddress].balance += charityBalance;\r\n            charityBalance = 0;\r\n        }\r\n        // at deploy is set to 0, but may be needed to support off-chain infrastructure\r\n        setting_imagePlacementPriceInWei = newImagePlacementPriceInWei;\r\n    }\r\n\r\n    // escape path - withdraw funds at emergency.\r\n    function emergencyRefund () \r\n        public\r\n        onlyInRefundMode () \r\n    {\r\n        if (!users[msg.sender].refunded) {\r\n            uint totalInvested = users[msg.sender].investments;\r\n            uint availableForRefund = (totalInvested*refund_percent)/100;\r\n            users[msg.sender].investments -= availableForRefund;\r\n            users[msg.sender].refunded = true;\r\n            if (!msg.sender.send(availableForRefund)) {\r\n                users[msg.sender].investments = totalInvested;\r\n                users[msg.sender].refunded = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newDelayInSeconds\",\"type\":\"uint32\"},{\"name\":\"newCharityAddress\",\"type\":\"address\"},{\"name\":\"newImagePlacementPriceInWei\",\"type\":\"uint256\"}],\"name\":\"adminContractSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromX\",\"type\":\"uint8\"},{\"name\":\"fromY\",\"type\":\"uint8\"},{\"name\":\"toX\",\"type\":\"uint8\"},{\"name\":\"toY\",\"type\":\"uint8\"},{\"name\":\"priceForEachBlockInWei\",\"type\":\"uint256\"}],\"name\":\"sellBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromX\",\"type\":\"uint8\"},{\"name\":\"fromY\",\"type\":\"uint8\"},{\"name\":\"toX\",\"type\":\"uint8\"},{\"name\":\"toY\",\"type\":\"uint8\"}],\"name\":\"getAreaPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"}],\"name\":\"getBlockInfo\",\"outputs\":[{\"name\":\"landlord\",\"type\":\"address\"},{\"name\":\"imageID\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromX\",\"type\":\"uint8\"},{\"name\":\"fromY\",\"type\":\"uint8\"},{\"name\":\"toX\",\"type\":\"uint8\"},{\"name\":\"toY\",\"type\":\"uint8\"},{\"name\":\"imageSourceUrl\",\"type\":\"string\"},{\"name\":\"adUrl\",\"type\":\"string\"},{\"name\":\"adText\",\"type\":\"string\"}],\"name\":\"placeImage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromX\",\"type\":\"uint8\"},{\"name\":\"fromY\",\"type\":\"uint8\"},{\"name\":\"toX\",\"type\":\"uint8\"},{\"name\":\"toY\",\"type\":\"uint8\"}],\"name\":\"buyBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"referal\",\"type\":\"address\"},{\"name\":\"handshakes\",\"type\":\"uint8\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"activationTime\",\"type\":\"uint32\"},{\"name\":\"banned\",\"type\":\"bool\"},{\"name\":\"userID\",\"type\":\"uint256\"},{\"name\":\"refunded\",\"type\":\"bool\"},{\"name\":\"investments\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userID\",\"type\":\"uint256\"}],\"name\":\"getUserAddressByID\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyInfo\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"activationTime\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStateInfo\",\"outputs\":[{\"name\":\"_numUsers\",\"type\":\"uint256\"},{\"name\":\"_blocksSold\",\"type\":\"uint16\"},{\"name\":\"_totalWeiInvested\",\"type\":\"uint256\"},{\"name\":\"_numImages\",\"type\":\"uint256\"},{\"name\":\"_setting_imagePlacementPriceInWei\",\"type\":\"uint256\"},{\"name\":\"_numNewStatus\",\"type\":\"uint256\"},{\"name\":\"_setting_delay\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referal\",\"type\":\"address\"}],\"name\":\"signIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"imageID\",\"type\":\"uint256\"}],\"name\":\"getImageInfo\",\"outputs\":[{\"name\":\"fromX\",\"type\":\"uint8\"},{\"name\":\"fromY\",\"type\":\"uint8\"},{\"name\":\"toX\",\"type\":\"uint8\"},{\"name\":\"toY\",\"type\":\"uint8\"},{\"name\":\"imageSourceUrl\",\"type\":\"string\"},{\"name\":\"adUrl\",\"type\":\"string\"},{\"name\":\"adText\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"violator\",\"type\":\"address\"},{\"name\":\"banViolator\",\"type\":\"bool\"},{\"name\":\"pauseContract\",\"type\":\"bool\"},{\"name\":\"refundInvestments\",\"type\":\"bool\"}],\"name\":\"adminContractSecurity\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"invitedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"activationTime\",\"type\":\"uint32\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromX\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"fromY\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toX\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toY\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewAreaStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromX\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"fromY\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toX\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toY\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"imageSourceUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"adUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"adText\",\"type\":\"string\"}],\"name\":\"NewImage\",\"type\":\"event\"}]","ContractName":"MillionEther","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}