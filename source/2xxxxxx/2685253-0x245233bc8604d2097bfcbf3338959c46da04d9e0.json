{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.5;\r\n\r\ncontract Better_Bank_With_Interest {\r\n    //\r\n    ////////////////////////////////////////////////////////////////\r\n    //\r\n    //  A term deposit bank that pays interest on withdrawal  \r\n    //\r\n    //  v0.02 beta, use AT OWN RISK - I am not refunding any lost ether!\r\n    //  And check the code before depositing anything.\r\n    //\r\n    //  How to use: 1) transfer min. 250 ether using the deposit() function (5 ether deposit fee per deposit)\r\n    //                 note: minimum ether amount and deposit fee can change, so check public variables\r\n    //                   - minimum_deposit_amount\r\n    //                   - deposit_fee\r\n    //                 before depositing!\r\n    //\r\n    //              2) withdraw after 5 days, receive up to 10% interest (1 additional ether for every 10 ether withdrawal)\r\n    //                 note: to get most of the interest paid out, withdraw in lots of 10 ether...\r\n    //\r\n    ///////////////////////////////////////////////////////////////////\r\n    //\r\n    //  Now you may ask - where do the extra ether come from? :)\r\n    //  The answer is simple: From people who dont follow the instructions properly! \r\n    //                        And there are usually plenty of those...\r\n    //\r\n    //  Common pitfalls:\r\n    //   e.g. - deposit to the fallback function instead of the proper deposit() function\r\n    //        - withdraw MORE than 10 ether AT A TIME ... (that just means you get less interest paid out)\r\n    //        -  or you wait too long after your term deposit ended, and other people have drained the interest pool.\r\n    //\r\n    //  You can always check the availbale interest amount using get_available_interest_amount () before you withdraw\r\n    //  And be quick - everyone gets the same 30850 block term deposit time (~5 days) until they can withdraw.\r\n    //\r\n    //  Also FYI: The bank cannot remove money from the interest pool until the end of the contract life.\r\n    //        And make sure you withdraw your balances before the end of the contract life also.\r\n    //        Check public contract_alive_until_this_block variable to find out when the contract life ends.\r\n    //           Initial end date is block #3000000 (~Mid Jan 2017), but the bank can extend that life.\r\n    //           Note: the bank can only EXTEND that end date, not shorten it.\r\n    //\r\n    // And here we go - happy reading:\r\n    //\r\n    // store of all account balances\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) term_deposit_end_block; // store per address the minimum time for the term deposit\r\n                                                         //\r\n    address thebank; // the bank\r\n    \r\n    uint256 public minimum_deposit_amount; // minimum deposits\r\n    uint256 public deposit_fee;     // fee for deposits\r\n    uint256 public contract_alive_until_this_block;\r\n    \r\n    uint256 public count_customer_deposits; \r\n    \r\n    function Better_Bank_With_Interest() { // create the contract\r\n        thebank = msg.sender;  \r\n        minimum_deposit_amount = 250 ether;\r\n        deposit_fee = 5 ether;\r\n        contract_alive_until_this_block = 3000000; // around 2 months from now (mid Jan 2017)\r\n                                                   // --> can be extended but not brought forward\r\n        //\r\n        count_customer_deposits = 0;\r\n        // bank cannot touch remaining interest balance until the contract has reached end of life.\r\n        term_deposit_end_block[thebank] = 0;// contract_alive_until_this_block;\r\n        //\r\n    }\r\n    \r\n   //////////////////////////////////////////////////////////////////////////////////////////\r\n    // deposit ether into term-deposit account\r\n    //////////////////////////////////////////////////////////////////////////////////////////\r\n    function deposit() payable {\r\n        //\r\n        if (msg.value < minimum_deposit_amount) throw; // minimum deposit is at least minimum_payment.\r\n        //\r\n        // no fee for first payment (if the customers's balance is 0)\r\n        if (balances[msg.sender] == 0) deposit_fee = 0 ether;  \r\n        //\r\n        if ( msg.sender == thebank ){ // thebank is depositing into bank/interest account, without fee\r\n            balances[thebank] += msg.value;\r\n        }\r\n        else { // customer deposit\r\n            count_customer_deposits += 1; // count deposits, cannot remove contract any more until end of life\r\n            balances[msg.sender] += msg.value - deposit_fee;  // credit the sender's account\r\n            balances[thebank] += deposit_fee; // difference (fee) to be credited to thebank\r\n            term_deposit_end_block[msg.sender] = block.number + 30850; //  approx 5 days ( 5 * 86400/14 ); \r\n        }\r\n        //\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////////\r\n    // withdraw from account, with 10 ether interest  (after term deposit end)\r\n    //////////////////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    function withdraw(uint256 withdraw_amount) {\r\n        //\r\n        if (withdraw_amount < 10 ether) throw; // minimum withdraw amount is 10 ether\r\n        if ( withdraw_amount > balances[msg.sender]  ) throw; // cannot withdraw more than in customer balance\r\n        if (block.number < term_deposit_end_block[msg.sender] ) throw; // cannot withdraw until the term deposit has ended\r\n        // Note: thebank/interest account cannot be withdrawed from until contract end-of life.\r\n        //       thebank's term-deposit end block is the same as contract_alive_until_this_block\r\n        //\r\n        uint256 interest = 1 ether;  // 1 ether interest paid at time of withdrawal\r\n        //\r\n        if (msg.sender == thebank){ // but no interest for thebank (who can't withdraw until block contract_alive_until_this_block anyways)\r\n            interest = 0 ether;\r\n        }\r\n        //                          \r\n        if (interest > balances[thebank])   // cant pay more interest than available in the thebank/bank\r\n            interest = balances[thebank];  // so send whatever is left anyways\r\n        //\r\n        //\r\n        balances[thebank] -= interest;  // reduce thebank balance, and send bonus to customer\r\n        balances[msg.sender] -= withdraw_amount;\r\n        //\r\n        if (!msg.sender.send(withdraw_amount)) throw;  // send withdraw amount, but check for error to roll back if needed\r\n        if (!msg.sender.send(interest)) throw;         // send interest amount, but check for error to roll back if needed\r\n        //\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // HELPER FUNCTIONS\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    \r\n    // set minimum deposit limits\r\n    function set_minimum_payment(uint256 new_limit) {\r\n        if ( msg.sender == thebank ){\r\n            minimum_deposit_amount = new_limit;\r\n        }\r\n    }\r\n    //\r\n    // change deposit fee\r\n    function set_deposit_fee (uint256 new_fee) {\r\n        if ( msg.sender == thebank ){\r\n            deposit_fee = new_fee;\r\n        }\r\n    }\r\n    \r\n    // find out how much money is available for interest payments\r\n    function get_available_interest_amount () constant  returns (uint256) {\r\n        return balances[thebank];\r\n    }\r\n    // find out what the end date of the customers term deposit is\r\n    function get_term_deposit_end_date (address query_address) constant  returns (uint256) {\r\n        return term_deposit_end_block[query_address];\r\n    }    \r\n    // find out how much money is available for interest payments\r\n    function get_balance (address query_address) constant  returns (uint256) {\r\n        return balances[query_address];\r\n    }\r\n    //\r\n    ////////////////////////////////////////////////////////////////\r\n    // this bank won't live forever, so this will handle the exit (or extend its life)\r\n    ////////////////////////////////////////////////////////////\r\n\t//\r\n    function extend_life_of_contract (uint256 newblock){\r\n        if ( msg.sender != thebank || newblock < contract_alive_until_this_block ) throw;\r\n        // can only extend\r\n        contract_alive_until_this_block = newblock; \r\n        // lock thebank/interest account until new end date\r\n        term_deposit_end_block[thebank] = contract_alive_until_this_block;\r\n    }\r\n    //\r\n    // the self destruct after the final block number has been reached (or immediately if there havent been any customer payments yet)\r\n    function close_bank(){\r\n        if (contract_alive_until_this_block < block.number || count_customer_deposits == 0)\r\n            selfdestruct(thebank); \r\n            // any funds still remaining within the bank will be sent to the creator\r\n            // --> bank customers have to make sure they withdraw their $$$ before the final block.\r\n    }\r\n    ////////////////////////////////////////////////////////////////\r\n    // fallback function\r\n    ////////////////////////////////////////////////////////////\r\n    function () payable { // any unidentified payments (that didnt call the deposit function) \r\n                          // go into the standard interest account of the bank\r\n                          // and become available for interest withdrawal by bank users\r\n        balances[thebank] += msg.value;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"new_fee\",\"type\":\"uint256\"}],\"name\":\"set_deposit_fee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"query_address\",\"type\":\"address\"}],\"name\":\"get_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close_bank\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_available_interest_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_limit\",\"type\":\"uint256\"}],\"name\":\"set_minimum_payment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"query_address\",\"type\":\"address\"}],\"name\":\"get_term_deposit_end_date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count_customer_deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newblock\",\"type\":\"uint256\"}],\"name\":\"extend_life_of_contract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_deposit_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_alive_until_this_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Better_Bank_With_Interest","CompilerVersion":"v0.4.5+commit.b318366e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}