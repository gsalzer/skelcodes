{"status":"1","message":"OK","result":[{"SourceCode":"// `interface` would make a nice keyword ;)\r\ncontract TheDaoHardForkOracle {\r\n    // `ran()` manually verified true on both ETH and ETC chains\r\n    function forked() constant returns (bool);\r\n}\r\n\r\n// demostrates calling own function in a \"reversible\" manner\r\n/* important lines are marked by multi-line comments */\r\ncontract ReversibleDemo {\r\n    // counters (all public to simplify inspection)\r\n    uint public numcalls;\r\n    uint public numcallsinternal;\r\n    uint public numfails;\r\n    uint public numsuccesses;\r\n\r\n    address owner;\r\n\r\n    // needed for \"naive\" and \"oraclized\" checks\r\n    address constant withdrawdaoaddr = 0xbf4ed7b27f1d666546e30d74d50d173d20bca754;\r\n    TheDaoHardForkOracle oracle = TheDaoHardForkOracle(0xe8e506306ddb78ee38c9b0d86c257bd97c2536b3);\r\n\r\n    event logCall(uint indexed _numcalls,\r\n                  uint indexed _numfails,\r\n                  uint indexed _numsuccesses);\r\n\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _ }\r\n    modifier onlyThis { if (msg.sender != address(this)) throw; _ }\r\n\r\n    // constructor (setting `owner` allows later termination)\r\n    function ReversibleDemo() { owner = msg.sender; }\r\n\r\n    /* external: increments stack height */\r\n    /* onlyThis: prevent actual external calling */\r\n    function sendIfNotForked() external onlyThis returns (bool) {\r\n        numcallsinternal++;\r\n\r\n        /* naive check for \"is this the classic chain\" */\r\n        // guaranteed `true`: enough has been withdrawn already\r\n        //     three million ------> 3'000'000\r\n        if (withdrawdaoaddr.balance < 3000000 ether) {\r\n            /* intentionally not checking return value */\r\n            owner.send(42);\r\n        }\r\n\r\n        /* \"reverse\" if it's actually the HF chain */\r\n        if (oracle.forked()) throw;\r\n\r\n        // not exactly a \"success\": send() could have failed on classic\r\n        return true;\r\n    }\r\n\r\n    // accepts value transfers\r\n    function doCall(uint _gas) onlyOwner {\r\n        numcalls++;\r\n\r\n        if (!this.sendIfNotForked.gas(_gas)()) {\r\n            numfails++;\r\n        }\r\n        else {\r\n            numsuccesses++;\r\n        }\r\n        logCall(numcalls, numfails, numsuccesses);\r\n    }\r\n\r\n    function selfDestruct() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // accepts value trasfers, but does nothing\r\n    function() {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numsuccesses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numfails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numcalls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numcallsinternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendIfNotForked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"doCall\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_numcalls\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_numfails\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_numsuccesses\",\"type\":\"uint256\"}],\"name\":\"logCall\",\"type\":\"event\"}]","ContractName":"ReversibleDemo","CompilerVersion":"v0.3.5-2016-08-07-f7af7de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}