{"status":"1","message":"OK","result":[{"SourceCode":"// Â© 2016 Ambisafe Inc. No reuse without written permission is allowed.\r\n\r\ncontract Delegate {\r\n    mapping(address => mapping(address => bool)) public senderDelegates;\r\n\r\n    modifier onlyDelegate(address _sender) {\r\n        if (_sender == msg.sender || address(this) == msg.sender || senderDelegates[_sender][msg.sender]) {\r\n            _\r\n        }\r\n    }\r\n\r\n    function setDelegate(address _delegate, bool _trust) returns(bool) {\r\n        senderDelegates[msg.sender][_delegate] = _trust;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MultiAccess is Delegate {\r\n    address public multiAccessRecipient;\r\n\r\n    struct PendingOperation {\r\n        bool[] ownersDone;\r\n        uint yetNeeded;\r\n        bytes32 op;\r\n    }\r\n\r\n    struct PendingState {\r\n        PendingOperation[] pending;\r\n        mapping(bytes32 => uint) pendingIndex;\r\n    }\r\n\r\n    mapping(uint => PendingState) pendingState;\r\n    uint currentPendingState;\r\n\r\n    uint public multiAccessRequired;\r\n\r\n    mapping(address => uint) ownerIndex;\r\n    address[] public multiAccessOwners;\r\n\r\n\r\n    event Confirmation(address indexed owner, bytes32 indexed operation, bool completed);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n    function MultiAccess() {\r\n        multiAccessOwners.length = 2;\r\n        multiAccessOwners[1] = msg.sender;\r\n        ownerIndex[msg.sender] = 1;\r\n        multiAccessRequired = 1;\r\n        pendingState[0].pending.length = 1;\r\n    }\r\n\r\n    function _state() internal constant returns(PendingState storage) {\r\n        return pendingState[currentPendingState];\r\n    }\r\n\r\n    function multiAccessHasConfirmed(bytes32 _operation, address _owner) constant returns(bool) {\r\n        uint pos = _state().pendingIndex[_operation];\r\n        if (pos == 0) {\r\n            return false;\r\n        }\r\n        uint index = ownerIndex[_owner];\r\n        var pendingOp = _state().pending[pos];\r\n        if (index >= pendingOp.ownersDone.length) {\r\n            return false;\r\n        }\r\n        return pendingOp.ownersDone[index];\r\n    }\r\n\r\n    function multiAccessGetOwners() constant returns(address[]) {\r\n        address[] memory owners = new address[](multiAccessOwners.length - 1);\r\n        for (uint i = 1; i < multiAccessOwners.length; i++) {\r\n            owners[i-1] = multiAccessOwners[i];\r\n        }\r\n        return owners;\r\n    }\r\n\r\n    modifier onlyowner(address _owner) {\r\n        if (multiAccessIsOwner(_owner)) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier onlymanyowners(address _owner, bytes32 _operation) {\r\n        if (_confirmAndCheck(_owner, _operation)) {\r\n            _\r\n        }\r\n    }\r\n\r\n    function _confirmAndCheck(address _owner, bytes32 _operation) onlyowner(_owner) internal returns(bool) {\r\n        uint index = ownerIndex[_owner];\r\n        if (multiAccessHasConfirmed(_operation, _owner)) {\r\n            return false;\r\n        }\r\n\r\n        uint pos = _state().pendingIndex[_operation];\r\n        if (pos == 0) {\r\n            pos = _state().pending.length++;\r\n            _state().pending[pos].yetNeeded = multiAccessRequired;\r\n            _state().pending[pos].op = _operation;\r\n            _state().pendingIndex[_operation] = pos;\r\n        }\r\n\r\n        var pendingOp = _state().pending[pos];\r\n        if (pendingOp.yetNeeded <= 1) {\r\n            Confirmation(_owner, _operation, true);\r\n            _removeOperation(_operation);\r\n            return true;\r\n        } else {\r\n            Confirmation(_owner, _operation, false);\r\n            pendingOp.yetNeeded--;\r\n            if (index >= pendingOp.ownersDone.length) {\r\n                pendingOp.ownersDone.length = index+1;\r\n            }\r\n            pendingOp.ownersDone[index] = true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _incrementState() internal {\r\n        currentPendingState++;\r\n        pendingState[currentPendingState].pending.length++;\r\n    }\r\n\r\n    function _removeOperation(bytes32 _operation) internal {\r\n        uint pos = _state().pendingIndex[_operation];\r\n        if (pos < _state().pending.length-1) {\r\n            PendingOperation last = _state().pending[_state().pending.length-1];\r\n            _state().pending[pos] = last;\r\n            _state().pendingIndex[last.op] = pos;\r\n        }\r\n        _state().pending.length--;\r\n        delete _state().pendingIndex[_operation];\r\n    }\r\n\r\n    function multiAccessIsOwner(address _addr) constant returns(bool) {\r\n        return ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    function multiAccessRevoke(bytes32 _operation) returns(bool) {\r\n        return multiAccessRevokeD(_operation, msg.sender);\r\n    }\r\n\r\n    function multiAccessRevokeD(bytes32 _operation, address _sender) onlyDelegate(_sender) onlyowner(_sender) returns(bool) {\r\n        uint index = ownerIndex[_sender];\r\n        if (!multiAccessHasConfirmed(_operation, _sender)) {\r\n            return false;\r\n        }\r\n        var pendingOp = _state().pending[_state().pendingIndex[_operation]];\r\n        pendingOp.ownersDone[index] = false;\r\n        pendingOp.yetNeeded++;\r\n        if (pendingOp.yetNeeded == multiAccessRequired) {\r\n            _removeOperation(_operation);\r\n        }\r\n        Revoke(_sender, _operation);\r\n        return true;\r\n    }\r\n\r\n    function multiAccessChangeOwner(address _from, address _to) returns(bool) {\r\n        return this.multiAccessChangeOwnerD(_from, _to, msg.sender);\r\n    }\r\n\r\n    function multiAccessChangeOwnerD(address _from, address _to, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _from, _to)) returns(bool) {\r\n        if (multiAccessIsOwner(_to)) {\r\n            return false;\r\n        }\r\n        uint index = ownerIndex[_from];\r\n        if (index == 0) {\r\n            return false;\r\n        }\r\n\r\n        multiAccessOwners[index] = _to;\r\n        delete ownerIndex[_from];\r\n        ownerIndex[_to] = index;\r\n        _incrementState();\r\n        OwnerChanged(_from, _to);\r\n        return true;\r\n    }\r\n\r\n    function multiAccessAddOwner(address _owner) returns(bool) {\r\n        return this.multiAccessAddOwnerD(_owner, msg.sender);\r\n    }\r\n\r\n    function multiAccessAddOwnerD(address _owner, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _owner)) returns(bool) {\r\n        if (multiAccessIsOwner(_owner)) {\r\n            return false;\r\n        }\r\n        uint pos = multiAccessOwners.length++;\r\n        multiAccessOwners[pos] = _owner;\r\n        ownerIndex[_owner] = pos;\r\n        OwnerAdded(_owner);\r\n        return true;\r\n    }\r\n\r\n    function multiAccessRemoveOwner(address _owner) returns(bool) {\r\n        return this.multiAccessRemoveOwnerD(_owner, msg.sender);\r\n    }\r\n\r\n    function multiAccessRemoveOwnerD(address _owner, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _owner)) returns(bool) {\r\n        uint index = ownerIndex[_owner];\r\n        if (index == 0) {\r\n            return false;\r\n        }\r\n        if (multiAccessRequired >= multiAccessOwners.length-1) {\r\n            return false;\r\n        }\r\n        if (index < multiAccessOwners.length-1) {\r\n            address last = multiAccessOwners[multiAccessOwners.length-1];\r\n            multiAccessOwners[index] = last;\r\n            ownerIndex[last] = index;\r\n        }\r\n        multiAccessOwners.length--;\r\n        delete ownerIndex[_owner];\r\n        _incrementState();\r\n        OwnerRemoved(_owner);\r\n        return true;\r\n    }\r\n\r\n    function multiAccessChangeRequirement(uint _newRequired) returns(bool) {\r\n        return this.multiAccessChangeRequirementD(_newRequired, msg.sender);\r\n    }\r\n\r\n    function multiAccessChangeRequirementD(uint _newRequired, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _newRequired)) returns(bool) {\r\n        if (_newRequired == 0 || _newRequired > multiAccessOwners.length-1) {\r\n            return false;\r\n        }\r\n        multiAccessRequired = _newRequired;\r\n        _incrementState();\r\n        RequirementChanged(_newRequired);\r\n        return true;\r\n    }\r\n\r\n    function multiAccessSetRecipient(address _address) returns(bool) {\r\n        return this.multiAccessSetRecipientD(_address, msg.sender);\r\n    }\r\n\r\n    function multiAccessSetRecipientD(address _address, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _address)) returns(bool) {\r\n        multiAccessRecipient = _address;\r\n        return true;\r\n    }\r\n\r\n    function multiAccessCall(address _to, uint _value, bytes _data) returns(bool) {\r\n        return this.multiAccessCallD(_to, _value, _data, msg.sender);\r\n    }\r\n\r\n    function multiAccessCallD(address _to, uint _value, bytes _data, address _sender) external onlyDelegate(_sender) onlymanyowners(_sender, sha3(msg.sig, _to, _value, _data)) returns(bool) {\r\n        return _to.call.value(_value)(_data);\r\n    }\r\n\r\n    function() returns(bool) {\r\n        return multiAccessCall(multiAccessRecipient, msg.value, msg.data);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessAddOwnerD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiAccessRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiAccessGetOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"},{\"name\":\"_trust\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"multiAccessAddOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessRemoveOwnerD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"multiAccessChangeRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"multiAccessCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessChangeOwnerD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessChangeRequirementD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"multiAccessRemoveOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessSetRecipientD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"multiAccessRevoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessCallD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"multiAccessChangeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiAccessOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiAccessRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"multiAccessRevokeD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"multiAccessSetRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"multiAccessIsOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderDelegates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"multiAccessHasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"completed\",\"type\":\"bool\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"MultiAccess","CompilerVersion":"v0.3.5+commit.5f97274","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}