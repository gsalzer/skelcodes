{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract SpiceMembers {\r\n    enum MemberLevel { None, Member, Manager, Director }\r\n    struct Member {\r\n        uint id;\r\n        MemberLevel level;\r\n        bytes32 info;\r\n    }\r\n\r\n    mapping (address => Member) member;\r\n\r\n    address public owner;\r\n    mapping (uint => address) public memberAddress;\r\n    uint public memberCount;\r\n\r\n    event TransferOwnership(address indexed sender, address indexed owner);\r\n    event AddMember(address indexed sender, address indexed member);\r\n    event RemoveMember(address indexed sender, address indexed member);\r\n    event SetMemberLevel(address indexed sender, address indexed member, MemberLevel level);\r\n    event SetMemberInfo(address indexed sender, address indexed member, bytes32 info);\r\n\r\n    function SpiceMembers() {\r\n        owner = msg.sender;\r\n\r\n        memberCount = 1;\r\n        memberAddress[memberCount] = owner;\r\n        member[owner] = Member(memberCount, MemberLevel.None, 0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        if (msg.sender != owner && memberLevel(msg.sender) < MemberLevel.Manager) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _target) onlyOwner {\r\n        // If new owner has no memberId, create one\r\n        if (member[_target].id == 0) {\r\n            memberCount++;\r\n            memberAddress[memberCount] = _target;\r\n            member[_target] = Member(memberCount, MemberLevel.None, 0);\r\n        }\r\n        owner = _target;\r\n        TransferOwnership(msg.sender, owner);\r\n    }\r\n\r\n    function addMember(address _target) onlyManager {\r\n        // Make sure trying to add an existing member throws an error\r\n        if (memberLevel(_target) != MemberLevel.None) throw;\r\n\r\n        // If added member has no memberId, create one\r\n        if (member[_target].id == 0) {\r\n            memberCount++;\r\n            memberAddress[memberCount] = _target;\r\n            member[_target] = Member(memberCount, MemberLevel.None, 0);\r\n        }\r\n\r\n        // Set memberLevel to initial value with basic access\r\n        member[_target].level = MemberLevel.Member;\r\n        AddMember(msg.sender, _target);\r\n    }\r\n\r\n    function removeMember(address _target) {\r\n        // Make sure trying to remove a non-existing member throws an error\r\n        if (memberLevel(_target) == MemberLevel.None) throw;\r\n        // Make sure members are only allowed to delete members lower than their level\r\n        if (msg.sender != owner && memberLevel(msg.sender) <= memberLevel(_target)) throw;\r\n\r\n        member[_target].level = MemberLevel.None;\r\n        RemoveMember(msg.sender, _target);\r\n    }\r\n\r\n    function setMemberLevel(address _target, MemberLevel level) {\r\n        // Make sure all levels are larger than None but not higher than Director\r\n        if (level == MemberLevel.None || level > MemberLevel.Director) throw;\r\n        // Make sure the _target is currently already a member\r\n        if (memberLevel(_target) == MemberLevel.None) throw;\r\n        // Make sure the new level is lower level than we are (we cannot overpromote)\r\n        if (msg.sender != owner && memberLevel(msg.sender) <= level) throw;\r\n        // Make sure the member is currently on lower level than we are\r\n        if (msg.sender != owner && memberLevel(msg.sender) <= memberLevel(_target)) throw;\r\n\r\n        member[_target].level = level;\r\n        SetMemberLevel(msg.sender, _target, level);\r\n    }\r\n\r\n    function setMemberInfo(address _target, bytes32 info) {\r\n        // Make sure the target is currently already a member\r\n        if (memberLevel(_target) == MemberLevel.None) throw;\r\n        // Make sure the member is currently on lower level than we are\r\n        if (msg.sender != owner && msg.sender != _target && memberLevel(msg.sender) <= memberLevel(_target)) throw;\r\n\r\n        member[_target].info = info;\r\n        SetMemberInfo(msg.sender, _target, info);\r\n    }\r\n\r\n    function memberId(address _target) constant returns (uint) {\r\n        return member[_target].id;\r\n    }\r\n\r\n    function memberLevel(address _target) constant returns (MemberLevel) {\r\n        return member[_target].level;\r\n    }\r\n\r\n    function memberInfo(address _target) constant returns (bytes32) {\r\n        return member[_target].info;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"memberLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"memberId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"setMemberInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"setMemberLevel\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"memberInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"RemoveMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SetMemberLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"SetMemberInfo\",\"type\":\"event\"}]","ContractName":"SpiceMembers","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}