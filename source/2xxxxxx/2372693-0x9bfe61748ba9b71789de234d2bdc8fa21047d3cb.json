{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n//This project is beta stage and might contain unknown bugs.\r\n//I am not responsible for any consequences of any use of the code or protocol that is suggested here.\r\ncontract SimpleMixer {\r\n    \r\n    struct Deal{\r\n        mapping(address=>uint) deposit;\r\n        uint                   depositSum;\r\n        mapping(address=>bool) claims;\r\n\t    uint \t\t           numClaims;\r\n        uint                   claimSum;\r\n\r\n        uint                   startTime;\r\n        uint                   depositDurationInSec;\r\n        uint                   claimDurationInSec;\r\n        uint                   claimDepositInWei;\r\n        uint                   claimValueInWei;\r\n     \tuint                   minNumClaims;\r\n        \r\n        bool                   active;\r\n        bool                   fullyFunded;\r\n    }\r\n    \r\n    Deal[]  _deals;\r\n     \r\n    event NewDeal( address indexed user, uint indexed _dealId, uint _startTime, uint _depositDurationInHours, uint _claimDurationInHours, uint _claimUnitValueInWei, uint _claimDepositInWei, uint _minNumClaims, bool _success, string _err );\r\n    event Claim( address indexed _claimer, uint indexed _dealId, bool _success, string _err );\r\n    event Deposit( address indexed _depositor, uint indexed _dealId, uint _value, bool _success, string _err );\r\n    event Withdraw( address indexed _withdrawer, uint indexed _dealId, uint _value, bool _public, bool _success, string _err );\r\n\r\n    event EnoughClaims( uint indexed _dealId );\r\n    event DealFullyFunded( uint indexed _dealId );\r\n    \r\n    enum ReturnValue { Ok, Error }\r\n\r\n    function SimpleMixer(){\r\n    }\r\n    \r\n    function newDeal( uint _depositDurationInHours, uint _claimDurationInHours, uint _claimUnitValueInWei, uint _claimDepositInWei, uint _minNumClaims ) returns(ReturnValue){\r\n        uint dealId = _deals.length;        \r\n        if( _depositDurationInHours == 0 || _claimDurationInHours == 0 ){\r\n        \tNewDeal( msg.sender,\r\n        \t         dealId,\r\n        \t         now,\r\n        \t         _depositDurationInHours,\r\n        \t         _claimDurationInHours,\r\n        \t         _claimUnitValueInWei,\r\n        \t         _claimDepositInWei,\r\n        \t         _minNumClaims,\r\n        \t         false,\r\n        \t         \"_depositDurationInHours and _claimDurationInHours must be positive\" );\r\n            return ReturnValue.Error;\r\n        }\r\n        _deals.length++;\r\n        _deals[dealId].depositSum = 0;\r\n\t    _deals[dealId].numClaims = 0;\r\n        _deals[dealId].claimSum = 0;\r\n        _deals[dealId].startTime = now;\r\n        _deals[dealId].depositDurationInSec = _depositDurationInHours * 1 hours;\r\n        _deals[dealId].claimDurationInSec = _claimDurationInHours * 1 hours;\r\n        _deals[dealId].claimDepositInWei = _claimDepositInWei;\r\n        _deals[dealId].claimValueInWei = _claimUnitValueInWei;\r\n\t    _deals[dealId].minNumClaims = _minNumClaims;\r\n        _deals[dealId].fullyFunded = false;\r\n        _deals[dealId].active = true;\r\n    \tNewDeal( msg.sender,\r\n    \t         dealId,\r\n    \t         now,\r\n    \t         _depositDurationInHours,\r\n    \t         _claimDurationInHours,\r\n    \t         _claimUnitValueInWei,\r\n    \t         _claimDepositInWei,\r\n    \t         _minNumClaims,\r\n    \t         true,\r\n    \t         \"all good\" );\r\n        return ReturnValue.Ok;\r\n    }\r\n    \r\n    function makeClaim( uint dealId ) payable returns(ReturnValue){\r\n        Deal deal = _deals[dealId];        \r\n        bool errorDetected = false;\r\n        string memory error;\r\n    \t// validations\r\n    \tif( !_deals[dealId].active ){\r\n    \t    error = \"deal is not active\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeClaim: deal is not active\");\r\n    \t    errorDetected = true;\r\n    \t}\r\n        if( deal.startTime + deal.claimDurationInSec < now ){\r\n            error = \"claim phase already ended\";            \r\n            //ErrorLog( msg.sender, dealId, \"makeClaim: claim phase already ended\" );\r\n            errorDetected = true;\r\n        }\r\n        if( msg.value != deal.claimDepositInWei ){\r\n            error = \"msg.value must be equal to claim deposit unit\";            \r\n            //ErrorLog( msg.sender, dealId, \"makeClaim: msg.value must be equal to claim deposit unit\" );\r\n            errorDetected = true;\r\n        }\r\n    \tif( deal.claims[msg.sender] ){\r\n    \t    error = \"cannot claim twice with the same address\";\r\n            //ErrorLog( msg.sender, dealId, \"makeClaim: cannot claim twice with the same address\" );\r\n            errorDetected = true;\r\n    \t}\r\n    \t\r\n    \tif( errorDetected ){\r\n    \t    Claim( msg.sender, dealId, false, error );\r\n    \t    if( ! msg.sender.send(msg.value) ) throw; // send money back\r\n    \t    return ReturnValue.Error;\r\n    \t}\r\n\r\n\t    // actual claim\r\n        deal.claimSum += deal.claimValueInWei;\r\n        deal.claims[msg.sender] = true;\r\n\t    deal.numClaims++;\r\n\r\n\t    Claim( msg.sender, dealId, true, \"all good\" );\r\n\t    \r\n\t    if( deal.numClaims == deal.minNumClaims ) EnoughClaims( dealId );\r\n\t    \r\n    \treturn ReturnValue.Ok;\r\n    }\r\n\r\n    function makeDeposit( uint dealId ) payable returns(ReturnValue){\r\n        bool errorDetected = false;\r\n        string memory error;\r\n    \t// validations\r\n        if( msg.value == 0 ){\r\n            error = \"deposit value must be positive\";\r\n            //ErrorLog( msg.sender, dealId, \"makeDeposit: deposit value must be positive\");\r\n            errorDetected = true;\r\n        }\r\n    \tif( !_deals[dealId].active ){\r\n    \t    error = \"deal is not active\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeDeposit: deal is not active\");\r\n    \t    errorDetected = true;\r\n    \t}\r\n        Deal deal = _deals[dealId];\r\n        if( deal.startTime + deal.claimDurationInSec > now ){\r\n            error = \"contract is still in claim phase\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeDeposit: contract is still in claim phase\");\r\n    \t    errorDetected = true;\r\n        }\r\n        if( deal.startTime + deal.claimDurationInSec + deal.depositDurationInSec < now ){\r\n            error = \"deposit phase is over\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeDeposit: deposit phase is over\");\r\n    \t    errorDetected = true;\r\n        }\r\n        if( ( msg.value % deal.claimValueInWei ) > 0 ){\r\n            error = \"deposit value must be a multiple of claim value\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeDeposit: deposit value must be a multiple of claim value\");\r\n    \t    errorDetected = true;\r\n        }\r\n    \tif( deal.deposit[msg.sender] > 0 ){\r\n    \t    error = \"cannot deposit twice with the same address\";\r\n    \t    //ErrorLog( msg.sender, dealId, \"makeDeposit: cannot deposit twice with the same address\");\r\n    \t    errorDetected = true;\r\n    \t}\r\n    \tif( deal.numClaims < deal.minNumClaims ){\r\n    \t    error = \"deal is off as there are not enough claims. Call withdraw with you claimer address\";\r\n    \t    /*ErrorLog( msg.sender,\r\n    \t              dealId,\r\n    \t              \"makeDeposit: deal is off as there are not enough claims. Call withdraw with you claimer address\");*/\r\n    \t    errorDetected = true;\r\n    \t}\r\n    \t\r\n    \tif( errorDetected ){\r\n    \t    Deposit( msg.sender, dealId, msg.value, false, error );\r\n    \t    if( ! msg.sender.send(msg.value) ) throw; // send money back\r\n    \t    return ReturnValue.Error;\r\n    \t}\r\n        \r\n\t    // actual deposit\r\n        deal.depositSum += msg.value;\r\n        deal.deposit[msg.sender] = msg.value;\r\n\r\n    \tif( deal.depositSum >= deal.claimSum ){\r\n    \t    deal.fullyFunded = true;\r\n    \t    DealFullyFunded( dealId );\r\n    \t}\r\n    \r\n    \tDeposit( msg.sender, dealId, msg.value, true, \"all good\" );\r\n\t    return ReturnValue.Ok;    \t\r\n    }\r\n        \r\n    function withdraw( uint dealId ) returns(ReturnValue){\r\n    \t// validation\r\n        bool errorDetected = false;\r\n        string memory error;\r\n        Deal deal = _deals[dealId];\r\n    \tbool enoughClaims = deal.numClaims >= deal.minNumClaims;\r\n    \tif( ! enoughClaims ){\r\n    \t    if( deal.startTime + deal.claimDurationInSec > now ){\r\n    \t        error = \"claim phase not over yet\";\r\n    \t        //ErrorLog( msg.sender, dealId, \"withdraw: claim phase not over yet\");\r\n    \t        errorDetected = true;\r\n    \t    }\r\n    \t}\r\n    \telse{\r\n    \t    if( deal.startTime + deal.depositDurationInSec + deal.claimDurationInSec > now ){\r\n    \t        error = \"deposit phase not over yet\";\r\n    \t        //ErrorLog( msg.sender, dealId, \"withdraw: deposit phase not over yet\");\r\n    \t        errorDetected = true;\r\n    \t    }\r\n    \t}\r\n    \t\r\n    \tif( errorDetected ){\r\n    \t    Withdraw( msg.sender, dealId, 0, false, false, error );\r\n        \treturn ReturnValue.Error; // note that function is not payable    \t    \r\n    \t}\r\n\r\n\r\n\t    // actual withdraw\r\n\t    bool publicWithdraw;\r\n    \tuint withdrawedValue = 0;\r\n        if( (! deal.fullyFunded) && enoughClaims ){\r\n\t        publicWithdraw = true;\r\n            uint depositValue = deal.deposit[msg.sender];\r\n            if( depositValue == 0 ){\r\n                Withdraw( msg.sender, dealId, 0, publicWithdraw, false, \"address made no deposit. Note that this should be called with the public address\" );\r\n    \t        //ErrorLog( msg.sender, dealId, \"withdraw: address made no deposit. Note that this should be called with the public address\");\r\n    \t        return ReturnValue.Error; // function non payable\r\n            }\r\n            \r\n            uint effectiveNumDeposits = deal.depositSum / deal.claimValueInWei;\r\n            uint userEffectiveNumDeposits = depositValue / deal.claimValueInWei;\r\n            uint extraBalance = ( deal.numClaims - effectiveNumDeposits ) * deal.claimDepositInWei;\r\n            uint userExtraBalance = userEffectiveNumDeposits * extraBalance / effectiveNumDeposits;\r\n\r\n            deal.deposit[msg.sender] = 0; // invalidate user\r\n            // give only half of extra balance. otherwise dishonest party could obtain 99% of the extra balance and lose almost nothing\r\n\t        withdrawedValue = depositValue + deal.claimDepositInWei * userEffectiveNumDeposits + ( userExtraBalance / 2 );\r\n            if( ! msg.sender.send(withdrawedValue) ) throw;\r\n        }\r\n        else{\r\n    \t    publicWithdraw = false;\r\n            if( ! deal.claims[msg.sender] ){\r\n                Withdraw( msg.sender, dealId, 0, publicWithdraw, false, \"address made no claims. Note that this should be called with the secret address\" );\r\n    \t        //ErrorLog( msg.sender, dealId, \"withdraw: address made no claims. Note that this should be called with the secret address\");\r\n    \t        return ReturnValue.Error; // function non payable\r\n            }\r\n\t        if( enoughClaims ) withdrawedValue = deal.claimDepositInWei + deal.claimValueInWei;\r\n\t        else withdrawedValue = deal.claimDepositInWei;\r\n\t\t\r\n            deal.claims[msg.sender] = false; // invalidate claim\r\n            if( ! msg.sender.send(withdrawedValue) ) throw;\r\n        }\r\n\t    \r\n        Withdraw( msg.sender, dealId, withdrawedValue, publicWithdraw, true, \"all good\" );\r\n        return ReturnValue.Ok;\r\n    }    \r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function dealStatus(uint _dealId) constant returns(uint[4]){\r\n        // returns (active, num claims, claim sum, deposit sum) all as integers\r\n        uint active = _deals[_dealId].active ? 1 : 0;\r\n        uint numClaims = _deals[_dealId].numClaims;\r\n        uint claimSum = _deals[_dealId].claimSum;\r\n\t    uint depositSum = _deals[_dealId].depositSum;\r\n        \r\n        return [active, numClaims, claimSum, depositSum];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"makeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"makeClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"dealStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositDurationInHours\",\"type\":\"uint256\"},{\"name\":\"_claimDurationInHours\",\"type\":\"uint256\"},{\"name\":\"_claimUnitValueInWei\",\"type\":\"uint256\"},{\"name\":\"_claimDepositInWei\",\"type\":\"uint256\"},{\"name\":\"_minNumClaims\",\"type\":\"uint256\"}],\"name\":\"newDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_depositDurationInHours\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claimDurationInHours\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claimUnitValueInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claimDepositInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_minNumClaims\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_err\",\"type\":\"string\"}],\"name\":\"NewDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_err\",\"type\":\"string\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_err\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_public\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_err\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"EnoughClaims\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"DealFullyFunded\",\"type\":\"event\"}]","ContractName":"SimpleMixer","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}