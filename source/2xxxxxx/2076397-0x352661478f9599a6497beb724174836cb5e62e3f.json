{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\tWeeklyLotteryB\r\n\tCoded by: iFA\r\n\thttp://wlb.ethereumlottery.net\r\n\tver: 1.3\r\n*/\r\ncontract WLBDrawsDB {\r\n\taddress private owner;\r\n\taddress private game;\r\n\t\r\n\tstruct draws_s {\r\n\t\tuint date;\r\n\t\tuint8[3] numbers;\r\n\t\tuint hit3Count;\r\n\t\tuint hit3Value;\r\n\t\tuint hit2Count;\r\n\t\tuint hit2Value;\r\n\t}\r\n\t\r\n\tdraws_s[] private draws;\r\n\t\r\n\tfunction WLBDrawsDB() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\tfunction newDraw(uint date, uint8[3] numbers, uint hit3Count, uint hit3Value, uint hit2Count, uint hit2Value) noEther {\r\n\t\tif ( msg.sender != owner && msg.sender != game ) { throw; }\r\n\t\tdraws.push( draws_s( date, numbers, hit3Count, hit3Value, hit2Count, hit2Value) );\r\n\t}\r\n\t\r\n\tfunction getDraw(uint id) constant returns (uint date, uint8[3] numbers, uint hit3Count, uint hit3Value, uint hit2Count, uint hit2Value) {\r\n\t\treturn ( draws[id].date, draws[id].numbers, draws[id].hit3Count, draws[id].hit3Value, draws[id].hit2Count, draws[id].hit2Value );\r\n\t}\r\n\t\r\n\tfunction setGameAddress(address _game) noEther OnlyOwner external {\r\n\t\tgame = _game;\r\n\t}\r\n\t\r\n\tmodifier noEther() { if (msg.value > 0) { throw; } _ }\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n}\r\n\r\ncontract WeeklyLotteryB {\r\n\t/* structures */\r\n\tstruct games_s {\r\n\t\tuint ticketsCount;\r\n\t\tmapping(bytes32 => uint) hit3Hash;\r\n\t\tmapping(bytes32 => uint) hit2Hash;\r\n\t\tuint startTimestamp;\r\n\t\tuint endTimestamp;\r\n\t\tbytes3 winningNumbersBytes;\r\n\t\tuint prepareBlock;\r\n\t\tbool drawDone;\r\n\t\tuint prizePot;\r\n\t\tuint hit3Count;\r\n\t\tuint hit3Value;\r\n\t\tuint hit2Count;\r\n\t\tuint hit2Value;\r\n\t}\r\n\tstruct playerGames_s {\r\n\t\tbytes3[] numbersBytes;\r\n\t\tmapping(bytes32 => uint) hit3Hash;\r\n\t\tmapping(bytes32 => uint) hit2Hash;\r\n\t\tbool checked;\r\n\t}\r\n\tstruct players_s {\r\n\t\tmapping(uint => playerGames_s) games;\r\n\t}\r\n\tstruct investors_s {\r\n\t\taddress owner;\r\n\t\tuint value;\r\n\t\tuint balance;\r\n\t\tbool live;\r\n\t\tbool valid;\r\n\t\tuint begins;\r\n\t}\r\n\tstruct draws_s {\r\n\t\tuint date;\r\n\t\tuint gameID;\r\n\t\tbytes3 numbersBytes;\r\n\t\tuint hit3Count;\r\n\t\tuint hit3Value;\r\n\t\tuint hit2Count;\r\n\t\tuint hit2Value;\r\n\t}\r\n\t/* config */\r\n\tuint public constant ticketPrice = 100 finney; // 0.1 ether\r\n\tuint private constant drawMaxNumber = 50;\r\n\tuint private constant drawBlockDelay = 5;\r\n\tuint private constant prizeDismissDelay = 5;\r\n\tuint private constant drawBlockLimit = 128;\r\n\tuint private constant contractDismissDelay = 5 weeks;\r\n\tuint private constant investUnit = 1 ether;\r\n\tuint private constant investMinimum = 10 ether;\r\n\tuint private constant investUserLimit = 200;\r\n\tuint private constant investMinDuration = 5; // 5 draw!\r\n\tuint private constant investIdleTime = 1 days;\r\n\tuint private constant forOwner = 2; //%\r\n\tuint private constant forInvestors = 40; //%\r\n\tuint private constant forHit2 = 30; //%\r\n\t/* variables */\r\n\taddress private WLBdrawsDBAddr;\r\n\taddress private owner;\r\n\tuint private currentJackpot;\r\n\tuint private investmentsValue;\r\n\tuint private extraJackpot;\r\n\tuint private ticketCounter;\r\n\tuint private currentGame;\r\n\tuint private ownerBalance;\r\n\tuint private oldContractLastGame;\r\n\tbool public contractEnabled = true;\r\n\tuint private contractDisabledTimeStamp;\r\n\tmapping(address => players_s) private players;\r\n\tgames_s[] private games;\r\n\tinvestors_s[] private investors;\r\n\t/* events */\r\n\tevent NewTicketEvent(address Player, uint8 Number1, uint8 Number2, uint8 Number3);\r\n\tevent ContractDisabledEvent(uint DeadlineTime);\r\n\tevent DrawPrepareEvent(uint BlockNumber);\r\n\tevent DrawEvent(uint GameID, uint8 Number1, uint8 Number2, uint8 Number3, uint Hit3Count, uint Hit3Value, uint Hit2Count, uint Hit2Value);\r\n\tevent InvestAddEvent(address Investor, uint Value);\r\n\tevent InvestCancelEvent(address Investor, uint Value);\r\n\t/* constructor */\r\n\tfunction WeeklyLotteryB(address _WLBdrawsDBAddr, uint _oldContractLastGame) {\r\n\t\tWLBdrawsDBAddr = _WLBdrawsDBAddr;\r\n\t\towner = msg.sender;\r\n\t\tcurrentGame = 0;\r\n\t\toldContractLastGame = _oldContractLastGame;\r\n\t\tgames.length = 1;\r\n\t\tgames[0].startTimestamp = now;\r\n\t\tuint ret = 1470571200;\r\n\t\twhile (ret < now) {\r\n\t\t\tret += 1 weeks;\r\n\t\t}\r\n\t\tgames[0].endTimestamp = ret;\r\n\t}\r\n\t/* constant functions */\r\n\tfunction Visit() constant returns (string) { return \"http://wlb.ethereumlottery.net\"; }\r\n\tfunction Draws(uint id) constant returns (uint date, uint8[3] Numbers, uint hit3Count, uint hit3Value, uint hit2Count, uint hit2Value) {\r\n\t\treturn WLBDrawsDB( WLBdrawsDBAddr ).getDraw(id);\r\n\t}\r\n\tfunction CurrentGame() constant returns (uint GameID, uint Jackpot, uint Start, uint End, uint Tickets) {\r\n\t\treturn (currentGame+oldContractLastGame, currentJackpot, games[currentGame].startTimestamp, games[currentGame].endTimestamp, games[currentGame].ticketsCount);\r\n\t}\r\n\tfunction PlayerTickets(address Player, uint GameID, uint TicketID) constant returns (uint8[3] numbers, bool Checked) {\r\n\t\tGameID -= oldContractLastGame;\r\n\t\treturn ( getNumbersFromBytes( players[Player].games[GameID].numbersBytes[TicketID] ), players[Player].games[GameID].checked);\r\n\t}\r\n\tfunction Investors(address Address) constant returns(uint Investment, uint Balance, bool Live) {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(Address);\r\n\t\tif (found == false || ! investors[InvestorID].valid) {\r\n\t\t\treturn (0, 0, false);\r\n\t\t}\r\n\t\treturn (investors[InvestorID].value, investors[InvestorID].balance, investors[InvestorID].live);\r\n\t}\r\n\tfunction CheckPrize(address Address) constant returns(uint value) {\r\n\t\tuint gameID;\r\n\t\tuint gameLowID;\r\n\t\tuint8[3] memory numbers;\r\n\t\tuint hit3Count;\r\n\t\tuint hit2Count;\r\n\t\tfor ( gameID=currentGame ; gameID>=0 ; gameID-- ) {\r\n\t\t\tif ( ! players[Address].games[gameID].checked) {\r\n\t\t\t\tif (games[gameID].drawDone) {\r\n\t\t\t\t\tnumbers = getNumbersFromBytes(games[gameID].winningNumbersBytes);\r\n\t\t\t\t\thit3Count = players[Address].games[gameID].hit3Hash[sha3( numbers[0], numbers[1], numbers[2] )];\r\n\t\t\t\t\tvalue += hit3Count * games[gameID].hit3Value;\r\n\t\t\t\t\thit2Count = players[Address].games[gameID].hit2Hash[sha3( numbers[0], numbers[1] )];\r\n\t\t\t\t\thit2Count += players[Address].games[gameID].hit2Hash[sha3( numbers[0], numbers[2] )];\r\n\t\t\t\t\thit2Count += players[Address].games[gameID].hit2Hash[sha3( numbers[1], numbers[2] )];\r\n\t\t\t\t\thit2Count -= hit3Count*3;\r\n\t\t\t\t\tvalue += hit2Count * games[gameID].hit2Value;\r\n\t\t\t\t} else if ( ! contractEnabled && gameID == currentGame) {\r\n\t\t\t\t\tvalue += players[Address].games[gameID].numbersBytes.length * ticketPrice;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (gameID == 0 || gameID-prizeDismissDelay == gameID) { break; }\r\n\t\t}\r\n\t}\r\n\t/* callback function */\r\n\tfunction () {\r\n\t\tvar Numbers = getNumbersFromHash(sha3(block.coinbase, now, ticketCounter));\r\n\t\tCreateTicket(msg.sender, Numbers[0], Numbers[1], Numbers[2]);\r\n\t}\r\n\t/* external functions for players */\r\n\tfunction BuyTicket(uint8 Number1, uint8 Number2, uint8 Number3) external {\r\n\t    CreateTicket(msg.sender, Number1, Number2, Number3);\r\n\t}\r\n\tfunction CheckTickets() external noEther noContract {\r\n\t\tuint _value;\r\n\t\tuint _subValue;\r\n\t\tuint gameID;\r\n\t\tuint gameLowID;\r\n\t\tuint8[3] memory numbers;\r\n\t\tbool changed;\r\n\t\tuint hit3Count;\r\n\t\tuint hit2Count;\r\n\t\tfor ( gameID=currentGame ; gameID>=0 ; gameID-- ) {\r\n\t\t\tif ( ! players[msg.sender].games[gameID].checked) {\r\n\t\t\t\tif (games[gameID].drawDone) {\r\n\t\t\t\t\tnumbers = getNumbersFromBytes(games[gameID].winningNumbersBytes);\r\n\t\t\t\t\thit3Count = players[msg.sender].games[gameID].hit3Hash[sha3( numbers[0], numbers[1], numbers[2] )];\r\n\t\t\t\t\t_subValue += hit3Count * games[gameID].hit3Value;\r\n\t\t\t\t\thit2Count = players[msg.sender].games[gameID].hit2Hash[sha3( numbers[0], numbers[1] )];\r\n\t\t\t\t\thit2Count += players[msg.sender].games[gameID].hit2Hash[sha3( numbers[0], numbers[2] )];\r\n\t\t\t\t\thit2Count += players[msg.sender].games[gameID].hit2Hash[sha3( numbers[1], numbers[2] )];\r\n\t\t\t\t\thit2Count -= hit3Count*3;\r\n\t\t\t\t\t_subValue += hit2Count * games[gameID].hit2Value;\r\n\t\t\t\t\tgames[gameID].prizePot -= _subValue;\r\n\t\t\t\t\t_value += _subValue;\r\n\t\t\t\t\tplayers[msg.sender].games[gameID].checked = true;\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t} else if ( ! contractEnabled && gameID == currentGame) {\r\n\t\t\t\t\t_value += players[msg.sender].games[gameID].numbersBytes.length * ticketPrice;\r\n\t\t\t\t\tplayers[msg.sender].games[gameID].checked = true;\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (gameID == 0 || gameID-prizeDismissDelay == gameID) { break; }\r\n\t\t}\r\n\t\tif ( ! changed) { throw; }\r\n\t\tif (_value > 0) { if ( ! msg.sender.send(_value)) { throw; } }\r\n\t}\r\n\tfunction BuyTicketForOther(address Address, uint8 Number1, uint8 Number2, uint8 Number3) external {\r\n\t    if (Address == 0x0) { throw; }\r\n\t    CreateTicket(Address, Number1, Number2, Number3);\r\n\t}\r\n\t/* external functions for investors */\r\n\tfunction InvestAdd() external OnlyEnabled noContract {\r\n\t\tuint value_ = msg.value;\r\n\t\tif (value_ < investUnit) { throw; }\r\n\t\tif (value_ % investUnit > 0) { \r\n\t\t\tif ( ! msg.sender.send( value_ % investUnit )) { throw; } \r\n\t\t\tvalue_ = value_ - (value_ % investUnit);\r\n\t\t}\r\n\t\tif (value_ < investMinimum) { throw; }\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) {\r\n\t\t\tif (investors.length == investUserLimit) { throw; }\r\n\t\t\tInvestorID = investors.length;\r\n\t\t\tinvestors.length++;\r\n\t\t}\r\n\t\tif (investors[InvestorID].valid && investors[InvestorID].live) {\r\n\t\t\tinvestors[InvestorID].value += value_;\r\n\t\t} else {\r\n\t\t\tinvestors[InvestorID].value = value_;\r\n\t\t}\r\n\t\tinvestors[InvestorID].begins = currentGame;\r\n\t\tinvestors[InvestorID].valid = true;\r\n\t\tinvestors[InvestorID].live = true;\r\n\t\tinvestors[InvestorID].owner = msg.sender;\r\n\t\tinvestmentsValue += value_;\r\n\t\tsetJackpot();\r\n\t\tInvestAddEvent(msg.sender, value_);\r\n\t}\r\n\tfunction InvestWithdraw() external noEther {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) { throw; }\r\n\t\tif ( ! investors[InvestorID].valid) { throw; }\r\n\t\tuint _balance = investors[InvestorID].balance;\r\n\t\tif (_balance == 0) { throw; }\r\n\t\tinvestors[InvestorID].balance = 0;\r\n\t\tif ( ! msg.sender.send( _balance )) { throw; }\r\n\t}\r\n\tfunction InvestCancel() external noEther {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) { throw; }\r\n\t\tif ( ! investors[InvestorID].valid) { throw; }\r\n\t\tif (contractEnabled) {\r\n\t\t\tif (investors[InvestorID].begins+investMinDuration < now) { throw; }\r\n\t\t\tif (games[currentGame].startTimestamp+investIdleTime < now) { throw; }\r\n\t\t}\r\n\t\tuint balance_;\r\n\t\tif (investors[InvestorID].live) {\r\n\t\t\tinvestmentsValue -= investors[InvestorID].value;\r\n\t\t\tbalance_ = investors[InvestorID].value;\r\n\t\t\tsetJackpot();\r\n\t\t\tInvestCancelEvent(msg.sender, investors[InvestorID].value);\r\n\t\t}\r\n\t\tif (investors[InvestorID].balance > 0) {\r\n\t\t\tbalance_ += investors[InvestorID].balance;\r\n\t\t}\r\n\t\tdelete investors[InvestorID];\r\n\t\tif ( ! msg.sender.send( balance_ )) { throw; }\r\n\t}\r\n\t/* draw functions for everyone*/\r\n\tfunction DrawPrepare() noContract OnlyEnabled noEther {\r\n\t\tif (games[currentGame].endTimestamp > now || (games[currentGame].prepareBlock != 0 && games[currentGame].prepareBlock+(drawBlockLimit-drawBlockDelay) > block.number)) { throw; }\r\n\t\tgames[currentGame].prepareBlock = block.number+drawBlockDelay;\r\n\t\tDrawPrepareEvent(games[currentGame].prepareBlock);\r\n\t}\r\n\tfunction Draw() noContract OnlyEnabled noEther {\r\n\t\tif (games[currentGame].prepareBlock == 0 || games[currentGame].prepareBlock > block.number || games[currentGame].prepareBlock+(drawBlockLimit-drawBlockDelay) <= block.number) { throw; }\r\n\t\tbytes32 _hash;\r\n\t\tuint hit3Value;\r\n\t\tuint hit3Count;\r\n\t\tuint hit2Value;\r\n\t\tuint hit2Count;\r\n\t\tuint a;\r\n\t\tfor ( a = 1 ; a <= drawBlockDelay ; a++ ) {\r\n\t\t\t_hash = sha3(_hash, block.blockhash(games[currentGame].prepareBlock - drawBlockDelay+a));\r\n\t\t}\r\n\t\tvar numbers = getNumbersFromHash(_hash);\r\n\t\tgames[currentGame].winningNumbersBytes = getBytesFromNumbers( numbers );\r\n\t\thit3Count += games[currentGame].hit3Hash[ sha3( numbers[0], numbers[1],numbers[2] ) ];\r\n\t\thit2Count += games[currentGame].hit2Hash[ sha3( numbers[0], numbers[1]) ];\r\n\t\thit2Count += games[currentGame].hit2Hash[ sha3( numbers[0], numbers[2]) ];\r\n\t\thit2Count += games[currentGame].hit2Hash[ sha3( numbers[1], numbers[2]) ];\r\n\t\thit2Count -= hit3Count*3;\r\n\t\tuint totalPot = games[currentGame].ticketsCount*ticketPrice;\r\n\t\thit2Value = ( totalPot * forHit2 / 100 );\r\n\t\tif (hit2Count > 0) {\r\n\t\t\tgames[currentGame].prizePot = hit2Value;\r\n\t\t}\r\n\t\thit2Value = hit2Value / hit2Count;\r\n\t\ttotalPot -= hit2Value;\r\n\t\tuint _ownerBalance = totalPot * forOwner / 100;\r\n\t\ttotalPot -= _ownerBalance;\r\n\t\townerBalance += _ownerBalance;\r\n\t\tuint _addInvestorsValue = totalPot * forInvestors / 100;\r\n\t\taddInvestorsValue(_addInvestorsValue);\r\n\t\ttotalPot -= _addInvestorsValue;\r\n\t\tif (hit3Count > 0) {\r\n\t\t\tgames[currentGame].prizePot += currentJackpot;\r\n\t\t\tfor ( a=0 ; a < investors.length ; a++ ) {\r\n\t\t\t\tdelete investors[a].live;\r\n\t\t\t}\r\n\t\t\thit3Value = currentJackpot / hit3Count;\r\n\t\t\textraJackpot = 0;\r\n\t\t\tinvestmentsValue = 0;\r\n\t\t}\r\n\t\textraJackpot += totalPot;\r\n\t\tDrawEvent(currentGame+oldContractLastGame, numbers[0], numbers[1], numbers[2], hit3Count, hit3Value, hit2Count, hit2Value);\r\n\t\tWLBDrawsDB( WLBdrawsDBAddr ).newDraw( now, numbers, hit3Count, hit3Value, hit2Count, hit2Value);\r\n\t\tgames[currentGame].hit3Count = hit3Count;\r\n\t\tgames[currentGame].hit3Value = hit3Value;\r\n\t\tgames[currentGame].hit2Count = hit2Count;\r\n\t\tgames[currentGame].hit2Value = hit2Value;\r\n\t\tgames[currentGame].drawDone = true;\r\n\t\tnewGame();\r\n\t\tsetJackpot();\r\n\t}\r\n\t/* owner functions */\r\n\tfunction OwnerGetFee() external OnlyOwner {\r\n\t\tif (ownerBalance == 0) { throw; }\r\n\t\tif (owner.send(ownerBalance) == false) { throw; }\r\n\t\townerBalance = 0;\r\n\t}\r\n\tfunction OwnerCloseContract() external OnlyOwner noEther {\r\n\t\tif ( ! contractEnabled) {\r\n\t\t\tif (contractDisabledTimeStamp+contractDismissDelay < now) {\r\n\t\t\t\tsuicide(owner);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcontractEnabled = false;\r\n\t\t\tcontractDisabledTimeStamp = now;\r\n\t\t\tContractDisabledEvent(contractDisabledTimeStamp+contractDismissDelay);\r\n\t\t\townerBalance += extraJackpot;\r\n\t\t\textraJackpot = 0;\r\n\t\t\tgames[currentGame].prizePot = games[currentGame].ticketsCount*ticketPrice;\r\n\t\t}\r\n\t}\r\n\t/* private functions */\r\n    function CreateTicket(address Addr, uint8 Number1, uint8 Number2, uint8 Number3) private noContract OnlyEnabled {\r\n\t\tvar Numbers = [Number1 , Number2 , Number3];\r\n\t\tif ( ! checkNumbers( Numbers )) { throw; }\r\n\t\tNumbers = sortNumbers(Numbers);\r\n\t\tif (msg.value < ticketPrice) { throw; }\r\n\t\tif (msg.value-ticketPrice > 0) { if ( ! Addr.send( msg.value-ticketPrice )) { throw; } }\r\n\t\tif (currentJackpot == 0) { throw; }\r\n\t\tif (games[currentGame].endTimestamp < now) { throw; }\r\n\t\tticketCounter++;\r\n\t\tgames[currentGame].ticketsCount++;\r\n\t\tbytes32 hash0 = sha3( Numbers[0], Numbers[1], Numbers[2] );\r\n\t\tbytes32 hash1 = sha3( Numbers[0], Numbers[1]);\r\n\t\tbytes32 hash2 = sha3( Numbers[0], Numbers[2]);\r\n\t\tbytes32 hash3 = sha3( Numbers[1], Numbers[2]);\r\n\t\tgames[currentGame].hit3Hash[hash0]++;\r\n\t\tgames[currentGame].hit2Hash[hash1]++;\r\n\t\tgames[currentGame].hit2Hash[hash2]++;\r\n\t\tgames[currentGame].hit2Hash[hash3]++;\r\n\t\tplayers[Addr].games[currentGame].numbersBytes.push ( getBytesFromNumbers(Numbers) );\r\n\t\tplayers[Addr].games[currentGame].hit3Hash[hash0]++;\r\n\t\tplayers[Addr].games[currentGame].hit2Hash[hash1]++;\r\n\t\tplayers[Addr].games[currentGame].hit2Hash[hash2]++;\r\n\t\tplayers[Addr].games[currentGame].hit2Hash[hash3]++;\r\n\t\tNewTicketEvent( Addr, Numbers[0], Numbers[1], Numbers[2] );\r\n\t}\r\n\tfunction addInvestorsValue(uint value) private {\r\n\t\tbool done;\r\n\t\tuint a;\r\n\t\tfor ( a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].live && investors[a].valid) {\r\n\t\t\t\tinvestors[a].balance += value * investors[a].value / investmentsValue;\r\n\t\t\t\tdone = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( ! done) {\r\n\t\t\townerBalance += value;\r\n\t\t}\r\n\t}\r\n\tfunction newGame() private {\r\n\t\tvar nextDraw = games[currentGame].endTimestamp  + 1 weeks;\r\n\t\tcurrentGame++;\r\n\t\tuint gamesID = games.length;\r\n\t\tgames.length++;\r\n\t\tgames[gamesID].startTimestamp = now;\r\n\t\tgames[gamesID].endTimestamp = nextDraw;\r\n\t\tif (games.length > prizeDismissDelay) {\r\n            extraJackpot += games[currentGame-prizeDismissDelay].prizePot;\r\n\t\t\tdelete games[currentGame-prizeDismissDelay];\r\n\t\t}\r\n\t}\r\n\tfunction getNumbersFromHash(bytes32 hash) private returns (uint8[3] numbers) {\r\n\t\tbool ok = true;\r\n\t\tuint8 num = 0;\r\n\t\tuint hashpos = 0;\r\n\t\tuint8 a;\r\n\t\tuint8 b;\r\n\t\tfor (a = 0 ; a < numbers.length ; a++) {\r\n\t\t\twhile (true) {\r\n\t\t\t\tok = true;\r\n\t\t\t\tif (hashpos == 32) {\r\n\t\t\t\t\thashpos = 0;\r\n\t\t\t\t\thash = sha3(hash);\r\n\t\t\t\t}\r\n\t\t\t\tnum = getPart( hash, hashpos );\r\n\t\t\t\tnum = num % uint8(drawMaxNumber) + 1;\r\n\t\t\t\thashpos += 1;\r\n\t\t\t\tfor (b = 0 ; b < numbers.length ; b++) {\r\n\t\t\t\t\tif (numbers[b] == num) {\r\n\t\t\t\t\t\tok = false;\r\n\t\t\t\t\t\tbreak; \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ok == true) {\r\n\t\t\t\t\tnumbers[a] = num;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumbers = sortNumbers( numbers );\r\n\t}\r\n\tfunction getPart(bytes32 a, uint i) private returns (uint8) { return uint8(byte(bytes32(uint(a) * 2 ** (8 * i)))); }\r\n\tfunction setJackpot() private {\r\n\t\tcurrentJackpot = investmentsValue + extraJackpot;\r\n\t}\r\n\tfunction getInvestorByAddress(address Address) private returns (bool found, uint id) {\r\n\t\tfor ( id=0 ; id < investors.length ; id++ ) {\r\n\t\t\tif (investors[id].owner == Address) {\r\n\t\t\t\treturn (true, id);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (false, 0);\r\n\t}\r\n\tfunction checkNumbers(uint8[3] Numbers) private returns (bool) {\r\n\t\tfor ( uint a = 0 ; a < Numbers.length ; a++ ) {\r\n\t\t\tif (Numbers[a] > drawMaxNumber || Numbers[a] == 0) { return; }\r\n\t\t\tfor ( uint b = 0 ; a < Numbers.length ; a++ ) {\r\n\t\t\t\tif (a != b && Numbers[a] == Numbers[b]) { return; }\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tfunction sortNumbers(uint8[3] numbers) private returns(uint8[3] sNumbers) {\r\n\t\tsNumbers = numbers;\r\n\t\tfor (uint8 i=0; i<numbers.length; i++) {\r\n\t\t\tfor (uint8 j=i+1; j<numbers.length; j++) {\r\n\t\t\t\tif (sNumbers[i] > sNumbers[j]) {\r\n\t\t\t\t\tuint8 t = sNumbers[i];\r\n\t\t\t\t\tsNumbers[i] = sNumbers[j];\r\n\t\t\t\t\tsNumbers[j] = t;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction getNumbersFromBytes(bytes3 Bytes) private returns (uint8[3] Numbers){\r\n\t\tNumbers[0] = uint8(Bytes);\r\n\t\tNumbers[1] = uint8(uint24(Bytes) /256);\r\n\t\tNumbers[2] = uint8(uint24(Bytes) /256/256);\r\n\t}\r\n\tfunction getBytesFromNumbers(uint8[3] Numbers) private returns (bytes3 Bytes) {\r\n\t\treturn bytes3(uint(Numbers[0])+uint(Numbers[1])*256+uint(Numbers[2])*256*256);\r\n\t}\r\n\t/* modifiers */\r\n\tmodifier noContract() {if (tx.origin != msg.sender) { throw; } _ }\r\n\tmodifier noEther() { if (msg.value > 0) { throw; } _ }\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n\tmodifier OnlyEnabled() { if ( ! contractEnabled) { throw; } _ }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DrawPrepare\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Visit\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"GameID\",\"type\":\"uint256\"},{\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"PlayerTickets\",\"outputs\":[{\"name\":\"numbers\",\"type\":\"uint8[3]\"},{\"name\":\"Checked\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InvestWithdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InvestCancel\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CheckTickets\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Number1\",\"type\":\"uint8\"},{\"name\":\"Number2\",\"type\":\"uint8\"},{\"name\":\"Number3\",\"type\":\"uint8\"}],\"name\":\"BuyTicket\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCloseContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"Number1\",\"type\":\"uint8\"},{\"name\":\"Number2\",\"type\":\"uint8\"},{\"name\":\"Number3\",\"type\":\"uint8\"}],\"name\":\"BuyTicketForOther\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InvestAdd\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentGame\",\"outputs\":[{\"name\":\"GameID\",\"type\":\"uint256\"},{\"name\":\"Jackpot\",\"type\":\"uint256\"},{\"name\":\"Start\",\"type\":\"uint256\"},{\"name\":\"End\",\"type\":\"uint256\"},{\"name\":\"Tickets\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"CheckPrize\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Draw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Draws\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"Numbers\",\"type\":\"uint8[3]\"},{\"name\":\"hit3Count\",\"type\":\"uint256\"},{\"name\":\"hit3Value\",\"type\":\"uint256\"},{\"name\":\"hit2Count\",\"type\":\"uint256\"},{\"name\":\"hit2Value\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"name\":\"Investment\",\"type\":\"uint256\"},{\"name\":\"Balance\",\"type\":\"uint256\"},{\"name\":\"Live\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetFee\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_WLBdrawsDBAddr\",\"type\":\"address\"},{\"name\":\"_oldContractLastGame\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Number1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Number2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Number3\",\"type\":\"uint8\"}],\"name\":\"NewTicketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"DeadlineTime\",\"type\":\"uint256\"}],\"name\":\"ContractDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"BlockNumber\",\"type\":\"uint256\"}],\"name\":\"DrawPrepareEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"GameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Number1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Number2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Number3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Hit3Count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Hit3Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Hit2Count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Hit2Value\",\"type\":\"uint256\"}],\"name\":\"DrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"InvestAddEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"InvestCancelEvent\",\"type\":\"event\"}]","ContractName":"WeeklyLotteryB","CompilerVersion":"v0.3.6-2016-08-15-868a167","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000564Ab48Eb279b541A507E818084FF15eE2C25ffb0000000000000000000000000000000000000000000000000000000000000005","Library":"","SwarmSource":""}]}