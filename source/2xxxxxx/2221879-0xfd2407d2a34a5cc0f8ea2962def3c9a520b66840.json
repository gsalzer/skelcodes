{"status":"1","message":"OK","result":[{"SourceCode":"contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract MyToken {\r\n    uint8 public decimals;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function MyToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        );\r\n    function transfer(address _to, uint256 _value);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract DTE {\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint public amountOfHolders;\r\n    uint public totalSellOrders;\r\n    uint public totalBuyOrders;\r\n    uint public totalTokens;\r\n    uint public totalDividendPayOuts;\r\n    string public solidityCompileVersion = \"v0.3.6-2016-09-08-acd334c\";\r\n    string public takerFeePercent = \"1%\";\r\n    string public tokenAddFee = \"0.1 ether\";\r\n\r\n    struct sellOrder {\r\n        bool isOpen;\r\n        bool isTaken;\r\n        address seller;\r\n        uint soldTokenNo;\r\n        uint boughtTokenNo;\r\n        uint256 soldAmount;\r\n        uint256 boughtAmount;\r\n    }\r\n    \r\n    struct buyOrder {\r\n        bool isOpen;\r\n        bool isTaken;\r\n        address buyer;\r\n        uint soldTokenNo;\r\n        uint boughtTokenNo;\r\n        uint256 soldAmount;\r\n        uint256 boughtAmount;\r\n    }\r\n\r\n    mapping (uint => MyToken) public tokensAddress;\r\n    mapping (address => uint) public tokenNoByAddress;\r\n    mapping (uint => sellOrder) public sellOrders;\r\n    mapping (uint => buyOrder) public buyOrders;\r\n    mapping (address => uint) public totalBuyOrdersOf;\r\n    mapping (address => uint) public totalSellOrdersOf;\r\n    mapping (address => mapping(uint => uint)) public BuyOrdersOf;\r\n    mapping (address => mapping(uint => uint)) public SellOrdersOf;\r\n    mapping (uint => uint256) public collectedFees;\r\n    mapping (address => mapping(uint => uint256)) public claimableFeesOf;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (uint => address) public shareHolderByNumber;\r\n    mapping (address => uint) public shareHolderByAddress;\r\n    mapping (address => bool) isHolder;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event SellOrder(uint indexed OrderNo, address indexed Seller, uint SoldTokenNo, uint256 SoldAmount, uint BoughtTokenNo, uint256 BoughtAmount);\r\n    event BuyOrder(uint indexed OrderNo, address indexed Buyer, uint SoldTokenNo, uint256 SoldAmount, uint BoughtTokenNo, uint256 BoughtAmount);\r\n    event OrderTake(uint indexed OrderNo);\r\n    event CancelOrder(uint indexed OrderNo);\r\n    event TokenAdd(uint indexed TokenNumber, address indexed TokenAddress);\r\n    event DividendDistribution(uint indexed TokenNumber, uint256 totalAmount);\r\n\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) throw;\r\n        if (_value == 0) throw;\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        if(isHolder[_to] && balanceOf[msg.sender] == _value) {\r\n            isHolder[msg.sender] = false;\r\n            shareHolderByAddress[_to] = shareHolderByAddress[msg.sender];\r\n            shareHolderByNumber[shareHolderByAddress[_to]] = _to;\r\n        } else if(isHolder[_to] == false && balanceOf[msg.sender] == _value) {\r\n            isHolder[msg.sender] = false;\r\n            isHolder[_to] = true;\r\n            shareHolderByAddress[_to] = shareHolderByAddress[msg.sender];\r\n            shareHolderByNumber[shareHolderByAddress[_to]] = _to;\r\n        } else if(isHolder[_to] == false) {\r\n            isHolder[_to] = true;\r\n            amountOfHolders = amountOfHolders + 1;\r\n            shareHolderByAddress[_to] = amountOfHolders;\r\n            shareHolderByNumber[amountOfHolders] = _to;\r\n        }\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[_from] < _value) throw;\r\n        if (_value == 0) throw;\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        if (_value > allowance[_from][msg.sender]) throw;\r\n        if(isHolder[_to] && balanceOf[_from] == _value) {\r\n            isHolder[_from] = false;\r\n            shareHolderByAddress[_to] = shareHolderByAddress[_from];\r\n            shareHolderByNumber[shareHolderByAddress[_to]] = _to;\r\n        } else if(isHolder[_to] == false && balanceOf[_from] == _value) {\r\n            isHolder[_from] = false;\r\n            isHolder[_to] = true;\r\n            shareHolderByAddress[_to] = shareHolderByAddress[_from];\r\n            shareHolderByNumber[shareHolderByAddress[_to]] = _to;\r\n        } else if(isHolder[_to] == false) {\r\n            isHolder[_to] = true;\r\n            amountOfHolders = amountOfHolders + 1;\r\n            shareHolderByAddress[_to] = amountOfHolders;\r\n            shareHolderByNumber[amountOfHolders] = _to;\r\n        }\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function DTE() {\r\n        balanceOf[msg.sender] = 100000000000000000000;\r\n        amountOfHolders = amountOfHolders + 1;\r\n        shareHolderByNumber[amountOfHolders] = msg.sender;\r\n        shareHolderByAddress[msg.sender] = amountOfHolders;\r\n        isHolder[msg.sender] = true;\r\n        totalSupply = 100000000000000000000;\r\n        name = \"DTE Shares\";\r\n        symbol = \"%\";\r\n        decimals = 18;\r\n        tokensAddress[++totalTokens] = MyToken(this);\r\n        tokenNoByAddress[address(this)] = totalTokens;\r\n    }\r\n\r\n    function DistributeDividends(uint token) {\r\n        if((collectedFees[token] / 100000000000000000000) < 1) throw;\r\n        for(uint i = 1; i < amountOfHolders+1; i++) {\r\n            if(shareHolderByNumber[i] == address(this)) {\r\n                collectedFees[token] += (collectedFees[token] * balanceOf[shareHolderByNumber[i]]) / 100000000000000000000;\r\n            } else {\r\n                claimableFeesOf[shareHolderByNumber[i]][token] += (collectedFees[token] * balanceOf[shareHolderByNumber[i]]) / 100000000000000000000;\r\n            }\r\n        }\r\n        DividendDistribution(token, collectedFees[token]);\r\n        collectedFees[token] = 0;\r\n    }\r\n\r\n    function claimDividendShare(uint tokenNo) {\r\n        if(tokenNo == 0) {\r\n            msg.sender.send(claimableFeesOf[msg.sender][0]);\r\n            claimableFeesOf[msg.sender][0] = 0;\r\n        } else if(tokenNo != 0){\r\n            var token = MyToken(tokensAddress[tokenNo]);\r\n            token.transfer(msg.sender, claimableFeesOf[msg.sender][tokenNo]);\r\n            claimableFeesOf[msg.sender][0] = 0;\r\n        }\r\n    }\r\n\r\n    function () {\r\n        if(msg.value > 0) collectedFees[0] += msg.value;\r\n    }\r\n\r\n    function addToken(address tokenContractAddress) {\r\n        if(msg.value < 100 finney) throw;\r\n        if(tokenNoByAddress[tokenContractAddress] != 0) throw;\r\n        msg.sender.send(msg.value - 100 finney);\r\n        collectedFees[0] += 100 finney;\r\n        tokensAddress[++totalTokens] = MyToken(tokenContractAddress);\r\n        tokenNoByAddress[tokenContractAddress] = totalTokens;\r\n        TokenAdd(totalTokens, tokenContractAddress);\r\n    }\r\n\r\n    function cancelOrder(bool isSellOrder, uint orderNo) {\r\n        if(isSellOrder) {\r\n            if(sellOrders[orderNo].seller != msg.sender) throw;\r\n            sellOrders[orderNo].isOpen = false;\r\n            tokensAddress[sellOrders[orderNo].soldTokenNo].transfer(msg.sender, sellOrders[orderNo].soldAmount);\r\n        } else {\r\n            if(buyOrders[orderNo].buyer != msg.sender) throw;\r\n            buyOrders[orderNo].isOpen = false;\r\n            if(buyOrders[orderNo].soldTokenNo == 0) {\r\n                msg.sender.send(buyOrders[orderNo].soldAmount);\r\n            } else {\r\n                tokensAddress[buyOrders[orderNo].soldTokenNo].transfer(msg.sender, buyOrders[orderNo].soldAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeOrder(bool isSellOrder, uint orderNo, uint256 amount) {\r\n        if(isSellOrder) {\r\n            if(sellOrders[orderNo].isOpen == false) throw;\r\n            var sorder = sellOrders[orderNo];\r\n            uint wantedToken = sorder.boughtTokenNo;\r\n            uint soldToken = sorder.soldTokenNo;\r\n            uint256 soldAmount = sorder.soldAmount;\r\n            uint256 wantedAmount = sorder.boughtAmount;\r\n            if(wantedToken == 0) {\r\n                if(msg.value > (amount + (amount / 100)) || msg.value < amount || msg.value < (amount + (amount / 100)) || amount > wantedAmount) throw;\r\n                if(amount == wantedAmount) {\r\n                    sorder.isTaken = true;\r\n                    sorder.isOpen = false;\r\n                    sorder.seller.send(amount);\r\n                    collectedFees[0] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, sorder.soldAmount);\r\n                } else {\r\n                    uint256 transferAmount = uint256((int(amount) * int(sorder.soldAmount)) / int(sorder.boughtAmount));\r\n                    sorder.soldAmount -= transferAmount;\r\n                    sorder.boughtAmount -= amount;\r\n                    sorder.seller.send(amount);\r\n                    collectedFees[0] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, transferAmount);\r\n                }\r\n            } else {\r\n                if(msg.value > 0) throw;\r\n                uint256 allowance = tokensAddress[wantedToken].allowance(msg.sender, this);\r\n                if(allowance > (amount + (amount / 100)) || allowance < amount || allowance < (amount + (amount / 100)) || amount > wantedAmount) throw;\r\n                if(amount == wantedAmount) {\r\n                    sorder.isTaken = true;\r\n                    sorder.isOpen = false;\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, sorder.seller, amount);\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, this, (amount / 100));\r\n                    collectedFees[wantedToken] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, sorder.soldAmount);\r\n                } else {\r\n                    transferAmount = uint256((int(amount) * int(sorder.soldAmount)) / int(sorder.boughtAmount));\r\n                    sorder.soldAmount -= transferAmount;\r\n                    sorder.boughtAmount -= amount;\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, sorder.seller, amount);\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, this, (amount / 100));\r\n                    collectedFees[wantedToken] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, transferAmount);\r\n                }\r\n            }\r\n        } else {\r\n            if(buyOrders[orderNo].isOpen == false) throw;\r\n            var border = buyOrders[orderNo];\r\n            wantedToken = border.boughtTokenNo;\r\n            soldToken = border.soldTokenNo;\r\n            soldAmount = border.soldAmount;\r\n            wantedAmount = border.boughtAmount;\r\n            if(wantedToken == 0) {\r\n                if(msg.value > (amount + (amount / 100)) || msg.value < amount || msg.value < (amount + (amount / 100)) || amount > wantedAmount) throw;\r\n                if(amount == wantedAmount) {\r\n                    border.isTaken = true;\r\n                    border.isOpen = false;\r\n                    border.buyer.send(amount);\r\n                    collectedFees[0] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, border.soldAmount);\r\n                } else {\r\n                    transferAmount = uint256((int(amount) * int(border.soldAmount)) / int(border.boughtAmount));\r\n                    border.soldAmount -= transferAmount;\r\n                    border.boughtAmount -= amount;\r\n                    border.buyer.send(amount);\r\n                    collectedFees[0] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, transferAmount);\r\n                }\r\n            } else {\r\n                if(msg.value > 0) throw;\r\n                allowance = tokensAddress[wantedToken].allowance(msg.sender, this);\r\n                if(allowance > (amount + (amount / 100)) || allowance < amount || allowance < (amount + (amount / 100)) || amount > wantedAmount) throw;\r\n                if(amount == wantedAmount) {\r\n                    border.isTaken = true;\r\n                    border.isOpen = false;\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, border.buyer, amount);\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, this, (amount / 100));\r\n                    collectedFees[wantedToken] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, border.soldAmount);\r\n                } else {\r\n                    transferAmount = uint256((int(amount) * int(border.soldAmount)) / int(border.boughtAmount));\r\n                    border.soldAmount -= transferAmount;\r\n                    border.boughtAmount -= amount;\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, border.buyer, amount);\r\n                    tokensAddress[wantedToken].transferFrom(msg.sender, this, (amount / 100));\r\n                    collectedFees[wantedToken] += amount / 100;\r\n                    tokensAddress[soldToken].transfer(msg.sender, transferAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function newOrder(bool isSellOrder,\r\n                      uint soldTokenNo,\r\n                      uint boughtTokenNo,\r\n                      uint256 soldAmount,\r\n                      uint256 boughtAmount\r\n                      ) {\r\n        if(soldTokenNo == boughtTokenNo) throw;\r\n        if(isSellOrder) {\r\n            if(soldTokenNo == 0) throw;\r\n            MyToken token = tokensAddress[soldTokenNo];\r\n            uint256 allowance = token.allowance(msg.sender, this);\r\n            if(soldTokenNo > totalTokens || allowance < soldAmount) throw;\r\n            token.transferFrom(msg.sender, this, soldAmount);\r\n            sellOrders[++totalSellOrders] = sellOrder({\r\n                isOpen: true,\r\n                isTaken: false,\r\n                seller: msg.sender,\r\n                soldTokenNo: soldTokenNo,\r\n                boughtTokenNo: boughtTokenNo,\r\n                soldAmount: soldAmount,\r\n                boughtAmount: boughtAmount\r\n            });\r\n            SellOrdersOf[msg.sender][++totalSellOrdersOf[msg.sender]] = totalSellOrders;\r\n            SellOrder(totalSellOrders, msg.sender, soldTokenNo, soldAmount, boughtTokenNo, boughtAmount);\r\n        } else {\r\n            if(soldTokenNo == 0)  {\r\n                if(msg.value > soldAmount) throw;\r\n                allowance = msg.value;\r\n            } else if(soldTokenNo > totalTokens) {\r\n                throw;\r\n            } else {\r\n                token = tokensAddress[soldTokenNo];\r\n                allowance = token.allowance(msg.sender, this);\r\n                if(soldAmount < allowance) throw;\r\n                token.transferFrom(msg.sender, this, soldAmount);\r\n            }\r\n            buyOrders[++totalBuyOrders] = buyOrder({\r\n                isOpen: true,\r\n                isTaken: false,\r\n                buyer: msg.sender,\r\n                soldTokenNo: soldTokenNo,\r\n                boughtTokenNo: boughtTokenNo,\r\n                soldAmount: soldAmount,\r\n                boughtAmount: boughtAmount\r\n            });\r\n            BuyOrdersOf[msg.sender][++totalBuyOrdersOf[msg.sender]] = totalBuyOrders;\r\n            BuyOrder(totalSellOrders, msg.sender, soldTokenNo, soldAmount, boughtTokenNo, boughtAmount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenNo\",\"type\":\"uint256\"}],\"name\":\"claimDividendShare\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareHolderByNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareHolderByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"name\":\"soldTokenNo\",\"type\":\"uint256\"},{\"name\":\"boughtTokenNo\",\"type\":\"uint256\"},{\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"newOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOrders\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isTaken\",\"type\":\"bool\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"soldTokenNo\",\"type\":\"uint256\"},{\"name\":\"boughtTokenNo\",\"type\":\"uint256\"},{\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPayOuts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOrders\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isTaken\",\"type\":\"bool\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"soldTokenNo\",\"type\":\"uint256\"},{\"name\":\"boughtTokenNo\",\"type\":\"uint256\"},{\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuyOrdersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"DistributeDividends\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"name\":\"orderNo\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBuyOrdersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SellOrdersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"solidityCompileVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSellOrdersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableFeesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddFee\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"name\":\"orderNo\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSellOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenNoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"OrderNo\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"SoldTokenNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SoldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BoughtTokenNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BoughtAmount\",\"type\":\"uint256\"}],\"name\":\"SellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"OrderNo\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"SoldTokenNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SoldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BoughtTokenNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BoughtAmount\",\"type\":\"uint256\"}],\"name\":\"BuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"OrderNo\",\"type\":\"uint256\"}],\"name\":\"OrderTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"OrderNo\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"TokenNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"TokenNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"DividendDistribution\",\"type\":\"event\"}]","ContractName":"DTE","CompilerVersion":"v0.3.6-nightly.2016.9.8+commit.f5a513a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}