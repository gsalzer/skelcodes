{"status":"1","message":"OK","result":[{"SourceCode":"/* Deployment:\r\nOwner: 0xeb5fa6cbf2aca03a0df228f2df67229e2d3bd01e\r\nLast address: 0x401e28717a6a35a50938bc7f290f2678fc0a2816\r\nABI: [{\"constant\":true,\"inputs\":[],\"name\":\"gotParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"uint256[]\"},{\"name\":\"_x0\",\"type\":\"uint256\"},{\"name\":\"_Ix\",\"type\":\"uint256\"},{\"name\":\"_Iy\",\"type\":\"uint256\"}],\"name\":\"withdrawStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeys2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeys1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFinal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pubkey1\",\"type\":\"uint256\"},{\"name\":\"_pubkey2\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_participants\",\"type\":\"uint256\"},{\"name\":\"_payment\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogDebug\",\"type\":\"event\"}]\r\nOptimized: yes\r\nSolidity version: v0.4.4\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract ArithLib {\r\n\r\n    function jdouble(uint _ax, uint _ay, uint _az) constant returns (uint, uint, uint);\r\n    function jadd(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) constant returns (uint, uint, uint);\r\n    function jsub(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) constant returns (uint, uint, uint);\r\n    function jmul(uint _bx, uint _by, uint _bz, uint _n) constant returns (uint, uint, uint);\r\n    function jexp(uint _b, uint _e, uint _m) constant returns (uint);\r\n    function jrecover_y(uint _x, uint _y_bit) constant returns (uint);\r\n    function jdecompose(uint _q0, uint _q1, uint _q2) constant returns (uint, uint);\r\n    function isbit(uint _data, uint _bit) constant returns (uint);\r\n    function hash_pubkey_to_pubkey(uint _pub1, uint _pub2) constant returns (uint, uint);\r\n}\r\n\r\ncontract Laundromat {\r\n\r\n    struct WithdrawInfo {\r\n\r\n        address sender;\r\n        uint Ix;\r\n        uint Iy;\r\n        uint[] signature;\r\n        uint[] ring1;\r\n        uint[] ring2;\r\n        \r\n        uint step;\r\n        uint prevStep;\r\n    }\r\n\r\n    uint constant internal safeGas = 25000;\r\n    uint constant internal P = 115792089237316195423570985008687907853269984665640564039457584007908834671663;\r\n    uint constant internal Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240;\r\n    uint constant internal Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424;\r\n\r\n    address private owner;\r\n    bool private atomicLock;\r\n    \r\n    address internal constant arithAddress = 0x600ad7b57f3e6aeee53acb8704a5ed50b60cacd6;\r\n    ArithLib private arithContract;\r\n    mapping (uint => WithdrawInfo) private withdraws;\r\n    mapping (uint => bool) private consumed;\r\n\r\n    uint public participants = 0;\r\n    uint public payment = 0;\r\n    uint public gotParticipants = 0;\r\n    uint[] public pubkeys1;\r\n    uint[] public pubkeys2;\r\n\r\n    event LogDebug(string message);\r\n\r\n    //create new mixing contract with _participants amount of mixing participants,\r\n    //_payment - expected payment from each participant.\r\n    function Laundromat(uint _participants, uint _payment) {\r\n        owner = msg.sender;\r\n        arithContract = ArithLib(arithAddress);\r\n\r\n        participants = _participants;\r\n        payment = _payment;\r\n    }\r\n    \r\n    function safeSend(address addr, uint value) internal {\r\n\r\n        if(atomicLock) throw;\r\n        atomicLock = true;\r\n        if (!(addr.call.gas(safeGas).value(value)())) {\r\n            atomicLock = false;\r\n            throw;\r\n        }\r\n        atomicLock = false;\r\n    }\r\n\r\n    //add new participant to the mixing\r\n    function deposit(uint _pubkey1, uint _pubkey2) payable {\r\n        //if(msg.value != payment) throw;\r\n        if(gotParticipants >= participants) throw;\r\n\r\n        pubkeys1.push(_pubkey1);\r\n        pubkeys2.push(_pubkey2);\r\n        gotParticipants++;\r\n    }\r\n\r\n    //get funds from the mixer. Requires valid signature.\r\n    function withdrawStart(uint[] _signature, uint _x0, uint _Ix, uint _Iy) {\r\n        if(gotParticipants < participants) throw;\r\n        if(consumed[uint(sha3([_Ix, _Iy]))]) throw;\r\n\r\n        WithdrawInfo withdraw = withdraws[uint(msg.sender)];\r\n\r\n        withdraw.sender = msg.sender;\r\n        withdraw.Ix = _Ix;\r\n        withdraw.Iy = _Iy;\r\n        withdraw.signature = _signature;\r\n\r\n        withdraw.ring1.length = 0;\r\n        withdraw.ring2.length = 0;\r\n        withdraw.ring1.push(_x0);\r\n        withdraw.ring2.push(uint(sha3(_x0)));\r\n        \r\n        withdraw.step = 1;\r\n        withdraw.prevStep = 0;\r\n    }\r\n\r\n    function withdrawStep() {\r\n        WithdrawInfo withdraw = withdraws[uint(msg.sender)];\r\n\r\n        //throw if existing witdhraw not started\r\n        if(withdraw.step < 1) throw;\r\n        if(withdraw.step > participants) throw;\r\n        if(consumed[uint(sha3([withdraw.Ix, withdraw.Iy]))]) throw;\r\n\r\n        uint k1x;\r\n        uint k1y;\r\n        uint k1z;\r\n        uint k2x;\r\n        uint k2y;\r\n        uint k2z;\r\n        uint pub1x;\r\n        uint pub1y;\r\n        \r\n        (k1x, k1y, k1z) = arithContract.jmul(Gx, Gy, 1,\r\n            withdraw.signature[withdraw.prevStep % participants]);\r\n        (k2x, k2y, k2z) = arithContract.jmul(\r\n            pubkeys1[withdraw.step % participants],\r\n            pubkeys2[withdraw.step % participants], 1,\r\n            withdraw.ring2[withdraw.prevStep % participants]);\r\n        //ksub1\r\n        (k1x, k1y, k1z) = arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z);\r\n        (pub1x, pub1y) = arithContract.jdecompose(k1x, k1y, k1z);\r\n        //k3\r\n        (k1x, k1y) = arithContract.hash_pubkey_to_pubkey(\r\n            pubkeys1[withdraw.step % participants],\r\n            pubkeys2[withdraw.step % participants]);\r\n        //k4 = ecmul(k3, s[prev_i])\r\n        (k1x, k1y, k1z) = arithContract.jmul(k1x, k1y, 1,\r\n            withdraw.signature[withdraw.prevStep % participants]);\r\n        //k5 = ecmul(I, e[prev_i].right)\r\n        (k2x, k2y, k2z) = arithContract.jmul(withdraw.Ix, withdraw.Iy, 1,\r\n            withdraw.ring2[withdraw.prevStep % participants]);\r\n        //ksub2\r\n        (k1x, k1y, k1z) = arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z);\r\n        //pub2x, pub2y\r\n        (k1x, k1y) = arithContract.jdecompose(k1x, k1y, k1z);\r\n        withdraw.ring1.push(uint(sha3([uint(withdraw.sender), pub1x, pub1y, k1x, k1y])));\r\n        withdraw.ring2.push(uint(sha3(uint(sha3([uint(withdraw.sender), pub1x, pub1y, k1x, k1y])))));\r\n        withdraw.step++;\r\n        withdraw.prevStep++;\r\n    }\r\n    \r\n    function withdrawFinal() returns (bool) {\r\n        WithdrawInfo withdraw = withdraws[uint(msg.sender)];\r\n        \r\n        if(withdraw.step != (participants + 1)) throw;\r\n        if(consumed[uint(sha3([withdraw.Ix, withdraw.Iy]))]) throw;\r\n        if(withdraw.ring1[participants] != withdraw.ring1[0]) {\r\n            \r\n            LogDebug(\"Wrong signature\");\r\n            return false;\r\n        }\r\n        if(withdraw.ring2[participants] != withdraw.ring2[0]) {\r\n            \r\n            LogDebug(\"Wrong signature\");\r\n            return false;\r\n        }\r\n        \r\n        withdraw.step++;\r\n        consumed[uint(sha3([withdraw.Ix, withdraw.Iy]))] = true;\r\n        safeSend(withdraw.sender, payment);\r\n        return true;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gotParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"uint256[]\"},{\"name\":\"_x0\",\"type\":\"uint256\"},{\"name\":\"_Ix\",\"type\":\"uint256\"},{\"name\":\"_Iy\",\"type\":\"uint256\"}],\"name\":\"withdrawStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeys2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeys1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFinal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pubkey1\",\"type\":\"uint256\"},{\"name\":\"_pubkey2\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_participants\",\"type\":\"uint256\"},{\"name\":\"_payment\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogDebug\",\"type\":\"event\"}]","ContractName":"Laundromat","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000003e8","Library":"","SwarmSource":""}]}