{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.6;\r\n\r\ncontract DXF_Tokens{\r\n\r\n  //States\r\n  bool public dxfOpen=true;\r\n  bool public refundState;\r\n  bool public transferLocked=true;\r\n\r\n  uint256 public startingDateFunding;\r\n  uint256 public closingDateFunding;\r\n  //Maximum number of participants\r\n  uint256 public constant maxNumberMembers=5000;\r\n  //Token caps, this includes the 12500 tokens that will be attributed to former users (VIPs)\r\n  uint256 public totalTokens;\r\n  uint256 public constant tokensCreationMin = 25000 ether;\r\n  uint256 public constant tokensCreationCap = 75000 ether;\r\n  //Cap of 12500 ethers worth of tokens to be distributed \r\n  //to previous DO members in exchange for their rouleth accounts\r\n  uint256 public remainingTokensVIPs=12500 ether;\r\n  uint256 public constant tokensCreationVIPsCap = 12500 ether; \r\n\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => bool) vips;\r\n  mapping (address => uint256) indexMembers;\r\n  \r\n  struct Member\r\n  {\r\n    address member;\r\n    uint timestamp;\r\n    uint initial_value;\r\n  }\r\n  Member[] public members;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Refund(address indexed _to, uint256 _value);\r\n  event failingRefund(address indexed _to, uint256 _value);\r\n  event VipMigration(address indexed _vip, uint256 _value);\r\n  event newMember(address indexed _from);\r\n\r\n  // Token parameters\r\n  string public constant name = \"DXF - Decentralized eXperience Friends\";\r\n  string public constant symbol = \"DXF\";\r\n  uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\r\n\r\n  address public admin;\r\n  address public multisigDXF;\r\n\r\n  modifier onlyAdmin()\r\n  {\r\n    if (msg.sender!=admin) throw;\r\n    _;\r\n  }\r\n\r\n  function DXF_Tokens()\r\n  {\r\n    admin = msg.sender;\r\n    startingDateFunding=now;\r\n    multisigDXF=0x7a992f486fbc7C03a3f2f862Ad260f158C5c5486; //or switch to constructor param\r\n    //increment array by 1 for indexes\r\n    members.push(Member(0,0,0));\r\n  }\r\n\r\n\r\n  //empty fallback\r\n  function ()\r\n    {\r\n      throw;\r\n    }\r\n\r\n  //USER FUNCTIONS  \r\n  /// @notice Create tokens when funding is active.\r\n  /// @notice By using this function you accept the terms of DXF\r\n  /// @dev Required state: Funding Active\r\n  /// @dev State transition: -> Funding Success (only if cap reached)\r\n  function acceptTermsAndJoinDXF() payable external \r\n  {\r\n    // refuse if more than 12 months have passed\r\n    if (now>startingDateFunding+365 days) throw;\r\n    // Abort if DXF is not open.\r\n    if (!dxfOpen) throw;\r\n    // verify if the account is not a VIP account\r\n    if (vips[msg.sender]) throw;\r\n    // Do not allow creating less than 10 ether or more than the cap tokens.\r\n    if (msg.value < 10 ether) throw;\r\n    if (msg.value > (tokensCreationCap - totalTokens)) throw;\r\n    // Enforce cap of 10 000 ethers per address / individual\r\n    if (msg.value > (10000 ether - balances[msg.sender])) throw;\r\n    // Register member\r\n    if (balances[msg.sender]==0)\r\n      {\r\n        newMember(msg.sender); //event\r\n\tindexMembers[msg.sender]=members.length;\r\n\tmembers.push(Member(msg.sender,now,msg.value));\r\n      }\r\n    else\r\n      {\r\n\tmembers[indexMembers[msg.sender]].initial_value+=msg.value;\r\n      }\r\n    if (members.length>maxNumberMembers) throw;\r\n    //Send the funds to the MultiSig Wallet\r\n    if (multisigDXF==0) throw;\r\n    if (!multisigDXF.send(msg.value)) throw;\r\n    // Assign new tokens to the sender\r\n    uint numTokens = msg.value;\r\n    totalTokens += numTokens;\r\n    // Do not allow creating tokens if we don't leave enough for the VIPs\r\n    if ( (tokensCreationCap-totalTokens) < remainingTokensVIPs ) throw;\r\n    balances[msg.sender] += numTokens;\r\n    // Log token creation event\r\n    Transfer(0, msg.sender, numTokens);\r\n  }\r\n\r\n\r\n\r\n  //NOT INCLUDED IN LATEST VERSION\r\n  //since we move the funds to multisig\r\n  //refund will be with payback()\r\n  /* /// @notice Get back the ether sent during the funding in case the funding */\r\n  /* /// has not reached the minimum level. */\r\n  /* /// @dev Required state: refund true */\r\n  /* function refund() */\r\n  /* { */\r\n  /*   // Abort if not in refund state */\r\n  /*   if (!refundState) throw; */\r\n  /*   // Not refunded for VIP, we will do a manual refund for them */\r\n  /*   // via the payback function */\r\n  /*   if (vips[msg.sender]) throw; */\r\n  /*   uint value = balances[msg.sender]; */\r\n  /*   if (value == 0) throw; */\r\n  /*   balances[msg.sender] = 0; */\r\n  /*   totalTokens -= value; */\r\n  /*   delete members[indexMembers[msg.sender]]; */\r\n  /*   indexMembers[msg.sender]=0; */\r\n  /*   Refund(msg.sender, value); */\r\n  /*   if (!msg.sender.send(value)) throw; */\r\n  /* } */\r\n\r\n\r\n  //@notice Full Tranfer of DX tokens from sender to '_to'\r\n  //@dev only active if tranfer has been unlocked\r\n  //@param _to address of recipient\r\n  //@param _value amount to tranfer\r\n  //@return success of tranfer ?\r\n  function fullTransfer(address _to) returns (bool)\r\n  {\r\n    // Cancel if tranfer is not allowed\r\n    if (transferLocked) throw;\r\n    if (balances[_to]!=0) throw;\r\n    if (balances[msg.sender]!=0)\r\n      {\r\n\tuint senderBalance = balances[msg.sender];\r\n\tbalances[msg.sender] = 0;\r\n\tbalances[_to]=senderBalance;\r\n\tif (vips[msg.sender])\r\n\t  {\r\n\t    vips[_to]=true;\r\n\t    vips[msg.sender]=false;\r\n\t  }\r\n\tmembers[indexMembers[msg.sender]].member=_to;\r\n\tindexMembers[_to]=indexMembers[msg.sender];\r\n\tindexMembers[msg.sender]=0;\r\n\tTransfer(msg.sender, _to, senderBalance);\r\n\treturn true;\r\n      }\r\n    else\r\n      {\r\n\treturn false;\r\n      }\r\n  }\r\n\r\n\r\n  //ADMIN FUNCTIONS\r\n\r\n\r\n  //@notice called by Admin to manually register migration of previous DO\r\n  //@dev can not be called with a _vip address that is already investor\r\n  //@dev can be called even after the DO is sealed\r\n  //@param _value : balance of VIP at DXDO's creation date\r\n  function registerVIP(address _vip, address _vip_confirm, uint256 _previous_balance)\r\n    onlyAdmin\r\n  {\r\n    if (_vip==0) throw;\r\n    if (_vip!=_vip_confirm) throw;\r\n    //don't allow migration to a non empty address\r\n    if (balances[_vip]!=0) throw; \r\n    if (_previous_balance==0) throw;\r\n    uint numberTokens=_previous_balance+(_previous_balance/3);\r\n    totalTokens+=numberTokens;\r\n    //too many tokens created via VIP migration\r\n    if (numberTokens>remainingTokensVIPs) throw;     \r\n    remainingTokensVIPs-=numberTokens;\r\n    balances[_vip]+=numberTokens;\r\n    indexMembers[_vip]=members.length;\r\n    members.push(Member(_vip,now,_previous_balance));\r\n    vips[_vip]=true;\r\n    VipMigration(_vip,_previous_balance);\r\n  }\r\n\r\n\r\n  /// @notice Pay back the ether contributed to the DAO\r\n  function paybackContribution(uint i)\r\n    payable\r\n    onlyAdmin\r\n  {\r\n    address memberRefunded=members[i].member;\r\n    if (memberRefunded==0) throw;\r\n    uint amountTokens=msg.value;\r\n    if (vips[memberRefunded]) \r\n      {\r\n\tamountTokens+=amountTokens/3;\r\n\tremainingTokensVIPs+=amountTokens;\r\n      }\r\n    if (amountTokens>balances[memberRefunded]) throw;\r\n    balances[memberRefunded]-=amountTokens;\r\n    totalTokens-=amountTokens;\r\n    if (balances[memberRefunded]==0) \r\n      {\r\n\tdelete members[i];\r\n\tvips[memberRefunded]=false;\r\n\tindexMembers[memberRefunded]=0;\r\n      }\r\n    if (!memberRefunded.send(msg.value))\r\n      {\r\n        failingRefund(memberRefunded,msg.value);\r\n      }\r\n    Refund(memberRefunded,msg.value);\r\n  }\r\n\r\n\r\n  function changeAdmin(address _admin, address _admin_confirm)\r\n    onlyAdmin\r\n  {\r\n    if (_admin!=_admin_confirm) throw;\r\n    if (_admin==0) throw;\r\n    admin=_admin;\r\n  }\r\n\r\n  //@notice called to seal the DO\r\n  //@dev can not be opened again, marks the end of the fundraising \r\n  //and the recruitment in the DO\r\n  function closeFunding()\r\n    onlyAdmin\r\n  {\r\n    closingDateFunding=now;\r\n    dxfOpen=false;\r\n    //verify if the cap has been reached\r\n    //if not : refund mode\r\n    if (totalTokens<tokensCreationMin)\r\n      {\r\n\trefundState=true;\r\n      }\r\n    else\r\n      {\r\n        //send balance, but should not be necessary.      \r\n\tif(!admin.send(this.balance)) throw;\r\n      }\r\n  }\r\n\r\n  //NOT INCLUDED\r\n  /* function reopenDO() */\r\n  /*   onlyAdmin */\r\n  /* { */\r\n  /*   dxfOpen=true; */\r\n  /*   transferLocked=true; */\r\n  /* } */\r\n\r\n  function allowTransfers()\r\n    onlyAdmin\r\n  {\r\n    transferLocked=false;\r\n  }\r\n\r\n  function disableTransfers()\r\n    onlyAdmin\r\n  {\r\n    transferLocked=true;\r\n  }\r\n\r\n\r\n  //Constant Functions\r\n  function totalSupply() external constant returns (uint256) \r\n  {\r\n    return totalTokens;\r\n  }\r\n\r\n  function balanceOf(address _owner) external constant returns (uint256) \r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function accountInformation(address _owner) external constant returns (bool vip, uint balance_dxf, uint share_dxf_per_thousands) \r\n  {\r\n    vip=vips[_owner];\r\n    balance_dxf=balances[_owner]/(1 ether);\r\n    share_dxf_per_thousands=1000*balances[_owner]/totalTokens;\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"refundState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accountInformation\",\"outputs\":[{\"name\":\"vip\",\"type\":\"bool\"},{\"name\":\"balance_dxf\",\"type\":\"uint256\"},{\"name\":\"share_dxf_per_thousands\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_admin_confirm\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeFunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingDateFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"fullTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCreationVIPsCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"paybackContribution\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vip\",\"type\":\"address\"},{\"name\":\"_vip_confirm\",\"type\":\"address\"},{\"name\":\"_previous_balance\",\"type\":\"uint256\"}],\"name\":\"registerVIP\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"initial_value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dxfOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigDXF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingDateFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptTermsAndJoinDXF\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensVIPs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"failingRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_vip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"VipMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"newMember\",\"type\":\"event\"}]","ContractName":"DXF_Tokens","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}