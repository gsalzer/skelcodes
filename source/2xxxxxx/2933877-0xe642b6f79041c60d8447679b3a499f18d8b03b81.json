{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.0;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setConfig(bytes32 _config);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if(address(OAR)==0) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    \r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\ncontract Dice is usingOraclize {\r\n\r\n    uint constant pwin = 2500; //probability of winning (10000 = 100%)\r\n    uint constant edge = 190; //edge percentage (10000 = 100%)\r\n    uint constant maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\r\n    uint constant minBet = 200 finney;\r\n    uint constant maxInvestors = 10; //maximum number of investors\r\n    uint constant houseEdge = 90; //edge percentage (10000 = 100%)\r\n    uint constant divestFee = 50; //divest fee percentage (10000 = 100%)\r\n    uint constant emergencyWithdrawalRatio = 10; //ratio percentage (100 = 100%)\r\n\r\n    uint safeGas = 2300;\r\n    uint constant ORACLIZE_GAS_LIMIT = 175000;\r\n    uint constant INVALID_BET_MARKER = 99999;\r\n    uint constant EMERGENCY_TIMEOUT = 3 days;\r\n\r\n    struct Investor {\r\n        address investorAddress;\r\n        uint amountInvested;\r\n        bool votedForEmergencyWithdrawal;\r\n    }\r\n\r\n    struct Bet {\r\n        address playerAddress;\r\n        uint amountBet;\r\n        uint numberRolled;\r\n    }\r\n\r\n    struct WithdrawalProposal {\r\n        address toAddress;\r\n        uint atTime;\r\n    }\r\n\r\n    //Starting at 1\r\n    mapping(address => uint) public investorIDs;\r\n    mapping(uint => Investor) public investors;\r\n    uint public numInvestors = 0;\r\n\r\n    uint public invested = 0;\r\n\r\n    address public owner;\r\n    address public houseAddress;\r\n    bool public isStopped;\r\n\r\n    WithdrawalProposal public proposedWithdrawal;\r\n\r\n    mapping (bytes32 => Bet) public bets;\r\n    bytes32[] public betsKeys;\r\n\r\n    uint public investorsProfit = 0;\r\n    uint public investorsLosses = 0;\r\n    bool profitDistributed;\r\n\r\n    event LOG_NewBet(address playerAddress, uint amount);\r\n    event LOG_BetWon(address playerAddress, uint numberRolled, uint amountWon);\r\n    event LOG_BetLost(address playerAddress, uint numberRolled);\r\n    event LOG_EmergencyWithdrawalProposed();\r\n    event LOG_EmergencyWithdrawalFailed(address withdrawalAddress);\r\n    event LOG_EmergencyWithdrawalSucceeded(address withdrawalAddress, uint amountWithdrawn);\r\n    event LOG_FailedSend(address receiver, uint amount);\r\n    event LOG_ZeroSend();\r\n    event LOG_InvestorEntrance(address investor, uint amount);\r\n    event LOG_InvestorCapitalUpdate(address investor, int amount);\r\n    event LOG_InvestorExit(address investor, uint amount);\r\n    event LOG_ContractStopped();\r\n    event LOG_ContractResumed();\r\n    event LOG_OwnerAddressChanged(address oldAddr, address newOwnerAddress);\r\n    event LOG_HouseAddressChanged(address oldAddr, address newHouseAddress);\r\n    event LOG_GasLimitChanged(uint oldGasLimit, uint newGasLimit);\r\n    event LOG_EmergencyAutoStop();\r\n    event LOG_EmergencyWithdrawalVote(address investor, bool vote);\r\n    event LOG_ValueIsTooBig();\r\n    event LOG_SuccessfulSend(address addr, uint amount);\r\n\r\n    function Dice() {\r\n        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);\r\n        owner = msg.sender;\r\n        houseAddress = msg.sender;\r\n    }\r\n\r\n    //SECTION I: MODIFIERS AND HELPER FUNCTIONS\r\n\r\n    //MODIFIERS\r\n\r\n    modifier onlyIfNotStopped {\r\n        if (isStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfStopped {\r\n        if (!isStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyInvestors {\r\n        if (investorIDs[msg.sender] == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotInvestors {\r\n        if (investorIDs[msg.sender] != 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (owner != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOraclize {\r\n        if (msg.sender != oraclize_cbAddress()) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyMoreThanMinInvestment {\r\n        if (msg.value <= getMinInvestment()) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyMoreThanZero {\r\n        if (msg.value == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBetExist(bytes32 myid) {\r\n        if(bets[myid].playerAddress == address(0x0)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBetSizeIsStillCorrect(bytes32 myid) {\r\n        if ((((bets[myid].amountBet * ((10000 - edge) - pwin)) / pwin ) <= (maxWin * getBankroll()) / 10000)  && (bets[myid].amountBet >= minBet)) {\r\n             _;\r\n        }\r\n        else {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER;\r\n            safeSend(bets[myid].playerAddress, bets[myid].amountBet);\r\n            return;\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidRoll(bytes32 myid, string result) {\r\n        uint numberRolled = parseInt(result);\r\n        if ((numberRolled < 1 || numberRolled > 10000) && bets[myid].numberRolled == 0) {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER;\r\n            safeSend(bets[myid].playerAddress, bets[myid].amountBet);\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyWinningBets(uint numberRolled) {\r\n        if (numberRolled - 1 < pwin) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyLosingBets(uint numberRolled) {\r\n        if (numberRolled - 1 >= pwin) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyAfterProposed {\r\n        if (proposedWithdrawal.toAddress == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfProfitNotDistributed {\r\n        if (!profitDistributed) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidGas(uint newGasLimit) {\r\n        if (ORACLIZE_GAS_LIMIT + newGasLimit < ORACLIZE_GAS_LIMIT) throw;\r\n        if (newGasLimit < 25000) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfNotProcessed(bytes32 myid) {\r\n        if (bets[myid].numberRolled > 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfEmergencyTimeOutHasPassed {\r\n        if (proposedWithdrawal.atTime + EMERGENCY_TIMEOUT > now) throw;\r\n        _;\r\n    }\r\n\r\n    modifier investorsInvariant {\r\n        _;\r\n        if (numInvestors > maxInvestors) throw;\r\n    }\r\n\r\n    //CONSTANT HELPER FUNCTIONS\r\n\r\n    function getBankroll()\r\n        constant\r\n        returns(uint) {\r\n\r\n        if ((invested < investorsProfit) ||\r\n            (invested + investorsProfit < invested) ||\r\n            (invested + investorsProfit < investorsLosses)) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return invested + investorsProfit - investorsLosses;\r\n        }\r\n    }\r\n\r\n    function getMinInvestment()\r\n        constant\r\n        returns(uint) {\r\n\r\n        if (numInvestors == maxInvestors) {\r\n            uint investorID = searchSmallestInvestor();\r\n            return getBalance(investors[investorID].investorAddress);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getStatus()\r\n        constant\r\n        returns(uint, uint, uint, uint, uint, uint, uint, uint) {\r\n\r\n        uint bankroll = getBankroll();\r\n        uint minInvestment = getMinInvestment();\r\n        return (bankroll, pwin, edge, maxWin, minBet, (investorsProfit - investorsLosses), minInvestment, betsKeys.length);\r\n    }\r\n\r\n    function getBet(uint id)\r\n        constant\r\n        returns(address, uint, uint) {\r\n\r\n        if (id < betsKeys.length) {\r\n            bytes32 betKey = betsKeys[id];\r\n            return (bets[betKey].playerAddress, bets[betKey].amountBet, bets[betKey].numberRolled);\r\n        }\r\n    }\r\n\r\n    function numBets()\r\n        constant\r\n        returns(uint) {\r\n\r\n        return betsKeys.length;\r\n    }\r\n\r\n    function getMinBetAmount()\r\n        constant\r\n        returns(uint) {\r\n\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        return oraclizeFee + minBet;\r\n    }\r\n\r\n    function getMaxBetAmount()\r\n        constant\r\n        returns(uint) {\r\n\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        uint betValue =  (maxWin * getBankroll()) * pwin / (10000 * (10000 - edge - pwin));\r\n        return betValue + oraclizeFee;\r\n    }\r\n\r\n    function getLossesShare(address currentInvestor)\r\n        constant\r\n        returns (uint) {\r\n\r\n        return investors[investorIDs[currentInvestor]].amountInvested * (investorsLosses) / invested;\r\n    }\r\n\r\n    function getProfitShare(address currentInvestor)\r\n        constant\r\n        returns (uint) {\r\n\r\n        return investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invested;\r\n    }\r\n\r\n    function getBalance(address currentInvestor)\r\n        constant\r\n        returns (uint) {\r\n\r\n        uint invested = investors[investorIDs[currentInvestor]].amountInvested;\r\n        uint profit = getProfitShare(currentInvestor);\r\n        uint losses = getLossesShare(currentInvestor);\r\n\r\n        if ((invested + profit < profit) ||\r\n            (invested + profit < invested) ||\r\n            (invested + profit < losses))\r\n            return 0;\r\n        else\r\n            return invested + profit - losses;\r\n    }\r\n\r\n    function searchSmallestInvestor()\r\n        constant\r\n        returns(uint) {\r\n\r\n        uint investorID = 1;\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            if (getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)) {\r\n                investorID = i;\r\n            }\r\n        }\r\n\r\n        return investorID;\r\n    }\r\n\r\n    function changeOraclizeProofType(byte _proofType)\r\n        onlyOwner {\r\n\r\n        if (_proofType == 0x00) throw;\r\n        oraclize_setProof( _proofType |  proofStorage_IPFS );\r\n    }\r\n\r\n    function changeOraclizeConfig(bytes32 _config)\r\n        onlyOwner {\r\n\r\n        oraclize_setConfig(_config);\r\n    }\r\n\r\n    // PRIVATE HELPERS FUNCTION\r\n\r\n    function safeSend(address addr, uint value)\r\n        private {\r\n\r\n        if (value == 0) {\r\n            LOG_ZeroSend();\r\n            return;\r\n        }\r\n\r\n        if (this.balance < value) {\r\n            LOG_ValueIsTooBig();\r\n            return;\r\n        }\r\n\r\n        if (!(addr.call.gas(safeGas).value(value)())) {\r\n            LOG_FailedSend(addr, value);\r\n            if (addr != houseAddress) {\r\n                //Forward to house address all change\r\n                if (!(houseAddress.call.gas(safeGas).value(value)())) LOG_FailedSend(houseAddress, value);\r\n            }\r\n        }\r\n\r\n        LOG_SuccessfulSend(addr,value);\r\n    }\r\n\r\n    function addInvestorAtID(uint id)\r\n        private {\r\n\r\n        investorIDs[msg.sender] = id;\r\n        investors[id].investorAddress = msg.sender;\r\n        investors[id].amountInvested = msg.value;\r\n        invested += msg.value;\r\n\r\n        LOG_InvestorEntrance(msg.sender, msg.value);\r\n    }\r\n\r\n    function profitDistribution()\r\n        private\r\n        onlyIfProfitNotDistributed {\r\n\r\n        uint copyInvested;\r\n\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            address currentInvestor = investors[i].investorAddress;\r\n            uint profitOfInvestor = getProfitShare(currentInvestor);\r\n            uint lossesOfInvestor = getLossesShare(currentInvestor);\r\n            //Check for overflow and underflow\r\n            if ((investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested) &&\r\n                (investors[i].amountInvested + profitOfInvestor >= lossesOfInvestor))  {\r\n                investors[i].amountInvested += profitOfInvestor - lossesOfInvestor;\r\n                LOG_InvestorCapitalUpdate(currentInvestor, (int) (profitOfInvestor - lossesOfInvestor));\r\n            }\r\n            else {\r\n                isStopped = true;\r\n                LOG_EmergencyAutoStop();\r\n            }\r\n\r\n            if (copyInvested + investors[i].amountInvested >= copyInvested)\r\n                copyInvested += investors[i].amountInvested;\r\n        }\r\n\r\n        delete investorsProfit;\r\n        delete investorsLosses;\r\n        invested = copyInvested;\r\n\r\n        profitDistributed = true;\r\n    }\r\n\r\n    // SECTION II: BET & BET PROCESSING\r\n\r\n    function()\r\n        payable {\r\n\r\n        bet();\r\n    }\r\n\r\n    function bet()\r\n        payable\r\n        onlyIfNotStopped {\r\n\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        if (oraclizeFee >= msg.value) throw;\r\n        uint betValue = msg.value - oraclizeFee;\r\n        if ((((betValue * ((10000 - edge) - pwin)) / pwin ) <= (maxWin * getBankroll()) / 10000) && (betValue >= minBet)) {\r\n            LOG_NewBet(msg.sender, betValue);\r\n            bytes32 myid =\r\n                oraclize_query(\r\n                    \"nested\",\r\n                    \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random.data.0', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateSignedIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":${[decrypt] BAPd7MVcodOtp7oRYI6q3VKlPp5hPpOeFECuC+oSY+4/npq1FVtYWRftet71WkFM7ISf9SeaEhX+T4NH0h1rJT1KXJSewrMYT1tGbKJAcF+09CXKeB0Qw27lyZ2KIdG86GpaYdp4gbuSjIkDEqWnuSe1laEAitg=},\\\"n\\\":1,\\\"min\\\":1,\\\"max\\\":10000${[identity] \\\"}\\\"},\\\"id\\\":1${[identity] \\\"}\\\"}']\",\r\n                    ORACLIZE_GAS_LIMIT + safeGas\r\n                );\r\n            bets[myid] = Bet(msg.sender, betValue, 0);\r\n            betsKeys.push(myid);\r\n        }\r\n        else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result, bytes proof)\r\n        onlyOraclize\r\n        onlyIfBetExist(myid)\r\n        onlyIfNotProcessed(myid)\r\n        onlyIfValidRoll(myid, result)\r\n        onlyIfBetSizeIsStillCorrect(myid)  {\r\n\r\n        uint numberRolled = parseInt(result);\r\n        bets[myid].numberRolled = numberRolled;\r\n        isWinningBet(bets[myid], numberRolled);\r\n        isLosingBet(bets[myid], numberRolled);\r\n        delete profitDistributed;\r\n    }\r\n\r\n    function isWinningBet(Bet thisBet, uint numberRolled)\r\n        private\r\n        onlyWinningBets(numberRolled) {\r\n\r\n        uint winAmount = (thisBet.amountBet * (10000 - edge)) / pwin;\r\n        LOG_BetWon(thisBet.playerAddress, numberRolled, winAmount);\r\n        safeSend(thisBet.playerAddress, winAmount);\r\n\r\n        //Check for overflow and underflow\r\n        if ((investorsLosses + winAmount < investorsLosses) ||\r\n            (investorsLosses + winAmount < thisBet.amountBet)) {\r\n                throw;\r\n            }\r\n\r\n        investorsLosses += winAmount - thisBet.amountBet;\r\n    }\r\n\r\n    function isLosingBet(Bet thisBet, uint numberRolled)\r\n        private\r\n        onlyLosingBets(numberRolled) {\r\n\r\n        LOG_BetLost(thisBet.playerAddress, numberRolled);\r\n        safeSend(thisBet.playerAddress, 1);\r\n\r\n        //Check for overflow and underflow\r\n        if ((investorsProfit + thisBet.amountBet < investorsProfit) ||\r\n            (investorsProfit + thisBet.amountBet < thisBet.amountBet) ||\r\n            (thisBet.amountBet == 1)) {\r\n                throw;\r\n            }\r\n\r\n        uint totalProfit = investorsProfit + (thisBet.amountBet - 1); //added based on audit feedback\r\n        investorsProfit += (thisBet.amountBet - 1)*(10000 - houseEdge)/10000;\r\n        uint houseProfit = totalProfit - investorsProfit; //changed based on audit feedback\r\n        safeSend(houseAddress, houseProfit);\r\n    }\r\n\r\n    //SECTION III: INVEST & DIVEST\r\n\r\n    function increaseInvestment()\r\n        payable\r\n        onlyIfNotStopped\r\n        onlyMoreThanZero\r\n        onlyInvestors  {\r\n\r\n        profitDistribution();\r\n        investors[investorIDs[msg.sender]].amountInvested += msg.value;\r\n        invested += msg.value;\r\n    }\r\n\r\n    function newInvestor()\r\n        payable\r\n        onlyIfNotStopped\r\n        onlyMoreThanZero\r\n        onlyNotInvestors\r\n        onlyMoreThanMinInvestment\r\n        investorsInvariant {\r\n\r\n        profitDistribution();\r\n\r\n        if (numInvestors == maxInvestors) {\r\n            uint smallestInvestorID = searchSmallestInvestor();\r\n            divest(investors[smallestInvestorID].investorAddress);\r\n        }\r\n\r\n        numInvestors++;\r\n        addInvestorAtID(numInvestors);\r\n    }\r\n\r\n    function divest()\r\n        onlyInvestors {\r\n\r\n        divest(msg.sender);\r\n    }\r\n\r\n\r\n    function divest(address currentInvestor)\r\n        private\r\n        investorsInvariant {\r\n\r\n        profitDistribution();\r\n        uint currentID = investorIDs[currentInvestor];\r\n        uint amountToReturn = getBalance(currentInvestor);\r\n\r\n        if ((invested >= investors[currentID].amountInvested)) {\r\n            invested -= investors[currentID].amountInvested;\r\n            uint divestFeeAmount =  (amountToReturn*divestFee)/10000;\r\n            amountToReturn -= divestFeeAmount;\r\n\r\n            delete investors[currentID];\r\n            delete investorIDs[currentInvestor];\r\n\r\n            //Reorder investors\r\n            if (currentID != numInvestors) {\r\n                // Get last investor\r\n                Investor lastInvestor = investors[numInvestors];\r\n                //Set last investor ID to investorID of divesting account\r\n                investorIDs[lastInvestor.investorAddress] = currentID;\r\n                //Copy investor at the new position in the mapping\r\n                investors[currentID] = lastInvestor;\r\n                //Delete old position in the mappping\r\n                delete investors[numInvestors];\r\n            }\r\n\r\n            numInvestors--;\r\n            safeSend(currentInvestor, amountToReturn);\r\n            safeSend(houseAddress, divestFeeAmount);\r\n            LOG_InvestorExit(currentInvestor, amountToReturn);\r\n        } else {\r\n            isStopped = true;\r\n            LOG_EmergencyAutoStop();\r\n        }\r\n    }\r\n\r\n    function forceDivestOfAllInvestors()\r\n        onlyOwner {\r\n\r\n        uint copyNumInvestors = numInvestors;\r\n        for (uint i = 1; i <= copyNumInvestors; i++) {\r\n            divest(investors[1].investorAddress);\r\n        }\r\n    }\r\n\r\n    /*\r\n    The owner can use this function to force the exit of an investor from the\r\n    contract during an emergency withdrawal in the following situations:\r\n        - Unresponsive investor\r\n        - Investor demanding to be paid in other to vote, the facto-blackmailing\r\n        other investors\r\n    */\r\n    function forceDivestOfOneInvestor(address currentInvestor)\r\n        onlyOwner\r\n        onlyIfStopped {\r\n\r\n        divest(currentInvestor);\r\n        //Resets emergency withdrawal proposal. Investors must vote again\r\n        delete proposedWithdrawal;\r\n    }\r\n\r\n    //SECTION IV: CONTRACT MANAGEMENT\r\n\r\n    function stopContract()\r\n        onlyOwner {\r\n\r\n        isStopped = true;\r\n        LOG_ContractStopped();\r\n    }\r\n\r\n    function resumeContract()\r\n        onlyOwner {\r\n\r\n        isStopped = false;\r\n        LOG_ContractResumed();\r\n    }\r\n\r\n    function changeHouseAddress(address newHouse)\r\n        onlyOwner {\r\n\r\n        if (newHouse == address(0x0)) throw; //changed based on audit feedback\r\n        houseAddress = newHouse;\r\n        LOG_HouseAddressChanged(houseAddress, newHouse);\r\n    }\r\n\r\n    function changeOwnerAddress(address newOwner)\r\n        onlyOwner {\r\n\r\n        if (newOwner == address(0x0)) throw;\r\n        owner = newOwner;\r\n        LOG_OwnerAddressChanged(owner, newOwner);\r\n    }\r\n\r\n    function changeGasLimitOfSafeSend(uint newGasLimit)\r\n        onlyOwner\r\n        onlyIfValidGas(newGasLimit) {\r\n\r\n        safeGas = newGasLimit;\r\n        LOG_GasLimitChanged(safeGas, newGasLimit);\r\n    }\r\n\r\n    //SECTION V: EMERGENCY WITHDRAWAL\r\n\r\n    function voteEmergencyWithdrawal(bool vote)\r\n        onlyInvestors\r\n        onlyAfterProposed\r\n        onlyIfStopped {\r\n\r\n        investors[investorIDs[msg.sender]].votedForEmergencyWithdrawal = vote;\r\n        LOG_EmergencyWithdrawalVote(msg.sender, vote);\r\n    }\r\n\r\n    function proposeEmergencyWithdrawal(address withdrawalAddress)\r\n        onlyIfStopped\r\n        onlyOwner {\r\n\r\n        //Resets previous votes\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            delete investors[i].votedForEmergencyWithdrawal;\r\n        }\r\n\r\n        proposedWithdrawal = WithdrawalProposal(withdrawalAddress, now);\r\n        LOG_EmergencyWithdrawalProposed();\r\n    }\r\n\r\n    function executeEmergencyWithdrawal()\r\n        onlyOwner\r\n        onlyAfterProposed\r\n        onlyIfStopped\r\n        onlyIfEmergencyTimeOutHasPassed {\r\n\r\n        uint numOfVotesInFavour;\r\n        uint amountToWithdraw = this.balance;\r\n\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            if (investors[i].votedForEmergencyWithdrawal == true) {\r\n                numOfVotesInFavour++;\r\n                delete investors[i].votedForEmergencyWithdrawal;\r\n            }\r\n        }\r\n\r\n        if (numOfVotesInFavour >= emergencyWithdrawalRatio * numInvestors / 100) {\r\n            if (!proposedWithdrawal.toAddress.send(amountToWithdraw)) {\r\n                LOG_EmergencyWithdrawalFailed(proposedWithdrawal.toAddress);\r\n            }\r\n            else {\r\n                LOG_EmergencyWithdrawalSucceeded(proposedWithdrawal.toAddress, amountToWithdraw);\r\n            }\r\n        }\r\n        else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBankroll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getProfitShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getLossesShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteEmergencyWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouse\",\"type\":\"address\"}],\"name\":\"changeHouseAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceDivestOfAllInvestors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"amountInvested\",\"type\":\"uint256\"},{\"name\":\"votedForEmergencyWithdrawal\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"searchSmallestInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"proposeEmergencyWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"changeOraclizeProofType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"forceDivestOfOneInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedWithdrawal\",\"outputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"atTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsLosses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseInvestment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"amountBet\",\"type\":\"uint256\"},{\"name\":\"numberRolled\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"changeGasLimitOfSafeSend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_config\",\"type\":\"bytes32\"}],\"name\":\"changeOraclizeConfig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeEmergencyWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newInvestor\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"LOG_BetWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"}],\"name\":\"LOG_BetLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_EmergencyWithdrawalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"LOG_EmergencyWithdrawalFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LOG_EmergencyWithdrawalSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_FailedSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ZeroSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_InvestorEntrance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"LOG_InvestorCapitalUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_InvestorExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ContractStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ContractResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwnerAddress\",\"type\":\"address\"}],\"name\":\"LOG_OwnerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newHouseAddress\",\"type\":\"address\"}],\"name\":\"LOG_HouseAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"LOG_GasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_EmergencyAutoStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"LOG_EmergencyWithdrawalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ValueIsTooBig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_SuccessfulSend\",\"type\":\"event\"}]","ContractName":"Dice","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}