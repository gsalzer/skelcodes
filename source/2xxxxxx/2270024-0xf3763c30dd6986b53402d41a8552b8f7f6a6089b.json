{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2016 Everex https://everex.io\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* String utility library */\r\nlibrary strUtils {\r\n    string constant CHAINY_JSON_ID = '\"id\":\"CHAINY\"';\r\n    uint8 constant CHAINY_JSON_MIN_LEN = 32;\r\n\r\n    /* Converts given number to base58, limited by _maxLength symbols */\r\n    function toBase58(uint256 _value, uint8 _maxLength) internal returns (string) {\r\n        string memory letters = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\";\r\n        bytes memory alphabet = bytes(letters);\r\n        uint8 base = 58;\r\n        uint8 len = 0;\r\n        uint256 remainder = 0;\r\n        bool needBreak = false;\r\n        bytes memory bytesReversed = bytes(new string(_maxLength));\r\n\r\n        for (uint8 i = 0; i < _maxLength; i++) {\r\n            if(_value < base){\r\n                needBreak = true;\r\n            }\r\n            remainder = _value % base;\r\n            _value = uint256(_value / base);\r\n            bytesReversed[i] = alphabet[remainder];\r\n            len++;\r\n            if(needBreak){\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Reverse\r\n        bytes memory result = bytes(new string(len));\r\n        for (i = 0; i < len; i++) {\r\n            result[i] = bytesReversed[len - i - 1];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    /* Concatenates two strings */\r\n    function concat(string _s1, string _s2) internal returns (string) {\r\n        bytes memory bs1 = bytes(_s1);\r\n        bytes memory bs2 = bytes(_s2);\r\n        string memory s3 = new string(bs1.length + bs2.length);\r\n        bytes memory bs3 = bytes(s3);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < bs1.length; i++) {\r\n            bs3[j++] = bs1[i];\r\n        }\r\n        for (i = 0; i < bs2.length; i++) {\r\n            bs3[j++] = bs2[i];\r\n        }\r\n\r\n        return string(bs3);\r\n    }\r\n\r\n    /* Checks if provided JSON string has valid Chainy format */\r\n    function isValidChainyJson(string _json) internal returns (bool) {\r\n        bytes memory json = bytes(_json);\r\n        bytes memory id = bytes(CHAINY_JSON_ID);\r\n\r\n        if (json.length < CHAINY_JSON_MIN_LEN) {\r\n            return false;\r\n        } else {\r\n            uint len = 0;\r\n            if (json[1] == id[0]) {\r\n                len = 1;\r\n                while (len < id.length && (1 + len) < json.length && json[1 + len] == id[len]) {\r\n                    len++;\r\n                }\r\n                if (len == id.length) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n// Ownership\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Chainy is owned {\r\n    // Chainy viewer url\r\n    string CHAINY_URL;\r\n\r\n    // Configuration\r\n    mapping(string => uint256) private chainyConfig;\r\n\r\n    // Service accounts\r\n    mapping (address => bool) private srvAccount;\r\n\r\n    // Fee receiver\r\n    address private receiverAddress;\r\n\r\n    struct data {uint256 timestamp; string json; address sender;}\r\n    mapping (string => data) private chainy;\r\n\r\n    event chainyShortLink(uint256 timestamp, string code);\r\n\r\n    // Constructor\r\n    function Chainy(){\r\n        setConfig(\"fee\", 0);\r\n        // change the block offset to 1000000 to use contract in testnet\r\n        setConfig(\"blockoffset\", 2000000);\r\n        setChainyURL(\"https://txn.me/\");\r\n    }\r\n\r\n    // Sets new Chainy viewer URL\r\n    function setChainyURL(string _url) onlyOwner {\r\n        CHAINY_URL = _url;\r\n    }\r\n\r\n    // Returns current Chainy viewer URL\r\n    function getChainyURL() constant returns(string){\r\n        return CHAINY_URL;\r\n    }\r\n\r\n    // Sets configuration option\r\n    function setConfig(string _key, uint256 _value) onlyOwner {\r\n        chainyConfig[_key] = _value;\r\n    }\r\n\r\n    // Returns configuration option\r\n    function getConfig(string _key) constant returns (uint256 _value) {\r\n        return chainyConfig[_key];\r\n    }\r\n\r\n    // Add/Remove service account\r\n    function setServiceAccount(address _address, bool _value) onlyOwner {\r\n        srvAccount[_address] = _value;\r\n    }\r\n\r\n    // Set receiver address\r\n    function setReceiverAddress(address _address) onlyOwner {\r\n        receiverAddress = _address;\r\n    }\r\n\r\n    // Send all ether back to owner\r\n    function releaseFunds() onlyOwner {\r\n        if(!owner.send(this.balance)) throw;\r\n    }\r\n\r\n    // Add record\r\n    function addChainyData(string json) {\r\n        checkFormat(json);\r\n\r\n        var code = generateShortLink();\r\n        // Checks if the record exist\r\n        if (getChainyTimestamp(code) > 0) throw;\r\n\r\n        processFee();\r\n        chainy[code] = data({\r\n            timestamp: block.timestamp,\r\n            json: json,\r\n            sender: tx.origin\r\n        });\r\n\r\n        // Fire event\r\n        var link = strUtils.concat(CHAINY_URL, code);\r\n        chainyShortLink(block.timestamp, link);\r\n    }\r\n\r\n    // Get record timestamp\r\n    function getChainyTimestamp(string code) constant returns (uint256) {\r\n        return chainy[code].timestamp;\r\n    }\r\n\r\n    // Get record JSON\r\n    function getChainyData(string code) constant returns (string) {\r\n        return chainy[code].json;\r\n    }\r\n\r\n    // Get record sender\r\n    function getChainySender(string code) constant returns (address) {\r\n        return chainy[code].sender;\r\n    }\r\n\r\n    // Checks if enough fee provided\r\n    function processFee() internal {\r\n        var fee = getConfig(\"fee\");\r\n        if (srvAccount[msg.sender] || (fee == 0)) return;\r\n\r\n        if (msg.value < fee)\r\n            throw;\r\n        else\r\n            if (!receiverAddress.send(fee)) throw;\r\n    }\r\n\r\n    // Checks if provided string has valid format\r\n    function checkFormat(string json) internal {\r\n        if (!strUtils.isValidChainyJson(json)) throw;\r\n    }\r\n\r\n    // Generates a shortlink code for this transaction\r\n    function generateShortLink() internal returns (string) {\r\n        var s1 = strUtils.toBase58(block.number - getConfig(\"blockoffset\"), 11);\r\n        var s2 = strUtils.toBase58(uint256(tx.origin), 2);\r\n\r\n        var s = strUtils.concat(s1, s2);\r\n        return s;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getChainyData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setServiceAccount\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChainyURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getChainySender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"addChainyData\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getConfig\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getChainyTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setChainyURL\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"}],\"name\":\"chainyShortLink\",\"type\":\"event\"}]","ContractName":"Chainy","CompilerVersion":"v0.3.4-nightly.2016.6.8+commit.d593166","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}