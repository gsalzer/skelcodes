{"status":"1","message":"OK","result":[{"SourceCode":"contract ARK\r\n{\r\n       \r\n    address owner;\r\n    address controller;\r\n    bool mute;\r\n    string[] companies;\r\n    mapping (address => uint) companyIndex;\r\n    address[] companyWallet;\r\n    mapping (address => uint) balances;\r\n    mapping (uint => Bot)  bots;\r\n    mapping (address => uint[])  botOwners;      \r\n    mapping (uint => MarketBill)  MarketBills;\r\n    mapping (address => uint[])  BuyersBills;\r\n    mapping (address => uint[])  SellersBills;\r\n    mapping (uint => Stats)  cycle;\r\n    uint[]  lastPrice;\r\n    uint totCompanies;\r\n\r\n    log[] logs;\r\n\r\n    mapping (address => bool) TOS;\r\n    mapping(address => bool) ban;\r\n    uint[20]  listed;  \r\n    uint coinIndex;      \r\n    mapping (uint => Coin) coins;\r\n    mapping (uint => Coin) trash;\r\n    ARKController_1_00 control;\r\n\r\n    struct log{\r\n    address admin;\r\n    string action;\r\n    address addr;\r\n    }\r\n\r\n    struct MarketBill {\r\n    uint sellerdata;\r\n    uint buyerdata;\r\n    uint product;\r\n    uint index;\r\n    uint cost;\r\n    uint block;\r\n    }\r\n    \r\n    struct Coin {\r\n    address coinOwner;\r\n    string data;\r\n    string mine;      \r\n    uint coinType;\r\n    uint platf;\r\n    string adv;\r\n    uint block;\r\n    }\r\n  \r\n    struct Bot {\r\n    address owner;\r\n    string info;              \r\n    uint cost;\r\n    uint nbills; \r\n    mapping (uint => uint) bills;\r\n    mapping (uint => uint) sales;\r\n    }\r\n\r\n\r\n    mapping (uint => uint)  hadv;\r\n    mapping (address => bool)  miner;\r\n\r\n    uint totBOTS;\r\n    uint selling;\r\n    uint nMbills;\r\n    uint total;\r\n    uint claimed;\r\n    uint bounty;\r\n   \r\n    struct Stats{\r\n    uint sold;\r\n    uint currentSeller;\r\n    }\r\n\r\n           \r\n        function ARK() {owner=msg.sender;}        \r\n\r\n        function initStats(string str,address ad,uint a){\r\n\r\n           if(msg.sender==owner){\r\n           \r\n              if(companies.length==0){\r\n\r\n                 coinIndex=0;\r\n                 totBOTS=10000;\r\n                 selling=1;\r\n                 claimed=0;       \r\n                 nMbills=1;\r\n                 total=0;\r\n                 bounty=2500;\r\n                 mute=false;\r\n                \r\n                 for(uint z=0;z<20;z++){      \r\n                    cycle[z]=Stats({sold:0,currentSeller:1});   \r\n                    if(z<7){lastPrice.push(a);}\r\n                    listed[z]=0;        \r\n                 }\r\n        \r\n                 companyIndex[msg.sender]=1;\r\n              }\r\n              \r\n              if(companies.length<2){\r\n                 companies.push(str);\r\n                 companyWallet.push(ad);\r\n              }else{if(ad==owner)companies[0]=str;}\r\n              \r\n              if(a==333){owner=ad;logs.push(log(owner,\"setOwner\",ad));}              \r\n           }\r\n\r\n        }\r\n\r\n        \r\n \r\n\r\n        function createCoin(string dat,uint typ,uint pltf,string min,string buyerBill,address own) returns(bool){\r\n        coinIndex++;\r\n        coins[coinIndex]= Coin({coinOwner : own,data : dat,mine : min,coinType : typ,platf: pltf,adv : \"\",block : block.number});\r\n        \r\n        listed[typ]++;\r\n        listed[pltf]++;\r\n\r\n        administration(2,buyerBill,coinIndex,lastPrice[2],msg.sender);\r\n        control.pushCoin(coinIndex,own,dat);\r\n        return true;\r\n        }\r\n   \r\n        function updt(uint i,string data,uint typ,uint pltf,string min,string buyerBill,address own)  returns(bool){\r\n        if(coins[i].coinOwner!=msg.sender)throw;          \r\n        coins[i].data=data;\r\n        coins[i].coinType=typ;\r\n        coins[i].platf=pltf;\r\n        coins[i].mine=min;\r\n        coins[i].coinOwner=own;\r\n        administration(3,buyerBill,i,lastPrice[3],msg.sender);\r\n        return true;        \r\n        }\r\n   \r\n\r\n\r\n        function setAdv(uint i,string data,string buyerBill) returns(bool){        \r\n        coins[i].adv=data;   \r\n        administration(4,buyerBill,i,lastPrice[4],msg.sender);\r\n        return true;\r\n        }\r\n   \r\n        function setHomeAdv(uint i,string buyerBill) returns(bool){       \r\n        hadv[cycle[5].sold]=i;\r\n        administration(5,buyerBill,i,lastPrice[5],msg.sender);  \r\n        return true;         \r\n        }\r\n      \r\n        function administration(uint tipo,string buyerBill,uint index,uint c,address own) private{\r\n       \r\n                if(!(companyIndex[own]>0))registerCompany(own,buyerBill);\r\n                uint u=cycle[tipo].currentSeller;\r\n                if(!ban[own]){balances[bots[u].owner]+=c;}else{balances[owner]+=c;}\r\n                balances[own]+=msg.value-c;\r\n                registerBill(u,bots[u].owner,own,tipo,index,c);            \r\n                               \r\n        }\r\n\r\n\r\n        function setBounty(address a,string data,uint amount){\r\n           if((msg.sender==owner)&&(bounty>amount)){\r\n              for(uint j=0;j<amount;j++){\r\n              bots[selling] = Bot(a,\"\",0,0);\r\n              botOwners[a].push(selling);\r\n              registerCompany(a,data);\r\n              totBOTS++;\r\n              selling++;\r\n              bounty--;\r\n              }\r\n           }\r\n        }\r\n\r\n\r\n        function botOnSale(uint i,uint c) {if((msg.sender!=bots[i].owner)||(selling<=totBOTS)||(!TOS[msg.sender]))throw;bots[i].cost=c;}\r\n\r\n        \r\n        function buyBOTx(uint i,string buyerbill,string buyerInfo,address buyerwallet,uint amount) returns (bool){\r\n         if((amount<1)||(i>15000)||((amount>1)&&((selling+amount+999>totBOTS)||(selling<400))))throw;\r\n        \r\n                address sellsNow;\r\n                address holder;\r\n                uint sell;\r\n                uint currentSeller;\r\n                uint c;\r\n                \r\n                if(!(companyIndex[buyerwallet]>0))registerCompany(buyerwallet,buyerbill);\r\n\r\n                if((miner[msg.sender])&&(claimed<2500)){\r\n                currentSeller=cycle[0].currentSeller;\r\n                sellsNow=bots[currentSeller].owner;\r\n                c=lastPrice[0];\r\n                claimed++;\r\n                totBOTS++;\r\n                miner[msg.sender]=false;\r\n                holder=owner;\r\n                sell=selling;\r\n                     //balances[bots[currentSeller].owner]+=msg.value;\r\n                if(!ban[bots[currentSeller].owner]){balances[bots[currentSeller].owner]+=c;}else{balances[owner]+=c;}\r\n                     //balances[bots[currentSeller].owner]+=c;\r\n                     //balances[msg.sender]+=(msg.value-c);\r\n                selling++;\r\n                bots[sell] = Bot(buyerwallet,buyerInfo,0,0);\r\n                }else{\r\n\r\n                if(selling>totBOTS){\r\n                if(bots[i].cost==0)throw;\r\n                currentSeller=cycle[0].currentSeller;\r\n                sellsNow=bots[currentSeller].owner;\r\n                holder=bots[i].owner;\r\n                sell=i;\r\n                c=bots[i].cost+lastPrice[0];\r\n                move(i,buyerwallet);\r\n                   \t\t                  \r\n                if(!ban[sellsNow]){balances[sellsNow]+=lastPrice[0];}else{balances[owner]+=lastPrice[0];}\r\n         \r\n                registerBill(i,holder,sellsNow,6,sell,c-lastPrice[0]);                   \t\t\r\n                lastPrice[lastPrice.length++]=c-lastPrice[0];\r\n                   \t\t\r\n                }else{\r\n\r\n                c=lastPrice[6]*amount;\r\n                balances[owner]+=msg.value; \r\n                currentSeller=selling;\r\n                \r\n                if(amount>1){sell=amount+100000;}else{sell=selling;}\r\n                sellsNow=owner;\r\n                for(uint j=0;j<amount;j++){\r\n                bots[selling+j] = Bot(buyerwallet,buyerInfo,0,0);\r\n                botOwners[buyerwallet].push(selling+j);\r\n                }                                                 \r\n                selling+=amount;\r\n                }\r\n                }\r\n                \r\n                if(sellsNow!=owner)botOwners[buyerwallet].push(sell);\r\n                registerBill(currentSeller,sellsNow,buyerwallet,0,sell,c);\r\n                return true;\r\n        }\r\n\r\n   \r\n\r\n       function move(uint index,address wallet) private returns (uint[]){\r\n\r\n        uint[] l=botOwners[bots[index].owner];                                         \r\n        uint ll=l.length;\r\n                       \r\n        for(uint j=0;j<ll;j++){\r\n          if(l[j]==index){\r\n              if(j<ll-1)l[j]=l[ll-1];\r\n              delete l[ll-1];j=ll;\r\n          }\r\n        }\r\n        botOwners[bots[index].owner]=l;\r\n        botOwners[bots[index].owner].length--;\r\n        bots[index].owner=wallet;\r\n        bots[index].cost=0;\r\n\r\n        }\r\n\r\n\r\n        function updateBOTBillingInfo(uint index,string data,address wallet,string info,string buyerbill,uint updatetype) returns(bool){\r\n               \r\n        if((index>totBOTS)||(msg.sender!=bots[index].owner))throw;\r\n         \r\n                    uint t=1;\r\n                    address cs=bots[cycle[1].currentSeller].owner;\r\n                                   \r\n                    if(bots[index].owner!=wallet){\r\n\r\n                       if(!(companyIndex[wallet]>0))registerCompany(wallet,data);\r\n                       botOwners[wallet].push(index); \r\n                       move(index,wallet);\r\n                                            \r\n                    }else{\r\n\r\n                         if(updatetype!=1){\r\n                           t=companyIndex[msg.sender]+100;\r\n                           registerCompany(msg.sender,data);\r\n                           totCompanies--;\r\n                         }\r\n\r\n                    }\r\n\r\n                 if(updatetype!=2)bots[index].info=info;\r\n                 if(!ban[cs]){balances[cs]+=lastPrice[1];}else{balances[owner]+=lastPrice[1];}               \r\n                 registerBill(cycle[1].currentSeller,cs,msg.sender,t,index,lastPrice[1]);    \r\n                     \r\n           return true;\r\n        }\r\n\r\n        \r\n        function registerExternalBill(uint bi,address sellsNow,address buyerwallet,uint tipo,uint sell,uint c){\r\n        if(msg.sender!=controller)throw;\r\n        registerBill(bi,sellsNow,buyerwallet,tipo,sell,c);\r\n        }\r\n\r\n        function registerBill(uint bi,address sellsNow,address buyerwallet,uint tipo,uint sell,uint c) private{\r\n         \r\n         if((msg.value<c)||(mute)||(!TOS[buyerwallet]))throw;\r\n         Bot b=bots[bi];\r\n         uint sellerIndex;uint buyerIndex;\r\n         if(tipo>100){sellerIndex=tipo-100;buyerIndex=sellerIndex;tipo=1;}else{sellerIndex=companyIndex[sellsNow];buyerIndex=companyIndex[buyerwallet];}\r\n        \r\n          MarketBills[nMbills]=MarketBill(sellerIndex,buyerIndex,tipo,sell,c,block.number);\r\n       \r\n                b.bills[b.nbills+1]=nMbills;\r\n                b.nbills++;\r\n                b.sales[tipo]++;                \r\n                BuyersBills[buyerwallet][BuyersBills[buyerwallet].length++]=nMbills;\r\n                SellersBills[sellsNow][SellersBills[sellsNow].length++]=nMbills;\r\n                nMbills++;\r\n                if(sellsNow!=owner){\r\n                total+=c;\r\n                if(tipo!=6){\r\n                cycle[tipo].sold++;\r\n                cycle[tipo].currentSeller++;\r\n                if((cycle[tipo].currentSeller>totBOTS)||(cycle[tipo].currentSeller>=selling))cycle[tipo].currentSeller=1;}\r\n                }\r\n                if(claimed<=2500)miner[block.coinbase]=true;\r\n        }\r\n\r\n   \r\n        function registerCompany(address wal,string data) private{        \r\n        companyWallet[companyWallet.length++]=wal;\r\n        companyIndex[wal]=companies.length;\r\n        companies[companies.length++]=data;\r\n        totCompanies++;\r\n        }\r\n  \r\n        \r\n        function muteMe(bool m){\r\n        if((msg.sender==owner)||(msg.sender==controller))mute=m;\r\n        }\r\n           \r\n     \r\n        function totBOTs() constant returns(uint,uint,uint,uint,uint) {return  (totBOTS,claimed,selling,companies.length,totCompanies); }\r\n      \r\n\r\n        function getBotBillingIndex(uint i,uint bi)  constant returns (uint){\r\n        return bots[i].bills[bi];\r\n        }\r\n\r\n            \r\n        function getBill(uint i,uint bi)constant returns(uint,uint,uint,uint,uint,uint){\r\n        MarketBill b=MarketBills[i];\r\n        return (b.sellerdata,b.buyerdata,b.product,b.index,b.cost,b.block);\r\n        }\r\n        \r\n\r\n        function getNextSellerBOTdata(uint cyc) constant returns (uint,uint,string){return (cycle[cyc].currentSeller,cycle[cyc].sold,companies[companyIndex[bots[cycle[cyc].currentSeller].owner]]);}\r\n   \r\n        function getBot(uint i) constant returns (address,string,uint,uint){\r\n        Bot B=bots[i];\r\n        return (B.owner,B.info,B.cost,B.nbills);\r\n        }\r\n\r\n        function getOwnedBot(address own,uint bindex) constant returns(uint){return botOwners[own][bindex];}\r\n      \r\n  \r\n        function getBotStats(uint i,uint j) constant returns (uint){\r\n        Bot B=bots[i];\r\n        return B.sales[j];}\r\n\r\n\r\n        function getFullCompany(address w,uint i) constant returns (string,uint,bool,uint,uint,string,address){return (companies[companyIndex[w]],botOwners[w].length,miner[w],balances[w],this.balance,companies[i],companyWallet[i]);}\r\n\r\n\r\n        function getActorBillXdetail(address w,uint i,bool who) constant returns (uint,uint){if(who){return (SellersBills[w][i],SellersBills[w].length);}else{return (BuyersBills[w][i],BuyersBills[w].length);}}\r\n\r\n  \r\n        function getHomeadvIndex(uint ind) constant returns (uint){return hadv[ind];}\r\n\r\n        function getLastPrice(uint i) constant returns (uint,uint,uint,uint,uint){return (lastPrice[i],lastPrice[lastPrice.length-1],selling,nMbills,total);}\r\n\r\n           \r\n        function setController(address a) returns(bool){if(msg.sender!=owner)throw;controller=a;control=ARKController_1_00(a);logs.push(log(owner,\"setCensorer\",a));\r\n        return true;\r\n        }\r\n\r\n        function readLog(uint i)constant returns(address,string,address){log l=logs[i];return(l.admin,l.action,l.addr);}\r\n    \r\n\r\n        function censorship(uint i,bool b,bool c) returns(bool){\r\n        if(msg.sender!=controller)throw;\r\n        if(c){coins[i]=Coin({coinOwner : 0x0,data : \"Censored\",mine : \"\",coinType : 0,platf: 0,adv : \"\",block : 0});}else{\r\n        if(b){\r\n        trash[i]=coins[i];\r\n        coins[i]=Coin({coinOwner : 0x0,data : \"Censored\",mine : \"\",coinType : 0,platf: 0,adv : \"\",block : 0});\r\n        }else{\r\n        coins[i]=trash[i];\r\n        }}\r\n        return true;\r\n        }\r\n\r\n\r\n        function setPrice(uint i,uint j) returns(bool){if(msg.sender!=controller)throw;if(i<7)lastPrice[i]=j; return true;}   \r\n         \r\n\r\n        function acceptTOS(address a,bool b)  returns(bool){\r\n        if(b)if(!ban[msg.sender]){TOS[msg.sender]=true;ban[msg.sender]=false;}\r\n        if(msg.sender==controller){TOS[a]=b;if(!b)ban[a]=true;logs.push(log(controller,\"setTOS\",a)); return true;}\r\n        }\r\n\r\n\r\n        function getTOS(address a)constant returns(bool) {return TOS[a];}\r\n\r\n        \r\n        function owns(address a) constant returns (bool){return botOwners[a].length>0;}\r\n\r\n\r\n        function getCoin(uint n) constant returns (address,string,uint,uint,string,string) {\r\n        Coin c = coins[n];\r\n        return (c.coinOwner,c.data,c.coinType,c.platf,c.mine,c.adv);   \r\n        }\r\n\r\n\r\n\r\n\r\n        function Trash(uint n) constant returns (address,string,uint,uint,string,string) {\r\n        if((msg.sender!=controller)&&(!(getOwnedBot(msg.sender,0)>0)))      \r\n        Coin c = trash[n];   \r\n        return (c.coinOwner,c.data,c.coinType,c.platf,c.mine,c.adv); \r\n        }\r\n\r\n       \r\n        function getCoinStats(uint i) constant returns (uint,uint){\r\n        return (listed[i],coinIndex);   \r\n        }\r\n       \r\n\r\n        function withdraw(){\r\n        if(!TOS[msg.sender])throw;\r\n        uint t=balances[msg.sender];\r\n        balances[msg.sender]=0;\r\n        if(!(msg.sender.send(t)))throw;\r\n        }\r\n\r\n\r\n        function (){throw;}\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract ARKController_1_00 {\r\n    /* Constructor */\r\n    ARK Ark;\r\n\r\n    event CoinSent(uint indexed id,address from,string name);\r\n\r\n    address owner;\r\n    address Source;\r\n\r\n    mapping(address => bool)administrator;\r\n    mapping(address => bool)module;\r\n    mapping(address => string)adminName;\r\n\r\n    mapping(uint => bool)restore;\r\n\r\n////////////////////////////////////////////////\r\n    log[] logs;\r\n\r\n    struct log{\r\n    address admin;\r\n    string what;\r\n    uint id;\r\n    address a;\r\n    }\r\n////////////////////////////////////////////////\r\n    \r\n    function ARKController_1_00() {\r\n    owner=msg.sender;\r\n    }\r\n\r\n    function setOwner(address a,string name) {\r\n    if(msg.sender==owner)owner=a;\r\n    }\r\n\r\n    function ban(address a) returns(bool){\r\n    return false;\r\n    }\r\n\r\n    function setAdministrator(address a,string name,bool yesno) {\r\n    if(isModule(msg.sender)){\r\n    administrator[a]=yesno;\r\n    adminName[a]=name;\r\n    \r\n    if(msg.sender==owner)logs.push(log(msg.sender,\"setAdmin\",0,a));\r\n    if(msg.sender!=owner)logs.push(log(msg.sender,\"moduleSetAdmin\",0,a));\r\n    \r\n    }\r\n    }\r\n\r\n    function setModule(address a,bool yesno) {\r\n    if(!isModule(msg.sender))throw;\r\n    module[a]=yesno;\r\n    logs.push(log(owner,\"setModule\",0,a));\r\n\r\n    }\r\n\r\n    function setPrice(uint i,uint j){\r\n    if((!isModule(msg.sender))||(i>6))throw;\r\n    Ark.setPrice(i,j);\r\n    logs.push(log(msg.sender,\"setPrice\",i,msg.sender));\r\n    }\r\n\r\n    function setTOS(address a,bool b){\r\n    if(!isModule(msg.sender))throw;\r\n    Ark.acceptTOS(a,b);\r\n    }\r\n\r\n    \r\n    function setSource(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    Ark=ARK(a);    \r\n    Source=a;\r\n    logs.push(log(msg.sender,\"setSource\",0,a));\r\n    }\r\n\r\n    function setARKowner(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    Ark.initStats(\"\",a,333);\r\n    logs.push(log(msg.sender,\"setARKowner\",0,0x0));\r\n    }\r\n\r\n    function restoreItem(uint i){\r\n    if(isAdmin(msg.sender)||isModule(msg.sender)){\r\n    Ark.censorship(i,false,false);\r\n    logs.push(log(msg.sender,\"restore\",i,0x0));\r\n    }\r\n    }\r\n\r\n    function applyCensorship(uint i){\r\n    if(!isAdmin(msg.sender))throw;\r\n    Ark.censorship(i,true,false);\r\n    logs.push(log(msg.sender,\"censor\",i,0x0));\r\n    }\r\n\r\n    function deleteCoin(uint i){\r\n    if(!isModule(msg.sender))throw;\r\n    Ark.censorship(i,true,true);\r\n    logs.push(log(msg.sender,\"censor\",i,0x0));\r\n    }\r\n\r\n    function registerExternalBill(uint bi,address sellsNow,address buyerwallet,uint tipo,uint sell,uint c) private{\r\n    if(!isModule(msg.sender))throw;\r\n    Ark.registerExternalBill(bi,sellsNow,buyerwallet,tipo,sell,c);\r\n    }\r\n\r\n    function pushCoin(uint i,address a,string s) returns(bool){\r\n    if(msg.sender!=Source)throw;\r\n    CoinSent(i,a,s);\r\n    return true;\r\n    }\r\n\r\n    function isAdmin(address a)constant returns(bool){\r\n    bool b=false;\r\n    if((a==owner)||(administrator[a]))b=true;\r\n    return b;\r\n    }\r\n\r\n    function isModule(address a)constant returns(bool){\r\n    bool b=false;\r\n    if((a==owner)||(module[a]))b=true;\r\n    return b;\r\n    }\r\n\r\n    function getAdminName(address a)constant returns(string){\r\n    return adminName[a];\r\n    }\r\n\r\n    function getSource()constant returns(address){\r\n    return Source;\r\n    }\r\n\r\n    function readLog(uint i)constant returns(string,address,string,uint,address){\r\n    log l=logs[i];\r\n    return(getAdminName(l.admin),l.admin,l.what,l.id,l.a);\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\ncontract ARKTagger_1_00 {\r\n    /* Constructor */\r\n    ARK Ark;\r\n\r\n    address owner;\r\n\r\n    string[] lastTags;\r\n    mapping (string => uint[]) tagged;\r\n\r\n////////////////////////////////////////////////\r\n    log[] logs;\r\n\r\n    struct log{\r\n    address admin;\r\n    string action;\r\n    address addr;\r\n    }\r\n////////////////////////////////////////////////\r\n\r\n    function ARKTagger_1_00() {\r\n    owner=msg.sender;\r\n    }\r\n\r\n    function setOwner(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    owner=a;\r\n    logs.push(log(owner,\"setOwner\",a));\r\n    }\r\n\r\n    function setSource(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    Ark=ARK(a);\r\n    logs.push(log(owner,\"setSource\",a));\r\n    }\r\n\r\n    function readLog(uint i)constant returns(address,string,address){\r\n    log l=logs[i];\r\n    return(l.admin,l.action,l.addr);\r\n    }\r\n\r\n    function getLastTag(uint i) constant returns(string tag){\r\n    return lastTags[i];\r\n    }\r\n\r\n    function addTag(uint i,string tag){tagged[tag][tagged[tag].length++]=i;lastTags[lastTags.length++]=tag;}\r\n\r\n    function getTag(string tag,uint i) constant returns(uint,uint){return (tagged[tag][i],tagged[tag].length);}\r\n\r\n\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\ncontract ARK_TROGLOg_1_00 {\r\n    /* TROGLOg is part of ARK Endowment, all the documents are property of the relative ARK BOTs owners */\r\n    ARK Ark;\r\n     \r\n    address owner;\r\n\r\n    mapping(uint => string)troglogs;\r\n\r\n////////////////////////////////////////////////\r\n    log[] logs;\r\n\r\n    struct log{\r\n    address admin;\r\n    string action;\r\n    address addr;\r\n    uint docu;\r\n    }\r\n////////////////////////////////////////////////\r\n\r\n    function ARK_TROGLOg_1_00() {\r\n    owner=msg.sender;\r\n    }\r\n\r\n    //change TROGLOg controller\r\n    function setOwner(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    owner=a;\r\n    logs.push(log(owner,\"setOwner\",a,0));\r\n    }\r\n\r\n    //point TROGLOg to ARK\r\n    function setSource(address a) {\r\n    if(msg.sender!=owner)throw;\r\n    Ark=ARK(a);\r\n    logs.push(log(owner,\"setSource\",a,0));\r\n    }\r\n\r\n    function readLog(uint i)constant returns(address,string,address,uint){\r\n    log l=logs[i];\r\n    return(l.admin,l.action,l.addr,l.docu);\r\n    }\r\n\r\n    \r\n    function submitCoding(string s,uint i){\r\n    var(own,dat,a,b) = Ark.getBot(i);\r\n    if((own==msg.sender)){troglogs[i]=s;logs.push(log(msg.sender,\"setDocument\",0x0,i));}else{throw;}\r\n    }\r\n        \r\n    \r\n\r\n    function getLOg(uint i) constant returns(string){  \r\n    if(!(Ark.getOwnedBot(msg.sender,0)>0))throw;\r\n    return (troglogs[i]);}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLOg\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"submitCoding\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSource\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"readLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ARK_TROGLOg_1_00","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}