{"status":"1","message":"OK","result":[{"SourceCode":"contract mortal {\r\n    /* Define variable owner of the type address*/\r\n    address owner;\r\n\r\n    /* this function is executed at initialization and sets the owner of the contract */\r\n    function mortal() { owner = msg.sender; }\r\n\r\n    /* Function to recover the funds on the contract */\r\n    function kill() { if (msg.sender == owner) suicide(owner); }\r\n}\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        address oraclizeAddr = OAR.getAddress();\r\n        if (oraclizeAddr == 0){\r\n            oraclize_setNetwork(networkID_auto);\r\n            oraclizeAddr = OAR.getAddress();\r\n        }\r\n        oraclize = OraclizeI(oraclizeAddr);\r\n        _\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x9efbea6358bed926b293d2ce63a730d6d98d43dd)>0){\r\n            OAR = OraclizeAddrResolverI(0x9efbea6358bed926b293d2ce63a730d6d98d43dd);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\ncontract GitHubBounty is usingOraclize, mortal {\r\n    \r\n    enum QueryType { IssueState, IssueAssignee, UserAddress }\r\n    \r\n    struct Bounty {\r\n        string issueUrl;\r\n        uint prize;\r\n        uint balance;\r\n        uint queriesDelay;\r\n        string closedAt;\r\n        string assigneeLogin;\r\n        address assigneeAddress;\r\n    }\r\n \r\n    mapping (bytes32 => bytes32) queriesKey;\r\n    mapping (bytes32 => QueryType) queriesType;\r\n    mapping (bytes32 => Bounty) public bounties;\r\n    bytes32[] public bountiesKey;\r\n    mapping (address => bool) public sponsors;\r\n    \r\n    uint contractBalance;\r\n    \r\n    event SponsorAdded(address sponsorAddr);\r\n    event BountyAdded(bytes32 bountyKey, string issueUrl);\r\n    event IssueStateLoaded(bytes32 bountyKey, string closedAt);\r\n    event IssueAssigneeLoaded(bytes32 bountyKey, string login);\r\n    event UserAddressLoaded(bytes32 bountyKey, string ethAddress);\r\n    event SendingBounty(bytes32 bountyKey, uint prize);\r\n    event BountySent(bytes32 bountyKey);\r\n    \r\n    uint oraclizeGasLimit = 1000000;\r\n\r\n    function GitHubBounty() {\r\n    }\r\n    \r\n    function addSponsor(address sponsorAddr)\r\n    {\r\n        if (msg.sender != owner) throw;\r\n        sponsors[sponsorAddr] = true;\r\n        SponsorAdded(sponsorAddr);\r\n    }\r\n    \r\n    // issueUrl: full API url of github issue, e.g. https://api.github.com/repos/polybioz/hello-world/issues/6\r\n    // queriesDelay: oraclize queries delay in minutes, e.g. 60*24 for one day, min 1 minute\r\n    function addIssueBounty(string issueUrl, uint queriesDelay){\r\n        \r\n        if (!sponsors[msg.sender]) throw;\r\n        if (bytes(issueUrl).length==0) throw;\r\n        if (msg.value == 0) throw;\r\n        if (queriesDelay == 0) throw;\r\n        \r\n        bytes32 bountyKey = sha3(issueUrl);\r\n        \r\n        bounties[bountyKey].issueUrl = issueUrl;\r\n        bounties[bountyKey].prize = msg.value;\r\n        bounties[bountyKey].balance = msg.value;\r\n        bounties[bountyKey].queriesDelay = queriesDelay;\r\n        \r\n        bountiesKey.push(bountyKey);\r\n        \r\n        BountyAdded(bountyKey, issueUrl);\r\n \r\n        getIssueState(queriesDelay, bountyKey);\r\n    }\r\n     \r\n    function getIssueState(uint delay, bytes32 bountyKey) internal {\r\n        contractBalance = this.balance;\r\n        \r\n        string issueUrl = bounties[bountyKey].issueUrl;\r\n        bytes32 myid = oraclize_query(delay, \"URL\", strConcat(\"json(\",issueUrl,\").closed_at\"), oraclizeGasLimit);\r\n        queriesKey[myid] = bountyKey;\r\n        queriesType[myid] = QueryType.IssueState;\r\n        \r\n        bounties[bountyKey].balance -= contractBalance - this.balance;\r\n    }\r\n    \r\n    function getIssueAssignee(uint delay, bytes32 bountyKey) internal {\r\n        contractBalance = this.balance;\r\n        \r\n        string issueUrl = bounties[bountyKey].issueUrl;\r\n        bytes32 myid = oraclize_query(delay, \"URL\", strConcat(\"json(\",issueUrl,\").assignee.login\"), oraclizeGasLimit);\r\n        queriesKey[myid] = bountyKey;\r\n        queriesType[myid] = QueryType.IssueAssignee;\r\n        \r\n        bounties[bountyKey].balance -= contractBalance - this.balance;\r\n    }\r\n    \r\n    function getUserAddress(uint delay, bytes32 bountyKey) internal {\r\n        contractBalance = this.balance;\r\n        \r\n        string login = bounties[bountyKey].assigneeLogin;\r\n        string memory url = strConcat(\"https://api.github.com/users/\", login);\r\n        bytes32 myid = oraclize_query(delay, \"URL\", strConcat(\"json(\",url,\").location\"), oraclizeGasLimit);\r\n        queriesKey[myid] = bountyKey;\r\n        queriesType[myid] = QueryType.UserAddress;\r\n        \r\n        bounties[bountyKey].balance -= contractBalance - this.balance;\r\n    }\r\n    \r\n    function sendBounty(bytes32 bountyKey) internal {\r\n        string issueUrl = bounties[bountyKey].issueUrl;\r\n        \r\n        SendingBounty(bountyKey, bounties[bountyKey].balance);\r\n        if(bounties[bountyKey].balance > 0) {\r\n            if (bounties[bountyKey].assigneeAddress.send(bounties[bountyKey].balance)) {\r\n                bounties[bountyKey].balance = 0;\r\n                BountySent(bountyKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) {\r\n        if (msg.sender != oraclize_cbAddress()) throw;\r\n \r\n        bytes32 bountyKey = queriesKey[myid];\r\n        QueryType queryType = queriesType[myid];\r\n        uint queriesDelay = bounties[bountyKey].queriesDelay;\r\n        \r\n        if(queryType == QueryType.IssueState) {\r\n            IssueStateLoaded(bountyKey, result);\r\n            if(bytes(result).length <= 4) { // oraclize returns \"None\" instead of null\r\n                getIssueState(queriesDelay, bountyKey);\r\n            }\r\n            else{\r\n                bounties[bountyKey].closedAt = result;\r\n                getIssueAssignee(0, bountyKey);\r\n            }\r\n        } \r\n        else if(queryType == QueryType.IssueAssignee) {\r\n            IssueAssigneeLoaded(bountyKey, result);\r\n            if(bytes(result).length <= 4) { // oraclize returns \"None\" instead of null\r\n                getIssueAssignee(queriesDelay, bountyKey);\r\n            }\r\n            else {\r\n                bounties[bountyKey].assigneeLogin = result;\r\n                getUserAddress(0, bountyKey);\r\n            }\r\n        } \r\n        else if(queryType == QueryType.UserAddress) {\r\n            UserAddressLoaded(bountyKey, result);\r\n            if(bytes(result).length <= 4) { // oraclize returns \"None\" instead of null\r\n                getUserAddress(queriesDelay, bountyKey);\r\n            }\r\n            else {\r\n                bounties[bountyKey].assigneeAddress = parseAddr(result);\r\n                sendBounty(bountyKey);\r\n            }\r\n        } \r\n        \r\n        delete queriesType[myid];\r\n        delete queriesKey[myid];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bountiesKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"issueUrl\",\"type\":\"string\"},{\"name\":\"queriesDelay\",\"type\":\"uint256\"}],\"name\":\"addIssueBounty\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bounties\",\"outputs\":[{\"name\":\"issueUrl\",\"type\":\"string\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"queriesDelay\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"string\"},{\"name\":\"assigneeLogin\",\"type\":\"string\"},{\"name\":\"assigneeAddress\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sponsorAddr\",\"type\":\"address\"}],\"name\":\"addSponsor\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sponsorAddr\",\"type\":\"address\"}],\"name\":\"SponsorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"issueUrl\",\"type\":\"string\"}],\"name\":\"BountyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"closedAt\",\"type\":\"string\"}],\"name\":\"IssueStateLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"login\",\"type\":\"string\"}],\"name\":\"IssueAssigneeLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethAddress\",\"type\":\"string\"}],\"name\":\"UserAddressLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"SendingBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyKey\",\"type\":\"bytes32\"}],\"name\":\"BountySent\",\"type\":\"event\"}]","ContractName":"GitHubBounty","CompilerVersion":"v0.3.5-2016-08-08-c3ed550","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}