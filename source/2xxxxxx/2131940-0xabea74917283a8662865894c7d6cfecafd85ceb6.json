{"status":"1","message":"OK","result":[{"SourceCode":"contract AmIOnTheFork {\r\n    function forked() constant returns(bool);\r\n}\r\n\r\ncontract SplitterEtcToEth {\r\n\r\n    address intermediate;\r\n    address owner;\r\n\r\n    // there is a limit accepted by exchange\r\n    uint256 public upLimit = 400 ether;\r\n    // and exchange costs, ignore small transactions\r\n    uint256 public lowLimit = 0.5 ether;\r\n\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\r\n\r\n    function SplitterEtcToEth() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() {\r\n        //stop too small transactions\r\n        if (msg.value < lowLimit)\r\n            throw;\r\n\r\n        if (amIOnTheFork.forked()) {\r\n            // always return value from FORK chain\r\n            if (!msg.sender.send(msg.value))\r\n                throw;\r\n        } else {\r\n            // process with exchange on the CLASSIC chain\r\n            if (msg.value <= upLimit) {\r\n                // can exchange, send to intermediate\r\n                if (!intermediate.send(msg.value))\r\n                    throw;\r\n            } else {\r\n                // send only acceptable value, return rest\r\n                if (!intermediate.send(upLimit))\r\n                    throw;\r\n                if (!msg.sender.send(msg.value - upLimit))\r\n                    throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setIntermediate(address _intermediate) {\r\n        if (msg.sender != owner) throw;\r\n        intermediate = _intermediate;\r\n    }\r\n    function setUpLimit(uint _limit) {\r\n        if (msg.sender != owner) throw;\r\n        upLimit = _limit;\r\n    }\r\n    function setLowLimit(uint _limit) {\r\n        if (msg.sender != owner) throw;\r\n        lowLimit = _limit;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setUpLimit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setLowLimit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_intermediate\",\"type\":\"address\"}],\"name\":\"setIntermediate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"SplitterEtcToEth","CompilerVersion":"v0.3.5-2016-08-10-e6a031d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}