{"status":"1","message":"OK","result":[{"SourceCode":"contract Looper {\r\n\r\nfunction canDoLoop(uint _costSansLoops, uint _loopCost, uint _numberOfLoops) public constant returns (bool) {\r\n    uint gasLimit = getGasLimit();\r\n    uint gasForLoops = gasLimit - _costSansLoops;\r\n    uint loopLimit = getLoopLimit(gasForLoops, _loopCost);\r\n    if(_numberOfLoops < loopLimit) return true;\r\n    return false;\r\n}\r\n\r\nfunction getGasLimit() internal constant returns (uint) {\r\n    uint gasLimit;\r\n\r\n    assembly {\r\n        gasLimit := gaslimit\r\n    }\r\n    return gasLimit;\r\n}\r\n\r\nfunction getLoopLimit(uint _gasForLoops, uint _loopCost) internal constant returns (uint) {\r\n    uint loopLimit = _gasForLoops / _loopCost;\r\n    return loopLimit;\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_costSansLoops\",\"type\":\"uint256\"},{\"name\":\"_loopCost\",\"type\":\"uint256\"},{\"name\":\"_numberOfLoops\",\"type\":\"uint256\"}],\"name\":\"canDoLoop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"Looper","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}