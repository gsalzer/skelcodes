{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .6;\r\n\r\ncontract Campaign {\r\n\r\n        address public JohanNygren;\r\n        bool public campaignOpen;\r\n\r\n        function Campaign() {\r\n                JohanNygren = 0x948176cb42b65d835ee4324914b104b66fb93b52;\r\n                campaignOpen = true;\r\n        }\r\n\r\n        modifier onlyJohan {\r\n                if (msg.sender != JohanNygren) throw;\r\n                _;\r\n        }\r\n\r\n        modifier isOpen {\r\n                if (campaignOpen != true) throw;\r\n                _;\r\n        }\r\n\r\n        function closeCampaign() onlyJohan {\r\n                campaignOpen = false;\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\ncontract RES is Campaign {\r\n\r\n        /* Public variables of the token */\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n\r\n        uint public totalSupply;\r\n\r\n        /* This creates an array with all balances */\r\n        mapping(address => uint256) public balanceOf;\r\n\r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        /* Bought or sold */\r\n\r\n        event Bought(address from, uint amount);\r\n        event Sold(address from, uint amount);\r\n\r\n        /* Initializes contract with name, symbol and decimals */\r\n\r\n        function RES() {\r\n                name = \"RES\";\r\n                symbol = \"RES\";\r\n                decimals = 18;\r\n        }\r\n\r\n        function buy() isOpen public payable {\r\n                balanceOf[msg.sender] += msg.value;\r\n                totalSupply += msg.value;\r\n                Bought(msg.sender, msg.value);\r\n        }\r\n\r\n        function sell(uint256 _value) public {\r\n                if (balanceOf[msg.sender] < _value) throw;\r\n                balanceOf[msg.sender] -= _value;\r\n\r\n                if (!msg.sender.send(_value)) throw;\r\n\r\n                totalSupply -= _value;\r\n                Sold(msg.sender, _value);\r\n\r\n        }\r\n\r\n}\r\n\r\ncontract SwarmRedistribution is Campaign, RES {\r\n\r\n        struct dividendPathway {\r\n                address from;\r\n                uint amount;\r\n                uint timeStamp;\r\n        }\r\n\r\n        mapping(address => dividendPathway[]) public dividendPathways;\r\n\r\n        mapping(address => bool) public isHuman;\r\n\r\n        mapping(address => uint256) public totalBasicIncome;\r\n\r\n        uint taxRate;\r\n        uint exchangeRate;\r\n\r\n        address[] humans;\r\n        mapping(address => bool) inHumans;\r\n\r\n        event Swarm(address indexed leaf, address indexed node, uint256 share);\r\n\r\n        function SwarmRedistribution() {\r\n\r\n                /* Tax-rate in parts per thousand */\r\n                taxRate = 20;\r\n\r\n                /* Exchange-rate in parts per thousand */\r\n                exchangeRate = 0;\r\n\r\n        }\r\n\r\n        /* Send coins */\r\n        function transfer(address _to, uint256 _value) isOpen {\r\n                /* reject transaction to self to prevent dividend pathway loops*/\r\n                if (_to == msg.sender) throw;\r\n\r\n                /* if the sender doenst have enough balance then stop */\r\n                if (balanceOf[msg.sender] < _value) throw;\r\n                if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n\r\n                /* Calculate tax */\r\n                uint256 taxCollected = _value * taxRate / 1000;\r\n                uint256 sentAmount;\r\n\r\n                /* Create the dividend pathway */\r\n                dividendPathways[_to].push(dividendPathway({\r\n                        from: msg.sender,\r\n                        amount: _value,\r\n                        timeStamp: now\r\n                }));\r\n\r\n                iterateThroughSwarm(_to, now, taxCollected);\r\n\r\n                if (humans.length > 0) {\r\n                        doSwarm(_to, taxCollected);\r\n                        sentAmount = _value;\r\n                } else sentAmount = _value - taxCollected; /* Return tax */\r\n\r\n\r\n                /* Add and subtract new balances */\r\n\r\n                balanceOf[msg.sender] -= sentAmount;\r\n                balanceOf[_to] += _value - taxCollected;\r\n\r\n                /* Notifiy anyone listening that this transfer took place */\r\n                Transfer(msg.sender, _to, sentAmount);\r\n        }\r\n\r\n\r\n        function iterateThroughSwarm(address _node, uint _timeStamp, uint _taxCollected) internal {\r\n                for (uint i = 0; i < dividendPathways[_node].length; i++) {\r\n\r\n                        uint timeStamp = dividendPathways[_node][i].timeStamp;\r\n                        if (timeStamp <= _timeStamp) {\r\n\r\n                                address node = dividendPathways[_node][i].from;\r\n\r\n                                if (\r\n                                        isHuman[node] == true &&\r\n                                        inHumans[node] == false\r\n                                ) {\r\n                                        humans.push(node);\r\n                                        inHumans[node] = true;\r\n                                }\r\n\r\n                                if (dividendPathways[_node][i].amount - _taxCollected > 0) {\r\n                                        dividendPathways[_node][i].amount -= _taxCollected;\r\n                                } else removeDividendPathway(_node, i);\r\n\r\n                                iterateThroughSwarm(node, timeStamp, _taxCollected);\r\n                        }\r\n                }\r\n        }\r\n\r\n        function doSwarm(address _leaf, uint256 _taxCollected) internal {\r\n\r\n                uint256 share = _taxCollected / humans.length;\r\n\r\n                for (uint i = 0; i < humans.length; i++) {\r\n\r\n                        balanceOf[humans[i]] += share;\r\n                        totalBasicIncome[humans[i]] += share;\r\n\r\n                        inHumans[humans[i]] = false;\r\n\r\n                        /* Notifiy anyone listening that this swarm took place */\r\n                        Swarm(_leaf, humans[i], share);\r\n                }\r\n                delete humans;\r\n        }\r\n\r\n        function removeDividendPathway(address node, uint index) internal {\r\n                delete dividendPathways[node][index];\r\n                for (uint i = index; i < dividendPathways[node].length - 1; i++) {\r\n                        dividendPathways[node][i] = dividendPathways[node][i + 1];\r\n                }\r\n                dividendPathways[node].length--;\r\n        }\r\n\r\n}\r\n\r\ncontract CampaignBeneficiary is Campaign, RES, SwarmRedistribution {\r\n\r\n        event BuyWithPathwayFromBeneficiary(address from, uint amount);\r\n\r\n        function CampaignBeneficiary() {\r\n                isHuman[JohanNygren] = true;\r\n        }\r\n\r\n        function simulatePathwayFromBeneficiary() isOpen public payable {\r\n                balanceOf[msg.sender] += msg.value;\r\n                totalSupply += msg.value;\r\n\r\n                /* Create the dividend pathway */\r\n                dividendPathways[msg.sender].push(dividendPathway({\r\n                        from: JohanNygren,\r\n                        amount: msg.value,\r\n                        timeStamp: now\r\n                }));\r\n\r\n                BuyWithPathwayFromBeneficiary(msg.sender, msg.value);\r\n        }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividendPathways\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBasicIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"simulatePathwayFromBeneficiary\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCampaign\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JohanNygren\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHuman\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyWithPathwayFromBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leaf\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Swarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"}]","ContractName":"CampaignBeneficiary","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}