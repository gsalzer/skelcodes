{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title DVIP Contract. DCAsset Membership Token contract.\r\n *\r\n * @author Ray Pulver, ray@decentralizedcapital.com\r\n */\r\ncontract Relay {\r\n  function relayReceiveApproval(address _caller, address _spender, uint256 _amount, bytes _extraData) returns (bool success);\r\n}\r\n\r\ncontract DVIPBackend {\r\n  uint8 public decimals;\r\n  function assert(bool assertion) {\r\n    if (!assertion) throw;\r\n  }\r\n  address public owner;\r\n  event SetOwner(address indexed previousOwner, address indexed newOwner);\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _\r\n  }\r\n  function setOwner(address newOwner) onlyOwner {\r\n    SetOwner(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  bool internal locked;\r\n  event Locked(address indexed from);\r\n  event PropertySet(address indexed from);\r\n  modifier onlyIfUnlocked {\r\n    assert(!locked);\r\n    _\r\n  }\r\n  modifier setter {\r\n    _\r\n    PropertySet(msg.sender);\r\n  }\r\n  modifier onlyOwnerUnlocked {\r\n    assert(!locked && msg.sender == owner);\r\n    _\r\n  }\r\n  function lock() onlyOwner onlyIfUnlocked {\r\n    locked = true;\r\n    Locked(msg.sender);\r\n  }\r\n  function isLocked() returns (bool status) {\r\n    return locked;\r\n  }\r\n  bytes32 public standard = 'Token 0.1';\r\n  bytes32 public name;\r\n  bytes32 public symbol;\r\n  bool public allowTransactions;\r\n  uint256 public totalSupply;\r\n\r\n  event Approval(address indexed from, address indexed spender, uint256 amount);\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function () {\r\n    throw;\r\n  }\r\n\r\n  uint256 public expiry;\r\n  uint8 public feeDecimals;\r\n  mapping (address => uint256) public validAfter;\r\n  uint256 public mustHoldFor;\r\n  address public hotwalletAddress;\r\n  address public frontendAddress;\r\n  mapping (address => bool) public frozenAccount;\r\n  mapping (address => uint256) public exportFee;\r\n\r\n  event FeeSetup(address indexed from, address indexed target, uint256 amount);\r\n  event Processed(address indexed sender);\r\n\r\n  modifier onlyAsset {\r\n    if (msg.sender != frontendAddress) throw;\r\n    _\r\n  }\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   */\r\n  function DVIPBackend(address _hotwalletAddress, address _frontendAddress) {\r\n    owner = msg.sender;\r\n    hotwalletAddress = _hotwalletAddress;\r\n    frontendAddress = _frontendAddress;\r\n    allowTransactions = true;\r\n    totalSupply = 0;\r\n    name = \"DVIP\";\r\n    symbol = \"DVIP\";\r\n    feeDecimals = 6;\r\n    expiry = 1514764800; //1 jan 2018\r\n    mustHoldFor = 86400;\r\n  }\r\n\r\n  function setHotwallet(address _address) onlyOwnerUnlocked {\r\n    hotwalletAddress = _address;\r\n    PropertySet(msg.sender);\r\n  }\r\n\r\n  function setFrontend(address _address) onlyOwnerUnlocked {\r\n    frontendAddress = _address;\r\n    PropertySet(msg.sender);\r\n  } \r\n\r\n  /**\r\n   * @notice Transfer `_amount` from `msg.sender.address()` to `_to`.\r\n   *\r\n   * @param _to Address that will receive.\r\n   * @param _amount Amount to be transferred.\r\n   */\r\n  function transfer(address caller, address _to, uint256 _amount) onlyAsset returns (bool success) {\r\n    assert(allowTransactions);\r\n    assert(balanceOf[caller] >= _amount);\r\n    assert(balanceOf[_to] + _amount >= balanceOf[_to]);\r\n    assert(!frozenAccount[caller]);\r\n    assert(!frozenAccount[_to]);\r\n    balanceOf[caller] -= _amount;\r\n    uint256 preBalance = balanceOf[_to];\r\n    balanceOf[_to] += _amount;\r\n    if (preBalance <= 1 && balanceOf[_to] >= 1) {\r\n      validAfter[_to] = now + mustHoldFor;\r\n    }\r\n    Transfer(caller, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `_amount` from `_from` to `_to`.\r\n   *\r\n   * @param _from Origin address\r\n   * @param _to Address that will receive\r\n   * @param _amount Amount to be transferred.\r\n   * @return result of the method call\r\n   */\r\n  function transferFrom(address caller, address _from, address _to, uint256 _amount) onlyAsset returns (bool success) {\r\n    assert(allowTransactions);\r\n    assert(balanceOf[_from] >= _amount);\r\n    assert(balanceOf[_to] + _amount >= balanceOf[_to]);\r\n    assert(_amount <= allowance[_from][caller]);\r\n    assert(!frozenAccount[caller]);\r\n    assert(!frozenAccount[_from]);\r\n    assert(!frozenAccount[_to]);\r\n    balanceOf[_from] -= _amount;\r\n    uint256 preBalance = balanceOf[_to];\r\n    balanceOf[_to] += _amount;\r\n    allowance[_from][caller] -= _amount;\r\n    if (balanceOf[_to] >= 1 && preBalance <= 1) {\r\n      validAfter[_to] = now + mustHoldFor;\r\n    }\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve spender `_spender` to transfer `_amount` from `msg.sender.address()`\r\n   *\r\n   * @param _spender Address that receives the cheque\r\n   * @param _amount Amount on the cheque\r\n   * @param _extraData Consequential contract to be executed by spender in same transcation.\r\n   * @return result of the method call\r\n   */\r\n  function approveAndCall(address caller, address _spender, uint256 _amount, bytes _extraData) onlyAsset returns (bool success) {\r\n    assert(allowTransactions);\r\n    allowance[caller][_spender] = _amount;\r\n    Relay(frontendAddress).relayReceiveApproval(caller, _spender, _amount, _extraData);\r\n    Approval(caller, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve spender `_spender` to transfer `_amount` from `msg.sender.address()`\r\n   *\r\n   * @param _spender Address that receives the cheque\r\n   * @param _amount Amount on the cheque\r\n   * @return result of the method call\r\n   */\r\n  function approve(address caller, address _spender, uint256 _amount) onlyAsset returns (bool success) {\r\n    assert(allowTransactions);\r\n    allowance[caller][_spender] = _amount;\r\n    Approval(caller, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* ---------------  multisig admin methods  --------------*/\r\n\r\n\r\n\r\n  /**\r\n   * @notice Sets the expiry time in milliseconds since 1970.\r\n   *\r\n   * @param ts milliseconds since 1970.\r\n   *\r\n   */\r\n  function setExpiry(uint256 ts) onlyOwner {\r\n    expiry = ts;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Mints `mintedAmount` new tokens to the hotwallet `hotWalletAddress`.\r\n   *\r\n   * @param mintedAmount Amount of new tokens to be minted.\r\n   */\r\n  function mint(uint256 mintedAmount) onlyOwner {\r\n    balanceOf[hotwalletAddress] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  function freezeAccount(address target, bool frozen) onlyOwner {\r\n    frozenAccount[target] = frozen;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  function seizeTokens(address target, uint256 amount) onlyOwner {\r\n    assert(balanceOf[target] >= amount);\r\n    assert(frozenAccount[target]);\r\n    balanceOf[target] -= amount;\r\n    balanceOf[hotwalletAddress] += amount;\r\n    Transfer(target, hotwalletAddress, amount);\r\n  }\r\n\r\n  function destroyTokens(uint256 amt) onlyOwner {\r\n    assert(balanceOf[hotwalletAddress] >= amt);\r\n    balanceOf[hotwalletAddress] -= amt;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets an export fee of `fee` on address `addr`\r\n   *\r\n   * @param addr Address for which the fee is valid\r\n   * @param addr fee Fee\r\n   *\r\n   */\r\n  function setExportFee(address addr, uint256 fee) onlyOwner {\r\n    exportFee[addr] = fee;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  function setHoldingPeriod(uint256 ts) onlyOwner {\r\n    mustHoldFor = ts;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  function setAllowTransactions(bool allow) onlyOwner {\r\n    allowTransactions = allow;\r\n    Processed(msg.sender);\r\n  }\r\n\r\n  /* --------------- fee calculation method ---------------- */\r\n\r\n\r\n  /**\r\n   * @notice 'Returns the fee for a transfer from `from` to `to` on an amount `amount`.\r\n   *\r\n   * Fee's consist of a possible\r\n   *    - import fee on transfers to an address\r\n   *    - export fee on transfers from an address\r\n   * DVIP ownership on an address\r\n   *    - reduces fee on a transfer from this address to an import fee-ed address\r\n   *    - reduces the fee on a transfer to this address from an export fee-ed address\r\n   * DVIP discount does not work for addresses that have an import fee or export fee set up against them.\r\n   *\r\n   * DVIP discount goes up to 100%\r\n   *\r\n   * @param from From address\r\n   * @param to To address\r\n   * @param amount Amount for which fee needs to be calculated.\r\n   *\r\n   */\r\n  function feeFor(address from, address to, uint256 amount) constant external returns (uint256 value) {\r\n    uint256 fee = exportFee[from];\r\n    if (fee == 0) return 0;\r\n    if ((exportFee[from] == 0 && balanceOf[from] != 0 && now < expiry && validAfter[from] <= now) || (balanceOf[to] != 0 && now < expiry && validAfter[to] <= now)) return 0;\r\n    return div10(amount*fee, feeDecimals);\r\n  }\r\n  function div10(uint256 a, uint8 b) internal returns (uint256 result) {\r\n    for (uint8 i = 0; i < b; i++) {\r\n      a /= 10;\r\n    }\r\n    return a;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"setExpiry\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assertion\",\"type\":\"bool\"}],\"name\":\"assert\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHotwallet\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frontendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFrontend\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotwalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seizeTokens\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setExportFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeFor\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"setHoldingPeriod\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exportFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mustHoldFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowTransactions\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hotwalletAddress\",\"type\":\"address\"},{\"name\":\"_frontendAddress\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"PropertySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Processed\",\"type\":\"event\"}]","ContractName":"DVIPBackend","CompilerVersion":"v0.3.6+commit.3fc68da","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000293c008e3060746f728ea59565b7a33dc68802be0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}