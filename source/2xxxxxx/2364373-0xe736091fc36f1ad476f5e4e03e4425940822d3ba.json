{"status":"1","message":"OK","result":[{"SourceCode":"/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract Token {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract SingularDTVToken is Token {\r\n    function issueTokens(address _for, uint tokenCount) returns (bool);\r\n}\r\ncontract SingularDTVCrowdfunding {\r\n    function twoYearsPassed() returns (bool);\r\n    function startDate() returns (uint);\r\n    function CROWDFUNDING_PERIOD() returns (uint);\r\n    function TOKEN_TARGET() returns (uint);\r\n    function valuePerShare() returns (uint);\r\n    function fundBalance() returns (uint);\r\n    function campaignEndedSuccessfully() returns (bool);\r\n}\r\n\r\n\r\n/// @title Fund contract - Implements revenue distribution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract SingularDTVFund {\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    SingularDTVToken public singularDTVToken;\r\n    SingularDTVCrowdfunding public singularDTVCrowdfunding;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    address constant public workshop = 0xc78310231aA53bD3D0FEA2F8c705C67730929D8f;\r\n    uint public totalRevenue;\r\n\r\n    // User's address => Revenue at time of withdraw\r\n    mapping (address => uint) public revenueAtTimeOfWithdraw;\r\n\r\n    // User's address => Revenue which can be withdrawn\r\n    mapping (address => uint) public owed;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // Only guard is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier campaignEndedSuccessfully() {\r\n        if (!singularDTVCrowdfunding.campaignEndedSuccessfully()) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    /// @dev Deposits revenue. Returns success.\r\n    function depositRevenue()\r\n        external\r\n        campaignEndedSuccessfully\r\n        returns (bool)\r\n    {\r\n        totalRevenue += msg.value;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Withdraws revenue for user. Returns revenue.\r\n    /// @param forAddress user's address.\r\n    function calcRevenue(address forAddress) internal returns (uint) {\r\n        return singularDTVToken.balanceOf(forAddress) * (totalRevenue - revenueAtTimeOfWithdraw[forAddress]) / singularDTVToken.totalSupply();\r\n    }\r\n\r\n    /// @dev Withdraws revenue for user. Returns revenue.\r\n    function withdrawRevenue()\r\n        external\r\n        noEther\r\n        returns (uint)\r\n    {\r\n        uint value = calcRevenue(msg.sender) + owed[msg.sender];\r\n        revenueAtTimeOfWithdraw[msg.sender] = totalRevenue;\r\n        owed[msg.sender] = 0;\r\n        if (value > 0 && !msg.sender.send(value)) {\r\n            throw;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /// @dev Credits revenue to owed balance.\r\n    /// @param forAddress user's address.\r\n    function softWithdrawRevenueFor(address forAddress)\r\n        external\r\n        noEther\r\n        returns (uint)\r\n    {\r\n        uint value = calcRevenue(forAddress);\r\n        revenueAtTimeOfWithdraw[forAddress] = totalRevenue;\r\n        owed[forAddress] += value;\r\n        return value;\r\n    }\r\n\r\n    /// @dev Setup function sets external contracts' addresses.\r\n    /// @param singularDTVTokenAddress Token address.\r\n    function setup(address singularDTVCrowdfundingAddress, address singularDTVTokenAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(singularDTVCrowdfunding) == 0 && address(singularDTVToken) == 0) {\r\n            singularDTVCrowdfunding = SingularDTVCrowdfunding(singularDTVCrowdfundingAddress);\r\n            singularDTVToken = SingularDTVToken(singularDTVTokenAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Contract constructor function sets guard address.\r\n    function SingularDTVFund() noEther {\r\n        // Set owner address\r\n        owner = msg.sender;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"singularDTVCrowdfundingAddress\",\"type\":\"address\"},{\"name\":\"singularDTVTokenAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"softWithdrawRevenueFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workshop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"revenueAtTimeOfWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singularDTVToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singularDTVCrowdfunding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"SingularDTVFund","CompilerVersion":"v0.3.5+commit.5f97274","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}