{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.1;\r\n\r\ncontract FipsNotary {\r\n\r\n    address admin;\r\n    mapping(bytes20 => address) ledger;\r\n    mapping(address => bool) registrants;\r\n\r\n    event FipsData(bytes20 indexed fips, address indexed publisher, bytes data);\r\n    event FipsRegistration(bytes20 indexed fips, address indexed owner);\r\n    event FipsTransfer(bytes20 indexed fips, address indexed old_owner, address indexed new_owner);\r\n    event RegistrantApproval(address indexed registrant);\r\n    event RegistrantRemoval(address indexed registrant);\r\n\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != admin) throw;\r\n        _\r\n        ;\r\n    }\r\n\r\n    function() {\r\n        throw;\r\n    }\r\n\r\n    function FipsNotary() {\r\n        admin = msg.sender;\r\n        registrantApprove(admin);\r\n    }\r\n\r\n    function fipsIsRegistered(bytes20 fips) constant returns (bool exists) {\r\n        return (ledger[fips] != 0x0) ? true : false;\r\n    }\r\n\r\n    function fipsOwner(bytes20 fips) constant returns (address owner) {\r\n        return ledger[fips];\r\n    }\r\n\r\n    function fipsPublishData(bytes20 fips, bytes data) {\r\n        if ((msg.sender != admin) && (msg.sender != ledger[fips])) {\r\n            throw;\r\n        }\r\n        FipsData(fips, msg.sender, data);\r\n    }\r\n\r\n    function fipsAddToLedger(bytes20 fips, address owner) internal {\r\n        if (fipsIsRegistered(fips)) {\r\n            throw;\r\n        }\r\n        ledger[fips] = owner;\r\n        FipsRegistration(fips, owner);\r\n    }\r\n\r\n    function fipsChangeOwner(bytes20 fips, address old_owner, address new_owner) internal {\r\n        if (!fipsIsRegistered(fips)) {\r\n            throw;\r\n        }\r\n        ledger[fips] = new_owner;\r\n        FipsTransfer(fips, old_owner, new_owner);\r\n    }\r\n\r\n    function fipsGenerate() internal returns (bytes20 fips) {\r\n        fips = ripemd160(block.blockhash(block.number), sha256(msg.sender, block.number, block.timestamp, msg.gas));\r\n        if (fipsIsRegistered(fips)) {\r\n            return fipsGenerate();\r\n        }\r\n        return fips;\r\n    }\r\n\r\n    function fipsLegacyRegister(bytes20[] fips, address owner) {\r\n        if (registrants[msg.sender] != true) {\r\n            throw;\r\n        }\r\n        for (uint i = 0; i < fips.length; i++) {\r\n            fipsAddToLedger(fips[i], owner);\r\n        }\r\n    }\r\n\r\n    function fipsRegister(uint count, address owner, bytes data) {\r\n        if (registrants[msg.sender] != true) {\r\n            throw;\r\n        }\r\n        if ((count < 1) || (count > 100)) {\r\n            throw;\r\n        }\r\n        bytes20 fips;\r\n        for (uint i = 1; i <= count; i++) {\r\n            fips = fipsGenerate();\r\n            fipsAddToLedger(fips, owner);\r\n            if (data.length > 0) {\r\n                FipsData(fips, owner, data);\r\n            }\r\n        }\r\n    }\r\n\r\n    function fipsTransfer(bytes20 fips, address new_owner) {\r\n        if (msg.sender != ledger[fips]) {\r\n            throw;\r\n        }\r\n        fipsChangeOwner(fips, msg.sender, new_owner);\r\n    }\r\n\r\n    function registrantApprove(address registrant) onlyAdmin {\r\n        if (registrants[registrant] != true) {\r\n            registrants[registrant] = true;\r\n            RegistrantApproval(registrant);\r\n        }\r\n    }\r\n\r\n    function registrantRemove(address registrant) onlyAdmin {\r\n        if (registrants[registrant] == true) {\r\n            delete(registrants[registrant]);\r\n            RegistrantRemoval(registrant);\r\n        }\r\n    }\r\n\r\n    function withdrawFunds() onlyAdmin {\r\n        if (!admin.send(this.balance)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fipsRegister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fips\",\"type\":\"bytes20\"},{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"fipsTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fips\",\"type\":\"bytes20[]\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"fipsLegacyRegister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fips\",\"type\":\"bytes20\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fipsPublishData\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fips\",\"type\":\"bytes20\"}],\"name\":\"fipsOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fips\",\"type\":\"bytes20\"}],\"name\":\"fipsIsRegistered\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"registrantApprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"registrantRemove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fips\",\"type\":\"bytes20\"},{\"indexed\":true,\"name\":\"publisher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FipsData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fips\",\"type\":\"bytes20\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FipsRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fips\",\"type\":\"bytes20\"},{\"indexed\":true,\"name\":\"old_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"FipsTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"RegistrantApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"RegistrantRemoval\",\"type\":\"event\"}]","ContractName":"FipsNotary","CompilerVersion":"v0.4.3+commit.2353da71","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}