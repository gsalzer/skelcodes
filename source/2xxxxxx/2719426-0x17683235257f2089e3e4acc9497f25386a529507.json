{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n//  Custom Wallet Contract that forces me to save, until i have reached my goal\r\n//  and prevents me from withdrawing my funds before I have reached my personal goal\r\n//\r\n//  Motivation is to stop my bad trading habbits to sell ether everytime the price drops...\r\n//  :D :D\r\n//\r\n//  This contract is Public Domain, please feel free to copy / modify\r\n//  Questions/Comments/Feedback welcome: drether00@gmail.com\r\n//\r\npragma solidity ^0.4.5;\r\n\r\ncontract HelpMeSave { \r\n   \r\n   address public me;    // me, only I can interact with this contract\r\n   uint256 public savings_goal; // how much I want to save\r\n   \r\n   // Constructor / Initialize (only runs at contract creation)\r\n   function MyTestWallet7(){\r\n       me = msg.sender;   // store owner, so only I can withdraw\r\n       set_savings_goal(1000 ether);\r\n   }\r\n   \r\n   // set new savings goal if I want to, once I have reached my goal\r\n   function set_savings_goal(uint256 new_goal) noone_else { \r\n       if (this.balance >= savings_goal) savings_goal = new_goal;\r\n   }\r\n   \r\n   // these functions I can use to deposit money into this account\r\n    function deposit() public payable {} //\r\n    function() payable {deposit();} //\r\n    \r\n    // Only I can use this once I have reached my goal   \r\n    function withdraw () public noone_else { \r\n\r\n         uint256 withdraw_amt = this.balance;\r\n         \r\n         if (msg.sender != me || withdraw_amt < savings_goal ){ // someone else tries to withdraw, NONONO!!!\r\n             withdraw_amt = 0;                     // or target savings not reached\r\n         }\r\n\r\n         if (!msg.sender.send(withdraw_amt)) throw; // everything ok, send it back to me\r\n\r\n   }\r\n\r\n    // This modifier stops anyone else from using this contract\r\n    modifier noone_else() { // most functions can only be used by original creator\r\n        if (msg.sender == me) \r\n            _;\r\n    }\r\n\r\n    // Killing of contract only possible with password (--> large number, give to nextofkin/solicitor)\r\n    function recovery (uint256 _password) noone_else {\r\n       //calculate a hash from the password, and if it matches, return to contract owner\r\n       if ( uint256(sha3(_password)) % 10000000000000000000 == 49409376313952921 ){\r\n                selfdestruct (me);\r\n       } else throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"MyTestWallet7\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"uint256\"}],\"name\":\"recovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_goal\",\"type\":\"uint256\"}],\"name\":\"set_savings_goal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"me\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"savings_goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"HelpMeSave","CompilerVersion":"v0.4.5+commit.b318366e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}