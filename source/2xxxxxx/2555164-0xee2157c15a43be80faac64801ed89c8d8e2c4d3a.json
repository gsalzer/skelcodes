{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n\r\ncontract Registrar {\r\n    address public owner;\r\n\r\n    function Registrar() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyowner { if (msg.sender != owner) throw; _; }\r\n\r\n    function transferOwner(address newOwner) public onlyowner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    Registrar public parent;\r\n\r\n    function setParent(address parentAddress) public onlyowner {\r\n        parent = Registrar(parentAddress);\r\n    }\r\n\r\n    mapping (bytes32 => bytes32) records;\r\n    mapping (bytes32 => string) stringRecords;\r\n    mapping (bytes32 => bool) recordExists;\r\n\r\n\r\n    function set(string key, bytes32 value) public onlyowner {\r\n        // Compute the fixed length key\r\n        bytes32 _key = sha3(key);\r\n\r\n        // Set the value\r\n        records[_key] = value;\r\n        recordExists[_key] = true;\r\n    }\r\n\r\n    function get(string key) constant returns (bytes32) {\r\n        // Compute the fixed length key\r\n        bytes32 _key = sha3(key);\r\n\r\n        if (!recordExists[_key]) {\r\n            if (address(parent) == 0x0) {\r\n                // Do return unset keys\r\n                throw;\r\n            } else {\r\n                // Delegate to the parent.\r\n                return parent.get(key);\r\n            }\r\n        }\r\n\r\n        return records[_key];\r\n    }\r\n\r\n    function exists(string key) constant returns (bool) {\r\n        // Compute the fixed length key\r\n        bytes32 _key = sha3(key);\r\n\r\n        return recordExists[_key];\r\n    }\r\n\r\n    function setAddress(string key, address value) public onlyowner {\r\n        set(key, bytes32(value));\r\n    }\r\n\r\n    function getAddress(string key) constant returns (address) {\r\n        return address(get(key));\r\n    }\r\n\r\n    function setUInt(string key, uint value) public onlyowner {\r\n        set(key, bytes32(value));\r\n    }\r\n\r\n    function getUInt(string key) constant returns (uint) {\r\n        return uint(get(key));\r\n    }\r\n\r\n    function setInt(string key, int value) public onlyowner {\r\n        set(key, bytes32(value));\r\n    }\r\n\r\n    function getInt(string key) constant returns (int) {\r\n        return int(get(key));\r\n    }\r\n\r\n    function setBool(string key, bool value) public onlyowner {\r\n        if (value) {\r\n            set(key, bytes32(0x1));\r\n        } else {\r\n            set(key, bytes32(0x0));\r\n        }\r\n    }\r\n\r\n    function getBool(string key) constant returns (bool) {\r\n        return get(key) != bytes32(0x0);\r\n    }\r\n\r\n    function setString(string key, string value) public onlyowner {\r\n        bytes32 valueHash = sha3(value);\r\n        set(key, valueHash);\r\n        stringRecords[valueHash] = value;\r\n    }\r\n\r\n    function getString(string key) public returns (string) {\r\n        bytes32 valueHash = get(key);\r\n        return stringRecords[valueHash];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"parentAddress\",\"type\":\"address\"}],\"name\":\"setParent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getUInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUInt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Registrar","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}