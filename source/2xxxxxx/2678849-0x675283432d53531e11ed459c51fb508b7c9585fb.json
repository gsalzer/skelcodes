{"status":"1","message":"OK","result":[{"SourceCode":"contract testwallet9 {\r\n    \r\n    // this is a private project just to learn / play around with solidiy, please dont use!\r\n    // sample wallet\r\n    \r\n    address[] public owners;  // multiple owners, something like multisig for future extensions\r\n                       // where owners[0] will be the creator. only he can add other owners.\r\n    address public lastowner; // this is the last owner (most recent)\r\n\r\n    function testwallet8() { //constructor\r\n        owners.push(msg.sender); // save the initial owner (=creator)\r\n        lastowner = msg.sender;\r\n    }\r\n   \r\n   function add_another_owner(address new_owner){\r\n        if (msg.sender == owners[0] || msg.sender == lastowner){ //only the initial owner or the last owner can add other owners\r\n            owners.push(new_owner); \r\n            lastowner = msg.sender;\r\n        }\r\n   }\r\n   \r\n   function deposit () {\r\n        // this is to deposit ether into the contract\r\n        // ToDo log into table\r\n    }\r\n\r\n    function withdraw_all () check { \r\n        // first return the original amount, check if successful otherwise throw\r\n        // this will be sent as a fee to wallet creator in future versions, for now just refund\r\n        if (!lastowner.send(msg.value)) throw;\r\n        // now send the rest\r\n        if (!lastowner.send(this.balance)) throw;\r\n        //\r\n    }\r\n\r\n    function withdraw_a_bit (uint256 withdraw_amt) check { \r\n        // first return the fee, check if successful otherwise throw\r\n        // this will be sent as a fee to wallet creator in future versions, for now just refund\r\n        if (!lastowner.send(msg.value)) throw;\r\n        // now send the rest\r\n        if (!lastowner.send(withdraw_amt)) throw;\r\n        //\r\n    }\r\n\r\n    function(){  // fall back function, just points back to deposit\r\n        deposit();\r\n    }\r\n\r\n    modifier check { //\r\n        //if (msg.value <  0.0025 ether ) throw;\r\n        if (msg.value <  2500 ether) throw;\r\n        // only allow withdraw if the withdraw request comes with at least 2500 szabo fee\r\n        // ToDo: transfer fee to wallet creator,   for now just send abck...\r\n        if (msg.sender != lastowner && msg.sender != owners[0]) throw;\r\n        // only the lastowner or the account creator can request withdrawal\r\n        // but only the lastowner receives the balance \r\n    }\r\n    \r\n   // cleanup\r\n   function _delete_ () {\r\n       if (msg.sender == owners[0]) //only the original creator can delete the wallet\r\n            selfdestruct(lastowner);\r\n   }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"testwallet8\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"add_another_owner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_delete_\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amt\",\"type\":\"uint256\"}],\"name\":\"withdraw_a_bit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"type\":\"function\"}]","ContractName":"testwallet9","CompilerVersion":"v0.3.6+commit.3fc68da","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}