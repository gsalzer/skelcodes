{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.5;\r\n\r\ncontract PPBC_API {\r\n\r\n   /*******************************************************************************\r\n        PADDYPOWER.BLOCKCHAIN Promo Concept/Proposal, RFP Response / PoC\r\n        Module PPBC_API - back-end module\r\n        \r\n        [private API],  v1.22, 2016 11 27 \r\n        $Id: add rcs tag $\r\n        \r\n        vendor presentation/  @TowerRoom, 12/12/16 10am\r\n        \r\n        @MC/KC - Refer to instructions at PP Tech Vendor Portal\r\n        \r\n        Abstract: Blockchain Contract API Demo, providing access to 3:5 and 2:5 betting odds \r\n        (3:5 for first bet, 2:5 for consecutive bets)\r\n        \r\n   ********************************************************************************/\r\n\r\n   // Do not invoke contract directly (API code protected), only via main PPBC contract\r\n   //       ToDo: protect API with passcode/hash\r\n\r\n    // declare variables\r\n    address paddyAdmin;          // contract owner          \r\n    uint256 public gamesPlayed;  // Game Counter\r\n    \r\n    mapping ( address => bool ) alreadyPlayed; // Ensure every user can only play ONCE using the 3:5 odds\r\n                                               // to prevent abuse of benef. odds.\r\n                                               // Consecutive games from the same account only run at 2:5 odds.\r\n\r\n    /* GetMinimumBet_ether()  ToDo: add doc @MC*/\r\n    /* GetMaximumBet_ether()  ToDo: add doc @MC*/\r\n    // Minimum/Maximum Bet (in ETHER) that can be placed: 1%-10% of available Ether Winning Pool       \r\n    function GetMinimumBet_ether() constant returns (uint256){ return GetMinimumBet() / 1000000000000000000;   }\r\n    function GetMaximumBet_ether() constant returns (uint256){ return GetMaximumBet() / 1000000000000000000;  } \r\n    function GetMinimumBet() returns (uint256) {return this.balance/100;}   // Minimum Bet that can be placed: 1% of available Ether Winning Pool       \r\n    function GetMaximumBet() returns (uint256) {return this.balance/10;}   // Maximum Bet that can be placed: 10% of available Ether Winning Pool        \r\n\r\n    /* PlaceBet using Access Code, and Mode parameter */\r\n    /********************************************************************\r\n        First game for any account will run at 3:5 odds (double win).\r\n        Consecutive  game for any account will run at 2:5 odds (double win).\r\n\r\n        Cannot be invoked directly, only via PaddyPowerPromo contract     MC\r\n        \r\n        Parameters:\r\n        - Access Code is SHA3 hashed code, provided by PaddyPowerPromo contract (prevents direct call).\r\n        - modeA selects Lower vs. Upper number range (same odds)\r\n    *******************************************************************************************/\r\n    \r\n    function _api_PlaceBet (bool modeA) payable{\r\n    //function _api_PlaceBet (uint256 accessCode, bool modeA) payable returns (uint256){\r\n        //\r\n        // Note total transaction cost ~ 100-200K Gas    \r\n        // START Initial checks\r\n        // use Sha3 for increased API security (cannot be \"converted back\" to original accessCode) - prevents direct access\r\n        // if ( sha3( accessCode ) != 19498834600303040700126754596537880312193431075463488515213744382615666721600) throw; \r\n        // @MC disabled access check for PoC, ToDo: enable for Prod release, and allow change of hash if compromised\r\n        \r\n        // Check if Bet amount is within limits 1-10% of winning pool (account) balance\r\n        if (msg.value < GetMinimumBet() || msg.value > GetMaximumBet() ) throw; \r\n        \r\n        // Only allow x games per block - to ensure outcome is as random as possible\r\n        uint256 cntBlockUsed = blockUsed[block.number];  \r\n        if (cntBlockUsed > maxGamesPerBlock) throw; \r\n        blockUsed[block.number] = cntBlockUsed + 1; \r\n          \r\n        gamesPlayed++;            // game counter\r\n        lastPlayer = msg.sender;  // remember last player, part of seed for random number generator\r\n        // END initial checks\r\n        \r\n        // START - Set winning odds\r\n        uint winnerOdds = 3;  // 3 out of 5 win (for first game)\r\n        uint totalPartition  = 5;  \r\n        \r\n        if (alreadyPlayed[msg.sender]){  // has user played before? then odds are 2:5, not 3:5\r\n            winnerOdds = 2; \r\n        }\r\n        \r\n        alreadyPlayed[msg.sender] = true; // remember that user has already played for next time\r\n        \r\n        // expand partitions to % (minimizes rounding), calculate winning change in % (x out of 100)\r\n        winnerOdds = winnerOdds * 20;  // 3*20 = 60% winning chance, or 2*20 = 40% winning chance\r\n        totalPartition = totalPartition * 20;    // 5*20 = 100%\r\n        // END - Set winning odds\r\n        \r\n        // Create new random number\r\n        uint256 random = createRandomNumber(totalPartition); // creates a random number between 0 and 99\r\n        bool winner = true;\r\n        \r\n        // Depending on mode, user wins if numbers are in the lower range or higher range.\r\n        if (modeA){  // Mode A (default) is: lower numbers win,  0-60, or 0-40, depending on odds\r\n            if (random > winnerOdds ) winner = false;\r\n        }\r\n        else {   // Mode B is: higer numbers win 40-100, or 60-100, depending on odds\r\n            if (random < (100 - winnerOdds) ) winner = false;\r\n        }\r\n\r\n        // Pay winner (2 * bet amount)\r\n        if (winner){\r\n            if (!msg.sender.send(msg.value * 2)) // winner double\r\n                throw; // roll back if there was an error\r\n        }\r\n        // GAME FINISHED.\r\n    }\r\n\r\n\r\n      ///////////////////////////////////////////////\r\n     // Random Number Generator\r\n    //////////////////////////////////////////////\r\n\r\n    address lastPlayer;\r\n    uint256 private seed1;\r\n    uint256 private seed2;\r\n    uint256 private seed3;\r\n    uint256 private seed4;\r\n    uint256 private seed5;\r\n    uint256 private lastBlock;\r\n    uint256 private lastRandom;\r\n    uint256 private lastGas;\r\n    uint256 private customSeed;\r\n    \r\n    function createRandomNumber(uint maxnum) returns (uint256) {\r\n        uint cnt;\r\n        for (cnt = 0; cnt < lastRandom % 5; cnt++){lastBlock = lastBlock - block.timestamp;} // randomize gas\r\n        uint256 random = \r\n                  block.difficulty + block.gaslimit + \r\n                  block.timestamp + msg.gas + \r\n                  msg.value + tx.gasprice + \r\n                  seed1 + seed2 + seed3 + seed4 + seed5;\r\n        random = random + uint256(block.blockhash(block.number - (lastRandom+1))[cnt]) +\r\n                  (gamesPlayed*1234567890) * lastBlock + customSeed;\r\n        random = random + uint256(lastPlayer) +  uint256(sha3(msg.sender)[cnt]);\r\n        lastBlock = block.number;\r\n        seed5 = seed4; seed4 = seed3; seed3 = seed2;\r\n        seed2 = seed1; seed1 = (random / 43) + lastRandom; \r\n        bytes32 randomsha = sha3(random);\r\n        lastRandom = (uint256(randomsha[cnt]) * maxnum) / 256;\r\n        \r\n        return lastRandom ;\r\n        \r\n    }\r\n    \r\n    \r\n    ///////////////////////////////////////////////\r\n    // Maintenance    ToDo: doc @MC\r\n    /////////////////////////////\r\n    uint256 public maxGamesPerBlock;  // Block limit\r\n    mapping ( uint256 => uint256 ) blockUsed;  // prevent more than 2 games per block; \r\n                                               //\r\n    \r\n    function PPBC_API()  { // Constructor: ToDo: obfuscate\r\n        //initialize\r\n        gamesPlayed = 0;\r\n        paddyAdmin = msg.sender;\r\n        lastPlayer = msg.sender;\r\n        seed1 = 2; seed2 = 3; seed3 = 5; seed4 = 7; seed5 = 11;\r\n        lastBlock = 0;\r\n        customSeed = block.number;\r\n        maxGamesPerBlock = 3;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        if (msg.sender != paddyAdmin) throw;\r\n        _;\r\n    }\r\n\r\n    function _maint_withdrawFromPool (uint256 amt) onlyOwner{ // balance to stay below approved limit / comply with regulation\r\n            if (!paddyAdmin.send(amt)) throw;\r\n    }\r\n    \r\n    function _maint_EndPromo () onlyOwner {\r\n         selfdestruct(paddyAdmin); \r\n    }\r\n\r\n    function _maint_setBlockLimit (uint256 n_limit) onlyOwner {\r\n         maxGamesPerBlock = n_limit;\r\n    }\r\n    \r\n    function _maint_setCustomSeed(uint256 newSeed) onlyOwner {\r\n        customSeed = newSeed;\r\n    }\r\n    \r\n    function _maint_updateOwner (address newOwner) onlyOwner {\r\n        paddyAdmin = newOwner;\r\n    }\r\n    \r\n    function () payable {} // Used by PaddyPower Admin to load Pool\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"_maint_updateOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"modeA\",\"type\":\"bool\"}],\"name\":\"_api_PlaceBet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"_maint_withdrawFromPool\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinimumBet_ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n_limit\",\"type\":\"uint256\"}],\"name\":\"_maint_setBlockLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSeed\",\"type\":\"uint256\"}],\"name\":\"_maint_setCustomSeed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaximumBet_ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetMinimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxnum\",\"type\":\"uint256\"}],\"name\":\"createRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_maint_EndPromo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGamesPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetMaximumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"PPBC_API","CompilerVersion":"v0.4.5+commit.b318366e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}