{"status":"1","message":"OK","result":[{"SourceCode":"//pragma solidity ^0.3.6;\r\ncontract Token {\r\n\tfunction balanceOf(address user) constant returns (uint256 balance);\r\n\tfunction transfer(address receiver, uint amount) returns(bool);\r\n}\r\n\r\n// A Sub crowdfunding contract. Its only purpose is to redirect ether it receives to the \r\n// main crowdfunding contract. This mecanism is usefull to know the sponsor to\r\n// reward for an indirect donation. You can't give for someone else when you give through\r\n// these contracts\r\ncontract AltCrowdfunding {\r\n\t\r\n\tCrowdfunding mainCf ;                                       // Referenre to the main crowdfunding contract\r\n\t\r\n\tfunction AltCrowdfunding(address cf){\t\t\t\t\t\t// Construct the altContract with a reference to the main one\r\n\t\tmainCf = Crowdfunding(cf);\r\n\t}\r\n\t\r\n\tfunction(){\r\n\t\tmainCf.giveFor.value(msg.value)(msg.sender);\t\t\t// Relay Ether sent to the main crowndfunding contract\r\n\t}\r\n\t\r\n}\r\n\r\ncontract Crowdfunding {\r\n\r\n\tstruct Backer {\r\n\t\tuint weiGiven;\t\t\t\t\t\t\t\t\t\t// Amount of Ether given\r\n\t\tuint ungivenNxc ;                                 \t// (pending) If the first goal of the crowdfunding is not reached yet the NxC are stored here\r\n\t}\r\n\t\r\n\tstruct Sponsor {\r\n\t    uint nxcDirected;                                   // How much milli Nxc this sponsor sold for us\r\n\t    uint earnedNexium;                                  // How much milli Nxc this sponsor earned by solding Nexiums for us\r\n\t    address sponsorAddress;                             // Where Nexiums earned by a sponsor are sent\r\n\t    uint sponsorBonus;\r\n\t    uint backerBonus;\r\n\t}\r\n\t\r\n    //Every public variable can be read by everyone from the blockchain\r\n\t\r\n\tToken \tpublic nexium;                                  // Nexium contract reference\r\n\taddress public owner;\t\t\t\t\t               \t// Contract admin (beyond the void)\r\n\taddress public beyond;\t\t\t\t\t            \t// Address that will receive ether when the first step is be reached\r\n\taddress public bitCrystalEscrow;   \t\t\t\t\t\t// Our escrow for Bitcrystals (ie EverdreamSoft)\r\n\tuint \tpublic startingEtherValue;\t\t\t\t\t\t// How much milli Nxc are sent by ether\r\n\tuint \tpublic stepEtherValue;\t\t\t\t\t        // For every stage of the crowdfunding, the number of Nexium sent by ether is decreased by this number\r\n\tuint    public collectedEth;                            // Collected ether in wei\r\n\tuint \tpublic nxcSold;                                 // How much milli Nxc were sold \r\n\tuint \tpublic perStageNxc;                             // How much milli Nxc we much sell for each stage\r\n\tuint \tpublic nxcPerBcy;                         \t\t// How much milli Nxc we give for each Bitcrystal\r\n    uint \tpublic collectedBcy;                            // Collected Bitcrystals\r\n\tuint \tpublic minInvest;\t\t\t\t            \t// Minimum to invest (in wei)\r\n\tuint \tpublic startDate;    \t\t\t\t\t\t\t// crowndfunding startdate                               \r\n\tuint \tpublic endDate;\t\t\t\t\t\t\t\t\t// crowndfunding enddate \r\n\tbool \tpublic isLimitReached;                          // Tell if the first stage of the CrowdFunding is reached, false when not set\r\n\t\r\n\taddress[] public backerList;\t\t\t\t\t\t\t// Addresses of all backers\r\n\taddress[] public altList;\t\t\t\t\t     \t\t// List of alternative contracts for sponsoring (useless for this contract)\r\n\tmapping(address => Sponsor) public sponsorList;\t        // The sponsor linked to an alternative contract\r\n\tmapping(address => Backer) public backers;            \t// The Backer for a given address\r\n\r\n\tmodifier onlyBy(address a){\r\n\t\tif (msg.sender != a) throw;                         // Auth modifier, if the msg.sender isn't the expected address, throw.\r\n\t\t_\r\n\t}\r\n\t\r\n\tevent Gave(address);\t\t\t\t\t\t\t\t\t// \r\n\t\r\n//--------------------------------------\\\\\r\n\t\r\n\tfunction Crowdfunding() {\r\n\t\t\r\n\t\t// Constructor of the contract. set the different variables\r\n\t\t\r\n\t\tnexium = Token(0x45e42d659d9f9466cd5df622506033145a9b89bc); \t// Nexium contract address\r\n\t\tbeyond = 0x89E7a245d5267ECd5Bf4cA4C1d9D4D5A14bbd130 ;\r\n\t\towner = msg.sender;\r\n\t\tminInvest = 10 finney;\r\n\t\tstartingEtherValue = 700*1000;\r\n\t\tstepEtherValue = 25*1000;\r\n\t\tnxcPerBcy = 14;\r\n\t\tperStageNxc = 5000000 * 1000;\r\n\t\tstartDate = 1478012400 ;\r\n\t\tendDate = 1480604400 ;\r\n\t\tbitCrystalEscrow = 0x72037bf2a3fc312cde40c7f7cd7d2cef3ad8c193;\r\n\t} \r\n\r\n//--------------------------------------\\\\\r\n\t\r\n\t// Use this function to buy Nexiums for someone (can be you of course)\r\n\tfunction giveFor(address beneficiary){\r\n\t\tif (msg.value < minInvest) throw;                                      // Throw when the minimum to invest isn't reached\r\n\t\tif (endDate < now || (now < startDate && now > startDate - 3 hours )) throw;        // Check if the crowdfunding is started and not already over\r\n\t\t\r\n\t\t// Computing the current amount of Nxc we send per ether. \r\n\t\tuint currentEtherValue = getCurrEthValue();\r\n\t\t\r\n\t\t//it's possible to invest before the begining of the crowdfunding but the price is x10.\r\n\t\t//Allow backers to test the contract before the begining.\r\n\t\tif(now < startDate) currentEtherValue /= 10;\r\n\t\t\r\n\t\t// Computing the number of milli Nxc we will send to the beneficiary\r\n\t\tuint givenNxc = (msg.value * currentEtherValue)/(1 ether);\r\n\t\tnxcSold += givenNxc;                                                   //Updating the sold Nxc amount\r\n\t\tif (nxcSold >= perStageNxc) isLimitReached = true ; \r\n\t\t\r\n\t\tSponsor sp = sponsorList[msg.sender];\r\n\t\t\r\n\t\t//Check if the user gives through a sponsor contract\r\n\t\tif (sp.sponsorAddress != 0x0000000000000000000000000000000000000000) {\r\n\t\t    sp.nxcDirected += givenNxc;                                        // Update the number of milli Nxc this sponsor sold for us\r\n\t\t    \r\n\t\t    // This part compute the bonus rate NxC the sponsor will have depending on the total of Nxc he sold.\r\n\t\t    uint bonusRate = sp.nxcDirected / 80000000;\r\n\t\t    if (bonusRate > sp.sponsorBonus) bonusRate = sp.sponsorBonus;\r\n\t\t    \r\n\t\t    // Giving to the sponsor the amount of Nxc he earned by this last donation\r\n\t\t    uint sponsorNxc = (sp.nxcDirected * bonusRate)/100 - sp.earnedNexium;\r\n\t\t\tif (!giveNxc(sp.sponsorAddress, sponsorNxc))throw;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsp.earnedNexium += sponsorNxc;                                     // Update the number of milli Nxc this sponsor earned\r\n\t\t\tgivenNxc = (givenNxc*(100 + sp.backerBonus))/100;                  // Increase by x% the number of Nxc we will give to the backer\r\n\t\t}\r\n\t\t\r\n\t\tif (!giveNxc(beneficiary, givenNxc))throw;                             // Give to the Backer the Nxc he just earned\r\n\t\t\r\n\t\t// Add the new Backer to the list, if he gave for the first time\r\n\t\tBacker backer = backers[beneficiary];\r\n\t\tif (backer.weiGiven == 0){\r\n\t\t\tbackerList[backerList.length++] = beneficiary;\r\n\t\t}\r\n\t\tbacker.weiGiven += msg.value;                                          // Update the gave wei of this Backer\r\n\t\tcollectedEth += msg.value;                                             // Update the total wei collcted during the crowdfunding     \r\n\t\tGave(beneficiary);                                                     // Trigger an event \r\n\t}\r\n\t\r\n\t\r\n\t// If you gave ether before the first stage is reached you might have some ungiven\r\n\t// Nxc for your address. This function, if called, will give you the nexiums you didn't\r\n\t// received. /!\\ Nexium bonuses for your partner rank will not be given during the crowdfunding\r\n\tfunction claimNxc(){\r\n\t    if (!isLimitReached) throw;\r\n\t    address to = msg.sender;\r\n\t    nexium.transfer(to, backers[to].ungivenNxc);\r\n\t    backers[to].ungivenNxc = 0;\r\n\t}\r\n\t\r\n\t// This function can be called after the crowdfunding if the first goal is not reached\r\n\t// It gives back the ethers of the specified address\r\n\tfunction getBackEther(){\r\n\t    getBackEtherFor(msg.sender);\r\n\t}\r\n\t\r\n\tfunction getBackEtherFor(address account){\r\n\t    if (now > endDate && !isLimitReached){\r\n\t        uint sentBack = backers[account].weiGiven;\r\n\t        backers[account].weiGiven = 0;                                     // No DAO style re entrance ;)\r\n\t        if(!account.send(sentBack))throw;\r\n\t    } else throw ;\r\n\t}\r\n\t\r\n\t// The anonymous function automatically make a donation for the person who gave ethers\r\n\tfunction(){\r\n\t\tgiveFor(msg.sender);\r\n\t}\r\n\t\r\n//--------------------------------------\\\\\r\n\r\n    //Create a new sponsoring contract \r\n\tfunction addAlt(address sponsor, uint _sponsorBonus, uint _backerBonus)\r\n\tonlyBy(owner){\r\n\t    if (_sponsorBonus > 10 || _backerBonus > 10 || _sponsorBonus + _backerBonus > 15) throw;\r\n\t\taltList[altList.length++] = address(new AltCrowdfunding(this));\r\n\t\tsponsorList[altList[altList.length -1]] = Sponsor(0, 0, sponsor, _sponsorBonus, _backerBonus);\r\n\t}\r\n\t\r\n\t// Set the value of BCY gave by the SOG network. Only our BCY escrow can modify it.\r\n    function setBCY(uint newValue)\r\n    onlyBy(bitCrystalEscrow){\r\n        if (now < startDate || now > endDate) throw;\r\n        if (newValue != 0 && newValue < 714285714) collectedBcy = newValue; // 714285714 * 14 ~= 10 000 000 000 mili Nxc maximum to avoid wrong value\r\n        else throw;\r\n    }\r\n    \r\n    // If the minimum goal is reached, beyond the void can have the ethers stored on the contract\r\n    function withdrawEther(address to, uint amount)\r\n    onlyBy(owner){\r\n        if (!isLimitReached) throw;\r\n        var r = to.send(amount);\r\n    }\r\n    \r\n    function withdrawNxc(address to, uint amount)\r\n    onlyBy(owner){\r\n        nexium.transfer(to, amount);\r\n    }\r\n    \r\n    //If there are still Nexiums or Ethers on the contract after 100 days after the end of the crowdfunding\r\n    //This function send all of it to the multi sig of the beyond the void team (emergency case)\r\n    function blackBox(){\r\n        if (now < endDate + 100 days)throw;\r\n        nexium.transfer(beyond, nexium.balanceOf(this));\r\n        var r = beyond.send(this.balance);\r\n    }\r\n\t\r\n\t// Each time this contract send Nxc this function is called. It check if\r\n\t// the minimum goal is reached before sending any nexiums out.\r\n\tfunction giveNxc(address to, uint amount) internal returns (bool){\r\n\t    bool res;\r\n\t    if (isLimitReached){\r\n\t        if (nexium.transfer(to, amount)){\r\n\t            // If there is some ungiven Nxc remaining for this address, send it.\r\n\t            if (backers[to].ungivenNxc != 0){\r\n\t                 res = nexium.transfer(to, backers[to].ungivenNxc); \r\n\t                 backers[to].ungivenNxc = 0;\r\n\t            } else {\r\n\t                res = true;\r\n\t            }\r\n\t        } else {\r\n\t            res = false;\r\n\t        }\r\n\t\t// If the limit is not reached yet, the nexiums are not sent but stored in the contract waiting this goal being reached.\r\n\t\t// They are released when the same backer gives ether while the limit is reached, or by claiming them after the minimal goal is reached .\r\n\t    } else {\r\n\t        backers[to].ungivenNxc += amount;\r\n\t        res = true;\r\n\t    }\r\n\t    return res;\r\n\t}\r\n\t\r\n\t//--------------------------------------\\\\\r\n\t\r\n\tfunction getCurrEthValue() returns(uint){\r\n\t    return  startingEtherValue - stepEtherValue * ((nxcSold + collectedBcy * nxcPerBcy)/perStageNxc);\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"altList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNxc\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimNxc\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBackEtherFor\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxcPerBcy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBackEther\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beyond\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedBcy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLimitReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perStageNxc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitCrystalEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorList\",\"outputs\":[{\"name\":\"nxcDirected\",\"type\":\"uint256\"},{\"name\":\"earnedNexium\",\"type\":\"uint256\"},{\"name\":\"sponsorAddress\",\"type\":\"address\"},{\"name\":\"sponsorBonus\",\"type\":\"uint256\"},{\"name\":\"backerBonus\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexium\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sponsor\",\"type\":\"address\"},{\"name\":\"_sponsorBonus\",\"type\":\"uint256\"},{\"name\":\"_backerBonus\",\"type\":\"uint256\"}],\"name\":\"addAlt\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"giveFor\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrEthValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiGiven\",\"type\":\"uint256\"},{\"name\":\"ungivenNxc\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"blackBox\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxcSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBCY\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Gave\",\"type\":\"event\"}]","ContractName":"Crowdfunding","CompilerVersion":"v0.3.6+commit.3fc68da","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}