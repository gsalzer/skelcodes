{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract OwnedI {\r\n    event LogOwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function getOwner()\r\n        constant\r\n        returns (address);\r\n\r\n    function setOwner(address newOwner)\r\n        returns (bool success); \r\n}\r\n\r\ncontract Owned is OwnedI {\r\n    /**\r\n     * @dev Made private to protect against child contract setting it to 0 by mistake.\r\n     */\r\n    address private owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier fromOwner {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function getOwner()\r\n        constant\r\n        returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function setOwner(address newOwner)\r\n        fromOwner \r\n        returns (bool success) {\r\n        if (newOwner == 0) {\r\n            throw;\r\n        }\r\n        if (owner != newOwner) {\r\n            LogOwnerChanged(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n        success = true;\r\n    }\r\n}\r\n\r\ncontract PullPaymentCapable {\r\n    uint256 private totalBalance;\r\n    mapping(address => uint256) private payments;\r\n\r\n    event LogPaymentReceived(address indexed dest, uint256 amount);\r\n\r\n    function PullPaymentCapable() {\r\n        if (0 < this.balance) {\r\n            asyncSend(msg.sender, this.balance);\r\n        }\r\n    }\r\n\r\n    // store sent amount as credit to be pulled, called by payer\r\n    function asyncSend(address dest, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            totalBalance += amount;\r\n            payments[dest] += amount;\r\n            LogPaymentReceived(dest, amount);\r\n        }\r\n    }\r\n\r\n    function getTotalBalance()\r\n        constant\r\n        returns (uint256) {\r\n        return totalBalance;\r\n    }\r\n\r\n    function getPaymentOf(address beneficiary) \r\n        constant\r\n        returns (uint256) {\r\n        return payments[beneficiary];\r\n    }\r\n\r\n    // withdraw accumulated balance, called by payee\r\n    function withdrawPayments()\r\n        external \r\n        returns (bool success) {\r\n        uint256 payment = payments[msg.sender];\r\n        payments[msg.sender] = 0;\r\n        totalBalance -= payment;\r\n        if (!msg.sender.call.value(payment)()) {\r\n            throw;\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function fixBalance()\r\n        returns (bool success);\r\n\r\n    function fixBalanceInternal(address dest)\r\n        internal\r\n        returns (bool success) {\r\n        if (totalBalance < this.balance) {\r\n            uint256 amount = this.balance - totalBalance;\r\n            payments[dest] += amount;\r\n            LogPaymentReceived(dest, amount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract WithBeneficiary is Owned {\r\n    /**\r\n     * @notice Address that is forwarded all value.\r\n     * @dev Made private to protect against child contract setting it to 0 by mistake.\r\n     */\r\n    address private beneficiary;\r\n    \r\n    event LogBeneficiarySet(address indexed previousBeneficiary, address indexed newBeneficiary);\r\n\r\n    function WithBeneficiary(address _beneficiary) payable {\r\n        if (_beneficiary == 0) {\r\n            throw;\r\n        }\r\n        beneficiary = _beneficiary;\r\n        if (msg.value > 0) {\r\n            asyncSend(beneficiary, msg.value);\r\n        }\r\n    }\r\n\r\n    function asyncSend(address dest, uint amount) internal;\r\n\r\n    function getBeneficiary()\r\n        constant\r\n        returns (address) {\r\n        return beneficiary;\r\n    }\r\n\r\n    function setBeneficiary(address newBeneficiary)\r\n        fromOwner \r\n        returns (bool success) {\r\n        if (newBeneficiary == 0) {\r\n            throw;\r\n        }\r\n        if (beneficiary != newBeneficiary) {\r\n            LogBeneficiarySet(beneficiary, newBeneficiary);\r\n            beneficiary = newBeneficiary;\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function () payable {\r\n        asyncSend(beneficiary, msg.value);\r\n    }\r\n}\r\n\r\ncontract CertificationCentreI {\r\n    event LogCertificationDbRegistered(address indexed db);\r\n\r\n    event LogCertificationDbUnRegistered(address indexed db);\r\n\r\n    function getCertificationDbCount()\r\n        constant\r\n        returns (uint);\r\n\r\n    function getCertificationDbStatus(address db)\r\n        constant\r\n        returns (bool valid, uint256 index);\r\n\r\n    function getCertificationDbAtIndex(uint256 index)\r\n        constant\r\n        returns (address db);\r\n\r\n    function registerCertificationDb(address db)\r\n        returns (bool success);\r\n\r\n    function unRegisterCertificationDb(address db)\r\n        returns (bool success);\r\n}\r\n\r\ncontract CertificationCentre is CertificationCentreI, WithBeneficiary, PullPaymentCapable {\r\n    struct CertificationDbStruct {\r\n        bool valid;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping (address => CertificationDbStruct) private certificationDbStatuses;\r\n    address[] private certificationDbs;\r\n\r\n    function CertificationCentre(address beneficiary)\r\n        WithBeneficiary(beneficiary) {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function getCertificationDbCount()\r\n        constant\r\n        returns (uint256) {\r\n        return certificationDbs.length;\r\n    }\r\n\r\n    function getCertificationDbStatus(address db)\r\n        constant\r\n        returns (bool valid, uint256 index) {\r\n        CertificationDbStruct status = certificationDbStatuses[db];\r\n        return (status.valid, status.index);\r\n    }\r\n\r\n    function getCertificationDbAtIndex(uint256 index)\r\n        constant\r\n        returns (address db) {\r\n        return certificationDbs[index];\r\n    }\r\n\r\n    function registerCertificationDb(address db) \r\n        fromOwner\r\n        returns (bool success) {\r\n        if (db == 0) {\r\n            throw;\r\n        }\r\n        if (!certificationDbStatuses[db].valid) {\r\n            certificationDbStatuses[db].valid = true;\r\n            certificationDbStatuses[db].index = certificationDbs.length;\r\n            certificationDbs.push(db);\r\n        }\r\n        LogCertificationDbRegistered(db);\r\n        success = true;\r\n    }\r\n\r\n    function unRegisterCertificationDb(address db)\r\n        fromOwner\r\n        returns (bool success) {\r\n        if (certificationDbStatuses[db].valid) {\r\n            uint256 index = certificationDbStatuses[db].index;\r\n            certificationDbs[index] = certificationDbs[certificationDbs.length - 1];\r\n            certificationDbStatuses[certificationDbs[index]].index = index;\r\n            delete certificationDbStatuses[db];\r\n            certificationDbs.length--;\r\n        }\r\n        LogCertificationDbUnRegistered(db);\r\n        success = true;\r\n    }\r\n\r\n    function fixBalance()\r\n        returns (bool success) {\r\n        return fixBalanceInternal(getBeneficiary());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"db\",\"type\":\"address\"}],\"name\":\"unRegisterCertificationDb\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCertificationDbAtIndex\",\"outputs\":[{\"name\":\"db\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCertificationDbCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fixBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"db\",\"type\":\"address\"}],\"name\":\"registerCertificationDb\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getPaymentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"db\",\"type\":\"address\"}],\"name\":\"getCertificationDbStatus\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"LogBeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"db\",\"type\":\"address\"}],\"name\":\"LogCertificationDbRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"db\",\"type\":\"address\"}],\"name\":\"LogCertificationDbUnRegistered\",\"type\":\"event\"}]","ContractName":"CertificationCentre","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000de74da73d5102a796559933296c73e7d1c6f37fb","Library":"","SwarmSource":""}]}