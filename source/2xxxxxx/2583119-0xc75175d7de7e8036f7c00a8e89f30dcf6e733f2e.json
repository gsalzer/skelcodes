{"status":"1","message":"OK","result":[{"SourceCode":"/* An elliptic curve arithmetics contract */\r\n\r\n/* Deployment:\r\nOwner: 0xeb5fa6cbf2aca03a0df228f2df67229e2d3bd01e\r\nLast address: 0xc75175d7de7e8036f7c00a8e89f30dcf6e733f2e\r\nABI: [{\"constant\":true,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"},{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"}],\"name\":\"jadd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pub1\",\"type\":\"uint256\"},{\"name\":\"_pub2\",\"type\":\"uint256\"}],\"name\":\"hash_pubkey_to_pubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y_bit\",\"type\":\"uint256\"}],\"name\":\"jrecover_y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_q0\",\"type\":\"uint256\"},{\"name\":\"_q1\",\"type\":\"uint256\"},{\"name\":\"_q2\",\"type\":\"uint256\"}],\"name\":\"jdecompose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"}],\"name\":\"jdouble\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256\"},{\"name\":\"_bit\",\"type\":\"uint256\"}],\"name\":\"isbit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256\"},{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"jexp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"},{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"jmul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]\r\nOptimized: yes\r\nSolidity version: v0.4.4\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract ArithLib {\r\n\r\n    uint constant internal P = 115792089237316195423570985008687907853269984665640564039457584007908834671663;\r\n    uint constant internal N = 115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n    uint constant internal M = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n    uint constant internal Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240;\r\n    uint constant internal Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424;\r\n    \r\n    function ArithLib() { }\r\n\r\n    function jdouble(uint _ax, uint _ay, uint _az) constant returns (uint, uint, uint) {\r\n\r\n        if(_ay == 0) return (0, 0, 0);\r\n\r\n        uint ysq = (_ay * _ay) % P;\r\n        uint s = (4 * _ax * ysq) % P;\r\n        uint m = (3 * _ax * _ax) % P;\r\n        uint nx = (m * m - 2 * s) % P;\r\n        uint ny = (m * (s - nx) - 8 * ysq * ysq) % P;\r\n        uint nz = (2 * _ay * _az) % P;\r\n        return (nx, ny, nz);\r\n    }\r\n\r\n    function jadd(uint _ax, uint _ay, uint _az, uint _bx, uint _by, uint _bz) constant returns (uint, uint, uint) {\r\n\r\n        if(_ay == 0) return(_bx, _by, _bz);\r\n        if(_by == 0) return(_ax, _ay, _az);\r\n\r\n        uint u1 = (_ax * _bz * _bz) % P;\r\n        uint u2 = (_bx * _az * _az) % P;\r\n        uint s1 = (_ay * _bz * _bz * _bz) % P;\r\n        uint s2 = (_by * _az * _az * _az) % P;\r\n\r\n        if(u1 == u2) {\r\n           if(s1 != s2) return(0, 0, 1);\r\n           return jdouble(_ax, _ay, _az);\r\n        }\r\n        \r\n        //H\r\n        _ax = u2 - u1;\r\n        //R\r\n        _ay = s2 - s1;\r\n        //H2\r\n        _bx = (_ax * _ax) % P;\r\n        //H3\r\n        _by = (_ax * _bx) % P;\r\n        //U1H2\r\n        u1 = (u1 * _bx) % P;\r\n        //nx\r\n        u2 = (_ay * _ay - _by - 2 * u1) % P;\r\n        //ny\r\n        s1 = (_ay * (u1 - u2) - s1 * _by) % P;\r\n        //nz\r\n        s2 = (_ax * _az * _bz) % P;\r\n\r\n        return (u2, s1, s2);\r\n    }\r\n\r\n    function jmul(uint _bx, uint _by, uint _bz, uint _n) constant returns (uint, uint, uint) {\r\n\r\n        _n = _n % N;\r\n        if(((_by == 0)) || (_n == 0)) return(0, 0, 1);\r\n\r\n        uint ax = 0;\r\n        uint ay = 0;\r\n        uint az = 1;\r\n        uint b = M;\r\n        \r\n        while(b > 0) {\r\n\r\n           (ax, ay, az) = jdouble(ax, ay, az);\r\n           if((_n & b) != 0) {\r\n              \r\n              if(ay == 0) {\r\n                 (ax, ay, az) = (_bx, _by, _bz);\r\n              } else {\r\n                 (ax, ay, az) = jadd(ax, ay, az, _bx, _by, _bz);\r\n              }\r\n           }\r\n\r\n           b = b / 2;\r\n        }\r\n\r\n        return (ax, ay, az);\r\n    }\r\n    \r\n    function jexp(uint _b, uint _e, uint _m) constant returns (uint) {\r\n        uint o = 1;\r\n        uint bit = M;\r\n        \r\n        while (bit > 0) {\r\n            uint bitval = 0;\r\n            if(_e & bit > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 2) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 4) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bitval = 0;\r\n            if(_e & (bit / 8) > 0) bitval = 1;\r\n            o = mulmod(mulmod(o, o, _m), _b ** bitval, _m);\r\n            bit = (bit / 16);\r\n        }\r\n        return o;\r\n    }\r\n    \r\n    function jrecover_y(uint _x, uint _y_bit) constant returns (uint) {\r\n\r\n        uint xcubed = mulmod(mulmod(_x, _x, P), _x, P);\r\n        uint beta = jexp(addmod(xcubed, 7, P), ((P + 1) / 4), P);\r\n        uint y_is_positive = _y_bit ^ (beta % 2) ^ 1;\r\n        return(beta * y_is_positive + (P - beta) * (1 - y_is_positive));\r\n    }\r\n\r\n    function jdecompose(uint _q0, uint _q1, uint _q2) constant returns (uint, uint) {\r\n        uint ox = mulmod(_q0, jexp(_q2, P - 3, P), P);\r\n        uint oy = mulmod(_q1, jexp(_q2, P - 4, P), P);\r\n        return(ox, oy);\r\n    }\r\n    \r\n    function isbit(uint _data, uint _bit) constant returns (uint) {\r\n        return (_data / 2**(_bit % 8)) % 2;\r\n    }\r\n\r\n    function hash_pubkey_to_pubkey(uint _pub1, uint _pub2) constant returns (uint, uint) {\r\n        uint x = uint(sha3(_pub1, _pub2));\r\n        while(true) {\r\n            uint xcubed = mulmod(mulmod(x, x, P), x, P);\r\n            uint beta = jexp(addmod(xcubed, 7, P), ((P + 1) / 4), P);\r\n            uint y = beta * (beta % 2) + (P - beta) * (1 - (beta % 2));\r\n            if(addmod(xcubed, 7, P) == mulmod(y, y, P)) return(x, y);\r\n            x = ((x + 1) % P);\r\n        }\r\n    }\r\n    \r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"},{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"}],\"name\":\"jadd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pub1\",\"type\":\"uint256\"},{\"name\":\"_pub2\",\"type\":\"uint256\"}],\"name\":\"hash_pubkey_to_pubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y_bit\",\"type\":\"uint256\"}],\"name\":\"jrecover_y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_q0\",\"type\":\"uint256\"},{\"name\":\"_q1\",\"type\":\"uint256\"},{\"name\":\"_q2\",\"type\":\"uint256\"}],\"name\":\"jdecompose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ax\",\"type\":\"uint256\"},{\"name\":\"_ay\",\"type\":\"uint256\"},{\"name\":\"_az\",\"type\":\"uint256\"}],\"name\":\"jdouble\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256\"},{\"name\":\"_bit\",\"type\":\"uint256\"}],\"name\":\"isbit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256\"},{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"jexp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bx\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"uint256\"},{\"name\":\"_bz\",\"type\":\"uint256\"},{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"jmul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]","ContractName":"ArithLib","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}