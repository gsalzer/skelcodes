{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract EtherUnitConverter {\r\n    /*\r\n     * Ethereum Units Converter contract\r\n     *\r\n     * created by: D-Nice\r\n     * contract address: 0x52070b253406fc4F2bf71dBaF910F66c45828DBA\r\n     */\r\n\r\n    mapping (string => uint) etherUnits;\r\n    \r\n    /* used web3.js unitMap for this data from: \r\n    https://github.com/ethereum/web3.js/blob/develop/lib/utils/utils.js#L41\r\n    */\r\n    function EtherUnitConverter () {\r\n        etherUnits['noether']\r\n        = 0;\r\n        etherUnits['wei'] \r\n        = 10**0;\r\n        etherUnits['kwei'] = etherUnits['babbage'] = etherUnits['femtoether']\r\n        = 10**3;\r\n        etherUnits['mwei'] = etherUnits['lovelace'] = etherUnits['picoether'] \r\n        = 10**6;\r\n        etherUnits['gwei'] = etherUnits['shannon'] = etherUnits['nanoether'] = etherUnits['nano'] \r\n        = 10**9;\r\n        etherUnits['szabo'] = etherUnits['microether'] = etherUnits['micro'] \r\n        = 10**12;\r\n        etherUnits['finney'] = etherUnits['milliether'] = etherUnits['milli'] \r\n        = 10**15;\r\n        etherUnits['ether'] \r\n        = 10**18;\r\n        etherUnits['kether'] = etherUnits['grand']\r\n        = 10**21;\r\n        etherUnits['mether'] = 10**24;\r\n        etherUnits['gether'] = 10**27;\r\n        etherUnits['tether'] = 10**30;\r\n    }\r\n    \r\n    function convertToWei(uint amount, string unit) external constant returns (uint) {\r\n        return amount * etherUnits[unit];\r\n    }\r\n    \r\n    function convertTo(uint amount, string unit, string convertTo) external constant returns (uint) {\r\n        uint input = etherUnits[unit];\r\n        uint output = etherUnits[convertTo];\r\n        if(input > output)\r\n            return amount * (input / output);\r\n        else\r\n            return amount / (output / input);\r\n    } \r\n    \r\n    string[11] unitsArray = ['wei', 'kwei', 'mwei', 'gwei', 'szabo', 'finney', 'ether', 'kether', 'mether', 'gether', 'tether'];\r\n\r\n    function convertToEach(uint amount, string unit, uint unitIndex) external constant returns (uint convAmt, string convUnit) {\r\n\r\n        uint input = etherUnits[unit];\r\n        uint output = etherUnits[unitsArray[unitIndex]];\r\n            \r\n        if(input > output)\r\n            convAmt = (amount * (input / output));\r\n        else\r\n            convAmt = (amount / (output / input));\r\n        convUnit = unitsArray[unitIndex];\r\n    }\r\n    \r\n    function convertToAllTable(uint amount, string unit) \r\n    external constant returns \r\n    (uint weiAmt,\r\n    uint kweiAmt,\r\n    uint mweiAmt,\r\n    uint gweiAmt,\r\n    uint szaboAmt,\r\n    uint finneyAmt,\r\n    uint etherAmt) {\r\n    \r\n        uint input = etherUnits[unit];\r\n        //kether and other higher units omitted due to stack depth limit\r\n        (weiAmt, kweiAmt, mweiAmt, gweiAmt, szaboAmt, finneyAmt, etherAmt) = iterateTable(amount, input);\r\n    }\r\n    \r\n    function iterateTable(uint _amt, uint _input) private constant returns \r\n    (uint, uint, uint, uint, uint, uint, uint) {\r\n        uint[7] memory c;\r\n        \r\n        for(uint i = 0; i < c.length; i++) {\r\n            uint output = etherUnits[unitsArray[i]];\r\n            \r\n            if(_input > output)\r\n                c[i] = (_amt * (_input / output));\r\n            else\r\n                c[i] = (_amt / (output / _input));\r\n        }\r\n        return (c[0],c[1],c[2],c[3],c[4],c[5],c[6]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"string\"}],\"name\":\"convertToAllTable\",\"outputs\":[{\"name\":\"weiAmt\",\"type\":\"uint256\"},{\"name\":\"kweiAmt\",\"type\":\"uint256\"},{\"name\":\"mweiAmt\",\"type\":\"uint256\"},{\"name\":\"gweiAmt\",\"type\":\"uint256\"},{\"name\":\"szaboAmt\",\"type\":\"uint256\"},{\"name\":\"finneyAmt\",\"type\":\"uint256\"},{\"name\":\"etherAmt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"convertTo\",\"type\":\"string\"}],\"name\":\"convertTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"unitIndex\",\"type\":\"uint256\"}],\"name\":\"convertToEach\",\"outputs\":[{\"name\":\"convAmt\",\"type\":\"uint256\"},{\"name\":\"convUnit\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"string\"}],\"name\":\"convertToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"EtherUnitConverter","CompilerVersion":"v0.4.2-nightly.2016.9.17+commit.62f13ad8","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}