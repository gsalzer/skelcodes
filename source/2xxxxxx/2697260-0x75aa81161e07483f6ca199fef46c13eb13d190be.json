{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n// ## Matthew - a contract for increasing \"whaleth\"\r\n// README: https://github.com/rolandkofler/matthew\r\n// MIT LICENSE 2016 Roland Kofler, thanks to Crul for testing\r\n\r\ncontract Matthew {\r\n    address owner;\r\n    address public whale;\r\n    uint256 public blockheight;\r\n    uint256 public stake;\r\n    uint256 period = 40; //180 blocks ~ 42 min, 300 blocks ~ 1h 10 min;\r\n    uint constant public DELTA = 0.1 ether;\r\n    uint constant public WINNERTAX_PRECENT = 10;\r\n    bool mustBeDestroyed = false;\r\n    uint newPeriod = period;\r\n    \r\n    event MatthewWon(string msg, address winner, uint value,  uint blocknumber);\r\n    event StakeIncreased(string msg, address staker, uint value, uint blocknumber);\r\n    \r\n    function Matthew(){\r\n        owner = msg.sender;\r\n        setFacts();\r\n    }\r\n    \r\n    function setFacts() private {\r\n        stake = this.balance;\r\n        period = newPeriod;\r\n        blockheight = block.number;\r\n        whale = msg.sender;\r\n    }\r\n    \r\n    /// The rich get richer, the whale get whaler\r\n    function () payable{\r\n    \r\n        if (block.number - period >= blockheight){ // time is over, Matthew won\r\n            bool isSuccess=false; //mutex against recursion attack\r\n            var nextStake = stake * WINNERTAX_PRECENT/100;  // leave some money for the next round\r\n            if (isSuccess == false) //check against recursion attack\r\n                isSuccess = whale.send(stake - nextStake); // pay out the stake\r\n            MatthewWon(\"Matthew won\", whale, stake - nextStake, block.number);\r\n            setFacts();//reset the game\r\n            if (mustBeDestroyed) selfdestruct(whale); \r\n            return;\r\n            \r\n        }else{ // top the stake\r\n            if (msg.value < stake + DELTA) throw; // you must rise the stake by Delta\r\n            bool isOtherSuccess = msg.sender.send(stake); // give back the old stake\r\n            setFacts(); //reset the game\r\n            StakeIncreased(\"stake increased\", whale, stake, blockheight);\r\n        }\r\n    }\r\n    \r\n    // better safe than sorry\r\n    function destroyWhenRoundOver() onlyOwner{\r\n        mustBeDestroyed = true;\r\n    }\r\n    \r\n    // next round we set a new staking perioud\r\n    function setNewPeriod(uint _newPeriod) onlyOwner{\r\n        newPeriod = _newPeriod;\r\n    }\r\n    \r\n    function getPeriod() constant returns (uint){\r\n        return period;\r\n    }\r\n    \r\n    function getNewPeriod() constant returns (uint){\r\n        return newPeriod;\r\n    }\r\n    \r\n    function getDestroyedWhenRoundOver() constant returns (bool){\r\n        return mustBeDestroyed;\r\n    }\r\n    \r\n    //how long until a Matthew wins?\r\n    function getBlocksTillMatthew() public constant returns(uint){\r\n        if (blockheight + period > block.number)\r\n            return blockheight + period - block.number;\r\n        else\r\n            return 0;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getNewPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WINNERTAX_PRECENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksTillMatthew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDestroyedWhenRoundOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyWhenRoundOver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELTA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setNewPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockheight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"name\":\"MatthewWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"name\":\"StakeIncreased\",\"type\":\"event\"}]","ContractName":"Matthew","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}