{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n//\r\n//  This is an Ethereum Race ( and coder challenge )\r\n//\r\n//  To support this game please make sure you check out the sponsor in the public sponsor variable of each game\r\n//\r\n//  how to play:\r\n//\r\n//  1) 20 racers can register, race starting fee is 50 ether per entry (only one entry per person allowed!)\r\n//  2) Once 20 racers have registered, anyone can start the race by hitting the start_the_race() function\r\n//  3) Once the race has started, every racer has to hit the drive() function as often as they can\r\n//  4) After approx 30 mins (~126 blocks) the race ends, and the winner can claim his price\r\n//         (price is all entry fees, as well as whatever was in the additional_price_money pool to start with )\r\n//      \r\n//  Please note that we'll try to find a different sponsor for each race (who contributes to the additional_price_money pool)\r\n//  Dont forget to check out the sponsor of this game!\r\n//\r\n//  Please send any comments or questions about this game to philipp.burkard@yahoo.com, I will try to respond within a day.\r\n//  Languages spoken: English, German, a little Spanish\r\n//\r\n\r\ncontract TheGreatEtherRace {\r\n\r\n   mapping(uint256 => address) public racers; //keeps racers (index 1..total_racers)\r\n   mapping(address => uint256) public racer_index; // address to index\r\n   \r\n   mapping(address => uint256) public distance_driven; // keeps track of the race/progress of players\r\n   \r\n   string public sponsor;\r\n   \r\n   uint256 public total_racers;      // number of racers, once reached the race can start\r\n   uint256 public registered_racers; // how many racers do we have already\r\n   uint256 public registration_fee;  // how much is it to participate\r\n   uint256 public additional_price_money;\r\n   uint256 public race_start_block;  // block number that indicates when the race starts (set after everyone has signed up)\r\n   \r\n   address public winner;\r\n   \r\n   address developer_address; // to give developer his 5 ether fee\r\n   address creator;\r\n\r\n   enum EvtStatus { SignUp, ReadyToStart, Started, Finished }\r\n   EvtStatus public eventStatus;\r\n   \r\n   function getStatus() constant returns (string) {\r\n       if (eventStatus == EvtStatus.SignUp) return \"SignUp\";\r\n       if (eventStatus == EvtStatus.ReadyToStart) return \"ReadyToStart\";\r\n       if (eventStatus == EvtStatus.Started) return \"Started\";\r\n       if (eventStatus == EvtStatus.Finished) return \"Finished\";\r\n   }\r\n   \r\n   function additional_incentive() public payable { // additional ether to win, on top of other racers contribution\r\n       additional_price_money += msg.value;\r\n   }\r\n   \r\n   function TheGreatEtherRace(string p_sponsor){ // create the contract\r\n       sponsor = p_sponsor;\r\n       total_racers = 20;\r\n       registered_racers = 0;\r\n       registration_fee = 50 ether;\r\n       eventStatus = EvtStatus.SignUp;\r\n       developer_address = 0x6d5719Ff464c6624C30225931393F842E3A4A41a;\r\n       creator = msg.sender;\r\n   }\r\n   \r\n   /// 1) SIGN UP FOR THE RACE (only one entry per person allowed)\r\n   \r\n   function() payable { // buy starting position by simply transferring \r\n        uint store;\r\n        if ( msg.value < registration_fee ) throw;    // not enough paid to \r\n        if ( racer_index[msg.sender] > 0  ) throw;    // already part of the race\r\n        if ( eventStatus != EvtStatus.SignUp ) throw; // are we still in signup phase\r\n        \r\n        registered_racers++;\r\n        racer_index[msg.sender] = registered_racers;  // store racer index/position\r\n        racers[registered_racers] = msg.sender;       // store racer by index/position\r\n        if ( registered_racers >= total_racers){      // race is full, lets begin..\r\n            eventStatus = EvtStatus.ReadyToStart;     // no more buy in's possible\r\n            race_start_block = block.number + 42;  // race can start ~ 10 minutes after last person has signed up\r\n        }\r\n   }\r\n   \r\n   /// 2) START THE RACE\r\n   \r\n   function start_the_race() public {\r\n       if ( eventStatus != EvtStatus.ReadyToStart ) throw; // race is not ready to be started yet\r\n       if (block.number < race_start_block) throw;            // race starting block not yet reached\r\n       eventStatus = EvtStatus.Started;\r\n   }\r\n   \r\n   /// 3) DRIVE AS FAST AS YOU CAN (hit this function as often as you can within the next 30 mins )\r\n   function drive() public {\r\n       if ( eventStatus != EvtStatus.Started ) throw;\r\n       \r\n       if ( block.number > race_start_block + 126 ){ \r\n           \r\n           eventStatus = EvtStatus.Finished;\r\n           \r\n           // find winner\r\n           winner = racers[1];\r\n           for (uint256 idx = 2; idx <= registered_racers; idx++){\r\n               if ( distance_driven[racers[idx]] > distance_driven[winner]  ) // note: in case of equal distance, the racer who signed up earlier wins\r\n                    winner = racers[idx];\r\n           }\r\n           return;\r\n       }\r\n       distance_driven[msg.sender]++; // drive 1 unit\r\n   }\r\n   \r\n   // 4) CLAIM WINNING MONEY\r\n   \r\n   function claim_price_money() public {\r\n       \r\n       if  (eventStatus == EvtStatus.Finished){\r\n                uint winning_amount = this.balance - 5 ether;  // balance minus 5 ether fee\r\n                if (!winner.send(winning_amount)) throw;       // send to winner\r\n                if (!developer_address.send(5 ether)) throw;   // send 5 ether to developer\r\n       }\r\n       \r\n   }\r\n\r\n   \r\n   // cleanup no earlier than 3 days after race (to allow for enough time to claim), or while noone has yet registered\r\n   function cleanup() public {\r\n       if (msg.sender != creator) throw;\r\n       if (\r\n             registered_racers == 0 ||    // noone has yet registered\r\n             eventStatus == EvtStatus.Finished && block.number > race_start_block + 18514 // finished, and 3 days have passed\r\n          ){\r\n           selfdestruct(creator);\r\n       } \r\n       else throw;\r\n   }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"racer_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"race_start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"racers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registration_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_racers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additional_price_money\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distance_driven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"additional_incentive\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registered_racers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drive\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim_price_money\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_the_race\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"p_sponsor\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"TheGreatEtherRace","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024687474703a2f2f7777772e636f696e6465736b2e636f6d2f3f7265663d706232343536310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024687474703a2f2f7777772e636f696e6465736b2e636f6d2f3f7265663d7062323435363100000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}