{"status":"1","message":"OK","result":[{"SourceCode":"contract AmIOnTheFork{\r\n  function forked() constant returns(bool);\r\n}\r\n\r\ncontract Etherandom {\r\n  address owner;\r\n  uint seedPrice;\r\n  uint execPrice;\r\n  uint gasPrice;\r\n  uint minimumGasLimit;\r\n  mapping(address => uint) seedc;\r\n  mapping(address => uint) execc;\r\n\r\n  address constant AmIOnTheForkAddress = 0x2bd2326c993dfaef84f696526064ff22eba5b362;\r\n\r\n  event SeedLog(address sender, bytes32 seedID, uint gasLimit);\r\n  event ExecLog(address sender, bytes32 execID, uint gasLimit, bytes32 serverSeedHash, bytes32 clientSeed, uint cardinality);\r\n\r\n  function Etherandom() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    if (msg.sender != owner) throw;\r\n    _\r\n  }\r\n\r\n  function getSeedPrice() public constant returns (uint _seedPrice) {\r\n    return seedPrice;\r\n  }\r\n\r\n  function getExecPrice() public constant returns (uint _execPrice) {\r\n    return execPrice;\r\n  }\r\n\r\n  function getGasPrice() public constant returns (uint _gasPrice) {\r\n    return gasPrice;\r\n  }\r\n\r\n  function getMinimumGasLimit() public constant returns (uint _minimumGasLimit) {\r\n    return minimumGasLimit;\r\n  }\r\n\r\n  function getSeedCost(uint _gasLimit) public constant returns (uint _cost) {\r\n    uint cost = seedPrice + (_gasLimit * gasPrice);\r\n    return cost;\r\n  }\r\n\r\n  function getExecCost(uint _gasLimit) public constant returns (uint _cost) {\r\n    uint cost = execPrice + (_gasLimit * gasPrice);\r\n    return cost;\r\n  }\r\n\r\n  function kill() onlyAdmin {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function setSeedPrice(uint newSeedPrice) onlyAdmin {\r\n    seedPrice = newSeedPrice;\r\n  }\r\n\r\n  function setExecPrice(uint newExecPrice) onlyAdmin {\r\n    execPrice = newExecPrice;\r\n  }\r\n\r\n  function setGasPrice(uint newGasPrice) onlyAdmin {\r\n    gasPrice = newGasPrice;\r\n  }\r\n\r\n  function setMinimumGasLimit(uint newMinimumGasLimit) onlyAdmin {\r\n    minimumGasLimit = newMinimumGasLimit;\r\n  }\r\n\r\n  function withdraw(address addr) onlyAdmin {\r\n    addr.send(this.balance);\r\n  }\r\n\r\n  function () {\r\n    throw;\r\n  }\r\n\r\n  modifier costs(uint cost) {\r\n    if (msg.value >= cost) {\r\n      uint diff = msg.value - cost;\r\n      if (diff > 0) msg.sender.send(diff);\r\n      _\r\n    } else throw;\r\n  }\r\n\r\n  function seed() returns (bytes32 _id) {\r\n    return seedWithGasLimit(getMinimumGasLimit());\r\n  }\r\n\r\n  function seedWithGasLimit(uint _gasLimit) costs(getSeedCost(_gasLimit)) returns (bytes32 _id) {\r\n    if (_gasLimit > block.gaslimit || _gasLimit < getMinimumGasLimit()) throw;\r\n    bool forkFlag = AmIOnTheFork(AmIOnTheForkAddress).forked();\r\n    _id = sha3(forkFlag, this, msg.sender, seedc[msg.sender]);\r\n    seedc[msg.sender]++;\r\n    SeedLog(msg.sender, _id, _gasLimit);\r\n    return _id;\r\n  }\r\n\r\n  function exec(bytes32 _serverSeedHash, bytes32 _clientSeed, uint _cardinality) returns (bytes32 _id) {\r\n    return execWithGasLimit(_serverSeedHash, _clientSeed, _cardinality, getMinimumGasLimit());\r\n  }\r\n\r\n  function execWithGasLimit(bytes32 _serverSeedHash, bytes32 _clientSeed, uint _cardinality, uint _gasLimit) costs(getExecCost(_gasLimit)) returns (bytes32 _id) {\r\n    if (_gasLimit > block.gaslimit || _gasLimit < getMinimumGasLimit()) throw;\r\n    bool forkFlag = AmIOnTheFork(AmIOnTheForkAddress).forked();\r\n    _id = sha3(forkFlag, this, msg.sender, execc[msg.sender]);\r\n    execc[msg.sender]++;\r\n    ExecLog(msg.sender, _id, _gasLimit, _serverSeedHash, _clientSeed, _cardinality);\r\n    return _id;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getSeedCost\",\"outputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getExecCost\",\"outputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverSeedHash\",\"type\":\"bytes32\"},{\"name\":\"_clientSeed\",\"type\":\"bytes32\"},{\"name\":\"_cardinality\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasPrice\",\"outputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecPrice\",\"outputs\":[{\"name\":\"_execPrice\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeedPrice\",\"outputs\":[{\"name\":\"_seedPrice\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverSeedHash\",\"type\":\"bytes32\"},{\"name\":\"_clientSeed\",\"type\":\"bytes32\"},{\"name\":\"_cardinality\",\"type\":\"uint256\"}],\"name\":\"exec\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumGasLimit\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasLimit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSeedPrice\",\"type\":\"uint256\"}],\"name\":\"setSeedPrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"seedWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumGasLimit\",\"outputs\":[{\"name\":\"_minimumGasLimit\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExecPrice\",\"type\":\"uint256\"}],\"name\":\"setExecPrice\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seedID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"SeedLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"execID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"serverSeedHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"clientSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"cardinality\",\"type\":\"uint256\"}],\"name\":\"ExecLog\",\"type\":\"event\"}]","ContractName":"Etherandom","CompilerVersion":"v0.3.5-2016-08-08-c3ed550","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}