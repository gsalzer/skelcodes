{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  uint8 private _Tokendecimals;\r\n  string private _Tokenname;\r\n  string private _Tokensymbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n   \r\n   _Tokendecimals = decimals;\r\n    _Tokenname = name;\r\n    _Tokensymbol = symbol;\r\n    \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _Tokenname;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _Tokensymbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _Tokendecimals;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n    address payable public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Nuke is ERC20Detailed {\r\n\r\n  mapping (address => uint256) private _HalflifeTokenBalances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  string constant tokenName = \"HalfLife\";\r\n  string constant tokenSymbol = \"NUKE\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply;\r\n \r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address owner) public view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public;\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\r\n\r\n  function _mint(address account, uint256 amount) internal;\r\n\r\n  function burn(uint256 amount) external;\r\n\r\n  function _burn(address account, uint256 amount) internal;\r\n\r\n  function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\ncontract WrappedNUKE is ERC20Detailed, Owned {\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  \r\n  Nuke NUKEcontract;\r\n  string constant tokenName = \"Wrapped-HalfLife\";\r\n  string constant tokenSymbol = \"W-NUKE\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply;\r\n  bool feeless;\r\n  \r\n  event  Deposit(address indexed dst, uint value);\r\n  event  Withdrawal(address indexed src, uint value);\r\n  \r\n  //Use this to deposit a whole number of NUKEs\r\n  function depositWholeNUKEs(uint256 amount) public {\r\n      require(amount < 1000000);\r\n      depositDecimalNUKEs(amount * (10**18));\r\n  }\r\n  \r\n  //Use this to deposit fractional NUKEs where 1 \"amount\" is 1/10^18 NUKEs \r\n  function depositDecimalNUKEs(uint256 amount) public {\r\n      require(amount > 0);\r\n      require(amount < (10 ** 24));\r\n      uint supplyBeforeDeposit = NUKEcontract.balanceOf(address(this));\r\n      require(NUKEcontract.transferFrom(msg.sender, address(this), amount));\r\n      uint supplyAfterDeposit = NUKEcontract.balanceOf(address(this));\r\n      assert(supplyAfterDeposit > supplyBeforeDeposit);\r\n      uint depositValue = supplyAfterDeposit - supplyBeforeDeposit;\r\n      _balances[msg.sender] = _balances[msg.sender] + depositValue;\r\n      _totalSupply = _totalSupply + depositValue;\r\n      emit Deposit(msg.sender, amount);\r\n  }\r\n  \r\n  //Use this to withdraw a whole number of NUKEs\r\n  function withdrawWholeNUKEs(uint256 amount) public {\r\n      require(amount < 1000000);\r\n      withdrawDecimalNUKEs(amount * (10**18));\r\n  }\r\n  \r\n  //Use this to withdraw fractional NUKEs where 1 \"amount\" is 1/10^18 NUKEs\r\n  function withdrawDecimalNUKEs(uint256 amount) public {\r\n      require(amount > 0);\r\n      require(amount < (10**24));\r\n      require(_balances[msg.sender] >= amount);\r\n      _balances[msg.sender] = _balances[msg.sender] - amount;\r\n      assert(NUKEcontract.transfer(msg.sender, amount));\r\n      _totalSupply = _totalSupply - amount;\r\n      emit Withdrawal(msg.sender, amount);\r\n  }\r\n  \r\n  constructor() public payable ERC20Detailed(\"Wrapped-HalfLife\", \"W-NUKE\", 18) {\r\n      _totalSupply = 0;\r\n      feeless = false;\r\n      NUKEcontract = Nuke(0xc58c0Fca06908E66540102356f2E91edCaEB8D81);\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  // Use this to transfer your W-NUKEs.\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value > 0);\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    if (feeless) {\r\n      _balances[msg.sender] = _balances[msg.sender] - value;\r\n      _balances[to] = _balances[to] + value;\r\n      emit Transfer(msg.sender, to, value);\r\n      return true;\r\n      \r\n    } else {\r\n      uint fee = value / 1000;\r\n    \r\n      _balances[msg.sender] = _balances[msg.sender] - value;\r\n      _balances[to] = _balances[to] + value - fee;\r\n      _balances[owner] = _balances[owner] + fee;\r\n\r\n      emit Transfer(msg.sender, to, value - fee);\r\n      emit Transfer(msg.sender, owner, fee);\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n  \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n  \r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value > 0);\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    \r\n    if (feeless) {\r\n        _balances[from] = _balances[from] - value;\r\n        _balances[to] = _balances[to] + value;\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender] - value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n        \r\n    } else {\r\n        uint fee = value / 1000;\r\n    \r\n        _balances[from] = _balances[from] - value;\r\n\r\n        _balances[to] = _balances[to] + value - fee;\r\n        _balances[owner] = _balances[owner] + fee;\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender] - value;\r\n\r\n        emit Transfer(from, to, value - fee);\r\n        emit Transfer(from, owner, fee);\r\n        return true;\r\n    }\r\n    \r\n  }\r\n  \r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(addedValue > 0);\r\n    require(spender != address(0));\r\n    uint allowedBefore = _allowed[msg.sender][spender];\r\n    _allowed[msg.sender][spender] = _allowed[msg.sender][spender] + addedValue;\r\n    uint allowedAfter = _allowed[msg.sender][spender];\r\n    if (allowedAfter < allowedBefore) {\r\n        _allowed[msg.sender][spender] = 10**77;\r\n    }\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n  \r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(subtractedValue > 0);\r\n    require(spender != address(0));\r\n    uint allowedBefore = _allowed[msg.sender][spender];\r\n    _allowed[msg.sender][spender] = _allowed[msg.sender][spender] - subtractedValue;\r\n    uint allowedAfter = _allowed[msg.sender][spender];\r\n    if (allowedAfter > allowedBefore) {\r\n        _allowed[msg.sender][spender] = 0;\r\n    }\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n  \r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply - amount;\r\n    _balances[account] = _balances[account] - amount;\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender] - amount;\r\n    _burn(account, amount);\r\n  }\r\n  \r\n  // Owner may transfer out any accidentally sent tokens. \r\n  // DO NOT SEND TOKENS DIRECTLY TO THIS CONTRACT.\r\n  // Use the deposit functions to deposit NUKEs.\r\n  function transferIERC20(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n      if (tokenAddress == address(0xc58c0Fca06908E66540102356f2E91edCaEB8D81)) {\r\n          uint balanceOfContract = NUKEcontract.balanceOf(address(this));\r\n          assert(balanceOfContract >= _totalSupply);\r\n          require(tokens <= balanceOfContract - _totalSupply);\r\n          return NUKEcontract.transfer(owner, tokens);\r\n      } else {\r\n          IERC20 ierc20Contract = IERC20(tokenAddress);\r\n          return ierc20Contract.transfer(owner, tokens);\r\n      }\r\n      \r\n  }\r\n  \r\n  //This contract has a 0.1% fee for transfer of W-NUKEs\r\n  //Send 0.01 ETH to this contract to permanently make this contract feeless for everyone\r\n  function () payable external {\r\n      if (feeless) return;\r\n      if (msg.value >= 10000000000000000) {\r\n          feeless = true;\r\n      }\r\n  }\r\n  \r\n  // Owner may withdraw any ETH from this contract.\r\n  function withdrawETH() public onlyOwner {\r\n      owner.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferIERC20\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositDecimalNUKEs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDecimalNUKEs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWholeNUKEs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWholeNUKEs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WrappedNUKE","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f338e575d7c74247da87a31e6156fa0f1ccc547a900e4d56715877853562b0e8"}]}