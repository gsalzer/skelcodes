{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: contracts/ERC1132/IERC1132.sol\r\n\r\n/**\r\n * @title ERC1132 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/1132\r\n */\r\ninterface IERC1132 {\r\n  /**\r\n   * @dev Records data of all the tokens Locked\r\n   */\r\n  event Locked(\r\n    address indexed _of,\r\n    bytes32 indexed _reason,\r\n    uint256 _amount,\r\n    uint256 _validity\r\n  );\r\n\r\n  /**\r\n   * @dev Records data of all the tokens unlocked\r\n   */\r\n  event Unlocked(\r\n    address indexed _of,\r\n    bytes32 indexed _reason,\r\n    uint256 _amount\r\n  );\r\n  \r\n  /**\r\n   * @dev Locks a specified amount of tokens against an address,\r\n   *   for a specified reason and time\r\n   * @param _reason The reason to lock tokens\r\n   * @param _amount Number of tokens to be locked\r\n   * @param _time Lock time in seconds\r\n   */\r\n  function lock(bytes32 _reason, uint256 _amount, uint256 _time)\r\n    external returns (bool);\r\n \r\n  /**\r\n   * @dev Returns tokens locked for a specified address for a\r\n   *   specified reason\r\n   *\r\n   * @param _of The address whose tokens are locked\r\n   * @param _reason The reason to query the lock tokens for\r\n   */\r\n  function tokensLocked(address _of, bytes32 _reason)\r\n    external view returns (uint256 amount);\r\n  \r\n  /**\r\n   * @dev Returns tokens locked for a specified address for a\r\n   *   specified reason at a specific time\r\n   *\r\n   * @param _of The address whose tokens are locked\r\n   * @param _reason The reason to query the lock tokens for\r\n   * @param _time The timestamp to query the lock tokens for\r\n   */\r\n  function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n    external view returns (uint256 amount);\r\n  \r\n  /**\r\n   * @dev Returns total tokens held by an address (locked + transferable)\r\n   * @param _of The address to query the total balance of\r\n   */\r\n  function totalBalanceOf(address _of)\r\n    external view returns (uint256 amount);\r\n  \r\n  /**\r\n   * @dev Extends lock for a specified reason and time\r\n   * @param _reason The reason to lock tokens\r\n   * @param _time Lock extension time in seconds\r\n   */\r\n  function extendLock(bytes32 _reason, uint256 _time)\r\n    external returns (bool);\r\n  \r\n  /**\r\n   * @dev Increase number of tokens locked for a specified reason\r\n   * @param _reason The reason to lock tokens\r\n   * @param _amount Number of tokens to be increased\r\n   */\r\n  function increaseLockAmount(bytes32 _reason, uint256 _amount)\r\n    external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns unlockable tokens for a specified address for a specified reason\r\n   * @param _of The address to query the the unlockable token count of\r\n   * @param _reason The reason to query the unlockable tokens for\r\n   */\r\n  function tokensUnlockable(address _of, bytes32 _reason)\r\n    external view returns (uint256 amount);\r\n \r\n  /**\r\n   * @dev Unlocks the unlockable tokens of a specified address\r\n   * @param _of Address of user, claiming back unlockable tokens\r\n   */\r\n  function unlock(address _of)\r\n    external returns (uint256 unlockableTokens);\r\n\r\n  /**\r\n   * @dev Gets the unlockable tokens of a specified address\r\n   * @param _of The address to query the the unlockable token count of\r\n   */\r\n  function getUnlockableTokens(address _of)\r\n    external view returns (uint256 unlockableTokens);\r\n\r\n}\r\n\r\n// File: contracts/ERC1132/ERC1132.sol\r\n\r\n/**\r\n * @title Standard ERC1132 implementation\r\n * @dev See https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1298\r\n */\r\ncontract ERC1132 is ERC20,  IERC1132 {\r\n  /**\r\n   * @dev Error messages for require statements\r\n   */\r\n  string internal constant ALREADY_LOCKED = \"Tokens already locked\";\r\n  string internal constant NOT_LOCKED = \"No tokens locked\";\r\n  string internal constant AMOUNT_ZERO = \"Amount can not be 0\";\r\n\r\n  /**\r\n   * @dev Reasons why a user's tokens have been locked\r\n   */\r\n  mapping(address => bytes32[]) public lockReason;\r\n\r\n  /**\r\n   * @dev locked token structure\r\n   */\r\n  struct LockToken {\r\n    uint256 amount;\r\n    uint256 validity;\r\n    bool claimed;\r\n  }\r\n\r\n  /**\r\n   * @dev Holds number & validity of tokens locked for a given reason for\r\n   *   a specified address\r\n   */\r\n  mapping(address => mapping(bytes32 => LockToken)) public locked;\r\n\r\n  /**\r\n   * @dev Locks a specified amount of tokens against an address,\r\n   *   for a specified reason and time\r\n   * @param _reason The reason to lock tokens\r\n   * @param _amount Number of tokens to be locked\r\n   * @param _time Lock time in seconds\r\n   */\r\n  function lock(bytes32 _reason, uint256 _amount, uint256 _time)\r\n    public\r\n    returns (bool)\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    uint256 validUntil = now.add(_time); //solhint-disable-line\r\n\r\n    // If tokens are already locked, then functions extendLock or\r\n    // increaseLockAmount should be used to make any changes\r\n    require(tokensLocked(msg.sender, _reason) == 0, ALREADY_LOCKED);\r\n    require(_amount != 0, AMOUNT_ZERO);\r\n\r\n    if (locked[msg.sender][_reason].amount == 0)\r\n      lockReason[msg.sender].push(_reason);\r\n\r\n    transfer(address(this), _amount);\r\n\r\n    locked[msg.sender][_reason] = LockToken(_amount, validUntil, false);\r\n\r\n    emit Locked(\r\n      msg.sender,\r\n      _reason, \r\n      _amount, \r\n      validUntil\r\n    );\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Transfers and Locks a specified amount of tokens,\r\n   *   for a specified reason and time\r\n   * @param _to adress to which tokens are to be transfered\r\n   * @param _reason The reason to lock tokens\r\n   * @param _amount Number of tokens to be transfered and locked\r\n   * @param _time Lock time in seconds\r\n   */\r\n  function transferWithLock(\r\n    address _to, \r\n    bytes32 _reason, \r\n    uint256 _amount, \r\n    uint256 _time\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    uint256 validUntil = now.add(_time); //solhint-disable-line\r\n\r\n    require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\r\n    require(_amount != 0, AMOUNT_ZERO);\r\n\r\n    if (locked[_to][_reason].amount == 0)\r\n      lockReason[_to].push(_reason);\r\n\r\n    transfer(address(this), _amount);\r\n\r\n    locked[_to][_reason] = LockToken(_amount, validUntil, false);\r\n    \r\n    emit Locked(\r\n      _to, \r\n      _reason, \r\n      _amount, \r\n      validUntil\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns tokens locked for a specified address for a\r\n   *   specified reason\r\n   *\r\n   * @param _of The address whose tokens are locked\r\n   * @param _reason The reason to query the lock tokens for\r\n   */\r\n  function tokensLocked(address _of, bytes32 _reason)\r\n    public\r\n    view\r\n    returns (uint256 amount)\r\n  {\r\n    if (!locked[_of][_reason].claimed)\r\n      amount = locked[_of][_reason].amount;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns tokens locked for a specified address for a\r\n   *   specified reason at a specific time\r\n   *\r\n   * @param _of The address whose tokens are locked\r\n   * @param _reason The reason to query the lock tokens for\r\n   * @param _time The timestamp to query the lock tokens for\r\n   */\r\n  function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n    public\r\n    view\r\n    returns (uint256 amount)\r\n  {\r\n    if (locked[_of][_reason].validity > _time)\r\n      amount = locked[_of][_reason].amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns total tokens held by an address (locked + transferable)\r\n   * @param _of The address to query the total balance of\r\n   */\r\n  function totalBalanceOf(address _of)\r\n    public\r\n    view\r\n    returns (uint256 amount)\r\n  {\r\n    amount = balanceOf(_of);\r\n\r\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n      amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\r\n    }  \r\n  }  \r\n  \r\n  /**\r\n   * @dev Extends lock for a specified reason and time\r\n   * @param _reason The reason to lock tokens\r\n   * @param _time Lock extension time in seconds\r\n   */\r\n  function extendLock(bytes32 _reason, uint256 _time)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\r\n\r\n    locked[msg.sender][_reason].validity += _time;\r\n\r\n    emit Locked(\r\n      msg.sender, _reason, \r\n      locked[msg.sender][_reason].amount, \r\n      locked[msg.sender][_reason].validity\r\n    );\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Increase number of tokens locked for a specified reason\r\n   * @param _reason The reason to lock tokens\r\n   * @param _amount Number of tokens to be increased\r\n   */\r\n  function increaseLockAmount(bytes32 _reason, uint256 _amount)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\r\n    transfer(address(this), _amount);\r\n\r\n    locked[msg.sender][_reason].amount += _amount;\r\n\r\n    emit Locked(\r\n      msg.sender, _reason, \r\n      locked[msg.sender][_reason].amount,\r\n      locked[msg.sender][_reason].validity\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns unlockable tokens for a specified address for a specified reason\r\n   * @param _of The address to query the the unlockable token count of\r\n   * @param _reason The reason to query the unlockable tokens for\r\n   */\r\n  function tokensUnlockable(address _of, bytes32 _reason)\r\n    public\r\n    view\r\n    returns (uint256 amount)\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    if (locked[_of][_reason].validity <= now && \r\n      !locked[_of][_reason].claimed) \r\n      amount = locked[_of][_reason].amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Unlocks the unlockable tokens of a specified address\r\n   * @param _of Address of user, claiming back unlockable tokens\r\n   */\r\n  function unlock(address _of)\r\n    public\r\n    returns (uint256 unlockableTokens)\r\n  {\r\n    uint256 lockedTokens;\r\n\r\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n      lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\r\n      if (lockedTokens > 0) {\r\n        unlockableTokens = unlockableTokens.add(lockedTokens);\r\n        locked[_of][lockReason[_of][i]].claimed = true;\r\n        emit Unlocked(_of, lockReason[_of][i], lockedTokens);\r\n      }\r\n    } \r\n\r\n    if (unlockableTokens > 0)\r\n      this.transfer(_of, unlockableTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the unlockable tokens of a specified address\r\n   * @param _of The address to query the the unlockable token count of\r\n   */\r\n  function getUnlockableTokens(address _of)\r\n    public\r\n    view\r\n    returns (uint256 unlockableTokens)\r\n  {\r\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n      unlockableTokens = unlockableTokens.add(\r\n        tokensUnlockable(_of, lockReason[_of][i])\r\n      );\r\n    } \r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The account whose tokens will be burned.\r\n     * @param value uint256 The amount of token to be burned.\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: contracts/RebornDollar.sol\r\n\r\ncontract RebornDollar is ERC1132, ERC20Detailed, ERC20Mintable, ERC20Burnable {\r\n  string public constant NAME = \"Reborn Dollar\";\r\n  string public constant SYMBOL = \"REBD\";\r\n  uint8 public constant DECIMALS = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(DECIMALS));\r\n\r\n  constructor()\r\n    ERC20Burnable()\r\n    ERC20Mintable()\r\n    ERC20Detailed(NAME, SYMBOL, DECIMALS)\r\n    ERC20()\r\n    public\r\n  {\r\n    _mint(msg.sender, INITIAL_SUPPLY);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getUnlockableTokens\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RebornDollar","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d1d7ed6be540055ba7608e3dc02cf5d45881761c941d3d1e3ac337fed606a7af"}]}