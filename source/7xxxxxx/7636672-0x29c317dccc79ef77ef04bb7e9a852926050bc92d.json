{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// Ethfinex Voting Manager - relaunch 25 April 2019\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    constructor() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token burn\r\n    /// @param _owner The address of the burner\r\n    /// @param _amount The amount to burn\r\n    /// @return False if the controller does not authorize the burn\r\n    function onBurn(address payable _owner, uint _amount) public returns(bool);\r\n}\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'EFX_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // Tracks the history of the `pledgedFees` belonging to token holders\r\n    Checkpoint[] totalPledgedFeesHistory; // in wei\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    constructor(\r\n        address _tokenFactory,\r\n        address payable _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < MAX_UINT) {\r\n                require(allowed[_from][msg.sender] >= _amount);\r\n                allowed[_from][msg.sender] -= _amount;\r\n            }\r\n        }\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal {\r\n\r\n           if (_amount == 0) {\r\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\r\n               return;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != address(0)) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer throws\r\n           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n\r\n           require(previousBalanceFrom >= _amount);\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           emit Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            address(this),\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Query pledgedFees // in wei\r\n////////////////\r\n\r\n   /// @dev This function makes it easy to get the total pledged fees\r\n   /// @return The total number of fees belonging to token holders\r\n   function totalPledgedFees() public view returns (uint) {\r\n       return totalPledgedFeesAt(block.number);\r\n   }\r\n\r\n   /// @notice Total amount of fees at a specific `_blockNumber`.\r\n   /// @param _blockNumber The block number when the totalPledgedFees is queried\r\n   /// @return The total amount of pledged fees at `_blockNumber`\r\n   function totalPledgedFeesAt(uint _blockNumber) public view returns(uint) {\r\n\r\n       // These next few lines are used when the totalPledgedFees of the token is\r\n       //  requested before a check point was ever created for this token, it\r\n       //  requires that the `parentToken.totalPledgedFeesAt` be queried at the\r\n       //  genesis block for this token as that contains totalPledgedFees of this\r\n       //  token at this block number.\r\n       if ((totalPledgedFeesHistory.length == 0)\r\n           || (totalPledgedFeesHistory[0].fromBlock > _blockNumber)) {\r\n           if (address(parentToken) != address(0)) {\r\n               return parentToken.totalPledgedFeesAt(min(_blockNumber, parentSnapShotBlock));\r\n           } else {\r\n               return 0;\r\n           }\r\n\r\n       // This will return the expected totalPledgedFees during normal situations\r\n       } else {\r\n           return getValueAt(totalPledgedFeesHistory, _blockNumber);\r\n       }\r\n   }\r\n\r\n////////////////\r\n// Pledge Fees To Token Holders or Reduce Pledged Fees // in wei\r\n////////////////\r\n\r\n   /// @notice Pledges fees to the token holders, later to be claimed by burning\r\n   /// @param _value The amount sent to the vault by controller, reserved for token holders\r\n   function pledgeFees(uint _value) public onlyController returns (bool) {\r\n       uint curTotalFees = totalPledgedFees();\r\n       require(curTotalFees + _value >= curTotalFees); // Check for overflow\r\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees + _value);\r\n       return true;\r\n   }\r\n\r\n   /// @notice Reduces pledged fees to the token holders, i.e. during upgrade or token burning\r\n   /// @param _value The amount of pledged fees which are being distributed to token holders, reducing liability\r\n   function reducePledgedFees(uint _value) public onlyController returns (bool) {\r\n       uint curTotalFees = totalPledgedFees();\r\n       require(curTotalFees >= _value);\r\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees - _value);\r\n       return true;\r\n   }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string memory _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string memory _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            address(this),\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) view internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) view internal returns(bool) {\r\n        uint size;\r\n        if (_addr == address(0)) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () external payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address payable _parentToken,\r\n        uint _snapshotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            address(this),\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n  }\r\n\r\n\r\n\r\n/*\r\n    Copyright 2017, Will Harborne (Ethfinex)\r\n*/\r\n\r\ncontract DestructibleMiniMeToken is MiniMeToken {\r\n\r\n    address payable public terminator;\r\n\r\n    constructor(\r\n        address _tokenFactory,\r\n        address payable _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled,\r\n        address payable _terminator\r\n    ) public MiniMeToken(\r\n        _tokenFactory,\r\n        _parentToken,\r\n        _parentSnapShotBlock,\r\n        _tokenName,\r\n        _decimalUnits,\r\n        _tokenSymbol,\r\n        _transfersEnabled\r\n    ) {\r\n        terminator = _terminator;\r\n    }\r\n\r\n    function recycle() public {\r\n        require(msg.sender == terminator);\r\n        selfdestruct(terminator);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract DestructibleMiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createDestructibleCloneToken(\r\n        address payable _parentToken,\r\n        uint _snapshotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (DestructibleMiniMeToken) {\r\n        DestructibleMiniMeToken newToken = new DestructibleMiniMeToken(\r\n            address(this),\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled,\r\n            msg.sender\r\n        );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n    Copyright 2018, Will Harborne @ Ethfinex\r\n*/\r\n\r\n/// @title TokenListingManager Contract\r\n/// @author Will Harborne @ Ethfinex\r\ncontract TokenListingManager is Ownable {\r\n\r\n    address public constant NECTAR_TOKEN = 0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e;\r\n    address public constant TOKEN_FACTORY = 0x8936131A81F29205EeDDec486f401A8A0aFAb15A;\r\n    uint public constant MAX_CANDIDATES = 20;\r\n\r\n    struct TokenProposal {\r\n        address[] consideredTokens;\r\n        uint startBlock;\r\n        uint startTime;\r\n        uint duration;\r\n        DestructibleMiniMeToken votingToken;\r\n        uint[] yesVotes;\r\n        // criteria values\r\n        // 0. only first one win the vote;\r\n        // 1. top N (number in extraData) win the vote;\r\n        // 2. All over N (number in extra data) votes win the vote;\r\n        uint criteria;\r\n        uint extraData;\r\n        bool concluded;\r\n        mapping(address => mapping(address => uint256)) votesForToken;\r\n    }\r\n\r\n    TokenProposal[] public tokenBatches;\r\n\r\n    DestructibleMiniMeTokenFactory public tokenFactory;\r\n    address payable public nectarToken;\r\n    mapping(address => bool) public admins;\r\n\r\n    mapping(address => bool) public isWinner;\r\n    mapping(address => uint256) public winningVotes;\r\n    mapping(address => uint) public proposalWhenTokenWon;\r\n\r\n    modifier onlyAdmins() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenFactory, address payable _nectarToken) public {\r\n        tokenFactory = DestructibleMiniMeTokenFactory(_tokenFactory);\r\n        nectarToken = _nectarToken;\r\n        admins[msg.sender] = true;\r\n    }\r\n\r\n    /// @notice Admins are able to approve proposal that someone submitted\r\n    /// @param _tokens the list of tokens in consideration during this period\r\n    /// @param _duration number of days for vote token to exist. Second half is for voting.\r\n    /// @param _criteria number that determines how winner is selected\r\n    /// @param _extraData extra data for criteria parameter\r\n    function startTokenVotes(address[] memory _tokens, uint _duration, uint _criteria, uint _extraData) public onlyAdmins {\r\n        require(_tokens.length <= MAX_CANDIDATES);\r\n\r\n        if (_criteria == 1) {\r\n            // in other case all tokens would be winners\r\n            require(_extraData < _tokens.length);\r\n        }\r\n\r\n        uint _proposalId = tokenBatches.length;\r\n        if (_proposalId > 0) {\r\n          endTokenVote(_proposalId - 1);\r\n        }\r\n        tokenBatches.length++;\r\n        TokenProposal storage p = tokenBatches[_proposalId];\r\n        p.duration = _duration * (1 days);\r\n\r\n        p.consideredTokens = _tokens;\r\n        p.yesVotes = new uint[](_tokens.length);\r\n\r\n        p.votingToken = tokenFactory.createDestructibleCloneToken(\r\n                nectarToken,\r\n                getBlockNumber(),\r\n                appendUintToString(\"EfxTokenVotes-\", _proposalId),\r\n                MiniMeToken(nectarToken).decimals(),\r\n                appendUintToString(\"EVT-\", _proposalId),\r\n                true);\r\n\r\n        p.startTime = now;\r\n        p.startBlock = getBlockNumber();\r\n        p.criteria = _criteria;\r\n        p.extraData = _extraData;\r\n        p.concluded = false;\r\n\r\n        emit NewTokens(_proposalId);\r\n    }\r\n\r\n\r\n    /// @notice Anyone can end the vote if it has completed\r\n    function endTokenVote(uint _proposalId) public returns(bool) {\r\n\r\n        require(_proposalId <= tokenBatches.length);\r\n\r\n        TokenProposal storage op = tokenBatches[_proposalId];\r\n        require(op.startTime + op.duration < now);\r\n        if (op.concluded) {\r\n          return true;\r\n        }\r\n\r\n        uint[] memory _previousWinnerMap = getWinnerIndices(_proposalId);\r\n        for (uint i=0; i < _previousWinnerMap.length; i++) {\r\n            isWinner[op.consideredTokens[_previousWinnerMap[i]]] = true;\r\n            winningVotes[op.consideredTokens[_previousWinnerMap[i]]] = op.yesVotes[_previousWinnerMap[i]];\r\n            proposalWhenTokenWon[op.consideredTokens[_previousWinnerMap[i]]] = _proposalId;\r\n        }\r\n\r\n        DestructibleMiniMeToken(op.votingToken).recycle();\r\n        op.concluded = true;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Vote for specific token with yes\r\n    /// @param _proposalId is the proposal's position in tokenBatches array\r\n    /// @param _tokenIndex is the position from 0-11 in the token array of the chosen token\r\n    function vote(uint _proposalId, uint _tokenIndex, uint _amount) public {\r\n        // voting only on the most recent set of proposed tokens\r\n        require(tokenBatches.length > 0);\r\n        require(_proposalId == tokenBatches.length - 1);\r\n        require(_tokenIndex < 12);\r\n\r\n        TokenProposal storage p = tokenBatches[_proposalId];\r\n\r\n        require(now > p.startTime + (p.duration / 2));\r\n        require(now < p.startTime + p.duration);\r\n\r\n        uint amount = DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender);\r\n        require(amount >= _amount);\r\n\r\n        uint weightedAmount = getFactor(_amount);\r\n\r\n        require(DestructibleMiniMeToken(p.votingToken).transferFrom(msg.sender, address(this), _amount));\r\n\r\n        tokenBatches[_proposalId].yesVotes[_tokenIndex] += weightedAmount;\r\n        p.votesForToken[tokenBatches[_proposalId].consideredTokens[_tokenIndex]][msg.sender] += weightedAmount;\r\n\r\n        emit Vote(_proposalId, msg.sender, tokenBatches[_proposalId].consideredTokens[_tokenIndex], weightedAmount);\r\n    }\r\n\r\n    function getFactor(uint _amount) view public returns (uint weighted) {\r\n      require(tokenBatches.length > 0);\r\n      uint currentRound = tokenBatches.length - 1;\r\n      TokenProposal memory p = tokenBatches[currentRound];\r\n      if ((now - p.startTime) < (p.duration / 2)) {\r\n          weighted = 2 * _amount;\r\n      } else {\r\n          weighted = 2 * _amount - ((now - ((p.duration / 2) + p.startTime)) * _amount / (p.duration / 2));\r\n      }\r\n    }\r\n\r\n    function getWinnerIndices(uint _proposalId) public view returns(uint[] memory winners) {\r\n        require(_proposalId < tokenBatches.length);\r\n\r\n        TokenProposal memory p = tokenBatches[_proposalId];\r\n\r\n        // there is only one winner in criteria 0\r\n        if (p.criteria == 0) {\r\n            winners = new uint[](1);\r\n            uint max = 0;\r\n\r\n            for (uint i=0; i < p.consideredTokens.length; i++) {\r\n                if (p.yesVotes[i] > p.yesVotes[max]) {\r\n                    max = i;\r\n                }\r\n            }\r\n\r\n            winners[0] = max;\r\n        }\r\n\r\n        // there is N winners in criteria 1\r\n        if (p.criteria == 1) {\r\n            uint[] memory indexesWithMostVotes = new uint[](p.extraData);\r\n            winners = new uint[](p.extraData);\r\n\r\n            // for each token we check if he has more votes than last one,\r\n            // if it has we put it in array and always keep array sorted\r\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\r\n                uint last = p.extraData - 1;\r\n                if (p.yesVotes[i] > p.yesVotes[indexesWithMostVotes[last]]) {\r\n                    indexesWithMostVotes[last] = i;\r\n\r\n                    for (uint j=last; j > 0; j--) {\r\n                        if (p.yesVotes[indexesWithMostVotes[j]] > p.yesVotes[indexesWithMostVotes[j-1]]) {\r\n                            uint help = indexesWithMostVotes[j];\r\n                            indexesWithMostVotes[j] = indexesWithMostVotes[j-1];\r\n                            indexesWithMostVotes[j-1] = help;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < p.extraData; i++) {\r\n                winners[i] = indexesWithMostVotes[i];\r\n            }\r\n        }\r\n\r\n        // everybody who has over N votes are winners in criteria 2\r\n        if (p.criteria == 2) {\r\n            uint numOfTokens = 0;\r\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\r\n                if (p.yesVotes[i] > p.extraData) {\r\n                    numOfTokens++;\r\n                }\r\n            }\r\n\r\n            winners = new uint[](numOfTokens);\r\n            uint count = 0;\r\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\r\n                if (p.yesVotes[i] > p.extraData) {\r\n                    winners[count] = i;\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserVotesForWinner(address _token, address _voter) external view returns(uint256) {\r\n      uint roundWhenWon = proposalWhenTokenWon[_token];\r\n      return tokenBatches[roundWhenWon].votesForToken[_token][_voter];\r\n    }\r\n\r\n    /// @notice Get number of proposals so you can know which is the last one\r\n    function numberOfProposals() public view returns(uint) {\r\n        return tokenBatches.length;\r\n    }\r\n\r\n    /// @notice Any admin is able to add new admin\r\n    /// @param _newAdmin Address of new admin\r\n    function addAdmin(address _newAdmin) public onlyAdmins {\r\n        admins[_newAdmin] = true;\r\n    }\r\n\r\n    /// @notice Only owner is able to remove admin\r\n    /// @param _admin Address of current admin\r\n    function removeAdmin(address _admin) public onlyOwner {\r\n        admins[_admin] = false;\r\n    }\r\n\r\n    /// @notice Get data about specific proposal\r\n    /// @param _proposalId Id of proposal\r\n    function proposal(uint _proposalId) public view returns(\r\n        uint _startBlock,\r\n        uint _startTime,\r\n        uint _duration,\r\n        bool _active,\r\n        bool _finalized,\r\n        uint[] memory _votes,\r\n        address[] memory _tokens,\r\n        address _votingToken,\r\n        bool _hasBalance\r\n    ) {\r\n        require(_proposalId < tokenBatches.length);\r\n\r\n        TokenProposal memory p = tokenBatches[_proposalId];\r\n        _startBlock = p.startBlock;\r\n        _startTime = p.startTime;\r\n        _duration = p.duration;\r\n        _finalized = (_startTime+_duration < now);\r\n        _active = !_finalized && (p.startBlock < getBlockNumber());\r\n        _votes = p.yesVotes;\r\n        _tokens = p.consideredTokens;\r\n        _votingToken = address(p.votingToken);\r\n        _hasBalance = (_votingToken == address(0)) ? false : (DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender) > 0);\r\n    }\r\n\r\n    function isAdmin(address _admin) public view returns(bool) {\r\n        return admins[_admin];\r\n    }\r\n\r\n    function proxyPayment(address ) public payable returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    function onTransfer(address, address, uint ) public pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function onApprove(address, address, uint ) public pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function getBlockNumber() internal view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    function appendUintToString(string memory inStr, uint _i) internal pure returns (string memory _str) {\r\n    if (_i == 0) {\r\n        return string(abi.encodePacked(inStr, \"0\"));\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n        len++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n        bstr[k--] = byte(uint8(48 + _i % 10));\r\n        _i /= 10;\r\n    }\r\n\r\n    return string(abi.encodePacked(inStr, string(bstr)));\r\n    }\r\n\r\n    event Vote(uint indexed idProposal, address indexed _voter, address chosenToken, uint amount);\r\n    event NewTokens(uint indexed idProposal);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_criteria\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"uint256\"}],\"name\":\"startTokenVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFactor\",\"outputs\":[{\"name\":\"weighted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"outputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_finalized\",\"type\":\"bool\"},{\"name\":\"_votes\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_votingToken\",\"type\":\"address\"},{\"name\":\"_hasBalance\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalWhenTokenWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NECTAR_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBatches\",\"outputs\":[{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"votingToken\",\"type\":\"address\"},{\"name\":\"criteria\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"uint256\"},{\"name\":\"concluded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"winningVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getWinnerIndices\",\"outputs\":[{\"name\":\"winners\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nectarToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getUserVotesForWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"endTokenVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CANDIDATES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_nectarToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chosenToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProposal\",\"type\":\"uint256\"}],\"name\":\"NewTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenListingManager","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008936131a81f29205eeddec486f401a8a0afab15a000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e","Library":"","SwarmSource":"bzzr://e4f35044dbf82358b317d6058eaa4cc61b90b62f053919097615c020a42d0137"}]}