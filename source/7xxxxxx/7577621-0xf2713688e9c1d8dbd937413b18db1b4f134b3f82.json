{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/interface/ILiability.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Standard liability smart contract interface\r\n */\r\ncontract ILiability {\r\n    /**\r\n     * @dev Liability termination signal\r\n     */\r\n    event Finalized(bool indexed success, bytes result);\r\n\r\n    /**\r\n     * @dev Behaviour model multihash\r\n     */\r\n    bytes public model;\r\n\r\n    /**\r\n     * @dev Objective ROSBAG multihash\r\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \r\n     */\r\n    bytes public objective;\r\n\r\n    /**\r\n     * @dev Report ROSBAG multihash \r\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \r\n     */\r\n    bytes public result;\r\n\r\n    /**\r\n     * @dev Payment token address\r\n     */\r\n    address public token;\r\n\r\n    /**\r\n     * @dev Liability cost\r\n     */\r\n    uint256 public cost;\r\n\r\n    /**\r\n     * @dev Lighthouse fee in wn\r\n     */\r\n    uint256 public lighthouseFee;\r\n\r\n    /**\r\n     * @dev Validator fee in wn\r\n     */\r\n    uint256 public validatorFee;\r\n\r\n    /**\r\n     * @dev Robonomics demand message hash\r\n     */\r\n    bytes32 public demandHash;\r\n\r\n    /**\r\n     * @dev Robonomics offer message hash\r\n     */\r\n    bytes32 public offerHash;\r\n\r\n    /**\r\n     * @dev Liability promisor address\r\n     */\r\n    address public promisor;\r\n\r\n    /**\r\n     * @dev Liability promisee address\r\n     */\r\n    address public promisee;\r\n\r\n    /**\r\n     * @dev Lighthouse assigned to this liability\r\n     */\r\n    address public lighthouse;\r\n\r\n    /**\r\n     * @dev Liability validator address\r\n     */\r\n    address public validator;\r\n\r\n    /**\r\n     * @dev Liability success flag\r\n     */\r\n    bool public isSuccess;\r\n\r\n    /**\r\n     * @dev Liability finalization status flag\r\n     */\r\n    bool public isFinalized;\r\n\r\n    /**\r\n     * @dev Deserialize robonomics demand message\r\n     * @notice It can be called by factory only\r\n     */\r\n    function demand(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n\r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _lighthouse,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Deserialize robonomics offer message\r\n     * @notice It can be called by factory only\r\n     */\r\n    function offer(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n        \r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n\r\n        address _lighthouse,\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Finalize liability contract\r\n     * @param _result Result data hash\r\n     * @param _success Set 'true' when liability has success result\r\n     * @param _signature Result signature: liability address, result and success flag signed by promisor\r\n     * @notice It can be called by assigned lighthouse only\r\n     */\r\n    function finalize(\r\n        bytes calldata _result,\r\n        bool  _success,\r\n        bytes calldata _signature\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/interface/IValidator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Observing network contract interface\r\n */\r\ncontract IValidator {\r\n    /**\r\n     * @dev Be sure than address is really validator\r\n     * @return true when validator address in argument\r\n     */\r\n    function isValidator(address _validator) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/interface/ILighthouse.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Robonomics lighthouse contract interface\r\n */\r\ncontract ILighthouse {\r\n    /**\r\n     * @dev Provider going online\r\n     */\r\n    event Online(address indexed provider);\r\n\r\n    /**\r\n     * @dev Provider going offline\r\n     */\r\n    event Offline(address indexed provider);\r\n\r\n    /**\r\n     * @dev Active robonomics provider\r\n     */\r\n    event Current(address indexed provider, uint256 indexed quota);\r\n\r\n    /**\r\n     * @dev Robonomics providers list\r\n     */\r\n    address[] public providers;\r\n\r\n    /**\r\n     * @dev Count of robonomics providers on this lighthouse\r\n     */\r\n    function providersLength() public view returns (uint256)\r\n    { return providers.length; }\r\n\r\n    /**\r\n     * @dev Provider stake distribution\r\n     */\r\n    mapping(address => uint256) public stakes;\r\n\r\n    /**\r\n     * @dev Minimal stake to get one quota\r\n     */\r\n    uint256 public minimalStake;\r\n\r\n    /**\r\n     * @dev Silence timeout for provider in blocks\r\n     */\r\n    uint256 public timeoutInBlocks;\r\n\r\n    /**\r\n     * @dev Block number of last transaction from current provider\r\n     */\r\n    uint256 public keepAliveBlock;\r\n\r\n    /**\r\n     * @dev Round robin provider list marker\r\n     */\r\n    uint256 public marker;\r\n\r\n    /**\r\n     * @dev Current provider quota\r\n     */\r\n    uint256 public quota;\r\n\r\n    /**\r\n     * @dev Get quota of provider\r\n     */\r\n    function quotaOf(address _provider) public view returns (uint256)\r\n    { return stakes[_provider] / minimalStake; }\r\n\r\n    /**\r\n     * @dev Increase stake and get more quota,\r\n     *      one quota - one transaction in round\r\n     * @param _value in wn\r\n     * @notice XRT should be approved before call this \r\n     */\r\n    function refill(uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Decrease stake and get XRT back\r\n     * @param _value in wn\r\n     */\r\n    function withdraw(uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Create liability smart contract assigned to this lighthouse\r\n     * @param _demand ABI-encoded demand message\r\n     * @param _offer ABI-encoded offer message\r\n     * @notice Only current provider can call it\r\n     */\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Finalize liability smart contract assigned to this lighthouse\r\n     * @param _liability smart contract address\r\n     * @param _result report of work\r\n     * @param _success work success flag\r\n     * @param _signature work signature\r\n     */\r\n    function finalizeLiability(\r\n        address _liability,\r\n        bytes calldata _result,\r\n        bool _success,\r\n        bytes calldata _signature\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/interface/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Robonomics liability factory interface\r\n */\r\ncontract IFactory {\r\n    /**\r\n     * @dev New liability created \r\n     */\r\n    event NewLiability(address indexed liability);\r\n\r\n    /**\r\n     * @dev New lighthouse created\r\n     */\r\n    event NewLighthouse(address indexed lighthouse, string name);\r\n\r\n    /**\r\n     * @dev Lighthouse address mapping\r\n     */\r\n    mapping(address => bool) public isLighthouse;\r\n\r\n    /**\r\n     * @dev Nonce accounting\r\n     */\r\n    mapping(address => uint256) public nonceOf;\r\n\r\n    /**\r\n     * @dev Total GAS utilized by Robonomics network\r\n     */\r\n    uint256 public totalGasConsumed = 0;\r\n\r\n    /**\r\n     * @dev GAS utilized by liability contracts\r\n     */\r\n    mapping(address => uint256) public gasConsumedOf;\r\n\r\n    /**\r\n     * @dev The count of consumed gas for switch to next epoch \r\n     */\r\n    uint256 public constant gasEpoch = 347 * 10**10;\r\n\r\n    /**\r\n     * @dev Current gas price in wei\r\n     */\r\n    uint256 public gasPrice = 10 * 10**9;\r\n\r\n    /**\r\n     * @dev XRT emission value for consumed gas\r\n     * @param _gas Gas consumed by robonomics program\r\n     */\r\n    function wnFromGas(uint256 _gas) public view returns (uint256);\r\n\r\n    /**\r\n     * @dev Create lighthouse smart contract\r\n     * @param _minimalStake Minimal stake value of XRT token (one quota price)\r\n     * @param _timeoutInBlocks Max time of lighthouse silence in blocks\r\n     * @param _name Lighthouse name,\r\n     *              example: 'my-name' will create 'my-name.lighthouse.4.robonomics.eth' domain\r\n     */\r\n    function createLighthouse(\r\n        uint256 _minimalStake,\r\n        uint256 _timeoutInBlocks,\r\n        string calldata _name\r\n    ) external returns (ILighthouse);\r\n\r\n    /**\r\n     * @dev Create robot liability smart contract\r\n     * @param _demand ABI-encoded demand message\r\n     * @param _offer ABI-encoded offer message\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    ) external returns (ILiability);\r\n\r\n    /**\r\n     * @dev Is called after liability creation\r\n     * @param _liability Liability contract address\r\n     * @param _start_gas Transaction start gas level\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function liabilityCreated(ILiability _liability, uint256 _start_gas) external returns (bool);\r\n\r\n    /**\r\n     * @dev Is called after liability finalization\r\n     * @param _liability Liability contract address\r\n     * @param _start_gas Transaction start gas level\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function liabilityFinalized(ILiability _liability, uint256 _start_gas) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/XRT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\r\n    constructor(uint256 _initial_supply) public ERC20Detailed(\"Robonomics\", \"XRT\", 9) {\r\n        _mint(msg.sender, _initial_supply);\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/Liability.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Liability is ILiability {\r\n    using ECDSA for bytes32;\r\n    using SafeERC20 for XRT;\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public factory;\r\n    XRT     public xrt;\r\n\r\n    function setup(XRT _xrt) external returns (bool) {\r\n        require(factory == address(0));\r\n\r\n        factory = msg.sender;\r\n        xrt     = _xrt;\r\n\r\n        return true;\r\n    }\r\n\r\n    function demand(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n\r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _lighthouse,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == factory);\r\n        require(block.number < _deadline);\r\n\r\n        model        = _model;\r\n        objective    = _objective;\r\n        token        = _token;\r\n        cost         = _cost;\r\n        lighthouse   = _lighthouse;\r\n        validator    = _validator;\r\n        validatorFee = _validator_fee;\r\n\r\n        demandHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _lighthouse\r\n          , _validator\r\n          , _validator_fee\r\n          , _deadline\r\n          , IFactory(factory).nonceOf(_sender)\r\n          , _sender\r\n        ));\r\n\r\n        promisee = demandHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        require(promisee == _sender);\r\n        return true;\r\n    }\r\n\r\n    function offer(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n        \r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n\r\n        address _lighthouse,\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == factory);\r\n        require(block.number < _deadline);\r\n        require(keccak256(model) == keccak256(_model));\r\n        require(keccak256(objective) == keccak256(_objective));\r\n        require(_token == token);\r\n        require(_cost == cost);\r\n        require(_lighthouse == lighthouse);\r\n        require(_validator == validator);\r\n\r\n        lighthouseFee = _lighthouse_fee;\r\n\r\n        offerHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _validator\r\n          , _lighthouse\r\n          , _lighthouse_fee\r\n          , _deadline\r\n          , IFactory(factory).nonceOf(_sender)\r\n          , _sender\r\n        ));\r\n\r\n        promisor = offerHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        require(promisor == _sender);\r\n        return true;\r\n    }\r\n\r\n    function finalize(\r\n        bytes calldata _result,\r\n        bool  _success,\r\n        bytes calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == lighthouse);\r\n        require(!isFinalized);\r\n\r\n        isFinalized = true;\r\n        result      = _result;\r\n        isSuccess   = _success;\r\n\r\n        address resultSender = keccak256(abi.encodePacked(this, _result, _success))\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n\r\n        if (validator == address(0)) {\r\n            require(resultSender == promisor);\r\n        } else {\r\n            require(IValidator(validator).isValidator(resultSender));\r\n            // Transfer validator fee when is set\r\n            if (validatorFee > 0)\r\n                xrt.safeTransfer(validator, validatorFee);\r\n\r\n        }\r\n\r\n        if (cost > 0)\r\n            ERC20(token).safeTransfer(isSuccess ? promisor : promisee, cost);\r\n\r\n        emit Finalized(isSuccess, result);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lighthouseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"model\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objective\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"bytes\"},{\"name\":\"_objective\",\"type\":\"bytes\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_validator\",\"type\":\"address\"},{\"name\":\"_lighthouse\",\"type\":\"address\"},{\"name\":\"_lighthouse_fee\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promisee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"bytes\"},{\"name\":\"_objective\",\"type\":\"bytes\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_lighthouse\",\"type\":\"address\"},{\"name\":\"_validator\",\"type\":\"address\"},{\"name\":\"_validator_fee\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"demand\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_result\",\"type\":\"bytes\"},{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lighthouse\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xrt\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promisor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demandHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Finalized\",\"type\":\"event\"}]","ContractName":"Liability","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01a2c1adcec8964291bcdd5724b716925cfd6002d0833ab127332361d27ee225"}]}