{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract sellTokens is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public token;\r\n\r\n\r\n    uint256 public rate;\r\n\r\n\r\n    constructor(uint256 _rate, address _token) public {\r\n        require(_token != address(0) );\r\n\r\n        token = IERC20(_token);\r\n        rate = _rate;\r\n    }\r\n\r\n\r\n    function() payable external {\r\n        buyTokens();\r\n    }\r\n\r\n\r\n    function buyTokens() payable public {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(msg.sender, weiAmount);\r\n\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        if (tokens > token.balanceOf(address(this))) {\r\n            tokens = token.balanceOf(address(this));\r\n\r\n            uint price = tokens.div(rate);\r\n\r\n            uint _diff =  weiAmount.sub(price);\r\n\r\n            if (_diff > 0) {\r\n                msg.sender.transfer(_diff);\r\n            }\r\n        }\r\n\r\n        _processPurchase(msg.sender, tokens);\r\n    }\r\n\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\r\n        require(token.balanceOf(address(this)) > 0);\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.safeTransfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n\r\n    function setRate(uint256 _rate) onlyOwner external {\r\n        rate = _rate;\r\n    }\r\n\r\n\r\n    function withdrawETH() onlyOwner external{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    \r\n    function withdrawTokens(address _t) onlyOwner external {\r\n        IERC20 _token = IERC20(_t);\r\n        uint balance = _token.balanceOf(address(this));\r\n        _token.safeTransfer(owner, balance);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract buyTokens is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 public rate;\r\n\r\n    constructor(uint256 _rate, address _token) public {\r\n        require(_token != address(0) );\r\n\r\n        token = IERC20(_token);\r\n        rate = _rate;\r\n    }\r\n\r\n\r\n    function() external payable{\r\n    }\r\n\r\n\r\n    function sellToken(uint _amount) public {\r\n        _sellTokens(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    function _sellTokens(address payable _from, uint256 _amount) nonReentrant  internal {\r\n        require(_amount > 0);\r\n        token.safeTransferFrom(_from, address(this), _amount);\r\n\r\n        uint256 tokensAmount = _amount;\r\n\r\n        uint weiAmount = tokensAmount.div(rate);\r\n\r\n        if (weiAmount > address(this).balance) {\r\n            tokensAmount = address(this).balance.mul(rate);\r\n            weiAmount = address(this).balance;\r\n\r\n            uint _diff =  _amount.sub(tokensAmount);\r\n\r\n            if (_diff > 0) {\r\n                token.safeTransfer(_from, _diff);\r\n            }\r\n        }\r\n\r\n        _from.transfer(weiAmount);\r\n    }\r\n\r\n\r\n    function receiveApproval(address payable _from, uint256 _value, address _token, bytes memory _extraData) public {\r\n        require(_token == address(token));\r\n        require(msg.sender == address(token));\r\n\r\n        _extraData;\r\n        _sellTokens(_from, _value);\r\n    }\r\n\r\n\r\n    function setRate(uint256 _rate) onlyOwner external {\r\n        rate = _rate;\r\n    }\r\n\r\n\r\n    function withdrawETH() onlyOwner external{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function withdrawTokens(address _t) onlyOwner external {\r\n        IERC20 _token = IERC20(_t);\r\n        uint balance = _token.balanceOf(address(this));\r\n        _token.safeTransfer(owner, balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"sellTokens","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000003200000000000000000000000019bdea9d39dd922af59e623b8102bb9b36c56fbd","Library":"","SwarmSource":"bzzr://74183701a022aefa13824a023672a5680400b8470944acda8035e90280cd8408"}]}