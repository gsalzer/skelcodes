{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// Version 2.0 ////// \r\n\r\n// Contract 01\r\ncontract OwnableContract {    \r\n    event onTransferOwnership(address newOwner);\r\n\taddress superOwner; \r\n\t\r\n    constructor() public { \r\n        superOwner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == superOwner);\r\n        _;\r\n    } \r\n\t\r\n    function viewSuperOwner() public view returns (address owner) {\r\n        return superOwner;\r\n    }\r\n      \r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        require(newOwner != superOwner);       \r\n        superOwner = newOwner;     \r\n        emit onTransferOwnership(superOwner);\r\n    }\r\n}\r\n\r\n// Contract 02\r\ncontract BlockableContract is OwnableContract {    \r\n    event onBlockHODLs(bool status);\r\n    bool public blockedContract;\r\n    \r\n    constructor() public { \r\n        blockedContract = false;  \r\n    }\r\n    \r\n    modifier contractActive() {\r\n        require(!blockedContract);\r\n        _;\r\n    } \r\n    \r\n    function doBlockContract() onlyOwner public {\r\n        blockedContract = true;        \r\n        emit onBlockHODLs(blockedContract);\r\n    }\r\n    \r\n    function unBlockContract() onlyOwner public {\r\n        blockedContract = false;        \r\n        emit onBlockHODLs(blockedContract);\r\n    }\r\n}\r\n\r\n// Contract 03\r\ncontract ldoh is BlockableContract {\r\n    \r\n    event onStoreProfileHash(address indexed hodler, string profileHashed);\r\n    event onHodlTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n    event onClaimTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n    event onReturnAll(uint256 returned);\r\n\t\r\n    // Variables // * = New ** = Undeveloped\r\n\t\r\n    address internal AXPRtoken;\r\n    mapping(address => string) public profileHashed; \t\t\t// User Prime \r\n\r\n\r\n\t\r\n\t// Default Setting\r\n\t\r\n\tuint256 public hodlingTime;\r\n    uint256 public allTimeHighPrice;\r\n\tuint256 public percent \t\t\t\t\t\t= 300;        \t// * Only test 300% Permonth\r\n\tuint256 private constant affiliate \t\t\t= 12;        \t// * 12% from deposit\r\n\tuint256 private constant cashback \t\t\t= 16;        \t// * 16% from deposit\r\n\tuint256 private constant totalreceive \t\t= 88;        \t// * 88% from deposit\t\r\n    uint256 private constant seconds30days \t\t= 2592000;  \t// *\r\n\r\n    struct Safe {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 endtime;\r\n        address user;\r\n        address tokenAddress;\r\n\t\tstring tokenSymbol;\t\r\n\t\tuint256 amountbalance; \t\t\t\t\t\t\t// * --- > 88% from deposit\r\n\t\tuint256 cashbackbalance; \t\t\t\t\t\t// * --- > 16% from deposit\r\n\t\tuint256 lasttime; \t\t\t\t\t\t\t\t// * --- > Now\r\n\t\tuint256 percentage; \t\t\t\t\t\t\t// * --- > return tokens every month\r\n\t\tuint256 percentagereceive; \t\t\t\t\t\t// * --- > 0 %\r\n\t\tuint256 tokenreceive; \t\t\t\t\t\t\t// * --- > 0 Token\r\n\t\tuint256 affiliatebalance; \t\t\t\t\t\t// **\r\n\t\taddress referrer; \t\t\t\t\t\t\t\t// **\r\n\r\n    }\r\n    \r\n    //Safes Variables\r\n  \r\n    mapping(address => uint256[]) \tpublic \t_userSafes;\r\n    mapping(uint256 => Safe) \t\tprivate _safes; \t\t\t// = Struct safe\r\n    uint256 \t\t\t\t\t\tprivate _currentIndex; \t\t// Id Number\r\n    uint256 \t\t\t\t\t\tpublic \t_countSafes; \t\t// Total User\r\n    mapping(address => uint256) \tpublic \t_totalSaved; \t\t// ERC20 Token Balance count\r\n    \r\n    //Dev Owner Variables\r\n\r\n    uint256 \t\t\t\t\tpublic comission;\r\n    mapping(address => uint256) private _systemReserves;    \t// Token Balance Reserve\r\n    address[] \t\t\t\t\tpublic _listedReserves;\r\n    \r\n    //Constructor\r\n   \r\n    constructor() public {\r\n        \r\n        AXPRtoken \t\t= 0xC39E626A04C5971D770e319760D7926502975e47;        \r\n        hodlingTime \t= 730 days;\r\n        _currentIndex \t= 500;\r\n        comission \t\t= 5;\r\n    }\r\n    \r\n\t\r\n// Function 01 - Fallback Function To Receive Donation In Eth\r\n    function () public payable {\r\n        require(msg.value > 0);       \r\n        _systemReserves[0x0] = add(_systemReserves[0x0], msg.value);\r\n    }\r\n\t\r\n// Function 02 - Hodl ERC20 Token\t\r\n    function HodlTokens(address tokenAddress, uint256 amount) public contractActive {\r\n        require(tokenAddress != 0x0);\r\n        require(amount > 0);\r\n\t\t\r\n        ERC20Interface token = ERC20Interface(tokenAddress);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\t\t\r\n\t\t    uint256 affiliatecomission = mul(amount, affiliate) / 100; // *\t\t\t\r\n            uint256 data_amountbalance = sub(amount, affiliatecomission); // * \r\n\t\t\tuint256 data_cashbackbalance = mul(amount, cashback) / 100; // *\t\t\t \r\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \r\n\t\t// Insert to Database  \t\t\t \t  \r\n\t\t_userSafes[msg.sender].push(_currentIndex);\r\n\t\t_safes[_currentIndex] = \r\n\r\n\t\tSafe(\r\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, 0xA15C7Ebe1f07CaF6bFF097D8a589fb8AC49Ae5B3);\t\t\t\t\r\n\t\t\r\n\t\t// Update Token Balance, Current Index, CountSafes\t\t\r\n        _totalSaved[tokenAddress] = add(_totalSaved[tokenAddress], amount);        \r\n        _currentIndex++;\r\n        _countSafes++;\r\n        \r\n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\r\n    }\r\n\t\r\n\t\r\n// Function 03 - Withdraw Token\t\r\n    function ClaimTokens(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);\r\n        \r\n        RetireHodl(tokenAddress, id);\r\n    }\r\n    \r\n    function RetireHodl(address tokenAddress, uint256 id) private {\r\n\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == tokenAddress);\r\n        require(\r\n                (tokenAddress == AXPRtoken && s.endtime < now ) ||\r\n                    tokenAddress != AXPRtoken\r\n                );\r\n\r\n        uint256 eventAmount;\r\n        address eventTokenAddress = s.tokenAddress;\r\n        string memory eventTokenSymbol = s.tokenSymbol;\r\n\t\t\r\nif(s.amountbalance == 0) { revert(); \t\t\r\n        \r\n        if(s.endtime < now) // Hodl Complete\r\n        {\r\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\r\n            \r\n            eventAmount \t\t\t\t= s.amountbalance;\r\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\r\n\t\t\t\r\n\t    s.amountbalance = 0;\r\n\t\t\r\n        }\r\n        else \r\n        {\r\n\t\t\t\r\n\t\t\tuint256 timeframe  \t\t\t= now - s.lasttime;\r\n\t\t\tuint256 maxtimeframe \t\t= timeframe / seconds30days;\r\n\t\t\t\r\n\t\t\tif (maxtimeframe >= 3) { \t// Max 3 x 2592000 Seconds = 3 Month\r\n\t\t\tuint256 timeframeaccumulation = 3; \r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\ttimeframeaccumulation = maxtimeframe; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuint256 calcwithdrawamount \t= s.amount * s.percentage / 100 * timeframeaccumulation ;  \r\n\r\n\t\t\tif (calcwithdrawamount >= s.amountbalance) {\r\n\t\t\tuint256 withdrawamount = s.amountbalance; \r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\twithdrawamount = calcwithdrawamount; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuint256 newamountbalance \t= sub(s.amountbalance, withdrawamount);\t \t\r\n            \t\t\t\r\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \r\n\t\ts.lasttime \t\t\t\t\t\t= now;  \r\n\t\t\r\n\t\t\tuint256 tokenaffiliate \t\t= mul(s.amount, affiliate) / 100 ; \r\n\t\t\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance;\t  \t\t\t\t\r\n\t\t\tuint256 percentagereceived \t= tokenreceived / s.amount * 100000000000000000000;\t  \r\n\t\t\r\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \r\n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\r\n\t\t\r\n\t        PayToken(s.user, s.tokenAddress, withdrawamount); \r\n\t\t\t\r\n            eventAmount = withdrawamount;\r\n\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], withdrawamount); \t\t\r\n\t\t}\r\n\t\t\r\n}\r\n        \r\n        emit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    }    \r\n      \r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n    }   \t\r\n\t\r\n//??? Function 04 - Store Comission From Unfinished Hodl\r\n    function StoreComission(address tokenAddress, uint256 amount) private {\r\n            \r\n        _systemReserves[tokenAddress] = add(_systemReserves[tokenAddress], amount);\r\n        \r\n        bool isNew = true;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            if(_listedReserves[i] == tokenAddress) {\r\n                isNew = false;\r\n                break;\r\n            }\r\n        }         \r\n        if(isNew) _listedReserves.push(tokenAddress); \r\n    }    \r\n\t\r\n//??? Function 05 - Delete Safe Values In Storage   \r\n    function DeleteSafe(Safe s) private {\r\n        \r\n        _totalSaved[s.tokenAddress] = sub(_totalSaved[s.tokenAddress], s.amount);\r\n        delete _safes[s.id];\r\n        \r\n        uint256[] storage vector = _userSafes[msg.sender];\r\n        uint256 size = vector.length; \r\n        for(uint256 i = 0; i < size; i++) {\r\n            if(vector[i] == s.id) {\r\n                vector[i] = vector[size-1];\r\n                vector.length--;\r\n                break;\r\n            }\r\n        } \r\n    }\r\n\t\r\n//??? Function 06 - Store The Profile's Hash In The Blockchain   \r\n    function storeProfileHashed(string _profileHashed) public {\r\n        profileHashed[msg.sender] = _profileHashed;        \r\n        emit onStoreProfileHash(msg.sender, _profileHashed);\r\n    }  \t\r\n\r\n//??? Function 07 - Get User's Any Token Balance\r\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\r\n        require(tokenAddress != 0x0);\r\n        \r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\r\n                balance += s.amount;\r\n        }\r\n        return balance;\r\n    }\r\n\r\n// Function 08 - Get How Many Safes Has The User  \r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return _userSafes[hodler].length;\r\n    }\r\n    \r\n// Function 09 - Get Safes Values\r\n\tfunction GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\r\n    }\r\n\t\r\n// Function 10 - Get Tokens Reserved For The Owner As Commission \r\n    function GetTokenFees(address tokenAddress) private view returns (uint256 amount) {\r\n        return _systemReserves[tokenAddress];\r\n    }    \r\n    \r\n// Function 11 - Get Contract's Balance  \r\n    function GetContractBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    } \r\n\r\n// Function 12 - Available For Withdrawal\r\n\tfunction AvailableForWithdrawal(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 amountbalance, uint256 lastwithdraw, uint256 availableforwithdrawal)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n\t\t\r\n\t\t\tuint256 timeframe  \t\t\t= now - s.lasttime;\r\n\t\t\tuint256 maxtimeframe \t\t= timeframe / seconds30days;\r\n\t\t\t\r\n\t\t\tif (maxtimeframe >= 3) { \t// Max 3 x 2592000 Seconds = 3 Month\r\n\t\t\tuint256 timeframeaccumulation = 3; \r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\ttimeframeaccumulation = maxtimeframe; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuint256 calcwithdrawamount \t= s.amount * s.percentage / 100 * timeframeaccumulation ;  \r\n\r\n\t\t\tif (calcwithdrawamount >= s.amountbalance) {\r\n\t\t\tuint256 withdrawamount = s.amountbalance; \r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\twithdrawamount = calcwithdrawamount; \r\n\t\t\t}\r\n\t\t\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.amountbalance, s.lasttime, withdrawamount);\r\n    }\r\n\t\r\n    \r\n\t\r\n////////////////////////////////// onlyOwner //////////////////////////////////\r\n\r\n\t\r\n// 01 Retire Hodl Safe   \r\n    function OwnerRetireHodl(address tokenAddress, uint256 id) public onlyOwner {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);      \r\n        RetireHodl(tokenAddress, id);\r\n    }\r\n    \r\n// 02 Change Hodling Time   \r\n    function ChangeHodlingTime(uint256 newHodlingDays) onlyOwner public {\r\n        require(newHodlingDays >= 60);      \r\n        hodlingTime = newHodlingDays * 1 days;\r\n    }   \r\n    \r\n// 03 Change All Time High Price   \r\n    function ChangeAllTimeHighPrice(uint256 newAllTimeHighPrice) onlyOwner public {\r\n        require(newAllTimeHighPrice > allTimeHighPrice);       \r\n        allTimeHighPrice = newAllTimeHighPrice;\r\n    }              \r\n\r\n// 04 Change Comission Value   \r\n    function ChangeComission(uint256 newComission) onlyOwner public {\r\n        require(newComission <= 30);       \r\n        comission = newComission;\r\n    }\r\n    \r\n// 05 Withdraw Token Fees By Address   \r\n    function WithdrawTokenFees(address tokenAddress) onlyOwner public {\r\n        require(_systemReserves[tokenAddress] > 0);\r\n        \r\n        uint256 amount = _systemReserves[tokenAddress];\r\n        _systemReserves[tokenAddress] = 0;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n// 06 Withdraw All Eth And All Tokens Fees   \r\n    function WithdrawAllFees() onlyOwner public {\r\n        \r\n        // Ether\r\n        uint256 x = _systemReserves[0x0];\r\n        if(x > 0 && x <= address(this).balance) {\r\n            _systemReserves[0x0] = 0;\r\n            msg.sender.transfer(_systemReserves[0x0]);\r\n        }\r\n        \r\n        // Tokens\r\n        address ta;\r\n        ERC20Interface token;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            ta = _listedReserves[i];\r\n            if(_systemReserves[ta] > 0)\r\n            { \r\n                x = _systemReserves[ta];\r\n                _systemReserves[ta] = 0;\r\n                \r\n                token = ERC20Interface(ta);\r\n                token.transfer(msg.sender, x);\r\n            }\r\n        }\r\n        _listedReserves.length = 0; \r\n    }\r\n    \r\n\r\n// 07 - Withdraw Ether Received Through Fallback Function    \r\n    function WithdrawEth(uint256 amount) onlyOwner public {\r\n        require(amount > 0); \r\n        require(address(this).balance >= amount); \r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n// 08 - Returns All Tokens Addresses With Fees       \r\n    function GetTokensAddressesWithFees() \r\n        onlyOwner public view \r\n        returns (address[], string[], uint256[])\r\n    {\r\n        uint256 length = _listedReserves.length;\r\n        \r\n        address[] memory tokenAddress = new address[](length);\r\n        string[] memory tokenSymbol = new string[](length);\r\n        uint256[] memory tokenFees = new uint256[](length);\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n    \r\n            tokenAddress[i] = _listedReserves[i];\r\n            \r\n            ERC20Interface token = ERC20Interface(tokenAddress[i]);\r\n            \r\n            tokenSymbol[i] = token.symbol();\r\n            tokenFees[i] = GetTokenFees(tokenAddress[i]);\r\n        }\r\n        \r\n        return (tokenAddress, tokenSymbol, tokenFees);\r\n    }\r\n\r\n\t\r\n// 09 - Return All Tokens To Their Respective Addresses    \r\n    function ReturnAllTokens(bool onlyAXPR) onlyOwner public\r\n    {\r\n        uint256 returned;\r\n\r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n                if (\r\n                    (onlyAXPR && s.tokenAddress == AXPRtoken) ||\r\n                    !onlyAXPR\r\n                    )\r\n                {\r\n                    PayToken(s.user, s.tokenAddress, s.amountbalance);\r\n                    DeleteSafe(s);\r\n                    \r\n                    _countSafes--;\r\n                    returned++;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit onReturnAll(returned);\r\n    }    \r\n\r\n\t\r\n//////////////////////////////////////////////// \t\r\n\t\r\n\r\n    /**\r\n    * SAFE MATH FUNCTIONS\r\n    * \r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"profileHashed\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_listedReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllTimeHighPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeAllTimeHighPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawTokenFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onlyAXPR\",\"type\":\"bool\"}],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AvailableForWithdrawal\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"lastwithdraw\",\"type\":\"uint256\"},{\"name\":\"availableforwithdrawal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHodlingDays\",\"type\":\"uint256\"}],\"name\":\"ChangeHodlingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetHodlTokensBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawAllFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newComission\",\"type\":\"uint256\"}],\"name\":\"ChangeComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTokensAddressesWithFees\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerRetireHodl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSuperOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profileHashed\",\"type\":\"string\"}],\"name\":\"storeProfileHashed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeHighPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"profileHashed\",\"type\":\"string\"}],\"name\":\"onStoreProfileHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onReturnAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"onBlockHODLs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onTransferOwnership\",\"type\":\"event\"}]","ContractName":"ldoh","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3419bc959c39db99f30c5aae0a8fcae9a8def5096be668febcfabe538e4a28fd"}]}