{"status":"1","message":"OK","result":[{"SourceCode":"// This is the contract code for https://weirdeth.auction\r\n\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/DollarAuction.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract DollarAuction {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant minimumBidDelta = 1e15;\r\n    uint256 constant twentyFourHours = 24 * 60 * 60;\r\n    uint256 constant tenthEth = 1e17;\r\n    uint256 public expiryTime;\r\n    uint256 public prize;\r\n    address payable private originalOwner;\r\n    address payable public largestDonor;\r\n    address payable public winningBidder;\r\n    address payable public losingBidder;\r\n    uint256 public largestPrizeIncrease;\r\n    uint256 public winningBid;\r\n    uint256 public losingBid;\r\n\r\n    constructor() public payable {\r\n        originalOwner = msg.sender;\r\n        reset();\r\n    }\r\n\r\n    modifier onlyActiveAuction() {\r\n        require(isActiveAuction(), \"Auction not active, call restart to start a new auction.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInactiveAuction() {\r\n        require(!isActiveAuction(), \"Auction not expired. Wait for expiryTime to pass.\");\r\n        _;\r\n    }\r\n\r\n    function increasePrize() public payable onlyActiveAuction {\r\n        require(msg.value >= largestPrizeIncrease.add(minimumBidDelta),\r\n            \"Must be larger than largestPrizeIncrease + minimumBidDelta\");\r\n\r\n        prize = prize.add(msg.value);\r\n        largestDonor = msg.sender;\r\n        largestPrizeIncrease = msg.value;\r\n    }\r\n\r\n    function bid() public payable onlyActiveAuction {\r\n        uint bidAmount = msg.value;\r\n\r\n        require(bidAmount >= winningBid.add(minimumBidDelta), \"Bid too small\");\r\n\r\n        repayThirdPlace();\r\n        updateLosingBidder();\r\n        updateWinningBidder(bidAmount, msg.sender);\r\n\r\n        if(expiryTime < block.timestamp + twentyFourHours){\r\n            expiryTime = block.timestamp + twentyFourHours;\r\n        }\r\n    }\r\n\r\n    function withdrawPrize() public onlyInactiveAuction {\r\n\r\n        // Try to send the prize to the winner. If the send fails\r\n        // (e.g. due to out of gas), Try the second place winner.\r\n        // If this also fails, try the largestDonor and finally the\r\n        // contract owner.\r\n        if (!winningBidder.send(prize)){\r\n            if(!losingBidder.send(prize)){\r\n                if(!largestDonor.send(prize)){\r\n                    originalOwner.transfer(prize);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Same as above except swapping largestDonor and winingBidder\r\n        uint256 bids = winningBid.add(losingBid);\r\n        if(!largestDonor.send(bids)){\r\n            if(!winningBidder.send(bids)){\r\n                if(!losingBidder.send(bids)){\r\n                    originalOwner.transfer(bids);\r\n                }\r\n            }\r\n        }\r\n\r\n        prize = 0;\r\n    }\r\n\r\n    function restart() public payable onlyInactiveAuction {\r\n        if (prize != 0) {\r\n            withdrawPrize();\r\n        }\r\n        reset();\r\n    }\r\n\r\n    function reset() internal onlyInactiveAuction {\r\n        require(msg.value >= minimumBidDelta, \"Prize must be at least minimumBidDelta\");\r\n        expiryTime = block.timestamp + 2*twentyFourHours;\r\n        prize = msg.value;\r\n        largestDonor = msg.sender;\r\n        winningBidder = msg.sender;\r\n        losingBidder = msg.sender;\r\n        winningBid = 0;\r\n        losingBid = 0;\r\n        largestPrizeIncrease = msg.value;\r\n    }\r\n\r\n    function updateWinningBidder(uint256 _bid, address payable _bidder) internal {\r\n        winningBid = _bid;\r\n        winningBidder = _bidder;\r\n    }\r\n\r\n    function updateLosingBidder() internal {\r\n        losingBidder = winningBidder;\r\n        losingBid = winningBid;\r\n    }\r\n\r\n    function repayThirdPlace() internal {\r\n        bool successfulRepayment = losingBidder.send(losingBid);\r\n\r\n        // If for some reason we can't send ETH\r\n        // to third place (e.g. to a contract that runs out of gas),\r\n        // Add it to the prize\r\n        if (!successfulRepayment){\r\n            prize += losingBid;\r\n        }\r\n    }\r\n\r\n    function isActiveAuction() public view returns(bool) {\r\n        return block.timestamp < expiryTime;\r\n    }\r\n\r\n    // what happens if donate fails? Money returned to sender?\r\n    function() external payable {\r\n        bid();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increasePrize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"losingBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestDonor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"losingBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBidDelta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestPrizeIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActiveAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DollarAuction","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f86bf4cd70fb2f459c88a0605aaba96c36aff757feedf3ee72890be73c2434a2"}]}