{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 < 0.6.0;\r\n\r\nlibrary BloomFilter {\r\n    struct Filter {\r\n        uint256 bitmap;\r\n        uint8 hashCount;\r\n    }\r\n    \r\n    function getHashCount(uint _itemNum) public pure returns(uint8) {\r\n        uint numOfHash = (256 * 144) / (_itemNum * 100) + 1;\r\n        if(numOfHash < 256) return uint8(numOfHash);\r\n        else return 255;\r\n    }\r\n\r\n    function addToBitmap(uint256 _bitmap,  uint8 _hashCount, bytes32 _item) public pure returns(uint256) {\r\n        require(_hashCount > 0);\r\n        for(uint i = 0; i < _hashCount; i++) {\r\n            uint256 position = uint256(keccak256(abi.encodePacked(_item, i))) % 256;\r\n            require(position < 256);\r\n            uint256 digest = 1 << position;\r\n            _bitmap = _bitmap | digest;\r\n        }\r\n        return _bitmap;\r\n    }\r\n\r\n    function falsePositive(uint256 _bitmap,  uint8 _hashCount, bytes32 _item) public pure returns(bool _probablyPresent){\r\n        require(_hashCount > 0);\r\n        for(uint i = 0; i < _hashCount; i++) {\r\n            uint256 position = uint256(keccak256(abi.encodePacked(_item, i))) % 256;\r\n            require(position < 256);\r\n            uint256 digest = 1 << position;\r\n            if(_bitmap != _bitmap | digest) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function init(Filter storage _filter, uint _itemNum) internal {\r\n        _filter.hashCount = getHashCount(_itemNum);\r\n    }\r\n\r\n    function add(Filter storage _filter, bytes32 _item) internal {\r\n        _filter.bitmap = addToBitmap(_filter.bitmap, _filter.hashCount, _item);\r\n    }\r\n\r\n    function check(Filter storage _filter, bytes32 _item) internal view returns(bool) {\r\n        return falsePositive(_filter.bitmap, _filter.hashCount, _item);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_bitmap\",\"type\":\"uint256\"},{\"name\":\"_hashCount\",\"type\":\"uint8\"},{\"name\":\"_item\",\"type\":\"bytes32\"}],\"name\":\"falsePositive\",\"outputs\":[{\"name\":\"_probablyPresent\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bitmap\",\"type\":\"uint256\"},{\"name\":\"_hashCount\",\"type\":\"uint8\"},{\"name\":\"_item\",\"type\":\"bytes32\"}],\"name\":\"addToBitmap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemNum\",\"type\":\"uint256\"}],\"name\":\"getHashCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BloomFilter","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://31b5ac29d0d40a1d493a125c5e009ac5c15583571b8ac7d45e4c4c1538083919"}]}