{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev The constructor sets the original owner of the contract to the sender account.\r\n     */\r\n    constructor() public {\r\n        setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _pendingOwner, \"msg.sender should be onlyPendingOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"msg.sender should be owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the pendingOwner\r\n     * @return The address of the pendingOwner\r\n     */\r\n    function pendingOwner() public view returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n    \r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return the address of the owner\r\n     */\r\n    function owner() public view returns (address ) {\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n    * @dev Sets a new owner address\r\n    * @param _newOwner The newOwner to set\r\n    */\r\n    function setOwner(address _newOwner) internal {\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _pendingOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(_owner, _pendingOwner);\r\n        _owner = _pendingOwner;\r\n        _pendingOwner = address(0); \r\n    }\r\n    \r\n}\r\n\r\n// File: contracts/Operable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract Operable is Ownable {\r\n\r\n    address private _operator; \r\n\r\n    event OperatorChanged(address indexed previousOperator, address indexed newOperator);\r\n\r\n    /**\r\n     * @dev Tells the address of the operator\r\n     * @return the address of the operator\r\n     */\r\n    function operator() external view returns (address) {\r\n        return _operator;\r\n    }\r\n    \r\n    /**\r\n     * @dev Only the operator can operate store\r\n     */\r\n    modifier onlyOperator() {\r\n        require(msg.sender == _operator, \"msg.sender should be operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev update the storgeOperator\r\n     * @param _newOperator The newOperator to update  \r\n     */\r\n    function updateOperator(address _newOperator) public onlyOwner {\r\n        require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\r\n        emit OperatorChanged(_operator, _newOperator);\r\n        _operator = _newOperator;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/BlacklistStore.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract BlacklistStore is Operable {\r\n\r\n    mapping (address => uint256) public blacklisted;\r\n\r\n    /**\r\n     * @dev Checks if account is blacklisted\r\n     * @param _account The address to check\r\n     * @param _status The address status    \r\n     */\r\n    function setBlacklist(address _account, uint256 _status) public onlyOperator {\r\n        blacklisted[_account] = _status;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlacklistStore","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38f5dccec3e9505a9a18eb7a3e92f3355c5e8f3fcdfef153fa7fbaf67f8db762"}]}