{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract CrowdsaleInterface {\r\n\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n    mapping(address => uint8) whitelist;\r\n    mapping(uint256 => address) holders;\r\n    mapping(address => uint) maxInvestLimitList;\r\n\r\n    uint256 _totalHolders; // you should initialize this to 0 in the constructor\r\n\r\n    function enableWhitelist(address[] _addresses) public returns (bool success);\r\n    function setMaximumInvest(address _address, uint _amount) public returns (bool success);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender] == 2);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n      * @param newOwner The address to transfer ownership to.\r\n      */\r\n    // function transferOwnership(address newOwner) public onlyOwner {\r\n    //     _transferOwnership(newOwner);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract TokenTemplate is ERC20Interface, CrowdsaleInterface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public symbol;\r\n    uint public priceRate;\r\n    uint public minimumInvest;\r\n    bytes32 public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    uint amountRaised;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(bytes32 _name, bytes32 _symbol, uint _total, uint _weiCostOfEachToken, uint _weiMinimumInvest) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = 18;\r\n        priceRate= _weiCostOfEachToken;\r\n        minimumInvest= _weiMinimumInvest;\r\n        _totalSupply = _total * 10**uint(decimals);\r\n\r\n        _totalHolders = 0;\r\n\r\n        balances[owner] = _totalSupply;\r\n        holders[_totalHolders] = owner;\r\n        whitelist[owner] = 2;\r\n        maxInvestLimitList[owner] = 0;\r\n        _totalHolders++;\r\n\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n\r\n\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) onlyWhitelist public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) onlyWhitelist public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) onlyWhitelist public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function enableWhitelist(address[] _addresses) public onlyOwner returns (bool success) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _addWalletToWhitelist(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n    function _addWalletToWhitelist(address addr) internal {\r\n        if (whitelist[addr] == 2) {\r\n        } else if (whitelist[addr] == 1) {\r\n            whitelist[addr] = 2;\r\n        } else {\r\n            whitelist[addr] = 2;\r\n            holders[_totalHolders] = addr;\r\n            maxInvestLimitList[addr] = 0;\r\n            _totalHolders++;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] _addresses) public onlyOwner returns (bool success) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _disableWhitelist(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _disableWhitelist(address addr) internal {\r\n        if (whitelist[addr] == 2) {\r\n            whitelist[addr] = 1;\r\n        } else {\r\n        }\r\n    }\r\n\r\n    function getWhitelist() public view returns (address[] addresses) {\r\n\r\n        uint256 j;\r\n        uint256 count = 0;\r\n\r\n        for (j=0; j<_totalHolders; j++) {\r\n            if (whitelist[holders[j]] == 2) {\r\n                count = count+1;\r\n            } else {\r\n            }\r\n        }\r\n        address[] memory wlist = new address[](count);\r\n\r\n        for (j=0; j<count; j++) {\r\n            if (whitelist[holders[j]] == 2) {\r\n                wlist[j] = holders[j];\r\n            } else {\r\n            }\r\n        }\r\n        return wlist;\r\n    }\r\n\r\n    function getBalances() public view returns (address[] _addresses, uint256[] _balances) {\r\n        address[] memory wlist1 = new address[](_totalHolders);\r\n        uint256[] memory wlist2 = new uint256[](_totalHolders);\r\n\r\n        for (uint256 j=0; j<_totalHolders; j++) {\r\n            //////if (whitelist[holders[j]] == 2) {\r\n                wlist1[j] = holders[j];\r\n                wlist2[j] = balances[holders[j]];\r\n            //////}\r\n        }\r\n        return (wlist1,wlist2);\r\n    }\r\n\r\n    function getBalancesAndMaxLimit() public view returns (address[] _addresses, uint256[] _balances, uint256[] _limits) {\r\n        address[] memory wlist1 = new address[](_totalHolders);\r\n        uint256[] memory wlist2 = new uint256[](_totalHolders);\r\n        uint256[] memory wlist3 = new uint256[](_totalHolders);\r\n\r\n        for (uint256 j=0; j<_totalHolders; j++) {\r\n            //////if (whitelist[holders[j]] == 2) {\r\n                wlist1[j] = holders[j];\r\n                wlist2[j] = balances[holders[j]];\r\n                wlist3[j] = maxInvestLimitList[holders[j]];\r\n            //////}\r\n        }\r\n        return (wlist1,wlist2,wlist3);\r\n    }\r\n\r\n    function closeCrowdsale() public onlyOwner  {\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    function safeWithdrawal() public onlyOwner {\r\n        require(crowdsaleClosed);\r\n        require(!fundingGoalReached);\r\n\r\n        if (msg.sender.send(amountRaised)) {\r\n            fundingGoalReached = true;\r\n        } else {\r\n            fundingGoalReached = false;\r\n        }\r\n\r\n    }\r\n\r\n    // immediate withdrawal withou funding goal reached and without crowdsale close\r\n    function immediateWithdrawal() public onlyOwner {\r\n        if (msg.sender.send(amountRaised)) {\r\n            //fundingGoalReached = true;\r\n            amountRaised = 0;\r\n        } else {\r\n            //fundingGoalReached = false;\r\n        }\r\n    }\r\n\r\n    function burnTokens(uint token_amount) public onlyOwner {\r\n\r\n        require(!crowdsaleClosed);\r\n        balances[owner] = balances[owner].sub(token_amount);\r\n        _totalSupply = _totalSupply.sub(token_amount);\r\n        emit Transfer(owner, address(0), token_amount);\r\n    }\r\n\r\n    function mintTokens(uint token_amount) public onlyOwner {\r\n        require(!crowdsaleClosed);\r\n        _totalSupply = _totalSupply.add(token_amount);\r\n        balances[owner] = balances[owner].add(token_amount);\r\n        emit Transfer(address(0), owner, token_amount);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        require(!crowdsaleClosed);\r\n\r\n        // enable newOwner to whitelist\r\n        _addWalletToWhitelist(newOwner);\r\n\r\n        // puts unrealized tokens to new owner\r\n        uint token_amount = balances[owner];\r\n        balances[owner] = 0;\r\n        balances[newOwner] = balances[newOwner].add(token_amount);\r\n        emit Transfer(owner, newOwner, token_amount);\r\n\r\n        // change owner\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n    function setMaximumInvest(address _address, uint _amount) public onlyOwner returns (bool success) {\r\n        if (whitelist[_address] == 2) {\r\n            maxInvestLimitList[_address] = _amount;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function setMinimumInvest(uint _weiMinimumInvest) public onlyOwner {\r\n        minimumInvest = _weiMinimumInvest;\r\n    }\r\n\r\n    function setPriceRate(uint _weiCostOfEachToken) public onlyOwner {\r\n        priceRate = _weiCostOfEachToken;\r\n    }\r\n\r\n    function () payable onlyWhitelist public {\r\n\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        require(amount >= minimumInvest);\r\n        require(amount.div(priceRate) > 0);\r\n        require( maxInvestLimitList[msg.sender]>=amount || maxInvestLimitList[msg.sender] == 0 );\r\n\r\n        uint token_amount = (amount.div(priceRate))*10**18;\r\n\r\n        amountRaised = amountRaised.add(amount);\r\n\r\n        balances[owner] = balances[owner].sub(token_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(token_amount);\r\n        emit Transfer(owner, msg.sender, token_amount);\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiCostOfEachToken\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"immediateWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaximumInvest\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiMinimumInvest\",\"type\":\"uint256\"}],\"name\":\"setMinimumInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalancesAndMaxLimit\",\"outputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_total\",\"type\":\"uint256\"},{\"name\":\"_weiCostOfEachToken\",\"type\":\"uint256\"},{\"name\":\"_weiMinimumInvest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenTemplate","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"546573744a394120000000000000000000000000000000000000000000000000546573744a39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://508ed58b6f9f70d9302e4e860c4f48702022f9eb763d400cc5de2d4f198f08d9"}]}