{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\ncontract ETORoles {\r\n        using Roles for Roles.Role;\r\n\r\n        constructor() internal {\r\n                _addAuditWriter(msg.sender);\r\n                _addAssetSeizer(msg.sender);\r\n                _addKycProvider(msg.sender);\r\n                _addAssetFreezer(msg.sender);\r\n                _addUserManager(msg.sender);\r\n        }\r\n\r\n        /*\r\n         * Audit Writer functions\r\n         */\r\n        event AuditWriterAdded(address indexed account);\r\n        event AuditWriterRemoved(address indexed account);\r\n\r\n        Roles.Role private _auditWriters;\r\n\r\n        modifier onlyAuditWriter() {\r\n                require(isAuditWriter(msg.sender));\r\n                _;\r\n        }\r\n\r\n        function isAuditWriter(address account) public view returns (bool) {\r\n                return _auditWriters.has(account);\r\n        }\r\n\r\n        function addAuditWriter(address account) public onlyUserManager {\r\n                _addAuditWriter(account);\r\n        }\r\n\r\n        function renounceAuditWriter() public {\r\n                _removeAuditWriter(msg.sender);\r\n        }\r\n\r\n        function _addAuditWriter(address account) internal {\r\n                _auditWriters.add(account);\r\n                emit AuditWriterAdded(account);\r\n        }\r\n\r\n        function _removeAuditWriter(address account) internal {\r\n                _auditWriters.remove(account);\r\n                emit AuditWriterRemoved(account);\r\n        }\r\n\r\n        /*\r\n         * KYC Provider functions\r\n         */\r\n        event KycProviderAdded(address indexed account);\r\n        event KycProviderRemoved(address indexed account);\r\n\r\n        Roles.Role private _kycProviders;\r\n\r\n        modifier onlyKycProvider() {\r\n                require(isKycProvider(msg.sender));\r\n                _;\r\n        }\r\n\r\n        function isKycProvider(address account) public view returns (bool) {\r\n                return _kycProviders.has(account);\r\n        }\r\n\r\n        function addKycProvider(address account) public onlyUserManager {\r\n                _addKycProvider(account);\r\n        }\r\n\r\n        function renounceKycProvider() public {\r\n                _removeKycProvider(msg.sender);\r\n        }\r\n\r\n        function _addKycProvider(address account) internal {\r\n                _kycProviders.add(account);\r\n                emit KycProviderAdded(account);\r\n        }\r\n\r\n        function _removeKycProvider(address account) internal {\r\n                _kycProviders.remove(account);\r\n                emit KycProviderRemoved(account);\r\n        }\r\n\r\n        /*\r\n         * Asset Seizer functions\r\n         */\r\n        event AssetSeizerAdded(address indexed account);\r\n        event AssetSeizerRemoved(address indexed account);\r\n\r\n        Roles.Role private _assetSeizers;\r\n\r\n        modifier onlyAssetSeizer() {\r\n                require(isAssetSeizer(msg.sender));\r\n                _;\r\n        }\r\n\r\n        function isAssetSeizer(address account) public view returns (bool) {\r\n                return _assetSeizers.has(account);\r\n        }\r\n\r\n        function addAssetSeizer(address account) public onlyUserManager {\r\n                _addAssetSeizer(account);\r\n        }\r\n\r\n        function renounceAssetSeizer() public {\r\n                _removeAssetSeizer(msg.sender);\r\n        }\r\n\r\n        function _addAssetSeizer(address account) internal {\r\n                _assetSeizers.add(account);\r\n                emit AssetSeizerAdded(account);\r\n        }\r\n\r\n        function _removeAssetSeizer(address account) internal {\r\n                _assetSeizers.remove(account);\r\n                emit AssetSeizerRemoved(account);\r\n        }\r\n\r\n        /*\r\n         * Asset Freezer functions\r\n         */\r\n        event AssetFreezerAdded(address indexed account);\r\n        event AssetFreezerRemoved(address indexed account);\r\n\r\n        Roles.Role private _assetFreezers;\r\n\r\n        modifier onlyAssetFreezer() {\r\n                require(isAssetFreezer(msg.sender));\r\n                _;\r\n        }\r\n\r\n        function isAssetFreezer(address account) public view returns (bool) {\r\n                return _assetFreezers.has(account);\r\n        }\r\n\r\n        function addAssetFreezer(address account) public onlyUserManager {\r\n                _addAssetFreezer(account);\r\n        }\r\n\r\n        function renounceAssetFreezer() public {\r\n                _removeAssetFreezer(msg.sender);\r\n        }\r\n\r\n        function _addAssetFreezer(address account) internal {\r\n                _assetFreezers.add(account);\r\n                emit AssetFreezerAdded(account);\r\n        }\r\n\r\n        function _removeAssetFreezer(address account) internal {\r\n                _assetFreezers.remove(account);\r\n                emit AssetFreezerRemoved(account);\r\n        }\r\n\r\n        /*\r\n         * User Manager functions\r\n         */\r\n        event UserManagerAdded(address indexed account);\r\n        event UserManagerRemoved(address indexed account);\r\n\r\n        Roles.Role private _userManagers;\r\n\r\n        modifier onlyUserManager() {\r\n                require(isUserManager(msg.sender));\r\n                _;\r\n        }\r\n\r\n        function isUserManager(address account) public view returns (bool) {\r\n                return _userManagers.has(account);\r\n        }\r\n\r\n        function addUserManager(address account) public onlyUserManager {\r\n                _addUserManager(account);\r\n        }\r\n\r\n        function renounceUserManager() public {\r\n                _removeUserManager(msg.sender);\r\n        }\r\n\r\n        function _addUserManager(address account) internal {\r\n                _userManagers.add(account);\r\n                emit UserManagerAdded(account);\r\n        }\r\n\r\n        function _removeUserManager(address account) internal {\r\n                _userManagers.remove(account);\r\n                emit UserManagerRemoved(account);\r\n        }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ETOVotes {\r\n        event VoteOpen(uint256 _id, uint _deadline);\r\n        event VoteFinished(uint256 _id, bool _result);\r\n\r\n        // How many blocks should we wait before the vote can be closed\r\n        uint private VOTE_LENGTH;\r\n        mapping (uint256 => Vote) private votes;\r\n\r\n        struct Voter {\r\n                address id;\r\n                bool vote;\r\n        }\r\n\r\n        struct Vote {\r\n                uint256 deadline;\r\n                Voter[] voters;\r\n                mapping(address =>uint) votersIndex;\r\n        }\r\n\r\n        constructor() public {\r\n\r\n        }\r\n\r\n        function vote(uint256 _id, bool _vote) public {\r\n                // check only new voters\r\n                require (votes[_id].votersIndex[msg.sender] == 0, \"Address already voted\");\r\n                require (votes[_id].deadline > 0, \"Dispute not available\");\r\n                votes[_id].voters.push(Voter(msg.sender, _vote));\r\n                votes[_id].votersIndex[msg.sender] = votes[_id].voters.length;\r\n        }\r\n\r\n        function openDispute(uint256 _id) external {\r\n                require(votes[_id].deadline == 0, \"Dispute already ongoing\");\r\n                votes[_id].deadline = now + VOTE_LENGTH;\r\n                emit VoteOpen(_id, votes[_id].deadline);\r\n                vote(_id, true);\r\n        }\r\n\r\n        /**\r\n        * @dev Once the deadline is reached this function should be called to get decision.\r\n        * @param _id data source id.\r\n        */\r\n        function triggerDecision(uint256 _id) external {\r\n                // Maybe we can get rid of a require\r\n                require(votes[_id].deadline > 0, \"Dispute not available\");\r\n                require(now > votes[_id].deadline, \"Dispute deadline not reached\");\r\n                // prevent method to be called again before its done\r\n                votes[_id].deadline = 0;\r\n                uint256 negativeVotes = 0;\r\n                uint256 positiveVotes = 0;\r\n                uint totalVoters = votes[_id].voters.length;\r\n                for (uint i = 0; i < totalVoters; i++){\r\n                        if (votes[_id].voters[i].vote)\r\n                                negativeVotes++;\r\n                        else\r\n                                positiveVotes++;\r\n                }\r\n                bool result = (positiveVotes > negativeVotes);\r\n                delete votes[_id];\r\n                emit VoteFinished(_id, result);\r\n        }\r\n\r\n        /**\r\n        * @dev get dispute status.\r\n        * @param _id data source id.\r\n        */\r\n        function isDisputeOpen(uint256 _id) external view returns (bool) {\r\n                return (votes[_id].deadline > 0);\r\n        }\r\n\r\n        /**\r\n        * @dev check if address voted already.\r\n        * @param _id data source identifier.\r\n        */\r\n        function didCastVote(uint256 _id) external view returns (bool){\r\n                return (votes[_id].votersIndex[msg.sender]>0);\r\n        }\r\n}\r\n\r\ncontract ETOToken is ERC20Mintable, ETORoles, ETOVotes {\r\n        address owner;\r\n    \r\n        enum AssetStatuses {ACTIVE, FROZEN, ISSUED, LISTED, INESCROW}\r\n        enum CompanyStatuses {ININCORPORATION, ACTIVE, INLIQUIDATION}\r\n        struct TokenCapabilities {\r\n                bool Voting;\r\n                bool Dividend;\r\n                string[] CorporateActions;\r\n        }\r\n\r\n        /* ETO investors */\r\n        mapping(address => bool) investorWhitelist;\r\n        address[] investorWhitelistLUT;\r\n\r\n        /* ETO contract parameters */\r\n        string public constant tokenName = \"ETOToken\";\r\n        string public constant symbol = \"ETO\";\r\n        uint8 public constant decimals = 0;\r\n\r\n        /* Listing parameters */\r\n        string public ISIN;\r\n        string public ITIN;\r\n        string public ValorNumber;\r\n        AssetStatuses public AssetStatus;\r\n        //ufixed public LiquidationProceeds;\r\n        string public TaxDomicile;\r\n        TokenCapabilities public Capabilities;\r\n        //ufixed public VotePercentage;\r\n        //ufixed public IssuancePrice;\r\n        string[] public Currencies;\r\n        uint256 public SalesStart;\r\n        uint256 public SalesEnd;\r\n        uint256 public TradeStart;\r\n        uint256 public IssuanceStart;\r\n        uint256 public IssuePaymentDate;\r\n        uint256 public InitialFixingDate;\r\n        string public MarketMaker;\r\n        string public MainPayingAgent;\r\n        //ufixed public SmallestTradableDenomination;\r\n        uint256 public TickSize;\r\n        uint256 public NextDividendDate;\r\n        string public DividendType;\r\n        //ufixed public DividendTax;\r\n        //ufixed public PercentageDividend;\r\n        string public CompanyName;\r\n        CompanyStatuses public CompanyStatus;\r\n        string public CompanyLegalForm;\r\n\r\n        /* Tag- and Drag along parameters */\r\n        uint256 tagAlongLowerBound;\r\n        uint256 dragAlongUpperBound;\r\n        uint256 tagAlongPeriod;\r\n        uint256 dragAlongPeriod;\r\n\r\n        /* Audit logging */\r\n        mapping(uint256 => uint256) auditHashes;\r\n\r\n        /* Open transfer requests: receiver => (timestamp, amount) */\r\n        struct TransferRequest {\r\n                uint256 amount;\r\n                uint256 timestamp;\r\n        }\r\n\r\n        struct TagAlongEntry {\r\n                address from;\r\n                uint256 amount;\r\n        }\r\n        mapping(address => TransferRequest) transferRequests;\r\n        mapping(address => TagAlongEntry[]) tagAlongRegister;\r\n\r\n        /* Events in the ETO contract */\r\n        // Transaction related events\r\n        event AssetsSeized(address seizee, uint256 amount);\r\n        event AssetsUnseized(address seizee, uint256 amount);\r\n        event InvestorWhitelisted(address investor);\r\n        event InvestorBlacklisted(address investor);\r\n        event TagAlongOpportunity(address receiver, uint256 amount);\r\n        event DividendPayout(address receiver, uint256 amount);\r\n        event TokensGenerated(uint256 amount);\r\n\r\n        /**\r\n        * @dev Constructor that defines contract parameters\r\n        */\r\n        constructor() public {\r\n                AssetStatus = AssetStatuses.ACTIVE;\r\n                TaxDomicile = \"CH\";\r\n                Capabilities.Voting = true;\r\n                Capabilities.Dividend = true;\r\n                CompanyName = \"BlockState\";\r\n                CompanyStatus = CompanyStatuses.ACTIVE;\r\n                CompanyLegalForm = \"AG\";\r\n                \r\n                owner = msg.sender;\r\n        }\r\n        \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        /* Variable update events */\r\n        event ISINUpdated(string newValue);\r\n        event ITINUpdated(string newValue);\r\n        event ValorNumberUpdated(string newValue);\r\n        event AssetStatusUpdated(AssetStatuses newValue);\r\n        //event LiquidationProceedsUpdated(ufixed newValue);\r\n        event CurrenciesUpdated(string[]  newValue);\r\n        event TaxDomicileUpdated(string newValue);\r\n        event CapabilitiesUpdated(TokenCapabilities newValue);\r\n        //event VotePercentageUpdated(ufixed newValue);\r\n        //event IssuancePriceUpdated(ufixed newValue);\r\n        event SalesStartUpdated(uint256 newValue);\r\n        event SalesEndUpdated(uint256 newValue);\r\n        event TradeStartUpdated(uint256 newValue);\r\n        event IssuanceStartUpdated(uint256 newValue);\r\n        event IssuePaymentDateUpdated(uint256 newValue);\r\n        event InitialFixingDateUpdated(uint256 newValue);\r\n        event MarketMakerUpdated(string newValue);\r\n        event MainPayingAgentUpdated(string newValue);\r\n        //event SmallestTradableDenominationUpdated(ufixed newValue);\r\n        event TickSizeUpdated(uint256 newValue);\r\n        event NextDividendDateUpdated(uint256 newValue);\r\n        event DividendTypeUpdated(string newValue);\r\n        //event DividendTaxUpdated(ufixed newValue);\r\n        //event PercentageDividendUpdated(ufixed newValue);\r\n        event CompanyNameUpdated(string newValue);\r\n        event CompanyStatusUpdated(CompanyStatuses newValue);\r\n        event CompanyLegalFormUpdated(string newValue);\r\n\r\n        /* Variable Update Functions */\r\n        function setISIN(string memory newValue) public onlyOwner {\r\n                ISIN = newValue;\r\n                emit ISINUpdated(newValue);\r\n        }\r\n        function setITIN(string memory newValue) public onlyOwner {\r\n                ITIN = newValue;\r\n                emit ITINUpdated(newValue);\r\n        }\r\n        function setValorNumber(string memory newValue) public onlyOwner {\r\n                ValorNumber = newValue;\r\n                emit ValorNumberUpdated(newValue);\r\n        }\r\n        function setAssetStatus(AssetStatuses newValue) public onlyOwner {\r\n                AssetStatus = newValue;\r\n                emit AssetStatusUpdated(newValue);\r\n        }\r\n        /*function setLiquidationProceeds(ufixed newValue) public onlyOwner {\r\n                LiquidationProceeds = newValue;\r\n                emit LiquidationProceedsUpdated(newValue);\r\n        }*/\r\n        function setTaxDomicile(string memory newValue) public onlyOwner {\r\n                TaxDomicile= newValue;\r\n                emit TaxDomicileUpdated(newValue);\r\n        }\r\n        function setCapabilities(TokenCapabilities memory newValue) public onlyOwner {\r\n                Capabilities = newValue;\r\n                emit CapabilitiesUpdated(newValue);\r\n        }\r\n        /*function setVotePercentage(ufixed newValue) public onlyOwner {\r\n                VotePercentage = newValue;\r\n                emit VotePercentageUpdated(newValue);\r\n        }\r\n        function setIssuancePrice(ufixed newValue) public onlyOwner {\r\n                IssuancePrice = newValue;\r\n                emit IssuancePriceUpdated(newValue);\r\n        }*/\r\n        function setCurrencies(string[] memory newValue) public onlyOwner {\r\n                Currencies = newValue;\r\n                emit CurrenciesUpdated(newValue);\r\n        }\r\n        function setSalesStart(uint256 newValue) public onlyOwner {\r\n                SalesStart = newValue;\r\n                emit SalesStartUpdated(newValue);\r\n        }\r\n        function setSalesEnd(uint256 newValue) public onlyOwner {\r\n                SalesEnd = newValue;\r\n                emit SalesEndUpdated(newValue);\r\n        }\r\n        function setTradeStart(uint256 newValue) public onlyOwner {\r\n                TradeStart = newValue;\r\n                emit TradeStartUpdated(newValue);\r\n        }\r\n        function setIssuanceStart(uint256 newValue) public onlyOwner {\r\n                IssuanceStart = newValue;\r\n                emit IssuanceStartUpdated(newValue);\r\n        }\r\n        function setIssuePaymentDate(uint256 newValue) public onlyOwner {\r\n                IssuePaymentDate = newValue;\r\n                emit IssuePaymentDateUpdated(newValue);\r\n        }\r\n        function setInitialFixingDate(uint256 newValue) public onlyOwner {\r\n                InitialFixingDate = newValue;\r\n                emit InitialFixingDateUpdated(newValue);\r\n        }\r\n        function setMarketMaker(string memory newValue) public onlyOwner {\r\n                MarketMaker = newValue;\r\n                emit MarketMakerUpdated(newValue);\r\n        }\r\n        function setMainPayingAgent(string memory newValue) public onlyOwner {\r\n                MainPayingAgent = newValue;\r\n                emit MainPayingAgentUpdated(newValue);\r\n        }\r\n        /*function setSmallestTradableDenomination(ufixed newValue) public onlyOwner {\r\n                SmallestTradableDenomination = newValue;\r\n                emit SmallestTradableDenominationUpdated(newValue);\r\n        }*/\r\n        function setTickSize(uint256 newValue) public onlyOwner {\r\n                TickSize = newValue;\r\n                emit TickSizeUpdated(newValue);\r\n        }\r\n        function setNextDividendDate(uint256 newValue) public onlyOwner {\r\n                NextDividendDate = newValue;\r\n                emit NextDividendDateUpdated(newValue);\r\n        }\r\n        function setDividendType(string memory newValue) public onlyOwner {\r\n                DividendType = newValue;\r\n                emit DividendTypeUpdated(newValue);\r\n        }\r\n        /*function setDividendTax(ufixed newValue) public onlyOwner {\r\n                DividendTax = newValue;\r\n                emit DividendTaxUpdated(newValue);\r\n        }\r\n        function setPercentageDividend(ufixed newValue) public onlyOwner {\r\n                PercentageDividend = newValue;\r\n                emit PercentageDividendUpdated(newValue);\r\n        }*/\r\n        function setCompanyName(string memory newValue) public onlyOwner {\r\n                CompanyName = newValue;\r\n                emit CompanyNameUpdated(newValue);\r\n        }\r\n        function setCompanyStatus(CompanyStatuses newValue) public onlyOwner {\r\n                CompanyStatus = newValue;\r\n                emit CompanyStatusUpdated(newValue);\r\n        }\r\n        function setCompanyLegalForm(string memory newValue) public onlyOwner {\r\n                CompanyLegalForm = newValue;\r\n                emit CompanyLegalFormUpdated(newValue);\r\n        }\r\n\r\n        /* Seize assets */\r\n        function seizeAssets(address seizee, uint256 seizableAmount) public onlyAssetSeizer {\r\n                require(balanceOf(seizee) >= seizableAmount);\r\n                transferFrom(seizee, msg.sender, seizableAmount);\r\n                emit AssetsSeized(seizee, seizableAmount);\r\n        }\r\n\r\n        /* Release seized assets */\r\n        function releaseAssets(address seizee, uint256 seizedAmount) public onlyAssetSeizer {\r\n                require(balanceOf(msg.sender) >= seizedAmount);\r\n                transferFrom(msg.sender, seizee, seizedAmount);\r\n                emit AssetsUnseized(seizee, seizedAmount);\r\n        }\r\n\r\n        /* Add investor to the whitelist */\r\n        function whitelistInvestor(address investor) public onlyKycProvider {\r\n                investorWhitelist[investor] = true;\r\n                investorWhitelistLUT.push(investor);\r\n                emit InvestorWhitelisted(investor);\r\n        }\r\n\r\n        /* Remove investor from the whitelist */\r\n        function blacklistInvestor(address investor) public onlyKycProvider {\r\n                investorWhitelist[investor] = false;\r\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\r\n                        if (investorWhitelistLUT[i] == investor) {\r\n                                investorWhitelistLUT[i] = investorWhitelistLUT[investorWhitelistLUT.length];\r\n                                delete investorWhitelistLUT[investorWhitelistLUT.length];\r\n                                break;\r\n                        }\r\n                }\r\n                emit InvestorBlacklisted(investor);\r\n        }\r\n\r\n        /* Overwrite transfer() to respect the whitelist, tag- and drag along rules */\r\n        function transfer(address _to, uint256 _value) public returns (bool) {\r\n                require(investorWhitelist[_to] == true);\r\n                return super.transfer(_to, _value);\r\n        }\r\n\r\n        /* Notify other investors of an opportunity to tag along. TODO: implement */\r\n        \r\n\r\n        /* Generate tokens */\r\n        function generateTokens(uint256 amount, address assetReceiver) public onlyOwner {\r\n                _mint(assetReceiver, amount);\r\n        }\r\n\r\n        function initiateDividendPayments(uint amount) public returns (bool) {\r\n                uint dividendPerToken = amount / totalSupply();\r\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\r\n                        address currentInvestor = investorWhitelistLUT[i];\r\n                        uint256 currentInvestorShares = balanceOf(currentInvestor);\r\n                        uint256 currentInvestorPayout = dividendPerToken * currentInvestorShares;\r\n                        emit DividendPayout(currentInvestor, currentInvestorPayout);\r\n                }\r\n        }\r\n\r\n        function addAuditHash(uint256 hash) public onlyAuditWriter {\r\n                auditHashes[now] = hash;\r\n        }\r\n\r\n        function getAuditHash(uint256 timestamp) public view returns (uint256) {\r\n                return auditHashes[timestamp];\r\n        }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTradeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MarketMaker\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAssetSeizer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAssetSeizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInitialFixingDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAuditHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setValorNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ITIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CompanyName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Capabilities\",\"outputs\":[{\"name\":\"Voting\",\"type\":\"bool\"},{\"name\":\"Dividend\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainPayingAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"Voting\",\"type\":\"bool\"},{\"name\":\"Dividend\",\"type\":\"bool\"},{\"name\":\"CorporateActions\",\"type\":\"string[]\"}],\"name\":\"newValue\",\"type\":\"tuple\"}],\"name\":\"setCapabilities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAssetSeizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setITIN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setMainPayingAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Currencies\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKycProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"setCompanyStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextDividendDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAssetFreezer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IssuanceStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CompanyLegalForm\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TradeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InitialFixingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"assetReceiver\",\"type\":\"address\"}],\"name\":\"generateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AssetStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setIssuePaymentDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setCompanyLegalForm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SalesEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"addAuditHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seizee\",\"type\":\"address\"},{\"name\":\"seizedAmount\",\"type\":\"uint256\"}],\"name\":\"releaseAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setDividendType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceKycProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"didCastVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAuditWriter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuditWriter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKycProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTickSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IssuePaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSalesStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setISIN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"whitelistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TickSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setNextDividendDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DividendType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SalesStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuditWriter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAssetFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initiateDividendPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ValorNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTaxDomicile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setMarketMaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"setAssetStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seizee\",\"type\":\"address\"},{\"name\":\"seizableAmount\",\"type\":\"uint256\"}],\"name\":\"seizeAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setCompanyName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAssetFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string[]\"}],\"name\":\"setCurrencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isDisputeOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"triggerDecision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSalesEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CompanyStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TaxDomicile\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setIssuanceStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"blacklistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seizee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetsSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seizee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetsUnseized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TagAlongOpportunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ISINUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ITINUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ValorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"AssetStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string[]\"}],\"name\":\"CurrenciesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"TaxDomicileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"name\":\"Voting\",\"type\":\"bool\"},{\"name\":\"Dividend\",\"type\":\"bool\"},{\"name\":\"CorporateActions\",\"type\":\"string[]\"}],\"indexed\":false,\"name\":\"newValue\",\"type\":\"tuple\"}],\"name\":\"CapabilitiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SalesStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SalesEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TradeStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"IssuanceStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"IssuePaymentDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"InitialFixingDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"MarketMakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"MainPayingAgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TickSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NextDividendDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"DividendTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"CompanyNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"CompanyStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"CompanyLegalFormUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"VoteOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"}],\"name\":\"VoteFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuditWriterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuditWriterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KycProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KycProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetSeizerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetSeizerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetFreezerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetFreezerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ETOToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://200fd4d102588e927b5e7308113fca264aeda185cdd5893ad3314c865413cb54"}]}