{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance, \r\n    // or when resetting it to zero. To increase and decrease it, use \r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: contracts/access/RBACManager.sol\r\n\r\ncontract RBACManager is Ownable {\r\n  using Roles for Roles.Role;\r\n\r\n  event ManagerAdded(address indexed account);\r\n  event ManagerRemoved(address indexed account);\r\n\r\n  Roles.Role private managers;\r\n\r\n  modifier onlyOwnerOrManager() {\r\n    require(\r\n      msg.sender == owner() || isManager(msg.sender),\r\n      \"unauthorized\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    addManager(msg.sender);\r\n  }\r\n\r\n  function isManager(address account) public view returns (bool) {\r\n    return managers.has(account);\r\n  }\r\n\r\n  function addManager(address account) public onlyOwner {\r\n    managers.add(account);\r\n    emit ManagerAdded(account);\r\n  }\r\n\r\n  function removeManager(address account) public onlyOwner {\r\n    managers.remove(account);\r\n    emit ManagerRemoved(account);\r\n  }\r\n}\r\n\r\n// File: contracts/CharityProject.sol\r\n\r\ncontract CharityProject is RBACManager {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  modifier canWithdraw() {\r\n    require(\r\n      _canWithdrawBeforeEnd || _closingTime == 0 || block.timestamp > _closingTime, // solium-disable-line security/no-block-members\r\n      \"can't withdraw\");\r\n    _;\r\n  }\r\n\r\n  uint256 private _feeInMillis;\r\n  uint256 private _withdrawnTokens;\r\n  uint256 private _withdrawnFees;\r\n  uint256 private _maxGoal;\r\n  uint256 private _openingTime;\r\n  uint256 private _closingTime;\r\n  address private _wallet;\r\n  IERC20 private _token;\r\n  bool private _canWithdrawBeforeEnd;\r\n\r\n  constructor (\r\n    uint256 feeInMillis,\r\n    uint256 maxGoal,\r\n    uint256 openingTime,\r\n    uint256 closingTime,\r\n    address wallet,\r\n    IERC20 token,\r\n    bool canWithdrawBeforeEnd,\r\n    address additionalManager\r\n  ) public {\r\n    require(wallet != address(0), \"wallet can't be zero\");\r\n    require(token != address(0), \"token can't be zero\");\r\n    require(\r\n      closingTime == 0 || closingTime >= openingTime,\r\n      \"wrong value for closingTime\"\r\n    );\r\n\r\n    _feeInMillis = feeInMillis;\r\n    _maxGoal = maxGoal;\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n    _wallet = wallet;\r\n    _token = token;\r\n    _canWithdrawBeforeEnd = canWithdrawBeforeEnd;\r\n\r\n    if (_wallet != owner()) {\r\n      addManager(_wallet);\r\n    }\r\n\r\n    // solium-disable-next-line max-len\r\n    if (additionalManager != address(0) && additionalManager != owner() && additionalManager != _wallet) {\r\n      addManager(additionalManager);\r\n    }\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // GETTERS\r\n  // -----------------------------------------\r\n\r\n  function feeInMillis() public view returns(uint256) {\r\n    return _feeInMillis;\r\n  }\r\n\r\n  function withdrawnTokens() public view returns(uint256) {\r\n    return _withdrawnTokens;\r\n  }\r\n\r\n  function withdrawnFees() public view returns(uint256) {\r\n    return _withdrawnFees;\r\n  }\r\n\r\n  function maxGoal() public view returns(uint256) {\r\n    return _maxGoal;\r\n  }\r\n\r\n  function openingTime() public view returns(uint256) {\r\n    return _openingTime;\r\n  }\r\n\r\n  function closingTime() public view returns(uint256) {\r\n    return _closingTime;\r\n  }\r\n\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  function canWithdrawBeforeEnd() public view returns(bool) {\r\n    return _canWithdrawBeforeEnd;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // SETTERS\r\n  // -----------------------------------------\r\n\r\n  function setMaxGoal(uint256 newMaxGoal) public onlyOwner {\r\n    _maxGoal = newMaxGoal;\r\n  }\r\n\r\n  function setTimes(\r\n    uint256 newOpeningTime,\r\n    uint256 newClosingTime\r\n  )\r\n  public\r\n  onlyOwner\r\n  {\r\n    require(\r\n      newClosingTime == 0 || newClosingTime >= newOpeningTime,\r\n      \"wrong value for closingTime\"\r\n    );\r\n\r\n    _openingTime = newOpeningTime;\r\n    _closingTime = newClosingTime;\r\n  }\r\n\r\n  function setCanWithdrawBeforeEnd(\r\n    bool newCanWithdrawBeforeEnd\r\n  )\r\n  public\r\n  onlyOwner\r\n  {\r\n    _canWithdrawBeforeEnd = newCanWithdrawBeforeEnd;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // CHECKS\r\n  // -----------------------------------------\r\n\r\n  function totalRaised() public view returns (uint256) {\r\n    uint256 raised = _token.balanceOf(this);\r\n    return raised.add(_withdrawnTokens).add(_withdrawnFees);\r\n  }\r\n\r\n  function totalFee() public view returns (uint256) {\r\n    return totalRaised().mul(_feeInMillis).div(1000);\r\n  }\r\n\r\n  function hasStarted() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return _openingTime == 0 ? true : block.timestamp > _openingTime;\r\n  }\r\n\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return _closingTime == 0 ? false : block.timestamp > _closingTime;\r\n  }\r\n\r\n  function maxGoalReached() public view returns (bool) {\r\n    return totalRaised() >= _maxGoal;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // ACTIONS\r\n  // -----------------------------------------\r\n\r\n  function withdrawTokens(\r\n    address to,\r\n    uint256 value\r\n  )\r\n  public\r\n  onlyOwnerOrManager\r\n  canWithdraw\r\n  {\r\n    uint256 expectedTotalWithdraw = _withdrawnTokens.add(value);\r\n    require(\r\n      expectedTotalWithdraw <= totalRaised().sub(totalFee()),\r\n      \"can't withdraw more than available token\"\r\n    );\r\n    _withdrawnTokens = expectedTotalWithdraw;\r\n    _token.safeTransfer(to, value);\r\n  }\r\n\r\n  function withdrawFees(\r\n    address to,\r\n    uint256 value\r\n  )\r\n  public\r\n  onlyOwner\r\n  canWithdraw\r\n  {\r\n    uint256 expectedTotalWithdraw = _withdrawnFees.add(value);\r\n    require(\r\n      expectedTotalWithdraw <= totalFee(),\r\n      \"can't withdraw more than available fee\"\r\n    );\r\n    _withdrawnFees = expectedTotalWithdraw;\r\n    _token.safeTransfer(to, value);\r\n  }\r\n\r\n  function recoverERC20(\r\n    address tokenAddress,\r\n    address receiverAddress,\r\n    uint256 amount\r\n  )\r\n  public\r\n  onlyOwnerOrManager\r\n  {\r\n    require(\r\n      tokenAddress != address(_token),\r\n      \"to transfer project's funds use withdrawTokens\"\r\n    );\r\n    IERC20(tokenAddress).safeTransfer(receiverAddress, amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newCanWithdrawBeforeEnd\",\"type\":\"bool\"}],\"name\":\"setCanWithdrawBeforeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdrawBeforeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"receiverAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOpeningTime\",\"type\":\"uint256\"},{\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInMillis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxGoal\",\"type\":\"uint256\"}],\"name\":\"setMaxGoal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeInMillis\",\"type\":\"uint256\"},{\"name\":\"maxGoal\",\"type\":\"uint256\"},{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"canWithdrawBeforeEnd\",\"type\":\"bool\"},{\"name\":\"additionalManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CharityProject","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000005cb66c80000000000000000000000000000000000000000000000000000000005cddf980000000000000000000000000ca5801713f82b8b76335050ac53d64beeda9eca000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f0dbdf8908d0f3a78d1c98c3feda4b08fcbfee35","Library":"","SwarmSource":"bzzr://5ab9731d14dc607a5bb970f8e4c0cfb4c3a8a60f1a397d0fd828802d15e2ad1c"}]}