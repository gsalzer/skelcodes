{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.4 <0.6.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\n\r\ncontract TheAO {\r\n\taddress public theAO;\r\n\taddress public nameTAOPositionAddress;\r\n\r\n\t// Check whether an address is whitelisted and granted access to transact\r\n\t// on behalf of others\r\n\tmapping (address => bool) public whitelist;\r\n\r\n\tconstructor() public {\r\n\t\ttheAO = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if msg.sender is in whitelist.\r\n\t */\r\n\tmodifier inWhitelist() {\r\n\t\trequire (whitelist[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t * @dev Multiplies two numbers, throws on overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Integer division of two numbers, truncating the quotient.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two numbers, throws on overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\ninterface INameTAOPosition {\r\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\r\n\tfunction getAdvocate(address _id) external view returns (address);\r\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\r\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\r\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\r\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != address(0));\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\ninterface INameAccountRecovery {\r\n\tfunction isCompromised(address _id) external view returns (bool);\r\n}\r\n\r\n\r\ninterface INameFactory {\r\n\tfunction nonces(address _nameId) external view returns (uint256);\r\n\tfunction incrementNonce(address _nameId) external returns (uint256);\r\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\r\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\r\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\r\n}\r\n\r\n\r\ninterface ITAOPool {\r\n\tfunction createPool(address _taoId, bool _ethosCapStatus, uint256 _ethosCapAmount) external returns (bool);\r\n}\r\n\r\n\r\ninterface IAOSetting {\r\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\r\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\r\n\r\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\r\n}\r\n\r\n\r\ninterface ITAOAncestry {\r\n\tfunction initialize(address _id, address _parentId, uint256 _childMinLogos) external returns (bool);\r\n\r\n\tfunction getAncestryById(address _id) external view returns (address, uint256, uint256);\r\n\r\n\tfunction addChild(address _taoId, address _childId) external returns (bool);\r\n\r\n\tfunction isChild(address _taoId, address _childId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface INameTAOLookup {\r\n\tfunction isExist(string calldata _name) external view returns (bool);\r\n\r\n\tfunction initialize(string calldata _name, address _nameTAOId, uint256 _typeId, string calldata _parentName, address _parentId, uint256 _parentTypeId) external returns (bool);\r\n\r\n\tfunction getById(address _id) external view returns (string memory, address, uint256, string memory, address, uint256);\r\n\r\n\tfunction getIdByName(string calldata _name) external view returns (address);\r\n}\r\n\r\n\r\ninterface ITAOFactory {\r\n\tfunction nonces(address _taoId) external view returns (uint256);\r\n\tfunction incrementNonce(address _taoId) external returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TAO\r\n */\r\ncontract TAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public vaultAddress;\r\n\tstring public name;\t\t\t\t// the name for this TAO\r\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\r\n\r\n\t// TAO's data\r\n\tstring public datHash;\r\n\tstring public database;\r\n\tstring public keyValue;\r\n\tbytes32 public contentId;\r\n\r\n\t/**\r\n\t * 0 = TAO\r\n\t * 1 = Name\r\n\t */\r\n\tuint8 public typeId;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _vaultAddress\r\n\t) public {\r\n\t\tname = _name;\r\n\t\toriginId = _originId;\r\n\t\tdatHash = _datHash;\r\n\t\tdatabase = _database;\r\n\t\tkeyValue = _keyValue;\r\n\t\tcontentId = _contentId;\r\n\r\n\t\t// Creating TAO\r\n\t\ttypeId = 0;\r\n\r\n\t\tvaultAddress = _vaultAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if calling address is Vault contract\r\n\t */\r\n\tmodifier onlyVault {\r\n\t\trequire (msg.sender == vaultAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Will receive any ETH sent\r\n\t */\r\n\tfunction () external payable {\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\t_recipient.transfer(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\r\n\t * @param _erc20TokenAddress The address of ERC20 Token\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\r\n\t\t_erc20.transfer(_recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Name\r\n */\r\ncontract Name is TAO {\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\r\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\r\n\t\t// Creating Name\r\n\t\ttypeId = 1;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AOLibrary\r\n */\r\nlibrary AOLibrary {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\r\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given TAO ID is a TAO\r\n\t * @param _taoId The ID of the TAO\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isTAO(address _taoId) public view returns (bool) {\r\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given Name ID is a Name\r\n\t * @param _nameId The ID of the Name\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isName(address _nameId) public view returns (bool) {\r\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\r\n\t * @param _tokenAddress The ERC20 Token address to check\r\n\t */\r\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\r\n\t\tif (_tokenAddress == address(0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\r\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t * @param _sender The address to check\r\n\t * @param _theAO The AO address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t * @return true if yes, false otherwise\r\n\t */\r\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\r\n\t\treturn (_sender == _theAO ||\r\n\t\t\t(\r\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\r\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\r\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate percentage.\r\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\r\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\r\n\t */\r\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _PERCENTAGE_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate multiplier.\r\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\r\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\r\n\t */\r\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _MULTIPLIER_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _originId The Name ID the creates the TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployTAO(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (TAO _tao) {\r\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a Name\r\n\t * @param _name The name of the Name\r\n\t * @param _originId The eth address the creates the Name\r\n\t * @param _datHash The datHash of this Name\r\n\t * @param _database The database for this Name\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this Name\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployName(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (Name _myName) {\r\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\r\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\r\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\r\n\t * @return the new primordial weighted multiplier\r\n\t */\r\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\r\n\t\tif (_currentWeightedMultiplier > 0) {\r\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\r\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\r\n\t\t\treturn _totalWeightedIons.div(_totalIons);\r\n\t\t} else {\r\n\t\t\treturn _additionalWeightedMultiplier;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the primordial ion multiplier on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Multiplier = S\r\n\t *\t\tEnding Multiplier = E\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\r\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\r\n\t * @return The multiplier in (10 ** 6)\r\n\t */\r\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\r\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\r\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\r\n\t\t\t/**\r\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\r\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\r\n\t\t\t */\r\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus percentage of network ion on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Network Bonus Multiplier = Bs\r\n\t *\t\tEnding Network Bonus Multiplier = Be\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\r\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\r\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\r\n\t\t\t */\r\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\r\n\t\t\treturn bonusPercentage;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus amount of network ion on a given lot\r\n\t *\t\tAO Bonus Amount = B% x P\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\r\n\t\t/**\r\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\r\n\t\t * when calculating the network ion bonus amount\r\n\t\t */\r\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\r\n\t\treturn networkBonus;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the maximum amount of Primordial an account can burn\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_maximumMultiplier = S\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\tB = ((S x P) - (P x M)) / S\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _maximumMultiplier The maximum multiplier of this account\r\n\t * @return The maximum burn amount\r\n\t */\r\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\r\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after burning primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P - B)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToBurn The amount of primordial ion to burn\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToConvert = C\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P + C)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToConvert The amount of network ion to convert\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev count num of digits\r\n\t * @param number uint256 of the nuumber to be checked\r\n\t * @return uint8 num of digits\r\n\t */\r\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\r\n\t\tuint8 digits = 0;\r\n\t\twhile(number != 0) {\r\n\t\t\tnumber = number.div(10);\r\n\t\t\tdigits++;\r\n\t\t}\r\n\t\treturn digits;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TAOController\r\n */\r\ncontract TAOController is TheAO {\r\n\taddress public nameFactoryAddress;\r\n\taddress public nameAccountRecoveryAddress;\r\n\r\n\tINameFactory internal _nameFactory;\r\n\tINameTAOPosition internal _nameTAOPosition;\r\n\tINameAccountRecovery internal _nameAccountRecovery;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor(address _nameFactoryAddress) public {\r\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t */\r\n\tmodifier onlyTheAO {\r\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_taoId` is a TAO\r\n\t */\r\n\tmodifier isTAO(address _taoId) {\r\n\t\trequire (AOLibrary.isTAO(_taoId));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_nameId` is a Name\r\n\t */\r\n\tmodifier isName(address _nameId) {\r\n\t\trequire (AOLibrary.isName(_nameId));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_id` is a Name or a TAO\r\n\t */\r\n\tmodifier isNameOrTAO(address _id) {\r\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check is msg.sender address is a Name\r\n\t */\r\n\t modifier senderIsName() {\r\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\r\n\t\t_;\r\n\t }\r\n\r\n\t/**\r\n\t * @dev Check if msg.sender is the current advocate of TAO ID\r\n\t */\r\n\tmodifier onlyAdvocate(address _id) {\r\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Only allowed if sender's Name is not compromised\r\n\t */\r\n\tmodifier senderNameNotCompromised() {\r\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameFactory address\r\n\t * @param _nameFactoryAddress The address of NameFactory\r\n\t */\r\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\r\n\t\trequire (_nameFactoryAddress != address(0));\r\n\t\tnameFactoryAddress = _nameFactoryAddress;\r\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameTAOPosition address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameAccountRecovery Address\r\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\r\n\t */\r\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\r\n\t\trequire (_nameAccountRecoveryAddress != address(0));\r\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\r\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TAOCurrency\r\n */\r\ncontract TAOCurrency is TheAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Public variables of the contract\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\r\n\t// To differentiate denomination of TAO Currency\r\n\tuint256 public powerOfTen;\r\n\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\t// address is the address of nameId, not the eth public address\r\n\tmapping (address => uint256) public balanceOf;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\t// address is the address of TAO/Name Id, not eth public address\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\t// address is the address of TAO/Name Id, not eth public address\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\r\n\t\tname = _name;\t\t// Set the name for display purposes\r\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\r\n\r\n\t\tpowerOfTen = 0;\r\n\t\tdecimals = 0;\r\n\r\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t */\r\n\tmodifier onlyTheAO {\r\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_id` is a Name or a TAO\r\n\t */\r\n\tmodifier isNameOrTAO(address _id) {\r\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameTAOPosition Address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev transfer TAOCurrency from other address\r\n\t *\r\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\r\n\t * @param target Address to receive TAOCurrency\r\n\t * @param mintedAmount The amount of TAOCurrency it will receive\r\n\t * @return true on success\r\n\t */\r\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\r\n\t\t_mint(target, mintedAmount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\r\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/***** INTERNAL METHODS *****/\r\n\t/**\r\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\r\n\t * @param _from The address of sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value The amount to send\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\r\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\r\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\r\n\t * @param target Address to receive TAOCurrency\r\n\t * @param mintedAmount The amount of TAOCurrency it will receive\r\n\t */\r\n\tfunction _mint(address target, uint256 mintedAmount) internal {\r\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\r\n\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n\t\temit Transfer(address(0), address(this), mintedAmount);\r\n\t\temit Transfer(address(this), target, mintedAmount);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Logos is TAOCurrency {\r\n\taddress public nameFactoryAddress;\r\n\taddress public nameAccountRecoveryAddress;\r\n\r\n\tINameFactory internal _nameFactory;\r\n\tINameTAOPosition internal _nameTAOPosition;\r\n\tINameAccountRecovery internal _nameAccountRecovery;\r\n\r\n\t// Mapping of a Name ID to the amount of Logos positioned by others to itself\r\n\t// address is the address of nameId, not the eth public address\r\n\tmapping (address => uint256) public positionFromOthers;\r\n\r\n\t// Mapping of Name ID to other Name ID and the amount of Logos positioned by itself\r\n\tmapping (address => mapping(address => uint256)) public positionOnOthers;\r\n\r\n\t// Mapping of a Name ID to the total amount of Logos positioned by itself on others\r\n\tmapping (address => uint256) public totalPositionOnOthers;\r\n\r\n\t// Mapping of Name ID to it's advocated TAO ID and the amount of Logos earned\r\n\tmapping (address => mapping(address => uint256)) public advocatedTAOLogos;\r\n\r\n\t// Mapping of a Name ID to the total amount of Logos earned from advocated TAO\r\n\tmapping (address => uint256) public totalAdvocatedTAOLogos;\r\n\r\n\t// Event broadcasted to public when `from` address position `value` Logos to `to`\r\n\tevent PositionFrom(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// Event broadcasted to public when `from` address unposition `value` Logos from `to`\r\n\tevent UnpositionFrom(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// Event broadcasted to public when `nameId` receives `amount` of Logos from advocating `taoId`\r\n\tevent AddAdvocatedTAOLogos(address indexed nameId, address indexed taoId, uint256 amount);\r\n\r\n\t// Event broadcasted to public when Logos from advocating `taoId` is transferred from `fromNameId` to `toNameId`\r\n\tevent TransferAdvocatedTAOLogos(address indexed fromNameId, address indexed toNameId, address indexed taoId, uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor(string memory _name, string memory _symbol, address _nameFactoryAddress, address _nameTAOPositionAddress)\r\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {\r\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\r\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_taoId` is a TAO\r\n\t */\r\n\tmodifier isTAO(address _taoId) {\r\n\t\trequire (AOLibrary.isTAO(_taoId));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_nameId` is a Name\r\n\t */\r\n\tmodifier isName(address _nameId) {\r\n\t\trequire (AOLibrary.isName(_nameId));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if msg.sender is the current advocate of _id\r\n\t */\r\n\tmodifier onlyAdvocate(address _id) {\r\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Only allowed if Name is not compromised\r\n\t */\r\n\tmodifier nameNotCompromised(address _id) {\r\n\t\trequire (!_nameAccountRecovery.isCompromised(_id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Only allowed if sender's Name is not compromised\r\n\t */\r\n\tmodifier senderNameNotCompromised() {\r\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** THE AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev The AO sets NameFactory address\r\n\t * @param _nameFactoryAddress The address of NameFactory\r\n\t */\r\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\r\n\t\trequire (_nameFactoryAddress != address(0));\r\n\t\tnameFactoryAddress = _nameFactoryAddress;\r\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameTAOPosition Address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameAccountRecovery Address\r\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\r\n\t */\r\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\r\n\t\trequire (_nameAccountRecoveryAddress != address(0));\r\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\r\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev Get the total sum of Logos for an address\r\n\t * @param _target The address to check\r\n\t * @return The total sum of Logos (own + positioned + advocated TAOs)\r\n\t */\r\n\tfunction sumBalanceOf(address _target) public isName(_target) view returns (uint256) {\r\n\t\treturn balanceOf[_target].add(positionFromOthers[_target]).add(totalAdvocatedTAOLogos[_target]);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the amount of Logos that are available to be positioned on other\r\n\t * @param _sender The sender address to check\r\n\t * @return The amount of Logos that are available to be positioned on other\r\n\t */\r\n\tfunction availableToPositionAmount(address _sender) public isName(_sender) view returns (uint256) {\r\n\t\treturn balanceOf[_sender].sub(totalPositionOnOthers[_sender]);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev `_from` Name position `_value` Logos onto `_to` Name\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to position\r\n\t * @return true on success\r\n\t */\r\n\tfunction positionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\r\n\t\trequire (_from != _to);\t// Can't position Logos to itself\r\n\t\trequire (availableToPositionAmount(_from) >= _value); // should have enough balance to position\r\n\t\trequire (positionFromOthers[_to].add(_value) >= positionFromOthers[_to]); // check for overflows\r\n\r\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);\r\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);\r\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].add(_value);\r\n\r\n\t\temit PositionFrom(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev `_from` Name unposition `_value` Logos from `_to` Name\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to unposition\r\n\t * @return true on success\r\n\t */\r\n\tfunction unpositionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\r\n\t\trequire (_from != _to);\t// Can't unposition Logos to itself\r\n\t\trequire (positionOnOthers[_from][_to] >= _value);\r\n\r\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);\r\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);\r\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].sub(_value);\r\n\r\n\t\temit UnpositionFrom(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add `_amount` logos earned from advocating a TAO `_taoId` to its Advocate\r\n\t * @param _taoId The ID of the advocated TAO\r\n\t * @param _amount the amount to reward\r\n\t * @return true on success\r\n\t */\r\n\tfunction addAdvocatedTAOLogos(address _taoId, uint256 _amount) public inWhitelist isTAO(_taoId) returns (bool) {\r\n\t\trequire (_amount > 0);\r\n\t\taddress _nameId = _nameTAOPosition.getAdvocate(_taoId);\r\n\r\n\t\tadvocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);\r\n\t\ttotalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);\r\n\r\n\t\temit AddAdvocatedTAOLogos(_nameId, _taoId, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer logos earned from advocating a TAO `_taoId` from `_fromNameId` to the Advocate of `_taoId`\r\n\t * @param _fromNameId The ID of the Name that sends the Logos\r\n\t * @param _taoId The ID of the advocated TAO\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferAdvocatedTAOLogos(address _fromNameId, address _taoId) public inWhitelist isName(_fromNameId) isTAO(_taoId) returns (bool) {\r\n\t\taddress _toNameId = _nameTAOPosition.getAdvocate(_taoId);\r\n\t\trequire (_fromNameId != _toNameId);\r\n\t\trequire (totalAdvocatedTAOLogos[_fromNameId] >= advocatedTAOLogos[_fromNameId][_taoId]);\r\n\r\n\t\tuint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];\r\n\t\tadvocatedTAOLogos[_fromNameId][_taoId] = 0;\r\n\t\ttotalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);\r\n\t\tadvocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);\r\n\t\ttotalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);\r\n\r\n\t\temit TransferAdvocatedTAOLogos(_fromNameId, _toNameId, _taoId, _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title TAOFactory\r\n *\r\n * The purpose of this contract is to allow node to create TAO\r\n */\r\ncontract TAOFactory is TAOController, ITAOFactory {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress[] internal taos;\r\n\r\n\taddress public nameTAOLookupAddress;\r\n\taddress public aoSettingAddress;\r\n\taddress public logosAddress;\r\n\taddress public nameTAOVaultAddress;\r\n\taddress public taoAncestryAddress;\r\n\taddress public settingTAOId;\r\n\taddress public taoPoolAddress;\r\n\r\n\tINameTAOLookup internal _nameTAOLookup;\r\n\tIAOSetting internal _aoSetting;\r\n\tLogos internal _logos;\r\n\tITAOAncestry internal _taoAncestry;\r\n\tITAOPool internal _taoPool;\r\n\r\n\t// Mapping from TAO ID to its nonce\r\n\tmapping (address => uint256) internal _nonces;\r\n\r\n\t// Event to be broadcasted to public when Advocate creates a TAO\r\n\tevent CreateTAO(address indexed advocateId, address taoId, uint256 index, string name, address parent, uint8 parentTypeId);\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor(address _nameFactoryAddress)\r\n\t\tTAOController(_nameFactoryAddress) public {}\r\n\r\n\t/**\r\n\t * @dev Checks if calling address can update TAO's nonce\r\n\t */\r\n\tmodifier canUpdateNonce {\r\n\t\trequire (msg.sender == nameTAOPositionAddress || msg.sender == taoAncestryAddress || msg.sender == taoPoolAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev The AO set the NameTAOLookup Address\r\n\t * @param _nameTAOLookupAddress The address of NameTAOLookup\r\n\t */\r\n\tfunction setNameTAOLookupAddress(address _nameTAOLookupAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOLookupAddress != address(0));\r\n\t\tnameTAOLookupAddress = _nameTAOLookupAddress;\r\n\t\t_nameTAOLookup = INameTAOLookup(_nameTAOLookupAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the AOSetting Address\r\n\t * @param _aoSettingAddress The address of AOSetting\r\n\t */\r\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\r\n\t\trequire (_aoSettingAddress != address(0));\r\n\t\taoSettingAddress = _aoSettingAddress;\r\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the Logos Address\r\n\t * @param _logosAddress The address of Logos\r\n\t */\r\n\tfunction setLogosAddress(address _logosAddress) public onlyTheAO {\r\n\t\trequire (_logosAddress != address(0));\r\n\t\tlogosAddress = _logosAddress;\r\n\t\t_logos = Logos(_logosAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameTAOVault Address\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction setNameTAOVaultAddress(address _nameTAOVaultAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOVaultAddress != address(0));\r\n\t\tnameTAOVaultAddress = _nameTAOVaultAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the TAOAncestry Address\r\n\t * @param _taoAncestryAddress The address of TAOAncestry\r\n\t */\r\n\tfunction setTAOAncestryAddress(address _taoAncestryAddress) public onlyTheAO {\r\n\t\trequire (_taoAncestryAddress != address(0));\r\n\t\ttaoAncestryAddress = _taoAncestryAddress;\r\n\t\t_taoAncestry = ITAOAncestry(taoAncestryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set settingTAOId (The TAO ID that holds the setting values)\r\n\t * @param _settingTAOId The address of settingTAOId\r\n\t */\r\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO isTAO(_settingTAOId) {\r\n\t\tsettingTAOId = _settingTAOId;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the TAOPool Address\r\n\t * @param _taoPoolAddress The address of TAOPool\r\n\t */\r\n\tfunction setTAOPoolAddress(address _taoPoolAddress) public onlyTheAO {\r\n\t\trequire (_taoPoolAddress != address(0));\r\n\t\ttaoPoolAddress = _taoPoolAddress;\r\n\t\t_taoPool = ITAOPool(taoPoolAddress);\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev Get the nonce given a TAO ID\r\n\t * @param _taoId The TAO ID to check\r\n\t * @return The nonce of the TAO\r\n\t */\r\n\tfunction nonces(address _taoId) external view returns (uint256) {\r\n\t\treturn _nonces[_taoId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increment the nonce of a TAO\r\n\t * @param _taoId The ID of the TAO\r\n\t * @return current nonce\r\n\t */\r\n\tfunction incrementNonce(address _taoId) external canUpdateNonce returns (uint256) {\r\n\t\t// Check if _taoId exist\r\n\t\trequire (_nonces[_taoId] > 0);\r\n\t\t_nonces[_taoId]++;\r\n\t\treturn _nonces[_taoId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Name creates a TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _parentId The parent of this TAO (has to be a Name or TAO)\r\n\t * @param _childMinLogos The min required Logos to create a child from this TAO\r\n\t */\r\n\tfunction createTAO(\r\n\t\tstring memory _name,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _parentId,\r\n\t\tuint256 _childMinLogos,\r\n\t\tbool _ethosCapStatus,\r\n\t\tuint256 _ethosCapAmount\r\n\t) public senderIsName senderNameNotCompromised isNameOrTAO(_parentId) {\r\n\t\trequire (bytes(_name).length > 0);\r\n\t\trequire (!_nameTAOLookup.isExist(_name));\r\n\r\n\t\tuint256 _nameSumLogos = _logos.sumBalanceOf(_nameFactory.ethAddressToNameId(msg.sender));\r\n\t\tif (AOLibrary.isTAO(_parentId)) {\r\n\t\t\t(, uint256 _parentCreateChildTAOMinLogos,) = _taoAncestry.getAncestryById(_parentId);\r\n\t\t\trequire (_nameSumLogos >= _parentCreateChildTAOMinLogos);\r\n\t\t} else {\r\n\t\t\trequire (_nameSumLogos >= _getCreateChildTAOMinLogos());\r\n\t\t}\r\n\r\n\t\t// Create the TAO\r\n\t\trequire (_createTAO(_name, _nameFactory.ethAddressToNameId(msg.sender), _datHash, _database, _keyValue, _contentId, _parentId, _childMinLogos, _ethosCapStatus, _ethosCapAmount));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get TAO information\r\n\t * @param _taoId The ID of the TAO to be queried\r\n\t * @return The name of the TAO\r\n\t * @return The origin Name ID that created the TAO\r\n\t * @return The name of Name that created the TAO\r\n\t * @return The datHash of the TAO\r\n\t * @return The database of the TAO\r\n\t * @return The keyValue of the TAO\r\n\t * @return The contentId of the TAO\r\n\t * @return The typeId of the TAO\r\n\t */\r\n\tfunction getTAO(address _taoId) public view returns (string memory, address, string memory, string memory, string memory, string memory, bytes32, uint8) {\r\n\t\tTAO _tao = TAO(address(uint160(_taoId)));\r\n\t\treturn (\r\n\t\t\t_tao.name(),\r\n\t\t\t_tao.originId(),\r\n\t\t\tName(address(uint160(_tao.originId()))).name(),\r\n\t\t\t_tao.datHash(),\r\n\t\t\t_tao.database(),\r\n\t\t\t_tao.keyValue(),\r\n\t\t\t_tao.contentId(),\r\n\t\t\t_tao.typeId()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get total TAOs count\r\n\t * @return total TAOs count\r\n\t */\r\n\tfunction getTotalTAOsCount() public view returns (uint256) {\r\n\t\treturn taos.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get list of TAO IDs\r\n\t * @param _from The starting index\r\n\t * @param _to The ending index\r\n\t * @return list of TAO IDs\r\n\t */\r\n\tfunction getTAOIds(uint256 _from, uint256 _to) public view returns (address[] memory) {\r\n\t\trequire (_from >= 0 && _to >= _from);\r\n\t\trequire (taos.length > 0);\r\n\r\n\t\taddress[] memory _taos = new address[](_to.sub(_from).add(1));\r\n\t\tif (_to > taos.length.sub(1)) {\r\n\t\t\t_to = taos.length.sub(1);\r\n\t\t}\r\n\t\tfor (uint256 i = _from; i <= _to; i++) {\r\n\t\t\t_taos[i.sub(_from)] = taos[i];\r\n\t\t}\r\n\t\treturn _taos;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the signature is valid\r\n\t * @param _data The signed string data\r\n\t * @param _nonce The signed uint256 nonce (should be TAO's current nonce + 1)\r\n\t * @param _validateAddress The ETH address to be validated (optional)\r\n\t * @param _name The Name of the TAO\r\n\t * @param _signatureV The V part of the signature\r\n\t * @param _signatureR The R part of the signature\r\n\t * @param _signatureS The S part of the signature\r\n\t * @return true if valid. false otherwise\r\n\t * @return The name of the Name that created the signature\r\n\t * @return The Position of the Name that created the signature.\r\n\t *\t\t\t0 == unknown. 1 == Advocate. 2 == Listener. 3 == Speaker\r\n\t */\r\n\tfunction validateTAOSignature(\r\n\t\tstring memory _data,\r\n\t\tuint256 _nonce,\r\n\t\taddress _validateAddress,\r\n\t\tstring memory _name,\r\n\t\tuint8 _signatureV,\r\n\t\tbytes32 _signatureR,\r\n\t\tbytes32 _signatureS\r\n\t) public isTAO(_getTAOIdByName(_name)) view returns (bool, string memory, uint256) {\r\n\t\taddress _signatureAddress = _getValidateSignatureAddress(_data, _nonce, _signatureV, _signatureR, _signatureS);\r\n\t\tif (_isTAOSignatureAddressValid(_validateAddress, _signatureAddress, _getTAOIdByName(_name), _nonce)) {\r\n\t\t\treturn (true, Name(address(uint160(_nameFactory.ethAddressToNameId(_signatureAddress)))).name(), _nameTAOPosition.determinePosition(_signatureAddress, _getTAOIdByName(_name)));\r\n\t\t} else {\r\n\t\t\treturn (false, \"\", 0);\r\n\t\t}\r\n\t}\r\n\r\n\t/***** INTERNAL METHOD *****/\r\n\t/**\r\n\t * @dev Actual creating the TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _nameId The ID of the Name that creates this TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _parentId The parent of this TAO (has to be a Name or TAO)\r\n\t * @param _childMinLogos The min required Logos to create a child from this TAO\r\n\t * @return true on success\r\n\t */\r\n\tfunction _createTAO(\r\n\t\tstring memory _name,\r\n\t\taddress _nameId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _parentId,\r\n\t\tuint256 _childMinLogos,\r\n\t\tbool _ethosCapStatus,\r\n\t\tuint256 _ethosCapAmount\r\n\t) internal returns (bool) {\r\n\t\t// Create the TAO\r\n\t\taddress taoId = address(AOLibrary.deployTAO(_name, _nameId, _datHash, _database, _keyValue, _contentId, nameTAOVaultAddress));\r\n\r\n\t\t// Increment the nonce\r\n\t\t_nonces[taoId]++;\r\n\r\n\t\t// Store the name lookup information\r\n\t\trequire (_nameTAOLookup.initialize(_name, taoId, 0, TAO(address(uint160(_parentId))).name(), _parentId, uint256(TAO(address(uint160(_parentId))).typeId())));\r\n\r\n\t\t// Store the Advocate/Listener/Speaker information\r\n\t\trequire (_nameTAOPosition.initialize(taoId, _nameId, _nameId, _nameId));\r\n\r\n\t\t// Store the \"Ancestry\" info of this TAO\r\n\t\trequire (_taoAncestry.initialize(taoId, _parentId, _childMinLogos));\r\n\r\n\t\t// Creat a Pool so that public can stake Ethos/Pathos on it\r\n\t\trequire (_taoPool.createPool(taoId, _ethosCapStatus, _ethosCapAmount));\r\n\r\n\t\ttaos.push(taoId);\r\n\r\n\t\temit CreateTAO(_nameId, taoId, taos.length.sub(1), _name, _parentId, TAO(address(uint160(_parentId))).typeId());\r\n\r\n\t\tif (AOLibrary.isTAO(_parentId)) {\r\n\t\t\trequire (_taoAncestry.addChild(_parentId, taoId));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the address recovered from the signature is valid\r\n\t * @param _validateAddress The ETH address to be validated (optional)\r\n\t * @param _signatureAddress The address recovered from the signature\r\n\t * @param _taoId The ID of the TAO\r\n\t * @param _nonce The signed uint256 nonce\r\n\t * @return true if valid. false otherwise\r\n\t */\r\n\tfunction _isTAOSignatureAddressValid(\r\n\t\taddress _validateAddress,\r\n\t\taddress _signatureAddress,\r\n\t\taddress _taoId,\r\n\t\tuint256 _nonce\r\n\t) internal view returns (bool) {\r\n\t\tif (_validateAddress != address(0)) {\r\n\t\t\treturn (_nonce == _nonces[_taoId].add(1) &&\r\n\t\t\t\t_signatureAddress == _validateAddress &&\r\n\t\t\t\t_nameTAOPosition.senderIsPosition(_validateAddress, _taoId)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t_nonce == _nonces[_taoId].add(1) &&\r\n\t\t\t\t_nameTAOPosition.senderIsPosition(_signatureAddress, _taoId)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to get the TAO Id by name\r\n\t * @param _name The name of the TAO\r\n\t * @return the TAO ID\r\n\t */\r\n\tfunction _getTAOIdByName(string memory _name) internal view returns (address) {\r\n\t\treturn _nameTAOLookup.getIdByName(_name);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get createChildTAOMinLogos setting\r\n\t * @return createChildTAOMinLogos The minimum required Logos to create a TAO\r\n\t */\r\n\tfunction _getCreateChildTAOMinLogos() internal view returns (uint256) {\r\n\t\t(uint256 createChildTAOMinLogos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'createChildTAOMinLogos');\r\n\t\treturn createChildTAOMinLogos;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the address that signed the data and nonce when validating signature\r\n\t * @param _data the data that was signed\r\n\t * @param _nonce The signed uint256 nonce\r\n\t * @param _v part of the signature\r\n\t * @param _r part of the signature\r\n\t * @param _s part of the signature\r\n\t * @return the address that signed the message\r\n\t */\r\n\tfunction _getValidateSignatureAddress(string memory _data, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) internal view returns (address) {\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _data, _nonce));\r\n\t\treturn ecrecover(_hash, _v, _r, _s);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taoPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOVaultAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOVaultAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoAncestryAddress\",\"type\":\"address\"}],\"name\":\"setTAOAncestryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoPoolAddress\",\"type\":\"address\"}],\"name\":\"setTAOPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTAOsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taoAncestryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_datHash\",\"type\":\"string\"},{\"name\":\"_database\",\"type\":\"string\"},{\"name\":\"_keyValue\",\"type\":\"string\"},{\"name\":\"_contentId\",\"type\":\"bytes32\"},{\"name\":\"_parentId\",\"type\":\"address\"},{\"name\":\"_childMinLogos\",\"type\":\"uint256\"},{\"name\":\"_ethosCapStatus\",\"type\":\"bool\"},{\"name\":\"_ethosCapAmount\",\"type\":\"uint256\"}],\"name\":\"createTAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getTAOIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"getTAO\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOLookupAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_validateAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"validateTAOSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"incrementNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOLookupAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOLookupAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logosAddress\",\"type\":\"address\"}],\"name\":\"setLogosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"advocateId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentTypeId\",\"type\":\"uint8\"}],\"name\":\"CreateTAO\",\"type\":\"event\"}]","ContractName":"TAOFactory","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd82","Library":"AOLibrary:1150d53299Abb7DE27464D01B626728f5c840229","SwarmSource":"bzzr://5ac5725af6ddc394b3547372f4a6d953145c2406528f1f7760c15ad4f8055b9e"}]}