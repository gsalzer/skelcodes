{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary MathFixed {\r\n\r\n  /**\r\n  * @dev Multiplies two fixed_point numbers.\r\n  */\r\n  function mulFixed(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return (((a * b) >> 95) + 1) >> 1;\r\n  }\r\n\r\n  /**\r\n  * @dev return a^n with fixed_point a, unsinged integer n.\r\n  * using exponentiation_by_squaring\r\n  */\r\n  function powFixed(uint256 a, uint256 n) internal pure returns (uint256){\r\n    uint256 r = 79228162514264337593543950336; // 1.0  * 2^96\r\n    while(n > 0){\r\n      if(n&1 > 0){\r\n        r = mulFixed(a, r);\r\n      }\r\n      a = mulFixed(a, a);\r\n      n >>= 1;\r\n    }\r\n    return r;\r\n  }\r\n}\r\n\r\ncontract TokenBase is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract WR2Token is TokenBase {\r\n\r\n    WiredToken public wiredToken;\r\n\r\n    string public constant name = \"WRD Exodus\";\r\n    string public constant symbol = \"WR2\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    constructor() public {\r\n        wiredToken = WiredToken(msg.sender);\r\n        emit Transfer(address(0), address(this), 0);\r\n    }\r\n\r\n    function balanceOf(address _holder) public view returns (uint256) {\r\n        return wiredToken.lookBalanceWR2(_holder);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        wiredToken.transferWR2(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        wiredToken.transferWR2(_from, _to, _value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return wiredToken.totalWR2();\r\n    }\r\n\r\n    function mint(address _holder, uint256 _value) external {\r\n        require(msg.sender == address(wiredToken));\r\n        wiredToken.mintWR2(_holder, _value);\r\n        emit Transfer(address(0), _holder, _value);\r\n    }\r\n\r\n    function transferByAdmin(address _from, uint256 _value) external {\r\n        require(wiredToken.isWhitelistAdmin(msg.sender));\r\n        wiredToken.transferWR2(_from, msg.sender, _value);\r\n        emit Transfer(_from, msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract WiredToken is WhitelistedRole, TokenBase {\r\n    using SafeMath for uint256;\r\n    using MathFixed for uint256;\r\n\r\n    string public constant name = \"WRD Genesis\";\r\n    string public constant symbol = \"WRD\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    uint32 constant month = 30 days;\r\n    uint256 public constant bonusWRDtoWR2 = 316912650057057350374175801; //0.4%\r\n    uint256 public constant bonusWR2toWRD = 7922816251426433759354395; //0.01%\r\n    uint256 public initialSupply = uint256(250000000000).mul(uint(10)**decimals);\r\n\r\n    WR2Token public wr2Token;\r\n    uint256 private totalWRD;\r\n    uint256 public totalWR2;\r\n\r\n    bool public listing = false;\r\n    uint256 public launchTime = 9999999999999999999999;\r\n\r\n    mapping(address => uint256) lastUpdate;\r\n//    mapping(address => uint256) public startTime;\r\n    mapping(address => uint256) WRDBalances;\r\n    mapping(address => uint256) WRDDailyHoldBalances;\r\n    mapping(address => uint256) WR2Balances;\r\n    mapping(address => uint256) WR2DailyHoldBalances;\r\n\r\n    mapping(address => uint256) public presaleTokens;\r\n\r\n    uint256 public totalAirdropTokens;\r\n    uint256 public totalPresaleTokens;\r\n\r\n    constructor() public {\r\n        wr2Token = new WR2Token();\r\n\r\n        mint(address(this), initialSupply.mul(2).div(10));\r\n        WRDDailyHoldBalances[address(this)] = initialSupply.mul(2).div(10);\r\n\r\n        mint(msg.sender, initialSupply.mul(8).div(10));\r\n        WRDDailyHoldBalances[msg.sender] = initialSupply.mul(8).div(10);\r\n\r\n        _addWhitelisted(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return totalWRD;\r\n    }\r\n\r\n    function balanceOf(address _holder) public view returns (uint256) {\r\n        uint[2] memory arr = lookBonus(_holder);\r\n        return WRDBalances[_holder].add(arr[0]).sub(lockUpAmount(_holder));\r\n    }\r\n\r\n    function lookBalanceWR2(address _holder) public view returns (uint256) {\r\n        uint[2] memory arr = lookBonus(_holder);\r\n        return WR2Balances[_holder].add(arr[1]);\r\n    }\r\n\r\n    function lockUpAmount(address _holder) internal view returns (uint) {\r\n        uint percentage = 100;\r\n        if (now >= launchTime.add(uint(12).mul(month))) {\r\n            uint pastMonths = (now.sub(launchTime.add(uint(12).mul(month)))).div(month);\r\n            percentage = 0;\r\n            if (pastMonths < 50) {\r\n                percentage = uint(100).sub(uint(2).mul(pastMonths));\r\n            }\r\n        }\r\n        return (presaleTokens[_holder]).mul(percentage).div(100);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        transferWRD(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        transferWRD(_from, _to, _value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferWRD(address _from, address _to, uint256 _value) internal {\r\n        if (listing) {\r\n            updateBonus(_from);\r\n            updateBonus(_to);\r\n        } else {\r\n            WRDDailyHoldBalances[_to] = WRDDailyHoldBalances[_to].add(_value);\r\n        }\r\n\r\n        require(WRDBalances[_from].sub(lockUpAmount(_from)) >= _value);\r\n\r\n        WRDBalances[_from] = WRDBalances[_from].sub(_value);\r\n        WRDBalances[_to] = WRDBalances[_to].add(_value);\r\n\r\n        WRDDailyHoldBalances[_from] = min(\r\n            WRDDailyHoldBalances[_from],\r\n            WRDBalances[_from]\r\n        );\r\n    }\r\n\r\n    function transferWR2(address _from, address _to, uint256 _value) external {\r\n        require(msg.sender == address(wr2Token));\r\n\r\n        if (listing) {\r\n            updateBonus(_from);\r\n            updateBonus(_to);\r\n        } else {\r\n            WR2DailyHoldBalances[_to] = WR2DailyHoldBalances[_to].add(_value);\r\n        }\r\n\r\n        require(WR2Balances[_from] >= _value);\r\n\r\n        WR2Balances[_from] = WR2Balances[_from].sub(_value);\r\n        WR2Balances[_to] = WR2Balances[_to].add(_value);\r\n\r\n\r\n        WR2DailyHoldBalances[_from] = min(\r\n            WR2DailyHoldBalances[_from],\r\n            WR2Balances[_from]\r\n        );\r\n    }\r\n\r\n    function mint(address _holder, uint _value) internal {\r\n        WRDBalances[_holder] = WRDBalances[_holder].add(_value);\r\n        totalWRD = totalWRD.add(_value);\r\n        emit Transfer(address(0), _holder, _value);\r\n    }\r\n\r\n    function mintWR2(address _holder, uint _value) external {\r\n        require(msg.sender == address(wr2Token));\r\n        WR2Balances[_holder] = WR2Balances[_holder].add(_value);\r\n        totalWR2 = totalWR2.add(_value);\r\n    }\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n\r\n    function updateBonus(address _holder) internal {\r\n        uint256 pastDays = now.sub((lastUpdate[_holder].mul(1 days)).add(launchTime)).div(1 days);\r\n        if (pastDays > 0) {\r\n            uint256[2] memory arr = lookBonus(_holder);\r\n\r\n            lastUpdate[_holder] = lastUpdate[_holder].add(pastDays);\r\n            WRDDailyHoldBalances[_holder] = WRDBalances[_holder].add(arr[0]);\r\n            WR2DailyHoldBalances[_holder] = WR2Balances[_holder].add(arr[1]);\r\n\r\n            if(arr[0] > 0) mint(_holder, arr[0]);\r\n            if(arr[1] > 0) wr2Token.mint(_holder, arr[1]);\r\n        }\r\n    }\r\n\r\n    function lookBonus(address _holder) internal view returns (uint256[2] memory bonuses) {\r\n        bonuses[0] = 0;\r\n        bonuses[1] = 0;\r\n        if (!isBonus(_holder) || !listing ){\r\n            return bonuses;\r\n        }\r\n        uint256 pastDays = (now.sub((lastUpdate[_holder].mul(1 days)).add(launchTime))).div(1 days);\r\n        if (pastDays == 0){\r\n            return bonuses;\r\n        }\r\n\r\n        // X(n+1) = X(n) + A*Y(n), Y(n+1) = B*X(n) + Y(n)\r\n        // => a := sqrt(A)\r\n        //    b := sqrt(B)\r\n        //    c := ((1+ab)^n + (1-ab)^n)/2\r\n        //    d := ((1+ab)^n - (1-ab)^n)/2\r\n        //    X(n) = c*X(0) + d*(a/b)*Y(0)\r\n        //    Y(n) = d*(b/a)*X(0) + c*Y(0)\r\n\r\n        // 1.0 : 79228162514264337593543950336\r\n        // A = 0.0001, B = 0.004\r\n        // A : 7922816251426433759354395\r\n        // a : 792281625142643375935439503\r\n        // B : 316912650057057350374175801\r\n        // b : 5010828967500958623728276031\r\n        // ab : 50108289675009586237282760\r\n        // 1+ab : 79278270803939347179781233096\r\n        // 1-ab : 79178054224589328007306667576\r\n        // a/b : 12527072418752396559320690078\r\n        // b/a : 501082896750095862372827603139\r\n\r\n        pastDays--;\r\n        uint256 ratePlus  = (uint256(79278270803939347179781233096)).powFixed(pastDays); // (1+sqrt(ab)) ^ n\r\n        uint256 rateMinus = (uint256(79178054224589328007306667576)).powFixed(pastDays); // (1-sqrt(ab)) ^ n\r\n        ratePlus += rateMinus;                 // c*2\r\n        rateMinus = ratePlus - (rateMinus<<1); // d*2\r\n        uint256 x0 = WRDBalances[_holder] + WR2DailyHoldBalances[_holder].mulFixed(bonusWR2toWRD);  // x(0)\r\n        uint256 y0 = WR2Balances[_holder] + WRDDailyHoldBalances[_holder].mulFixed(bonusWRDtoWR2); // y(0)\r\n        bonuses[0] = ratePlus.mulFixed(x0) + rateMinus.mulFixed(y0).mulFixed(uint256(12527072418752396559320690078));  // x(n)*2\r\n        bonuses[1] = rateMinus.mulFixed(x0).mulFixed(uint256(501082896750095862372827603139)) + ratePlus.mulFixed(y0); // y(n)*2\r\n        bonuses[0] = (bonuses[0]>>1) - WRDBalances[_holder]; // x(n) - balance\r\n        bonuses[1] = (bonuses[1]>>1) - WR2Balances[_holder]; // y(n) - balance\r\n        return bonuses;\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        if(listing) updateBonus(account);\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        if(listing) updateBonus(account);\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        if(listing) updateBonus(msg.sender);\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        if(listing) updateBonus(account);\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        if(listing) updateBonus(msg.sender);\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function isBonus(address _holder) internal view returns(bool) {\r\n        return !isWhitelistAdmin(_holder) && !isWhitelisted(_holder);\r\n    }\r\n\r\n    function startListing() public onlyWhitelistAdmin {\r\n        require(!listing);\r\n        launchTime = now;\r\n        listing = true;\r\n    }\r\n\r\n    function addAirdropTokens(address[] calldata sender, uint256[] calldata amount) external onlyWhitelistAdmin {\r\n        require(sender.length > 0 && sender.length == amount.length);\r\n\r\n        for (uint i = 0; i < sender.length; i++) {\r\n            transferWRD(address(this), sender[i], amount[i]);\r\n            //send as presaletoken\r\n            presaleTokens[sender[i]] = presaleTokens[sender[i]].add(amount[i]);\r\n            totalAirdropTokens = totalAirdropTokens.add(amount[i]);\r\n            emit Transfer(address(this), sender[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function addPresaleTokens(address[] calldata sender, uint256[] calldata amount) external onlyWhitelistAdmin {\r\n        require(sender.length > 0 && sender.length == amount.length);\r\n\r\n        for (uint i = 0; i < sender.length; i++) {\r\n            transferWRD(address(this), sender[i], amount[i]);\r\n            presaleTokens[sender[i]] = presaleTokens[sender[i]].add(amount[i]);\r\n            totalPresaleTokens = totalPresaleTokens.add(amount[i]);\r\n            emit Transfer(address(this), sender[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function addSpecialsaleTokens(address to, uint256 amount) external onlyWhitelisted {\r\n        transferWRD(msg.sender, to, amount);\r\n        presaleTokens[to] = presaleTokens[to].add(amount);\r\n        emit Transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function transferByAdmin(address from, uint256 amount) external onlyWhitelistAdmin {\r\n        transferWRD(from, msg.sender, amount);\r\n        emit Transfer(from, msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"lookBalanceWR2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addAirdropTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWR2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWR2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPresaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintWR2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addSpecialsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusWR2toWRD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusWRDtoWR2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wr2Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAirdropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"WiredToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://560bd3540a90e16ebcf9ed3313059a81a9681f2ee0c01d9f7448253e4cd8c158"}]}