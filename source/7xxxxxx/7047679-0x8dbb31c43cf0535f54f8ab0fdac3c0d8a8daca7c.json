{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/WhitelistableConstraints.sol\r\n\r\n/**\r\n * @title WhitelistableConstraints\r\n * @dev Contract encapsulating the constraints applicable to a Whitelistable contract.\r\n */\r\ncontract WhitelistableConstraints {\r\n\r\n    /**\r\n     * @dev Check if whitelist with specified parameters is allowed.\r\n     * @param _maxWhitelistLength The maximum length of whitelist. Zero means no whitelist.\r\n     * @param _weiWhitelistThresholdBalance The threshold balance triggering whitelist check.\r\n     * @return true if whitelist with specified parameters is allowed, false otherwise\r\n     */\r\n    function isAllowedWhitelist(uint256 _maxWhitelistLength, uint256 _weiWhitelistThresholdBalance)\r\n        public pure returns(bool isReallyAllowedWhitelist) {\r\n        return _maxWhitelistLength > 0 || _weiWhitelistThresholdBalance > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelistable.sol\r\n\r\n/**\r\n * @title Whitelistable\r\n * @dev Base contract implementing a whitelist to keep track of investors.\r\n * The construction parameters allow for both whitelisted and non-whitelisted contracts:\r\n * 1) maxWhitelistLength = 0 and whitelistThresholdBalance > 0: whitelist disabled\r\n * 2) maxWhitelistLength > 0 and whitelistThresholdBalance = 0: whitelist enabled, full whitelisting\r\n * 3) maxWhitelistLength > 0 and whitelistThresholdBalance > 0: whitelist enabled, partial whitelisting\r\n */\r\ncontract Whitelistable is WhitelistableConstraints {\r\n\r\n    event LogMaxWhitelistLengthChanged(address indexed caller, uint256 indexed maxWhitelistLength);\r\n    event LogWhitelistThresholdBalanceChanged(address indexed caller, uint256 indexed whitelistThresholdBalance);\r\n    event LogWhitelistAddressAdded(address indexed caller, address indexed subscriber);\r\n    event LogWhitelistAddressRemoved(address indexed caller, address indexed subscriber);\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    uint256 public whitelistLength;\r\n\r\n    uint256 public maxWhitelistLength;\r\n\r\n    uint256 public whitelistThresholdBalance;\r\n\r\n    constructor(uint256 _maxWhitelistLength, uint256 _whitelistThresholdBalance) internal {\r\n        require(isAllowedWhitelist(_maxWhitelistLength, _whitelistThresholdBalance), \"parameters not allowed\");\r\n\r\n        maxWhitelistLength = _maxWhitelistLength;\r\n        whitelistThresholdBalance = _whitelistThresholdBalance;\r\n    }\r\n\r\n    /**\r\n     * @return true if whitelist is currently enabled, false otherwise\r\n     */\r\n    function isWhitelistEnabled() public view returns(bool isReallyWhitelistEnabled) {\r\n        return maxWhitelistLength > 0;\r\n    }\r\n\r\n    /**\r\n     * @return true if subscriber is whitelisted, false otherwise\r\n     */\r\n    function isWhitelisted(address _subscriber) public view returns(bool isReallyWhitelisted) {\r\n        return whitelist[_subscriber];\r\n    }\r\n\r\n    function setMaxWhitelistLengthInternal(uint256 _maxWhitelistLength) internal {\r\n        require(isAllowedWhitelist(_maxWhitelistLength, whitelistThresholdBalance),\r\n            \"_maxWhitelistLength not allowed\");\r\n        require(_maxWhitelistLength != maxWhitelistLength, \"_maxWhitelistLength equal to current one\");\r\n\r\n        maxWhitelistLength = _maxWhitelistLength;\r\n\r\n        emit LogMaxWhitelistLengthChanged(msg.sender, maxWhitelistLength);\r\n    }\r\n\r\n    function setWhitelistThresholdBalanceInternal(uint256 _whitelistThresholdBalance) internal {\r\n        require(isAllowedWhitelist(maxWhitelistLength, _whitelistThresholdBalance),\r\n            \"_whitelistThresholdBalance not allowed\");\r\n        require(whitelistLength == 0 || _whitelistThresholdBalance > whitelistThresholdBalance,\r\n            \"_whitelistThresholdBalance not greater than current one\");\r\n\r\n        whitelistThresholdBalance = _whitelistThresholdBalance;\r\n\r\n        emit LogWhitelistThresholdBalanceChanged(msg.sender, _whitelistThresholdBalance);\r\n    }\r\n\r\n    function addToWhitelistInternal(address _subscriber) internal {\r\n        require(_subscriber != address(0), \"_subscriber is zero\");\r\n        require(!whitelist[_subscriber], \"already whitelisted\");\r\n        require(whitelistLength < maxWhitelistLength, \"max whitelist length reached\");\r\n\r\n        whitelistLength++;\r\n\r\n        whitelist[_subscriber] = true;\r\n\r\n        emit LogWhitelistAddressAdded(msg.sender, _subscriber);\r\n    }\r\n\r\n    function removeFromWhitelistInternal(address _subscriber, uint256 _balance) internal {\r\n        require(_subscriber != address(0), \"_subscriber is zero\");\r\n        require(whitelist[_subscriber], \"not whitelisted\");\r\n        require(_balance <= whitelistThresholdBalance, \"_balance greater than whitelist threshold\");\r\n\r\n        assert(whitelistLength > 0);\r\n\r\n        whitelistLength--;\r\n\r\n        whitelist[_subscriber] = false;\r\n\r\n        emit LogWhitelistAddressRemoved(msg.sender, _subscriber);\r\n    }\r\n\r\n    /**\r\n     * @param _subscriber The subscriber for which the balance check is required.\r\n     * @param _balance The balance value to check for allowance.\r\n     * @return true if the balance is allowed for the subscriber, false otherwise\r\n     */\r\n    function isAllowedBalance(address _subscriber, uint256 _balance) public view returns(bool isReallyAllowed) {\r\n        return !isWhitelistEnabled() || _balance <= whitelistThresholdBalance || whitelist[_subscriber];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/Presale.sol\r\n\r\n/**\r\n * @title Presale\r\n * @dev A simple Presale Contract (PsC) for deposit collection during pre-sale events.\r\n */\r\ncontract Presale is Whitelistable, Pausable {\r\n    using AddressUtils for address;\r\n    using SafeMath for uint256;\r\n\r\n    event LogCreated(\r\n        address caller,\r\n        uint256 indexed startBlock,\r\n        uint256 indexed endBlock,\r\n        uint256 minDeposit,\r\n        address wallet,\r\n        address indexed providerWallet,\r\n        uint256 maxWhitelistLength,\r\n        uint256 whitelistThreshold\r\n    );\r\n    event LogMinDepositChanged(address indexed caller, uint256 indexed minDeposit);\r\n    event LogInvestmentReceived(\r\n        address indexed caller,\r\n        address indexed beneficiary,\r\n        uint256 indexed amount,\r\n        uint256 netAmount\r\n    );\r\n    event LogPresaleTokenChanged(\r\n        address indexed caller,\r\n        address indexed presaleToken,\r\n        uint256 indexed rate\r\n    );\r\n\r\n    // The start and end block where investments are allowed (both inclusive)\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // Presale minimum deposit in wei\r\n    uint256 public minDeposit;\r\n\r\n    // Presale balances (expressed in wei) deposited by each subscriber\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    // Amount of raised money in wei\r\n    uint256 public raisedFunds;\r\n\r\n    // Amount of service provider fees in wei\r\n    uint256 public providerFees;\r\n\r\n    // Address where service provider fees are collected\r\n    address public providerWallet;\r\n\r\n    // Two fee thresholds separating the raised money into three partitions\r\n    uint256 public feeThreshold1;\r\n    uint256 public feeThreshold2;\r\n\r\n    // Three percentage levels for fee calculation in each partition\r\n    uint256 public lowFeePercentage;\r\n    uint256 public mediumFeePercentage;\r\n    uint256 public highFeePercentage;\r\n\r\n    // Optional ERC20 presale token (0 means no presale token)\r\n    MintableToken public presaleToken;\r\n\r\n    // How many ERC20 presale token units a buyer gets per wei (0 means no presale token)\r\n    uint256 public rate;\r\n\r\n    constructor(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _minDeposit,\r\n        address _wallet,\r\n        address _providerWallet,\r\n        uint256 _maxWhitelistLength,\r\n        uint256 _whitelistThreshold,\r\n        uint256 _feeThreshold1,\r\n        uint256 _feeThreshold2,\r\n        uint256 _lowFeePercentage,\r\n        uint256 _mediumFeePercentage,\r\n        uint256 _highFeePercentage\r\n    )\r\n    Whitelistable(_maxWhitelistLength, _whitelistThreshold)\r\n    public\r\n    {\r\n        require(_startBlock >= block.number, \"_startBlock is lower than current block number\");\r\n        require(_endBlock >= _startBlock, \"_endBlock is lower than _startBlock\");\r\n        require(_minDeposit > 0, \"_minDeposit is zero\");\r\n        require(_wallet != address(0) && !_wallet.isContract(), \"_wallet is zero or contract\");\r\n        require(!_providerWallet.isContract(), \"_providerWallet is contract\");\r\n        require(_feeThreshold2 >= _feeThreshold1, \"_feeThreshold2 is lower than _feeThreshold1\");\r\n        require(0 <= _lowFeePercentage && _lowFeePercentage <= 100, \"_lowFeePercentage not in range [0, 100]\");\r\n        require(0 <= _mediumFeePercentage && _mediumFeePercentage <= 100, \"_mediumFeePercentage not in range [0, 100]\");\r\n        require(0 <= _highFeePercentage && _highFeePercentage <= 100, \"_highFeePercentage not in range [0, 100]\");\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n        minDeposit = _minDeposit;\r\n        wallet = _wallet;\r\n        providerWallet = _providerWallet;\r\n        feeThreshold1 = _feeThreshold1;\r\n        feeThreshold2 = _feeThreshold2;\r\n        lowFeePercentage = _lowFeePercentage;\r\n        mediumFeePercentage = _mediumFeePercentage;\r\n        highFeePercentage = _highFeePercentage;\r\n\r\n        emit LogCreated(\r\n            msg.sender,\r\n            _startBlock,\r\n            _endBlock,\r\n            _minDeposit,\r\n            _wallet,\r\n            _providerWallet,\r\n            _maxWhitelistLength,\r\n            _whitelistThreshold\r\n        );\r\n    }\r\n\r\n    function hasStarted() public view returns (bool ended) {\r\n        return block.number >= startBlock;\r\n    }\r\n\r\n    // @return true if presale event has ended\r\n    function hasEnded() public view returns (bool ended) {\r\n        return block.number > endBlock;\r\n    }\r\n\r\n    // @return The current fee percentage based on raised funds\r\n    function currentFeePercentage() public view returns (uint256 feePercentage) {\r\n        return raisedFunds < feeThreshold1 ? lowFeePercentage :\r\n            raisedFunds < feeThreshold2 ? mediumFeePercentage : highFeePercentage;\r\n    }\r\n\r\n    /**\r\n     * Change the minimum deposit for each subscriber. New value shall be lower than previous.\r\n     * @param _minDeposit The minimum deposit for each subscriber, expressed in wei\r\n     */\r\n    function setMinDeposit(uint256 _minDeposit) external onlyOwner {\r\n        require(0 < _minDeposit && _minDeposit < minDeposit, \"_minDeposit not in range [0, minDeposit]\");\r\n        require(!hasEnded(), \"presale has ended\");\r\n\r\n        minDeposit = _minDeposit;\r\n\r\n        emit LogMinDepositChanged(msg.sender, _minDeposit);\r\n    }\r\n\r\n    /**\r\n     * Change the maximum whitelist length. New value shall satisfy the #isAllowedWhitelist conditions.\r\n     * @param _maxWhitelistLength The maximum whitelist length\r\n     */\r\n    function setMaxWhitelistLength(uint256 _maxWhitelistLength) external onlyOwner {\r\n        require(!hasEnded(), \"presale has ended\");\r\n        setMaxWhitelistLengthInternal(_maxWhitelistLength);\r\n    }\r\n\r\n    /**\r\n     * Change the whitelist threshold balance. New value shall satisfy the #isAllowedWhitelist conditions.\r\n     * @param _whitelistThreshold The threshold balance (in wei) above which whitelisting is required to invest\r\n     */\r\n    function setWhitelistThresholdBalance(uint256 _whitelistThreshold) external onlyOwner {\r\n        require(!hasEnded(), \"presale has ended\");\r\n        setWhitelistThresholdBalanceInternal(_whitelistThreshold);\r\n    }\r\n\r\n    /**\r\n     * Add the subscriber to the whitelist.\r\n     * @param _subscriber The subscriber to add to the whitelist.\r\n     */\r\n    function addToWhitelist(address _subscriber) external onlyOwner {\r\n        require(!hasEnded(), \"presale has ended\");\r\n        addToWhitelistInternal(_subscriber);\r\n    }\r\n\r\n    /**\r\n     * Removed the subscriber from the whitelist.\r\n     * @param _subscriber The subscriber to remove from the whitelist.\r\n     */\r\n    function removeFromWhitelist(address _subscriber) external onlyOwner {\r\n        require(!hasEnded(), \"presale has ended\");\r\n        removeFromWhitelistInternal(_subscriber, balanceOf[_subscriber]);\r\n    }\r\n\r\n    /**\r\n     * Set the ERC20 presale token address and conversion rate.\r\n     * @param _presaleToken The ERC20 presale token.\r\n     * @param _rate How many ERC20 presale token units a buyer gets per wei.\r\n     */\r\n    function setPresaleToken(MintableToken _presaleToken, uint256 _rate) external onlyOwner {\r\n        require(_presaleToken != presaleToken || _rate != rate, \"both _presaleToken and _rate equal to current ones\");\r\n        require(!hasEnded(), \"presale has ended\");\r\n\r\n        presaleToken = _presaleToken;\r\n        rate = _rate;\r\n\r\n        emit LogPresaleTokenChanged(msg.sender, _presaleToken, _rate);\r\n    }\r\n\r\n    function isAllowedBalance(address _beneficiary, uint256 _balance) public view returns (bool isReallyAllowed) {\r\n        bool hasMinimumBalance = _balance >= minDeposit;\r\n        return hasMinimumBalance && super.isAllowedBalance(_beneficiary, _balance);\r\n    }\r\n\r\n    function isValidInvestment(address _beneficiary, uint256 _amount) public view returns (bool isValid) {\r\n        bool withinPeriod = startBlock <= block.number && block.number <= endBlock;\r\n        bool nonZeroPurchase = _amount != 0;\r\n        bool isAllowedAmount = isAllowedBalance(_beneficiary, balanceOf[_beneficiary].add(_amount));\r\n\r\n        return withinPeriod && nonZeroPurchase && isAllowedAmount;\r\n    }\r\n\r\n    function invest(address _beneficiary) public payable whenNotPaused {\r\n        require(_beneficiary != address(0), \"_beneficiary is zero\");\r\n        require(_beneficiary != wallet, \"_beneficiary is equal to wallet\");\r\n        require(_beneficiary != providerWallet, \"_beneficiary is equal to providerWallet\");\r\n        require(isValidInvestment(_beneficiary, msg.value), \"forbidden investment for _beneficiary\");\r\n\r\n        balanceOf[_beneficiary] = balanceOf[_beneficiary].add(msg.value);\r\n        raisedFunds = raisedFunds.add(msg.value);\r\n\r\n        // Optionally distribute presale token to buyer, if configured\r\n        if (presaleToken != address(0) && rate != 0) {\r\n            uint256 tokenAmount = msg.value.mul(rate);\r\n            presaleToken.mint(_beneficiary, tokenAmount);\r\n        }\r\n\r\n        if (providerWallet == 0) {\r\n            wallet.transfer(msg.value);\r\n\r\n            emit LogInvestmentReceived(msg.sender, _beneficiary, msg.value, msg.value);\r\n        }\r\n        else {\r\n            uint256 feePercentage = currentFeePercentage();\r\n            uint256 fees = msg.value.mul(feePercentage).div(100);\r\n            uint256 netAmount = msg.value.sub(fees);\r\n\r\n            providerFees = providerFees.add(fees);\r\n\r\n            providerWallet.transfer(fees);\r\n            wallet.transfer(netAmount);\r\n\r\n            emit LogInvestmentReceived(msg.sender, _beneficiary, msg.value, netAmount);\r\n        }\r\n    }\r\n\r\n    function () external payable whenNotPaused {\r\n        invest(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/CappedPresale.sol\r\n\r\n/**\r\n * @title CappedPresale\r\n * @dev Extension of Presale with a max amount of funds raised\r\n */\r\ncontract CappedPresale is Presale {\r\n    using SafeMath for uint256;\r\n\r\n    event LogMaxCapChanged(address indexed caller, uint256 indexed maxCap);\r\n\r\n    // Maximum cap in wei\r\n    uint256 public maxCap;\r\n\r\n    constructor(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _minDeposit,\r\n        address _wallet,\r\n        address _providerWallet,\r\n        uint256 _maxWhitelistLength,\r\n        uint256 _whitelistThreshold,\r\n        uint256 _feeThreshold1,\r\n        uint256 _feeThreshold2,\r\n        uint256 _lowFeePercentage,\r\n        uint256 _mediumFeePercentage,\r\n        uint256 _highFeePercentage,\r\n        uint256 _maxCap\r\n    )\r\n    Presale(\r\n        _startBlock,\r\n        _endBlock,\r\n        _minDeposit,\r\n        _wallet,\r\n        _providerWallet,\r\n        _maxWhitelistLength,\r\n        _whitelistThreshold,\r\n        _feeThreshold1,\r\n        _feeThreshold2,\r\n        _lowFeePercentage,\r\n        _mediumFeePercentage,\r\n        _highFeePercentage\r\n    )\r\n    public\r\n    {\r\n        require(_maxCap > 0, \"_maxCap is zero\");\r\n        require(_maxCap >= _feeThreshold2, \"_maxCap is lower than _feeThreshold2\");\r\n        \r\n        maxCap = _maxCap;\r\n    }\r\n\r\n    /**\r\n     * Change the maximum cap of the presale. New value shall be greater than previous one.\r\n     * @param _maxCap The maximum cap of the presale, expressed in wei\r\n     */\r\n    function setMaxCap(uint256 _maxCap) external onlyOwner {\r\n        require(_maxCap > maxCap, \"_maxCap is not greater than current maxCap\");\r\n        require(!hasEnded(), \"presale has ended\");\r\n        \r\n        maxCap = _maxCap;\r\n\r\n        emit LogMaxCapChanged(msg.sender, _maxCap);\r\n    }\r\n\r\n    // overriding Presale#hasEnded to add cap logic\r\n    // @return true if presale event has ended\r\n    function hasEnded() public view returns (bool ended) {\r\n        bool capReached = raisedFunds >= maxCap;\r\n        \r\n        return super.hasEnded() || capReached;\r\n    }\r\n\r\n    // overriding Presale#isValidInvestment to add extra cap logic\r\n    // @return true if beneficiary can buy at the moment\r\n    function isValidInvestment(address _beneficiary, uint256 _amount) public view returns (bool isValid) {\r\n        bool withinCap = raisedFunds.add(_amount) <= maxCap;\r\n\r\n        return super.isValidInvestment(_beneficiary, _amount) && withinCap;\r\n    }\r\n}\r\n\r\n// File: contracts/NokuCustomPresale.sol\r\n\r\n/**\r\n * @title NokuCustomPresale\r\n * @dev Extension of CappedPresale.\r\n */\r\ncontract NokuCustomPresale is CappedPresale {\r\n    event LogNokuCustomPresaleCreated(\r\n        address caller,\r\n        uint256 indexed startBlock,\r\n        uint256 indexed endBlock,\r\n        uint256 minDeposit,\r\n        address wallet,\r\n        address indexed providerWallet,\r\n        uint256 maxWhitelistLength,\r\n        uint256 whitelistThreshold\r\n    );\r\n\r\n    constructor(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _minDeposit,\r\n        address _wallet,\r\n        address _providerWallet,\r\n        uint256 _maxWhitelistLength,\r\n        uint256 _whitelistThreshold,\r\n        uint256 _feeThreshold1,\r\n        uint256 _feeThreshold2,\r\n        uint256 _lowFeePercentage,\r\n        uint256 _mediumFeePercentage,\r\n        uint256 _highFeePercentage,\r\n        uint256 _maxCap\r\n    )\r\n    CappedPresale(\r\n        _startBlock,\r\n        _endBlock,\r\n        _minDeposit,\r\n        _wallet,\r\n        _providerWallet,\r\n        _maxWhitelistLength,\r\n        _whitelistThreshold,\r\n        _feeThreshold1,\r\n        _feeThreshold2,\r\n        _lowFeePercentage,\r\n        _mediumFeePercentage,\r\n        _highFeePercentage,\r\n        _maxCap\r\n    )\r\n    public {\r\n        emit LogNokuCustomPresaleCreated(\r\n            msg.sender,\r\n            _startBlock,\r\n            _endBlock,\r\n            _minDeposit,\r\n            _wallet,\r\n            _providerWallet,\r\n            _maxWhitelistLength,\r\n            _whitelistThreshold\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/NokuPricingPlan.sol\r\n\r\n/**\r\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\r\n*/\r\ncontract NokuPricingPlan {\r\n    /**\r\n    * @dev Pay the fee for the service identified by the specified name.\r\n    * The fee amount shall already be approved by the client.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @param client The client of the target service.\r\n    * @return true if fee has been paid.\r\n    */\r\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\r\n\r\n    /**\r\n    * @dev Get the usage fee for the service identified by the specified name.\r\n    * The returned fee amount shall be approved before using #payFee method.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @return The amount to approve before really paying such fee.\r\n    */\r\n    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\r\n}\r\n\r\n// File: contracts/NokuCustomService.sol\r\n\r\ncontract NokuCustomService is Pausable {\r\n    using AddressUtils for address;\r\n\r\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\r\n\r\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers\r\n    NokuPricingPlan public pricingPlan;\r\n\r\n    constructor(address _pricingPlan) internal {\r\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\r\n\r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n    }\r\n\r\n    function setPricingPlan(address _pricingPlan) public onlyOwner {\r\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\r\n        require(NokuPricingPlan(_pricingPlan) != pricingPlan, \"_pricingPlan equal to current\");\r\n        \r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n\r\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\r\n    }\r\n}\r\n\r\n// File: contracts/NokuCustomPresaleService.sol\r\n\r\n/**\r\n * @title NokuCustomPresaleService\r\n * @dev Extension of NokuCustomService adding the fee payment in NOKU tokens.\r\n */\r\ncontract NokuCustomPresaleService is NokuCustomService {\r\n    event LogNokuCustomPresaleServiceCreated(address indexed caller);\r\n\r\n    bytes32 public constant SERVICE_NAME = \"NokuCustomERC20.presale\";\r\n    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\r\n\r\n    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\r\n        emit LogNokuCustomPresaleServiceCreated(msg.sender);\r\n    }\r\n\r\n    function createCustomPresale(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _minDeposit,\r\n        address _wallet,\r\n        address _providerWallet,\r\n        uint256 _maxWhitelistLength,\r\n        uint256 _whitelistThreshold,\r\n        uint256 _feeThreshold1,\r\n        uint256 _feeThreshold2,\r\n        uint256 _lowFeePercentage,\r\n        uint256 _mediumFeePercentage,\r\n        uint256 _highFeePercentage,\r\n        uint256 _maxCap\r\n    )\r\n    public returns(NokuCustomPresale customPresale)\r\n    {\r\n        customPresale = new NokuCustomPresale(\r\n            _startBlock,\r\n            _endBlock,\r\n            _minDeposit,\r\n            _wallet,\r\n            _providerWallet,\r\n            _maxWhitelistLength,\r\n            _whitelistThreshold,\r\n            _feeThreshold1,\r\n            _feeThreshold2,\r\n            _lowFeePercentage,\r\n            _mediumFeePercentage,\r\n            _highFeePercentage,\r\n            _maxCap\r\n        );\r\n\r\n        // Transfer NokuCustomPresale ownership to the client\r\n        customPresale.transferOwnership(msg.sender);\r\n\r\n        require(pricingPlan.payFee(SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"name\":\"setPricingPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_providerWallet\",\"type\":\"address\"},{\"name\":\"_maxWhitelistLength\",\"type\":\"uint256\"},{\"name\":\"_whitelistThreshold\",\"type\":\"uint256\"},{\"name\":\"_feeThreshold1\",\"type\":\"uint256\"},{\"name\":\"_feeThreshold2\",\"type\":\"uint256\"},{\"name\":\"_lowFeePercentage\",\"type\":\"uint256\"},{\"name\":\"_mediumFeePercentage\",\"type\":\"uint256\"},{\"name\":\"_highFeePercentage\",\"type\":\"uint256\"},{\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"createCustomPresale\",\"outputs\":[{\"name\":\"customPresale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LogNokuCustomPresaleServiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pricingPlan\",\"type\":\"address\"}],\"name\":\"LogPricingPlanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NokuCustomPresaleService","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3","Library":"","SwarmSource":"bzzr://a8bdbe4130a34ec449a3557ff1054c40a92d538ad7416daf0c4cc0cc44c9ed0d"}]}