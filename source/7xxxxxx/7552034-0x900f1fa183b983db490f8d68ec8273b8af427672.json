{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21;\r\n\r\n\r\nlibrary sMath {\r\n    function multiply(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function division(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n\r\n    function subtract(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function plus(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public crowdOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function transferCrowdOwner(address newCrowdOwner) onlyOwner public {\r\n        crowdOwner = newCrowdOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns(uint256);\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\n\r\n\r\ncontract StandardToken is ERC20{\r\n    using sMath\r\n    for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) balances_crowd;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    uint256 totalSupply_;\r\n\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to].plus(_value) > balances[_to]);\r\n        uint previousBalances = balances[_from].plus(balances[_to]);\r\n        balances[_from] = balances[_from].subtract(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balances[_from].plus(balances[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOfDef(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n     \r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner].plus(balances_crowd[_owner]);\r\n    }\r\n    \r\n    function balanceOfCrowd(address _owner) public view returns(uint256 balance) {\r\n        return balances_crowd[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title 2Percent\r\n */\r\n\r\ncontract TWOPercent is StandardToken, owned {\r\n    uint public INITIAL_SUPPLY = 2000000000;\r\n\tstring public name = 'TWOPercent';\r\n\tstring public symbol = 'TPCT';\r\n\tuint public decimals = 18;\r\n    \r\n\r\n    bool public frozenAll = false;\r\n\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event FrozenAll(bool stop);\r\n    event Burn(address indexed from, uint256 value);\r\n    event LockEvent(address from, address to, uint startLock, uint endLock, uint256 value);\r\n    event Aborted();\r\n    \r\n    struct transForAddr {\r\n        address fromAddr;\r\n        address toAddr;\r\n        uint8 sendFlag ; // 1 send, 0 receive\r\n        uint256 amount;\r\n        uint256 balances;\r\n        uint256 balance_crowd;\r\n        uint regdate;\r\n    }\r\n    \r\n    struct lockForAddr {\r\n        uint startLock;\r\n        uint endLock;\r\n    }\r\n    \r\n    mapping(address => transForAddr[]) transForAddrs;\r\n    mapping(address => lockForAddr) lockForAddrs;\r\n    \r\n    \r\n    function setLockForAddr(address _address, uint _startLock, uint _endLock) onlyOwner public {\r\n        lockForAddrs[_address] = lockForAddr(_startLock, _endLock);\r\n    }\r\n    \r\n    function getLockForAddr(address _address)  public view returns (uint, uint) {\r\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\r\n        return (_lockForAddr.startLock, _lockForAddr.endLock);\r\n    }\r\n    \r\n    function getLockStartForAddr(address _address)  public view returns (uint) {\r\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\r\n        return _lockForAddr.startLock;\r\n    }\r\n    \r\n    function getLockEndForAddr(address _address)  public view returns (uint) {\r\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\r\n        return _lockForAddr.endLock;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        \r\n        totalSupply_ = INITIAL_SUPPLY * 10 ** uint256(decimals);\r\n        balances[msg.sender] = totalSupply_;\r\n        \r\n        emit Transfer(address(0x0), msg.sender, totalSupply_);\r\n    }\r\n    \r\n    \r\n    function transForAddrsCnt(address _address) public view returns (uint) {\r\n        return transForAddrs[_address].length;\r\n    }\r\n    \r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0)); // Prevent transfer to 0x0 address. Use burn() instead\r\n        //require(balances[_from] >= _value); \r\n        require(balances[_from].plus(balances_crowd[_from]) >= _value); \r\n        require(balances[_to].plus(_value) >= balances[_to]); \r\n        require(!frozenAccount[_from]); \r\n        require(!frozenAccount[_to]); \r\n        require(!frozenAll); \r\n\r\n        if(balances[_from] >= _value) {\r\n            balances[_from] = balances[_from].subtract(_value);    \r\n        } else {\r\n            if(getLockStartForAddr(_from) > 0) {\r\n            \r\n                uint kstNow = now + 32400;\r\n                \r\n                if(!(getLockStartForAddr(_from) < kstNow &&  kstNow < getLockEndForAddr(_from))) {\r\n                    uint firstValue = _value.subtract(balances[_from]);\r\n                    uint twiceValue = _value.subtract(firstValue);\r\n                    \r\n                    balances_crowd[_from] = balances_crowd[_from].subtract(firstValue);\r\n                    balances[_from] = balances[_from].subtract(twiceValue);\r\n                }else {\r\n                    emit LockEvent(_from, _to, getLockStartForAddr(_from), getLockEndForAddr(_from), _value);\r\n                    emit Aborted();\r\n                    //emit Transfer(_from, _to, _value);\r\n                    return;\r\n                }\r\n            }else {\r\n                emit LockEvent(_from, _to, getLockStartForAddr(_from), getLockEndForAddr(_from), _value);\r\n                emit Aborted();\r\n                //emit Transfer(_from, _to, _value);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if(msg.sender == crowdOwner)  balances_crowd[_to] = balances_crowd[_to].plus(_value);\r\n        else balances[_to] = balances[_to].plus(_value);\r\n        \r\n        addTransForAddrs(_from, _to, 1, _value, balances[_from], balances_crowd[_from]);\r\n        addTransForAddrs(_to, _from, 0, _value, balances[_to], balances_crowd[_to]);        \r\n        \r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balances[target] = balances[target].plus(mintedAmount);\r\n        totalSupply_ = totalSupply_.plus(mintedAmount);\r\n        emit Transfer(address(0), address(this), mintedAmount);\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns(bool success) {\r\n        require(balances[msg.sender] >= _value); // Check if the sender has enough\r\n        balances[msg.sender] = balances[msg.sender].subtract(_value); // Subtract from the sender\r\n        totalSupply_ = totalSupply_.subtract(_value); // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function frozenAllChange(bool stop) onlyOwner public {\r\n        frozenAll = stop;\r\n        emit FrozenAll(frozenAll);\r\n    }\r\n        \r\n    function addTransForAddrs(address _fromAddr, address _toAddr, uint8 _status, uint256 _amount, uint256 _balances, uint256 _balances_crowd) internal {\r\n        transForAddrs[_fromAddr].push(transForAddr(_fromAddr, _toAddr, _status, _amount, _balances, _balances_crowd, now));\r\n    }\r\n    \r\n    function getTransForAddrs(address _address, uint256 _index) onlyOwner public view returns (address, address, uint8, uint256, uint256, uint256, uint) {\r\n        if(_index > 0) require(transForAddrsCnt(_address) >= _index.subtract(1));\r\n        \r\n        transForAddr storage _transForAddr = transForAddrs[_address][_index];\r\n        return (_transForAddr.fromAddr, _transForAddr.toAddr, _transForAddr.sendFlag, _transForAddr.amount, _transForAddr.balances, _transForAddr.balance_crowd, _transForAddr.regdate);\r\n    }  \r\n    \r\n    \r\n    function getTransForAddrsAll(address _address) onlyOwner public view returns (address[] memory, uint8[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint[] memory) {\r\n        address[] memory _addressTwo = new address[](transForAddrs[_address].length);\r\n        uint8[] memory _status = new uint8[](transForAddrs[_address].length);\r\n        uint256[] memory _amount = new uint256[](transForAddrs[_address].length);\r\n        uint256[] memory _balances = new uint256[](transForAddrs[_address].length);\r\n        uint256[] memory _balances_crowd = new uint256[](transForAddrs[_address].length);\r\n        uint[] memory _regdate = new uint[](transForAddrs[_address].length);\r\n     \r\n        for(uint i = 0; i < transForAddrs[_address].length; i++){\r\n           // _addressOne[i] = transForAddrs[_address][i].fromAddr;\r\n            _addressTwo[i] = transForAddrs[_address][i].toAddr;            \r\n            _status[i] = transForAddrs[_address][i].sendFlag;\r\n            _amount[i] = transForAddrs[_address][i].amount;\r\n            _balances[i] = transForAddrs[_address][i].balances;\r\n            _balances_crowd[i] = transForAddrs[_address][i].balance_crowd;\r\n            _regdate[i] = transForAddrs[_address][i].regdate;\r\n        }\r\n        \r\n        return ( _addressTwo, _status, _amount, _balances, _balances_crowd, _regdate);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        require(!frozenAccount[_spender]); \r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(!frozenAccount[_from]); \r\n        require(!frozenAccount[_to]); \r\n\r\n        balances[_from] = balances[_from].subtract(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].subtract(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_startLock\",\"type\":\"uint256\"},{\"name\":\"_endLock\",\"type\":\"uint256\"}],\"name\":\"setLockForAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockStartForAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"frozenAllChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCrowdOwner\",\"type\":\"address\"}],\"name\":\"transferCrowdOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transForAddrsCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockEndForAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTransForAddrsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTransForAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockForAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfDef\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfCrowd\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"FrozenAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TWOPercent","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://252725090fa6aef0ec28be28bd1dd9cd1e0a262803bdade055ae0492c7a7a115"}]}