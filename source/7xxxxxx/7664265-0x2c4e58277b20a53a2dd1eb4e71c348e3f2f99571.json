{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SYNCContract is Ownable\r\n{\r\n\r\nusing SafeMath for uint256;\r\n    mapping(address => uint256) internal balances;\r\n\r\n    mapping(address => uint256) internal totalBalances;\r\n    \r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    mapping (address => uint256) internal totalAllowed;\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n    */\r\n    uint256 internal totSupply;\r\n\r\n    /**\r\n     * @dev Gets the total supply of tokens currently in circulation.\r\n     * @return An uint256 representing the amount of tokens already minted.\r\n    */\r\n    function totalSupply() view public returns(uint256)\r\n    {\r\n        return totSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the sum of all tokens that this address allowed others spend on its expence. \r\n     * Basically a sum of all allowances from this address\r\n     * @param _owner The address to query the allowances of.\r\n     * @return An uint256 representing the sum of all allowances of the passed address.\r\n    */\r\n    function getTotalAllowed(address _owner) view public returns(uint256)\r\n    {\r\n        return totalAllowed[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the sum of all tokens that this address allowed others spend on its expence. \r\n     * @param _owner The address to query the allowances of.\r\n     * @param _newValue The amount of tokens allowed by the _owner address.\r\n    */\r\n    function setTotalAllowed(address _owner, uint256 _newValue) internal\r\n    {\r\n        totalAllowed[_owner]=_newValue;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the total supply of tokens currently in circulation. \r\n    * Callable only internally and only when total supply should be changed for consistency\r\n    * @param _newValue An uint256 representing the amount of tokens already minted.\r\n    */\r\n\r\n    function setTotalSupply(uint256 _newValue) internal\r\n    {\r\n        totSupply=_newValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n\r\n    function balanceOf(address _owner) view public returns(uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the balance of the specified address. \r\n     * Only callable from inside smart contract by method updateInvestorTokenBalance, which is callable only by contract owner\r\n     * @param _investor The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function setBalanceOf(address _investor, uint256 _newValue) internal\r\n    {\r\n        require(_investor!=0x0000000000000000000000000000000000000000);\r\n        balances[_investor]=_newValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n\r\n    function allowance(address _owner, address _spender) view public returns(uint256)\r\n    {\r\n        require(msg.sender==_owner || msg.sender == _spender || msg.sender==getOwner());\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Set the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _newValue uint256 The amount of tokens allowed to spend by _spender on _owsner's expence.\r\n     */\r\n    function setAllowance(address _owner, address _spender, uint256 _newValue) internal\r\n    {\r\n        require(_spender!=0x0000000000000000000000000000000000000000);\r\n        uint256 newTotal = getTotalAllowed(_owner).sub(allowance(_owner, _spender)).add(_newValue);\r\n        require(newTotal <= balanceOf(_owner));\r\n        allowed[_owner][_spender]=_newValue;\r\n        setTotalAllowed(_owner,newTotal);\r\n    }\r\n\r\n\r\n   constructor() public\r\n    {\r\n        // require(_rate > 0);\r\n    //    require(_cap > 0);\r\n        //rate=_rate;\r\n        cap = 48000000*1000000000000000000;\r\n    }\r\n\r\n    \r\n    bytes32 public constant name = \"SYNCoin\";\r\n\r\n    bytes4 public constant symbol = \"SYNC\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public cap;\r\n\r\n    bool public mintingFinished;\r\n\r\n    /** @dev Fires on every transportation of tokens, both minting and transfer\r\n     *  @param _from address The address from which transfer has been initialized.\r\n     *  @param _to address The address to where the tokens are headed.\r\n     *  @param value uint256 The amount of tokens transferred\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\r\n\r\n    /** @dev Fires when owner allows spender to spend value of tokens on their(owner's) expence\r\n     *  @param _owner address The address from which allowance has been initialized.\r\n     *  @param _spender address The address who was allowed to spend tokens on owner's expence.\r\n     *  @param value uint256 The amount of tokens allowed for spending\r\n     */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 value);\r\n\r\n    /** @dev Fires on every creation of new tokens\r\n     *  @param _to address The owner address of new tokens.\r\n     *  @param amount uint256 The amount of tokens created\r\n     */\r\n    event Mint(address indexed _to, uint256 amount);\r\n\r\n    /** @dev fires when minting process is complete and no new tokens can be minted\r\n    */\r\n    event MintFinished();\r\n\r\n    // /** @dev Fires on every destruction of existing tokens\r\n    //  *  @param to address The owner address of tokens burned.\r\n    //  *  @param value uint256 The amount of tokens destroyed\r\n    //  */\r\n    // event Burn(address indexed _owner, uint256 _value);\r\n\r\n    /** @dev Check if tokens are no more mintable\r\n    */\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function getName() pure public returns(bytes32)\r\n    {\r\n        return name;\r\n    }\r\n\r\n    function getSymbol() pure public returns(bytes4)\r\n    {\r\n        return symbol;\r\n    }\r\n\r\n    function getTokenDecimals() pure public returns(uint256)\r\n    {\r\n        return decimals;\r\n    }\r\n    \r\n    function getMintingFinished() view public returns(bool)\r\n    {\r\n        return mintingFinished;\r\n    }\r\n\r\n    /** @dev Get maximum amount of how many tokens can be minted by this contract\r\n     * @return uint256 The amount of how many tokens can be minted by this contract\r\n    */\r\n    function getTokenCap() view public returns(uint256)\r\n    {\r\n        return cap;\r\n    }\r\n\r\n    /** @dev Set maximum amount of how many tokens can be minted by this contract\r\n    */\r\n    function setTokenCap(uint256 _newCap) external onlyOwner\r\n    {\r\n        cap=_newCap;\r\n    }\r\n\r\n    /** @dev Set the balance of _investor as _newValue. Only usable by contract owner\r\n     * @param _investor address The address whose balance is updated\r\n     * @param _newValue uint256. The new token balance of _investor \r\n    */\r\n    function updateTokenInvestorBalance(address _investor, uint256 _newValue) onlyOwner external\r\n    {\r\n        setTokens(_investor,_newValue);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n    */\r\n\r\n    function transfer(address _to, uint256 _value) external{\r\n        require(msg.sender!=_to);\r\n        require(_value <= balanceOf(msg.sender));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        setBalanceOf(msg.sender, balanceOf(msg.sender).sub(_value));\r\n        setBalanceOf(_to, balanceOf(_to).add(_value));\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external {\r\n        require(_value <= balanceOf(_from));\r\n        require(_value <= allowance(_from,_to));\r\n        setBalanceOf(_from, balanceOf(_from).sub(_value));\r\n        setBalanceOf(_to, balanceOf(_to).add(_value));\r\n        setAllowance(_from,_to,allowance(_from,_to).sub(_value));\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n * @dev Approve the passed address to spend the specified amount of tokens on expence of msg.sender.\r\n *\r\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n * @param _owner The address of the owner which allows tokens to a spender\r\n * @param _spender The address which will spend the funds.\r\n * @param _value The amount of tokens to be spent.\r\n */\r\n    function approve(address _owner,address _spender, uint256 _value) external {\r\n        require(msg.sender ==_owner);\r\n        setAllowance(msg.sender,_spender, _value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _owner The address of the owner which allows tokens to a spender\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _owner, address _spender, uint _addedValue) external{\r\n        require(msg.sender==_owner);\r\n        setAllowance(_owner,_spender,allowance(_owner,_spender).add(_addedValue));\r\n        emit Approval(_owner, _spender, allowance(_owner,_spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _owner The address of the owner which allows tokens to a spender\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _owner,address _spender, uint _subtractedValue) external{\r\n        require(msg.sender==_owner);\r\n\r\n        uint oldValue = allowance(_owner,_spender);\r\n        if (_subtractedValue > oldValue) {\r\n            setAllowance(_owner,_spender, 0);\r\n        } else {\r\n            setAllowance(_owner,_spender, oldValue.sub(_subtractedValue));\r\n        }\r\n        emit Approval(_owner, _spender, allowance(_owner,_spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n\r\n\r\n    function mint(address _to, uint256 _amount) canMint internal{\r\n        require(totalSupply().add(_amount) <= getTokenCap());\r\n        setTotalSupply(totalSupply().add(_amount));\r\n        setBalanceOf(_to, balanceOf(_to).add(_amount));\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes balance of _to to _amount, also increments or decrements total token supply depending on whether balance is increased or decreased\r\n     * @param _to address The address which token balance is updated\r\n     * @param _amount uint256 The new balance\r\n    */\r\n    function setTokens(address _to, uint256 _amount) canMint internal{\r\n        if(_amount > balanceOf(_to)){\r\n            uint256 diff = _amount.sub(balanceOf(_to));\r\n            require( totalSupply().add(diff) <= getTokenCap());\r\n            setTotalSupply(totalSupply().add(diff));\r\n            setBalanceOf(_to, _amount);\r\n        }else{\r\n            uint256 diff = balanceOf(_to).sub(_amount);\r\n            setTotalSupply(totalSupply().sub(diff));\r\n            setBalanceOf(_to, _amount);\r\n        }\r\n        emit Transfer(address(0), _to, _amount);\r\n    }    \r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() canMint onlyOwner external{\r\n        emit MintFinished();\r\n    }\r\n\r\n    //Crowdsale\r\n    \r\n    // how many token units a buyer gets per wei\r\n    //uint256 internal rate;\r\n\r\n    // amount of raised money in wei\r\n    //uint256 internal weiRaised;\r\n    \r\n    /**\r\n     * event for token purchase logging\r\n     * @param _beneficiary who got the tokens\r\n     * @param value uint256 The amount of weis paid for purchase\r\n     * @param amount uint256 The amount of tokens purchased\r\n     */\r\n    //event TokenPurchase(address indexed _beneficiary, uint256 value, uint256 amount);\r\n\r\n     /**\r\n     * event for when current balance of smart contract is emptied by contract owner\r\n     * @param amount uint  The amount of wei withdrawn from contract balance\r\n     * @param timestamp uint The timestamp of withdrawal\r\n     */\r\n    //event InvestmentsWithdrawn(uint indexed amount, uint indexed timestamp);\r\n\r\n    /**\r\n     @dev Fallback function for when contract is simply sent ether. This calls buyTokens() method\r\n    */\r\n    // function () external payable {\r\n    //     buyTokens(msg.sender);\r\n    // }\r\n\r\n    /**\r\n     * @dev Just a getter for token rate\r\n     * @return uint256 Current token rate stored in this contract and by which new tokens are minted\r\n    */\r\n    // function getTokenRate() view public returns(uint256)\r\n    // {\r\n    //     return rate;\r\n    // }\r\n\r\n    /**\r\n     * @dev Setter for token rate. Callable by contract owner only\r\n     * @param _newRate uint256 New token rate stored in this contract\r\n    */\r\n    // function setTokenRate(uint256 _newRate) external onlyOwner\r\n    // {\r\n    //     rate = _newRate;\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns how much wei was ever received by this smart contract\r\n    */\r\n    // function getWeiRaised() view external returns(uint256)\r\n    // {\r\n    //     return weiRaised;\r\n    // }\r\n\r\n    /**\r\n     * @dev low level token purchase function. Can be called from fallback function or directly\r\n     * @param _buyer address The address which will receive bought tokens\r\n    */\r\n    // function buyTokens(address _buyer) public payable{\r\n    //     require(msg.value > 0);\r\n    //     uint256 weiAmount = msg.value;\r\n\r\n    //     // calculate token amount to be created\r\n    //     uint256 tokens = getTokenAmount(weiAmount);\r\n    //     require(validPurchase(tokens));\r\n\r\n    //     // update state\r\n    //     weiRaised = weiRaised.add(weiAmount);\r\n    //     mint(_buyer, tokens);\r\n    //     emit TokenPurchase(_buyer, weiAmount, tokens);\r\n    // }\r\n\r\n    /**\r\n     * @dev Get how many tokens can be received for this amount of wei.\r\n     * @param weiAmount uint256 The amount of wei\r\n     * @return uint256 How many tokens to be bought for weiAmount\r\n    */\r\n    // function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    //     return weiAmount.div(getTokenRate());\r\n    // }\r\n\r\n    /**\r\n     * @dev Function for smart contract owner to withdraw all wei from contract's balance\r\n    */\r\n    // function withdrawInvestments() external onlyOwner{\r\n    //     uint  amount = address(this).balance;\r\n    //     getOwner().transfer(amount * 1 wei);\r\n    //     emit InvestmentsWithdrawn(amount, block.timestamp);\r\n    // }\r\n\r\n    /**\r\n     * @dev Get current balance of smart contract in wei. Callable only by contract owner\r\n     * @return uint256 Current contract balance if wei\r\n    */\r\n    \r\n    // function getCurrentInvestments() view external onlyOwner returns(uint256)\r\n    // {\r\n    //     return address(this).balance;\r\n    // }\r\n\r\n    /**\r\n     * @dev Get the address of owner of this smart contract\r\n     * @return address\r\n    */\r\n    function getOwner() view internal returns(address payable)\r\n    {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @return true if the transaction can buy tokens\r\n    */ \r\n    // function validPurchase(uint256 tokensAmount) internal pure returns (bool) {\r\n    //     bool nonZeroPurchase = tokensAmount != 0;\r\n    //     return nonZeroPurchase;\r\n    // }\r\n    function destroy() external onlyOwner{\r\n        selfdestruct(getOwner());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateTokenInvestorBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SYNCContract","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://136018328dcecf00bd999c01543a5f89750f405648d75eeec83ac896c08e3ce4"}]}