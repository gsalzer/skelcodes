{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoMiningWarInterface {\r\n\tuint256 public roundNumber;\r\n    uint256 public deadline; \r\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\r\n    function isMiningWarContract() external pure returns(bool) {}\r\n}\r\ncontract CrystalAirdropGame {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public administrator;\r\n\t// mini game\r\n    uint256 private ROUND_TIME_MINING_WAR = 86400 * 7;\r\n    uint256 private BONUS_CRYSTAL = 5000000;\r\n    uint256 public TIME_DAY = 24 hours;\r\n\r\n    address public miningWarAddress;\r\n    CryptoMiningWarInterface public MiningWar;\r\n    /** \r\n    * @dev player information\r\n    */\r\n    mapping(address => Player) public players;\r\n    mapping(uint256 => Airdrop) public airdrops;\r\n   \r\n    struct Player {\r\n        uint256 miningWarRound;\r\n        uint256 noJoinAirdrop; \r\n        uint256 lastDayJoin;\r\n    }\r\n    struct Airdrop {\r\n        uint256 day;\r\n        uint256 prizeCrystal;\r\n    }\r\n    event AirdropPrize(\r\n        address playerJoin,\r\n        uint256 crystalBonus,\r\n        uint256 noJoinAirdrop,\r\n        uint256 noDayStartMiningWar\r\n    );\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface main contract\r\n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\r\n\r\n        initAirdrop();\r\n    }\r\n    function initAirdrop() private {\r\n        //                    day       prize crystals\r\n        airdrops[0] = Airdrop(1,            5000);   \r\n        airdrops[1] = Airdrop(2,            10000);   \r\n        airdrops[2] = Airdrop(3,            20000);   \r\n        airdrops[3] = Airdrop(4,            40000);   \r\n        airdrops[4] = Airdrop(5,            60000);   \r\n        airdrops[5] = Airdrop(6,            100000);   \r\n        airdrops[6] = Airdrop(7,            200000);   \r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n    function isAirdropContract() public pure returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n    function setAirdropPrize(uint256 idx, uint256 value) public \r\n    {\r\n       require( administrator == msg.sender );\r\n       airdrops[idx].prizeCrystal = value; \r\n    }\r\n     function setMiningWarInterface(address _addr) public \r\n    {\r\n        require( administrator == msg.sender );\r\n        \r\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\r\n\r\n        require(miningWarInterface.isMiningWarContract() == true);\r\n        \r\n        miningWarAddress = _addr;\r\n        \r\n        MiningWar = miningWarInterface;\r\n    }\r\n\r\n    function setupMiniGame(uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public pure\r\n    {\r\n\r\n    }\r\n\r\n    function joinAirdrop() public \r\n    {   \r\n        require(tx.origin == msg.sender);\r\n        require(MiningWar.deadline() > now);\r\n\r\n        Player storage p = players[msg.sender];\r\n        \r\n        uint256 miningWarRound      = MiningWar.roundNumber();\r\n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\r\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\r\n\r\n        if (noDayEndMiningWar > 7) revert();\r\n\r\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\r\n \r\n        if (p.miningWarRound != miningWarRound) {\r\n            p.noJoinAirdrop = 1;\r\n            p.miningWarRound= miningWarRound;\r\n        } else if (p.lastDayJoin >= noDayStartMiningWar) {\r\n            revert();\r\n        } else {\r\n            p.noJoinAirdrop += 1;\r\n        }\r\n        p.lastDayJoin = noDayStartMiningWar;\r\n\r\n        airdropPrize(msg.sender);\r\n    }\r\n\r\n    function airdropPrize(address _addr) private\r\n    {\r\n       Player memory p = players[_addr];\r\n       \r\n       uint256 prizeCrystal = 0;\r\n       if (p.lastDayJoin > 0 && p.lastDayJoin <= 7)\r\n           prizeCrystal = airdrops[p.lastDayJoin - 1].prizeCrystal;\r\n       if (p.noJoinAirdrop >= 7) \r\n           prizeCrystal = SafeMath.add(prizeCrystal, BONUS_CRYSTAL);  \r\n       if (prizeCrystal != 0)\r\n           MiningWar.addCrystal(_addr, prizeCrystal);\r\n\r\n       emit AirdropPrize(_addr, prizeCrystal, p.noJoinAirdrop, p.lastDayJoin);\r\n    }\r\n    function getData(address _addr) public view returns(uint256 miningWarRound, uint256 noJoinAirdrop, uint256 lastDayJoin, uint256 nextTimeAirdropJoin)\r\n    {\r\n         Player memory p = players[_addr];\r\n\r\n         miningWarRound = p.miningWarRound;\r\n         noJoinAirdrop  = p.noJoinAirdrop;\r\n         lastDayJoin    = p.lastDayJoin;\r\n         nextTimeAirdropJoin = getNextTimeAirdropJoin(_addr);\r\n\r\n        if (miningWarRound != MiningWar.roundNumber()) {\r\n            noJoinAirdrop = 0;\r\n            lastDayJoin   = 0;\r\n        }   \r\n    }\r\n    function getNextCrystalReward(address _addr) public view returns(uint256)\r\n    {\r\n        Player memory p = players[_addr];\r\n        uint256 miningWarRound      = MiningWar.roundNumber();\r\n        uint256 timeStartMiningWar  = SafeMath.sub(MiningWar.deadline(), ROUND_TIME_MINING_WAR); \r\n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\r\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\r\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\r\n\r\n        if (noDayStartMiningWar > 7) return 0;\r\n        if (p.lastDayJoin < noDayStartMiningWar) return airdrops[noDayStartMiningWar - 1].prizeCrystal; \r\n        return airdrops[noDayStartMiningWar].prizeCrystal;\r\n    }\r\n    function getNextTimeAirdropJoin(address _addr) public view returns(uint256)\r\n    {\r\n        Player memory p = players[_addr];\r\n\r\n        uint256 miningWarRound      = MiningWar.roundNumber();\r\n        uint256 timeStartMiningWar  = SafeMath.sub(MiningWar.deadline(), ROUND_TIME_MINING_WAR); \r\n        uint256 timeEndMiningWar    = MiningWar.deadline() - now;\r\n        uint256 noDayEndMiningWar   = SafeMath.div(timeEndMiningWar, TIME_DAY);\r\n\r\n        uint256 noDayStartMiningWar = SafeMath.sub(7, noDayEndMiningWar);\r\n\r\n        if (p.miningWarRound != miningWarRound) return 0;\r\n\r\n        if (p.lastDayJoin < noDayStartMiningWar) return 0;\r\n\r\n        return SafeMath.add(SafeMath.mul(noDayStartMiningWar, TIME_DAY), timeStartMiningWar);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"miningWarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"miningWarRound\",\"type\":\"uint256\"},{\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"name\":\"lastDayJoin\",\"type\":\"uint256\"},{\"name\":\"nextTimeAirdropJoin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNextTimeAirdropJoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"prizeCrystal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNextCrystalReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAirdropContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"miningWarRound\",\"type\":\"uint256\"},{\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"name\":\"lastDayJoin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAirdropPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerJoin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crystalBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noJoinAirdrop\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noDayStartMiningWar\",\"type\":\"uint256\"}],\"name\":\"AirdropPrize\",\"type\":\"event\"}]","ContractName":"CrystalAirdropGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee8287fc822a92a8c62ce630575d89f86e154e4e84efba40fb9e6552011ba72a"}]}