{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There tis no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Owner can call this function.\");\r\n        _;\r\n    }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0),\"Use new owner address.\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    } \r\n}\r\n\r\n  \r\ncontract ERC223 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function roleOf(address who) public view returns (uint256);\r\n    function setUserRole(address _user_address, uint256 _role_define) public;\r\n    function transfer(address to, uint256 value) public;\r\n    function transfer(address to, uint value, bytes memory data) public;\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n    function approve(address spender, uint256 value) public;\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Interface for the contract which implements the ERC223 fallback\r\ncontract ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\r\n}\r\n\r\ncontract WRTToken is Ownable, ERC223 {\r\n    using SafeMath for uint256;\r\n    // Token properties\r\n    string public name = \"Warrior Token\";\r\n    string public symbol = \"WRT\";\r\n    uint256 public decimals = 18;\r\n    uint256 public numberDecimal18 = 1000000000000000000;\r\n    uint256 public RATE = 360e18;\r\n\r\n    // Distribution of tokens\r\n    uint256 public _totalSupply = 100000000e18;\r\n    uint256 public _presaleSupply = 5000000e18; // 5% for presale\r\n    uint256 public _projTeamSupply = 5000000e18; // 5% for project team ( will be time sealed for 6 months )\r\n    uint256 public _PartnersSupply = 10000000e18; // 10% for partners and advisors ( will be time sealed for 12 months )\r\n    uint256 public _PRSupply = 9000000e18; // 9% for marketing and bonus \r\n    uint256 public _metaIcoSupply = 1000000e18; // 1% for Expenses done during the ICO i.e. marketing\r\n    uint256 public _icoSupply = 30000000e18; // 30% for ICO\r\n\r\n    //number of total tokens sold in main sale\r\n    uint256 public totalNumberTokenSoldMainSale = 0;\r\n    uint256 public totalNumberTokenSoldPreSale = 0;\r\n\r\n    uint256 public softCapUSD = 5000000;\r\n    uint256 public hardCapUSD = 10000000;\r\n    \r\n    bool public mintingFinished = false;\r\n    bool public tradable = true;\r\n    bool public active = true;\r\n\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) balances;\r\n    \r\n    // role for each account\r\n    // 0 => No Role, 1 =>Admin, 2 => Team, 3=> Advisors, 4=> Partner, 5=> Marketing, 6=> MetaICO\r\n    \r\n    mapping (address => uint256) role;\r\n    \r\n    // time seal for upper management\r\n    mapping (address => uint256) vault;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n\r\n    mapping (address => bool) whitelist;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public mainSaleStartTime; \r\n    uint256 public mainSaleEndTime;\r\n    uint256 public preSaleStartTime;\r\n    uint256 public preSaleEndTime;\r\n    \r\n    uint256 public projsealDate; // seal date for project team \r\n    uint256 public partnersealDate; // seal date for partners and advisors ( will be time sealed for 12 months )\r\n\r\n\r\n    uint256 contractDeployedTime;\r\n    \r\n\r\n    // Wallet Address of Token\r\n    address payable public  multisig;\r\n\r\n    // how many token units a buyer get in base unit \r\n\r\n    event MintFinished();\r\n    event StartTradable();\r\n    event PauseTradable();\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier canTradable() {\r\n        require(tradable);\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        require(active);\r\n        _;\r\n    }\r\n    \r\n    modifier saleIsOpen(){\r\n        require((mainSaleStartTime <= now && now <= mainSaleEndTime) || (preSaleStartTime <= now && now <= preSaleEndTime));\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    // @notice WarriorToken Contract\r\n    // @return the transaction address\r\n    constructor(address payable _multisig, uint256 _preSaleStartTime, uint256 _mainSaleStartTime) public {\r\n        require(_multisig != address(0x0),\"Invalid address.\");\r\n        require(_mainSaleStartTime > _preSaleStartTime);\r\n        multisig = _multisig;\r\n\r\n\r\n        mainSaleStartTime = _mainSaleStartTime;\r\n        preSaleStartTime = _preSaleStartTime;\r\n        // for now the token sale will run for 60 days\r\n        mainSaleEndTime = mainSaleStartTime + 60 days;\r\n        preSaleEndTime = preSaleStartTime + 60 days;\r\n        contractDeployedTime = now;\r\n\r\n        balances[multisig] = _totalSupply;\r\n\r\n        // The project team can get their token 180days after the main sale ends\r\n        projsealDate = mainSaleEndTime + 180 days;\r\n        // The partners and advisors can get their token 1 year after the main sale ends\r\n        partnersealDate = mainSaleEndTime + 365 days;\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getTimePassed() public view returns (uint256) {\r\n        return (now - contractDeployedTime).div(1 days);\r\n    }\r\n\r\n    function isPresale() public view returns (bool) {\r\n        return now < preSaleEndTime && now > preSaleStartTime;\r\n    }\r\n\r\n\r\n    function applyBonus(uint256 tokens) public view returns (uint256) {\r\n        if ( now < (preSaleStartTime + 1 days) ) {\r\n            return tokens.mul(20).div(10); // 100% bonus     \r\n        } else if ( now < (preSaleStartTime + 7 days) ) {\r\n            return tokens.mul(15).div(10); // 50% bonus\r\n        } else if ( now < (preSaleStartTime + 14 days) ) {\r\n            return tokens.mul(13).div(10); // 30% bonus\r\n        } else if ( now < (preSaleStartTime + 21 days) ) {\r\n            return tokens.mul(115).div(100); // 15% bonus\r\n        } else if ( now < (preSaleStartTime + 28 days) ) {\r\n            return tokens.mul(11).div(10); // 10% bonus\r\n        } \r\n        return tokens; // if reached till hear means no bonus \r\n    }\r\n\r\n    // Payable method\r\n    // @notice Anyone can buy the tokens on tokensale by paying ether\r\n    function () external payable {        \r\n        tokensale(msg.sender);\r\n    }\r\n\r\n    // @notice tokensale\r\n    // @param recipient The address of the recipient\r\n    // @return the transaction address and send the event as Transfer\r\n    function tokensale(address recipient) internal saleIsOpen isActive {\r\n        require(recipient != address(0x0));\r\n        require(validPurchase());\r\n        require(whitelisted(recipient));\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        uint256 numberToken = weiAmount.mul(RATE).div(1 ether);\r\n\r\n        numberToken = applyBonus(numberToken);\r\n        \r\n        // An investor is only allowed to buy tokens between 333 to 350,000 tokens\r\n        require(numberToken >= 333e18 && numberToken <= 350000e18);\r\n\r\n        \r\n        // if its a presale\r\n        if (isPresale()) {\r\n            require(_presaleSupply >= numberToken);\r\n            totalNumberTokenSoldPreSale = totalNumberTokenSoldPreSale.add(numberToken);\r\n            _presaleSupply = _presaleSupply.sub(numberToken);\r\n        // as the validPurchase checks for the period, else block will only mean its main sale\r\n        } else {\r\n            require(_icoSupply >= numberToken);\r\n            totalNumberTokenSoldMainSale = totalNumberTokenSoldMainSale.add(numberToken);\r\n            _icoSupply = _icoSupply.sub(numberToken);\r\n        }\r\n    \r\n        updateBalances(recipient, numberToken);\r\n        forwardFunds();\r\n        whitelist[recipient] = false;\r\n    }\r\n\r\n    function transFromProjTeamSupply(address receiver, uint256 tokens) public onlyOwner {\r\n \r\n        require(tokens <= _projTeamSupply);\r\n        updateBalances(receiver, tokens);\r\n        _projTeamSupply = _projTeamSupply.sub(tokens);\r\n        role[receiver] = 2;\r\n    }\r\n\r\n    function transFromPartnersSupply(address receiver, uint256 tokens) public onlyOwner {\r\n        require(tokens <= _PartnersSupply);\r\n        updateBalances(receiver, tokens);        \r\n        _PartnersSupply = _PartnersSupply.sub(tokens);\r\n        role[receiver] = 4;\r\n    }\r\n    \r\n    function setUserRole(address _user, uint256 _role) public onlyOwner {\r\n        role[_user] = _role;\r\n    }\r\n\r\n    function transFromPRSupply(address receiver, uint256 tokens) public onlyOwner {\r\n        require(tokens <= _PRSupply);\r\n        updateBalances(receiver, tokens);\r\n        _PRSupply = _PRSupply.sub(tokens);\r\n        role[receiver] = 5;\r\n    }\r\n\r\n    function transFromMetaICOSupply(address receiver, uint256 tokens) public onlyOwner {\r\n        require(tokens <= _metaIcoSupply);\r\n        updateBalances(receiver, tokens);\r\n        _metaIcoSupply = _metaIcoSupply.sub(tokens);\r\n        role[receiver] = 6;\r\n    }\r\n\r\n    function setWhitelistStatus(address user, bool status) public onlyOwner returns (bool) {\r\n\r\n        whitelist[user] = status; \r\n        \r\n        return whitelist[user];\r\n    }\r\n    \r\n    function setWhitelistForBulk(address[] memory listAddresses, bool status) public onlyOwner {\r\n        for (uint256 i = 0; i < listAddresses.length; i++) {\r\n            whitelist[listAddresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    // used to transfer manually when senders are using BTC\r\n    function transferToAll(address[] memory tos, uint256[] memory values) public onlyOwner canTradable isActive {\r\n        require(\r\n            tos.length == values.length\r\n            );\r\n        \r\n        for(uint256 i = 0; i < tos.length; i++){\r\n            require(_icoSupply >= values[i]);   \r\n            totalNumberTokenSoldMainSale = totalNumberTokenSoldMainSale.add(values[i]);\r\n            _icoSupply = _icoSupply.sub(values[i]);\r\n            updateBalances(tos[i],values[i]);\r\n        }\r\n    }\r\n\r\n    function transferToAllInPreSale(address[] memory tos, uint256[] memory values) public onlyOwner canTradable isActive {\r\n        require(\r\n            tos.length == values.length\r\n            );\r\n        \r\n        for(uint256 i = 0; i < tos.length; i++){\r\n            require(_presaleSupply >= values[i]);   \r\n            totalNumberTokenSoldPreSale = totalNumberTokenSoldPreSale.add(values[i]);\r\n            _presaleSupply = _presaleSupply.sub(values[i]);\r\n            updateBalances(tos[i],values[i]);\r\n        }\r\n    }\r\n    \r\n    function updateBalances(address receiver, uint256 tokens) internal {\r\n        balances[multisig] = balances[multisig].sub(tokens);\r\n        balances[receiver] = balances[receiver].add(tokens);\r\n        emit Transfer(multisig, receiver, tokens);\r\n    }\r\n\r\n    function whitelisted(address user) public view returns (bool) {\r\n        return whitelist[user];\r\n    }\r\n    \r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds()  internal {\r\n       multisig.transfer(msg.value);\r\n    }\r\n\r\n    \r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = (now >= mainSaleStartTime && now <= mainSaleEndTime) || (now >= preSaleStartTime && now <= preSaleEndTime);\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale current lot event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > mainSaleEndTime;\r\n    }\r\n\r\n    function hasPreSaleEnded() public view returns (bool) {\r\n        return now > preSaleEndTime;\r\n    }\r\n\r\n    // Set/change Multi-signature wallet address\r\n    function changeMultiSignatureWallet(address payable _multisig) public onlyOwner isActive {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    // Change ETH/Token exchange rate\r\n    function changeTokenRate(uint _tokenPrice) public onlyOwner isActive {\r\n        RATE = _tokenPrice;\r\n    }\r\n\r\n    // Set Finish Minting.\r\n    function finishMinting() public onlyOwner isActive {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n    }\r\n\r\n    // Start or pause tradable to Transfer token\r\n    function startTradable(bool _tradable) public onlyOwner isActive {\r\n        tradable = _tradable;\r\n        if (tradable)\r\n            emit StartTradable();\r\n        else\r\n            emit PauseTradable();\r\n    }\r\n    \r\n    function setActive(bool _active) public onlyOwner {\r\n        active = _active;\r\n    }\r\n    \r\n    //Change mainSaleStartTime to start ICO manually\r\n    function changeMainSaleStartTime(uint256 _mainSaleStartTime) public onlyOwner {\r\n        mainSaleStartTime = _mainSaleStartTime;\r\n    }\r\n\r\n    //Change mainSaleEndTime to end ICO manually\r\n    function changeMainSaleEndTime(uint256 _mainSaleEndTime) public onlyOwner {\r\n        mainSaleEndTime = _mainSaleEndTime;\r\n    }\r\n\r\n    function changePreSaleStartTime(uint256 _preSaleStartTime) public onlyOwner {\r\n        preSaleStartTime = _preSaleStartTime;\r\n    }\r\n\r\n    //Change mainSaleEndTime to end ICO manually\r\n    function changePreSaleEndTime(uint256 _preSaleEndTime) public onlyOwner {\r\n        preSaleEndTime = _preSaleEndTime;\r\n    }\r\n\r\n    //Change total supply\r\n    function changeTotalSupply(uint256 newSupply) public onlyOwner {\r\n        _totalSupply = newSupply;\r\n    }\r\n\r\n    // In case multiple ICOs are planned, use this with the totalSupply function\r\n    function changeICOSupply(uint256 newICOSupply) public onlyOwner {\r\n        _icoSupply = newICOSupply;\r\n    }\r\n\r\n    // Get current price of a Token\r\n    // @return the price or token value for a ether\r\n    function getRate() public view returns (uint256 result) {\r\n        return RATE;\r\n    }\r\n    \r\n    function getTokenDetail() public view returns (string memory, string memory, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        return (name, symbol, mainSaleStartTime, mainSaleEndTime, preSaleStartTime, preSaleEndTime, _totalSupply, _icoSupply, _presaleSupply, totalNumberTokenSoldMainSale, totalNumberTokenSoldPreSale);\r\n    }\r\n\r\n\r\n    // ERC223 Methods  \r\n    \r\n    // What is the balance of a particular account?\r\n    // @param who The address of the particular account\r\n    // @return the balance the particular account\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return balances[who];\r\n    }\r\n    function roleOf(address who) public view returns (uint256) {\r\n        return role[who];\r\n    }\r\n\r\n    // @return total tokens supplied\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(multisig, _value);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes memory _data) public {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        if(role[msg.sender] == 2)\r\n        {\r\n            require(now >= projsealDate,\"you can not transfer yet\");\r\n        }\r\n        if(role[msg.sender] == 3 || role[msg.sender] == 4)\r\n        {\r\n            require(now >= partnersealDate,\"you can not transfer yet\");\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n       if(role[msg.sender] == 2)\r\n        {\r\n            require(now >= projsealDate,\"you can not transfer yet\");\r\n        }\r\n        if(role[msg.sender] == 3 || role[msg.sender] == 4)\r\n        {\r\n            require(now >= partnersealDate,\"you can not transfer yet\");\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n    }\r\n\r\n    // @notice send `value` token to `to` from `from`\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The amount of token to be transferred\r\n    // @return the transaction address and send the event as Transfer\r\n    function transferFrom(address from, address to, uint256 value) public canTradable isActive {\r\n        require (\r\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\r\n        );\r\n        if(role[from] == 2)\r\n        {\r\n            require(now >= projsealDate,\"you can not transfer yet\");\r\n        }\r\n        if(role[from] == 3 || role[from] == 4)\r\n        {\r\n            require(now >= partnersealDate,\"you can not transfer yet\");\r\n        }\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\r\n    // If this function is called again it overwrites the current allowance with value.\r\n    // @param spender The address of the sender\r\n    // @param value The amount to be approved\r\n    // @return the transaction address and send the event as Approval\r\n    function approve(address spender, uint256 value) public isActive {\r\n        require (\r\n            balances[msg.sender] >= value && value > 0\r\n        );\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n    }\r\n    // Check the allowed value for the spender to withdraw from owner\r\n    // @param owner The address of the owner\r\n    // @param spender The address of the spender\r\n    // @return the amount which spender is still allowed to withdraw from owner\r\n    function allowance(address _owner, address spender) public view returns (uint256) {\r\n        return allowed[_owner][spender];\r\n    }    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transFromProjTeamSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"changePreSaleStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_projTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transFromPartnersSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersealDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_PartnersSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddresses\",\"type\":\"address[]\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistForBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimePassed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"changeMultiSignatureWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"changeMainSaleStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasPreSaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberTokenSoldMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"changeMainSaleEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_PRSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradable\",\"type\":\"bool\"}],\"name\":\"startTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"roleOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projsealDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tos\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferToAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberDecimal18\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"changePreSaleEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newICOSupply\",\"type\":\"uint256\"}],\"name\":\"changeICOSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"setUserRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"applyBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tos\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferToAllInPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transFromMetaICOSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_metaIcoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberTokenSoldPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transFromPRSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_preSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_mainSaleStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartTradable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseTradable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WRTToken","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000087e07e28ab00b6ac8eb14bcd15ebc5f5da7c18f7000000000000000000000000000000000000000000000000000000005c66eb5a000000000000000000000000000000000000000000000000000000005cdc40da","Library":"","SwarmSource":"bzzr://70b0bf2ab7ddf9299930a50745e47b053b1ba9a8ed9f6388ac23433409314e95"}]}