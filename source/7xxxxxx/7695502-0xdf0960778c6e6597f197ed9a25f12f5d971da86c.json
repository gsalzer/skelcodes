{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https:/ethergoo.io\r\n * \r\n */\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external constant returns (uint);\r\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\r\n}\r\n\r\ncontract GooToken is ERC20 {\r\n    using SafeMath for uint;\r\n    using SafeMath224 for uint224;\r\n    \r\n    string public constant name  = \"Vials of Goo\";\r\n    string public constant symbol = \"GOO\";\r\n    uint8 public constant decimals = 12;\r\n    uint224 public constant MAX_SUPPLY = 21000000 * (10 ** 12); // 21 million (to 12 szabo decimals)\r\n    \r\n    mapping(address => UserBalance) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    mapping(address => uint256) public gooProduction; // Store player's current goo production\r\n    mapping(address => bool) operator;\r\n    \r\n    uint224 private totalGoo;\r\n    uint256 public teamAllocation; // 10% reserve allocation towards exchange-listing negotiations, game costs, and ongoing community contests/aidrops\r\n    address public owner; // Minor management of game\r\n    bool public supplyCapHit; // No more production once we hit MAX_SUPPLY\r\n    \r\n    struct UserBalance {\r\n        uint224 goo;\r\n        uint32 lastGooSaveTime;\r\n    }\r\n    \r\n    constructor() public {\r\n        teamAllocation = MAX_SUPPLY / 10;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function totalSupply() external view returns(uint) {\r\n        return totalGoo;\r\n    }\r\n    \r\n    function transfer(address to, uint256 tokens) external returns (bool) {\r\n        updatePlayersGooInternal(msg.sender);\r\n        \r\n        require(tokens <= MAX_SUPPLY); // Prevent uint224 overflow\r\n        uint224 amount = uint224(tokens); // Goo is uint224 but must comply to ERC20's uint256\r\n\r\n        balances[msg.sender].goo = balances[msg.sender].goo.sub(amount);\r\n        emit Transfer(msg.sender, to, amount);\r\n        \r\n        if (to == address(0)) { // Burn\r\n            totalGoo -= amount;\r\n        } else {\r\n            balances[to].goo = balances[to].goo.add(amount);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool) {\r\n        updatePlayersGooInternal(from);\r\n        \r\n        require(tokens <= MAX_SUPPLY); // Prevent uint224 overflow\r\n        uint224 amount = uint224(tokens); // Goo is uint224 but must comply to ERC20's uint256\r\n        \r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n        balances[from].goo = balances[from].goo.sub(amount);\r\n        emit Transfer(from, to, amount);\r\n        \r\n        if (to == address(0)) { // Burn\r\n            totalGoo -= amount;\r\n        } else {\r\n            balances[to].goo = balances[to].goo.add(amount);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function unlockAllocation(uint224 amount, address recipient) external {\r\n        require(msg.sender == owner);\r\n        teamAllocation = teamAllocation.sub(amount); // Hard limit\r\n        \r\n        totalGoo += amount;\r\n        balances[recipient].goo = balances[recipient].goo.add(amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n    }\r\n    \r\n    function setOperator(address gameContract, bool isOperator) external {\r\n        require(msg.sender == owner);\r\n        operator[gameContract] = isOperator;\r\n    }\r\n    \r\n    function approve(address spender, uint256 tokens) external returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) external view returns (uint256) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function recoverAccidentalTokens(address tokenAddress, uint256 tokens) external {\r\n        require(msg.sender == owner);\r\n        require(tokenAddress != address(this)); // Not Goo\r\n        ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    function balanceOf(address player) public constant returns(uint256) {\r\n        return balances[player].goo + balanceOfUnclaimedGoo(player);\r\n    }\r\n    \r\n    function balanceOfUnclaimedGoo(address player) internal constant returns (uint224 gooGain) {\r\n        if (supplyCapHit) return;\r\n        \r\n        uint32 lastSave = balances[player].lastGooSaveTime;\r\n        if (lastSave > 0 && lastSave < block.timestamp) {\r\n            gooGain = uint224(gooProduction[player] * (block.timestamp - lastSave));\r\n        }\r\n        \r\n        if (totalGoo + gooGain >= MAX_SUPPLY) {\r\n            gooGain = MAX_SUPPLY - totalGoo;\r\n        }\r\n    }\r\n    \r\n    function mintGoo(uint224 amount, address player) external {\r\n        if (supplyCapHit) return;\r\n        require(operator[msg.sender]);\r\n        \r\n        uint224 minted = amount;\r\n        if (totalGoo.add(amount) >= MAX_SUPPLY) {\r\n            supplyCapHit = true;\r\n            minted = MAX_SUPPLY - totalGoo;\r\n        }\r\n\r\n        balances[player].goo += minted;\r\n        totalGoo += minted;\r\n        emit Transfer(address(0), player, minted);\r\n    }\r\n    \r\n    function updatePlayersGoo(address player) external {\r\n        require(operator[msg.sender]);\r\n        updatePlayersGooInternal(player);\r\n    }\r\n    \r\n    function updatePlayersGooInternal(address player) internal {\r\n        uint224 gooGain = balanceOfUnclaimedGoo(player);\r\n        \r\n        UserBalance memory balance = balances[player];\r\n        if (gooGain > 0) {\r\n            totalGoo += gooGain;\r\n            if (!supplyCapHit && totalGoo == MAX_SUPPLY) {\r\n                supplyCapHit = true;\r\n            }\r\n            \r\n            balance.goo += gooGain;\r\n            emit Transfer(address(0), player, gooGain);\r\n        }\r\n        \r\n        if (balance.lastGooSaveTime < block.timestamp) {\r\n            balance.lastGooSaveTime = uint32(block.timestamp); \r\n            balances[player] = balance;\r\n        }\r\n    }\r\n    \r\n    function updatePlayersGooFromPurchase(address player, uint224 purchaseCost) external {\r\n        require(operator[msg.sender]);\r\n        uint224 unclaimedGoo = balanceOfUnclaimedGoo(player);\r\n        \r\n        UserBalance memory balance = balances[player];\r\n        balance.lastGooSaveTime = uint32(block.timestamp); \r\n        \r\n        if (purchaseCost > unclaimedGoo) {\r\n            uint224 gooDecrease = purchaseCost - unclaimedGoo;\r\n            totalGoo -= gooDecrease;\r\n            balance.goo = balance.goo.sub(gooDecrease);\r\n            emit Transfer(player, address(0), gooDecrease);\r\n        } else {\r\n            uint224 gooGain = unclaimedGoo - purchaseCost;\r\n            totalGoo += gooGain;\r\n            balance.goo += gooGain;\r\n            if (!supplyCapHit && totalGoo == MAX_SUPPLY) {\r\n                supplyCapHit = true;\r\n            }\r\n            emit Transfer(address(0), player, gooGain);\r\n        }\r\n        balances[player] = balance;\r\n    }\r\n    \r\n    function increasePlayersGooProduction(address player, uint256 increase) external {\r\n        require(operator[msg.sender]);\r\n        gooProduction[player] += increase;\r\n    }\r\n    \r\n    function decreasePlayersGooProduction(address player, uint256 decrease) external {\r\n        require(operator[msg.sender]);\r\n        gooProduction[player] -= decrease;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath224 {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint224 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint224 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    uint224 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"recoverAccidentalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyCapHit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gooProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint224\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"mintGoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameContract\",\"type\":\"address\"},{\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"increasePlayersGooProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"decrease\",\"type\":\"uint256\"}],\"name\":\"decreasePlayersGooProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"updatePlayersGoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"purchaseCost\",\"type\":\"uint224\"}],\"name\":\"updatePlayersGooFromPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint224\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unlockAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GooToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02546b010375af22cef683c3c44e5aff942583d7506e17ddbc79e0483e808519"}]}