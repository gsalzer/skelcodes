{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.5; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n███████╗███╗   ██╗██╗   ██╗ ██████╗ ██╗   ██╗     ██████╗██╗  ██╗ █████╗ ██╗███╗   ██╗\r\n██╔════╝████╗  ██║██║   ██║██╔═══██╗╚██╗ ██╔╝    ██╔════╝██║  ██║██╔══██╗██║████╗  ██║\r\n█████╗  ██╔██╗ ██║██║   ██║██║   ██║ ╚████╔╝     ██║     ███████║███████║██║██╔██╗ ██║\r\n██╔══╝  ██║╚██╗██║╚██╗ ██╔╝██║   ██║  ╚██╔╝      ██║     ██╔══██║██╔══██║██║██║╚██╗██║\r\n███████╗██║ ╚████║ ╚████╔╝ ╚██████╔╝   ██║       ╚██████╗██║  ██║██║  ██║██║██║ ╚████║\r\n╚══════╝╚═╝  ╚═══╝  ╚═══╝   ╚═════╝    ╚═╝        ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝\r\n                                                                                      \r\n                                                                                        \r\n  \r\n// ----------------------------------------------------------------------------\r\n// 'Envoy' Token contract with following features\r\n//      => ERC20 Compliance\r\n//      => Higher degree of control by owner - safeguard functionality\r\n//      => SafeMath implementation \r\n//      => Burnable and minting \r\n//      => user whitelisting \r\n//      => air drop (active and passive)\r\n//      => in-built buy/sell functions \r\n//      => in-built ICO simple phased \r\n//      => upgradibilitiy \r\n//\r\n// Name        : Envoy\r\n// Symbol      : NVOY\r\n// Total supply: 250,000,000\r\n// Decimals    : 18\r\n//\r\n// Copyright 2019 onwards - Envoy Group ( http://envoychain.io )\r\n// Special thanks to openzeppelin for inspiration: \r\n// https://github.com/zeppelinos/labs/tree/master/upgradeability_using_unstructured_storage\r\n// ----------------------------------------------------------------------------\r\n*/ \r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    \r\n     constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n    \r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract EnvoyChain_v1 is owned {\r\n    \r\n\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n\r\n    // This creates a mapping with all data storage\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n        \r\n    // This generates a public event for frozen (blacklisting) accounts\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n\r\n\r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!safeguard);\r\n        require (_to != address(0));                      // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        \r\n        // overflow and undeflow checked by SafeMath Library\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        \r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` in behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n    \r\n    constructor() public{\r\n        //sending all the tokens to Owner\r\n        balanceOf[owner] = totalSupply;\r\n        \r\n        //firing event which logs this transaction\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n    \r\n    function () external payable {\r\n        \r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly\r\n        *\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of enough token balance is done by SafeMath\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens from other account\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n        *\r\n        * @param _from the address of the sender\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of allowance and token value is done by SafeMath\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\r\n        emit  Burn(_from, _value);\r\n        return true;\r\n    }\r\n        \r\n    \r\n    /** \r\n        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        * @param target Address to be frozen\r\n        * @param freeze either to freeze it or not\r\n        */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n        emit  FrozenFunds(target, freeze);\r\n    }\r\n    \r\n    /** \r\n        * @notice Create `mintedAmount` tokens and send it to `target`\r\n        * @param target Address to receive the tokens\r\n        * @param mintedAmount the amount of tokens it will receive\r\n        */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Transfer(address(0), target, mintedAmount);\r\n    }\r\n\r\n        \r\n\r\n    /**\r\n        * Owner can transfer tokens from contract to owner address\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    \r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n    }\r\n    \r\n    //Just in rare case, owner wants to transfer Ether from contract to owner address\r\n    function manualWithdrawEther()onlyOwner public{\r\n        address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n        * Change safeguard status on or off\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working back again!\r\n        */\r\n    function changeSafeguardStatus() onlyOwner public{\r\n        if (safeguard == false){\r\n            safeguard = true;\r\n        }\r\n        else{\r\n            safeguard = false;    \r\n        }\r\n    }\r\n    \r\n    /*************************************/\r\n    /*    Section for User Air drop      */\r\n    /*************************************/\r\n    \r\n    bool public passiveAirdropStatus;\r\n    uint256 public passiveAirdropTokensAllocation;\r\n    uint256 public airdropAmount;  //in wei\r\n    uint256 public passiveAirdropTokensSold;\r\n    mapping(uint256 => mapping(address => bool)) public airdropClaimed;\r\n    uint256 internal airdropClaimedIndex;\r\n    uint256 public airdropFee = 0.05 ether;\r\n    \r\n    /**\r\n     * This function to start a passive air drop by admin only\r\n     * Admin have to put airdrop amount (in wei) and total toens allocated for it.\r\n     * Admin must keep allocated tokens in the contract\r\n     */\r\n    function startNewPassiveAirDrop(uint256 passiveAirdropTokensAllocation_, uint256 airdropAmount_  ) public onlyOwner {\r\n        passiveAirdropTokensAllocation = passiveAirdropTokensAllocation_;\r\n        airdropAmount = airdropAmount_;\r\n        passiveAirdropStatus = true;\r\n    } \r\n    \r\n    /**\r\n     * This function will stop any ongoing passive airdrop\r\n     */\r\n    function stopPassiveAirDropCompletely() public onlyOwner{\r\n        passiveAirdropTokensAllocation = 0;\r\n        airdropAmount = 0;\r\n        airdropClaimedIndex++;\r\n        passiveAirdropStatus = false;\r\n    }\r\n    \r\n    /**\r\n     * This function called by user who want to claim passive air drop.\r\n     * He can only claim air drop once, for current air drop. If admin stop an air drop and start fresh, then users can claim again (once only).\r\n     */\r\n    function claimPassiveAirdrop() public payable returns(bool) {\r\n        require(airdropAmount > 0, 'Token amount must not be zero');\r\n        require(passiveAirdropStatus, 'Air drop is not active');\r\n        require(passiveAirdropTokensSold <= passiveAirdropTokensAllocation, 'Air drop sold out');\r\n        require(!airdropClaimed[airdropClaimedIndex][msg.sender], 'user claimed air drop already');\r\n        require(!isContract(msg.sender),  'No contract address allowed to claim air drop');\r\n        require(msg.value >= airdropFee, 'Not enough ether to claim this airdrop');\r\n        \r\n        _transfer(address(this), msg.sender, airdropAmount);\r\n        passiveAirdropTokensSold += airdropAmount;\r\n        airdropClaimed[airdropClaimedIndex][msg.sender] = true; \r\n        return true;\r\n    }\r\n    \r\n    function changePassiveAirdropAmount(uint256 newAmount) public onlyOwner{\r\n        airdropAmount = newAmount;\r\n    }\r\n    \r\n    function isContract(address _address) public view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_address)\r\n        }\r\n        return (size > 0);\r\n    }\r\n    \r\n    function updateAirdropFee(uint256 newFee) public onlyOwner{\r\n        airdropFee = newFee;\r\n    }\r\n    \r\n    /**\r\n     * Run an ACTIVE Air-Drop\r\n     *\r\n     * It requires an array of all the addresses and amount of tokens to distribute\r\n     * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n     */\r\n    function airdropACTIVE(address[] memory recipients,uint256 tokenAmount) public onlyOwner {\r\n        require(recipients.length <= 150);\r\n        uint256 totalAddresses = recipients.length;\r\n        for(uint i = 0; i < totalAddresses; i++)\r\n        {\r\n          //This will loop through all the recipients and send them the specified tokens\r\n          //Input data validation is unncessary, as that is done by SafeMath and which also saves some gas.\r\n          _transfer(address(this), recipients[i], tokenAmount);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    /*************************************/\r\n    /*  Section for User whitelisting    */\r\n    /*************************************/\r\n    bool public whitelistingStatus;\r\n    mapping (address => bool) public whitelisted;\r\n    \r\n    /**\r\n     * Change whitelisting status on or off\r\n     *\r\n     * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\r\n     */\r\n    function changeWhitelistingStatus() onlyOwner public{\r\n        if (whitelistingStatus == false){\r\n            whitelistingStatus = true;\r\n        }\r\n        else{\r\n            whitelistingStatus = false;    \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Whitelist any user address - only Owner can do this\r\n     *\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistUser(address userAddress) onlyOwner public{\r\n        require(whitelistingStatus == true);\r\n        require(userAddress != address(0));\r\n        whitelisted[userAddress] = true;\r\n    }\r\n    \r\n    /**\r\n     * Whitelist Many user address at once - only Owner can do this\r\n     * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\r\n        require(whitelistingStatus == true);\r\n        uint256 addressCount = userAddresses.length;\r\n        require(addressCount <= 150);\r\n        for(uint256 i = 0; i < addressCount; i++){\r\n            require(userAddresses[i] != address(0));\r\n            whitelisted[userAddresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    /*************************************/\r\n    /*  Section for Buy/Sell of tokens   */\r\n    /*************************************/\r\n    \r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    \r\n    /** \r\n     * Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n     * newSellPrice Price the users can sell to the contract\r\n     * newBuyPrice Price users can buy from the contract\r\n     */\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;   //sellPrice is 1 Token = ?? WEI\r\n        buyPrice = newBuyPrice;     //buyPrice is 1 ETH = ?? Tokens\r\n    }\r\n\r\n    /**\r\n     * Buy tokens from contract by sending ether\r\n     * buyPrice is 1 ETH = ?? Tokens\r\n     */\r\n    \r\n    function buyTokens() payable public {\r\n        uint amount = msg.value * buyPrice;                 // calculates the amount\r\n        _transfer(address(this), msg.sender, amount);       // makes the transfers\r\n    }\r\n\r\n    /**\r\n     * Sell `amount` tokens to contract\r\n     * amount amount of tokens to be sold\r\n     */\r\n    function sellTokens(uint256 amount) public {\r\n        uint256 etherAmount = amount * sellPrice/(10**decimals);\r\n        require(address(this).balance >= etherAmount);   // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, address(this), amount);           // makes the transfers\r\n        msg.sender.transfer(etherAmount);                // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n    \r\n    \r\n    /********************************************/\r\n    /* Custom Code for the contract Upgradation */\r\n    /********************************************/\r\n    \r\n    bool internal initialized;\r\n    function initialize(\r\n        address payable _owner\r\n    ) public {\r\n        require(!initialized);\r\n        require(owner == address(0)); //When this methods called, then owner address must be zero\r\n\r\n        name = \"Envoy\";\r\n        symbol = \"NVOY\";\r\n        decimals = 18;\r\n        totalSupply = 250000000 * (10**decimals);\r\n        owner = _owner;\r\n        \r\n        //sending all the tokens to Owner\r\n        balanceOf[owner] = totalSupply;\r\n        \r\n        //firing event which logs this transaction\r\n        emit Transfer(address(0), owner, totalSupply);\r\n        \r\n        initialized = true;\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//********************************************************************************//\r\n//-------------  MAIN PROXY CONTRACTS (UPGRADEABILITY) SECTION STARTS ------------//\r\n//********************************************************************************//\r\n\r\n\r\n/****************************************/\r\n/*            Proxy Contract            */\r\n/****************************************/\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n  /**\r\n  * @dev Tells the address of the implementation where every call will be delegated.\r\n  * @return address of the implementation to which it will be delegated\r\n  */\r\n  function implementation() public view returns (address);\r\n\r\n  /**\r\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n  * This function will return whatever the implementation call returns\r\n  */\r\n  function () payable external {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      calldatacopy(ptr, 0, calldatasize)\r\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n      let size := returndatasize\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/****************************************/\r\n/*    UpgradeabilityProxy Contract      */\r\n/****************************************/\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev This event will be emitted every time the implementation gets upgraded\r\n   * @param implementation representing the address of the upgraded implementation\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  // Storage position of the address of the current implementation\r\n  bytes32 private constant implementationPosition = keccak256(\"EtherAuthority.io.proxy.implementation\");\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor () public {}\r\n\r\n  /**\r\n   * @dev Tells the address of the current implementation\r\n   * @return address of the current implementation\r\n   */\r\n  function implementation() public view returns (address impl) {\r\n    bytes32 position = implementationPosition;\r\n    assembly {\r\n      impl := sload(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the current implementation\r\n   * @param newImplementation address representing the new implementation to be set\r\n   */\r\n  function setImplementation(address newImplementation) internal {\r\n    bytes32 position = implementationPosition;\r\n    assembly {\r\n      sstore(position, newImplementation)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the implementation address\r\n   * @param newImplementation representing the address of the new implementation to be set\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    address currentImplementation = implementation();\r\n    require(currentImplementation != newImplementation);\r\n    setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n}\r\n\r\n/****************************************/\r\n/*  OwnedUpgradeabilityProxy contract   */\r\n/****************************************/\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n  * @dev Event to show ownership has been transferred\r\n  * @param previousOwner representing the address of the previous owner\r\n  * @param newOwner representing the address of the new owner\r\n  */\r\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  // Storage position of the owner of the contract\r\n  bytes32 private constant proxyOwnerPosition = keccak256(\"EtherAuthority.io.proxy.owner\");\r\n\r\n  /**\r\n  * @dev the constructor sets the original owner of the contract to the sender account.\r\n  */\r\n  constructor () public {\r\n    setUpgradeabilityOwner(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function proxyOwner() public view returns (address owner) {\r\n    bytes32 position = proxyOwnerPosition;\r\n    assembly {\r\n      owner := sload(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the owner\r\n   */\r\n  function setUpgradeabilityOwner(address newProxyOwner) internal {\r\n    bytes32 position = proxyOwnerPosition;\r\n    assembly {\r\n      sstore(position, newProxyOwner)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n    require(newOwner != address(0));\r\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n    setUpgradeabilityOwner(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   */\r\n  function upgradeTo(address implementation) public onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation\r\n   * to initialize whatever is needed through a low level call.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n   * signature of the implementation to be called with the needed payload\r\n   */\r\n  function upgradeToAndCall(address implementation, bytes memory data) payable public onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n    (bool success,) = address(this).call.value(msg.value).gas(200000)(data);\r\n    require(success,'initialize function errored');\r\n  }\r\n  \r\n  function generateData() public view returns(bytes memory){\r\n        \r\n    return abi.encodeWithSignature(\"initialize(address)\",msg.sender);\r\n      \r\n  }\r\n}\r\n\r\n\r\n/****************************************/\r\n/*      EnvoyChain Proxy Contract       */\r\n/****************************************/\r\n\r\n/**\r\n * @title EnvoyChain_proxy\r\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\r\n*/ \r\ncontract EnvoyChain_proxy is OwnedUpgradeabilityProxy {\r\n    constructor() public OwnedUpgradeabilityProxy() {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generateData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"EnvoyChain_proxy","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b8814a70f70cd24183ed1aa1d3cee090ef12a9febc912286ce9e8c334b5e808"}]}