{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract owlockups {\r\n    using SafeMath for uint;\r\n    \r\n    string public symbol = \"OWTL\";\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 public totalAvailable;\r\n    uint public totalAddress;\r\n    \r\n    \r\n    address public admin;\r\n    uint public _lockupBaseTime = 1 days;\r\n    address public tokenAddress;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    \r\n    mapping ( address => uint256 ) public balanceOf;\r\n    mapping ( address => lockupMeta ) public lockups;\r\n    \r\n    struct lockupMeta {\r\n        uint256 amount;\r\n        uint256 cycle_amount;\r\n        uint cycle;\r\n        uint claimed_cycle;\r\n        uint duration;\r\n        uint last_withdraw;\r\n        bool active;\r\n        bool claimed;\r\n        uint time;\r\n    }\r\n    \r\n    function owlockups(address _address) public {\r\n        tokenAddress = _address;\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    function setAdmin(address _newAdmin) public onlyOwner {\r\n        admin = _newAdmin;\r\n    }\r\n    \r\n    function lockTokens(\r\n        address _address, \r\n        uint256 _value, \r\n        uint _percentage, \r\n        uint _duration, \r\n        uint _cycle\r\n    ) public onlyOwner returns (bool success) {\r\n        _value =  _value * 10**uint(decimals);\r\n        lockupMeta storage lm = lockups[_address];\r\n        require(!lm.active);\r\n        \r\n        uint256 _amount = (_value.mul(_percentage)).div(100);\r\n        uint256 _remaining = _value.sub(_amount);\r\n        uint256 _cycle_amount = _remaining.div(_cycle);\r\n        \r\n        lm.amount = _remaining;\r\n        lm.duration = _duration * _lockupBaseTime;\r\n        lm.cycle_amount = _cycle_amount;\r\n        lm.cycle = _cycle;\r\n        lm.active = true;\r\n        lm.last_withdraw = now;\r\n        lm.time = now;\r\n        \r\n        totalAddress++;\r\n        totalSupply = totalSupply.add(_value);\r\n        totalAvailable = totalAvailable.add(_amount);\r\n        balanceOf[_address] = balanceOf[_address].add(_amount);\r\n        \r\n        success = true;\r\n    }\r\n    \r\n    function unlockTokens() public returns (bool success) {\r\n        lockupMeta storage lm = lockups[msg.sender];\r\n        require(\r\n            lm.active \r\n            && !lm.claimed\r\n        );\r\n        \r\n        uint _curTime = now;\r\n        uint _diffTime = _curTime.sub(lm.last_withdraw);\r\n        uint _cycles = (_diffTime.div(_lockupBaseTime));\r\n        \r\n        if(_cycles >= 1){\r\n            uint remaining_cycle = lm.cycle.sub(lm.claimed_cycle);\r\n            uint256 _amount = 0;\r\n            if(_cycles > remaining_cycle){\r\n                _amount = lm.cycle_amount * remaining_cycle;\r\n                lm.claimed_cycle = lm.cycle;\r\n                lm.last_withdraw = _curTime;\r\n            } else {\r\n                _amount = lm.cycle_amount * _cycles;\r\n                lm.claimed_cycle = lm.claimed_cycle.add(_cycles);\r\n                lm.last_withdraw = lm.last_withdraw.add(_cycles.mul(lm.duration));\r\n            }\r\n            \r\n            if(lm.claimed_cycle == lm.cycle){\r\n                lm.claimed = true;\r\n            }\r\n            \r\n            totalAvailable = totalAvailable.add(_amount);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\r\n            \r\n            success = true;\r\n            \r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    \r\n    function availableTokens(address _address) public view returns (uint256 _amount) {\r\n        lockupMeta storage lm = lockups[_address];\r\n        \r\n        _amount = 0;\r\n        \r\n        if(lm.active && !lm.claimed){\r\n            uint _curTime = now;\r\n            uint _diffTime = _curTime.sub(lm.last_withdraw);\r\n            uint _cycles = (_diffTime.div(_lockupBaseTime));\r\n            \r\n            if(_cycles >= 1){\r\n                uint remaining_cycle = lm.cycle.sub(lm.claimed_cycle);\r\n                \r\n                if(_cycles > remaining_cycle){\r\n                    _amount = lm.cycle_amount * remaining_cycle;\r\n                } else {\r\n                    _amount = lm.cycle_amount * _cycles;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(\r\n            _value > 0\r\n            && balanceOf[msg.sender] >= _value\r\n        );\r\n        \r\n        totalSupply = totalSupply.sub(_value);\r\n        totalAvailable = totalAvailable.sub(_value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        ERC20(tokenAddress).transfer(_to, _value);\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lockupBaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockups\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"cycle_amount\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"claimed_cycle\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"last_withdraw\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"claimed\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"owlockups","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c2494604e9dcefa2a70dcebf81e6d7be064a334e","Library":"","SwarmSource":"bzzr://4f5f839d6b428b3a8af82c4ab7591a61d117d5da50ee7e7a5269b49e0a09e659"}]}