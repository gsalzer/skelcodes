{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    Moon Token for MoonTrader Platform and projects\r\n    More information at https://moontrader.io/\r\n\r\n    MoonTrader is a successor of the  MoonBot project, https://moon-bot.com/en/\r\n\r\n    Mail us to: info@moontrader.io \r\n\r\n    Join the Telegram channel https://t.me/moontrader_news_en, \r\n    Visit BTT forum thread https://bitcointalk.org/index.php?topic=5143969 for more information.\r\n\r\n */\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Crowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conforms\r\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // How many token units a buyer gets per wei.\r\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n    // 1 wei will give you 1 unit, or 0.001 TOK.\r\n    uint256 private _rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    // Hardcap in tokens\r\n    uint256 private _supply;\r\n\r\n    // Amount of sold tokens\r\n    uint256 private _sold;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * Event for conversion rate changes logging\r\n     * @param rate New rate\r\n     */\r\n    event RateUpdated(uint256 indexed rate);\r\n\r\n    /**\r\n     * Events for crowdsale state tracking\r\n     */\r\n    event CrowdsalePaused();\r\n    event CrowdsaleUnpaused();\r\n\r\n    /**\r\n     * @param rate Number of token units a buyer gets per wei\r\n     * @dev The rate is the conversion between wei and the smallest and indivisible\r\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n     * @param wallet Address where collected funds will be forwarded to\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor (uint256 rate, uint256 supply, address payable wallet, IERC20 token) public {\r\n        require(rate > 0);\r\n        require(wallet != address(0));\r\n        require(address(token) != address(0));\r\n\r\n        _rate = rate;\r\n        _supply = supply;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer funds with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return amount of supplied tokens.\r\n     */\r\n    function supply() internal view returns (uint256) {\r\n        return _supply;\r\n    }\r\n\r\n    /**\r\n     * @return amount of sold tokens.\r\n     */\r\n    function sold() public view returns (uint256) {\r\n        return _sold;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase amount of sold tokens by tokenAmount.\r\n     * @param tokenAmount Amount of last-purchased tokens\r\n     */\r\n    function _addSold(uint256 tokenAmount) internal {\r\n        _sold = _sold.add(tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        uint256 surplus = _countSurplus(weiAmount);\r\n        weiAmount -= surplus;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n        _forwardFunds(weiAmount);\r\n        _returnSurplus(surplus);\r\n\r\n        _postValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n     *     super._preValidatePurchase(beneficiary, weiAmount);\r\n     *     require(weiRaised().add(weiAmount) <= cap);\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n        require(rate() > 0);\r\n        require(_supply >= _sold + _getTokenAmount(weiAmount)); //todo\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n     * conditions are not met.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n     * tokens.\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n        _addSold(tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    /**\r\n     * @param tokenAmount amount of tokens to be converted in wei\r\n     * @return amount of wei to be spent on the purchase of tokenAmount tokens\r\n     */\r\n    function _getWeiAmount(uint256 tokenAmount) internal view returns (uint256) {\r\n        return tokenAmount.div(_rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds(uint256 weiAmount) internal {\r\n        _wallet.transfer(weiAmount);\r\n    }\r\n\r\n    /*\r\n     * @dev Override to define the way in which surplus will be counted\r\n     * @param weiAmount Amount of wei sent by user\r\n     * @return surplus to be returned\r\n     */\r\n    function _countSurplus(uint256 weiAmount) internal returns (uint256){\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Override to change the way in which wei surplus returns to user\r\n     * @param weiAmount Amount of wei to be returned\r\n     */\r\n    function _returnSurplus(uint256 weiAmount) internal {\r\n        if (weiAmount > 0) {\r\n            msg.sender.transfer(weiAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Changes conversion rate. Override for extend the way in which rate changing affects on crowdsale\r\n     * @param newRate Value in tokens to be paid per 1 wei\r\n     */\r\n    function _changeRate(uint256 newRate) internal {\r\n        if ((newRate > 0) && (_rate == 0)) {\r\n            emit CrowdsaleUnpaused();\r\n        } else if (newRate == 0) {\r\n            emit CrowdsalePaused();\r\n        }\r\n\r\n        _rate = newRate;\r\n        emit RateUpdated(newRate);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Crowdsale/Util/Role.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\nlibrary Role {\r\n\r\n    struct RoleContainer {\r\n        address[] bearer;\r\n    }\r\n\r\n    /**\r\n     * @param role role storage\r\n     * @return amount of accounts in this role\r\n     */\r\n    function total (RoleContainer storage role) internal view returns (uint count) {\r\n        for (uint i = 0; i < role.bearer.length; i++) {\r\n            count += (role.bearer[i] == address(0)) ? 0 : 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(RoleContainer storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        address[] memory list = role.bearer;\r\n        uint len = role.bearer.length;\r\n        for (uint index = 0; index < len; index++) {\r\n            if (list[index] == account) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(RoleContainer storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer.push(account);\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(RoleContainer storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        removeFromList(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function. Iterates over array to find and\r\n       remove given account from it\r\n       @param role Role storage\r\n       @param account Expelled account\r\n     */\r\n    function removeFromList(RoleContainer storage role, address account) private {\r\n        address[] storage list = role.bearer;\r\n        uint len = role.bearer.length;\r\n\r\n        for (uint index = 0; index <= len; index++) {\r\n            if (list[index] != account) {\r\n                continue;\r\n            }\r\n            list[index] = list[len - 1];\r\n            delete list[len - 1];\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Util/Helpers.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\nlibrary Helpers {\r\n    function majority(uint total) internal pure returns (uint) {\r\n        return uint(total / 2) + 1;\r\n    }\r\n\r\n    function idFromAddress(address addr) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(addr));\r\n    }\r\n\r\n    function idFromUint256(uint256 x) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(x));\r\n    }\r\n\r\n    function mixId(address addr, uint256 x) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(addr, x));\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Util/Votings.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\nlibrary Votings {\r\n\r\n    struct Voting {\r\n        mapping(bytes32 => address[]) process;\r\n    }\r\n\r\n    /**\r\n     * @dev Votes and check if voting is completed. If vote is completed - deletes it\r\n     * @param voting Storage\r\n     * @param index Of voting process\r\n     * @param issuer Voter\r\n     * @param required Amount of votes for this process to be successful\r\n     * @return (is voting completed?)\r\n     */\r\n    function voteAndCheck(Voting storage voting,\r\n        bytes32 index, address issuer, uint required) internal returns (bool)\r\n    {\r\n        vote(voting, index, issuer);\r\n        return isComplete(voting, index, required);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if voting is completed. If vote is completed - deletes it\r\n     * @param voting Storage\r\n     * @param index Of voting process\r\n     * @param required Amount of votes for this process to be successful\r\n     * @return (is voting completed?)\r\n     */\r\n    function isComplete(Voting storage voting,\r\n        bytes32 index, uint required) internal returns (bool)\r\n    {\r\n        if (voting.process[index].length < required) {\r\n            return false;\r\n        }\r\n\r\n        delete voting.process[index];\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Vote\r\n     * @param voting Storage\r\n     * @param index Of voting process\r\n     * @param issuer Voter\r\n     */\r\n    function vote(Voting storage voting,\r\n        bytes32 index, address issuer) internal\r\n    {\r\n        require(!hadVoted(voting, index, issuer));\r\n        voting.process[index].push(issuer);\r\n    }\r\n\r\n    /**\r\n     * @dev Check of issuer had voted on this process\r\n     * @param voting Storage\r\n     * @param index Of voting process\r\n     * @param issuer Voter\r\n     * @return bool\r\n     */\r\n    function hadVoted(Voting storage voting,\r\n        bytes32 index, address issuer) internal view returns (bool)\r\n    {\r\n        address[] storage _process = voting.process[index];\r\n\r\n        for (uint ind = 0; ind < _process.length; ind++) {\r\n            if (_process[ind] == issuer) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Roles/AdminRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminRole {\r\n    using Role for Role.RoleContainer;\r\n    using Votings for Votings.Voting;\r\n\r\n    //admin storage\r\n    Role.RoleContainer private _admins;\r\n\r\n    //voting storage\r\n    Votings.Voting private _addVoting;\r\n    Votings.Voting private _expelVoting;\r\n\r\n    /**\r\n     * @dev events for \"add admin\" action logging\r\n     * @param account New admin\r\n     */\r\n    event AdminAdded(address indexed account);\r\n\r\n    /**\r\n     * @dev events for \"expel admin\" action logging\r\n     * @param account Expelled admin\r\n     */\r\n    event AdminRemoved(address indexed account);\r\n\r\n    modifier AdminOnly() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier WhileSetup() {\r\n        require(isAdmin(msg.sender));\r\n        require(countAdmins() == 1);\r\n        _;\r\n    }\r\n\r\n    constructor () internal {\r\n        _add(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @param account to check\r\n     * @return is this account contains in admin list\r\n     */\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins.has(account);\r\n    }\r\n\r\n    /**\r\n     * @return list of admins\r\n     */\r\n    function listAdmins() public view returns (address[] memory) {\r\n        return _admins.bearer;\r\n    }\r\n\r\n    /**\r\n     * @return amount of admins\r\n     */\r\n    function countAdmins() public view returns (uint) {\r\n        return _admins.total();\r\n    }\r\n\r\n    /**\r\n     * @dev initialize admin list while setup-stage of sale\r\n     * @param defaultAdmins list of default admins\r\n     */\r\n    function initAdmins(address[] memory defaultAdmins) WhileSetup internal {\r\n        for (uint256 index = 0; index < defaultAdmins.length; index++) {\r\n            _add(defaultAdmins[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Vote and append given account to the admin list after consensus\r\n     * @param account Account to be appended\r\n     */\r\n    function addAdmin(address account) AdminOnly public {\r\n        if (_addAdminVoting(account)) {\r\n            _add(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Vote and remove given account from admin list after consensus\r\n     * @param account Account to be removed\r\n     */\r\n    function expelAdmin(address account) AdminOnly public {\r\n        if (_expelAdminVoting(account)) {\r\n            _expel(account);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev require (N/2)+1 admins to be agreed with the add proposal\r\n     * @param account Account to be appended\r\n     * @return do (N/2)+1  admins agreed with the proposal?\r\n     */\r\n    function _addAdminVoting(address account) private returns (bool) {\r\n        return _addVoting.voteAndCheck(\r\n            Helpers.idFromAddress(account),\r\n            msg.sender,\r\n            Helpers.majority(countAdmins())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev require (N/2)+1 admins to be agreed with the removal proposal\r\n     * @param account Account to be removed\r\n     * @return do (N/2)+1  admins agreed with the proposal?\r\n     */\r\n    function _expelAdminVoting(address account) private returns (bool) {\r\n        require(msg.sender != account);\r\n        return _expelVoting.voteAndCheck(\r\n            Helpers.idFromAddress(account),\r\n            msg.sender,\r\n            Helpers.majority(countAdmins())\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev appends given account to admin list\r\n     * @param account Account to be appended\r\n     */\r\n    function _add(address account) private {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev removes given account to admin list\r\n     * @param account Account to be excluded\r\n     */\r\n    function _expel(address account) private {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/Crowdsale/Functionalities/InvestOnBehalf.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\ncontract InvestOnBehalf is AdminRole, Crowdsale {\r\n    using Votings for Votings.Voting;\r\n\r\n    // Current vote processes\r\n    Votings.Voting private _votings;\r\n\r\n    /**\r\n     * Event for investOnBehalf actions logging\r\n     * @param account Transfer target\r\n     * @param tokens Amount of transferred tokens\r\n     */\r\n    event InvestedOnBehalf(address indexed account, uint256 indexed tokens);\r\n\r\n    /**\r\n     * @dev require (N/2)+1 admins to be agreed with the proposal\r\n     * @param account Transfer target\r\n     * @param tokens Amount of tokens to be transferred\r\n     * @return do all admins agreed with the proposal?\r\n     */\r\n    function consensus(address account, uint256 tokens) private returns (bool) {\r\n        return _votings.voteAndCheck(Helpers.mixId(account, tokens), msg.sender, Helpers.majority(countAdmins()));\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev Vote and add X tokens to the user balance after consensus\r\n     * @param to Transfer target\r\n     * @param tokens Amount of tokens to be transferred\r\n     */\r\n    function investOnBehalf(address to, uint256 tokens) AdminOnly public {\r\n        if (consensus(to, tokens)) {\r\n            _processPurchase(to, tokens * 1e18);\r\n            emit InvestedOnBehalf(to, tokens * 1e18);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Functionalities/MilestonedCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\ncontract MilestonedCrowdsale is AdminRole, Crowdsale {\r\n    event MilestoneReached(uint256 indexed milestone);\r\n\r\n    /**\r\n     * @dev Container for milestone ranges\r\n     * @param start Milestone start timestamp\r\n     * @param finish Milestone finish timestamp\r\n     * @param fired\r\n     */\r\n    struct Milestone {\r\n        uint256 start;\r\n        uint256 finish;\r\n        bool fired;\r\n    }\r\n\r\n    Milestone[] private _milestones;\r\n\r\n    /**\r\n     * @dev Creates single milestone in storage\r\n     * @param start Timestamp from\r\n     * @param finish Timestamp to\r\n     */\r\n    function _newMilestone(uint256 start, uint256 finish) private {\r\n        require(start < finish);\r\n        _milestones.push(Milestone(start, finish, false));\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize milestone storage\r\n     * @param milestones Timerow of timestamps\r\n     */\r\n    function initMilestones(uint256[] memory milestones) WhileSetup internal {\r\n        for (uint256 index = 0; index < milestones.length - 1; index++) {\r\n            _newMilestone(milestones[index], milestones[index + 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Extends parent with counting surplus from milestones\r\n     * @param weiAmount Amount of wei received\r\n     * @return surplus above the last milestone\r\n     */\r\n    function _countSurplus(uint256 weiAmount) internal returns (uint256){\r\n        return _getMilestoneOverhead(weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Extends parent with pausing crowdsale if any surplus is returned\r\n     * @param weiAmount Amount of surplus wei\r\n     */\r\n    function _returnSurplus(uint256 weiAmount) internal {\r\n        super._returnSurplus(weiAmount);\r\n\r\n        if (weiAmount > 0) {\r\n            _changeRate(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Iterates over milestones to make sure\r\n     * that current transaction hasn't passed current milestone.\r\n     * @param weiAmount Amount of wei received\r\n     * @return If milestone has been reached, returns amount of wei above\r\n     * milestone finish-line\r\n     */\r\n    function _getMilestoneOverhead(uint256 weiAmount) private returns (uint256){\r\n        for (uint256 index = 0; index < _milestones.length; index++) {\r\n            //every milestone could be reached only once\r\n            if (_milestones[index].fired) {\r\n                continue;\r\n            }\r\n\r\n            uint256 start = _milestones[index].start;\r\n            uint256 finish = _milestones[index].finish;\r\n\r\n            uint256 surplus = _checkStage(start, finish, weiAmount);\r\n            if (surplus == 0) {\r\n                continue;\r\n            }\r\n\r\n            _milestones[index].fired = true;\r\n            emit MilestoneReached(finish);\r\n\r\n            return surplus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param from Milestone start\r\n     * @param to Milestone finish\r\n     * @return surplus wei amount above the milestone\r\n     */\r\n    function _checkStage(uint256 from, uint256 to, uint256 weiAmount) private view returns (uint256) {\r\n        uint256 afterPayment = sold() + _getTokenAmount(weiAmount);\r\n        bool inRange = (sold() >= from) && (sold() < to);\r\n\r\n        if (inRange && (afterPayment >= to)) {\r\n            return _getWeiAmount(afterPayment - to) + 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Functionalities/UpdatableRateCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UpdatableRateCrowdsale is AdminRole, Crowdsale {\r\n    using Votings for Votings.Voting;\r\n\r\n    // Current vote processes\r\n    Votings.Voting private _votings;\r\n\r\n    /**\r\n     * @dev require (N/2)+1 admins to be agreed with the proposal\r\n     * @param rate New conversion rate\r\n     * @return do (N/2)+1 admins agreed with the proposal?\r\n     */\r\n    function consensus(uint256 rate) private returns (bool) {\r\n        return _votings.voteAndCheck(Helpers.idFromUint256(rate), msg.sender, Helpers.majority(countAdmins()));\r\n    }\r\n\r\n    /**\r\n     * @dev Vote and apply new conversion rates after consensus\r\n     */\r\n    function changeRate(uint256 rate) AdminOnly public {\r\n        if (consensus(rate)) {\r\n            _changeRate(rate);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Emission/MintedCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n    /**\r\n     * @dev Overrides delivery by minting tokens upon purchase.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Number of tokens to be minted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        // Potentially dangerous assumption about the type of the token.\r\n        require(ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Validation/SoftcappedCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\ncontract SoftcappedCrowdsale is AdminRole, Crowdsale {\r\n    // minimum amount of tokens to be sold\r\n    uint256 private _goal;\r\n\r\n    // minimum amount of wei to be accepted\r\n    // from a single user before softcap collected\r\n    uint256 private _minimalPay = 0;\r\n\r\n    /**\r\n     * @dev Constructor, creates RefundEscrow.\r\n     * @param goal Funding goal\r\n     */\r\n    constructor (uint256 goal) public {\r\n        require(goal > 0);\r\n        _goal = goal;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of tokens to be sold.\r\n     */\r\n    function goal() public view returns (uint256) {\r\n        return _goal;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to be paid until softcap is reached.\r\n     */\r\n    function minimalPay() public view returns (uint256) {\r\n        return goalReached() ? 0 : _minimalPay;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to be paid until softcap is reached.\r\n     */\r\n    function setMinimalPay(uint256 weiAmount) WhileSetup internal {\r\n        _minimalPay = weiAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether funding goal was reached.\r\n     * @return Whether funding goal was reached\r\n     */\r\n    function goalReached() public view returns (bool) {\r\n        return sold() >= _goal;\r\n    }\r\n\r\n    /**\r\n     * @dev Extends parent with additional wei amount check sent by user\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of received wei\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        if (!goalReached() && _minimalPay != 0) {\r\n            require(weiAmount >= _minimalPay);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Validation/TimedCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale closes if softcap not reached within a time frame.\r\n */\r\ncontract TimedCrowdsale is SoftcappedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _openingTime;\r\n    uint256 private _softcapDeadline;\r\n    uint256 private _closingTime;\r\n\r\n    /**\r\n     * Event for crowdsale extending\r\n     * @param newClosingTime new closing time\r\n     * @param prevClosingTime old closing time\r\n     */\r\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        require(!hasClosed());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor, takes crowdsale opening and closing times.\r\n     * @param openingTime Crowdsale opening time\r\n     * @param softcapDeadline Crowdsale closing time\r\n     */\r\n    constructor (uint256 openingTime, uint256 softcapDeadline, uint256 closingTime) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        //todo require(openingTime >= block.timestamp);\r\n        require(softcapDeadline > openingTime);\r\n        require(closingTime > softcapDeadline);\r\n\r\n        _openingTime = openingTime;\r\n        _softcapDeadline = softcapDeadline;\r\n        _closingTime = closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale opening time.\r\n     */\r\n    function openingTime() public view returns (uint256) {\r\n        return _openingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale softcap deadline.\r\n     */\r\n    function softcapDeadline() public view returns (uint256) {\r\n        return _softcapDeadline;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale closing time.\r\n     */\r\n    function closingTime() public view returns (uint256) {\r\n        return _closingTime;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed and goal hasn't been reached\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return ((block.timestamp > _softcapDeadline) && !goalReached()) ||\r\n        ((block.timestamp > _closingTime) && goalReached());\r\n    }\r\n\r\n    /**\r\n     * @dev Extend parent behavior requiring to be within contributing period\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of wei contributed\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Distribution/FinalizableCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\r\n * can do extra work after finishing.\r\n */\r\ncontract FinalizableCrowdsale is AdminRole, TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    bool private _finalized;\r\n\r\n    event CrowdsaleFinalized();\r\n\r\n    constructor () internal {\r\n        _finalized = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the crowdsale is finalized, false otherwise.\r\n     */\r\n    function finalized() public view returns (bool) {\r\n        return _finalized;\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() AdminOnly public {\r\n        require(!_finalized);\r\n        require(hasClosed() || goalReached());\r\n\r\n        _finalized = true;\r\n\r\n        _finalization();\r\n        emit CrowdsaleFinalized();\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super._finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function _finalization() internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract Secondary {\r\n    address private _primary;\r\n\r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n     */\r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called from any account other than the primary.\r\n     */\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the primary.\r\n     */\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers contract to a new primary.\r\n     * @param recipient The address of new primary.\r\n     */\r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0));\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/payment/escrow/Escrow.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n /**\r\n  * @title Escrow\r\n  * @dev Base escrow contract, holds funds designated for a payee until they\r\n  * withdraw them.\r\n  * @dev Intended usage: This contract (and derived escrow contracts) should be a\r\n  * standalone contract, that only interacts with the contract that instantiated\r\n  * it. That way, it is guaranteed that all Ether will be handled according to\r\n  * the Escrow rules, and there is no need to check for payable functions or\r\n  * transfers in the inheritance tree. The contract that uses the escrow as its\r\n  * payment method should be its primary, and provide public methods redirecting\r\n  * to the escrow's deposit and withdraw.\r\n  */\r\ncontract Escrow is Secondary {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposited(address indexed payee, uint256 weiAmount);\r\n    event Withdrawn(address indexed payee, uint256 weiAmount);\r\n\r\n    mapping(address => uint256) private _deposits;\r\n\r\n    function depositsOf(address payee) public view returns (uint256) {\r\n        return _deposits[payee];\r\n    }\r\n\r\n    /**\r\n     * @dev Stores the sent amount as credit to be withdrawn.\r\n     * @param payee The destination address of the funds.\r\n     */\r\n    function deposit(address payee) public onlyPrimary payable {\r\n        uint256 amount = msg.value;\r\n        _deposits[payee] = _deposits[payee].add(amount);\r\n\r\n        emit Deposited(payee, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated balance for a payee.\r\n     * @param payee The address whose funds will be withdrawn and transferred to.\r\n     */\r\n    function withdraw(address payable payee) public onlyPrimary {\r\n        uint256 payment = _deposits[payee];\r\n\r\n        _deposits[payee] = 0;\r\n\r\n        payee.transfer(payment);\r\n\r\n        emit Withdrawn(payee, payment);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ConditionalEscrow\r\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\r\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\r\n */\r\ncontract ConditionalEscrow is Escrow {\r\n    /**\r\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\r\n     * implemented by derived contracts.\r\n     * @param payee The destination address of the funds.\r\n     */\r\n    function withdrawalAllowed(address payee) public view returns (bool);\r\n\r\n    function withdraw(address payable payee) public {\r\n        require(withdrawalAllowed(payee));\r\n        super.withdraw(payee);\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Independent/RefundEscrow.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title RefundEscrow\r\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\r\n * parties.\r\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\r\n * @dev The primary account (that is, the contract that instantiates this\r\n * contract) may deposit, close the deposit period, and allow for either\r\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\r\n * with RefundEscrow will be made through the primary contract. See the\r\n * RefundableCrowdsale contract for an example of RefundEscrow’s use.\r\n */\r\ncontract RefundEscrow is ConditionalEscrow {\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    event RefundsClosed();\r\n    event RefundsEnabled();\r\n\r\n    State private _state;\r\n    address payable private _beneficiary;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param beneficiary The beneficiary of the deposits.\r\n     */\r\n    constructor (address payable beneficiary) public {\r\n        require(beneficiary != address(0));\r\n        _beneficiary = beneficiary;\r\n        _state = State.Active;\r\n    }\r\n\r\n    /**\r\n     * @return the current state of the escrow.\r\n     */\r\n    function state() public view returns (State) {\r\n        return _state;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the escrow.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores funds that may later be refunded.\r\n     * @param refundee The address funds will be sent to if a refund occurs.\r\n     */\r\n    function deposit(address refundee) public payable {\r\n        require(_state == State.Active);\r\n        super.deposit(refundee);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\r\n     * further deposits.\r\n     */\r\n    function close() public onlyPrimary {\r\n        require(_state == State.Active);\r\n        _state = State.Closed;\r\n        emit RefundsClosed();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows for refunds to take place, rejecting further deposits.\r\n     */\r\n    function enableRefunds() public onlyPrimary {\r\n        require(_state == State.Active);\r\n        _state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the beneficiary's funds.\r\n     */\r\n    function beneficiaryWithdraw() public onlyPrimary {\r\n        _beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the beneficiary's funds.\r\n     */\r\n    function customWithdraw(uint256 etherAmount, address payable account) public onlyPrimary {\r\n        account.transfer(etherAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\r\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\r\n     */\r\n    function withdrawalAllowed(address) public view returns (bool) {\r\n        return _state == State.Refunding;\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Distribution/RefundableCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of FinalizableCrowdsale contract that adds a funding goal, and the possibility of users\r\n * getting a refund if goal is not met.\r\n *\r\n * Deprecated, use RefundablePostDeliveryCrowdsale instead. Note that if you allow tokens to be traded before the goal\r\n * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\r\n * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\r\n * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n    using Votings for Votings.Voting;\r\n\r\n    event FundsWithdraw(uint256 indexed etherAmount, address indexed account);\r\n\r\n    // Current vote processes\r\n    Votings.Voting private _votings;\r\n\r\n    // refund escrow used to hold funds while crowdsale is running\r\n    RefundEscrow private _escrow;\r\n\r\n    /**\r\n     * @dev Constructor, creates RefundEscrow.\r\n     */\r\n    constructor () public {\r\n        _escrow = new RefundEscrow(wallet());\r\n    }\r\n\r\n    /**\r\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n     * @param refundee Whose refund will be claimed.\r\n     */\r\n    function claimRefund(address payable refundee) public {\r\n        require(finalized());\r\n        require(!goalReached());\r\n\r\n        _escrow.withdraw(refundee);\r\n    }\r\n\r\n    function beneficiaryWithdraw(uint256 etherAmount, address payable account) AdminOnly public {\r\n        if (goalReached() && consensus(etherAmount, address(account))) {\r\n            _escrow.customWithdraw(etherAmount * 1e18, account);\r\n            emit FundsWithdraw(etherAmount * 1e18, address(account));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev escrow finalization task, called when finalize() is called\r\n     */\r\n    function _finalization() internal {\r\n        if (goalReached()) {\r\n            _escrow.close();\r\n            _escrow.beneficiaryWithdraw();\r\n        } else {\r\n            uint256 day = 86400;\r\n            require(block.timestamp > softcapDeadline() + day);\r\n            _escrow.enableRefunds();\r\n        }\r\n\r\n        super._finalization();\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\r\n     */\r\n    function _forwardFunds(uint256 weiAmount) internal {\r\n        _escrow.deposit.value(weiAmount)(msg.sender);\r\n    }\r\n\r\n    /**\r\n   * @dev require (N/2)+1 admins to be agreed with the proposal\r\n   * @return do all admins agreed with the proposal?\r\n   */\r\n    function consensus(uint256 etherAmount, address account) private returns (bool) {\r\n        return _votings.voteAndCheck(\r\n            Helpers.mixId(account, etherAmount),\r\n            msg.sender,\r\n            Helpers.majority(countAdmins())\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Distribution/PostDeliveryCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title PostDeliveryCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\r\n */\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev contains virtual balances.\r\n    * All balance records are written\r\n    * here until softcap is reached\r\n    */\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /**\r\n    * @dev list of backers with virtual balances\r\n    */\r\n    address[] private _backers;\r\n\r\n    /**\r\n     * @dev Withdraw tokens only after crowdsale ends.\r\n     * @param beneficiary Whose tokens will be withdrawn.\r\n     */\r\n    function withdrawTokens(address beneficiary) public {\r\n        require(goalReached());\r\n        uint256 amount = _balances[beneficiary];\r\n        require(amount > 0);\r\n        _balances[beneficiary] = 0;\r\n        _deliverTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @return the balance of an account.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function backers() public view returns (address[] memory) {\r\n        return _backers;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Amount of tokens purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        if (!goalReached()) {\r\n            _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n            _backers.push(beneficiary);\r\n            _addSold(tokenAmount);\r\n            return;\r\n        }\r\n        super._processPurchase(beneficiary, tokenAmount);\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Core/Distribution/RefundablePostDeliveryCrowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundablePostDeliveryCrowdsale\r\n * @dev Extension of RefundableCrowdsale contract that only delivers the tokens\r\n * once the crowdsale has the goal met, preventing refunds to be issued\r\n * to token holders.\r\n */\r\ncontract RefundablePostDeliveryCrowdsale is RefundableCrowdsale, PostDeliveryCrowdsale {\r\n    function withdrawTokens(address beneficiary) public {\r\n        require(goalReached());\r\n        super.withdrawTokens(beneficiary);\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale/Moon_Token_Crowdsale.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Moon Token for MoonTrader Platform and projects\r\n    More information at https://moontrader.io/\r\n\r\n    MoonTrader is a successor of the  MoonBot project, https://moon-bot.com/en/\r\n\r\n    Mail us to: info@moontrader.io \r\n\r\n    Join the Telegram channel https://t.me/moontrader_news_en, \r\n    Visit BTT forum thread https://bitcointalk.org/index.php?topic=5143969 for more information.\r\n\r\n */\r\n\r\ncontract Moon_Token_Crowdsale is\r\nUpdatableRateCrowdsale,\r\nMilestonedCrowdsale,\r\nInvestOnBehalf,\r\nMintedCrowdsale,\r\nRefundablePostDeliveryCrowdsale\r\n{\r\n    constructor(\r\n        ERC20Mintable _token,\r\n        address payable _wallet,\r\n\r\n        uint256 _rate,\r\n        uint256 _supply,\r\n        uint256 _softcap,\r\n\r\n        uint256 _open,\r\n        uint256 _softline,\r\n        uint256 _close\r\n    )\r\n    public\r\n    Crowdsale(_rate, _supply, _wallet, _token)\r\n    TimedCrowdsale(_open, _softline, _close)\r\n    SoftcappedCrowdsale(_softcap){\r\n    }\r\n\r\n    /**\r\n     * @dev finish contract initialization. Made because of \"stack size\".\r\n     * @param _minimalPay amount in wei\r\n     * @param admins list\r\n     * @param milestones list\r\n     */\r\n    function finishSetup(\r\n        uint256 _minimalPay,\r\n        uint256[] memory milestones,\r\n        address[] memory admins\r\n    ) WhileSetup public {\r\n        setMinimalPay(_minimalPay);\r\n        initMilestones(milestones);\r\n        initAdmins(admins);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimalPay\",\"type\":\"uint256\"},{\"name\":\"milestones\",\"type\":\"uint256[]\"},{\"name\":\"admins\",\"type\":\"address[]\"}],\"name\":\"finishSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"beneficiaryWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"expelAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundee\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"investOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_softcap\",\"type\":\"uint256\"},{\"name\":\"_open\",\"type\":\"uint256\"},{\"name\":\"_softline\",\"type\":\"uint256\"},{\"name\":\"_close\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FundsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"InvestedOnBehalf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"milestone\",\"type\":\"uint256\"}],\"name\":\"MilestoneReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"Moon_Token_Crowdsale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d47a07070bd8a670407038941318783cf2070a1e000000000000000000000000d0efb8e61384601e0b119cf8d2501c3144e0648800000000000000000000000000000000000000000000000000000000000000fd000000000000000000000000000000000000000000027b46536c66c8e300000000000000000000000000000000000000000000000001287626ee52197b000000000000000000000000000000000000000000000000000000000000005cdb5680000000000000000000000000000000000000000000000000000000005d38f100000000000000000000000000000000000000000000000000000000005db23b00","Library":"","SwarmSource":"bzzr://01723f6d328303dc35624389b38ce745521fba0e5e327c113a8ff3dca931df52"}]}