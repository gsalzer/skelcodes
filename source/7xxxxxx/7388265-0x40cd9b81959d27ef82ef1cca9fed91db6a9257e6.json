{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AddressWhitelist is Ownable {\r\n    enum Status { None, In, Out }\r\n    mapping(address => Status) private whitelist;\r\n\r\n    address[] private whitelistIndices;\r\n\r\n    // Adds an address to the whitelist\r\n    function addToWhitelist(address newElement) external onlyOwner {\r\n        // Ignore if address is already included\r\n        if (whitelist[newElement] == Status.In) {\r\n            return;\r\n        }\r\n\r\n        // Only append new addresses to the array, never a duplicate\r\n        if (whitelist[newElement] == Status.None) {\r\n            whitelistIndices.push(newElement);\r\n        }\r\n\r\n        whitelist[newElement] = Status.In;\r\n\r\n        emit AddToWhitelist(newElement);\r\n    }\r\n\r\n    // Removes an address from the whitelist.\r\n    function removeFromWhitelist(address elementToRemove) external onlyOwner {\r\n        if (whitelist[elementToRemove] != Status.Out) {\r\n            whitelist[elementToRemove] = Status.Out;\r\n            emit RemoveFromWhitelist(elementToRemove);\r\n        }\r\n    }\r\n\r\n    // Checks whether an address is on the whitelist.\r\n    function isOnWhitelist(address elementToCheck) external view returns (bool) {\r\n        return whitelist[elementToCheck] == Status.In;\r\n    }\r\n\r\n    // Gets all addresses that are currently included in the whitelist\r\n    // Note: This method skips over, but still iterates through addresses.\r\n    // It is possible for this call to run out of gas if a large number of\r\n    // addresses have been removed. To prevent this unlikely scenario, we can\r\n    // modify the implementation so that when addresses are removed, the last addresses\r\n    // in the array is moved to the empty index.\r\n    function getWhitelist() external view returns (address[] memory activeWhitelist) {\r\n        // Determine size of whitelist first\r\n        uint activeCount = 0;\r\n        for (uint i = 0; i < whitelistIndices.length; i++) {\r\n            if (whitelist[whitelistIndices[i]] == Status.In) {\r\n                activeCount++;\r\n            }\r\n        }\r\n\r\n        // Populate whitelist\r\n        activeWhitelist = new address[](activeCount);\r\n        activeCount = 0;\r\n        for (uint i = 0; i < whitelistIndices.length; i++) {\r\n            address addr = whitelistIndices[i];\r\n            if (whitelist[addr] == Status.In) {\r\n                activeWhitelist[activeCount] = addr;\r\n                activeCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    event AddToWhitelist(address indexed addedAddress);\r\n    event RemoveFromWhitelist(address indexed removedAddress);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"elementToCheck\",\"type\":\"address\"}],\"name\":\"isOnWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"elementToRemove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"name\":\"activeWhitelist\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newElement\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedAddress\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AddressWhitelist","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://624fd63ed6509d9dd1ccdd199d8ff311da3b1cb0d6325a3d3341d24b7924312a"}]}