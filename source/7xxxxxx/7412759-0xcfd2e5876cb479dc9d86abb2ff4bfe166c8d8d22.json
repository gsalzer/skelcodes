{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n * Dedit\r\n * (IProperty V2)\r\n *\r\n * Blockchain Italia srl (blockchainitalia.io)\r\n * 21 Marzo 2019\r\n */\r\n\r\ncontract Dedit {\r\n    event RegistrationCreated(address indexed registrant, bytes32 indexed hash, uint blockNumber, string description);\r\n    event RegistrationUpdated(address indexed registrant, bytes32 indexed hash, uint blockNumber, string description);\r\n\r\n    struct Registration {\r\n        address registrant;\r\n        bytes32 hash;\r\n        uint blockNumber;\r\n        string description;\r\n    }\r\n\r\n    mapping(bytes32 => Registration) registrations;\r\n\r\n    function _register(bytes32 hash, string memory description, address registrant) internal {\r\n\r\n        Registration storage registration = registrations[hash];\r\n\r\n        if (registration.registrant == address(0)) {         // this is the first registration of this hash\r\n            registration.registrant = registrant;\r\n            registration.hash = hash;\r\n            registration.blockNumber = block.number;\r\n            registration.description = description;\r\n\r\n            emit RegistrationCreated(registrant, hash, block.number, description);\r\n        }\r\n        else if (registration.registrant == registrant) {    // this is an update coming from the first owner\r\n            registration.description = description;\r\n\r\n            emit RegistrationUpdated(registrant, hash, registration.blockNumber, description);\r\n        }\r\n        else\r\n            revert(\"only owner can change his registration\");\r\n\r\n    }\r\n\r\n    function register(bytes32 hash, string memory description) public {\r\n\r\n        _register(hash, description, msg.sender);\r\n\r\n    }\r\n\r\n    function registerOnBehalfOf(bytes32 hash, string memory description, address signer, bytes memory signature) public {\r\n\r\n        bytes32 message = this.ethSignedRegistration(hash, description);   // require eth_sign behavior\r\n        address actualSigner = recoverSigner(message, signature);\r\n\r\n        require(actualSigner != address(0), \"wrong signature\");\r\n        require(actualSigner == signer, \"wrong signer\");\r\n\r\n        _register(hash, description, actualSigner);\r\n    }\r\n\r\n    function retrieve(bytes32 hash) public view returns (address, bytes32, uint, string memory) {\r\n\r\n        Registration storage registration = registrations[hash];\r\n\r\n        return (registration.registrant, registration.hash, registration.blockNumber, registration.description);\r\n\r\n    }\r\n\r\n    function ethSignedRegistration(bytes32 hash, string memory description) public view returns (bytes32) {\r\n        bytes32 messageHash = keccak256(abi.encodePacked(hash, description, address(this)));\r\n        return ethSignedMessage(messageHash);\r\n    }\r\n\r\n    function ethSignedMessage(bytes32 messageHash) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));   // eth.sign behavior\r\n    }\r\n\r\n    // internals\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address)\r\n    {\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        }\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"ethSignedMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ethSignedRegistration\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"retrieve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"registerOnBehalfOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"RegistrationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"RegistrationUpdated\",\"type\":\"event\"}]","ContractName":"Dedit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24a501bbb324acaa4a95f0048f85c2f2a05510d79debaa2709b077a33fa792f3"}]}