{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\n/**\r\n * @title TokenRecover\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n  /**\r\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n   * @param _tokenAddress address The token contract address\r\n   * @param _tokens Number of tokens to be sent\r\n   * @return bool\r\n   */\r\n  function recoverERC20(\r\n    address _tokenAddress,\r\n    uint256 _tokens\r\n  )\r\n  public\r\n  onlyOwner\r\n  returns (bool success)\r\n  {\r\n    return ERC20Basic(_tokenAddress).transfer(owner, _tokens);\r\n  }\r\n}\r\n\r\n// File: contracts/token/GroupForkTimelock.sol\r\n\r\n/**\r\n * @title GroupForkTimelock\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev GroupForkTimelock is a token holder contract that will allow a\r\n * group of beneficiaries to extract the tokens after a given release time\r\n */\r\ncontract GroupForkTimelock is TokenRecover {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // number of totals locked tokens\r\n  uint256 public lockedTokens;\r\n\r\n  // beneficiaries of tokens after they are released\r\n  address[] public accounts;\r\n\r\n  // amounts of tokens for each beneficiary\r\n  mapping(address => uint256) public reservedTokens;\r\n\r\n  // map of address and received token amount\r\n  mapping (address => uint256) public receivedTokens;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address[] _accounts,\r\n    uint256[] _amounts,\r\n    uint256 _releaseTime\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    require(_accounts.length > 0);\r\n    require(_amounts.length > 0);\r\n    require(_accounts.length == _amounts.length);\r\n\r\n    token = _token;\r\n    accounts = _accounts;\r\n    releaseTime = _releaseTime;\r\n\r\n    for (uint i = 0; i < accounts.length; i++) {\r\n      address account = accounts[i];\r\n      uint256 amount = _amounts[i];\r\n\r\n      reservedTokens[account] = amount;\r\n      lockedTokens = lockedTokens.add(amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiaries.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 balance = token.balanceOf(address(this));\r\n    require(balance == lockedTokens);\r\n\r\n    for (uint i = 0; i < accounts.length; i++) {\r\n      address account = accounts[i];\r\n      uint256 amount = reservedTokens[account];\r\n\r\n      if (receivedTokens[account] == 0) {\r\n        receivedTokens[account] = receivedTokens[account].add(amount);\r\n        token.safeTransfer(account, amount);\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GroupForkTimelock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005bb1632fa0023e1aa76a1ae92b4635c8dba49fa200000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000005cc8c560000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000019a34c3a60d30183a1babad2f40eebce117f1f9000000000000000000000000059aa2796a6d6227e78438d1d22498108e8e469ed00000000000000000000000011b1590777d025e82c0fa900209c8b598b8e585e000000000000000000000000c6ddd12d50134ab6e834497bd4a521492839f6690000000000000000000000005a505f10bc54ca6232656475e5d7b8c45a1510620000000000000000000000006711275d8db049e1ad942dfb6b2e32f04e453f5f0000000000000000000000005aac3d9166f779d77fdee6c5205f37f8dc4840dd000000000000000000000000edfd19f7cf819e5fe67b51bcc33e3ed7e55b288c0000000000000000000000006e38aa8962aaed04c16e1419e97bc48cb2820651000000000000000000000000b2381533a81bf0b6e79bc3b21ac795e4312bd669000000000000000000000000aaf7f8c0c5ba096f5519bda7ac4e9970cdb77f05000000000000000000000000a9b9a29a80d92718087b98c6e696b42c27ee4842000000000000000000000000a4dc88f689dd6723e1ad2eebf1fdad95624fd47c000000000000000000000000495a5ce072721db6af6fa070c92c5accb1f56261000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000005f4a8c8375d155400000000000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000005f4a8c8375d1554000000000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000a968163f0a57b400000","Library":"","SwarmSource":"bzzr://d66e7c2baa07477a25a7d2ea7baae8bcce5ff81425a92ce6eb3a4f048432bf55"}]}