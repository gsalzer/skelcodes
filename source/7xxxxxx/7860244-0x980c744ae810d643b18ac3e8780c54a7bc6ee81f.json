{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n// * Gods Unchained Ticket Sale\r\n//\r\n// * Version 1.0\r\n//\r\n// * A dedicated contract selling tickets for the Gods Unchained tournament.\r\n//\r\n// * https://gu.cards\r\n\r\ncontract ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract TournamentTicket is ERC20Interface {}\r\n\r\ncontract TournamentTicketSale {\r\n\r\n    //////// V A R I A B L E S\r\n    //\r\n    // The ticket owner\r\n    //\r\n    address payable constant public ticketOwner = 0x317D875cA3B9f8d14f960486C0d1D1913be74e90;\r\n    //\r\n    // The ticket contract\r\n    //\r\n    TournamentTicket constant public ticketContract = TournamentTicket(0x22365168c8705E95B2D08876C23a8c13E3ad72E2);\r\n    //\r\n    // In case the sale is paused.\r\n    //\r\n    bool public paused;\r\n    //\r\n    // Price per ticket.\r\n    //\r\n    uint public pricePerTicket;\r\n    //\r\n    // Standard contract ownership.\r\n    //\r\n    address payable public owner;\r\n\r\n    //////// M O D I F I E R S\r\n    //\r\n    // Invokable only by contract owner.\r\n    //\r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner, \"Function called by non-owner.\");\r\n        _;\r\n    }\r\n    //\r\n    // Invokable only if exchange is not paused.\r\n    //\r\n    modifier onlyUnpaused {\r\n        require(paused == false, \"Exchange is paused.\");\r\n        _;\r\n    }\r\n\r\n    //////// C O N S T R U C T O R\r\n    //\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //////// F U N C T I O N S\r\n    //\r\n    // Buy a single ticket.\r\n    //\r\n    function buyOne() onlyUnpaused payable external {\r\n        require(msg.value == pricePerTicket, \"The amout sent is not corresponding with the ticket price!\");\r\n        \r\n        require(\r\n            ticketContract.transferFrom(ticketOwner, msg.sender, 1),\r\n            \"Ticket transfer failed!\"\r\n        );\r\n    }\r\n    //\r\n    // Sets current ticket price.\r\n    //\r\n    function setTicketPrice(uint price) external onlyContractOwner {\r\n        pricePerTicket = price;\r\n    }\r\n    //\r\n    // Set paused\r\n    //\r\n    function setPaused(bool value) external onlyContractOwner {\r\n        paused = value;\r\n    }\r\n    //\r\n    // Funds withdrawal to cover operational costs\r\n    //\r\n    function withdrawFunds(uint withdrawAmount) external onlyContractOwner {\r\n        ticketOwner.transfer(withdrawAmount);\r\n    }\r\n    //\r\n    // Contract may be destroyed only when there are no ongoing bets,\r\n    // either settled or refunded. All funds are transferred to contract owner.\r\n    //\r\n    function kill() external onlyContractOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TournamentTicketSale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8e4dc27267bddb1d97005d023df9825ccb8d75504199eda012d39d6d913daa3"}]}