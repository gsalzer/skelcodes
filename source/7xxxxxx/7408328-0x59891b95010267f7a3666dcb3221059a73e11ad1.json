{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.6;\r\n\r\ncontract P3XRoll {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Bet {\r\n        uint256 amount;\r\n        uint256 chance;\r\n        uint256 blocknumber;\r\n        bool isOpen;\r\n    }\r\n    \r\n    mapping(address => Bet) public bets;\r\n    uint256 public numberOfBets;\r\n    \r\n    mapping(address => uint256) private playerVault;\r\n    uint256 public pot;\r\n    \r\n    uint256 constant public MIN_BET = 1e18; // 1 P3X\r\n    uint256 constant private MAX_PROFIT_DIVISOR = 100;\r\n    \r\n    event Win(address indexed player, uint256 indexed roll, uint256 indexed amount);\r\n    event Loss(address indexed player, uint256 indexed roll, uint256 indexed amount);\r\n    event Expiration(address indexed player, uint256 indexed amount);\r\n    \r\n    address constant private P3X_ADDRESS = address(0x058a144951e062FC14f310057D2Fd9ef0Cf5095b);\r\n    IP3X constant private p3xContract = IP3X(P3X_ADDRESS);\r\n    \r\n    address constant private DEV = address(0x1EB2acB92624DA2e601EEb77e2508b32E49012ef);\r\n    \r\n    //shareholder setup\r\n    struct Shareholder {\r\n        uint256 tokens;\r\n        uint256 outstandingDividends;\r\n        uint256 lastDividendPoints;\r\n    }\r\n\r\n    uint256 constant private MAX_SUPPLY = 20000e18;\r\n    uint256 public totalSupply;\r\n    mapping(address => Shareholder) public shareholders;\r\n    bool public minting = true;\r\n    \r\n    uint256 constant private POINT_MULTIPLIER = 10e18;\r\n    uint256 private totalDividendPoints;\r\n    uint256 public totalOutstandingDividends;\r\n    \r\n    uint256 constant private DIVIDEND_FETCH_TIME = 1 hours;\r\n    uint256 private lastDividendsFetched;\r\n    \r\n    event Mint(address indexed player, uint256 indexed amount);\r\n    \r\n    modifier updateDividends()\r\n    {\r\n        if(now - lastDividendsFetched > DIVIDEND_FETCH_TIME && totalSupply > 0) {\r\n            fetchDividendsFromP3X();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function() external payable {}\r\n    \r\n    function tokenFallback(address player, uint256 amount, bytes calldata data)\r\n\t    external\r\n\t    updateDividends\r\n\t{\r\n\t    require(msg.sender == P3X_ADDRESS);\r\n\t    \r\n\t    if(data[0] == 0) {\r\n\t        fundPot(player, amount);\r\n\t    } else {\r\n\t        placeBet(player, amount, uint8(data[0]));\r\n\t    }\r\n\t}\r\n        \r\n    function playFromVault(uint256 amount, uint256 chance)\r\n        external\r\n        updateDividends\r\n    {\r\n        playerVault[msg.sender] = playerVault[msg.sender].sub(amount);\r\n        \r\n        placeBet(msg.sender, amount, chance);\r\n    }\r\n    \r\n    function placeBet(address player, uint256 amount, uint256 chance)\r\n        private\r\n    {\r\n        require(chance >= 1 && chance <= 98);\r\n        require(amount >= MIN_BET);\r\n        \r\n        if(hasActiveBet(player)) {\r\n            fetch(player);\r\n        }\r\n        \r\n        uint256 potentialProfit = potentialProfit(amount, chance);\r\n        require(potentialProfit <= maximumProfit());\r\n        \r\n        bets[player] = Bet(amount, chance, block.number + 1, true);\r\n        numberOfBets++;\r\n        \r\n        pot = pot.add(amount);\r\n        \r\n        if(minting) {\r\n            mint(player, potentialProfit < amount ? potentialProfit : amount);\r\n        }\r\n    }\r\n    \r\n    function fetchResult()\r\n        external\r\n        updateDividends\r\n    {\r\n        require(hasActiveBet(msg.sender));\r\n        \r\n        fetch(msg.sender);\r\n    }\r\n    \r\n    function fetch(address player)\r\n        private\r\n    {\r\n        Bet storage bet = bets[player];\r\n        \r\n        require(bet.blocknumber < block.number);\r\n        \r\n        bet.isOpen = false;\r\n        \r\n        if(block.number - 256 > bet.blocknumber) {\r\n            emit Expiration(player, bet.amount);\r\n            return;\r\n        }\r\n        \r\n        uint256 roll = (uint256(blockhash(bet.blocknumber)) % 100) + 1;\r\n        \r\n        if(roll <= bet.chance) {\r\n            uint256 totalReturn = bet.amount.mul(99) / bet.chance;\r\n            playerVault[player] = playerVault[player].add(totalReturn);\r\n            pot = pot.sub(totalReturn);\r\n            emit Win(player, roll, totalReturn - bet.amount);\r\n        } else {\r\n            emit Loss(player, roll, bet.amount);\r\n        }\r\n    }\r\n    \r\n    function withdrawEarnings()\r\n        external\r\n        updateDividends\r\n    {\r\n        uint256 amount = playerVault[msg.sender];\r\n        \r\n        require(amount > 0);\r\n        \r\n        playerVault[msg.sender] = 0;\r\n        \r\n        p3xContract.transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function withdrawDividends()\r\n        external\r\n    {\r\n        Shareholder storage shareholder = shareholders[msg.sender];\r\n        \r\n        updateOutstandingDividends(shareholder);\r\n        \r\n        uint256 amount = shareholder.outstandingDividends;\r\n        \r\n        require(amount > 0);\r\n        \r\n        shareholder.outstandingDividends = 0;\r\n        totalOutstandingDividends = totalOutstandingDividends.sub(amount);\r\n\t\t\r\n\t    msg.sender.transfer(amount);\r\n    }\r\n    \r\n    function fundPot(address player, uint256 amount)\r\n        private\r\n    {\r\n        require(minting);\r\n        \r\n        pot = pot.add(amount);\r\n        \r\n        mint(player, amount);\r\n    }\r\n    \r\n    function mint(address player, uint256 amount)\r\n        private\r\n    {\r\n        uint256 amountToMint;\r\n        if(totalSupply.add(amount) < MAX_SUPPLY) {\r\n            amountToMint = amount;\r\n        } else {\r\n            amountToMint = MAX_SUPPLY.sub(totalSupply);\r\n            minting = false;\r\n        }\r\n        \r\n        Shareholder storage minter = shareholders[player];\r\n        Shareholder storage dev = shareholders[DEV];\r\n        \r\n        updateOutstandingDividends(minter);\r\n        updateOutstandingDividends(dev);\r\n        \r\n        totalSupply = totalSupply.add(amountToMint);\r\n        minter.tokens = minter.tokens.add(amountToMint.mul(19) / 20);\r\n        dev.tokens = dev.tokens.add(amountToMint / 20);\r\n        \r\n        emit Mint(player, amountToMint);\r\n    }\r\n    \r\n    function updateOutstandingDividends(Shareholder storage shareholder)\r\n        private\r\n    {\r\n        uint256 dividendPointsDifference = totalDividendPoints.sub(shareholder.lastDividendPoints);\r\n        \r\n        shareholder.lastDividendPoints = totalDividendPoints;\r\n        shareholder.outstandingDividends = shareholder.outstandingDividends\r\n                                            .add(dividendPointsDifference.mul(shareholder.tokens) / POINT_MULTIPLIER);\r\n    }\r\n    \r\n    function fetchDividendsFromP3X()\r\n        public\r\n    {\r\n        lastDividendsFetched = now;\r\n        \r\n        uint256 dividends = p3xContract.dividendsOf(address(this), true);\r\n        if(dividends > 0) {\r\n              p3xContract.withdraw();\r\n              totalDividendPoints = totalDividendPoints.add(dividends.mul(POINT_MULTIPLIER) / totalSupply);\r\n              totalOutstandingDividends = totalOutstandingDividends.add(dividends);\r\n        }\r\n    }\r\n    \r\n    //\r\n    // VIEW FUNCTIONS\r\n    //\r\n    function maximumProfit()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return pot / MAX_PROFIT_DIVISOR;\r\n    }\r\n    \r\n    function potentialProfit(uint256 amount, uint256 chance)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n       return (amount.mul(99) / chance).sub(amount);\r\n    }\r\n    \r\n    function hasActiveBet(address player)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return bets[player].isOpen;\r\n    }\r\n    \r\n    function myEarnings()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return playerVault[msg.sender];\r\n    }\r\n    \r\n    function myDividends()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address shareholder = msg.sender;\r\n        \r\n        uint256 dividendPointsDifference = totalDividendPoints.sub(shareholders[shareholder].lastDividendPoints);\r\n        return shareholders[shareholder].outstandingDividends\r\n                .add(dividendPointsDifference.mul(shareholders[shareholder].tokens) / POINT_MULTIPLIER);\r\n    }\r\n    \r\n    function myTokens()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return shareholders[msg.sender].tokens;\r\n    }\r\n    \r\n    function myTokenShare()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalSupply > 0 ? shareholders[msg.sender].tokens.mul(100) / totalSupply : 0;\r\n    }\r\n    \r\n    function myP3XBalance()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return p3xContract.balanceOf(msg.sender);\r\n    }\r\n    \r\n    function fetchableDividendsFromP3X()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return p3xContract.dividendsOf(address(this), true);\r\n    }\r\n    \r\n    function mintableTokens()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return MAX_SUPPLY.sub(totalSupply);\r\n    }\r\n    \r\n    function timeUntilNextDividendFetching()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 difference = now.sub(lastDividendsFetched);\r\n        return difference > DIVIDEND_FETCH_TIME ? 0 : DIVIDEND_FETCH_TIME.sub(difference);\r\n    }\r\n}\r\n\r\ninterface IP3X {\r\n    function transfer(address to, uint256 value) external returns(bool);\r\n\tfunction transfer(address to, uint value, bytes calldata data) external returns(bool ok);\r\n    function buy(address referrerAddress) payable external returns(uint256);\r\n    function balanceOf(address tokenOwner) external view returns(uint);\r\n\tfunction dividendsOf(address customerAddress, bool includeReferralBonus) external view returns(uint256);\r\n    function withdraw() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOutstandingDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholders\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"outstandingDividends\",\"type\":\"uint256\"},{\"name\":\"lastDividendPoints\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeUntilNextDividendFetching\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"chance\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"isOpen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokenShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"potentialProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myP3XBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchDividendsFromP3X\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchableDividendsFromP3X\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"hasActiveBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"playFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Expiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"P3XRoll","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a93f28d352523cb1acb328074b31350f4a64f34ef684bf0a759b367d5d10876c"}]}