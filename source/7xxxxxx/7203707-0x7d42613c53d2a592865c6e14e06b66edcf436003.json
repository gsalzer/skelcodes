{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title NeuralTrade Network Tokensale Contract\r\n * @dev Symbol: Network\r\n * @dev Name: NeuralTrade Token\r\n * @dev Total Supply: 10000000\r\n * @dev Decimals: 2\r\n * @dev (c) by NeuralTrade Network\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b; assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  * @param _spender The address which will spend the funds.\r\n  * @param _value The amount of tokens to be spent.\r\n  */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param _owner address The address which owns the funds.\r\n  * @param _spender address The address which will spend the funds.\r\n  * @return A uint256 specifying the amount of tokens still available for the spender.\r\n  */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n /**\r\n  * approve should be called when allowed[_spender] == 0. To increment\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Owned\r\n */\r\ncontract Owned {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\n\r\ncontract BurnableToken is StandardToken, Owned {\r\n\r\n  /**\r\n  * @dev Burns a specific amount of tokens.\r\n  * @param _value The amount of token to be burned.\r\n  */\r\n\r\n  function burn(uint _value) public {\r\n    require(_value > 0);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(burner, _value);\r\n  }\r\n\r\n  event Burn(address indexed burner, uint indexed value);\r\n\r\n}\r\n\r\ncontract NeuralTradeToken is BurnableToken {\r\n\r\n    string public constant name = \"Neural Trade Token\";\r\n\r\n    string public constant symbol = \"NET\";\r\n\r\n    uint32 public constant decimals = 2;\r\n\r\n    uint256 public INITIAL_SUPPLY = 10000000 * 1 ether;\r\n\r\n    constructor() public {\r\n      totalSupply = INITIAL_SUPPLY;\r\n      balances[msg.sender] = INITIAL_SUPPLY;\r\n    }\r\n\r\n}\r\n\r\ncontract NETCrowdsale is Owned {\r\n   using SafeMath for uint;\r\n\r\n    address vaulted;\r\n\r\n    uint restrictedPercent;\r\n\r\n    address restricted;\r\n\r\n    NeuralTradeToken public token = new NeuralTradeToken();\r\n\r\n    uint start;\r\n\r\n    uint period = 140;\r\n\r\n    uint hardcap;\r\n\r\n    uint rate;\r\n\r\n    uint minPurchase;\r\n\r\n    uint earlyBirdBonus;\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n        vaulted = 0xD1eA8ACE84C56BF21a1b481Ca492b6aA65D95830;\r\n        restricted = 0xBbC18b0824709Fd3E0fA3aF49b812E5B6efAC3c1;\r\n        restrictedPercent = 50;\r\n        rate = 100000000000000000000;\r\n        start = 1549843200;\r\n        period = 140;\r\n        minPurchase = 0.1 ether;\r\n        earlyBirdBonus = 1 ether;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n    \trequire(now > start && now < start + period * 1 days);\r\n    \t_;\r\n    }\r\n\r\n    modifier purchaseAllowed() {\r\n        require(msg.value >= minPurchase);\r\n        _;\r\n    }\r\n\r\n    function createTokens() saleIsOn purchaseAllowed public payable {\r\n        vaulted.transfer(msg.value);\r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        uint bonusTokens = 0;\r\n        if(now < start + (period * 1 days).div(10) && msg.value >= earlyBirdBonus) {\r\n          bonusTokens = tokens.div(1);\r\n        } else if(now < start + (period * 1 days).div(10).mul(2)) {\r\n          bonusTokens = tokens.div(2);\r\n        } else if(now >= start + (period * 1 days).div(10).mul(2) && now < start + (period * 1 days).div(10).mul(4)) {\r\n          bonusTokens = tokens.div(4);\r\n        } else if(now >= start + (period * 1 days).div(10).mul(4) && now < start + (period * 1 days).div(10).mul(8)) {\r\n          bonusTokens = tokens.div(5);\r\n        }\r\n        uint tokensWithBonus = tokens.add(bonusTokens);\r\n        token.transfer(msg.sender, tokensWithBonus);\r\n\r\n        uint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\r\n        token.transfer(restricted, restrictedTokens);\r\n\r\n        if(msg.data.length == 20) {\r\n          address referer = bytesToAddress(bytes(msg.data));\r\n          require(referer != msg.sender);\r\n          uint refererTokens = tokens.mul(10).div(100);\r\n          token.transfer(referer, refererTokens);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes source) internal pure returns(address) {\r\n        uint result;\r\n        uint mul = 1;\r\n        for(uint i = 20; i > 0; i--) {\r\n          result += uint8(source[i-1])*mul;\r\n          mul = mul*256;\r\n        }\r\n        return address(result);\r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NETCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57be5b35f19dfe7b95898163a12ff7064c694bec4e78c278f46b42cdc88dfb4c"}]}