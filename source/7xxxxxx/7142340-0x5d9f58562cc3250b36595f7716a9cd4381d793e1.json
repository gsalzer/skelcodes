{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath\r\n{\r\n\tfunction mul(uint a, uint b) internal pure returns (uint)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns (uint)\r\n\t{\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns (uint)\r\n\t{\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint a, uint b) internal pure returns (uint)\r\n\t{\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract ERC721\r\n{\r\n\tfunction approve(address _to, uint _tokenId) public;\r\n\tfunction balanceOf(address _owner) public view returns (uint balance);\r\n\tfunction implementsERC721() public pure returns (bool);\r\n\tfunction ownerOf(uint _tokenId) public view returns (address addr);\r\n\tfunction takeOwnership(uint _tokenId) public;\r\n\tfunction totalSupply() public view returns (uint total);\r\n\tfunction transferFrom(address _from, address _to, uint _tokenId) public;\r\n\tfunction transfer(address _to, uint _tokenId) public;\r\n\r\n\tevent LogTransfer(address indexed from, address indexed to, uint tokenId);\r\n\tevent LogApproval(address indexed owner, address indexed approved, uint tokenId);\r\n}\r\n\r\ncontract CryptoCricketToken is ERC721\r\n{\r\n\tevent LogBirth(uint tokenId, string name, uint internalTypeId, uint Price);\r\n\tevent LogSnatch(uint tokenId, string tokenName, address oldOwner, address newOwner, uint oldPrice, uint newPrice);\r\n\tevent LogTransfer(address from, address to, uint tokenId);\r\n\r\n\tstring public constant name = \"CryptoCricket\";\r\n\tstring public constant symbol = \"CryptoCricketToken\";\r\n\r\n\tuint private commision = 4;\r\n\r\n\tmapping (uint => uint) private startingPrice;\r\n\r\n\t/// @dev A mapping from player IDs to the address that owns them. All players have some valid owner address.\r\n\tmapping (uint => address) public playerIndexToOwner;\r\n\r\n\t// @dev A mapping from owner address to count of tokens that address owns. Used internally inside balanceOf() to resolve ownership count.\r\n\tmapping (address => uint) private ownershipTokenCount;\r\n\r\n\t/// @dev A mapping from PlayerIDs to an address that has been approved to call transferFrom(). Each Player can only have one approved address for transfer at any time. A zero value means no approval is outstanding.\r\n\tmapping (uint => address) public playerIndexToApproved;\r\n\r\n\t// @dev A mapping from PlayerIDs to the price of the token.\r\n\tmapping (uint => uint) private playerIndexToPrice;\r\n\r\n\t// @dev A mapping from PlayerIDs to the reward price of the token obtained while selling.\r\n\tmapping (uint => uint) private playerIndexToRewardPrice;\r\n\r\n\t// The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n\taddress public ceoAddress;\r\n\taddress public devAddress;\r\n\r\n\tstruct Player\r\n\t{\r\n\t\tstring name;\r\n\t\tuint internalTypeId;\r\n\t}\r\n\r\n\tPlayer[] private players;\r\n\r\n\t/// @dev Access modifier for CEO-only functionality\r\n\tmodifier onlyCEO()\r\n\t{\r\n\t\trequire(msg.sender == ceoAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyDevORCEO()\r\n\t{\r\n\t\trequire(msg.sender == devAddress || msg.sender == ceoAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(address _ceo, address _dev) public\r\n\t{\r\n\t\tceoAddress = _ceo;\r\n\t\tdevAddress = _dev;\r\n\t\tstartingPrice[0] = 0.005 ether; // 2x\r\n\t\tstartingPrice[1] = 0.007 ether; // 2.5x\r\n\t\tstartingPrice[2] = 0.005 ether; // 1.5x\r\n\t}\r\n\r\n\t/// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n\t/// @param _to The address to be granted transfer approval. Pass address(0) to\r\n\t///    clear all approvals.\r\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction approve(address _to, uint _tokenId) public\r\n\t{\r\n\t\trequire(owns(msg.sender, _tokenId));\r\n\t\tplayerIndexToApproved[_tokenId] = _to;\r\n\t\temit LogApproval(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction getRewardPrice(uint buyingPrice, uint _internalTypeId) internal view returns(uint rewardPrice)\r\n\t{\r\n\t\tif(_internalTypeId == 0) //Cricket Board Card\r\n\t\t{\r\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 200), 100);\r\n\t\t}\r\n\t\telse if(_internalTypeId == 1) //Country Card\r\n\t\t{\r\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 250), 100);\r\n\t\t}\r\n\t\telse //Player Card\r\n\t\t{\r\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 150), 100);\r\n\t\t}\r\n\r\n\t\trewardPrice = uint(SafeMath.div(SafeMath.mul(rewardPrice, SafeMath.sub(100, commision)), 100));\r\n\t\treturn rewardPrice;\r\n\t}\r\n\r\n\r\n\t/// For creating Player\r\n\tfunction createPlayer(string _name, uint _internalTypeId) public onlyDevORCEO\r\n\t{\r\n\t\trequire (_internalTypeId >= 0 && _internalTypeId <= 2);\r\n\t\tPlayer memory _player = Player({name: _name, internalTypeId: _internalTypeId});\r\n\t\tuint newPlayerId = players.push(_player) - 1;\r\n\t\tplayerIndexToPrice[newPlayerId] = startingPrice[_internalTypeId];\r\n\t\tplayerIndexToRewardPrice[newPlayerId] = getRewardPrice(playerIndexToPrice[newPlayerId], _internalTypeId);\r\n\r\n\t\temit LogBirth(newPlayerId, _name, _internalTypeId, startingPrice[_internalTypeId]);\r\n\r\n\t\t// This will assign ownership, and also emit the Transfer event as per ERC721 draft\r\n\t\t_transfer(address(0), address(this), newPlayerId);\r\n\t}\r\n\r\n\tfunction payout(address _to) public onlyCEO\r\n\t{\r\n\t\tif(_addressNotNull(_to))\r\n\t\t{\r\n\t\t\t_to.transfer(address(this).balance);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tceoAddress.transfer(address(this).balance);\r\n\t\t}\r\n\t}\r\n\r\n\t// Allows someone to send ether and obtain the token\r\n\tfunction purchase(uint _tokenId) public payable\r\n\t{\r\n\t\taddress oldOwner = playerIndexToOwner[_tokenId];\r\n\t\tuint sellingPrice = playerIndexToPrice[_tokenId];\r\n\r\n\t\trequire(oldOwner != msg.sender);\r\n\t\trequire(_addressNotNull(msg.sender));\r\n\t\trequire(msg.value >= sellingPrice);\r\n\r\n\t\taddress newOwner = msg.sender;\r\n\t\tuint payment = uint(SafeMath.div(SafeMath.mul(sellingPrice, SafeMath.sub(100, commision)), 100));\r\n\t\tuint purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\t\tuint _internalTypeId = players[_tokenId].internalTypeId;\r\n\r\n\t\tif(_internalTypeId == 0) //Cricket Board Card\r\n\t\t{\r\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 100);\r\n\t\t}\r\n\t\telse if(_internalTypeId == 1) //Country Card\r\n\t\t{\r\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 250), 100);\r\n\t\t}\r\n\t\telse //Player Card\r\n\t\t{\r\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);\r\n\t\t}\r\n\r\n\t\t_transfer(oldOwner, newOwner, _tokenId);\r\n\t\temit LogSnatch(_tokenId, players[_tokenId].name, oldOwner, newOwner, sellingPrice, playerIndexToPrice[_tokenId]);\r\n\r\n\t\tplayerIndexToRewardPrice[_tokenId] = getRewardPrice(playerIndexToPrice[_tokenId], _internalTypeId);\r\n\r\n\t\tif (oldOwner != address(this))\r\n\t\t{\r\n\t\t\toldOwner.transfer(payment);\r\n\t\t}\r\n\t\tmsg.sender.transfer(purchaseExcess);\r\n\t}\r\n\r\n\t/// @param _owner The owner whose soccer player tokens we are interested in.\r\n\t/// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n\t///    expensive (it walks the entire Players array looking for players belonging to owner),\r\n\t///    but it also returns a dynamic array, which is only supported for web3 calls, and\r\n\t///    not contract-to-contract calls.\r\n\tfunction tokensOfOwner(address _owner) public view returns(uint[] ownerTokens)\r\n\t{\r\n\t\tuint tokenCount = balanceOf(_owner);\r\n\t\tif (tokenCount == 0)\r\n\t\t{\r\n\t\t\treturn new uint[](0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tuint[] memory result = new uint[](tokenCount);\r\n\t\t\tuint totalPlayers = totalSupply();\r\n\t\t\tuint resultIndex = 0;\r\n\r\n\t\t\tuint playerId;\r\n\t\t\tfor (playerId = 0; playerId <= totalPlayers; playerId++)\r\n\t\t\t{\r\n\t\t\t\tif (playerIndexToOwner[playerId] == _owner)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[resultIndex] = playerId;\r\n\t\t\t\t\tresultIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/// Owner initates the transfer of the token to another account\r\n\t/// @param _to The address for the token to be transferred to.\r\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction transfer(address _to, uint _tokenId) public\r\n\t{\r\n\t\trequire(owns(msg.sender, _tokenId));\r\n\t\trequire(_addressNotNull(_to));\r\n\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\t/// Third-party initiates transfer of token from address _from to address _to\r\n\t/// @param _from The address for the token to be transferred from.\r\n\t/// @param _to The address for the token to be transferred to.\r\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction transferFrom(address _from, address _to, uint _tokenId) public\r\n\t{\r\n\t\trequire(owns(_from, _tokenId));\r\n\t\trequire(_approved(_to, _tokenId));\r\n\t\trequire(_addressNotNull(_to));\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\t/// @dev Assigns ownership of a specific Player to an address.\r\n\tfunction _transfer(address _from, address _to, uint _tokenId) private\r\n\t{\r\n\t\t// Since the number of players is capped to 2^32 we can't overflow this\r\n\t\townershipTokenCount[_to]++;\r\n\t\t//transfer ownership\r\n\t\tplayerIndexToOwner[_tokenId] = _to;\r\n\r\n\t\t// When creating new players _from is 0x0, but we can't account that address.\r\n\t\tif (_addressNotNull(_from))\r\n\t\t{\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\t// clear any previously approved ownership exchange\r\n\t\t\tdelete playerIndexToApproved[_tokenId];\r\n\t\t}\r\n\r\n\t\t// Emit the transfer event.\r\n\t\temit LogTransfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\t/// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n\tfunction _addressNotNull(address _to) private pure returns (bool)\r\n\t{\r\n\t\treturn (_to != address(0));\r\n\t}\r\n\r\n\t/// For querying balance of a particular account\r\n\t/// @param _owner The address for balance query\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction balanceOf(address _owner) public view returns (uint balance)\r\n\t{\r\n\t\treturn ownershipTokenCount[_owner];\r\n\t}\r\n\r\n\t/// @notice Returns all the relevant information about a specific player.\r\n\t/// @param _tokenId The tokenId of the player of interest.\r\n\tfunction getPlayer(uint _tokenId) public view returns (string playerName, uint internalTypeId, uint sellingPrice, address owner)\r\n\t{\r\n\t\tPlayer storage player = players[_tokenId];\r\n\t\tplayerName = player.name;\r\n\t\tinternalTypeId = player.internalTypeId;\r\n\t\tsellingPrice = playerIndexToPrice[_tokenId];\r\n\t\towner = playerIndexToOwner[_tokenId];\r\n\t}\r\n\r\n\t/// For querying owner of token\r\n\t/// @param _tokenId The tokenID for owner inquiry\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction ownerOf(uint _tokenId) public view returns (address owner)\r\n\t{\r\n\t\towner = playerIndexToOwner[_tokenId];\r\n\t\trequire (_addressNotNull(owner));\r\n\t}\r\n\r\n\t/// For checking approval of transfer for address _to\r\n\tfunction _approved(address _to, uint _tokenId) private view returns (bool)\r\n\t{\r\n\t\treturn playerIndexToApproved[_tokenId] == _to;\r\n\t}\r\n\r\n\t/// Check for token ownership\r\n\tfunction owns(address claimant, uint _tokenId) private view returns (bool)\r\n\t{\r\n\t\treturn (claimant == playerIndexToOwner[_tokenId]);\r\n\t}\r\n\r\n\tfunction priceOf(uint _tokenId) public view returns (uint price)\r\n\t{\r\n\t\treturn playerIndexToPrice[_tokenId];\r\n\t}\r\n\r\n\tfunction rewardPriceOf(uint _tokenId) public view returns (uint price)\r\n\t{\r\n\t\treturn playerIndexToRewardPrice[_tokenId];\r\n\t}\r\n\r\n\t/// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n\t/// @param _newCEO The address of the new CEO\r\n\tfunction setCEO(address _newCEO) public onlyCEO\r\n\t{\r\n\t\trequire (_addressNotNull(_newCEO));\r\n\t\tceoAddress = _newCEO;\r\n\t}\r\n\r\n\t/// @dev Assigns a new address to act as the Dev. Only available to the current CEO.\r\n\t/// @param _newDev The address of the new Dev\r\n\tfunction setDev(address _newDev) public onlyCEO\r\n\t{\r\n\t\trequire (_addressNotNull(_newDev));\r\n\t\tdevAddress = _newDev;\r\n\t}\r\n\r\n\t/// @notice Allow pre-approved user to take ownership of a token\r\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction takeOwnership(uint _tokenId) public\r\n\t{\r\n\t\taddress newOwner = msg.sender;\r\n\t\taddress oldOwner = playerIndexToOwner[_tokenId];\r\n\r\n\t\t// Safety check to prevent against an unexpected 0x0 default.\r\n\t\trequire(_addressNotNull(newOwner));\r\n\r\n\t\t// Making sure transfer is approved\r\n\t\trequire(_approved(newOwner, _tokenId));\r\n\r\n\t\t_transfer(oldOwner, newOwner, _tokenId);\r\n\t}\r\n\r\n\t/// @dev Assigns a new commison percentage. Only available to the current CEO.\r\n\t/// @param _newCommision The new commison\r\n\tfunction updateCommision (uint _newCommision) public onlyCEO\r\n\t{\r\n\t\trequire (_newCommision > 0 && _newCommision < 100);\r\n\t\tcommision = _newCommision;\r\n\t}\r\n\r\n\tfunction implementsERC721() public pure returns (bool)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// For querying totalSupply of token\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction totalSupply() public view returns (uint total)\r\n\t{\r\n\t\treturn players.length;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_internalTypeId\",\"type\":\"uint256\"}],\"name\":\"createPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommision\",\"type\":\"uint256\"}],\"name\":\"updateCommision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"playerName\",\"type\":\"string\"},{\"name\":\"internalTypeId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rewardPriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"},{\"name\":\"_dev\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"internalTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"LogBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"LogSnatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogApproval\",\"type\":\"event\"}]","ContractName":"CryptoCricketToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c9bd44581117391b00924eda83c3c06828cd6c970000000000000000000000009eacc4fa9ee051a6dfd8b47ae4765effc1142a42","Library":"","SwarmSource":"bzzr://2133ac999e4cdf022db1a6eb5e88e15f4719a3592178a907f43155a09192b392"}]}