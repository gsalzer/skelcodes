{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\ncontract ERC20 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  event OwnershipTransferred(address indexed oldone, address indexed newone);\r\n  event ERC20TragetChanged(address indexed oldToken, address indexed newToken);\r\n\r\n  address public owner;\r\n  address public tokenAddr;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n    tokenAddr = address(0);\r\n  }\r\n\r\n  modifier onlyOwner () {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership (address newOwner) public returns (bool);\r\n  function setERC20 (address newTokenAddr) public returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract TokenMerge is Ownable {\r\n\r\n  function takeStock(address[] memory tokenFrom, uint256[] memory amounts, address[] memory tokenTo) public onlyOwner {\r\n    ERC20 token = ERC20(tokenAddr);\r\n    require(tokenFrom.length == amounts.length);\r\n\r\n    if (tokenTo.length == 1){\r\n      for(uint i = 0; i < tokenFrom.length; i++) {\r\n        require(token.transferFrom(tokenFrom[i], tokenTo[0], amounts[i]));\r\n      }\r\n    }\r\n    else {\r\n      require(tokenFrom.length == tokenTo.length);\r\n      for(uint i = 0; i < tokenFrom.length; i++) {\r\n        require(token.transferFrom(tokenFrom[i], tokenTo[i], amounts[i]));\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function flushStock(address[] memory tokenFrom, address tokenTo) public onlyOwner {\r\n    ERC20 token = ERC20(tokenAddr);\r\n    require(tokenFrom.length > 0 );\r\n\r\n    for(uint i = 0; i < tokenFrom.length; i++) {\r\n      require(token.transferFrom(tokenFrom[i], tokenTo, token.balanceOf(tokenFrom[i])));\r\n    }\r\n  } \r\n\r\n\r\n  function multiSendEth(address payable[] memory addresses) public payable{\r\n    uint addressesLength = addresses.length;\r\n    require(addressesLength > 0);\r\n      for(uint i = 0; i < addressesLength; i++) {\r\n        addresses[i].transfer(msg.value / addressesLength);\r\n      }\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n\r\n  function transferOwnership (address newOwner) public onlyOwner returns (bool) {\r\n    require(newOwner != address(0));\r\n    require(newOwner != owner);\r\n\r\n    address oldOwner = owner;\r\n    owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n    \r\n    return true;\r\n  }\r\n\r\n\r\n  function setERC20 (address newTokenAddr) public onlyOwner returns (bool) {\r\n    require(newTokenAddr != tokenAddr);\r\n\r\n    address oldTokenAddr = tokenAddr;\r\n    tokenAddr = newTokenAddr;\r\n    emit ERC20TragetChanged(oldTokenAddr, newTokenAddr);\r\n    \r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenFrom\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"tokenTo\",\"type\":\"address[]\"}],\"name\":\"takeStock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiSendEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenFrom\",\"type\":\"address[]\"},{\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"flushStock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddr\",\"type\":\"address\"}],\"name\":\"setERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldone\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newone\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"ERC20TragetChanged\",\"type\":\"event\"}]","ContractName":"TokenMerge","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba51e8d7e3a21a94ff1a401de062819a4d747b5946acf80501ad06f806b667d5"}]}