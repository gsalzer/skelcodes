{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ComplianceService.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/// @notice Standard interface for `ComplianceService`s\r\ncontract ComplianceService {\r\n\r\n    /*\r\n    * @notice This method *MUST* be called by `BlueshareToken`s during `transfer()` and `transferFrom()`.\r\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\r\n    *\r\n    * @dev    This method *MAY* call back to the token contract specified by `_token` for\r\n    *         more information needed to enforce trade approval.\r\n    *\r\n    * @param  _token The address of the token to be transfered\r\n    * @param  _spender The address of the spender of the token\r\n    * @param  _from The address of the sender account\r\n    * @param  _to The address of the receiver account\r\n    * @param  _amount The quantity of the token to trade\r\n    *\r\n    * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\r\n    *               to assign meaning.\r\n    */\r\n    function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\r\n\r\n    /*\r\n    * @notice This method *MUST* be called by `BlueshareToken`s during `forceTransferFrom()`. \r\n    *         Accessible only by admins, used for forced tokens transfer\r\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\r\n    *\r\n    * @dev    This method *MAY* call back to the token contract specified by `_token` for\r\n    *         more information needed to enforce trade approval.\r\n    *\r\n    * @param  _token The address of the token to be transfered\r\n    * @param  _spender The address of the spender of the token *Admin or Owner*\r\n    * @param  _from The address of the sender account\r\n    * @param  _to The address of the receiver account\r\n    * @param  _amount The quantity of the token to trade\r\n    *\r\n    * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\r\n    *               to assign meaning.\r\n    */\r\n    function forceCheck(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\r\n\r\n    /**\r\n    * @notice This method *MUST* be called by `BlueshareToken`s during  during `transfer()` and `transferFrom()`.\r\n    *         The implementation *SHOULD* check whether or not a transfer can be approved.\r\n    *\r\n    * @dev    This method  *MAY* call back to the token contract specified by `_token` for\r\n    *         information needed to enforce trade approval if needed\r\n    *\r\n    * @param  _token The address of the token to be transfered\r\n    * @param  _spender The address of the spender of the token (unused in this implementation)\r\n    * @param  _holder The address of the sender account, our holder\r\n    * @param  _balance The balance of our holder\r\n    * @param  _amount The amount he or she whants to send\r\n    *\r\n    * @return `true` if the trade should be approved and `false` if the trade should not be approved\r\n    */\r\n    function checkVested(address _token, address _spender, address _holder, uint256 _balance, uint256 _amount) public returns (bool);\r\n}\r\n\r\n// File: contracts/DividendService.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/// @notice Standard interface for `DividendService`s\r\ncontract DividendService {\r\n\r\n    /**\r\n    * @param _token The address of the token assigned with this `DividendService`\r\n    * @param _spender The address of the spender for this transaction\r\n    * @param _holder The address of the holder of the token\r\n    * @param _interval The time interval / year for which the dividends are paid or not\r\n    * @return uint8 The reason code: 0 means not paid.  Non-zero values are left to the implementation\r\n    *               to assign meaning.\r\n    */\r\n    function check(address _token, address _spender, address _holder, uint _interval) public returns (uint8);\r\n}\r\n\r\n// File: contracts/ServiceRegistry.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/// @notice regulator - A service that points to a `ComplianceService` contract\r\n/// @notice dividend - A service that points to a `DividendService` contract\r\ncontract ServiceRegistry is Ownable {\r\n    address public regulator;\r\n    address public dividend;\r\n\r\n    /**\r\n    * @notice Triggered when regulator or dividend service address is replaced\r\n    */\r\n    event ReplaceService(address oldService, address newService);\r\n\r\n    /**\r\n    * @dev Validate contract address\r\n    * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\r\n    *\r\n    * @param _addr The address of a smart contract\r\n    */\r\n    modifier withContract(address _addr) {\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        require(length > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Constructor\r\n    *\r\n    * @param _regulator The address of the `ComplianceService` contract\r\n    * @param _dividend The address of the `DividendService` contract\r\n    *\r\n    */\r\n    constructor(address _regulator, address _dividend) public {\r\n        regulator = _regulator;\r\n        dividend = _dividend;\r\n    }\r\n\r\n    /**\r\n    * @notice Replaces the address pointer to the `ComplianceService` contract\r\n    *\r\n    * @dev This method is only callable by the contract's owner\r\n    *\r\n    * @param _regulator The address of the new `ComplianceService` contract\r\n    */\r\n    function replaceRegulator(address _regulator) public onlyOwner withContract(_regulator) {\r\n        require(regulator != _regulator, \"The address cannot be the same\");\r\n\r\n        address oldRegulator = regulator;\r\n        regulator = _regulator;\r\n        emit ReplaceService(oldRegulator, regulator);\r\n    }\r\n\r\n    /**\r\n    * @notice Replaces the address pointer to the `DividendService` contract\r\n    *\r\n    * @dev This method is only callable by the contract's owner\r\n    *\r\n    * @param _dividend The address of the new `DividendService` contract\r\n    */\r\n    function replaceDividend(address _dividend) public onlyOwner withContract(_dividend) {\r\n        require(dividend != _dividend, \"The address cannot be the same\");\r\n\r\n        address oldDividend = dividend;\r\n        dividend = _dividend;\r\n        emit ReplaceService(oldDividend, dividend);\r\n    }\r\n}\r\n\r\n// File: contracts/BlueshareToken.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice An ERC-20 token that has the ability to check for trade validity\r\ncontract BlueshareToken is ERC20Detailed, ERC20Mintable, Ownable {\r\n\r\n    /**\r\n    * @notice Token decimals setting (used when constructing ERC20Detailed)\r\n    */\r\n    uint8 constant public BLUESHARETOKEN_DECIMALS = 0;\r\n\r\n    /**\r\n    * International Securities Identification Number (ISIN)\r\n    */\r\n    string constant public ISIN = \"CH0465030796\";\r\n\r\n    /**\r\n    * @notice Triggered when regulator checks pass or fail\r\n    */\r\n    event CheckComplianceStatus(uint8 reason, address indexed spender, address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @notice Triggered when regulator checks pass or fail\r\n    */\r\n    event CheckVestingStatus(bool reason, address indexed spender, address indexed from, uint256 balance, uint256 value);\r\n\r\n    /**\r\n    * @notice Triggered when dividend checks pass or fail\r\n    */\r\n    event CheckDividendStatus(uint8 reason, address indexed spender, address indexed holder, uint interval);\r\n\r\n    /**\r\n    * @notice Address of the `ServiceRegistry` that has the location of the\r\n    *         `ComplianceService` contract responsible for checking trade permissions and \r\n    *         `DividendService` contract responsible for checking dividend state.\r\n    */\r\n    ServiceRegistry public registry;\r\n\r\n    /**\r\n    * @notice Constructor\r\n    *\r\n    * @param _registry Address of `ServiceRegistry` contract\r\n    * @param _name Name of the token: See ERC20Detailed\r\n    * @param _symbol Symbol of the token: See ERC20Detailed\r\n    */\r\n    constructor(ServiceRegistry _registry, string memory _name, string memory _symbol) public\r\n      ERC20Detailed(_name, _symbol, BLUESHARETOKEN_DECIMALS)\r\n    {\r\n        require(address(_registry) != address(0), \"Uninitialized or undefined address\");\r\n\r\n        registry = _registry;\r\n    }\r\n\r\n    /**\r\n    * @notice ERC-20 overridden function that include logic to check for trade validity.\r\n    *\r\n    * @param _to The address of the receiver\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    * @return `true` if successful and `false` if unsuccessful\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_checkVested(msg.sender, balanceOf(msg.sender), _value), \"Cannot send vested amount!\");\r\n        require(_check(msg.sender, _to, _value), \"Cannot transfer!\");\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @notice ERC-20 overridden function that include logic to check for trade validity.\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the receiver\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    * @return `true` if successful and `false` if unsuccessful\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_checkVested(_from, balanceOf(_from), _value), \"Cannot send vested amount!\");\r\n        require(_check(_from, _to, _value), \"Cannot transfer!\");\r\n        \r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @notice ERC-20 extended function that include logic to check for trade validity with admin rights.\r\n    *\r\n    * @param _from The address of the old wallet\r\n    * @param _to The address of the new wallet\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    */\r\n    function forceTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_forceCheck(_from, _to, _value), \"Not allowed!\");\r\n\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice The public function for checking divident payout status\r\n    *\r\n    * @param _holder The address of the token's holder\r\n    * @param _interval The interval for divident's status\r\n    */\r\n    function dividendStatus(address _holder, uint _interval) public returns (uint8) {\r\n        return _checkDividend(_holder, _interval);\r\n    }\r\n\r\n    /**\r\n    * @notice Performs the regulator check\r\n    *\r\n    * @dev This method raises a CheckComplianceStatus event indicating success or failure of the check\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the receiver\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    * @return `true` if the check was successful and `false` if unsuccessful\r\n    */\r\n    function _check(address _from, address _to, uint256 _value) private returns (bool) {\r\n        uint8 reason = _regulator().check(address(this), msg.sender, _from, _to, _value);\r\n\r\n        emit CheckComplianceStatus(reason, msg.sender, _from, _to, _value);\r\n\r\n        return reason == 0;\r\n    }\r\n\r\n    /**\r\n    * @notice Performs the regulator forceCheck, accessable only by admins\r\n    *\r\n    * @dev This method raises a CheckComplianceStatus event indicating success or failure of the check\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the receiver\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    * @return `true` if the check was successful and `false` if unsuccessful\r\n    */\r\n    function _forceCheck(address _from, address _to, uint256 _value) private returns (bool) {\r\n        uint8 allowance = _regulator().forceCheck(address(this), msg.sender, _from, _to, _value);\r\n\r\n        emit CheckComplianceStatus(allowance, msg.sender, _from, _to, _value);\r\n\r\n        return allowance == 0;\r\n    }\r\n\r\n    /**\r\n    * @notice Performs the regulator check\r\n    *\r\n    * @dev This method raises a CheckVestingStatus event indicating success or failure of the check\r\n    *\r\n    * @param _participant The address of the participant\r\n    * @param _balance The balance of the sender\r\n    * @param _value The number of tokens to transfer\r\n    *\r\n    * @return `true` if the check was successful and `false` if unsuccessful\r\n    */\r\n    function _checkVested(address _participant, uint256 _balance, uint256 _value) private returns (bool) {\r\n        bool allowed = _regulator().checkVested(address(this), msg.sender, _participant, _balance, _value);\r\n\r\n        emit CheckVestingStatus(allowed, msg.sender, _participant, _balance, _value);\r\n\r\n        return allowed;\r\n    }\r\n\r\n    /**\r\n    * @notice Performs the dividend check\r\n    *\r\n    * @dev This method raises a CheckDividendStatus event indicating success or failure of the check\r\n    *\r\n    * @param _address The address of the holder\r\n    * @param _interval The time interval / year for which the dividends are paid or not\r\n    *\r\n    * @return `true` if the check was successful and `false` if unsuccessful\r\n    */\r\n    function _checkDividend(address _address, uint _interval) private returns (uint8) {\r\n        uint8 status = _dividend().check(address(this), msg.sender, _address, _interval);\r\n\r\n        emit CheckDividendStatus(status, msg.sender, _address, _interval);\r\n\r\n        return status;\r\n    }\r\n\r\n    /**\r\n    * @notice Retreives the address of the `ComplianceService` that manages this token.\r\n    *\r\n    * @dev This function *MUST NOT* memoize the `ComplianceService` address.  This would\r\n    *      break the ability to upgrade the `ComplianceService`.\r\n    *\r\n    * @return The `ComplianceService` that manages this token.\r\n    */\r\n    function _regulator() public view returns (ComplianceService) {\r\n        return ComplianceService(registry.regulator());\r\n    }\r\n\r\n    /**\r\n    * @notice Retreives the address of the `DividendService` that manages this token.\r\n    *\r\n    * @dev This function *MUST NOT* memoize the `DividendService` address.  This would\r\n    *      break the ability to upgrade the `DividendService`.\r\n    *\r\n    * @return The `DividendService` that manages this token.\r\n    */\r\n    function _dividend() public view returns (DividendService) {\r\n        return DividendService(registry.dividend());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLUESHARETOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"forceTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_regulator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dividend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"dividendStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CheckComplianceStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CheckVestingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"CheckDividendStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BlueshareToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d1db8a7d1f4a1ffbd0d84444ab87b053ecf33e30000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e426c75657368617265546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034253540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://91be10d8ebbf2985e0be016ddade8b8e2a83b4af4e598efb81ffaaae0c7e929d"}]}