{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelisting is Ownable {\r\n    mapping(address => bool) public isInvestorApproved;\r\n    mapping(address => bool) public isInvestorPaymentApproved;\r\n\r\n    event Approved(address indexed investor);\r\n    event Disapproved(address indexed investor);\r\n\r\n    event PaymentApproved(address indexed investor);\r\n    event PaymentDisapproved(address indexed investor);\r\n\r\n\r\n    //Token distribution approval (KYC results)\r\n    function approveInvestor(address toApprove) public onlyOwner {\r\n        isInvestorApproved[toApprove] = true;\r\n        emit Approved(toApprove);\r\n    }\r\n\r\n    function approveInvestorsInBulk(address[] calldata toApprove) external onlyOwner {\r\n        for (uint i=0; i<toApprove.length; i++) {\r\n            isInvestorApproved[toApprove[i]] = true;\r\n            emit Approved(toApprove[i]);\r\n        }\r\n    }\r\n\r\n    function disapproveInvestor(address toDisapprove) public onlyOwner {\r\n        delete isInvestorApproved[toDisapprove];\r\n        emit Disapproved(toDisapprove);\r\n    }\r\n\r\n    function disapproveInvestorsInBulk(address[] calldata toDisapprove) external onlyOwner {\r\n        for (uint i=0; i<toDisapprove.length; i++) {\r\n            delete isInvestorApproved[toDisapprove[i]];\r\n            emit Disapproved(toDisapprove[i]);\r\n        }\r\n    }\r\n\r\n    //Investor payment approval (For private sale)\r\n    function approveInvestorPayment(address toApprove) public onlyOwner {\r\n        isInvestorPaymentApproved[toApprove] = true;\r\n        emit PaymentApproved(toApprove);\r\n    }\r\n\r\n    function approveInvestorsPaymentInBulk(address[] calldata toApprove) external onlyOwner {\r\n        for (uint i=0; i<toApprove.length; i++) {\r\n            isInvestorPaymentApproved[toApprove[i]] = true;\r\n            emit PaymentApproved(toApprove[i]);\r\n        }\r\n    }\r\n\r\n    function disapproveInvestorapproveInvestorPayment(address toDisapprove) public onlyOwner {\r\n        delete isInvestorPaymentApproved[toDisapprove];\r\n        emit PaymentDisapproved(toDisapprove);\r\n    }\r\n\r\n    function disapproveInvestorsPaymentInBulk(address[] calldata toDisapprove) external onlyOwner {\r\n        for (uint i=0; i<toDisapprove.length; i++) {\r\n            delete isInvestorPaymentApproved[toDisapprove[i]];\r\n            emit PaymentDisapproved(toDisapprove[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CommunityVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => Holding) public holdings;\r\n\r\n    uint256 constant public MinimumHoldingPeriod = 90 days;\r\n    uint256 constant public Interval = 90 days;\r\n    uint256 constant public MaximumHoldingPeriod = 360 days;\r\n\r\n    uint256 constant public CommunityCap = 14300000 ether; // 14.3 million tokens\r\n\r\n    uint256 public totalCommunityTokensCommitted;\r\n\r\n    struct Holding {\r\n        uint256 tokensCommitted;\r\n        uint256 tokensRemaining;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event CommunityVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\r\n    event CommunityVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\r\n\r\n    function claimTokens(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 tokensToClaim)\r\n    {\r\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\r\n        uint256 startTime = holdings[beneficiary].startTime;\r\n        require(tokensRemaining > 0, \"All tokens claimed\");\r\n\r\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\r\n\r\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\r\n\r\n            tokensToClaim = tokensRemaining;\r\n            delete holdings[beneficiary];\r\n\r\n        } else {\r\n\r\n            uint256 percentage = calculatePercentageToRelease(startTime);\r\n\r\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\r\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\r\n            tokensRemaining = tokensNotToClaim;\r\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\r\n\r\n        }\r\n    }\r\n\r\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\r\n        // how many 90 day periods have passed\r\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\r\n        percentage = periodsPassed.mul(25); // 25% to be released every 90 days\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        totalCommunityTokensCommitted = totalCommunityTokensCommitted.add(_tokens);\r\n        require(totalCommunityTokensCommitted <= CommunityCap);\r\n\r\n        if (holdings[_beneficiary].tokensCommitted != 0) {\r\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\r\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\r\n\r\n            emit CommunityVestingUpdated(\r\n                _beneficiary,\r\n                holdings[_beneficiary].tokensRemaining,\r\n                holdings[_beneficiary].startTime\r\n            );\r\n\r\n        } else {\r\n            holdings[_beneficiary] = Holding(\r\n                _tokens,\r\n                _tokens,\r\n                _startTime\r\n            );\r\n\r\n            emit CommunityVestingInitialized(_beneficiary, _tokens, _startTime);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract EcosystemVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => Holding) public holdings;\r\n\r\n    uint256 constant public Interval = 90 days;\r\n    uint256 constant public MaximumHoldingPeriod = 630 days;\r\n\r\n    uint256 constant public EcosystemCap = 54100000 ether; // 54.1 million tokens\r\n\r\n    uint256 public totalEcosystemTokensCommitted;\r\n\r\n    struct Holding {\r\n        uint256 tokensCommitted;\r\n        uint256 tokensRemaining;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event EcosystemVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\r\n    event EcosystemVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\r\n\r\n    function claimTokens(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 tokensToClaim)\r\n    {\r\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\r\n        uint256 startTime = holdings[beneficiary].startTime;\r\n        require(tokensRemaining > 0, \"All tokens claimed\");\r\n\r\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\r\n\r\n            tokensToClaim = tokensRemaining;\r\n            delete holdings[beneficiary];\r\n\r\n        } else {\r\n\r\n            uint256 permill = calculatePermillToRelease(startTime);\r\n\r\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\r\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\r\n            tokensRemaining = tokensNotToClaim;\r\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\r\n\r\n        }\r\n    }\r\n\r\n    function calculatePermillToRelease(uint256 _startTime) internal view returns (uint256 permill) {\r\n        // how many 90 day periods have passed\r\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\r\n        permill = periodsPassed.mul(125); // 125 per thousand to be released every 90 days\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\r\n        require(totalEcosystemTokensCommitted <= EcosystemCap);\r\n\r\n        if (holdings[_beneficiary].tokensCommitted != 0) {\r\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\r\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\r\n\r\n            emit EcosystemVestingUpdated(\r\n                _beneficiary,\r\n                holdings[_beneficiary].tokensRemaining,\r\n                holdings[_beneficiary].startTime\r\n            );\r\n\r\n        } else {\r\n            holdings[_beneficiary] = Holding(\r\n                _tokens,\r\n                _tokens,\r\n                _startTime\r\n            );\r\n\r\n            emit EcosystemVestingInitialized(_beneficiary, _tokens, _startTime);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SeedPrivateAdvisorVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum User { Public, Seed, Private, Advisor }\r\n\r\n    mapping (address => Holding) public holdings;\r\n\r\n    uint256 constant public MinimumHoldingPeriod = 90 days;\r\n    uint256 constant public Interval = 30 days;\r\n    uint256 constant public MaximumHoldingPeriod = 180 days;\r\n\r\n    uint256 constant public SeedCap = 28000000 ether; // 28 million tokens\r\n    uint256 constant public PrivateCap = 9000000 ether; // 9 million tokens\r\n    uint256 constant public AdvisorCap = 7400000 ether; // 7.4 million tokens\r\n\r\n    uint256 public totalSeedTokensCommitted;\r\n    uint256 public totalPrivateTokensCommitted;\r\n    uint256 public totalAdvisorTokensCommitted;\r\n\r\n    struct Holding {\r\n        uint256 tokensCommitted;\r\n        uint256 tokensRemaining;\r\n        uint256 startTime;\r\n        User user;\r\n    }\r\n\r\n    event VestingInitialized(address _to, uint256 _tokens, uint256 _startTime, User user);\r\n    event VestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime, User user);\r\n\r\n    function claimTokens(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 tokensToClaim)\r\n    {\r\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\r\n        uint256 startTime = holdings[beneficiary].startTime;\r\n        require(tokensRemaining > 0, \"All tokens claimed\");\r\n\r\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\r\n\r\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\r\n\r\n            tokensToClaim = tokensRemaining;\r\n            delete holdings[beneficiary];\r\n\r\n        } else {\r\n\r\n            uint256 percentage = calculatePercentageToRelease(startTime);\r\n\r\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\r\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\r\n            tokensRemaining = tokensNotToClaim;\r\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\r\n\r\n        }\r\n    }\r\n\r\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\r\n        // how many 30 day periods have passed\r\n        uint periodsPassed = ((now.sub(_startTime.add(MinimumHoldingPeriod))).div(Interval)).add(1);\r\n        percentage = periodsPassed.mul(25); // 25% to be released every 30 days\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime,\r\n        uint8 user\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        User _user;\r\n        if (user == uint8(User.Seed)) {\r\n            _user = User.Seed;\r\n            totalSeedTokensCommitted = totalSeedTokensCommitted.add(_tokens);\r\n            require(totalSeedTokensCommitted <= SeedCap);\r\n        } else if (user == uint8(User.Private)) {\r\n            _user = User.Private;\r\n            totalPrivateTokensCommitted = totalPrivateTokensCommitted.add(_tokens);\r\n            require(totalPrivateTokensCommitted <= PrivateCap);\r\n        } else if (user == uint8(User.Advisor)) {\r\n            _user = User.Advisor;\r\n            totalAdvisorTokensCommitted = totalAdvisorTokensCommitted.add(_tokens);\r\n            require(totalAdvisorTokensCommitted <= AdvisorCap);\r\n        } else {\r\n            revert( \"incorrect category, not eligible for vesting\" );\r\n        }\r\n\r\n        if (holdings[_beneficiary].tokensCommitted != 0) {\r\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\r\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\r\n\r\n            emit VestingUpdated(\r\n                _beneficiary,\r\n                holdings[_beneficiary].tokensRemaining,\r\n                holdings[_beneficiary].startTime,\r\n                holdings[_beneficiary].user\r\n            );\r\n\r\n        } else {\r\n            holdings[_beneficiary] = Holding(\r\n                _tokens,\r\n                _tokens,\r\n                _startTime,\r\n                _user\r\n            );\r\n\r\n            emit VestingInitialized(_beneficiary, _tokens, _startTime, _user);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract TeamVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => Holding) public holdings;\r\n\r\n    uint256 constant public MinimumHoldingPeriod = 180 days;\r\n    uint256 constant public Interval = 180 days;\r\n    uint256 constant public MaximumHoldingPeriod = 720 days;\r\n\r\n    uint256 constant public TeamCap = 12200000 ether; // 12.2 million tokens\r\n\r\n    uint256 public totalTeamTokensCommitted;\r\n\r\n    struct Holding {\r\n        uint256 tokensCommitted;\r\n        uint256 tokensRemaining;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event TeamVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\r\n    event TeamVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\r\n\r\n    function claimTokens(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 tokensToClaim)\r\n    {\r\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\r\n        uint256 startTime = holdings[beneficiary].startTime;\r\n        require(tokensRemaining > 0, \"All tokens claimed\");\r\n\r\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\r\n\r\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\r\n\r\n            tokensToClaim = tokensRemaining;\r\n            delete holdings[beneficiary];\r\n\r\n        } else {\r\n\r\n            uint256 percentage = calculatePercentageToRelease(startTime);\r\n\r\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\r\n\r\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\r\n            tokensRemaining = tokensNotToClaim;\r\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\r\n\r\n        }\r\n    }\r\n\r\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\r\n        // how many 180 day periods have passed\r\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\r\n        percentage = periodsPassed.mul(25); // 25% to be released every 180 days\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        totalTeamTokensCommitted = totalTeamTokensCommitted.add(_tokens);\r\n        require(totalTeamTokensCommitted <= TeamCap);\r\n\r\n        if (holdings[_beneficiary].tokensCommitted != 0) {\r\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\r\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\r\n\r\n            emit TeamVestingUpdated(\r\n                _beneficiary,\r\n                holdings[_beneficiary].tokensRemaining,\r\n                holdings[_beneficiary].startTime\r\n            );\r\n\r\n        } else {\r\n            holdings[_beneficiary] = Holding(\r\n                _tokens,\r\n                _tokens,\r\n                _startTime\r\n            );\r\n\r\n            emit TeamVestingInitialized(_beneficiary, _tokens, _startTime);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface TokenInterface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Vesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum VestingUser { Public, Seed, Private, Advisor, Team, Community, Ecosystem }\r\n\r\n    TokenInterface public token;\r\n    CommunityVesting public communityVesting;\r\n    TeamVesting public teamVesting;\r\n    EcosystemVesting public ecosystemVesting;\r\n    SeedPrivateAdvisorVesting public seedPrivateAdvisorVesting;\r\n    mapping (address => VestingUser) public userCategory;\r\n    uint256 public totalAllocated;\r\n\r\n    event TokensReleased(address _to, uint256 _tokensReleased, VestingUser user);\r\n\r\n    constructor(address _token) public {\r\n        //require(_token != 0x0, \"Invalid address\");\r\n        token = TokenInterface(_token);\r\n        communityVesting = new CommunityVesting();\r\n        teamVesting = new TeamVesting();\r\n        ecosystemVesting = new EcosystemVesting();\r\n        seedPrivateAdvisorVesting = new SeedPrivateAdvisorVesting();\r\n    }\r\n\r\n    function claimTokens() external {\r\n        uint8 category = uint8(userCategory[msg.sender]);\r\n\r\n        uint256 tokensToClaim;\r\n\r\n        if (category == 1 || category == 2 || category == 3) {\r\n            tokensToClaim = seedPrivateAdvisorVesting.claimTokens(msg.sender);\r\n        } else if (category == 4) {\r\n            tokensToClaim = teamVesting.claimTokens(msg.sender);\r\n        } else if (category == 5) {\r\n            tokensToClaim = communityVesting.claimTokens(msg.sender);\r\n        } else if (category == 6){\r\n            tokensToClaim = ecosystemVesting.claimTokens(msg.sender);\r\n        } else {\r\n            revert( \"incorrect category, maybe unknown user\" );\r\n        }\r\n\r\n        totalAllocated = totalAllocated.sub(tokensToClaim);\r\n        require(token.transfer(msg.sender, tokensToClaim), \"Insufficient balance in vesting contract\");\r\n        emit TokensReleased(msg.sender, tokensToClaim, userCategory[msg.sender]);\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime,\r\n        VestingUser user\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint8 category = uint8(user);\r\n        require(category != 0, \"Not eligible for vesting\");\r\n\r\n        require( uint8(userCategory[_beneficiary]) == 0 || userCategory[_beneficiary] == user, \"cannot change user category\" );\r\n        userCategory[_beneficiary] = user;\r\n        totalAllocated = totalAllocated.add(_tokens);\r\n\r\n        if (category == 1 || category == 2 || category == 3) {\r\n            seedPrivateAdvisorVesting.initializeVesting(_beneficiary, _tokens, _startTime, category);\r\n        } else if (category == 4) {\r\n            teamVesting.initializeVesting(_beneficiary, _tokens, _startTime);\r\n        } else if (category == 5) {\r\n            communityVesting.initializeVesting(_beneficiary, _tokens, _startTime);\r\n        } else if (category == 6){\r\n            ecosystemVesting.initializeVesting(_beneficiary, _tokens, _startTime);\r\n        } else {\r\n            revert( \"incorrect category, not eligible for vesting\" );\r\n        }\r\n    }\r\n\r\n    function claimUnallocated( address _sendTo) external onlyOwner{\r\n        uint256 allTokens = token.balanceOf(address(this));\r\n        uint256 tokensUnallocated = allTokens.sub(totalAllocated);\r\n        token.transfer(_sendTo, tokensUnallocated);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract MintableAndPausableToken is ERC20Pausable, Ownable {\r\n    uint8 public constant decimals = 18;\r\n    uint256 public maxTokenSupply = 183500000 * 10 ** uint256(decimals);\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event MintStarted();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier checkMaxSupply(uint256 _amount) {\r\n        require(maxTokenSupply >= totalSupply().add(_amount));\r\n        _;\r\n    }\r\n\r\n    modifier cannotMint() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n        canMint\r\n        checkMaxSupply (_amount)\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        super._mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount)\r\n        internal\r\n        canMint\r\n        checkMaxSupply (_amount)\r\n    {\r\n        super._mint(_to, _amount);\r\n    }\r\n\r\n    function finishMinting() external onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function startMinting() external onlyOwner cannotMint returns (bool) {\r\n        mintingFinished = false;\r\n        emit MintStarted();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Token upgrader interface inspired by Lunyr.\r\n *\r\n * Token upgrader transfers previous version tokens to a newer version.\r\n * Token upgrader itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract TokenUpgrader {\r\n    uint public originalSupply;\r\n\r\n    /** Interface marker */\r\n    function isTokenUpgrader() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\n\r\ncontract UpgradeableToken is MintableAndPausableToken {\r\n    // Contract or person who can set the upgrade path.\r\n    address public upgradeMaster;\r\n    \r\n    // Bollean value needs to be true to start upgrades\r\n    bool private upgradesAllowed;\r\n\r\n    // The next contract where the tokens will be migrated.\r\n    TokenUpgrader public tokenUpgrader;\r\n\r\n    // How many tokens we have upgraded by now.\r\n    uint public totalUpgraded;\r\n\r\n    /**\r\n    * Upgrade states.\r\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\r\n    * - Waiting: Token allows upgrade, but we don't have a new token version\r\n    * - ReadyToUpgrade: The token version is set, but not a single token has been upgraded yet\r\n    * - Upgrading: Token upgrader is set and the balance holders can upgrade their tokens\r\n    */\r\n    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\r\n\r\n    // Somebody has upgraded some of his tokens.\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // New token version available.\r\n    event TokenUpgraderIsSet(address _newToken);\r\n\r\n    modifier onlyUpgradeMaster {\r\n        // Only a master can designate the next token\r\n        require(msg.sender == upgradeMaster);\r\n        _;\r\n    }\r\n\r\n    modifier notInUpgradingState {\r\n        // Upgrade has already begun for token\r\n        require(getUpgradeState() != UpgradeState.Upgrading);\r\n        _;\r\n    }\r\n\r\n    // Do not allow construction without upgrade master set.\r\n    constructor(address _upgradeMaster) public {\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    // set a token upgrader\r\n    function setTokenUpgrader(address _newToken)\r\n        external\r\n        onlyUpgradeMaster\r\n        notInUpgradingState\r\n    {\r\n        require(canUpgrade());\r\n        require(_newToken != address(0));\r\n\r\n        tokenUpgrader = TokenUpgrader(_newToken);\r\n\r\n        // Handle bad interface\r\n        require(tokenUpgrader.isTokenUpgrader());\r\n\r\n        // Make sure that token supplies match in source and target\r\n        require(tokenUpgrader.originalSupply() == totalSupply());\r\n\r\n        emit TokenUpgraderIsSet(address(tokenUpgrader));\r\n    }\r\n\r\n    // Allow the token holder to upgrade some of their tokens to a new contract.\r\n    function upgrade(uint _value) external {\r\n        UpgradeState state = getUpgradeState();\r\n        \r\n        // Check upgrate state \r\n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n        // Validate input value\r\n        require(_value != 0);\r\n\r\n        //balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // Take tokens out from circulation\r\n        //totalSupply_ = totalSupply_.sub(_value);\r\n        //the _burn method emits the Transfer event\r\n        _burn(msg.sender, _value);\r\n\r\n        totalUpgraded = totalUpgraded.add(_value);\r\n\r\n        // Token Upgrader reissues the tokens\r\n        tokenUpgrader.upgradeFrom(msg.sender, _value);\r\n        emit Upgrade(msg.sender, address(tokenUpgrader), _value);\r\n    }\r\n\r\n    /**\r\n    * Change the upgrade master.\r\n    * This allows us to set a new owner for the upgrade mechanism.\r\n    */\r\n    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\r\n        require(_newMaster != address(0));\r\n        upgradeMaster = _newMaster;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function allowUpgrades() external onlyUpgradeMaster () {\r\n        upgradesAllowed = true;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function rejectUpgrades() external onlyUpgradeMaster () {\r\n        require(!(totalUpgraded > 0));\r\n        upgradesAllowed = false;\r\n    }\r\n\r\n    // Get the state of the token upgrade.\r\n    function getUpgradeState() public view returns(UpgradeState) {\r\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\r\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n        else return UpgradeState.Upgrading;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function canUpgrade() public view returns(bool) {\r\n        return upgradesAllowed;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Token is UpgradeableToken, ERC20Burnable {\r\n    string public name;\r\n    string public symbol;\r\n\r\n    // For patient incentive programs\r\n    uint256 public INITIAL_SUPPLY;\r\n    uint256 public hodlPremiumCap;\r\n    uint256 public hodlPremiumMinted;\r\n\r\n    // After 180 days you get a constant maximum bonus of 25% of tokens transferred\r\n    // Before that it is spread out linearly(from 0% to 25%) starting from the\r\n    // contribution time till 180 days after that\r\n    uint256 constant maxBonusDuration = 180 days;\r\n\r\n    struct Bonus {\r\n        uint256 hodlTokens;\r\n        uint256 contributionTime;\r\n        uint256 buybackTokens;\r\n    }\r\n\r\n    mapping( address => Bonus ) public hodlPremium;\r\n\r\n    IERC20 stablecoin;\r\n    address stablecoinPayer;\r\n\r\n    uint256 public signupWindowStart;\r\n    uint256 public signupWindowEnd;\r\n\r\n    uint256 public refundWindowStart;\r\n    uint256 public refundWindowEnd;\r\n\r\n    event UpdatedTokenInformation(string newName, string newSymbol);\r\n    event HodlPremiumSet(address beneficiary, uint256 tokens, uint256 contributionTime);\r\n    event HodlPremiumCapSet(uint256 newhodlPremiumCap);\r\n    event RegisteredForRefund( address holder, uint256 tokens );\r\n\r\n    constructor (address _litWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY, uint256 _hodlPremiumCap)\r\n        public\r\n        UpgradeableToken(_upgradeMaster)\r\n        Ownable()\r\n    {\r\n        require(maxTokenSupply >= _INITIAL_SUPPLY.mul(10 ** uint256(decimals)));\r\n        INITIAL_SUPPLY = _INITIAL_SUPPLY.mul(10 ** uint256(decimals));\r\n        setHodlPremiumCap(_hodlPremiumCap)  ;\r\n        _mint(_litWallet, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n    * Owner can update token information here\r\n    */\r\n    function setTokenInformation(string calldata _name, string calldata _symbol) external onlyOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        emit UpdatedTokenInformation(name, symbol);\r\n    }\r\n\r\n    function setRefundSignupDetails( uint256 _startTime,  uint256 _endTime, ERC20 _stablecoin, address _payer ) public onlyOwner {\r\n        require( _startTime < _endTime );\r\n        stablecoin = _stablecoin;\r\n        stablecoinPayer = _payer;\r\n        signupWindowStart = _startTime;\r\n        signupWindowEnd = _endTime;\r\n        refundWindowStart = signupWindowStart + 182 days;\r\n        refundWindowEnd = signupWindowEnd + 182 days;\r\n        require( refundWindowStart > signupWindowEnd);\r\n    }\r\n\r\n    function signUpForRefund( uint256 _value ) public {\r\n        require( hodlPremium[msg.sender].hodlTokens != 0 || hodlPremium[msg.sender].buybackTokens != 0, \"You must be ICO user to sign up\" ); //the user was registered in ICO\r\n        require( block.timestamp >= signupWindowStart&& block.timestamp <= signupWindowEnd, \"Cannot sign up at this time\" );\r\n        uint256 value = _value;\r\n        value = value.add(hodlPremium[msg.sender].buybackTokens);\r\n\r\n        if( value > balanceOf(msg.sender)) //cannot register more than he or she has; since refund has to happen while token is paused, we don't need to check anything else\r\n            value = balanceOf(msg.sender);\r\n\r\n        hodlPremium[ msg.sender].buybackTokens = value;\r\n        //buyback cancels hodl highway\r\n        if( hodlPremium[msg.sender].hodlTokens > 0 ){\r\n            hodlPremium[msg.sender].hodlTokens = 0;\r\n            emit HodlPremiumSet( msg.sender, 0, hodlPremium[msg.sender].contributionTime );\r\n        }\r\n\r\n        emit RegisteredForRefund(msg.sender, value);\r\n    }\r\n\r\n    function refund( uint256 _value ) public {\r\n        require( block.timestamp >= refundWindowStart && block.timestamp <= refundWindowEnd, \"cannot refund now\" );\r\n        require( hodlPremium[msg.sender].buybackTokens >= _value, \"not enough tokens in refund program\" );\r\n        require( balanceOf(msg.sender) >= _value, \"not enough tokens\" ); //this check is probably redundant to those in _burn, but better check twice\r\n        hodlPremium[msg.sender].buybackTokens = hodlPremium[msg.sender].buybackTokens.sub(_value);\r\n        _burn( msg.sender, _value );\r\n        require( stablecoin.transferFrom( stablecoinPayer, msg.sender, _value.div(20) ), \"transfer failed\" ); //we pay 1/20 = 0.05 DAI for 1 LIT\r\n    }\r\n\r\n    function setHodlPremiumCap(uint256 newhodlPremiumCap) public onlyOwner {\r\n        require(newhodlPremiumCap > 0);\r\n        hodlPremiumCap = newhodlPremiumCap;\r\n        emit HodlPremiumCapSet(hodlPremiumCap);\r\n    }\r\n\r\n    /**\r\n    * Owner can burn token here\r\n    */\r\n    function burn(uint256 _value) public onlyOwner {\r\n        super.burn(_value);\r\n    }\r\n\r\n    function sethodlPremium(\r\n        address beneficiary,\r\n        uint256 value,\r\n        uint256 contributionTime\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(beneficiary != address(0) && value > 0 && contributionTime > 0, \"Not eligible for HODL Premium\");\r\n\r\n        if (hodlPremium[beneficiary].hodlTokens != 0) {\r\n            hodlPremium[beneficiary].hodlTokens = hodlPremium[beneficiary].hodlTokens.add(value);\r\n            emit HodlPremiumSet(beneficiary, hodlPremium[beneficiary].hodlTokens, hodlPremium[beneficiary].contributionTime);\r\n        } else {\r\n            hodlPremium[beneficiary] = Bonus(value, contributionTime, 0);\r\n            emit HodlPremiumSet(beneficiary, value, contributionTime);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf(msg.sender));\r\n\r\n        if (hodlPremiumMinted < hodlPremiumCap && hodlPremium[msg.sender].hodlTokens > 0) {\r\n            uint256 amountForBonusCalculation = calculateAmountForBonus(msg.sender, _value);\r\n            uint256 bonus = calculateBonus(msg.sender, amountForBonusCalculation);\r\n\r\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\r\n            hodlPremium[msg.sender].hodlTokens = hodlPremium[msg.sender].hodlTokens.sub(amountForBonusCalculation);\r\n            if ( bonus > 0) {\r\n                //balances[msg.sender] = balances[msg.sender].add(bonus);\r\n                _mint( msg.sender, bonus );\r\n                //emit Transfer(address(0), msg.sender, bonus);\r\n            }\r\n        }\r\n\r\n        ERC20Pausable.transfer( _to, _value );\r\n//        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n//        balances[_to] = balances[_to].add(_value);\r\n//        emit Transfer(msg.sender, _to, _value);\r\n\r\n        //TODO: optimize to avoid setting values outside of buyback window\r\n        if( balanceOf(msg.sender) < hodlPremium[msg.sender].buybackTokens )\r\n            hodlPremium[msg.sender].buybackTokens = balanceOf(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n\r\n        if (hodlPremiumMinted < hodlPremiumCap && hodlPremium[_from].hodlTokens > 0) {\r\n            uint256 amountForBonusCalculation = calculateAmountForBonus(_from, _value);\r\n            uint256 bonus = calculateBonus(_from, amountForBonusCalculation);\r\n\r\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\r\n            hodlPremium[_from].hodlTokens = hodlPremium[_from].hodlTokens.sub(amountForBonusCalculation);\r\n            if ( bonus > 0) {\r\n                //balances[_from] = balances[_from].add(bonus);\r\n                _mint( _from, bonus );\r\n                //emit Transfer(address(0), _from, bonus);\r\n            }\r\n        }\r\n\r\n        ERC20Pausable.transferFrom( _from, _to, _value);\r\n        if( balanceOf(_from) < hodlPremium[_from].buybackTokens )\r\n            hodlPremium[_from].buybackTokens = balanceOf(_from);\r\n        return true;\r\n    }\r\n\r\n    function calculateBonus(address beneficiary, uint256 amount) internal returns (uint256) {\r\n        uint256 bonusAmount;\r\n\r\n        uint256 contributionTime = hodlPremium[beneficiary].contributionTime;\r\n        uint256 bonusPeriod;\r\n        if (now <= contributionTime) {\r\n            bonusPeriod = 0;\r\n        } else if (now.sub(contributionTime) >= maxBonusDuration) {\r\n            bonusPeriod = maxBonusDuration;\r\n        } else {\r\n            bonusPeriod = now.sub(contributionTime);\r\n        }\r\n\r\n        if (bonusPeriod != 0) {\r\n            bonusAmount = (((bonusPeriod.mul(amount)).div(maxBonusDuration)).mul(25)).div(100);\r\n            if (hodlPremiumMinted.add(bonusAmount) > hodlPremiumCap) {\r\n                bonusAmount = hodlPremiumCap.sub(hodlPremiumMinted);\r\n                hodlPremiumMinted = hodlPremiumCap;\r\n            } else {\r\n                hodlPremiumMinted = hodlPremiumMinted.add(bonusAmount);\r\n            }\r\n\r\n            if( totalSupply().add(bonusAmount) > maxTokenSupply )\r\n                bonusAmount = maxTokenSupply.sub(totalSupply());\r\n        }\r\n\r\n        return bonusAmount;\r\n    }\r\n\r\n    function calculateAmountForBonus(address beneficiary, uint256 _value) internal view returns (uint256) {\r\n        uint256 amountForBonusCalculation;\r\n\r\n        if(_value >= hodlPremium[beneficiary].hodlTokens) {\r\n            amountForBonusCalculation = hodlPremium[beneficiary].hodlTokens;\r\n        } else {\r\n            amountForBonusCalculation = _value;\r\n        }\r\n\r\n        return amountForBonusCalculation;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract TestToken is ERC20{\r\n    constructor ( uint256 _balance)public {\r\n        _mint(msg.sender, _balance);\r\n    }\r\n}\r\n\r\ncontract BaseCrowdsale is Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    Whitelisting public whitelisting;\r\n    Token public token;\r\n\r\n    struct Contribution {\r\n        address payable contributor;\r\n        uint256 weiAmount;\r\n        uint256 contributionTime;\r\n        bool tokensAllocated;\r\n    }\r\n\r\n    mapping (uint256 => Contribution) public contributions;\r\n    uint256 public contributionIndex;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address payable public wallet;\r\n    uint256 public weiRaised;\r\n    uint256 public tokenRaised;\r\n\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    event RecordedContribution(\r\n        uint256 indexed index,\r\n        address indexed contributor,\r\n        uint256 weiAmount,\r\n        uint256 time\r\n    );\r\n\r\n    event TokenOwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    modifier allowedUpdate(uint256 time) {\r\n        require(time > now);\r\n        _;\r\n    }\r\n\r\n    modifier checkZeroAddress(address _add) {\r\n        require(_add != address(0));\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address payable _wallet,\r\n        Token _token,\r\n        Whitelisting _whitelisting\r\n    )\r\n        public\r\n        checkZeroAddress(_wallet)\r\n        checkZeroAddress(address(_token))\r\n        checkZeroAddress(address(_whitelisting))\r\n    {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        wallet = _wallet;\r\n        token = _token;\r\n        whitelisting = _whitelisting;\r\n    }\r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    \r\n\r\n    function transferTokenOwnership(address newOwner)\r\n        external\r\n        onlyOwner\r\n        checkZeroAddress(newOwner)\r\n    {\r\n        emit TokenOwnershipTransferred(owner(), newOwner);\r\n        token.transferOwnership(newOwner);\r\n    }\r\n    \r\n    function setWallet(address payable _wallet) \r\n    external \r\n    onlyOwner\r\n    checkZeroAddress(_wallet)\r\n    {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function setStartTime(uint256 _newStartTime)\r\n        external\r\n        onlyOwner\r\n        allowedUpdate(_newStartTime)\r\n    {\r\n        require(startTime > now);\r\n        require(_newStartTime < endTime);\r\n\r\n        startTime = _newStartTime;\r\n    }\r\n\r\n    function setEndTime(uint256 _newEndTime)\r\n        external\r\n        onlyOwner\r\n        allowedUpdate(_newEndTime)\r\n    {\r\n        require(endTime > now);\r\n        require(_newEndTime > startTime);\r\n\r\n        endTime = _newEndTime;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    function buyTokens(address payable beneficiary)\r\n        internal\r\n        whenNotPaused\r\n        checkZeroAddress(beneficiary)\r\n    {\r\n        require(validPurchase());\r\n        require(whitelisting.isInvestorPaymentApproved(beneficiary));\r\n\r\n        contributions[contributionIndex].contributor = beneficiary;\r\n        contributions[contributionIndex].weiAmount = msg.value;\r\n        contributions[contributionIndex].contributionTime = now;\r\n\r\n        weiRaised = weiRaised.add(contributions[contributionIndex].weiAmount);\r\n        emit RecordedContribution(\r\n            contributionIndex,\r\n            contributions[contributionIndex].contributor,\r\n            contributions[contributionIndex].weiAmount,\r\n            contributions[contributionIndex].contributionTime\r\n        );\r\n\r\n        contributionIndex++;\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract RefundVault is Ownable {\r\n    enum State { Refunding, Closed }\r\n\r\n    address payable public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    constructor(address payable _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    function deposit() public onlyOwner payable {\r\n        require(state == State.Refunding);\r\n    }\r\n\r\n    function close() public onlyOwner {\r\n        require(state == State.Refunding);\r\n        state = State.Closed;\r\n        emit Closed();\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function refund(address payable investor, uint256 depositedValue) public onlyOwner {\r\n        require(state == State.Refunding);\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract TokenCapRefund is BaseCrowdsale {\r\n    RefundVault public vault;\r\n    uint256 public refundClosingTime;\r\n\r\n    modifier waitingTokenAllocation(uint256 index) {\r\n        require(!contributions[index].tokensAllocated);\r\n        _;\r\n    }\r\n\r\n    modifier greaterThanZero(uint256 value) {\r\n        require(value > 0);\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _refundClosingTime) public {\r\n        vault = new RefundVault(wallet);\r\n\r\n        require(_refundClosingTime > endTime);\r\n        refundClosingTime = _refundClosingTime;\r\n    }\r\n\r\n    function closeRefunds() external onlyOwner {\r\n        require(now > refundClosingTime);\r\n        vault.close();\r\n    }\r\n\r\n    function refundContribution(uint256 index)\r\n        external\r\n        onlyOwner\r\n        waitingTokenAllocation(index)\r\n    {\r\n        vault.refund(contributions[index].contributor, contributions[index].weiAmount);\r\n        weiRaised = weiRaised.sub(contributions[index].weiAmount);\r\n        delete contributions[index];\r\n    }\r\n\r\n    function setRefundClosingTime(uint256 _newRefundClosingTime)\r\n        external\r\n        onlyOwner\r\n        allowedUpdate(_newRefundClosingTime)\r\n    {\r\n        require(refundClosingTime > now);\r\n        require(_newRefundClosingTime > endTime);\r\n\r\n        refundClosingTime = _newRefundClosingTime;\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)();\r\n    }\r\n}\r\n\r\n\r\ncontract TokenCapCrowdsale is BaseCrowdsale {\r\n    uint256 public tokenCap;\r\n    uint256 public individualCap;\r\n    uint256 public totalSupply;\r\n\r\n    modifier greaterThanZero(uint256 value) {\r\n        require(value > 0);\r\n        _;\r\n    }\r\n\r\n    constructor (uint256 _cap, uint256 _individualCap)\r\n        public\r\n        greaterThanZero(_cap)\r\n        greaterThanZero(_individualCap)\r\n    {\r\n        syncTotalSupply();\r\n        require(totalSupply < _cap);\r\n        tokenCap = _cap;\r\n        individualCap = _individualCap;\r\n    }\r\n\r\n    function setIndividualCap(uint256 _newIndividualCap)\r\n        external\r\n        onlyOwner\r\n    {     \r\n        individualCap = _newIndividualCap;\r\n    }\r\n\r\n    function setTokenCap(uint256 _newTokenCap)\r\n        external\r\n        onlyOwner\r\n    {     \r\n        tokenCap = _newTokenCap;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        bool tokenCapReached = totalSupply >= tokenCap;\r\n        return tokenCapReached || super.hasEnded();\r\n    }\r\n\r\n    function checkAndUpdateSupply(uint256 newSupply) internal returns (bool) {\r\n        totalSupply = newSupply;\r\n        return tokenCap >= totalSupply;\r\n    }\r\n\r\n    function withinIndividualCap(uint256 _tokens) internal view returns (bool) {\r\n        return individualCap >= _tokens;\r\n    }\r\n\r\n    function syncTotalSupply() internal {\r\n        totalSupply = token.totalSupply();\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract PrivateSale is TokenCapCrowdsale, TokenCapRefund {\r\n\r\n    Vesting public vesting;\r\n    mapping (address => uint256) public tokensVested;\r\n    uint256 hodlStartTime;\r\n\r\n    constructor (\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address payable _wallet,\r\n        Whitelisting _whitelisting,\r\n        Token _token,\r\n        Vesting _vesting,\r\n        uint256 _refundClosingTime,\r\n        uint256 _refundClosingTokenCap,\r\n        uint256 _tokenCap,\r\n        uint256 _individualCap\r\n    )\r\n        public\r\n        TokenCapCrowdsale(_tokenCap, _individualCap)\r\n        TokenCapRefund(_refundClosingTime)\r\n        BaseCrowdsale(_startTime, _endTime, _wallet, _token, _whitelisting)\r\n    {\r\n        _refundClosingTokenCap; //silence compiler warning\r\n        require( address(_vesting) != address(0), \"Invalid address\");\r\n        vesting = _vesting;\r\n    }\r\n\r\n    function allocateTokens(uint256 index, uint256 tokens)\r\n        external\r\n        onlyOwner\r\n        waitingTokenAllocation(index)\r\n    {\r\n        address contributor = contributions[index].contributor;\r\n        require(now >= endTime);\r\n        require(whitelisting.isInvestorApproved(contributor));\r\n\r\n        require(checkAndUpdateSupply(totalSupply.add(tokens)));\r\n\r\n        uint256 alreadyExistingTokens = token.balanceOf(contributor);\r\n        require(withinIndividualCap(tokens.add(alreadyExistingTokens)));\r\n\r\n        contributions[index].tokensAllocated = true;\r\n        tokenRaised = tokenRaised.add(tokens);\r\n        token.mint(contributor, tokens);\r\n        token.sethodlPremium(contributor, tokens, hodlStartTime);\r\n\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            contributor,\r\n            contributions[index].weiAmount,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    function vestTokens(address[] calldata beneficiary, uint256[] calldata tokens, uint8[] calldata userType) external onlyOwner {\r\n        require(beneficiary.length == tokens.length && tokens.length == userType.length);\r\n        uint256 length = beneficiary.length;\r\n        for(uint i = 0; i<length; i++) {\r\n            require(beneficiary[i] != address(0), \"Invalid address\");\r\n            require(now >= endTime);\r\n            require(checkAndUpdateSupply(totalSupply.add(tokens[i])));\r\n\r\n            tokensVested[beneficiary[i]] = tokensVested[beneficiary[i]].add(tokens[i]);\r\n            require(withinIndividualCap(tokensVested[beneficiary[i]]));\r\n\r\n            tokenRaised = tokenRaised.add(tokens[i]);\r\n\r\n            token.mint(address(vesting), tokens[i]);\r\n            Vesting(vesting).initializeVesting(beneficiary[i], tokens[i], now, Vesting.VestingUser(userType[i]));\r\n        }\r\n    }\r\n\r\n    function ownerAssignedTokens(address beneficiary, uint256 tokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(now >= endTime);\r\n        require(whitelisting.isInvestorApproved(beneficiary));\r\n\r\n        require(checkAndUpdateSupply(totalSupply.add(tokens)));\r\n\r\n        uint256 alreadyExistingTokens = token.balanceOf(beneficiary);\r\n        require(withinIndividualCap(tokens.add(alreadyExistingTokens)));\r\n        tokenRaised = tokenRaised.add(tokens);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        token.sethodlPremium(beneficiary, tokens, hodlStartTime);\r\n\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            beneficiary,\r\n            0,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    function setHodlStartTime(uint256 _hodlStartTime) onlyOwner external{\r\n        hodlStartTime = _hodlStartTime;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRefundClosingTime\",\"type\":\"uint256\"}],\"name\":\"setRefundClosingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"contributionTime\",\"type\":\"uint256\"},{\"name\":\"tokensAllocated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenCap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hodlStartTime\",\"type\":\"uint256\"}],\"name\":\"setHodlStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelisting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ownerAssignedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"name\":\"userType\",\"type\":\"uint8[]\"}],\"name\":\"vestTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIndividualCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_whitelisting\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_vesting\",\"type\":\"address\"},{\"name\":\"_refundClosingTime\",\"type\":\"uint256\"},{\"name\":\"_refundClosingTokenCap\",\"type\":\"uint256\"},{\"name\":\"_tokenCap\",\"type\":\"uint256\"},{\"name\":\"_individualCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecordedContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"PrivateSale","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c8fa460000000000000000000000000000000000000000000000000000000005c924760000000000000000000000000339905b38db5f760c7e7d744595b1bcedee1015b000000000000000000000000f250b78f47c2dbd8e2dfb8ba3f33685160130172000000000000000000000000763fa6806e1acf68130d2d0f0df754c93cc546b200000000000000000000000092126dfa40af12ae742660cbe2f680e895a8cfa1000000000000000000000000000000000000000000000000000000005c94ea6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000038a5343d144220300000","Library":"","SwarmSource":"bzzr://2232a7261bdc0def77abe19681ea50a194a1dda08a442c94e45cce2b2524b2bf"}]}