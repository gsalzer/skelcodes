{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\ncontract CarInsurancePolicy {\r\n    enum PolicyState { CREATED, APPROVED, CLAIMABLE, CLAIM_MADE}\r\n\r\n    address manager_;\r\n    address holder_;\r\n    address validator_;\r\n    address underwriter_;\r\n\r\n    bytes32 carReg_;\r\n    uint256 validAfterBlock_;\r\n    PolicyState state_;\r\n\r\n    event CLAIM_MADE(address policy, uint256 amount);\r\n    event POLICY_APPROVAL(address policy, address approvedBy);\r\n\r\n    modifier managerOnly() {\r\n        require(msg.sender == manager_);\r\n        _;\r\n    }\r\n\r\n    modifier validatorOnly() {\r\n        require(msg.sender == validator_);\r\n        _;\r\n    }\r\n\r\n    modifier holderOnly() {\r\n        require(msg.sender == holder_);\r\n        _;\r\n    }\r\n\r\n    modifier underwriterOnly() {\r\n        require(msg.sender == underwriter_); \r\n        _;\r\n    }\r\n    \r\n    constructor(bytes32 carReg, address holder, address underwriter, address validator) public {\r\n        manager_ = msg.sender;\r\n        holder_ = holder;\r\n        carReg_ = carReg;\r\n        underwriter_ = underwriter;\r\n        validator_ = validator;\r\n    }   \r\n    \r\n    function updateValidator(address validator) public managerOnly {\r\n        validator_ = validator;\r\n    }\r\n    \r\n    function certifyClaim() public validatorOnly {\r\n        require(block.number >= validAfterBlock_, \"Policy not active yet\");\r\n        require(state_ >= PolicyState.APPROVED, \"cannot allow claim before approval\");\r\n        state_ = PolicyState.CLAIMABLE;\r\n    }   \r\n    \r\n    function makeClaim(uint256 amount) public holderOnly {\r\n        require(state_ >= PolicyState.APPROVED, \"cannot claim before approval\");\r\n        state_ = PolicyState.CLAIM_MADE;\r\n        emit CLAIM_MADE(msg.sender, amount);\r\n    }   \r\n        \r\n    function approve(uint256 validAfter) public underwriterOnly {\r\n        require(state_ == PolicyState.CREATED, \"policy already approved\");\r\n        validAfterBlock_ = validAfter;\r\n        state_ = PolicyState.APPROVED;\r\n        emit POLICY_APPROVAL(address(this), msg.sender);\r\n    }\r\n}\r\n\r\ncontract CarInsurancePolicyManager {\r\n    event NEW_POLICY(address policy);\r\n\r\n    address owner_;\r\n    address validator_;\r\n    address underwriter_;\r\n\r\n    address[] allPolicies_;\r\n\r\n    constructor(address underwriter, address validator) public {\r\n        owner_ = msg.sender;\r\n        underwriter_ = underwriter;\r\n        validator_ = validator;\r\n    }\r\n\r\n    function CreatePolicy(bytes32 carReg) public payable {\r\n        CarInsurancePolicy newPolicy = new CarInsurancePolicy(carReg, msg.sender, underwriter_, validator_);\r\n        allPolicies_.push(address(newPolicy));\r\n        emit NEW_POLICY(address(newPolicy));\r\n    }\r\n    \r\n    modifier ownderOnly() {\r\n        require(msg.sender == owner_); \r\n        _;\r\n    }\r\n\r\n    function updateValidator(address validator) public ownderOnly {\r\n        for (uint256 i; i < allPolicies_.length; i++) {\r\n            CarInsurancePolicy policy = CarInsurancePolicy(allPolicies_[i]);\r\n            policy.updateValidator(validator);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"carReg\",\"type\":\"bytes32\"}],\"name\":\"CreatePolicy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"updateValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"validator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"address\"}],\"name\":\"NEW_POLICY\",\"type\":\"event\"}]","ContractName":"CarInsurancePolicyManager","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000a673bdac335c375760e62f7ae676b1fa4f9b2200000000000000000000000000a73e18f7883620d0e06800ad60bd438d677788","Library":"","SwarmSource":"bzzr://bc7ad081047f4f3ad2d328cf17bfd7ec6525068d79b7c58d3da648af8cf98436"}]}