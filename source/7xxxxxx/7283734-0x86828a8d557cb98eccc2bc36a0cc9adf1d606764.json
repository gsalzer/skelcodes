{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseDINOSale {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    bool public paused = false;\r\n    // The beneficiary is the future recipient of the funds\r\n    address public beneficiary;\r\n\r\n    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\r\n    uint public fundingGoal;\r\n    uint public fundingCap;\r\n    uint public minContribution;\r\n    bool public fundingGoalReached = false;\r\n    bool public fundingCapReached = false;\r\n    bool public saleClosed = false;\r\n\r\n    // Time period of sale (UNIX timestamps)\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    // Keeps track of the amount of wei raised\r\n    uint public amountRaised;\r\n\r\n    // Refund amount, should it be required\r\n    uint public refundAmount;\r\n\r\n    // The ratio of CHP to Ether\r\n    uint public rate = 10000;\r\n    uint public withdrawRate = 10000;\r\n\r\n    // prevent certain functions from being recursively called\r\n    bool private rentrancy_lock = false;\r\n\r\n    // A map that tracks the amount of wei contributed by address\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    // Events\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n    event CapReached(address _beneficiary, uint _amountRaised);\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n    event Pause();\r\n    event Unpause();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Only the owner is allowed to call this.\"); \r\n        _; \r\n    }\r\n\r\n    // Modifiers\r\n    modifier beforeDeadline(){\r\n        require (currentTime() < endTime, \"Validation: Before endtime\");\r\n        _;\r\n    }\r\n    modifier afterDeadline(){\r\n        require (currentTime() >= endTime, \"Validation: After endtime\"); \r\n        _;\r\n    }\r\n    modifier afterStartTime(){\r\n        require (currentTime() >= startTime, \"Validation: After starttime\"); \r\n        _;\r\n    }\r\n\r\n    modifier saleNotClosed(){\r\n        require (!saleClosed, \"Sale is not yet ended\"); \r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!rentrancy_lock, \"Validation: Reentrancy\");\r\n        rentrancy_lock = true;\r\n        _;\r\n        rentrancy_lock = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"You are not allowed to access this time.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"You are not allowed to access this time.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Owner cannot be 0 address.\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n     * Returns the current time.\r\n     * Useful to abstract calls to \"now\" for tests.\r\n    */\r\n    function currentTime() public view returns (uint _currentTime) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * The owner can terminate the crowdsale at any time.\r\n     */\r\n    function terminate() external onlyOwner {\r\n        saleClosed = true;\r\n    }\r\n\r\n    /**\r\n     * The owner can update the rate (CHP to ETH).\r\n     *\r\n     * @param _rate  the new rate for converting CHP to ETH\r\n     */\r\n    function setRate(uint _rate) public onlyOwner {\r\n        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\r\n        rate = _rate;\r\n    }\r\n\r\n    function setWithdrawRate(uint _rate) public onlyOwner {\r\n        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\r\n        withdrawRate = _rate;\r\n    }\r\n\r\n    /**\r\n     * The owner can unlock the fund with this function. The use-\r\n     * case for this is when the owner decides after the deadline\r\n     * to allow contributors to be refunded their contributions.\r\n     * Note that the fund would be automatically unlocked if the\r\n     * minimum funding goal were not reached.\r\n     */\r\n    function ownerUnlockFund() external afterDeadline onlyOwner {\r\n        fundingGoalReached = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding goal has been reached. If it has, then\r\n     * the GoalReached event is triggered.\r\n     */\r\n    function checkFundingGoal() internal {\r\n        if (!fundingGoalReached) {\r\n            if (amountRaised >= fundingGoal) {\r\n                fundingGoalReached = true;\r\n                emit GoalReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding cap has been reached. If it has, then\r\n     * the CapReached event is triggered.\r\n     */\r\n    function checkFundingCap() internal {\r\n        if (!fundingCapReached) {\r\n            if (amountRaised >= fundingCap) {\r\n                fundingCapReached = true;\r\n                saleClosed = true;\r\n                emit CapReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * These helper functions are exposed for changing the start and end time dynamically   \r\n     */\r\n    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\r\n    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseDINOToken {\r\n    using SafeMath for uint256;\r\n\r\n    // Globals\r\n    address public owner;\r\n    mapping(address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    uint256 internal totalSupply_;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Only the owner is allowed to call this.\"); \r\n        _; \r\n    }\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender], \"You do not have sufficient balance.\");\r\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n        require(_value <= balances[_from], \"You do not have sufficient balance.\");\r\n        require(_value <= allowed[_from][msg.sender], \"You do not have allowance.\");\r\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who], \"Insufficient balance of tokens\");\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _value uint256 The amount of token to be burned\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public {\r\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance to burn tokens.\");\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Owner cannot be 0 address.\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool){\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract DINOToken is BaseDINOToken {\r\n    \r\n    // Constants\r\n    string  public constant name = \"Dinero\";\r\n    string  public constant symbol = \"DINO\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY      =  1300000000 * (10 ** uint256(decimals));\r\n    uint256 public constant CROWDSALE_ALLOWANCE =   800000000 * (10 ** uint256(decimals));\r\n    uint256 public constant ADMIN_ALLOWANCE     =   500000000 * (10 ** uint256(decimals));\r\n    \r\n    // Properties\r\n    //uint256 public totalSupply;\r\n    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\r\n    uint256 public adminAllowance;          // the number of tokens available for the administrator\r\n    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\r\n    address public adminAddr;               // the address of a crowdsale currently selling this token\r\n    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\r\n    bool    public transferEnabled = true;  // Enables everyone to transfer tokens\r\n\r\n    /**\r\n     * The listed addresses are not valid recipients of tokens.\r\n     *\r\n     * 0x0           - the zero address is not valid\r\n     * this          - the contract itself should not receive tokens\r\n     * owner         - the owner has all the initial tokens, but cannot receive any back\r\n     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\r\n     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\r\n     */\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(0x0), \"Cannot send to 0 address\");\r\n        require(_to != address(this), \"Cannot send to contract address\");\r\n        //require(_to != owner, \"Cannot send to the owner\");\r\n        //require(_to != address(adminAddr), \"Cannot send to admin address\");\r\n        require(_to != address(crowdSaleAddr), \"Cannot send to crowdsale address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdsale {\r\n        require(msg.sender == crowdSaleAddr, \"Only crowdsale contract can call this\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _admin) public {\r\n        require(msg.sender != _admin, \"Owner and admin cannot be the same\");\r\n\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\r\n        adminAllowance = ADMIN_ALLOWANCE;\r\n\r\n        // mint all tokens\r\n        balances[msg.sender] = totalSupply_.sub(adminAllowance);\r\n        emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\r\n\r\n        balances[_admin] = adminAllowance;\r\n        emit Transfer(address(0x0), _admin, adminAllowance);\r\n\r\n        adminAddr = _admin;\r\n        approve(adminAddr, adminAllowance);\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transfer function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transferFrom function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        if (result) {\r\n            if (msg.sender == crowdSaleAddr)\r\n                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\r\n            if (msg.sender == adminAddr)\r\n                adminAllowance = adminAllowance.sub(_value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Associates this token with a current crowdsale, giving the crowdsale\r\n     * an allowance of tokens from the crowdsale supply. This gives the\r\n     * crowdsale the ability to call transferFrom to transfer tokens to\r\n     * whomever has purchased them.\r\n     *\r\n     * Note that if _amountForSale is 0, then it is assumed that the full\r\n     * remaining crowdsale supply is made available to the crowdsale.\r\n     *\r\n     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\r\n     * @param _amountForSale The supply of tokens provided to the crowdsale\r\n     */\r\n    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\r\n        require(_amountForSale <= crowdSaleAllowance, \"Sale amount should be less than the crowdsale allowance limits.\");\r\n\r\n        // if 0, then full available crowdsale supply is assumed\r\n        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\r\n\r\n        // Clear allowance of old, and set allowance of new\r\n        approve(crowdSaleAddr, 0);\r\n        approve(_crowdSaleAddr, amount);\r\n\r\n        crowdSaleAddr = _crowdSaleAddr;\r\n    }\r\n\r\n    function setAllowanceBeforeWithdrawal(address _from, address _to, uint _value) public onlyCrowdsale returns (bool) {\r\n        allowed[_from][_to] = _value;\r\n        emit Approval(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DINOSale is BaseDINOSale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    DINOToken public tokenReward;\r\n\r\n    /**\r\n     * Constructor for a crowdsale of DINOToken tokens.\r\n     *\r\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\r\n     * @param fundingGoalInEthers           the minimum goal to be reached\r\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\r\n     * @param minimumContribution      The minimum contribution\r\n     * @param start                         the start time (UNIX timestamp)\r\n     * @param end                           the end time (UNIX timestamp)\r\n     * @param rateDINOToEther                 the conversion rate from DINO to Ether\r\n     * @param addressOfTokenUsedAsReward    address of the token being sold\r\n     */\r\n    constructor(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint fundingCapInEthers,\r\n        uint minimumContribution,\r\n        uint start,\r\n        uint end,\r\n        uint rateDINOToEther,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), \"Beneficiary cannot be 0 address\");\r\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), \"Token address cannot be 0 address\");\r\n        require(fundingGoalInEthers <= fundingCapInEthers, \"Funding goal should be less that funding cap.\");\r\n        require(end > 0, \"Endtime cannot be 0\");\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        fundingCap = fundingCapInEthers * 1 ether;\r\n        minContribution = minimumContribution * 1 ether;\r\n        startTime = start;\r\n        endTime = end; // TODO double check\r\n        rate = rateDINOToEther;\r\n        withdrawRate = rateDINOToEther;\r\n        tokenReward = DINOToken(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * This fallback function is called whenever Ether is sent to the\r\n     * smart contract. It can only be executed when the crowdsale is\r\n     * not paused, not closed, and before the deadline has been reached.\r\n     *\r\n     * This function will update state variables for whether or not the\r\n     * funding goal or cap have been reached. It also ensures that the\r\n     * tokens are transferred to the sender, and that the correct\r\n     * number of tokens are sent according to the current rate.\r\n     */\r\n    function () public payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\r\n        require(msg.value >= minContribution, \"Value should be greater than minimum contribution\");\r\n\r\n        // Update the sender's balance of wei contributed and the amount raised\r\n        uint amount = msg.value;\r\n        uint currentBalance = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = currentBalance.add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n\r\n        // Compute the number of tokens to be rewarded to the sender\r\n        // Note: it's important for this calculation that both wei\r\n        // and DINO have the same number of decimal places (18)\r\n        uint numTokens = amount.mul(rate);\r\n\r\n        // Transfer the tokens from the crowdsale supply to the sender\r\n        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\r\n            emit FundTransfer(msg.sender, amount, true);\r\n            //contributions[msg.sender] = contributions[msg.sender].add(amount);\r\n            // Following code is to automatically transfer ETH to beneficiary\r\n            //uint balanceToSend = this.balance;\r\n            //beneficiary.transfer(balanceToSend);\r\n            //FundTransfer(beneficiary, balanceToSend, false);\r\n            // Check if the funding goal or cap have been reached\r\n            // TODO check impact on gas cost\r\n            checkFundingGoal();\r\n            checkFundingCap();\r\n        }\r\n        else {\r\n            revert(\"Transaction Failed. Please try again later.\");\r\n        }\r\n    }\r\n\r\n    // Any users can call this function to send their tokens and get Ethers\r\n    function withdrawToken(uint tokensToWithdraw) public {\r\n        uint tokensInWei = convertToMini(tokensToWithdraw);\r\n        require(\r\n            tokensInWei <= tokenReward.balanceOf(msg.sender), \r\n            \"You do not have sufficient balance to withdraw\"\r\n        );\r\n        uint ethToGive = tokensInWei.div(withdrawRate);\r\n        require(ethToGive <= address(this).balance, \"Insufficient ethers.\");\r\n        //tokenReward.increaseApproval(address(this),tokensInWei);\r\n        tokenReward.setAllowanceBeforeWithdrawal(msg.sender, address(this), tokensInWei);\r\n        tokenReward.transferFrom(msg.sender, tokenReward.owner(), tokensInWei);\r\n        msg.sender.transfer(ethToGive);\r\n        emit FundTransfer(this.owner(), ethToGive, true);\r\n    }\r\n\r\n    /**\r\n     * The owner can allocate the specified amount of tokens from the\r\n     * crowdsale allowance to the recipient (_to).\r\n     *\r\n     * NOTE: be extremely careful to get the amounts correct, which\r\n     * are in units of wei and mini-DINO. Every digit counts.\r\n     *\r\n     * @param _to            the recipient of the tokens\r\n     * @param amountWei     the amount contributed in wei\r\n     * @param amountMiniDINO the amount of tokens transferred in mini-DINO (18 decimals)\r\n     */\r\n    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniDINO) public\r\n            onlyOwner nonReentrant\r\n    {\r\n        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniDINO)) {\r\n            revert(\"Transfer failed. Please check allowance\");\r\n        }\r\n        balanceOf[_to] = balanceOf[_to].add(amountWei);\r\n        amountRaised = amountRaised.add(amountWei);\r\n        emit FundTransfer(_to, amountWei, true);\r\n        checkFundingGoal();\r\n        checkFundingCap();\r\n    }\r\n\r\n    /**\r\n     * The owner can call this function to withdraw the funds that\r\n     * have been sent to this contract for the crowdsale subject to\r\n     * the funding goal having been reached. The funds will be sent\r\n     * to the beneficiary specified when the crowdsale was created.\r\n     */\r\n    function ownerSafeWithdrawal() public onlyOwner nonReentrant {\r\n        require(fundingGoalReached, \"Check funding goal\");\r\n        uint balanceToSend = address(this).balance;\r\n        beneficiary.transfer(balanceToSend);\r\n        emit FundTransfer(beneficiary, balanceToSend, false);\r\n    }\r\n\r\n    /**\r\n     * This function permits anybody to withdraw the funds they have\r\n     * contributed if and only if the deadline has passed and the\r\n     * funding goal was not reached.\r\n     */\r\n    function safeWithdrawal() public afterDeadline nonReentrant {\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                emit FundTransfer(msg.sender, amount, false);\r\n                refundAmount = refundAmount.add(amount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function convertToMini(uint amount) internal view returns (uint) {\r\n        return amount * (10 ** uint(tokenReward.decimals()));\r\n    }    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerUnlockFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amountWei\",\"type\":\"uint256\"},{\"name\":\"amountMiniDINO\",\"type\":\"uint256\"}],\"name\":\"ownerAllocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setWithdrawRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerSafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"fundingCapInEthers\",\"type\":\"uint256\"},{\"name\":\"minimumContribution\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"rateDINOToEther\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DINOSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009134ceeefc8b26738c0eec4762be0559bec7b99f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8d4a50fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005c791d50000000000000000000000000000000000000000000000000000000006bec31500000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003961ce832e1e4b8939b63be071c96f6340f01ea0","Library":"","SwarmSource":"bzzr://19d4ddd32020d73b0246b7c34d7a9de8416e41f63c0b76558f58bf3ee70f0476"}]}