{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Village {\r\n\r\n    struct User {\r\n        string name;\r\n        bool landclaimed;\r\n        bool registered;\r\n    }\r\n    struct Land { \r\n        address owner;\r\n        bool house;\r\n        uint8 xcoord; \r\n        uint8 ycoord; \r\n        uint8 width;\r\n        uint8 length;\r\n    }\r\n    mapping(address => User) public UserRegistry;\r\n    mapping(string => address) NameRegistry;\r\n    Land[] public LandRegistry; \r\n    uint8[50][50] public mapGrid;   \r\n    uint8[50][50] public landGrid;  \r\n\r\n    constructor() public {\r\n        LandRegistry.push(Land(address(0), false, 0, 0, 0, 0)); \r\n        initFauna();\r\n    }\r\n\r\n    //=>MOD\r\n    modifier onlyRegistered() {\r\n        require(UserRegistry[msg.sender].registered == true, \"Only registered can call this.\");\r\n        _;\r\n    }\r\n    modifier onlyUnregistered() { \r\n        require(UserRegistry[msg.sender].registered == false, \"Only Unregistered can call this.\");\r\n        _;\r\n    }\r\n\r\n    //=>EVENT\r\n    event LandClaimed(uint x); \r\n    event HouseBuilt(uint x);\r\n    event UserRegistered(address user);\r\n\r\n    //=>GET\r\n    function getMapGrid() public view returns(uint8[50][50] memory) {\r\n        return mapGrid;\r\n    }\r\n    function getLandGrid() public view returns(uint8[50][50] memory) {\r\n        return landGrid;\r\n    }\r\n    function getLandRegistry() public view returns(address[] memory, bool[] memory, uint8[] memory, uint8[] memory, uint8[] memory, uint8[] memory) {\r\n        address[] memory addr = new address[](LandRegistry.length);\r\n        bool[] memory house = new bool[](LandRegistry.length);\r\n        uint8[] memory x = new uint8[](LandRegistry.length);\r\n        uint8[] memory y = new uint8[](LandRegistry.length);\r\n        uint8[] memory width = new uint8[](LandRegistry.length);\r\n        uint8[] memory length = new uint8[](LandRegistry.length);\r\n        for(uint i=1; i<LandRegistry.length; i++) {\r\n            addr[i] = LandRegistry[i].owner;\r\n            house[i] = LandRegistry[i].house;\r\n            x[i] = LandRegistry[i].xcoord;\r\n            y[i] = LandRegistry[i].ycoord;\r\n            width[i] = LandRegistry[i].width;\r\n            length[i] = LandRegistry[i].length;\r\n        }\r\n        return (addr, house, x, y, width, length);\r\n    } \r\n    function getUser(address addr) public view returns(string memory, bool) {\r\n        return (UserRegistry[addr].name, UserRegistry[addr].landclaimed);\r\n    }\r\n\r\n    //=>SET\r\n    function registerName(string memory name) public onlyUnregistered() {\r\n        bytes memory input = bytes(name);\r\n        require(NameRegistry[name] == address(0), \"Name already registered.\");\r\n        require(input.length>3, \"Name is too short\");\r\n        require(input.length<12, \"Name is too long\");\r\n        for(uint i; i<input.length; i++){\r\n            bytes1 char = input[i];\r\n                if(\r\n                    !(char >= 0x30 && char <= 0x39) && //9-0\r\n                    !(char >= 0x41 && char <= 0x5A) && //A-Z\r\n                    !(char >= 0x61 && char <= 0x7A) && //a-z\r\n                    !(char == 0x2E) //.\r\n                ) revert(\"Name has to be alphanumeric!\");\r\n        }\r\n        UserRegistry[msg.sender].name = name;\r\n        UserRegistry[msg.sender].registered = true;\r\n        NameRegistry[name] = msg.sender;\r\n        emit UserRegistered(msg.sender);\r\n    }\r\n    function claimLand(uint xcoord, uint ycoord, uint width, uint length) public onlyRegistered() {\r\n        require(UserRegistry[msg.sender].landclaimed == false, \"cant claim more than one land\");\r\n        require(width>=4 && width<=7, \"size invalid\");\r\n        require(length>=4 && length<=7, \"size invalid\");\r\n        uint8 landindex = uint8(LandRegistry.length);\r\n        for(uint x = xcoord; x < xcoord+width; x++) { \r\n            for(uint y = ycoord; y < ycoord+length+1; y++) { \r\n                if(landGrid[x][y] == 0) {\r\n                    landGrid[x][y] = landindex;\r\n                } else {\r\n                    revert(\"cant claim this land\");\r\n                }\r\n            }\r\n        }\r\n        LandRegistry.push(Land(msg.sender, false, uint8(xcoord), uint8(ycoord), uint8(width), uint8(length)));\r\n        UserRegistry[msg.sender].landclaimed = true;\r\n        emit LandClaimed(landindex);\r\n    }\r\n    function buildHouse(uint landindex) public onlyRegistered() {\r\n        require(LandRegistry[landindex].owner == msg.sender);\r\n        require(LandRegistry[landindex].house == false);\r\n        LandRegistry[landindex].house = true;\r\n        emit HouseBuilt(landindex);\r\n    }\r\n\r\n    //=>INIT\r\n    function initFauna() internal {\r\n        mapGrid[1][1] = 5;\r\n        mapGrid[1][15] = 5;\r\n        mapGrid[24][23] = 5;\r\n        mapGrid[25][25] = 5;\r\n        mapGrid[27][26] = 5;\r\n        mapGrid[3][16] = 5;\r\n        mapGrid[5][19] = 5;\r\n        mapGrid[8][25] = 5;\r\n        mapGrid[5][26] = 5;\r\n        mapGrid[11][39] = 5;\r\n        mapGrid[12][21] = 5;\r\n        mapGrid[16][10] = 5;\r\n        mapGrid[33][46] = 5;\r\n        mapGrid[36][31] = 5;\r\n        mapGrid[29][41] = 5;\r\n        mapGrid[42][23] = 5;\r\n        mapGrid[46][43] = 5;\r\n        mapGrid[31][3] = 5;\r\n        mapGrid[47][47] = 5;\r\n        mapGrid[19][27] = 5;\r\n        mapGrid[34][8] = 5;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLandRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool[]\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LandRegistry\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"house\",\"type\":\"bool\"},{\"name\":\"xcoord\",\"type\":\"uint8\"},{\"name\":\"ycoord\",\"type\":\"uint8\"},{\"name\":\"width\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xcoord\",\"type\":\"uint256\"},{\"name\":\"ycoord\",\"type\":\"uint256\"},{\"name\":\"width\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"claimLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"landindex\",\"type\":\"uint256\"}],\"name\":\"buildHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLandGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[50][50]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserRegistry\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"landclaimed\",\"type\":\"bool\"},{\"name\":\"registered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMapGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[50][50]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"LandClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"HouseBuilt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"}]","ContractName":"Village","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca625b87d1445670ac1b8d955f393cf2ba4b8d38b4b2cb2dc84f7a0011c5ea76"}]}