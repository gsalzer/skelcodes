{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= _balances[msg.sender], \"\");\r\n        require(to != address(0), \"\");\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0), \"\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(value <= _balances[from], \"\");\r\n        require(value <= _allowed[from][msg.sender], \"\");\r\n        require(to != address(0), \"\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n            _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n            _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param amount The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param amount The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"\");\r\n        require(amount <= _balances[account], \"\");\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param amount The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        require(amount <= _allowed[account][msg.sender], \"\");\r\n\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n            amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseSecurityToken implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\r\n */\r\ncontract BaseSecurityToken is ERC20 {\r\n    \r\n    struct Document {\r\n        string name;\r\n        string uri;\r\n        bytes32 contentHash;\r\n    }\r\n\r\n    mapping (string => Document) private documents;\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(checkTransferAllowed(msg.sender, to, value) == STATUS_ALLOWED, \"transfer must be allowed\");\r\n        return ERC20.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(checkTransferFromAllowed(from, to, value) == STATUS_ALLOWED, \"transfer must be allowed\");\r\n        return ERC20.transferFrom(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(checkMintAllowed(account, amount) == STATUS_ALLOWED, \"mint must be allowed\");\r\n        ERC20._mint(account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(checkBurnAllowed(account, amount) == STATUS_ALLOWED, \"burn must be allowed\");\r\n        ERC20._burn(account, amount);\r\n    }\r\n\r\n    function attachDocument(string calldata _name, string calldata _uri, bytes32 _contentHash) external {\r\n        require(bytes(_name).length > 0, \"name of the document must not be empty\");\r\n        require(bytes(_uri).length > 0, \"external URI to the document must not be empty\");\r\n        documents[_name] = Document(_name, _uri, _contentHash);\r\n    }\r\n   \r\n    function lookupDocument(string calldata _name) external view returns (string memory, bytes32) {\r\n        Document storage doc = documents[_name];\r\n        return (doc.uri, doc.contentHash);\r\n    }\r\n\r\n    // Use status codes from:\r\n    // https://eips.ethereum.org/EIPS/eip-1066\r\n    byte private STATUS_ALLOWED = 0x11;\r\n\r\n    function checkTransferAllowed(address, address, uint256) public view returns (byte) {\r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkTransferFromAllowed(address, address, uint256) public view returns (byte) {\r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkMintAllowed(address, uint256) public view returns (byte) {\r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkBurnAllowed(address, uint256) public view returns (byte) {\r\n        return STATUS_ALLOWED;\r\n    }\r\n}\r\n\r\ncontract LockRequestable {\r\n\r\n        // MEMBERS\r\n        /// @notice  the count of all invocations of `generateLockId`.\r\n        uint256 public lockRequestCount;\r\n\r\n        constructor() public {\r\n                lockRequestCount = 0;\r\n        }\r\n\r\n        // FUNCTIONS\r\n        /** @notice  Returns a fresh unique identifier.\r\n            *\r\n            * @dev the generation scheme uses three components.\r\n            * First, the blockhash of the previous block.\r\n            * Second, the deployed address.\r\n            * Third, the next value of the counter.\r\n            * This ensure that identifiers are unique across all contracts\r\n            * following this scheme, and that future identifiers are\r\n            * unpredictable.\r\n            *\r\n            * @return a 32-byte unique identifier.\r\n            */\r\n        function generateLockId() internal returns (bytes32 lockId) {\r\n                return keccak256(\r\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\r\n                );\r\n        }\r\n}\r\n\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n        // TYPES\r\n        /// @dev  The struct type for pending custodian changes.\r\n        struct CustodianChangeRequest {\r\n                address proposedNew;\r\n        }\r\n\r\n        // MEMBERS\r\n        /// @dev  The address of the account or contract that acts as the custodian.\r\n        address public custodian;\r\n\r\n        /// @dev  The map of lock ids to pending custodian changes.\r\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n        constructor(address _custodian) public LockRequestable() {\r\n                custodian = _custodian;\r\n        }\r\n\r\n        // MODIFIERS\r\n        modifier onlyCustodian {\r\n                require(msg.sender == custodian);\r\n                _;\r\n        }\r\n\r\n        /** @notice  Requests a change of the custodian associated with this contract.\r\n            *\r\n            * @dev  Returns a unique lock id associated with the request.\r\n            * Anyone can call this function, but confirming the request is authorized\r\n            * by the custodian.\r\n            *\r\n            * @param  _proposedCustodian  The address of the new custodian.\r\n            * @return  lockId  A unique identifier for this request.\r\n            */\r\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n                require(_proposedCustodian != address(0));\r\n\r\n                lockId = generateLockId();\r\n\r\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n                        proposedNew: _proposedCustodian\r\n                });\r\n\r\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n        }\r\n\r\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\r\n            *\r\n            * @dev  When called by the current custodian with a lock id associated with a\r\n            * pending custodian change, the `address custodian` member will be updated with the\r\n            * requested address.\r\n            *\r\n            * @param  _lockId  The identifier of a pending change request.\r\n            */\r\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n                custodian = getCustodianChangeReq(_lockId);\r\n\r\n                delete custodianChangeReqs[_lockId];\r\n\r\n                emit CustodianChangeConfirmed(_lockId, custodian);\r\n        }\r\n\r\n        // PRIVATE FUNCTIONS\r\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n\r\n                // reject ‘null’ results from the map lookup\r\n                // this can only be the case if an unknown `_lockId` is received\r\n                require(changeRequest.proposedNew != address(0));\r\n\r\n                return changeRequest.proposedNew;\r\n        }\r\n\r\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\r\n        event CustodianChangeRequested(\r\n                bytes32 _lockId,\r\n                address _msgSender,\r\n                address _proposedCustodian\r\n        );\r\n\r\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\r\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\ninterface ServiceRegistry {\r\n    function getService(string calldata _name) external view returns (address);\r\n}\r\n\r\ncontract ServiceDiscovery {\r\n    ServiceRegistry internal services;\r\n\r\n    constructor(ServiceRegistry _services) public {\r\n        services = ServiceRegistry(_services);\r\n    }\r\n}\r\n\r\ncontract KnowYourCustomer is CustodianUpgradeable {\r\n\r\n    enum Status {\r\n        none,\r\n        passed,\r\n        suspended\r\n    }\r\n\r\n    struct Customer {\r\n        Status status;\r\n        mapping(string => string) fields;\r\n    }\r\n    \r\n    event ProviderAuthorized(address indexed _provider, string _name);\r\n    event ProviderRemoved(address indexed _provider, string _name);\r\n    event CustomerApproved(address indexed _customer, address indexed _provider);\r\n    event CustomerSuspended(address indexed _customer, address indexed _provider);\r\n    event CustomerFieldSet(address indexed _customer, address indexed _field, string _name);\r\n\r\n    mapping(address => bool) private providers;\r\n    mapping(address => Customer) private customers;\r\n\r\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\r\n        customers[_custodian].status = Status.passed;\r\n        customers[_custodian].fields[\"type\"] = \"custodian\";\r\n        emit CustomerApproved(_custodian, msg.sender);\r\n        emit CustomerFieldSet(_custodian, msg.sender, \"type\");\r\n    }\r\n\r\n    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {\r\n        require(providers[_provider] == false, \"provider must not exist\");\r\n        providers[_provider] = true;\r\n        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;\r\n        emit ProviderAuthorized(_provider, name);\r\n    }\r\n\r\n    function providerRemove(address _provider, string calldata name) external onlyCustodian {\r\n        require(providers[_provider] == true, \"provider must exist\");\r\n        delete providers[_provider];\r\n        emit ProviderRemoved(_provider, name);\r\n    }\r\n\r\n    function hasWritePermissions(address _provider) external view returns (bool) {\r\n        return _provider == custodian || providers[_provider] == true;\r\n    }\r\n\r\n    function getCustomerStatus(address _customer) external view returns (Status) {\r\n        return customers[_customer].status;\r\n    }\r\n\r\n    function getCustomerField(address _customer, string calldata _field) external view returns (string memory) {\r\n        return customers[_customer].fields[_field];\r\n    }\r\n\r\n    function approveCustomer(address _customer) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.passed, \"customer must not be approved before\");\r\n        customers[_customer].status = Status.passed;\r\n        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;\r\n        emit CustomerApproved(_customer, msg.sender);\r\n    }\r\n\r\n    function setCustomerField(address _customer, string calldata _field, string calldata _value) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.none, \"customer must have a set status\");\r\n        customers[_customer].fields[_field] = _value;\r\n        emit CustomerFieldSet(_customer, msg.sender, _field);\r\n    }\r\n\r\n    function suspendCustomer(address _customer) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.suspended, \"customer must be not suspended\");\r\n        customers[_customer].status = Status.suspended;\r\n        emit CustomerSuspended(_customer, msg.sender);\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == custodian || providers[msg.sender] == true);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TokenSettingsInterface {\r\n\r\n    // METHODS\r\n    function getTradeAllowed() public view returns (bool);\r\n    function getMintAllowed() public view returns (bool);\r\n    function getBurnAllowed() public view returns (bool);\r\n    \r\n    // EVENTS\r\n    event TradeAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event TradeAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n    event MintAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event MintAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n    event BurnAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event BurnAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract _BurnAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:IV. BurnAllowed Setting#2;Burn Allowed Switch;1;\r\n    //\r\n    // SETTING: Burn Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables token minting ability globally (even for custodian).\r\n    //\r\n    bool private burnAllowed = false;\r\n\r\n    function getBurnAllowed() public view returns (bool) {\r\n        return burnAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingBurnAllowed {\r\n        bool burnAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingBurnAllowed) public pendingBurnAllowedMap;\r\n\r\n    function requestBurnAllowedChange(bool _burnAllowed) public returns (bytes32 lockId) {\r\n       require(_burnAllowed != burnAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({\r\n           burnAllowed: _burnAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit BurnAllowedLocked(lockId, _burnAllowed);\r\n    }\r\n\r\n    function confirmBurnAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        burnAllowed = value.burnAllowed;\r\n        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);\r\n        delete pendingBurnAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\n\r\ncontract _MintAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:III. MintAllowed Setting#2;Mint Allowed Switch;1;\r\n    //\r\n    // SETTING: Mint Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables token minting ability globally (even for custodian).\r\n    //\r\n    bool private mintAllowed = false;\r\n\r\n    function getMintAllowed() public view returns (bool) {\r\n        return mintAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingMintAllowed {\r\n        bool mintAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingMintAllowed) public pendingMintAllowedMap;\r\n\r\n    function requestMintAllowedChange(bool _mintAllowed) public returns (bytes32 lockId) {\r\n       require(_mintAllowed != mintAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingMintAllowedMap[lockId] = PendingMintAllowed({\r\n           mintAllowed: _mintAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit MintAllowedLocked(lockId, _mintAllowed);\r\n    }\r\n\r\n    function confirmMintAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        mintAllowed = value.mintAllowed;\r\n        emit MintAllowedConfirmed(_lockId, value.mintAllowed);\r\n        delete pendingMintAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\n\r\ncontract _TradeAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:II. TradeAllowed Setting#2;Trade Allowed Switch;1;\r\n    //\r\n    // SETTING: Trade Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables all token transfers, between any recipients, except mint and burn operations.\r\n    //\r\n    bool private tradeAllowed = false;\r\n\r\n    function getTradeAllowed() public view returns (bool) {\r\n        return tradeAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingTradeAllowed {\r\n        bool tradeAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingTradeAllowed) public pendingTradeAllowedMap;\r\n\r\n    function requestTradeAllowedChange(bool _tradeAllowed) public returns (bytes32 lockId) {\r\n       require(_tradeAllowed != tradeAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({\r\n           tradeAllowed: _tradeAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit TradeAllowedLocked(lockId, _tradeAllowed);\r\n    }\r\n\r\n    function confirmTradeAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        tradeAllowed = value.tradeAllowed;\r\n        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);\r\n        delete pendingTradeAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\ncontract TokenSettings is TokenSettingsInterface, CustodianUpgradeable,\r\n_TradeAllowed,\r\n_MintAllowed,\r\n_BurnAllowed\r\n    {\r\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenController implements restriction logic for BaseSecurityToken.\r\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\r\n */\r\ncontract TokenController is CustodianUpgradeable, ServiceDiscovery {\r\n    constructor(address _custodian, ServiceRegistry _services) public\r\n    CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\r\n    }\r\n\r\n    // Use status codes from:\r\n    // https://eips.ethereum.org/EIPS/eip-1066\r\n    byte private constant STATUS_ALLOWED = 0x11;\r\n\r\n    function checkTransferAllowed(address _from, address _to, uint256) public view returns (byte) {\r\n        require(_settings().getTradeAllowed(), \"global trade must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\r\n        require(_kyc().getCustomerStatus(_to) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\r\n\r\n        // TODO:\r\n        // Check user's region\r\n        // Check amount for transfer limits\r\n\r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkTransferFromAllowed(address _from, address _to, uint256 _amount) external view returns (byte) {\r\n        return checkTransferAllowed(_from, _to, _amount);\r\n    }\r\n   \r\n    function checkMintAllowed(address _from, uint256) external view returns (byte) {\r\n        require(_settings().getMintAllowed(), \"global mint must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\r\n        \r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkBurnAllowed(address _from, uint256) external view returns (byte) {\r\n        require(_settings().getBurnAllowed(), \"global burn must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\r\n\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n    function _settings() private view returns (TokenSettings) {\r\n        return TokenSettings(services.getService(\"token/settings\"));\r\n    }\r\n\r\n    function _kyc() private view returns (KnowYourCustomer) {\r\n        return KnowYourCustomer(services.getService(\"validators/kyc\"));\r\n    }\r\n}\r\n\r\ncontract BaRA is BaseSecurityToken, CustodianUpgradeable, ServiceDiscovery {\r\n    \r\n    uint public limit = 400 * 1e6;\r\n    string public name = \"Banksia BioPharm Security Token\";\r\n    string public symbol = \"BaRA\";\r\n    uint8 public decimals = 0;\r\n\r\n    constructor(address _custodian, ServiceRegistry _services,\r\n        string memory _name, string memory _symbol, uint _limit) public \r\n        CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        limit = _limit;\r\n    }\r\n\r\n    function mint(address _to, uint _amount) public onlyCustodian {\r\n        require(_amount != 0, \"check amount to mint\");\r\n        require(super.totalSupply() + _amount <= limit, \"check total supply after mint\");\r\n        BaseSecurityToken._mint(_to, _amount);\r\n    }\r\n    \r\n    function burn(uint _amount) public {\r\n        require(_amount != 0, \"check amount to burn\");\r\n        BaseSecurityToken._burn(msg.sender, _amount);\r\n    }\r\n\r\n    function checkTransferAllowed (address _from, address _to, uint256 _amount) public view returns (byte) {\r\n        return _controller().checkTransferAllowed(_from, _to, _amount);\r\n    }\r\n   \r\n    function checkTransferFromAllowed (address _from, address _to, uint256 _amount) public view returns (byte) {\r\n        return _controller().checkTransferFromAllowed(_from, _to, _amount);\r\n    }\r\n   \r\n    function checkMintAllowed (address _from, uint256 _amount) public view returns (byte) {\r\n        return _controller().checkMintAllowed(_from, _amount);\r\n    }\r\n   \r\n    function checkBurnAllowed (address _from, uint256 _amount) public view returns (byte) {\r\n        return _controller().checkBurnAllowed(_from, _amount);\r\n    }\r\n\r\n    function _controller() private view returns (TokenController) {\r\n        return TokenController(services.getService(\"token/controller\"));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"}],\"name\":\"attachDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"lookupDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkBurnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_services\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BaRA","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f000000000000000000000000673b6f0c00a4700b7616808adb380ac2ac91ebda00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000000000001f42616e6b7369612042696f506861726d20536563757269747920546f6b656e0000000000000000000000000000000000000000000000000000000000000000044261524100000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d1f087ecc63233edb968d8d770ff4380299098e23654c2b2abe37dfd71e6bbe5"}]}