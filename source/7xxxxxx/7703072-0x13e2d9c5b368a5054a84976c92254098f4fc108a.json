{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Cutted.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ERC20Cutted {\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/SimpleLottery.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract SimpleLottery is Ownable {\r\n\r\n    event TicketPurchased(uint lotIndex, uint ticketNumber, address player, uint ticketPrice);\r\n\r\n    event TicketWon(uint lotIndex, uint ticketNumber, address player, uint win);\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public percentRate = 100;\r\n\r\n    uint public ticketPrice = 500000000000000000;\r\n\r\n    uint public feePercent = 10;\r\n\r\n    uint public playersLimit = 10;\r\n\r\n    uint public ticketsPerPlayerLimit = 2;\r\n\r\n    address public feeWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n\r\n    uint curLotIndex = 0;\r\n\r\n    struct Lottery {\r\n        uint summaryInvested;\r\n        uint rewardBase;\r\n        uint ticketsCount;\r\n        uint playersCount;\r\n        address winner;\r\n        mapping(address => uint) ticketsCounts;\r\n        mapping(uint => address) tickets;\r\n        mapping(address => uint) invested;\r\n        address[] players;\r\n    }\r\n\r\n    Lottery[] public lots;\r\n\r\n    modifier notContract(address to) {\r\n        uint codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(to)\r\n        }\r\n        require(codeLength == 0, \"Contracts not supported!\");\r\n        _;\r\n    }\r\n\r\n    function setTicketsPerPlayerLimit(uint newTicketsPerPlayerLimit) public onlyOwner {\r\n        ticketsPerPlayerLimit = newTicketsPerPlayerLimit;\r\n    }\r\n\r\n    function setFeeWallet(address newFeeWallet) public onlyOwner {\r\n        feeWallet = newFeeWallet;\r\n    }\r\n\r\n    function setTicketPrice(uint newTicketPrice) public onlyOwner {\r\n        ticketPrice = newTicketPrice;\r\n    }\r\n\r\n    function setFeePercent(uint newFeePercent) public onlyOwner {\r\n        feePercent = newFeePercent;\r\n    }\r\n\r\n    function setPlayesrLimit(uint newPlayersLimit) public onlyOwner {\r\n        playersLimit = newPlayersLimit;\r\n    }\r\n\r\n    function() public payable notContract(msg.sender) {\r\n        require(msg.value >= ticketPrice, \"Not enough funds to buy ticket!\");\r\n\r\n        if (lots.length == 0) {\r\n            lots.length = 1;\r\n        }\r\n\r\n        Lottery storage lot = lots[curLotIndex];\r\n\r\n        uint numTicketsToBuy = msg.value.div(ticketPrice);\r\n\r\n        if (numTicketsToBuy > ticketsPerPlayerLimit) {\r\n            numTicketsToBuy = ticketsPerPlayerLimit;\r\n        }\r\n\r\n        uint toInvest = ticketPrice.mul(numTicketsToBuy);\r\n\r\n        if (lot.invested[msg.sender] == 0) {\r\n            lot.players.push(msg.sender);\r\n            lot.playersCount = lot.playersCount.add(1);\r\n        }\r\n\r\n        lot.invested[msg.sender] = lot.invested[msg.sender].add(toInvest);\r\n\r\n        for (uint i = 0; i < numTicketsToBuy; i++) {\r\n            lot.tickets[lot.ticketsCount] = msg.sender;\r\n            emit TicketPurchased(curLotIndex, lot.ticketsCount, msg.sender, ticketPrice);\r\n            lot.ticketsCount = lot.ticketsCount.add(1);\r\n            lot.ticketsCounts[msg.sender]++;\r\n        }\r\n\r\n        lot.summaryInvested = lot.summaryInvested.add(toInvest);\r\n\r\n        uint refund = msg.value.sub(toInvest);\r\n        msg.sender.transfer(refund);\r\n\r\n        if (lot.playersCount >= playersLimit) {\r\n            uint number = uint(keccak256(abi.encodePacked(block.number))) % lot.ticketsCount;\r\n            address winner = lot.tickets[number];\r\n            lot.winner = winner;\r\n            uint fee = lot.summaryInvested.mul(feePercent).div(percentRate);\r\n            feeWallet.transfer(fee);\r\n            winner.transfer(lot.rewardBase);\r\n            lot.rewardBase = lot.summaryInvested.sub(fee);\r\n            emit TicketWon(curLotIndex, number, lot.winner, lot.rewardBase);\r\n            curLotIndex++;\r\n        }\r\n    }\r\n\r\n    function retrieveTokens(address tokenAddr, address to) public onlyOwner {\r\n        ERC20Cutted token = ERC20Cutted(tokenAddr);\r\n        token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTicketsPerPlayerLimit\",\"type\":\"uint256\"}],\"name\":\"setTicketsPerPlayerLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsPerPlayerLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playersLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPlayersLimit\",\"type\":\"uint256\"}],\"name\":\"setPlayesrLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lots\",\"outputs\":[{\"name\":\"summaryInvested\",\"type\":\"uint256\"},{\"name\":\"rewardBase\",\"type\":\"uint256\"},{\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"}],\"name\":\"TicketWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SimpleLottery","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://86e64d842b5100b4ae93d0c31b9bcd6fcbc5b66d1d05e4f575c906b4339fafe6"}]}