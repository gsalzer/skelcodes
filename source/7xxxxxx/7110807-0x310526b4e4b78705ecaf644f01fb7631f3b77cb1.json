{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract Gold {\r\n    function remoteTransfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract GladiatorBattleStorage {\r\n    function challengesAmount() external view returns (uint256);\r\n    function battleOccurred(uint256) external view returns (bool);\r\n    function challenges(uint256) external view returns (bool, uint256, uint256);\r\n    function battleBlockNumber(uint256) external view returns (uint256);\r\n    function creator(uint256) external view returns (address, uint256);\r\n    function opponent(uint256) external view returns (address, uint256);\r\n    function winner(uint256) external view returns (address, uint256);\r\n}\r\n\r\ncontract GladiatorBattleSpectatorsStorage {\r\n    function challengeBetsValue(uint256, bool) external view returns (uint256);\r\n    function challengeBalance(uint256) external view returns (uint256);\r\n    function challengeBetsAmount(uint256, bool) external view returns (uint256);\r\n    function betsAmount() external view returns (uint256);\r\n    function allBets(uint256) external view returns (address, uint256, bool, uint256, bool);\r\n    function payOut(address, bool, uint256) external;\r\n    function setChallengeBalance(uint256, uint256) external;\r\n    function setChallengeBetsAmount(uint256, bool, uint256) external;\r\n    function setChallengeBetsValue(uint256, bool, uint256) external;\r\n    function addBet(address, uint256, bool, uint256) external returns (uint256);\r\n    function deactivateBet(uint256) external;\r\n    function addChallengeBet(uint256, uint256) external;\r\n    function removeChallengeBet(uint256, uint256) external;\r\n    function addUserChallenge(address, uint256, uint256) external;\r\n    function removeUserChallenge(address, uint256) external;\r\n    function userChallengeBetId(address, uint256) external view returns (uint256);\r\n    function challengeWinningBetsAmount(uint256) external view returns (uint256);\r\n    function setChallengeWinningBetsAmount(uint256, uint256) external;\r\n    function getUserBet(address, uint256) external view returns (uint256, bool, uint256, bool);\r\n}\r\n\r\ncontract GladiatorBattleSpectators is Upgradable {\r\n    using SafeMath256 for uint256;\r\n\r\n    Gold goldTokens;\r\n    GladiatorBattleSpectatorsStorage _storage_;\r\n    GladiatorBattleStorage battleStorage;\r\n\r\n    uint256 constant MULTIPLIER = 10**6; // for more accurate calculations\r\n\r\n    function _safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return b > a ? 0 : a.sub(b);\r\n    }\r\n\r\n    function _validateChallengeId(uint256 _challengeId) internal view {\r\n        require(\r\n            _challengeId > 0 &&\r\n            _challengeId < battleStorage.challengesAmount(),\r\n            \"wrong challenge id\"\r\n        );\r\n    }\r\n\r\n    function _validateBetId(uint256 _betId) internal view {\r\n        require(\r\n            _betId > 0 &&\r\n            _betId < _storage_.betsAmount(),\r\n            \"wrong bet id\"\r\n        );\r\n        ( , , , , bool _active) = _storage_.allBets(_betId);\r\n        require(_active, \"the bet is not active\");\r\n    }\r\n\r\n    function _getChallengeCurrency(\r\n        uint256 _challengeId\r\n    ) internal view returns (bool isGold) {\r\n        (isGold, , ) = battleStorage.challenges(_challengeId);\r\n    }\r\n\r\n    function _getChallengeBetsAmount(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin\r\n    ) internal view returns (uint256) {\r\n        return _storage_.challengeBetsAmount(_challengeId, _willCreatorWin);\r\n    }\r\n\r\n    function _getChallengeBetsValue(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin\r\n    ) internal view returns (uint256) {\r\n        return _storage_.challengeBetsValue(_challengeId, _willCreatorWin);\r\n    }\r\n\r\n    function _getChallengeBalance(\r\n        uint256 _challengeId\r\n    ) internal view returns (uint256) {\r\n        return _storage_.challengeBalance(_challengeId);\r\n    }\r\n\r\n    function _setChallengeBetsAmount(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin,\r\n        uint256 _value\r\n    ) internal {\r\n        _storage_.setChallengeBetsAmount(_challengeId, _willCreatorWin, _value);\r\n    }\r\n\r\n    function _setChallengeBetsValue(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin,\r\n        uint256 _value\r\n    ) internal {\r\n        _storage_.setChallengeBetsValue(_challengeId, _willCreatorWin, _value);\r\n    }\r\n\r\n    function _setChallengeBalance(\r\n        uint256 _challengeId,\r\n        uint256 _value\r\n    ) internal {\r\n        _storage_.setChallengeBalance(_challengeId, _value);\r\n    }\r\n\r\n    function _updateBetsValues(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin,\r\n        uint256 _value,\r\n        bool _increase // or decrease\r\n    ) internal {\r\n        uint256 _betsAmount = _getChallengeBetsAmount(_challengeId, _willCreatorWin);\r\n        uint256 _betsValue = _getChallengeBetsValue(_challengeId, _willCreatorWin);\r\n        uint256 _betsTotalValue = _getChallengeBalance(_challengeId);\r\n\r\n        if (_increase) {\r\n            _betsAmount = _betsAmount.add(1);\r\n            _betsValue = _betsValue.add(_value);\r\n            _betsTotalValue = _betsTotalValue.add(_value);\r\n        } else {\r\n            _betsAmount = _betsAmount.sub(1);\r\n            _betsValue = _betsValue.sub(_value);\r\n            _betsTotalValue = _betsTotalValue.sub(_value);\r\n        }\r\n\r\n        _setChallengeBetsAmount(_challengeId, _willCreatorWin, _betsAmount);\r\n        _setChallengeBetsValue(_challengeId, _willCreatorWin, _betsValue);\r\n        _setChallengeBalance(_challengeId, _betsTotalValue);\r\n    }\r\n\r\n    function _checkThatOpponentIsSelected(\r\n        uint256 _challengeId\r\n    ) internal view returns (bool) {\r\n        ( , uint256 _dragonId) = battleStorage.opponent(_challengeId);\r\n        require(_dragonId != 0, \"the opponent is not selected\");\r\n    }\r\n\r\n    function _hasBattleOccurred(uint256 _challengeId) internal view returns (bool) {\r\n        return battleStorage.battleOccurred(_challengeId);\r\n    }\r\n\r\n    function _checkThatBattleHasNotOccurred(\r\n        uint256 _challengeId\r\n    ) internal view {\r\n        require(!_hasBattleOccurred(_challengeId), \"the battle has already occurred\");\r\n    }\r\n\r\n    function _checkThatBattleHasOccurred(\r\n        uint256 _challengeId\r\n    ) internal view {\r\n        require(_hasBattleOccurred(_challengeId), \"the battle has not yet occurred\");\r\n    }\r\n\r\n    function _checkThatWeDoNotKnowTheResult(\r\n        uint256 _challengeId\r\n    ) internal view {\r\n        uint256 _blockNumber = battleStorage.battleBlockNumber(_challengeId);\r\n        require(\r\n            _blockNumber > block.number || _blockNumber < _safeSub(block.number, 256),\r\n            \"we already know the result\"\r\n        );\r\n    }\r\n\r\n    function _isWinningBet(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin\r\n    ) internal view returns (bool) {\r\n        (address _winner, ) = battleStorage.winner(_challengeId);\r\n        (address _creator, ) = battleStorage.creator(_challengeId);\r\n        bool _isCreatorWinner = _winner == _creator;\r\n        return _isCreatorWinner == _willCreatorWin;\r\n    }\r\n\r\n    function _checkWinner(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin\r\n    ) internal view {\r\n        require(_isWinningBet(_challengeId, _willCreatorWin), \"you did not win the bet\");\r\n    }\r\n\r\n    function _checkThatBetIsActive(bool _active) internal pure {\r\n        require(_active, \"bet is not active\");\r\n    }\r\n\r\n    function _payForBet(\r\n        uint256 _value,\r\n        bool _isGold,\r\n        uint256 _bet\r\n    ) internal {\r\n        if (_isGold) {\r\n            require(_value == 0, \"specify isGold as false to send eth\");\r\n            goldTokens.remoteTransfer(address(_storage_), _bet);\r\n        } else {\r\n            require(_value == _bet, \"wrong eth amount\");\r\n            address(_storage_).transfer(_value);\r\n        }\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    function _create(\r\n        address _user,\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin,\r\n        uint256 _value\r\n    ) internal {\r\n        uint256 _betId = _storage_.addBet(_user, _challengeId, _willCreatorWin, _value);\r\n        _storage_.addChallengeBet(_challengeId, _betId);\r\n        _storage_.addUserChallenge(_user, _challengeId, _betId);\r\n    }\r\n\r\n    function placeBet(\r\n        address _user,\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin,\r\n        uint256 _value,\r\n        uint256 _ethValue\r\n    ) external onlyController returns (bool isGold) {\r\n        _validateChallengeId(_challengeId);\r\n        _checkThatOpponentIsSelected(_challengeId);\r\n        _checkThatBattleHasNotOccurred(_challengeId);\r\n        _checkThatWeDoNotKnowTheResult(_challengeId);\r\n        require(_value > 0, \"a bet must be more than 0\");\r\n\r\n        isGold = _getChallengeCurrency(_challengeId);\r\n        _payForBet(_ethValue, isGold, _value);\r\n\r\n        uint256 _existingBetId = _storage_.userChallengeBetId(_user, _challengeId);\r\n        require(_existingBetId == 0, \"you have already placed a bet\");\r\n\r\n        _create(_user, _challengeId, _willCreatorWin, _value);\r\n\r\n        _updateBetsValues(_challengeId, _willCreatorWin, _value, true);\r\n    }\r\n\r\n    function _remove(\r\n        address _user,\r\n        uint256 _challengeId,\r\n        uint256 _betId\r\n    ) internal {\r\n        _storage_.deactivateBet(_betId);\r\n        _storage_.removeChallengeBet(_challengeId, _betId);\r\n        _storage_.removeUserChallenge(_user, _challengeId);\r\n    }\r\n\r\n    function removeBet(\r\n        address _user,\r\n        uint256 _challengeId\r\n    ) external onlyController {\r\n        _validateChallengeId(_challengeId);\r\n\r\n        uint256 _betId = _storage_.userChallengeBetId(_user, _challengeId);\r\n        (\r\n            address _realUser,\r\n            uint256 _realChallengeId,\r\n            bool _willCreatorWin,\r\n            uint256 _value,\r\n            bool _active\r\n        ) = _storage_.allBets(_betId);\r\n\r\n        require(_realUser == _user, \"not your bet\");\r\n        require(_realChallengeId == _challengeId, \"wrong challenge\");\r\n        _checkThatBetIsActive(_active);\r\n\r\n        if (_hasBattleOccurred(_challengeId)) {\r\n            require(!_isWinningBet(_challengeId, _willCreatorWin), \"request a reward instead\");\r\n            uint256 _opponentBetsAmount = _getChallengeBetsAmount(_challengeId, !_willCreatorWin);\r\n            require(_opponentBetsAmount == 0, \"your bet lost\");\r\n        } else {\r\n            _checkThatWeDoNotKnowTheResult(_challengeId);\r\n        }\r\n\r\n        _remove(_user, _challengeId, _betId);\r\n\r\n        bool _isGold = _getChallengeCurrency(_challengeId);\r\n        _storage_.payOut(_user, _isGold, _value);\r\n\r\n        _updateBetsValues(_challengeId, _willCreatorWin, _value, false);\r\n    }\r\n\r\n    function _updateWinningBetsAmount(\r\n        uint256 _challengeId,\r\n        bool _willCreatorWin\r\n    ) internal returns (bool) {\r\n        uint256 _betsAmount = _getChallengeBetsAmount(_challengeId, _willCreatorWin);\r\n        uint256 _existingWinningBetsAmount = _storage_.challengeWinningBetsAmount(_challengeId);\r\n        uint256 _winningBetsAmount = _existingWinningBetsAmount == 0 ? _betsAmount : _existingWinningBetsAmount;\r\n        _winningBetsAmount = _winningBetsAmount.sub(1);\r\n        _storage_.setChallengeWinningBetsAmount(_challengeId, _winningBetsAmount);\r\n        return _winningBetsAmount == 0;\r\n    }\r\n\r\n    function requestReward(\r\n        address _user,\r\n        uint256 _challengeId\r\n    ) external onlyController returns (uint256 reward, bool isGold) {\r\n        _validateChallengeId(_challengeId);\r\n        _checkThatBattleHasOccurred(_challengeId);\r\n        (\r\n            uint256 _betId,\r\n            bool _willCreatorWin,\r\n            uint256 _value,\r\n            bool _active\r\n        ) = _storage_.getUserBet(_user, _challengeId);\r\n        _checkThatBetIsActive(_active);\r\n\r\n        _checkWinner(_challengeId, _willCreatorWin);\r\n\r\n        bool _isLast = _updateWinningBetsAmount(_challengeId, _willCreatorWin);\r\n\r\n        uint256 _betsValue = _getChallengeBetsValue(_challengeId, _willCreatorWin);\r\n        uint256 _opponentBetsValue = _getChallengeBetsValue(_challengeId, !_willCreatorWin);\r\n\r\n        uint256 _percentage = _value.mul(MULTIPLIER).div(_betsValue);\r\n        reward = _opponentBetsValue.mul(85).div(100).mul(_percentage).div(MULTIPLIER); // 15% to winner in the battle\r\n        reward = reward.add(_value);\r\n\r\n        uint256 _challengeBalance = _getChallengeBalance(_challengeId);\r\n        require(_challengeBalance >= reward, \"not enough coins, something went wrong\");\r\n\r\n        reward = _isLast ? _challengeBalance : reward; // get rid of inaccuracies of calculations\r\n\r\n        isGold = _getChallengeCurrency(_challengeId);\r\n        _storage_.payOut(_user, isGold, reward);\r\n\r\n        _setChallengeBalance(_challengeId, _challengeBalance.sub(reward));\r\n        _storage_.deactivateBet(_betId);\r\n    }\r\n\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        goldTokens = Gold(_newDependencies[0]);\r\n        _storage_ = GladiatorBattleSpectatorsStorage(_newDependencies[1]);\r\n        battleStorage = GladiatorBattleStorage(_newDependencies[2]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"},{\"name\":\"_willCreatorWin\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"isGold\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"removeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"requestReward\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"isGold\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GladiatorBattleSpectators","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://393151178f4ff42a99ffdb8bcbc2ffa0654618575d9846540b30022064216f71"}]}