{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n \r\n*/\r\n\r\n\t/*==============================\r\n    =          Version 6.5         =\r\n    ==============================*/\r\n\t\r\n\r\n//** Contract 01\r\ncontract EthereumSmartContract {    \r\n    address EthereumNodes; \r\n\t\r\n    constructor() public { \r\n        EthereumNodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == EthereumNodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetEthereumNodes() public view returns (address owner) {\r\n        return EthereumNodes;\r\n    }\r\n}\r\n\r\n//** Contract 02\r\ncontract ldoh is EthereumSmartContract {\r\n\t\r\n\t/*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\t\r\n\tevent onAffiliateBonus(\r\n\t\t  address indexed hodler,\r\n\t\t  address indexed tokenAddress,\r\n\t      string tokenSymbol,\r\n\t\t  uint256 amount,\r\n\t\t  uint256 endtime\r\n\t\t);\r\n\t\t\r\n\tevent onClaimTokens(\r\n\t\t  address indexed hodler,\r\n\t\t  address indexed tokenAddress,\r\n\t      string tokenSymbol,\r\n\t\t  uint256 amount,\r\n\t\t  uint256 endtime\r\n\t\t);\t\t\r\n\t\t\r\n\tevent onHodlTokens(\r\n\t\t  address indexed hodler,\r\n\t\t  address indexed tokenAddress,\r\n\t      string tokenSymbol,\r\n\t\t  uint256 amount,\r\n\t\t  uint256 endtime\r\n\t\t);\t\t\t\t\r\n\t\t\r\n\tevent onAddContractAddress(\r\n\t\t  address indexed contracthodler,\r\n\t\t  bool contractstatus,\r\n\t      uint256 _maxcontribution,\r\n\t\t  string _ContractSymbol\r\n\t\t);\t\r\n\t\t\r\n\tevent onCashbackCode(\r\n\t\t  address indexed hodler,\r\n\t\t  address cashbackcode\r\n\t\t);\t\t\t\r\n\t\r\n\tevent onUnlockedTokens(\r\n\t      uint256 returned\r\n\t\t);\t\t\r\n\t\t\r\n\tevent onReturnAll( \r\n\t      uint256 returned   \t// Delete\r\n\t\t);\r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          VARIABLES           =\r\n    ==============================*/   \r\n\r\n\taddress internal DefaultToken;\t\t\r\n\t\r\n\t\t// Struct Database\r\n\r\n    struct Safe {\r\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\r\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\r\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\r\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\r\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\r\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\r\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\r\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\r\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\r\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\r\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\r\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\r\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\r\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\r\n    }\r\n\t\r\n\t\t// Uint256\r\n\t\r\n\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage (Default 3%)\r\n\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\r\n\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\r\n\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\r\n\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\r\n    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\r\n\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\r\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\r\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\r\n\t\r\n\t\t// Mapping\r\n\t\r\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\r\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\r\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\r\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\r\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\r\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 06 -- > Struct safe database\t\t\t\r\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\r\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//N\t\r\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//N\r\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//N\r\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 11 -- > Affiliate List by ID\t\t\t\t\t//N\r\n\t\r\n    \t// Double Mapping\r\n\r\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\r\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\r\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\r\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/  \t\r\n   \r\n    constructor() public {\r\n        \t \t\r\n        hodlingTime \t= 730 days;\r\n        _currentIndex \t= 500;\r\n    }\r\n    \r\n\t\r\n\t\r\n\t/*==============================\r\n    =    AVAILABLE FOR EVERYONE    =\r\n    ==============================*/  \r\n\r\n//** Function 01 - Fallback Function To Receive Donation In Eth\r\n    function () public payable {\r\n        require(msg.value > 0);       \r\n        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\r\n    }\r\n\t\r\n//** Function 02 - Cashback Code  \r\n    function CashbackCode(address _cashbackcode) public {\r\n\t\trequire(_cashbackcode != msg.sender);\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0) {\r\n\t\t\tcashbackcode[msg.sender] = _cashbackcode;\r\n\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\r\n\t\t}\t\t             \r\n    } \r\n\t\r\n//** Function 03 - Contribute (Hodl Platform)\r\n    function HodlTokens(address tokenAddress, uint256 amount) public {\r\n        require(tokenAddress != 0x0);\r\n\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\r\n\t\t\r\n\t\tif (contractaddress[tokenAddress] == false) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t\r\n\t\t\r\n        ERC20Interface token = ERC20Interface(tokenAddress);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\t\t\r\n\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\r\n\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\r\n\t\t\r\n\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\r\n\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\r\n\t\t\tuint256 data_cashbackbalance \t= 0; \r\n\t\t\taddress data_referrer\t\t\t= EthereumNodes;\r\n\t\t\t\r\n\t\t\tcashbackcode[msg.sender] = EthereumNodes;\r\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\r\n\t\t\t\r\n\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\r\n\t\t\t\r\n\t\t\t} else { \t\r\n\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\r\n\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\r\n\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\r\n\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\r\n\t\t\t\r\n\t\t\tuint256 mycontribution\t\t\t= add(LifetimeContribution[msg.sender][tokenAddress], amount);\r\n\r\n\t\t\t\tif (referrer_contribution >= mycontribution) {\r\n\t\t\r\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \r\n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \r\n\t\t\t\t\t\r\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \r\n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \r\n\t\t\t\t\t\r\n\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\r\n\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t} \t\r\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \r\n\t// Insert to Database  \t\t\r\n\t\r\n\t\tafflist[data_referrer].push(msg.sender);\t\r\n\t\t_userSafes[msg.sender].push(_currentIndex);\r\n\t\t_safes[_currentIndex] = \r\n\r\n\t\tSafe(\r\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\r\n\r\n\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\r\n\t\t\r\n\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\r\n\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\r\n        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\r\n        _currentIndex++;\r\n        _countSafes++;\r\n        \r\n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\r\n    }\t\r\n\t\t\t\r\n\t\t\t\r\n}\r\n\t\t\r\n\t\r\n//** Function 04 - Claim Token That Has Been Unlocked\r\n    function ClaimTokens(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);  \r\n\t\t\r\n\t\tif (s.amountbalance == 0) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tUnlockToken(tokenAddress, id);\r\n\t\t}\r\n    }\r\n    \r\n    function UnlockToken(address tokenAddress, uint256 id) private {\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == tokenAddress);\r\n\r\n        uint256 eventAmount;\r\n        address eventTokenAddress = s.tokenAddress;\r\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\r\n\t\t     \r\n        if(s.endtime < now) // Hodl Complete\r\n        {\r\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\r\n            \r\n            eventAmount \t\t\t\t= s.amountbalance;\r\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\r\n\t\t\r\n\t\ts.lastwithdraw \t\t= s.amountbalance;\r\n\t\ts.amountbalance \t= 0;\r\n\t\ts.lasttime \t\t\t= now;  \r\n\t\t\r\n\t\t    if(s.cashbackbalance > 0) {\r\n            s.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\r\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\r\n            }\r\n\t\t\telse {\r\n\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\r\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\r\n\t\t\t}\r\n\t\t\r\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n\t\t\r\n        }\r\n        else \r\n        {\r\n\t\t\t\r\n\t\t\tUpdateUserData1(s.tokenAddress, s.id);\r\n\t\t\t\t\r\n\t\t}\r\n        \r\n    }   \r\n\t\r\n\tfunction UpdateUserData1(address tokenAddress, uint256 id) private {\r\n\t\t\t\r\n\t\tSafe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == tokenAddress);\t\t\r\n\t\t\t\r\n\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \r\n\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \r\n\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\r\n\t\t                         \r\n\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\r\n\t\t\t\r\n\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\r\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\r\n\t\t\tuint256 MaxAccumulation = MaxWithdraw; \r\n\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\r\n\t\t\t\r\n\t\t\t// Maximum withdraw = User Amount Balance   \r\n\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\r\n\t\t\tuint256 realAmount1 = s.amountbalance; \r\n\t\t\t} else { realAmount1 = MaxAccumulation; }\r\n\t\t\t\r\n\t\t\t// Including Cashback In The First Contribution\r\n\t\t\t\r\n\t\t\tuint256 amountbalance72 = div(mul(s.amount, 72), 100);\r\n\t\t\t\r\n\t\t\tif (s.amountbalance >= amountbalance72) { \t\t\t\t\r\n\t\t\tuint256 realAmount = add(realAmount1, s.cashbackbalance); \r\n\t\t\t} else { realAmount = realAmount1; }\t\r\n\t\t\t\r\n\t\t\ts.lastwithdraw = realAmount;  \t\t\t\r\n\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\r\n\t\t\tUpdateUserData2(tokenAddress, id, newamountbalance, realAmount);\r\n\t\t\t\t\t\r\n    }   \r\n\r\n    function UpdateUserData2(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == tokenAddress);\r\n\r\n        uint256 eventAmount;\r\n        address eventTokenAddress = s.tokenAddress;\r\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\r\n\r\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \r\n\t\ts.lasttime \t\t\t\t\t\t= now;  \r\n\t\t\r\n\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \r\n\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\r\n\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\r\n\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\r\n\t\t\t\r\n\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\r\n\t\t\t\r\n\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\r\n\t\t\r\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \r\n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\r\n\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \r\n\t\t\r\n\t\t\r\n\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\r\n            eventAmount = realAmount;\r\n\t\t\t\r\n\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    } \r\n\t\r\n\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n\t\t\r\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\r\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n    }   \t\r\n\t\r\n//** Function 05 - Get How Many Contribute ?\r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return _userSafes[hodler].length;\r\n    }\r\n\t\r\n\t\r\n//** Function 06 - Get How Many Affiliate ?\r\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\r\n        return afflist[hodler].length;\r\n    }\r\n    \r\n\t\r\n//** Function 07 - Get complete data from each user\r\n\tfunction GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\r\n    }\r\n\t\r\n\t\r\n//** Function 08 - Get Tokens Reserved For Ethereum Vault\r\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\r\n        return EthereumVault[tokenAddress];\r\n    }    \r\n    \r\n\t\r\n//** Function 09 - Get Ethereum Contract's Balance  \r\n    function GetContractBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    } \t\r\n\t\r\n\t\r\n//** Function 10 - Withdraw Affiliate Bonus\r\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \r\n\t\trequire(tokenAddress != 0x0);\r\n\t\t\r\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\r\n\t\t\r\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\r\n\t\t\r\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \r\n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\r\n\t\t\r\n\t\tuint256 eventAmount\t\t\t\t= amount;\r\n        address eventTokenAddress \t\t= tokenAddress;\r\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\r\n\t\t\r\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    } \t\t\r\n\t\r\n\t\r\n//** Function 11 - Get User's Any Token Balance\r\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\r\n        require(tokenAddress != 0x0);\r\n        \r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\r\n                balance += s.amount;\r\n        }\r\n        return balance;\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/  \t\r\n\r\n//** 01 Add Contract Address\t\r\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\r\n        contractaddress[tokenAddress] \t= contractstatus;\r\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\r\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\r\n\t\t\r\n\t\tif (DefaultToken == 0) {\r\n\t\t\tDefaultToken = tokenAddress;\r\n\t\t}\r\n\t\t\r\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\r\n\t\t\tcontractaddress[tokenAddress] \t= true;\r\n\t\t}\t\r\n\t\t\r\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\r\n    }\r\n\t\r\n\t\r\n//** 02 - Add Maximum Contribution\t\r\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\r\n        maxcontribution[tokenAddress] = _maxcontribution;\t\r\n    }\r\n\t\r\n\t\r\n//** 03 - Unlock Tokens\r\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);      \r\n        UnlockToken(tokenAddress, id);\r\n    }\r\n\t\r\n    \r\n//** 04 Change Hodling Time   \r\n    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\r\n        require(newHodlingDays >= 180);      \r\n        hodlingTime = newHodlingDays * 1 days;\r\n    }   \r\n\t\r\n//** 05 - Change Speed Distribution \r\n    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\r\n        require(newSpeed >= 3 && newSpeed <= 12);   \t\r\n\t\tpercent = newSpeed;\r\n    }\r\n\t\r\n\t\r\n//** 06 - Withdraw Ethereum Received Through Fallback Function   \r\n    function WithdrawEth(uint256 amount) restricted public {\r\n        require(amount > 0); \r\n        require(address(this).balance >= amount); \r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\t\r\n    \r\n//** 07 Ethereum Nodes Fees   \r\n    function EthereumNodesFees(address tokenAddress) restricted public {\r\n        require(EthereumVault[tokenAddress] > 0);\r\n        \r\n        uint256 amount = EthereumVault[tokenAddress];\r\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \r\n        EthereumVault[tokenAddress] = 0;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\t\r\n\t\r\n//** 08 - Send All Tokens That Have Been Unlocked  \r\n    function SendUnlockedTokens() restricted public\r\n    {\r\n        uint256 returned;\r\n\r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n\t\t\t\t\r\n\t\t\t\tUpdateUserData1(s.tokenAddress, s.id);\r\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t   \r\n            }\r\n        }\r\n\t\t\r\n        emit onUnlockedTokens(returned);\r\n    }   \t\r\n\t\r\n//** 09 - Return All Tokens To Their Respective Addresses    \r\n    function ReturnAllTokens() restricted public\r\n    {\r\n        uint256 returned;\r\n\r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n\t\t\t\t\r\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\r\n\t\t\t\t\t\r\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\r\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \r\n\t\t\t\t\t\r\n\t\t\t\t\tif(s.cashbackbalance > 0) {\r\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\r\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\r\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\r\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\r\n\r\n                    returned++;\r\n                \r\n            }\r\n        }\r\n\t\t\r\n        emit onReturnAll(returned);\r\n    }   \r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\t/*==============================\r\n    =        ERC20 Interface       =\r\n    ==============================*/ \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"contractstatus\",\"type\":\"bool\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendUnlockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetTokenReserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimePayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHodlingDays\",\"type\":\"uint256\"}],\"name\":\"ChangeHodlingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliateprofit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetHodlTokensBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxcontribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"}],\"name\":\"AddMaxContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimeContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EthereumNodesFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliatevault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ChangeSpeedDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contracthodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractstatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ContractSymbol\",\"type\":\"string\"}],\"name\":\"onAddContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onUnlockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onReturnAll\",\"type\":\"event\"}]","ContractName":"ldoh","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://622ecbdf89e723d16c8e5e8a039b9f9ab44a27c5fbe7e7c486e49d3d48335bef"}]}