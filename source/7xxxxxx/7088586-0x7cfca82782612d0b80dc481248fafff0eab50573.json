{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n     /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns(uint total_Supply);\r\n  function balanceOf(address _owner)public view returns(uint256 balance);\r\n  function allowance(address _owner, address _spender)public view returns(uint remaining);\r\n  function transferFrom(address _from, address _to, uint _amount)public returns(bool ok);\r\n  function approve(address _spender, uint _amount)public returns(bool ok);\r\n  function transfer(address _to, uint _amount)public returns(bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\r\n}\r\n\r\n\r\ncontract BEECASHBACKHOME is ERC20\r\n{\r\n  using SafeMath for uint256;\r\n  string public constant symbol = \"CBH\";\r\n  string public constant name = \"Bee Cashback Home\";\r\n  uint public constant decimals = 18;\r\n  uint256 _totalSupply = 50000000 * 10 ** 18; // 50 Million Total Supply including 18 decimal\r\n\r\n  // Owner of this contract\r\n  address public owner;\r\n\r\n  // Balances for each account\r\n  mapping(address => uint256) balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping(address => uint256)) allowed;\r\n\r\n  // Functions with this modifier can only be executed by the owner\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // Constructor\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  // what is the total supply of the ech tokens\r\n  function totalSupply() public view returns(uint256 total_Supply) {\r\n    total_Supply = _totalSupply;\r\n  }\r\n  // What is the balance of a particular account?\r\n  function balanceOf(address _owner)public view returns(uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  // Transfer the balance from owner's account to another account\r\n  function transfer(address _to, uint256 _amount)public returns(bool ok) {\r\n    require(_to != address(0));\r\n    require(balances[msg.sender] >= _amount && _amount >= 0);\r\n    balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n    balances[_to] = (balances[_to]).add(_amount);\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  // Send _value amount of tokens from address _from to address _to\r\n  // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n  // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n  // fees in sub-currencies; the command should fail unless the _from account has\r\n  // deliberately authorized the sender of the message via some mechanism; we propose\r\n  // these standardized APIs for approval:\r\n  function transferFrom(address _from, address _to, uint256 _amount)public returns(bool ok) {\r\n    require(_to != address(0));\r\n    require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n    balances[_from] = (balances[_from]).sub(_amount);\r\n    allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n    balances[_to] = (balances[_to]).add(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n  // If this function is called again it overwrites the current allowance with _value.\r\n  function approve(address _spender, uint256 _amount)public returns(bool ok) {\r\n    require(_spender != address(0));\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)public view returns(uint256 remaining) {\r\n    require(_owner != address(0) && _spender != address(0));\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  //In case the ownership needs to be transferred\r\n  function transferOwnership(address newOwner) external onlyOwner\r\n  {\r\n    uint256 ownBalance = balances[owner];\r\n    require(newOwner != address(0));\r\n    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n    balances[owner] = 0;\r\n    owner = newOwner;\r\n    emit Transfer(msg.sender, newOwner, ownBalance);\r\n  }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BEECASHBACKHOME","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d352cc699e8f3c344a94882d87c271b39c1abdcfed8980fe30bd386c85dc5225"}]}