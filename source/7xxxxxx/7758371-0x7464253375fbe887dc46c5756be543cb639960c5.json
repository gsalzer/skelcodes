{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/generic/Restricted.sol\r\n\r\n/*\r\n    Generic contract to authorise calls to certain functions only from a given address.\r\n    The address authorised must be a contract (multisig or not, depending on the permission), except for local test\r\n\r\n    deployment works as:\r\n           1. contract deployer account deploys contracts\r\n           2. constructor grants \"PermissionGranter\" permission to deployer account\r\n           3. deployer account executes initial setup (no multiSig)\r\n           4. deployer account grants PermissionGranter permission for the MultiSig contract\r\n                (e.g. StabilityBoardProxy or PreTokenProxy)\r\n           5. deployer account revokes its own PermissionGranter permission\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Restricted {\r\n\r\n    // NB: using bytes32 rather than the string type because it's cheaper gas-wise:\r\n    mapping (address => mapping (bytes32 => bool)) public permissions;\r\n\r\n    event PermissionGranted(address indexed agent, bytes32 grantedPermission);\r\n    event PermissionRevoked(address indexed agent, bytes32 revokedPermission);\r\n\r\n    modifier restrict(bytes32 requiredPermission) {\r\n        require(permissions[msg.sender][requiredPermission], \"msg.sender must have permission\");\r\n        _;\r\n    }\r\n\r\n    constructor(address permissionGranterContract) public {\r\n        require(permissionGranterContract != address(0), \"permissionGranterContract must be set\");\r\n        permissions[permissionGranterContract][\"PermissionGranter\"] = true;\r\n        emit PermissionGranted(permissionGranterContract, \"PermissionGranter\");\r\n    }\r\n\r\n    function grantPermission(address agent, bytes32 requiredPermission) public {\r\n        require(permissions[msg.sender][\"PermissionGranter\"],\r\n            \"msg.sender must have PermissionGranter permission\");\r\n        permissions[agent][requiredPermission] = true;\r\n        emit PermissionGranted(agent, requiredPermission);\r\n    }\r\n\r\n    function grantMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\r\n        require(permissions[msg.sender][\"PermissionGranter\"],\r\n            \"msg.sender must have PermissionGranter permission\");\r\n        uint256 length = requiredPermissions.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            grantPermission(agent, requiredPermissions[i]);\r\n        }\r\n    }\r\n\r\n    function revokePermission(address agent, bytes32 requiredPermission) public {\r\n        require(permissions[msg.sender][\"PermissionGranter\"],\r\n            \"msg.sender must have PermissionGranter permission\");\r\n        permissions[agent][requiredPermission] = false;\r\n        emit PermissionRevoked(agent, requiredPermission);\r\n    }\r\n\r\n    function revokeMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\r\n        uint256 length = requiredPermissions.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            revokePermission(agent, requiredPermissions[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/generic/SafeMath.sol\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n\r\n    TODO: check against ds-math: https://blog.dapphub.com/ds-math/\r\n    TODO: move roundedDiv to a sep lib? (eg. Math.sol)\r\n    TODO: more unit tests!\r\n*/\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b, \"mul overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div by 0\"); // Solidity automatically throws for div by 0 but require to emit reason\r\n        uint256 c = a / b;\r\n        // require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"sub underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"add overflow\");\r\n        return c;\r\n    }\r\n\r\n    // Division, round to nearest integer, round half up\r\n    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div by 0\"); // Solidity automatically throws for div by 0 but require to emit reason\r\n        uint256 halfB = (b % 2 == 0) ? (b / 2) : (b / 2 + 1);\r\n        return (a % b >= halfB) ? (a / b + 1) : (a / b);\r\n    }\r\n\r\n    // Division, always rounds up\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div by 0\"); // Solidity automatically throws for div by 0 but require to emit reason\r\n        return (a % b != 0) ? (a / b + 1) : (a / b);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? b : a;\r\n    }    \r\n}\r\n\r\n// File: contracts/interfaces/TransferFeeInterface.sol\r\n\r\n/*\r\n *  transfer fee calculation interface\r\n *\r\n */\r\npragma solidity 0.4.24;\r\n\r\n\r\ninterface TransferFeeInterface {\r\n    function calculateTransferFee(address from, address to, uint amount) external view returns (uint256 fee);\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Interface.sol\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\npragma solidity 0.4.24;\r\n\r\n\r\ninterface ERC20Interface {\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/TokenReceiver.sol\r\n\r\n/*\r\n *  receiver contract interface\r\n * see https://github.com/ethereum/EIPs/issues/677\r\n */\r\npragma solidity 0.4.24;\r\n\r\n\r\ninterface TokenReceiver {\r\n    function transferNotification(address from, uint256 amount, uint data) external;\r\n}\r\n\r\n// File: contracts/interfaces/AugmintTokenInterface.sol\r\n\r\n/* Augmint Token interface (abstract contract)\r\n\r\nTODO: overload transfer() & transferFrom() instead of transferWithNarrative() & transferFromWithNarrative()\r\n      when this fix available in web3& truffle also uses that web3: https://github.com/ethereum/web3.js/pull/1185\r\nTODO: shall we use bytes for narrative?\r\n */\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AugmintTokenInterface is Restricted, ERC20Interface {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    bytes32 public peggedSymbol;\r\n    uint8 public decimals;\r\n\r\n    uint public totalSupply;\r\n    mapping(address => uint256) public balances; // Balances for each account\r\n    mapping(address => mapping (address => uint256)) public allowed; // allowances added with approve()\r\n\r\n    TransferFeeInterface public feeAccount;\r\n    mapping(bytes32 => bool) public delegatedTxHashesUsed; // record txHashes used by delegatedTransfer\r\n\r\n    event TransferFeesChanged(uint transferFeePt, uint transferFeeMin, uint transferFeeMax);\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event AugmintTransfer(address indexed from, address indexed to, uint amount, string narrative, uint fee);\r\n    event TokenIssued(uint amount);\r\n    event TokenBurned(uint amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function delegatedTransfer(address from, address to, uint amount, string narrative,\r\n                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\r\n                                    bytes32 nonce, /* random nonce generated by client */\r\n                                    /* ^^^^ end of signed data ^^^^ */\r\n                                    bytes signature,\r\n                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\r\n                                ) external;\r\n\r\n    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\r\n                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\r\n                                    bytes32 nonce, /* random nonce generated by client */\r\n                                    /* ^^^^ end of signed data ^^^^ */\r\n                                    bytes signature,\r\n                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\r\n                                ) external;\r\n\r\n    function increaseApproval(address spender, uint addedValue) external;\r\n    function decreaseApproval(address spender, uint subtractedValue) external;\r\n\r\n    function issueTo(address to, uint amount) external; // restrict it to \"MonetarySupervisor\" in impl.;\r\n    function burn(uint amount) external;\r\n\r\n    function transferAndNotify(TokenReceiver target, uint amount, uint data) external;\r\n\r\n    function transferWithNarrative(address to, uint256 amount, string narrative) external;\r\n    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external;\r\n\r\n    function setName(string _name) external;\r\n    function setSymbol(string _symbol) external;\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address who) external view returns (uint);\r\n\r\n\r\n}\r\n\r\n// File: contracts/generic/ECRecovery.sol\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ECRecovery.sol\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n}\r\n\r\n// File: contracts/generic/AugmintToken.sol\r\n\r\n/* Generic Augmint Token implementation (ERC20 token)\r\n    This contract manages:\r\n        * Balances of Augmint holders and transactions between them\r\n        * Issues/burns tokens\r\n\r\n    TODO:\r\n        - reconsider delegatedTransfer and how to structure it\r\n        - shall we allow change of txDelegator?\r\n        - consider generic bytes arg instead of uint for transferAndNotify\r\n        - consider separate transfer fee params and calculation to separate contract (to feeAccount?)\r\n*/\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AugmintToken is AugmintTokenInterface {\r\n\r\n    event FeeAccountChanged(TransferFeeInterface newFeeAccount);\r\n\r\n    constructor(address permissionGranterContract, string _name, string _symbol, bytes32 _peggedSymbol, uint8 _decimals, TransferFeeInterface _feeAccount)\r\n    public Restricted(permissionGranterContract) {\r\n        require(_feeAccount != address(0), \"feeAccount must be set\");\r\n        require(bytes(_name).length > 0, \"name must be set\");\r\n        require(bytes(_symbol).length > 0, \"symbol must be set\");\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        peggedSymbol = _peggedSymbol;\r\n        decimals = _decimals;\r\n\r\n        feeAccount = _feeAccount;\r\n\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, to, amount, \"\");\r\n        return true;\r\n    }\r\n\r\n    /* Transfers based on an offline signed transfer instruction. */\r\n    function delegatedTransfer(address from, address to, uint amount, string narrative,\r\n                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\r\n                                     bytes32 nonce, /* random nonce generated by client */\r\n                                     /* ^^^^ end of signed data ^^^^ */\r\n                                     bytes signature,\r\n                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\r\n                                     )\r\n    external {\r\n        bytes32 txHash = keccak256(abi.encodePacked(this, from, to, amount, narrative, maxExecutorFeeInToken, nonce));\r\n\r\n        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\r\n\r\n        _transfer(from, to, amount, narrative);\r\n    }\r\n\r\n    function approve(address _spender, uint256 amount) external returns (bool) {\r\n        require(_spender != 0x0, \"spender must be set\");\r\n        allowed[msg.sender][_spender] = amount;\r\n        emit Approval(msg.sender, _spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     ERC20 transferFrom attack protection: https://github.com/DecentLabs/dcm-poc/issues/57\r\n     approve should be called when allowed[_spender] == 0. To increment allowed value is better\r\n     to use this function to avoid 2 calls (and wait until the first transaction is mined)\r\n     Based on MonolithDAO Token.sol */\r\n    function increaseApproval(address _spender, uint _addedValue) external {\r\n        require(_spender != 0x0, \"spender must be set\");\r\n        mapping (address => uint256) allowances = allowed[msg.sender];\r\n        uint newValue = allowances[_spender].add(_addedValue);\r\n        allowances[_spender] = newValue;\r\n        emit Approval(msg.sender, _spender, newValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external {\r\n        require(_spender != 0x0, \"spender must be set\");\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        _transferFrom(from, to, amount, \"\");\r\n        return true;\r\n    }\r\n\r\n    // Issue tokens. See MonetarySupervisor but as a rule of thumb issueTo is only allowed:\r\n    //      - on new loan (by trusted Lender contracts)\r\n    //      - when converting old tokens using MonetarySupervisor\r\n    //      - strictly to reserve by Stability Board (via MonetarySupervisor)\r\n    function issueTo(address to, uint amount) external restrict(\"MonetarySupervisor\") {\r\n        balances[to] = balances[to].add(amount);\r\n        totalSupply = totalSupply.add(amount);\r\n        emit Transfer(0x0, to, amount);\r\n        emit AugmintTransfer(0x0, to, amount, \"\", 0);\r\n    }\r\n\r\n    // Burn tokens. Anyone can burn from its own account. YOLO.\r\n    // Used by to burn from Augmint reserve or by Lender contract after loan repayment\r\n    function burn(uint amount) external {\r\n        require(balances[msg.sender] >= amount, \"balance must be >= amount\");\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(msg.sender, 0x0, amount);\r\n        emit AugmintTransfer(msg.sender, 0x0, amount, \"\", 0);\r\n    }\r\n\r\n    /* to upgrade feeAccount (eg. for fee calculation changes) */\r\n    function setFeeAccount(TransferFeeInterface newFeeAccount) external restrict(\"StabilityBoard\") {\r\n        feeAccount = newFeeAccount;\r\n        emit FeeAccountChanged(newFeeAccount);\r\n    }\r\n\r\n    /*  transferAndNotify can be used by contracts which require tokens to have only 1 tx (instead of approve + call)\r\n        Eg. repay loan, lock funds, token sell order on exchange\r\n        Reverts on failue:\r\n            - transfer fails\r\n            - if transferNotification fails (callee must revert on failure)\r\n            - if targetContract is an account or targetContract doesn't have neither transferNotification or fallback fx\r\n        TODO: make data param generic bytes (see receiver code attempt in Locker.transferNotification)\r\n    */\r\n    function transferAndNotify(TokenReceiver target, uint amount, uint data) external {\r\n        _transfer(msg.sender, target, amount, \"\");\r\n\r\n        target.transferNotification(msg.sender, amount, data);\r\n    }\r\n\r\n    /* transferAndNotify based on an  instruction signed offline  */\r\n    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\r\n                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\r\n                                     bytes32 nonce, /* random nonce generated by client */\r\n                                     /* ^^^^ end of signed data ^^^^ */\r\n                                     bytes signature,\r\n                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\r\n                                     )\r\n    external {\r\n        bytes32 txHash = keccak256(abi.encodePacked(this, from, target, amount, data, maxExecutorFeeInToken, nonce));\r\n\r\n        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\r\n\r\n        _transfer(from, target, amount, \"\");\r\n        target.transferNotification(from, amount, data);\r\n    }\r\n\r\n\r\n    function transferWithNarrative(address to, uint256 amount, string narrative) external {\r\n        _transfer(msg.sender, to, amount, narrative);\r\n    }\r\n\r\n    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external {\r\n        _transferFrom(from, to, amount, narrative);\r\n    }\r\n\r\n    /* Allow Stability Board to change the name when a new token contract version\r\n       is deployed and ready for production use. So that older token contracts\r\n       are identifiable in 3rd party apps. */\r\n    function setName(string _name) external restrict(\"StabilityBoard\") {\r\n        name = _name;\r\n    }\r\n\r\n    /* Allow Stability Board to change the symbol when a new token contract version\r\n       is deployed and ready for production use. So that older token contracts\r\n       are identifiable in 3rd party apps. */\r\n    function setSymbol(string _symbol) external restrict(\"StabilityBoard\") {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _checkHashAndTransferExecutorFee(bytes32 txHash, bytes signature, address signer,\r\n                                                uint maxExecutorFeeInToken, uint requestedExecutorFeeInToken) private {\r\n        require(requestedExecutorFeeInToken <= maxExecutorFeeInToken, \"requestedExecutorFee must be <= maxExecutorFee\");\r\n        require(!delegatedTxHashesUsed[txHash], \"txHash already used\");\r\n        delegatedTxHashesUsed[txHash] = true;\r\n\r\n        address recovered = ECRecovery.recover(ECRecovery.toEthSignedMessageHash(txHash), signature);\r\n        require(recovered == signer, \"invalid signature\");\r\n\r\n        _transfer(signer, msg.sender, requestedExecutorFeeInToken, \"Delegated transfer fee\", 0);\r\n    }\r\n\r\n    function _transferFrom(address from, address to, uint256 amount, string narrative) private {\r\n        uint fee = feeAccount.calculateTransferFee(from, to, amount);\r\n        uint amountWithFee = amount.add(fee);\r\n\r\n        /* NB: fee is deducted from owner, so transferFrom could fail\r\n            if amount + fee is not available on owner balance, or allowance */\r\n        require(balances[from] >= amountWithFee, \"balance must be >= amount + fee\");\r\n        require(allowed[from][msg.sender] >= amountWithFee, \"allowance must be >= amount + fee\");\r\n\r\n        _transfer(from, to, amount, narrative, fee);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amountWithFee);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint transferAmount, string narrative) private {\r\n        uint fee = feeAccount.calculateTransferFee(from, to, transferAmount);\r\n        _transfer(from, to, transferAmount, narrative, fee);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint transferAmount, string narrative, uint fee) private {\r\n        require(to != 0x0, \"to must be set\");\r\n        uint amountWithFee = transferAmount.add(fee);\r\n        // to emit proper reason instead of failing on from.sub()\r\n        require(balances[from] >= amountWithFee, \"balance must be >= amount + transfer fee\");\r\n\r\n        balances[from] = balances[from].sub(amountWithFee);\r\n        balances[to] = balances[to].add(transferAmount);\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n\r\n        if (fee > 0) {\r\n            balances[feeAccount] = balances[feeAccount].add(fee);\r\n            emit Transfer(from, feeAccount, fee);\r\n        }\r\n\r\n        emit AugmintTransfer(from, to, transferAmount, narrative, fee);\r\n    }\r\n}\r\n\r\n// File: contracts/generic/SystemAccount.sol\r\n\r\n/* Contract to collect fees from system */\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract SystemAccount is Restricted {\r\n    event WithdrawFromSystemAccount(address tokenAddress, address to, uint tokenAmount, uint weiAmount,\r\n                                    string narrative);\r\n\r\n    constructor(address permissionGranterContract)\r\n    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\r\n\r\n    function withdraw(AugmintToken tokenAddress, address to, uint tokenAmount, uint weiAmount, string narrative)\r\n    external restrict(\"StabilityBoard\") {\r\n        tokenAddress.transferWithNarrative(to, tokenAmount, narrative);\r\n        if (weiAmount > 0) {\r\n            to.transfer(weiAmount);\r\n        }\r\n        emit WithdrawFromSystemAccount(tokenAddress, to, tokenAmount, weiAmount, narrative);\r\n    }\r\n}\r\n\r\n// File: contracts/AugmintReserves.sol\r\n\r\n/* Contract to hold Augmint reserves (ETH & Token)\r\n    - ETH as regular ETH balance of the contract\r\n    - ERC20 token reserve (stored as regular Token balance under the contract address)\r\n\r\nNB: reserves are held under the contract address, therefore any transaction on the reserve is limited to the\r\n    tx-s defined here (i.e. transfer is not allowed even by the contract owner or StabilityBoard or MonetarySupervisor)\r\n\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AugmintReserves is Restricted {\r\n\r\n    event ReserveMigration(address to, uint weiAmount);\r\n\r\n    constructor(address permissionGranterContract)\r\n    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\r\n\r\n    function () external payable { // solhint-disable-line no-empty-blocks\r\n        // to accept ETH sent into reserve (from defaulted loan's collateral )\r\n    }\r\n\r\n    function burn(AugmintTokenInterface augmintToken, uint amount)\r\n    external restrict(\"MonetarySupervisor\") {\r\n        augmintToken.burn(amount);\r\n    }\r\n\r\n    function migrate(address to, uint weiAmount)\r\n    external restrict(\"StabilityBoard\") {\r\n        if (weiAmount > 0) {\r\n            to.transfer(weiAmount);\r\n        }\r\n        emit ReserveMigration(to, weiAmount);\r\n    }\r\n}\r\n\r\n// File: contracts/InterestEarnedAccount.sol\r\n\r\n/* Contract to hold earned interest from loans repaid\r\n   premiums for locks are being accrued (i.e. transferred) to Locker */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract InterestEarnedAccount is SystemAccount {\r\n\r\n    constructor(address permissionGranterContract) public SystemAccount(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\r\n\r\n    function transferInterest(AugmintTokenInterface augmintToken, address locker, uint interestAmount)\r\n    external restrict(\"MonetarySupervisor\") {\r\n        augmintToken.transfer(locker, interestAmount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/MonetarySupervisor.sol\r\n\r\n/* MonetarySupervisor\r\n    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\r\n    - holds system wide parameters/limits\r\n    - enforces system wide limits\r\n    - burns and issues to AugmintReserves\r\n    - Send funds from reserve to exchange when intervening (not implemented yet)\r\n    - Converts older versions of AugmintTokens in 1:1 to new\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MonetarySupervisor is Restricted, TokenReceiver { // solhint-disable-line no-empty-blocks\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant PERCENT_100 = 1000000;\r\n\r\n    AugmintTokenInterface public augmintToken;\r\n    InterestEarnedAccount public interestEarnedAccount;\r\n    AugmintReserves public augmintReserves;\r\n\r\n    uint public issuedByStabilityBoard; // token issued by Stability Board\r\n    uint public burnedByStabilityBoard; // token burned by Stability Board\r\n\r\n    uint public totalLoanAmount; // total amount of all loans without interest, in token\r\n    uint public totalLockedAmount; // total amount of all locks without premium, in token\r\n\r\n    /**********\r\n        Parameters to ensure totalLoanAmount or totalLockedAmount difference is within limits and system also works\r\n        when total loan or lock amounts are low.\r\n            for test calculations: https://docs.google.com/spreadsheets/d/1MeWYPYZRIm1n9lzpvbq8kLfQg1hhvk5oJY6NrR401S0\r\n    **********/\r\n    struct LtdParams {\r\n        uint  lockDifferenceLimit; /* only allow a new lock if Loan To Deposit ratio would stay above\r\n                                            (1 - lockDifferenceLimit) with new lock. Stored as parts per million */\r\n        uint  loanDifferenceLimit; /* only allow a new loan if Loan To Deposit ratio would stay above\r\n                                            (1 + loanDifferenceLimit) with new loan. Stored as parts per million */\r\n        /* allowedDifferenceAmount param is to ensure the system is not \"freezing\" when totalLoanAmount or\r\n            totalLockAmount is low.\r\n        It allows a new loan or lock (up to an amount to reach this difference) even if LTD will go below / above\r\n            lockDifferenceLimit / loanDifferenceLimit with the new lock/loan */\r\n        uint  allowedDifferenceAmount;\r\n    }\r\n\r\n    LtdParams public ltdParams;\r\n\r\n    /* Previously deployed AugmintTokens which are accepted for conversion (see transferNotification() )\r\n        NB: it's not iterable so old version addresses needs to be added for UI manually after each deploy */\r\n    mapping(address => bool) public acceptedLegacyAugmintTokens;\r\n\r\n    event LtdParamsChanged(uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount);\r\n\r\n    event AcceptedLegacyAugmintTokenChanged(address augmintTokenAddress, bool newAcceptedState);\r\n\r\n    event LegacyTokenConverted(address oldTokenAddress, address account, uint amount);\r\n\r\n    event KPIsAdjusted(uint totalLoanAmountAdjustment, uint totalLockedAmountAdjustment);\r\n\r\n    event SystemContractsChanged(InterestEarnedAccount newInterestEarnedAccount, AugmintReserves newAugmintReserves);\r\n\r\n    constructor(address permissionGranterContract, AugmintTokenInterface _augmintToken,\r\n        AugmintReserves _augmintReserves, InterestEarnedAccount _interestEarnedAccount,\r\n        uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount)\r\n    public Restricted(permissionGranterContract) {\r\n        augmintToken = _augmintToken;\r\n        augmintReserves = _augmintReserves;\r\n        interestEarnedAccount = _interestEarnedAccount;\r\n\r\n        ltdParams = LtdParams(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\r\n    }\r\n\r\n    function issueToReserve(uint amount) external restrict(\"StabilityBoard\") {\r\n        issuedByStabilityBoard = issuedByStabilityBoard.add(amount);\r\n        augmintToken.issueTo(augmintReserves, amount);\r\n    }\r\n\r\n    function burnFromReserve(uint amount) external restrict(\"StabilityBoard\") {\r\n        burnedByStabilityBoard = burnedByStabilityBoard.add(amount);\r\n        augmintReserves.burn(augmintToken, amount);\r\n    }\r\n\r\n    /* Locker requesting interest when locking funds. Enforcing LTD to stay within range allowed by LTD params\r\n        NB: it does not know about min loan amount, it's the loan contract's responsibility to enforce it  */\r\n    function requestInterest(uint amountToLock, uint interestAmount) external {\r\n        // only whitelisted Locker\r\n        require(permissions[msg.sender][\"Locker\"], \"msg.sender must have Locker permission\");\r\n        require(amountToLock <= getMaxLockAmountAllowedByLtd(), \"amountToLock must be <= maxLockAmountAllowedByLtd\");\r\n\r\n        totalLockedAmount = totalLockedAmount.add(amountToLock);\r\n        // next line would revert but require to emit reason:\r\n        require(augmintToken.balanceOf(address(interestEarnedAccount)) >= interestAmount,\r\n            \"interestEarnedAccount balance must be >= interestAmount\");\r\n        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\r\n    }\r\n\r\n    // Locker notifying when releasing funds to update KPIs\r\n    function releaseFundsNotification(uint lockedAmount) external {\r\n        // only whitelisted Locker\r\n        require(permissions[msg.sender][\"Locker\"], \"msg.sender must have Locker permission\");\r\n        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\r\n    }\r\n\r\n    /* Issue loan if LTD stays within range allowed by LTD params\r\n        NB: it does not know about min loan amount, it's the loan contract's responsibility to enforce it */\r\n    function issueLoan(address borrower, uint loanAmount) external {\r\n         // only whitelisted LoanManager contracts\r\n        require(permissions[msg.sender][\"LoanManager\"],\r\n            \"msg.sender must have LoanManager permission\");\r\n        require(loanAmount <= getMaxLoanAmountAllowedByLtd(), \"loanAmount must be <= maxLoanAmountAllowedByLtd\");\r\n        totalLoanAmount = totalLoanAmount.add(loanAmount);\r\n        augmintToken.issueTo(borrower, loanAmount);\r\n    }\r\n\r\n    function loanRepaymentNotification(uint loanAmount) external {\r\n        // only whitelisted LoanManager contracts\r\n        require(permissions[msg.sender][\"LoanManager\"],\r\n            \"msg.sender must have LoanManager permission\");\r\n        totalLoanAmount = totalLoanAmount.sub(loanAmount);\r\n    }\r\n\r\n    // NB: this is called by Lender contract with the sum of all loans collected in batch\r\n    function loanCollectionNotification(uint totalLoanAmountCollected) external {\r\n        // only whitelisted LoanManager contracts\r\n        require(permissions[msg.sender][\"LoanManager\"],\r\n            \"msg.sender must have LoanManager permission\");\r\n        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\r\n    }\r\n\r\n    function setAcceptedLegacyAugmintToken(address legacyAugmintTokenAddress, bool newAcceptedState)\r\n    external restrict(\"StabilityBoard\") {\r\n        acceptedLegacyAugmintTokens[legacyAugmintTokenAddress] = newAcceptedState;\r\n        emit AcceptedLegacyAugmintTokenChanged(legacyAugmintTokenAddress, newAcceptedState);\r\n    }\r\n\r\n    function setLtdParams(uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount)\r\n    external restrict(\"StabilityBoard\") {\r\n        ltdParams = LtdParams(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\r\n        emit LtdParamsChanged(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\r\n    }\r\n\r\n    /* function to migrate old totalLoanAmount and totalLockedAmount from old monetarySupervisor contract\r\n        when it's upgraded.\r\n        Set new monetarySupervisor contract in all locker and loanManager contracts before executing this */\r\n    function adjustKPIs(uint totalLoanAmountAdjustment, uint totalLockedAmountAdjustment)\r\n    external restrict(\"StabilityBoard\") {\r\n        totalLoanAmount = totalLoanAmount.add(totalLoanAmountAdjustment);\r\n        totalLockedAmount = totalLockedAmount.add(totalLockedAmountAdjustment);\r\n        emit KPIsAdjusted(totalLoanAmountAdjustment, totalLockedAmountAdjustment);\r\n    }\r\n\r\n    /* to allow upgrades of InterestEarnedAccount and AugmintReserves contracts. */\r\n    function setSystemContracts(InterestEarnedAccount newInterestEarnedAccount, AugmintReserves newAugmintReserves)\r\n    external restrict(\"StabilityBoard\") {\r\n        interestEarnedAccount = newInterestEarnedAccount;\r\n        augmintReserves = newAugmintReserves;\r\n        emit SystemContractsChanged(newInterestEarnedAccount, newAugmintReserves);\r\n    }\r\n\r\n    /* User can request to convert their tokens from older AugmintToken versions in 1:1\r\n      transferNotification is called from AugmintToken's transferAndNotify\r\n     Flow for converting old tokens:\r\n        1) user calls old token contract's transferAndNotify with the amount to convert,\r\n                addressing the new MonetarySupervisor Contract\r\n        2) transferAndNotify transfers user's old tokens to the current MonetarySupervisor contract's address\r\n        3) transferAndNotify calls MonetarySupervisor.transferNotification\r\n        4) MonetarySupervisor checks if old AugmintToken is permitted\r\n        5) MonetarySupervisor issues new tokens to user's account in current AugmintToken\r\n        6) MonetarySupervisor burns old tokens from own balance\r\n    */\r\n    function transferNotification(address from, uint amount, uint /* data, not used */ ) external {\r\n        AugmintTokenInterface legacyToken = AugmintTokenInterface(msg.sender);\r\n        require(acceptedLegacyAugmintTokens[legacyToken], \"msg.sender must be allowed in acceptedLegacyAugmintTokens\");\r\n\r\n        legacyToken.burn(amount);\r\n        augmintToken.issueTo(from, amount);\r\n        emit LegacyTokenConverted(msg.sender, from, amount);\r\n    }\r\n\r\n    /* Helper function for UI.\r\n        Returns max lock amount based on minLockAmount, interestPt, using LTD params & interestEarnedAccount balance */\r\n    function getMaxLockAmount(uint minLockAmount, uint interestPt) external view returns (uint maxLock) {\r\n        uint allowedByEarning = augmintToken.balanceOf(address(interestEarnedAccount)).mul(PERCENT_100).div(interestPt);\r\n        uint allowedByLtd = getMaxLockAmountAllowedByLtd();\r\n        maxLock = allowedByEarning < allowedByLtd ? allowedByEarning : allowedByLtd;\r\n        maxLock = maxLock < minLockAmount ? 0 : maxLock;\r\n    }\r\n\r\n    /* Helper function for UI.\r\n        Returns max loan amount based on minLoanAmont using LTD params */\r\n    function getMaxLoanAmount(uint minLoanAmount) external view returns (uint maxLoan) {\r\n        uint allowedByLtd = getMaxLoanAmountAllowedByLtd();\r\n        maxLoan = allowedByLtd < minLoanAmount ? 0 : allowedByLtd;\r\n    }\r\n\r\n    /* returns maximum lockable token amount allowed by LTD params. */\r\n    function getMaxLockAmountAllowedByLtd() public view returns(uint maxLockByLtd) {\r\n        uint allowedByLtdDifferencePt = totalLoanAmount.mul(PERCENT_100).div(PERCENT_100\r\n                                            .sub(ltdParams.lockDifferenceLimit));\r\n        allowedByLtdDifferencePt = totalLockedAmount >= allowedByLtdDifferencePt ?\r\n                                        0 : allowedByLtdDifferencePt.sub(totalLockedAmount);\r\n\r\n        uint allowedByLtdDifferenceAmount =\r\n            totalLockedAmount >= totalLoanAmount.add(ltdParams.allowedDifferenceAmount) ?\r\n                0 : totalLoanAmount.add(ltdParams.allowedDifferenceAmount).sub(totalLockedAmount);\r\n\r\n        maxLockByLtd = allowedByLtdDifferencePt > allowedByLtdDifferenceAmount ?\r\n                                        allowedByLtdDifferencePt : allowedByLtdDifferenceAmount;\r\n    }\r\n\r\n    /* returns maximum borrowable token amount allowed by LTD params */\r\n    function getMaxLoanAmountAllowedByLtd() public view returns(uint maxLoanByLtd) {\r\n        uint allowedByLtdDifferencePt = totalLockedAmount.mul(ltdParams.loanDifferenceLimit.add(PERCENT_100))\r\n                                            .div(PERCENT_100);\r\n        allowedByLtdDifferencePt = totalLoanAmount >= allowedByLtdDifferencePt ?\r\n                                        0 : allowedByLtdDifferencePt.sub(totalLoanAmount);\r\n\r\n        uint allowedByLtdDifferenceAmount =\r\n            totalLoanAmount >= totalLockedAmount.add(ltdParams.allowedDifferenceAmount) ?\r\n                0 : totalLockedAmount.add(ltdParams.allowedDifferenceAmount).sub(totalLoanAmount);\r\n\r\n        maxLoanByLtd = allowedByLtdDifferencePt > allowedByLtdDifferenceAmount ?\r\n                                        allowedByLtdDifferencePt : allowedByLtdDifferenceAmount;\r\n    }\r\n}\r\n\r\n// File: contracts/Rates.sol\r\n\r\n/*\r\n Generic symbol / WEI rates contract.\r\n only callable by trusted price oracles.\r\n Being regularly called by a price oracle\r\n    TODO: trustless/decentrilezed price Oracle\r\n    TODO: shall we use blockNumber instead of now for lastUpdated?\r\n    TODO: consider if we need storing rates with variable decimals instead of fixed 4\r\n    TODO: could we emit 1 RateChanged event from setMultipleRates (symbols and newrates arrays)?\r\n*/\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Rates is Restricted {\r\n    using SafeMath for uint256;\r\n\r\n    struct RateInfo {\r\n        uint rate; // how much 1 WEI worth 1 unit , i.e. symbol/ETH rate\r\n                    // 0 rate means no rate info available\r\n        uint lastUpdated;\r\n    }\r\n\r\n    // mapping currency symbol => rate. all rates are stored with 2 decimals. i.e. EUR/ETH = 989.12 then rate = 98912\r\n    mapping(bytes32 => RateInfo) public rates;\r\n\r\n    event RateChanged(bytes32 symbol, uint newRate);\r\n\r\n    constructor(address permissionGranterContract) public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\r\n\r\n    function setRate(bytes32 symbol, uint newRate) external restrict(\"RatesFeeder\") {\r\n        rates[symbol] = RateInfo(newRate, now);\r\n        emit RateChanged(symbol, newRate);\r\n    }\r\n\r\n    function setMultipleRates(bytes32[] symbols, uint[] newRates) external restrict(\"RatesFeeder\") {\r\n        require(symbols.length == newRates.length, \"symobls and newRates lengths must be equal\");\r\n        for (uint256 i = 0; i < symbols.length; i++) {\r\n            rates[symbols[i]] = RateInfo(newRates[i], now);\r\n            emit RateChanged(symbols[i], newRates[i]);\r\n        }\r\n    }\r\n\r\n    function convertFromWei(bytes32 bSymbol, uint weiValue) external view returns(uint value) {\r\n        require(rates[bSymbol].rate > 0, \"rates[bSymbol] must be > 0\");\r\n        return weiValue.mul(rates[bSymbol].rate).roundedDiv(1000000000000000000);\r\n    }\r\n\r\n    function convertToWei(bytes32 bSymbol, uint value) external view returns(uint weiValue) {\r\n        // next line would revert with div by zero but require to emit reason\r\n        require(rates[bSymbol].rate > 0, \"rates[bSymbol] must be > 0\");\r\n        /* TODO: can we make this not loosing max scale? */\r\n        return value.mul(1000000000000000000).roundedDiv(rates[bSymbol].rate);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LoanManager.sol\r\n\r\n/*\r\n    Contract to manage Augmint token loan contracts backed by ETH\r\n    For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/loanFlow.png\r\n\r\n    TODO:\r\n        - create MonetarySupervisor interface and use it instead?\r\n        - make data arg generic bytes?\r\n        - make collect() run as long as gas provided allows\r\n*/\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LoanManager is Restricted, TokenReceiver {\r\n    using SafeMath for uint256;\r\n\r\n    enum LoanState { Open, Repaid, Defaulted, Collected } // NB: Defaulted state is not stored, only getters calculate\r\n\r\n    struct LoanProduct {\r\n        uint minDisbursedAmount; // 0: with decimals set in AugmintToken.decimals\r\n        uint32 term;            // 1\r\n        uint32 discountRate;    // 2: discountRate in parts per million , ie. 10,000 = 1%\r\n        uint32 collateralRatio; // 3: loan token amount / colleteral pegged ccy value\r\n                                //      in parts per million , ie. 10,000 = 1%\r\n        uint32 defaultingFeePt; // 4: % of collateral in parts per million , ie. 50,000 = 5%\r\n        bool isActive;          // 5\r\n    }\r\n\r\n    /* NB: we don't need to store loan parameters because loan products can't be altered (only disabled/enabled) */\r\n    struct LoanData {\r\n        uint collateralAmount; // 0\r\n        uint repaymentAmount; // 1\r\n        address borrower; // 2\r\n        uint32 productId; // 3\r\n        LoanState state; // 4\r\n        uint40 maturity; // 5\r\n    }\r\n\r\n    LoanProduct[] public products;\r\n\r\n    LoanData[] public loans;\r\n    mapping(address => uint[]) public accountLoans;  // owner account address =>  array of loan Ids\r\n\r\n    Rates public rates; // instance of ETH/pegged currency rate provider contract\r\n    AugmintTokenInterface public augmintToken; // instance of token contract\r\n    MonetarySupervisor public monetarySupervisor;\r\n\r\n    event NewLoan(uint32 productId, uint loanId, address indexed borrower, uint collateralAmount, uint loanAmount,\r\n        uint repaymentAmount, uint40 maturity);\r\n\r\n    event LoanProductActiveStateChanged(uint32 productId, bool newState);\r\n\r\n    event LoanProductAdded(uint32 productId);\r\n\r\n    event LoanRepayed(uint loanId, address borrower);\r\n\r\n    event LoanCollected(uint loanId, address indexed borrower, uint collectedCollateral,\r\n        uint releasedCollateral, uint defaultingFee);\r\n\r\n    event SystemContractsChanged(Rates newRatesContract, MonetarySupervisor newMonetarySupervisor);\r\n\r\n    constructor(address permissionGranterContract, AugmintTokenInterface _augmintToken,\r\n                    MonetarySupervisor _monetarySupervisor, Rates _rates)\r\n    public Restricted(permissionGranterContract) {\r\n        augmintToken = _augmintToken;\r\n        monetarySupervisor = _monetarySupervisor;\r\n        rates = _rates;\r\n    }\r\n\r\n    function addLoanProduct(uint32 term, uint32 discountRate, uint32 collateralRatio, uint minDisbursedAmount,\r\n                                uint32 defaultingFeePt, bool isActive)\r\n    external restrict(\"StabilityBoard\") {\r\n\r\n        uint _newProductId = products.push(\r\n            LoanProduct(minDisbursedAmount, term, discountRate, collateralRatio, defaultingFeePt, isActive)\r\n        ) - 1;\r\n\r\n        uint32 newProductId = uint32(_newProductId);\r\n        require(newProductId == _newProductId, \"productId overflow\");\r\n\r\n        emit LoanProductAdded(newProductId);\r\n    }\r\n\r\n    function setLoanProductActiveState(uint32 productId, bool newState)\r\n    external restrict (\"StabilityBoard\") {\r\n        require(productId < products.length, \"invalid productId\"); // next line would revert but require to emit reason\r\n        products[productId].isActive = newState;\r\n        emit LoanProductActiveStateChanged(productId, newState);\r\n    }\r\n\r\n    function newEthBackedLoan(uint32 productId) external payable {\r\n        require(productId < products.length, \"invalid productId\"); // next line would revert but require to emit reason\r\n        LoanProduct storage product = products[productId];\r\n        require(product.isActive, \"product must be in active state\"); // valid product\r\n\r\n\r\n        // calculate loan values based on ETH sent in with Tx\r\n        uint tokenValue = rates.convertFromWei(augmintToken.peggedSymbol(), msg.value);\r\n        uint repaymentAmount = tokenValue.mul(product.collateralRatio).div(1000000);\r\n\r\n        uint loanAmount;\r\n        (loanAmount, ) = calculateLoanValues(product, repaymentAmount);\r\n\r\n        require(loanAmount >= product.minDisbursedAmount, \"loanAmount must be >= minDisbursedAmount\");\r\n\r\n        uint expiration = now.add(product.term);\r\n        uint40 maturity = uint40(expiration);\r\n        require(maturity == expiration, \"maturity overflow\");\r\n\r\n        // Create new loan\r\n        uint loanId = loans.push(LoanData(msg.value, repaymentAmount, msg.sender,\r\n                                            productId, LoanState.Open, maturity)) - 1;\r\n\r\n        // Store ref to new loan\r\n        accountLoans[msg.sender].push(loanId);\r\n\r\n        // Issue tokens and send to borrower\r\n        monetarySupervisor.issueLoan(msg.sender, loanAmount);\r\n\r\n        emit NewLoan(productId, loanId, msg.sender, msg.value, loanAmount, repaymentAmount, maturity);\r\n    }\r\n\r\n    /* repay loan, called from AugmintToken's transferAndNotify\r\n     Flow for repaying loan:\r\n        1) user calls token contract's transferAndNotify loanId passed in data arg\r\n        2) transferAndNotify transfers tokens to the Lender contract\r\n        3) transferAndNotify calls Lender.transferNotification with lockProductId\r\n    */\r\n    // from arg is not used as we allow anyone to repay a loan:\r\n    function transferNotification(address, uint repaymentAmount, uint loanId) external {\r\n        require(msg.sender == address(augmintToken), \"msg.sender must be augmintToken\");\r\n\r\n        _repayLoan(loanId, repaymentAmount);\r\n    }\r\n\r\n    function collect(uint[] loanIds) external {\r\n        /* when there are a lots of loans to be collected then\r\n             the client need to call it in batches to make sure tx won't exceed block gas limit.\r\n         Anyone can call it - can't cause harm as it only allows to collect loans which they are defaulted\r\n         TODO: optimise defaulting fee calculations\r\n        */\r\n        uint totalLoanAmountCollected;\r\n        uint totalCollateralToCollect;\r\n        uint totalDefaultingFee;\r\n        for (uint i = 0; i < loanIds.length; i++) {\r\n            require(loanIds[i] < loans.length, \"invalid loanId\"); // next line would revert but require to emit reason\r\n            LoanData storage loan = loans[loanIds[i]];\r\n            require(loan.state == LoanState.Open, \"loan state must be Open\");\r\n            require(now >= loan.maturity, \"current time must be later than maturity\");\r\n            LoanProduct storage product = products[loan.productId];\r\n\r\n            uint loanAmount;\r\n            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);\r\n\r\n            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);\r\n\r\n            loan.state = LoanState.Collected;\r\n\r\n            // send ETH collateral to augmintToken reserve\r\n            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);\r\n            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);\r\n            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),\r\n                    loan.repaymentAmount).add(defaultingFee);\r\n\r\n            uint releasedCollateral;\r\n            if (targetCollection < loan.collateralAmount) {\r\n                releasedCollateral = loan.collateralAmount.sub(targetCollection);\r\n                loan.borrower.transfer(releasedCollateral);\r\n            }\r\n            uint collateralToCollect = loan.collateralAmount.sub(releasedCollateral);\r\n            if (defaultingFee >= collateralToCollect) {\r\n                defaultingFee = collateralToCollect;\r\n                collateralToCollect = 0;\r\n            } else {\r\n                collateralToCollect = collateralToCollect.sub(defaultingFee);\r\n            }\r\n            totalDefaultingFee = totalDefaultingFee.add(defaultingFee);\r\n\r\n            totalCollateralToCollect = totalCollateralToCollect.add(collateralToCollect);\r\n\r\n            emit LoanCollected(loanIds[i], loan.borrower, collateralToCollect.add(defaultingFee),\r\n                    releasedCollateral, defaultingFee);\r\n        }\r\n\r\n        if (totalCollateralToCollect > 0) {\r\n            address(monetarySupervisor.augmintReserves()).transfer(totalCollateralToCollect);\r\n        }\r\n\r\n        if (totalDefaultingFee > 0) {\r\n            address(augmintToken.feeAccount()).transfer(totalDefaultingFee);\r\n        }\r\n\r\n        monetarySupervisor.loanCollectionNotification(totalLoanAmountCollected);// update KPIs\r\n\r\n    }\r\n\r\n    /* to allow upgrade of Rates and MonetarySupervisor contracts */\r\n    function setSystemContracts(Rates newRatesContract, MonetarySupervisor newMonetarySupervisor)\r\n    external restrict(\"StabilityBoard\") {\r\n        rates = newRatesContract;\r\n        monetarySupervisor = newMonetarySupervisor;\r\n        emit SystemContractsChanged(newRatesContract, newMonetarySupervisor);\r\n    }\r\n\r\n    function getProductCount() external view returns (uint) {\r\n        return products.length;\r\n    }\r\n\r\n    // returns <chunkSize> loan products starting from some <offset>:\r\n    // [ productId, minDisbursedAmount, term, discountRate, collateralRatio, defaultingFeePt, maxLoanAmount, isActive ]\r\n    function getProducts(uint offset, uint16 chunkSize)\r\n    external view returns (uint[8][]) {\r\n        uint limit = SafeMath.min(offset.add(chunkSize), products.length);\r\n        uint[8][] memory response = new uint[8][](limit.sub(offset));\r\n\r\n        for (uint i = offset; i < limit; i++) {\r\n            LoanProduct storage product = products[i];\r\n            response[i - offset] = [i, product.minDisbursedAmount, product.term, product.discountRate,\r\n                    product.collateralRatio, product.defaultingFeePt,\r\n                    monetarySupervisor.getMaxLoanAmount(product.minDisbursedAmount), product.isActive ? 1 : 0 ];\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function getLoanCount() external view returns (uint) {\r\n        return loans.length;\r\n    }\r\n\r\n    /* returns <chunkSize> loans starting from some <offset>. Loans data encoded as:\r\n        [loanId, collateralAmount, repaymentAmount, borrower, productId,\r\n              state, maturity, disbursementTime, loanAmount, interestAmount] */\r\n    function getLoans(uint offset, uint16 chunkSize)\r\n    external view returns (uint[10][]) {\r\n        uint limit = SafeMath.min(offset.add(chunkSize), loans.length);\r\n        uint[10][] memory response = new uint[10][](limit.sub(offset));\r\n\r\n        for (uint i = offset; i < limit; i++) {\r\n            response[i - offset] = getLoanTuple(i);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function getLoanCountForAddress(address borrower) external view returns (uint) {\r\n        return accountLoans[borrower].length;\r\n    }\r\n\r\n    /* returns <chunkSize> loans of a given account, starting from some <offset>. Loans data encoded as:\r\n        [loanId, collateralAmount, repaymentAmount, borrower, productId, state, maturity, disbursementTime,\r\n                                                                                    loanAmount, interestAmount ] */\r\n    function getLoansForAddress(address borrower, uint offset, uint16 chunkSize)\r\n    external view returns (uint[10][]) {\r\n        uint[] storage loansForAddress = accountLoans[borrower];\r\n        uint limit = SafeMath.min(offset.add(chunkSize), loansForAddress.length);\r\n        uint[10][] memory response = new uint[10][](limit.sub(offset));\r\n\r\n        for (uint i = offset; i < limit; i++) {\r\n            response[i - offset] = getLoanTuple(loansForAddress[i]);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function getLoanTuple(uint loanId) public view returns (uint[10] result) {\r\n        require(loanId < loans.length, \"invalid loanId\"); // next line would revert but require to emit reason\r\n        LoanData storage loan = loans[loanId];\r\n        LoanProduct storage product = products[loan.productId];\r\n\r\n        uint loanAmount;\r\n        uint interestAmount;\r\n        (loanAmount, interestAmount) = calculateLoanValues(product, loan.repaymentAmount);\r\n        uint disbursementTime = loan.maturity - product.term;\r\n\r\n        LoanState loanState =\r\n                loan.state == LoanState.Open && now >= loan.maturity ? LoanState.Defaulted : loan.state;\r\n\r\n        result = [loanId, loan.collateralAmount, loan.repaymentAmount, uint(loan.borrower),\r\n                loan.productId, uint(loanState), loan.maturity, disbursementTime, loanAmount, interestAmount];\r\n    }\r\n\r\n    function calculateLoanValues(LoanProduct storage product, uint repaymentAmount)\r\n    internal view returns (uint loanAmount, uint interestAmount) {\r\n        // calculate loan values based on repayment amount\r\n        loanAmount = repaymentAmount.mul(product.discountRate).div(1000000);\r\n        interestAmount = loanAmount > repaymentAmount ? 0 : repaymentAmount.sub(loanAmount);\r\n    }\r\n\r\n    /* internal function, assuming repayment amount already transfered  */\r\n    function _repayLoan(uint loanId, uint repaymentAmount) internal {\r\n        require(loanId < loans.length, \"invalid loanId\"); // next line would revert but require to emit reason\r\n        LoanData storage loan = loans[loanId];\r\n        require(loan.state == LoanState.Open, \"loan state must be Open\");\r\n        require(repaymentAmount == loan.repaymentAmount, \"repaymentAmount must be equal to tokens sent\");\r\n        require(now <= loan.maturity, \"current time must be earlier than maturity\");\r\n\r\n        LoanProduct storage product = products[loan.productId];\r\n        uint loanAmount;\r\n        uint interestAmount;\r\n        (loanAmount, interestAmount) = calculateLoanValues(product, loan.repaymentAmount);\r\n\r\n        loans[loanId].state = LoanState.Repaid;\r\n\r\n        if (interestAmount > 0) {\r\n            augmintToken.transfer(monetarySupervisor.interestEarnedAccount(), interestAmount);\r\n            augmintToken.burn(loanAmount);\r\n        } else {\r\n            // negative or zero interest (i.e. discountRate >= 0)\r\n            augmintToken.burn(repaymentAmount);\r\n        }\r\n\r\n        monetarySupervisor.loanRepaymentNotification(loanAmount); // update KPIs\r\n\r\n        loan.borrower.transfer(loan.collateralAmount); // send back ETH collateral\r\n\r\n        emit LoanRepayed(loanId, loan.borrower);\r\n    }\r\n}\r\n\r\n// File: contracts/generic/MultiSig.sol\r\n\r\n/* Abstract multisig contract to allow multi approval execution of atomic contracts scripts\r\n        e.g. migrations or settings.\r\n    * Script added by signing a script address by a signer  (NEW state)\r\n    * Script goes to ALLOWED state once a quorom of signers sign it (quorom fx is defined in each derived contracts)\r\n    * Script can be signed even in APPROVED state\r\n    * APPROVED scripts can be executed only once.\r\n        - if script succeeds then state set to DONE\r\n        - If script runs out of gas or reverts then script state set to FAILEd and not allowed to run again\r\n          (To avoid leaving \"behind\" scripts which fail in a given state but eventually execute in the future)\r\n    * Scripts can be cancelled by an other multisig script approved and calling cancelScript()\r\n    * Adding/removing signers is only via multisig approved scripts using addSigners / removeSigners fxs\r\n*/\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract MultiSig {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) public isSigner;\r\n    address[] public allSigners; // all signers, even the disabled ones\r\n                                // NB: it can contain duplicates when a signer is added, removed then readded again\r\n                                //   the purpose of this array is to being able to iterate on signers in isSigner\r\n    uint public activeSignersCount;\r\n\r\n    enum ScriptState {New, Approved, Done, Cancelled, Failed}\r\n\r\n    struct Script {\r\n        ScriptState state;\r\n        uint signCount;\r\n        mapping(address => bool) signedBy;\r\n        address[] allSigners;\r\n    }\r\n\r\n    mapping(address => Script) public scripts;\r\n    address[] public scriptAddresses;\r\n\r\n    event SignerAdded(address signer);\r\n    event SignerRemoved(address signer);\r\n\r\n    event ScriptSigned(address scriptAddress, address signer);\r\n    event ScriptApproved(address scriptAddress);\r\n    event ScriptCancelled(address scriptAddress);\r\n\r\n    event ScriptExecuted(address scriptAddress, bool result);\r\n\r\n    constructor() public {\r\n        // deployer address is the first signer. Deployer can configure new contracts by itself being the only \"signer\"\r\n        // The first script which sets the new contracts live should add signers and revoke deployer's signature right\r\n        isSigner[msg.sender] = true;\r\n        allSigners.push(msg.sender);\r\n        activeSignersCount = 1;\r\n        emit SignerAdded(msg.sender);\r\n    }\r\n\r\n    function sign(address scriptAddress) public {\r\n        require(isSigner[msg.sender], \"sender must be signer\");\r\n        Script storage script = scripts[scriptAddress];\r\n        require(script.state == ScriptState.Approved || script.state == ScriptState.New,\r\n                \"script state must be New or Approved\");\r\n        require(!script.signedBy[msg.sender], \"script must not be signed by signer yet\");\r\n\r\n        if (script.allSigners.length == 0) {\r\n            // first sign of a new script\r\n            scriptAddresses.push(scriptAddress);\r\n        }\r\n\r\n        script.allSigners.push(msg.sender);\r\n        script.signedBy[msg.sender] = true;\r\n        script.signCount = script.signCount.add(1);\r\n\r\n        emit ScriptSigned(scriptAddress, msg.sender);\r\n\r\n        if (checkQuorum(script.signCount)) {\r\n            script.state = ScriptState.Approved;\r\n            emit ScriptApproved(scriptAddress);\r\n        }\r\n    }\r\n\r\n    function execute(address scriptAddress) public returns (bool result) {\r\n        // only allow execute to signers to avoid someone set an approved script failed by calling it with low gaslimit\r\n        require(isSigner[msg.sender], \"sender must be signer\");\r\n        Script storage script = scripts[scriptAddress];\r\n        require(script.state == ScriptState.Approved, \"script state must be Approved\");\r\n\r\n        // passing scriptAddress to allow called script access its own public fx-s if needed\r\n        if (scriptAddress.delegatecall.gas(gasleft() - 23000)\r\n            (abi.encodeWithSignature(\"execute(address)\", scriptAddress))) {\r\n            script.state = ScriptState.Done;\r\n            result = true;\r\n        } else {\r\n            script.state = ScriptState.Failed;\r\n            result = false;\r\n        }\r\n        emit ScriptExecuted(scriptAddress, result);\r\n    }\r\n\r\n    function cancelScript(address scriptAddress) public {\r\n        require(msg.sender == address(this), \"only callable via MultiSig\");\r\n        Script storage script = scripts[scriptAddress];\r\n        require(script.state == ScriptState.Approved || script.state == ScriptState.New,\r\n                \"script state must be New or Approved\");\r\n\r\n        script.state = ScriptState.Cancelled;\r\n\r\n        emit ScriptCancelled(scriptAddress);\r\n    }\r\n\r\n    /* requires quorum so it's callable only via a script executed by this contract */\r\n    function addSigners(address[] signers) public {\r\n        require(msg.sender == address(this), \"only callable via MultiSig\");\r\n        for (uint i= 0; i < signers.length; i++) {\r\n            if (!isSigner[signers[i]]) {\r\n                require(signers[i] != address(0), \"new signer must not be 0x0\");\r\n                activeSignersCount++;\r\n                allSigners.push(signers[i]);\r\n                isSigner[signers[i]] = true;\r\n                emit SignerAdded(signers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* requires quorum so it's callable only via a script executed by this contract */\r\n    function removeSigners(address[] signers) public {\r\n        require(msg.sender == address(this), \"only callable via MultiSig\");\r\n        for (uint i= 0; i < signers.length; i++) {\r\n            if (isSigner[signers[i]]) {\r\n                require(activeSignersCount > 1, \"must not remove last signer\");\r\n                activeSignersCount--;\r\n                isSigner[signers[i]] = false;\r\n                emit SignerRemoved(signers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* implement it in derived contract */\r\n    function checkQuorum(uint signersCount) internal view returns(bool isQuorum);\r\n\r\n    function getAllSignersCount() view external returns (uint allSignersCount) {\r\n        return allSigners.length;\r\n    }\r\n\r\n    // UI helper fx - Returns signers from offset as [signer id (index in allSigners), address as uint, isActive 0 or 1]\r\n    function getSigners(uint offset, uint16 chunkSize)\r\n    external view returns(uint[3][]) {\r\n        uint limit = SafeMath.min(offset.add(chunkSize), allSigners.length);\r\n        uint[3][] memory response = new uint[3][](limit.sub(offset));\r\n        for (uint i = offset; i < limit; i++) {\r\n            address signerAddress = allSigners[i];\r\n            response[i - offset] = [i, uint(signerAddress), isSigner[signerAddress] ? 1 : 0];\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function getScriptsCount() view external returns (uint scriptsCount) {\r\n        return scriptAddresses.length;\r\n    }\r\n\r\n    // UI helper fx - Returns scripts from offset as\r\n    //  [scriptId (index in scriptAddresses[]), address as uint, state, signCount]\r\n    function getScripts(uint offset, uint16 chunkSize)\r\n    external view returns(uint[4][]) {\r\n        uint limit = SafeMath.min(offset.add(chunkSize), scriptAddresses.length);\r\n        uint[4][] memory response = new uint[4][](limit.sub(offset));\r\n        for (uint i = offset; i < limit; i++) {\r\n            address scriptAddress = scriptAddresses[i];\r\n            response[i - offset] = [i, uint(scriptAddress),\r\n                uint(scripts[scriptAddress].state), scripts[scriptAddress].signCount];\r\n        }\r\n        return response;\r\n    }\r\n}\r\n\r\n// File: contracts/StabilityBoardProxy.sol\r\n\r\n/* allows tx to execute if 50% +1 vote of active signers signed */\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract StabilityBoardProxy is MultiSig {\r\n\r\n    function checkQuorum(uint signersCount) internal view returns(bool isQuorum) {\r\n        isQuorum = signersCount > activeSignersCount / 2 ;\r\n    }\r\n}\r\n\r\n// File: contracts/SB_scripts/mainnet/Main0025_recreateLoanProducts.sol\r\n\r\n/* Recreate loan products on mainnet (fix for discountRate rounding error) */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract Main0025_recreateLoanProducts {\r\n\r\n    StabilityBoardProxy public constant STABILITY_BOARD_PROXY = StabilityBoardProxy(0xde36a8773531406dCBefFdfd3C7b89fCed7A9F84);\r\n    LoanManager public constant LOAN_MANAGER = LoanManager(0x1cABc34618ecf2949F0405A86353e7705E01C38b);\r\n\r\n    function execute(Main0025_recreateLoanProducts /* self, not used */) external {\r\n        // called via StabilityBoardProxy\r\n        require(address(this) == address(STABILITY_BOARD_PROXY), \"only execute via StabilityBoardProxy\");\r\n\r\n\r\n        /******************************************************************************\r\n         * Disable current loan products\r\n         ******************************************************************************/\r\n\r\n        LOAN_MANAGER.setLoanProductActiveState(1, false);\r\n        LOAN_MANAGER.setLoanProductActiveState(2, false);\r\n        LOAN_MANAGER.setLoanProductActiveState(3, false);\r\n        LOAN_MANAGER.setLoanProductActiveState(4, false);\r\n        LOAN_MANAGER.setLoanProductActiveState(5, false);\r\n\r\n\r\n        /******************************************************************************\r\n         * Add new loan products\r\n         ******************************************************************************/\r\n\r\n        // Formulas used for conversion:\r\n\r\n        // IRPA: Interest Rate Per Annum : the percentage value on the UI\r\n        // LPDR: Loan Product Discount Rate : uint32 discountRate constructor parameter\r\n\r\n        // IRPA = (1_000_000 / LPDR - 1) * (365 / termInDays)\r\n        // LPDR = 1_000_000 / (IRPA * termInDays / 365 + 1)\r\n\r\n        // discountRates:\r\n        // [180, 90, 30, 14, 7].map(termInDays => Math.ceil(1000000 / (0.049 * termInDays / 365 + 1)))\r\n        // [976406, 988063, 995989, 998125, 999062]\r\n\r\n        // addLoanProduct:\r\n        // term, discountRate, collateralRatio, minDisbursedAmount, defaultingFeePt, isActive\r\n\r\n        LOAN_MANAGER.addLoanProduct(180 days, 976406, 600000, 800, 100000, true); // 4.9% p.a.\r\n        LOAN_MANAGER.addLoanProduct(90 days, 988063, 600000, 800, 100000, true); // 4.9% p.a.\r\n        LOAN_MANAGER.addLoanProduct(30 days, 995989, 600000, 800, 100000, true); // 4.9% p.a.\r\n        LOAN_MANAGER.addLoanProduct(14 days, 998125, 600000, 800, 100000, true); // 4.9% p.a.\r\n        LOAN_MANAGER.addLoanProduct(7 days, 999062, 600000, 800, 100000, true); // 4.9% p.a.\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STABILITY_BOARD_PROXY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOAN_MANAGER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Main0025_recreateLoanProducts","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbf47740328a1f39c9ca4c2d87c4e0853559b2d90bd01b1f9e7a5182d449843a"}]}