{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath::mul: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath::div: Invalid divisor zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath::sub: Integer underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath::add: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath::mod: Invalid divisor zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Void\r\n * @dev Collects failed proposal fees.\r\n */\r\ncontract Void {}\r\n\r\n\r\n/**\r\n * @title Governance\r\n * @dev Plutocratic voting system.\r\n */\r\ncontract Governance {\r\n    using SafeMath for uint;\r\n\r\n    event Execute(uint indexed proposalId);\r\n    event Propose(uint indexed proposalId, address indexed proposer, address indexed target, bytes data);\r\n    event RemoveVote(uint indexed proposalId, address indexed voter);\r\n    event Terminate(uint indexed proposalId);\r\n    event Vote(uint indexed proposalId, address indexed voter, bool approve, uint weight);\r\n\r\n    enum Result { Pending, Yes, No }\r\n\r\n    struct Proposal {\r\n        Result result;\r\n        address target;\r\n        bytes data;\r\n        address proposer;\r\n        address feeRecipient;\r\n        uint fee;\r\n        uint startTime;\r\n        uint yesCount;\r\n        uint noCount;\r\n    }\r\n\r\n    uint public constant OPEN_VOTE_PERIOD = 2 days;\r\n    uint public constant VETO_PERIOD = 2 days;\r\n    uint public constant TOTAL_VOTE_PERIOD = OPEN_VOTE_PERIOD + VETO_PERIOD;\r\n\r\n    uint public proposalFee;\r\n    IERC20 public token;\r\n    Void public void;\r\n\r\n    Proposal[] public proposals;\r\n\r\n    // Proposal Id => Voter => Yes Votes\r\n    mapping(uint => mapping(address => uint)) public yesVotes;\r\n\r\n    // Proposal Id => Voter => No Votes\r\n    mapping(uint => mapping(address => uint)) public noVotes;\r\n\r\n    // Voter => Deposit\r\n    mapping (address => uint) public deposits;\r\n\r\n    // Voter => Withdraw timestamp\r\n    mapping (address => uint) public withdrawTimes;\r\n\r\n    constructor(IERC20 _token, uint _initialProposalFee) public {\r\n        token = _token;\r\n        proposalFee = _initialProposalFee;\r\n        void = new Void();\r\n    }\r\n\r\n    function deposit(uint amount) public {\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Governance::deposit: Transfer failed\");\r\n        deposits[msg.sender] = deposits[msg.sender].add(amount);\r\n    }\r\n\r\n    function withdraw(uint amount) public {\r\n        require(time() > withdrawTimes[msg.sender], \"Governance::withdraw: Voters with an active proposal cannot withdraw\");\r\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\r\n        require(token.transfer(msg.sender, amount), \"Governance::withdraw: Transfer failed\");\r\n    }\r\n\r\n    function propose(address target, bytes memory data) public returns (uint) {\r\n        return proposeWithFeeRecipient(msg.sender, target, data);\r\n    }\r\n\r\n    function proposeWithFeeRecipient(address feeRecipient, address target, bytes memory data) public returns (uint) {\r\n        require(msg.sender != address(this) && target != address(token), \"Governance::proposeWithFeeRecipient: Invalid proposal\");\r\n        require(token.transferFrom(msg.sender, address(this), proposalFee), \"Governance::proposeWithFeeRecipient: Transfer failed\");\r\n\r\n        uint proposalId = proposals.length;\r\n\r\n        // Create a new proposal and vote yes\r\n        Proposal memory proposal;\r\n        proposal.target = target;\r\n        proposal.data = data;\r\n        proposal.proposer = msg.sender;\r\n        proposal.feeRecipient = feeRecipient;\r\n        proposal.fee = proposalFee;\r\n        proposal.startTime = time();\r\n        proposal.yesCount = proposalFee;\r\n\r\n        proposals.push(proposal);\r\n\r\n        emit Propose(proposalId, msg.sender, target, data);\r\n\r\n        return proposalId;\r\n    }\r\n\r\n    function voteYes(uint proposalId) public {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(time() <= proposal.startTime.add(OPEN_VOTE_PERIOD), \"Governance::voteYes: Proposal is no longer accepting yes votes\");\r\n\r\n        uint proposalEndTime = proposal.startTime.add(TOTAL_VOTE_PERIOD);\r\n        if (proposalEndTime > withdrawTimes[msg.sender]) withdrawTimes[msg.sender] = proposalEndTime;\r\n\r\n        uint weight = deposits[msg.sender].sub(yesVotes[proposalId][msg.sender]);\r\n        proposal.yesCount = proposal.yesCount.add(weight);\r\n        yesVotes[proposalId][msg.sender] = deposits[msg.sender];\r\n\r\n        emit Vote(proposalId, msg.sender, true, weight);\r\n    }\r\n\r\n    function voteNo(uint proposalId) public {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.result == Result.Pending, \"Governance::voteNo: Proposal is already finalized\");\r\n\r\n        uint proposalEndTime = proposal.startTime.add(TOTAL_VOTE_PERIOD);\r\n        uint _time = time();\r\n        require(_time <= proposalEndTime, \"Governance::voteNo: Proposal is no longer in voting period\");\r\n\r\n        uint _deposit = deposits[msg.sender];\r\n        uint weight = _deposit.sub(noVotes[proposalId][msg.sender]);\r\n        proposal.noCount = proposal.noCount.add(weight);\r\n        noVotes[proposalId][msg.sender] = _deposit;\r\n\r\n        emit Vote(proposalId, msg.sender, false, weight);\r\n\r\n        // Finalize the vote and burn the proposal fee if no votes outnumber yes votes and open voting has ended\r\n        if (_time > proposal.startTime.add(OPEN_VOTE_PERIOD) && proposal.noCount >= proposal.yesCount) {\r\n            proposal.result = Result.No;\r\n            require(token.transfer(address(void), proposal.fee), \"Governance::voteNo: Transfer to void failed\");\r\n            emit Terminate(proposalId);\r\n        } else if (proposalEndTime > withdrawTimes[msg.sender]) {\r\n            withdrawTimes[msg.sender] = proposalEndTime;\r\n        }\r\n\r\n    }\r\n\r\n    function removeVote(uint proposalId) public {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.result == Result.Pending, \"Governance::removeVote: Proposal is already finalized\");\r\n        require(time() <= proposal.startTime.add(TOTAL_VOTE_PERIOD), \"Governance::removeVote: Proposal is no longer in voting period\");\r\n\r\n        proposal.yesCount = proposal.yesCount.sub(yesVotes[proposalId][msg.sender]);\r\n        proposal.noCount = proposal.noCount.sub(noVotes[proposalId][msg.sender]);\r\n        delete yesVotes[proposalId][msg.sender];\r\n        delete noVotes[proposalId][msg.sender];\r\n\r\n        emit RemoveVote(proposalId, msg.sender);\r\n    }\r\n\r\n    function finalize(uint proposalId) public {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.result == Result.Pending, \"Governance::finalize: Proposal is already finalized\");\r\n        uint _time = time();\r\n\r\n        if (proposal.yesCount > proposal.noCount) {\r\n            require(_time > proposal.startTime.add(TOTAL_VOTE_PERIOD), \"Governance::finalize: Proposal cannot be executed until end of veto period\");\r\n\r\n            proposal.result = Result.Yes;\r\n            require(token.transfer(proposal.feeRecipient, proposal.fee), \"Governance::finalize: Return proposal fee failed\");\r\n            proposal.target.call(proposal.data);\r\n\r\n            emit Execute(proposalId);\r\n        } else {\r\n            require(_time > proposal.startTime.add(OPEN_VOTE_PERIOD), \"Governance::finalize: Proposal cannot be terminated until end of yes vote period\");\r\n\r\n            proposal.result = Result.No;\r\n            require(token.transfer(address(void), proposal.fee), \"Governance::finalize: Transfer to void failed\");\r\n\r\n            emit Terminate(proposalId);\r\n        }\r\n    }\r\n\r\n    function setProposalFee(uint fee) public {\r\n        require(msg.sender == address(this), \"Governance::setProposalFee: Proposal fee can only be set via governance\");\r\n        proposalFee = fee;\r\n    }\r\n\r\n    function time() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getProposal(uint proposalId) external view returns (Proposal memory) {\r\n        return proposals[proposalId];\r\n    }\r\n\r\n    function getProposalsCount() external view returns (uint) {\r\n        return proposals.length;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title HumanityGovernance\r\n * @dev Plutocratic voting system that uses Humanity token for voting and proposal fees.\r\n */\r\ncontract HumanityGovernance is Governance {\r\n\r\n    constructor(IERC20 humanity, uint proposalFee) public\r\n        Governance(humanity, proposalFee) {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"yesCount\",\"type\":\"uint256\"},{\"name\":\"noCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"yesVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setProposalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"removeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_VOTE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteYes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_VOTE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposalsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"void\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"name\":\"result\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"yesCount\",\"type\":\"uint256\"},{\"name\":\"noCount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"noVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"proposeWithFeeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VETO_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"humanity\",\"type\":\"address\"},{\"name\":\"proposalFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Propose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"RemoveVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Terminate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approve\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"}]","ContractName":"HumanityGovernance","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bbd1706d16418bb136e1497a73d3af4164586da00000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://2921fb96e82eefe43b4c3bf172590e0934a04362637b290f9d25b85928794261"}]}