{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.1;\r\n\r\n/**\r\n * @dev Standard interface for a dex proxy contract.\r\n */\r\ninterface Proxy {\r\n\r\n  /**\r\n   * @dev Executes an action.\r\n   * @param _target Target of execution.\r\n   * @param _a Address usually represention from.\r\n   * @param _b Address usually representing to.\r\n   * @param _c Integer usually repersenting amount/value/id.\r\n   */\r\n  function execute(\r\n    address _target,\r\n    address _a,\r\n    address _b,\r\n    uint256 _c\r\n  )\r\n    external;\r\n    \r\n}\r\n\r\n/**\r\n * @title A standard interface for tokens.\r\n * @dev This interface uses the official ERC-20 specification from\r\n * https://eips.ethereum.org/EIPS/eip-20 with the additional requirement that\r\n * the functions specificed as optional have become required.\r\n */\r\ninterface ERC20\r\n{\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   * @return Token name.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string memory _name);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   * @return Token symbol.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string memory _symbol);\r\n\r\n  /**\r\n   * @dev Returns the number of decimals the token uses.\r\n   * @return Number of decimals.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals);\r\n\r\n  /**\r\n   * @dev Returns the total token supply.\r\n   * @return Total supply.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply);\r\n\r\n  /**\r\n   * @dev Returns the account balance of another account with address _owner.\r\n   * @param _owner The address from which the balance will be retrieved.\r\n   * @return Balance of _owner.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\r\n   * function SHOULD throw if the message caller's account balance does not have enough tokens to\r\n   * spend.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   * @return Success of operation.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\r\n   * Transfer event.\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   * @return Success of operation.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Allows _spender to withdraw from your account multiple times, up to\r\n   * the _value amount. If this function is called again it overwrites the current\r\n   * allowance with _value.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   * @return Success of operation.\r\n   */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @return Remaining allowance.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining);\r\n\r\n  /**\r\n   * @dev Triggers when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Triggers on any successful call to approve(address _spender, uint256 _value).\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n}\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error. This contract is based on the \r\n * source code at: \r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\r\n */\r\nlibrary SafeMath\r\n{\r\n\r\n  /**\r\n   * @dev Error constants.\r\n   */\r\n  string constant OVERFLOW = \"008001\";\r\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\r\n  string constant DIVISION_BY_ZERO = \"008003\";\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, reverts on overflow.\r\n   * @param _factor1 Factor number.\r\n   * @param _factor2 Factor number.\r\n   * @return The product of the two factors.\r\n   */\r\n  function mul(\r\n    uint256 _factor1,\r\n    uint256 _factor2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 product)\r\n  {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_factor1 == 0)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    product = _factor1 * _factor2;\r\n    require(product / _factor1 == _factor2, OVERFLOW);\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\r\n   * @param _dividend Dividend number.\r\n   * @param _divisor Divisor number.\r\n   * @return The quotient.\r\n   */\r\n  function div(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 quotient)\r\n  {\r\n    // Solidity automatically asserts when dividing by 0, using all gas.\r\n    require(_divisor > 0, DIVISION_BY_ZERO);\r\n    quotient = _dividend / _divisor;\r\n    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\r\n  }\r\n\r\n  /**\r\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   * @param _minuend Minuend number.\r\n   * @param _subtrahend Subtrahend number.\r\n   * @return Difference.\r\n   */\r\n  function sub(\r\n    uint256 _minuend,\r\n    uint256 _subtrahend\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 difference)\r\n  {\r\n    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\r\n    difference = _minuend - _subtrahend;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, reverts on overflow.\r\n   * @param _addend1 Number.\r\n   * @param _addend2 Number.\r\n   * @return Sum.\r\n   */\r\n  function add(\r\n    uint256 _addend1,\r\n    uint256 _addend2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 sum)\r\n  {\r\n    sum = _addend1 + _addend2;\r\n    require(sum >= _addend1, OVERFLOW);\r\n  }\r\n\r\n  /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\r\n    * dividing by zero.\r\n    * @param _dividend Number.\r\n    * @param _divisor Number.\r\n    * @return Remainder.\r\n    */\r\n  function mod(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 remainder) \r\n  {\r\n    require(_divisor != 0, DIVISION_BY_ZERO);\r\n    remainder = _dividend % _divisor;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contract for setting abilities.\r\n * @dev For optimization purposes the abilities are represented as a bitfield. Maximum number of\r\n * abilities is therefore 256. This is an example(for simplicity is made for max 8 abilities) of how\r\n * this works. \r\n * 00000001 Ability A - number representation 1\r\n * 00000010 Ability B - number representation 2\r\n * 00000100 Ability C - number representation 4\r\n * 00001000 Ability D - number representation 8\r\n * 00010000 Ability E - number representation 16\r\n * etc ... \r\n * To grant abilities B and C, we would need a bitfield of 00000110 which is represented by number\r\n * 6, in other words, the sum of abilities B and C. The same concept works for revoking abilities\r\n * and checking if someone has multiple abilities.\r\n */\r\ncontract Abilitable\r\n{\r\n  using SafeMath for uint;\r\n\r\n  /**\r\n   * @dev Error constants.\r\n   */\r\n  string constant NOT_AUTHORIZED = \"017001\";\r\n  string constant ONE_ZERO_ABILITY_HAS_TO_EXIST = \"017002\";\r\n  string constant INVALID_INPUT = \"017003\";\r\n\r\n  /**\r\n   * @dev Ability 1 is a reserved ability. It is an ability to grant or revoke abilities. \r\n   * There can be minimum of 1 address with ability 1.\r\n   * Other abilities are determined by implementing contract.\r\n   */\r\n  uint8 constant ABILITY_TO_MANAGE_ABILITIES = 1;\r\n\r\n  /**\r\n   * @dev Maps address to ability ids.\r\n   */\r\n  mapping(address => uint256) public addressToAbility;\r\n\r\n  /**\r\n   * @dev Count of zero ability addresses.\r\n   */\r\n  uint256 private zeroAbilityCount;\r\n\r\n  /**\r\n   * @dev Emits when an address is granted an ability.\r\n   * @param _target Address to which we are granting abilities.\r\n   * @param _abilities Number representing bitfield of abilities we are granting.\r\n   */\r\n  event GrantAbilities(\r\n    address indexed _target,\r\n    uint256 indexed _abilities\r\n  );\r\n\r\n  /**\r\n   * @dev Emits when an address gets an ability revoked.\r\n   * @param _target Address of which we are revoking an ability.\r\n   * @param _abilities Number representing bitfield of abilities we are revoking.\r\n   */\r\n  event RevokeAbilities(\r\n    address indexed _target,\r\n    uint256 indexed _abilities\r\n  );\r\n\r\n  /**\r\n   * @dev Guarantees that msg.sender has certain abilities.\r\n   */\r\n  modifier hasAbilities(\r\n    uint256 _abilities\r\n  ) \r\n  {\r\n    require(_abilities > 0, INVALID_INPUT);\r\n    require(\r\n      (addressToAbility[msg.sender] & _abilities) == _abilities,\r\n      NOT_AUTHORIZED\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * Sets ABILITY_TO_MANAGE_ABILITIES ability to the sender account.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    addressToAbility[msg.sender] = ABILITY_TO_MANAGE_ABILITIES;\r\n    zeroAbilityCount = 1;\r\n    emit GrantAbilities(msg.sender, ABILITY_TO_MANAGE_ABILITIES);\r\n  }\r\n\r\n  /**\r\n   * @dev Grants specific abilities to specified address.\r\n   * @param _target Address to grant abilities to.\r\n   * @param _abilities Number representing bitfield of abilities we are granting.\r\n   */\r\n  function grantAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_MANAGE_ABILITIES)\r\n  {\r\n    addressToAbility[_target] |= _abilities;\r\n\r\n    if((_abilities & ABILITY_TO_MANAGE_ABILITIES) == ABILITY_TO_MANAGE_ABILITIES)\r\n    {\r\n      zeroAbilityCount = zeroAbilityCount.add(1);\r\n    }\r\n    emit GrantAbilities(_target, _abilities);\r\n  }\r\n\r\n  /**\r\n   * @dev Unassigns specific abilities from specified address.\r\n   * @param _target Address of which we revoke abilites.\r\n   * @param _abilities Number representing bitfield of abilities we are revoking.\r\n   */\r\n  function revokeAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_MANAGE_ABILITIES)\r\n  {\r\n    addressToAbility[_target] &= ~_abilities;\r\n    if((_abilities & 1) == 1)\r\n    {\r\n      require(zeroAbilityCount > 1, ONE_ZERO_ABILITY_HAS_TO_EXIST);\r\n      zeroAbilityCount--;\r\n    }\r\n    emit RevokeAbilities(_target, _abilities);\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an address has a specific ability. Throws if checking for 0.\r\n   * @param _target Address for which we want to check if it has a specific abilities.\r\n   * @param _abilities Number representing bitfield of abilities we are checking.\r\n   */\r\n  function isAble(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_abilities > 0, INVALID_INPUT);\r\n    return (addressToAbility[_target] & _abilities) == _abilities;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via\r\n * decentralized governance.\r\n * @dev Based on:https://github.com/0xProject/contracts/blob/master/contracts/TokenTransferProxy.sol\r\n */\r\ncontract TokenTransferProxy is \r\n  Proxy,\r\n  Abilitable \r\n{\r\n\r\n  /**\r\n   * @dev List of abilities:\r\n   * 2 - Ability to execute transfer. \r\n   */\r\n  uint8 constant ABILITY_TO_EXECUTE = 2;\r\n\r\n  /**\r\n   * @dev Error constants.\r\n   */\r\n  string constant TRANSFER_FAILED = \"012001\";\r\n\r\n  /**\r\n   * @dev Calls into ERC20 Token contract, invoking transferFrom.\r\n   * @param _target Address of token to transfer.\r\n   * @param _a Address to transfer token from.\r\n   * @param _b Address to transfer token to.\r\n   * @param _c Amount of token to transfer.\r\n   */\r\n  function execute(\r\n    address _target,\r\n    address _a,\r\n    address _b,\r\n    uint256 _c\r\n  )\r\n    public\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    require(\r\n      ERC20(_target).transferFrom(_a, _b, _c),\r\n      TRANSFER_FAILED\r\n    );\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"grantAbilities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_b\",\"type\":\"address\"},{\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"isAble\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"revokeAbilities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"GrantAbilities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"RevokeAbilities\",\"type\":\"event\"}]","ContractName":"TokenTransferProxy","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59290f6aedf2c4fec74e51a835d9c8e41d6c5eb797cdae73d775cf53e44e1afa"}]}