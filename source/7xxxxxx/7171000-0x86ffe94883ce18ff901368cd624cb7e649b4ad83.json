{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n \r\n* @title SafeMath\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    \r\n\r\n/**\r\n    * Multiplies two numbers, throws on overflow.\r\n    \r\n*/\r\n    \r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        \r\nif (a == 0) {\r\n            \r\nreturn 0;\r\n        \r\n}\r\n        \r\nc = a * b;\r\n        \r\nassert(c / a == b);\r\n        \r\nreturn c;\r\n    \r\n}\r\n\r\n    \r\n/**\r\n    \r\n* Integer division of two numbers, truncating the quotient.\r\n    \r\n*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        \r\n// uint256 c = a / b;\r\n        \r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        \r\nreturn a / b;\r\n    \r\n}\r\n\r\n    \r\n/**\r\n    \r\n* Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    \r\n*/\r\n    \r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\nassert(b <= a);\r\n        \r\nreturn a - b;\r\n    \r\n}\r\n\r\n    \r\n/**\r\n    \r\n* Adds two numbers, throws on overflow.\r\n    \r\n*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n       \r\nc = a + b;\r\n        \r\nassert(c >= a);\r\n        \r\nreturn c;\r\n    \r\n}\r\n\r\n}\r\n\r\n\r\n\r\ncontract AltcoinToken {\r\n    \r\nfunction balanceOf(address _owner) constant public returns (uint256);\r\n    \r\nfunction transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n    \r\nuint256 public totalSupply;\r\n    \r\nfunction balanceOf(address who) public constant returns (uint256);\r\n    \r\nfunction transfer(address to, uint256 value) public returns (bool);\r\n    \r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    \r\nfunction allowance(address owner, address spender) public constant returns (uint256);\r\n    \r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    \r\nfunction approve(address spender, uint256 value) public returns (bool);\r\n    \r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract PavvyOnline is ERC20 {\r\n    \r\n    \r\nusing SafeMath for uint256;\r\n    \r\n//code\r\nconstructor() public {\r\n        \r\nowner = 0xa920aAa9717dA781f11Bb218F4618C4ff443c339;\r\n        \r\ncontractAddress = this;\r\n        \r\nbalances[0x6fd3ba3bdF5615D3F9493855FB8085A22A9798eC] = 2500000000000000;\r\n        \r\nemit Transfer(contractAddress, 0x6fd3ba3bdF5615D3F9493855FB8085A22A9798eC,2500000000000000 );\r\n        \r\nbalances[0xbE30288b9a37233fe44d92db8a8F83dc3e1d7b80] = 7500000000000000;\r\n        \r\nemit Transfer(contractAddress, 0xbE30288b9a37233fe44d92db8a8F83dc3e1d7b80,7500000000000000);\r\n        \r\nbalances[0xf594f037B8613a6AF10E5F5A8E9Dbec3dD2e8b0E] = 10000000000000000;\r\n        \r\nemit Transfer(contractAddress, 0xf594f037B8613a6AF10E5F5A8E9Dbec3dD2e8b0E, 10000000000000000);\r\n      \r\n}\r\n//akhircode\r\n\r\naddress owner = msg.sender;\r\naddress public contractAddress;\r\n    \r\n\r\nmapping (address => uint256) balances;\r\n    \r\nmapping (address => mapping (address => uint256)) allowed;    \r\n\r\n    \r\n\r\nstring public constant name = \"Pavvy Online\";\r\n    \r\nstring public constant symbol = \"PVY\";\r\n    \r\nuint public constant decimals = 8;\r\n    \r\n    \r\n\r\nuint256 public totalSupply = 50000000000000000;\r\n    \r\nuint256 public totalDistributed = 0;        \r\n    \r\nuint256 public tokensPerEth = 10000000000000;\r\n    \r\nuint256 public constant minContribution = 1 ether / 1000; // 0.001 Ether\r\n\r\n    \r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    \r\n\r\nevent Distr(address indexed to, uint256 amount);\r\n    \r\nevent DistrFinished();\r\n\r\n    \r\n\r\nevent Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n\r\n    \r\n\r\nevent TokensPerEthUpdated(uint _tokensPerEth);\r\n    \r\n    \r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\n    \r\nbool public distributionFinished = false;\r\n    \r\n    \r\nmodifier canDistr() {\r\n        \r\nrequire(!distributionFinished);\r\n       \r\n _;\r\n    }\r\n    \r\n    \r\nmodifier onlyOwner() {\r\n        \r\nrequire(msg.sender == owner);\r\n        \r\n_;\r\n    \r\n}\r\n    \r\n   \r\n    \r\n    \r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\n        \r\nif (newOwner != address(0)) {\r\n            \r\nowner = newOwner;\r\n        \r\n}\r\n    \r\n}\r\n    \r\n\r\n    \r\n\r\nfunction finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        \r\ndistributionFinished = true;\r\n        \r\nemit DistrFinished();\r\n        \r\nreturn true;\r\n    \r\n}\r\n    \r\n    \r\n\r\nfunction distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        \r\ntotalDistributed = totalDistributed.add(_amount);        \r\n        \r\nbalances[_to] = balances[_to].add(_amount);\r\n        \r\nemit Distr(_to, _amount);\r\n        \r\nemit Transfer(address(0), _to, _amount);\r\n\r\n       \r\nreturn true;\r\n    \r\n}\r\n\r\n    \r\n\r\nfunction doAirdrop(address _participant, uint _amount) internal {\r\n\r\n        \r\nrequire( _amount > 0 );      \r\n\r\n        \r\nrequire( totalDistributed < totalSupply );\r\n        \r\n        \r\nbalances[_participant] = balances[_participant].add(_amount);\r\n        \r\ntotalDistributed = totalDistributed.add(_amount);\r\n\r\n        \r\n\r\nif (totalDistributed >= totalSupply) {\r\n            \r\ndistributionFinished = true;\r\n        \r\n}\r\n\r\n        \r\n// log\r\n        \r\nemit Airdrop(_participant, _amount, balances[_participant]);\r\n        \r\nemit Transfer(address(0), _participant, _amount);\r\n    \r\n}\r\n\r\n    \r\nfunction adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \r\n        \r\ndoAirdrop(_participant, _amount);\r\n    \r\n}\r\n\r\n    \r\n\r\nfunction adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \r\n        \r\nfor (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\r\n    \r\n}\r\n\r\n    \r\n\r\nfunction updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \r\n        \r\ntokensPerEth = _tokensPerEth;\r\n        \r\nemit TokensPerEthUpdated(_tokensPerEth);\r\n    \r\n}\r\n           \r\n    \r\n\r\nfunction () external payable {\r\n        \r\ngetTokens();\r\n     \r\n}\r\n    \r\n    \r\n\r\nfunction getTokens() payable canDistr  public {\r\n        \r\nuint256 tokens = 0;\r\n\r\n        \r\nrequire( msg.value >= minContribution );\r\n\r\n        \r\nrequire( msg.value > 0 );\r\n        \r\n        \r\ntokens = tokensPerEth.mul(msg.value) / 1 ether;        \r\n        \r\naddress investor = msg.sender;\r\n        \r\n        \r\nif (tokens > 0) {\r\n      \r\nowner.transfer(msg.value);\r\n            \r\ndistr(investor, tokens);\r\n        \r\n}\r\n\r\n        \r\nif (totalDistributed >= totalSupply) {\r\n            \r\ndistributionFinished = true;\r\n        \r\n}\r\n    \r\n}\r\n\r\n    \r\n\r\nfunction balanceOf(address _owner) constant public returns (uint256) {\r\n        \r\nreturn balances[_owner];\r\n    \r\n}\r\n\r\n \r\n    \r\nmodifier onlyPayloadSize(uint size) {\r\n        \r\nassert(msg.data.length >= size + 4);\r\n        \r\n_;\r\n    \r\n}\r\n    \r\n    \r\n\r\nfunction transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        \r\nrequire(_to != address(0));\r\n        \r\nrequire(_amount <= balances[msg.sender]);\r\n        \r\n        \r\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        \r\nbalances[_to] = balances[_to].add(_amount);\r\n        \r\nemit Transfer(msg.sender, _to, _amount);\r\n        \r\nreturn true;\r\n    }\r\n    \r\n    \r\nfunction transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        \r\nrequire(_to != address(0));\r\n        \r\nrequire(_amount <= balances[_from]);\r\n        \r\nrequire(_amount <= allowed[_from][msg.sender]);\r\n        \r\n        \r\nbalances[_from] = balances[_from].sub(_amount);\r\n        \r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        \r\nbalances[_to] = balances[_to].add(_amount);\r\n        \r\nemit Transfer(_from, _to, _amount);\r\n        \r\nreturn true;\r\n    \r\n}\r\n    \r\n    \r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n// mitigates the ERC20 spend/approval race condition\r\n        \r\nif (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\nallowed[msg.sender][_spender] = _value;\r\n        \r\nemit Approval(msg.sender, _spender, _value);\r\n        \r\nreturn true;\r\n    }\r\n    \r\n    \r\nfunction allowance(address _owner, address _spender) constant public returns (uint256) {\r\n       \r\n return allowed[_owner][_spender];\r\n    \r\n}\r\n    \r\n    \r\nfunction getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\n        \r\nAltcoinToken t = AltcoinToken(tokenAddress);\r\n        \r\nuint bal = t.balanceOf(who);\r\n        \r\nreturn bal;\r\n    \r\n}\r\n    \r\n    \r\n\r\n    \r\n    \r\nfunction withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        \r\nAltcoinToken token = AltcoinToken(_tokenContract);\r\n        \r\nuint256 amount = token.balanceOf(address(this));\r\n        \r\nreturn token.transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawAltcoinTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"PavvyOnline","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://86e41b448652ca59afa8f3832cc7648456170b5251f95bf3c9749685ea9ae85f"}]}