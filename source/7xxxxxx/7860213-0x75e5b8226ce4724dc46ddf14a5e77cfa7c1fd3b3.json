{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n \r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n \r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n \r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n \r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n}\r\n \r\ncontract BurnableToken is StandardToken {\r\n \r\n  function burn(uint _value) public {\r\n    require(_value > 0);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n \r\n  event Burn(address indexed burner, uint indexed value);\r\n}\r\n \r\ncontract MimimimiCoinToken is BurnableToken {\r\n    \r\n  string public constant name = \"Mimimimi Coin Token\";\r\n   \r\n  string public constant symbol = \"MIMIMIMI\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n \r\n  uint256 public INITIAL_SUPPLY = 300000000 * 1 ether;\r\n \r\n  function MimimimiCoinToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n}\r\n \r\ncontract Crowdsale is Ownable {\r\n    \r\n  using SafeMath for uint;\r\n    \r\n  address multisig;\r\n \r\n  uint restrictedPercent;\r\n \r\n  address restricted;\r\n \r\n  MimimimiCoinToken public token = new MimimimiCoinToken();\r\n \r\n  uint start;\r\n    \r\n  uint period;\r\n \r\n  uint rate;\r\n \r\n  function Crowdsale() {\r\n    multisig = 0x3fAc6495118F82a1a20DA26DC90E4957e6730aeE;\r\n    restricted = 0x3fAc6495118F82a1a20DA26DC90E4957e6730aeE;\r\n    restrictedPercent = 10;\r\n    rate = 100000000000000000000;\r\n    start = 1559347200;\r\n    period = 365;\r\n  }\r\n \r\n  modifier saleIsOn() {\r\n    require(now > start && now < start + period * 1 days);\r\n    _;\r\n  }\r\n \r\n  function createTokens() saleIsOn payable {\r\n    multisig.transfer(msg.value);\r\n    uint tokens = rate.mul(msg.value).div(1 ether);\r\n    uint bonusTokens = 0;\r\n    if(now < start + (period * 1 days).div(4)) {\r\n      bonusTokens = tokens.div(4);\r\n    } else if(now >= start + (period * 1 days).div(4) && now < start + (period * 1 days).div(4).mul(2)) {\r\n      bonusTokens = tokens.div(10);\r\n    } else if(now >= start + (period * 1 days).div(4).mul(2) && now < start + (period * 1 days).div(4).mul(3)) {\r\n      bonusTokens = tokens.div(20);\r\n    }\r\n    uint tokensWithBonus = tokens.add(bonusTokens);\r\n    token.transfer(msg.sender, tokensWithBonus);\r\n    uint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\r\n    token.transfer(restricted, restrictedTokens);\r\n  }\r\n \r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1c9e3343a9243318216e004fe370a042211ebc3f0b3d24ae9e3bac0a55c74b4"}]}