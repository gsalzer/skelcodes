{"status":"1","message":"OK","result":[{"SourceCode":"// @dev ERC20 compliance requires syntax of solidity 0.4.17 or above (previous token contract is at ^0.4.8). \r\npragma solidity 0.4.24;\r\n\r\n// @dev unchanged\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function changeOwner(address _addr) onlyOwner {\r\n        if (_addr == 0x0) throw;\r\n        owner = _addr;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n}\r\n\r\n// @dev unchanged\r\ncontract Mutex is Owned {\r\n    bool locked = false;\r\n    modifier mutexed {\r\n        if (locked) throw;\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function unMutex() onlyOwner {\r\n        locked = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @author OpenZeppelin\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Token is Owned, Mutex {\r\n    // @dev using OpenZeppelin's SafeMath library\r\n    using SafeMath for uint256;\r\n\r\n    Ledger public ledger;\r\n\r\n    uint256 public lockedSupply = 0;\r\n\r\n    string public name;\r\n    uint8 public decimals; \r\n    string public symbol;\r\n\r\n    string public version = '0.2'; \r\n    bool public transfersOn = true;\r\n\r\n    // @notice Constructs a Token\r\n    // @dev changed to comply with 0.4.17 and above syntax,\r\n    // but later versions could use 'constructor(...)' syntax\r\n    // @param _owner Intended owner of the Token contract\r\n    // @param _tokenName Intended name of the Token\r\n    // @param _decimals Intended precision of the Token\r\n    // @param _symbol Intended symbol of the Token\r\n    // @param _ledger Intended address of the Ledger\r\n    constructor(address _owner, string _tokenName, uint8 _decimals,\r\n                string _symbol, address _ledger) public {\r\n        require(_owner != address(0), \"address cannot be null\");\r\n        owner = _owner;\r\n\r\n        name = _tokenName;\r\n        decimals = _decimals;\r\n        symbol = _symbol;\r\n\r\n        ledger = Ledger(_ledger);\r\n    }\r\n\r\n    /*\r\n    *   Bookkeeping and Admin Functions\r\n    */\r\n\r\n    // @notice Event emitted when the Ledger is updated\r\n    // @param _from Address that updates the Ledger\r\n    // @param _ledger Address of the Ledger\r\n    event LedgerUpdated(address _from, address _ledger);\r\n\r\n\r\n\r\n    // @notice Allow the owner to change the address of the Ledger\r\n    // @param _addr Intended new address of the Ledger\r\n    function changeLedger(address _addr) onlyOwner public {\r\n        require(_addr != address(0), \"address cannot be null\");\r\n        ledger = Ledger(_addr);\r\n    \r\n        emit LedgerUpdated(msg.sender, _addr);\r\n    }\r\n\r\n    /*\r\n    * Locking is a feature that turns a user's balances into\r\n    * un-issued tokens, taking them out of an account and reducing the supply.\r\n    * Diluting is so named to remind the caller that they are changing the money supply.\r\n    */\r\n\r\n    // @notice Allows owner to lock the balance of an address,\r\n    // reducing the total circulating supply by the balance of that address\r\n    // and increasing the locked supply of Tokens\r\n    // @param _seizeAddr Intended address whose account balance is to be frozen\r\n    function lock(address _seizeAddr) onlyOwner mutexed public {\r\n        require(_seizeAddr != address(0), \"address cannot be null\");\r\n\r\n        uint256 myBalance = ledger.balanceOf(_seizeAddr);\r\n        lockedSupply = lockedSupply.add(myBalance);\r\n        ledger.setBalance(_seizeAddr, 0);\r\n    }\r\n\r\n    // @notice Event that marks a \"dilution\" to a target address and the amount\r\n    // @param _destAddr Intended address of the Token \"dilution\"\r\n    // @param _amount Intended amount to be given to _destAddr\r\n    event Dilution(address _destAddr, uint256 _amount);\r\n\r\n    // @notice Allows the owner to unlock some of the locked supply\r\n    // and give it to another address, increasing the circulating Token supply\r\n    // (not exactly a true dilution of the current Token supply)\r\n    // @param _destAddr Intended address of the recipient of the unlocked amount\r\n    // @param amount Intended amount to be given to _destAddr\r\n    function dilute(address _destAddr, uint256 amount) onlyOwner public {\r\n        require(amount <= lockedSupply, \"amount greater than lockedSupply\");\r\n\r\n        lockedSupply = lockedSupply.sub(amount);\r\n\r\n        uint256 curBalance = ledger.balanceOf(_destAddr);\r\n        curBalance = curBalance.add(amount);\r\n        ledger.setBalance(_destAddr, curBalance);\r\n\r\n        emit Dilution(_destAddr, amount);\r\n    }\r\n\r\n    // @notice Allow the owner to pause arbitrary transfers of Tokens\r\n    function pauseTransfers() onlyOwner public {\r\n        transfersOn = false;\r\n    }\r\n\r\n    // @notice Allow the owner to resume arbitrary transfers of Tokens\r\n    function resumeTransfers() onlyOwner public {\r\n        transfersOn = true;\r\n    }\r\n\r\n    /*\r\n    * Burning -- We allow any user to burn tokens.\r\n    *\r\n     */\r\n\r\n    // @notice Allows any arbitrary user to burn their Tokens\r\n    // @param _amount Number of Tokens a user wants to burn\r\n    function burn(uint256 _amount) public {\r\n        uint256 balance = ledger.balanceOf(msg.sender);\r\n        require(_amount <= balance, \"not enough balance\");\r\n        ledger.setBalance(msg.sender, balance.sub(_amount));\r\n        emit Transfer(msg.sender, 0, _amount);\r\n    }\r\n\r\n    /*\r\n    Entry\r\n    */\r\n\r\n    // @notice Event for transfer of Tokens\r\n    // @param _from Address from which the Tokens were transferred\r\n    // @param _to Address to which the Tokens were transferred\r\n    // @param _value Amount of Tokens transferred\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    // @notice Event for approval of Tokens for some other user\r\n    // @param _owner Owner of the Tokens\r\n    // @param _spender Address that the owner approved for spending Tokens\r\n    // @param _value Amount of Tokens allocated for spending\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // @notice Function to view the total circulating supply of Token\r\n    // @dev Needs to interact with Ledger\r\n    function totalSupply() public view returns(uint256) {\r\n        return ledger.totalSupply();\r\n    }\r\n\r\n    // @notice Transfers Tokens to another user\r\n    // @dev Needs to interact with Ledger\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(transfersOn || msg.sender == owner, \"transferring disabled\");\r\n        require(ledger.tokenTransfer(msg.sender, _to, _value), \"transfer failed\");\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice Transfers Tokens from one user to another via an approved third party\r\n    // @dev Needs to interact with Ledger\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(transfersOn || msg.sender == owner, \"transferring disabled\");\r\n        require(ledger.tokenTransferFrom(msg.sender, _from, _to, _value), \"transferFrom failed\");\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        uint256 allowed = allowance(_from, msg.sender);\r\n        emit Approval(_from, msg.sender, allowed);\r\n        return true;\r\n    }\r\n\r\n    // @notice Views the allowance of a third party given by an owner of Tokens\r\n    // @dev Needs to interact with Ledger\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return ledger.allowance(_owner, _spender); \r\n    }\r\n\r\n    // @notice Allows a user to approve another user to spend an amount of Tokens on their behalf\r\n    // @dev Needs to interact with Ledger\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(ledger.tokenApprove(msg.sender, _spender, _value), \"approve failed\");\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice Views the Token balance of a user\r\n    // @dev Needs to interact with Ledger\r\n    function balanceOf(address _addr) public view returns(uint256) {\r\n        return ledger.balanceOf(_addr);\r\n    }\r\n}\r\n\r\ncontract Ledger is Owned {\r\n    mapping (address => uint) balances;\r\n    mapping (address => uint) usedToday;\r\n\r\n    mapping (address => bool) seenHere;\r\n    address[] public seenHereA;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    address token;\r\n    uint public totalSupply = 0;\r\n\r\n    function Ledger(address _owner, uint _preMined, uint ONE) {\r\n        if (_owner == 0x0) throw;\r\n        owner = _owner;\r\n\r\n        seenHere[_owner] = true;\r\n        seenHereA.push(_owner);\r\n\r\n        totalSupply = _preMined *ONE;\r\n        balances[_owner] = totalSupply;\r\n    }\r\n\r\n    modifier onlyToken {\r\n        if (msg.sender != token) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenOrOwner {\r\n        if (msg.sender != token && msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    function tokenTransfer(address _from, address _to, uint amount) onlyToken returns(bool) {\r\n        if (amount > balances[_from]) return false;\r\n        if ((balances[_to] + amount) < balances[_to]) return false;\r\n        if (amount == 0) { return false; }\r\n\r\n        balances[_from] -= amount;\r\n        balances[_to] += amount;\r\n\r\n        if (seenHere[_to] == false) {\r\n            seenHereA.push(_to);\r\n            seenHere[_to] = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function tokenTransferFrom(address _sender, address _from, address _to, uint amount) onlyToken returns(bool) {\r\n        if (allowed[_from][_sender] <= amount) return false;\r\n        if (amount > balanceOf(_from)) return false;\r\n        if (amount == 0) return false;\r\n\r\n        if ((balances[_to] + amount) < amount) return false;\r\n\r\n        balances[_from] -= amount;\r\n        balances[_to] += amount;\r\n        allowed[_from][_sender] -= amount;\r\n\r\n        if (seenHere[_to] == false) {\r\n            seenHereA.push(_to);\r\n            seenHere[_to] = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeUsed(address _addr, int amount) onlyToken {\r\n        int myToday = int(usedToday[_addr]) + amount;\r\n        usedToday[_addr] = uint(myToday);\r\n    }\r\n\r\n    function resetUsedToday(uint8 startI, uint8 numTimes) onlyTokenOrOwner returns(uint8) {\r\n        uint8 numDeleted;\r\n        for (uint i = 0; i < numTimes && i + startI < seenHereA.length; i++) {\r\n            if (usedToday[seenHereA[i+startI]] != 0) { \r\n                delete usedToday[seenHereA[i+startI]];\r\n                numDeleted++;\r\n            }\r\n        }\r\n        return numDeleted;\r\n    }\r\n\r\n    function balanceOf(address _addr) constant returns (uint) {\r\n        // don't forget to subtract usedToday\r\n        if (usedToday[_addr] >= balances[_addr]) { return 0;}\r\n        return balances[_addr] - usedToday[_addr];\r\n    }\r\n\r\n    event Approval(address, address, uint);\r\n\r\n    function tokenApprove(address _from, address _spender, uint256 _value) onlyToken returns (bool) {\r\n        allowed[_from][_spender] = _value;\r\n        Approval(_from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function changeToken(address _token) onlyOwner {\r\n        token = Token(_token);\r\n    }\r\n\r\n    function reduceTotalSupply(uint amount) onlyToken {\r\n        if (amount > totalSupply) throw;\r\n\r\n        totalSupply -= amount;\r\n    }\r\n\r\n    function setBalance(address _addr, uint amount) onlyTokenOrOwner {\r\n        if (balances[_addr] == amount) { return; }\r\n        if (balances[_addr] < amount) {\r\n            // increasing totalSupply\r\n            uint increase = amount - balances[_addr];\r\n            totalSupply += increase;\r\n        } else {\r\n            // decreasing totalSupply\r\n            uint decrease = balances[_addr] - amount;\r\n            //TODO: safeSub\r\n            totalSupply -= decrease;\r\n        }\r\n        balances[_addr] = amount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unMutex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeLedger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dilute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seizeAddr\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_ledger\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ledger\",\"type\":\"address\"}],\"name\":\"LedgerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Dilution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fbb1b73c4f0bda4f67dca266ce6ef42f520fbb9800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000ee57d52408be2fe49999fe09a16dc0a9e0545aeb00000000000000000000000000000000000000000000000000000000000000044d4f52450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d4f524500000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://224657f034aab6de05af61c1ab9e466b490e5e0617689b9fdb67cd21f02f7d82"}]}