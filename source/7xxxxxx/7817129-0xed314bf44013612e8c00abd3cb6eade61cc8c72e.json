{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract IERC223Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _holder) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\r\n}\r\ncontract IERC223Receiver {\r\n  \r\n   /**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool);\r\n}\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public pure returns (address) {}\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\ncontract ICalled is IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function callers(address) public pure returns (bool) { }\r\n\r\n    function appendCaller(address _caller) public;  // ownerOnly\r\n    function removeCaller(address _caller) public;  // ownerOnly\r\n    \r\n    event AppendCaller(ICaller _caller);\r\n    event RemoveCaller(ICaller _caller);\r\n}\r\n\r\ncontract ICaller{\r\n\tfunction calledUpdate(address _oldCalled, address _newCalled) public;  // ownerOnly\r\n\t\r\n\tevent CalledUpdate(address _oldCalled, address _newCalled);\r\n}\r\ncontract IERC20Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _holder) public view returns (uint256);\r\n    function allowance(address _from, address _spender) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _holder, address indexed _spender, uint256 _value);\r\n}\r\ncontract IDummyToken is IERC20Token, IERC223Token, IERC223Receiver, ICaller, IOwned{\r\n    // these function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function operator() public pure returns(ITokenOperator) {}\r\n    //ITokenOperator public operator;\r\n}\r\ncontract ISmartToken{\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n\t//function() public payable;\r\n}\r\ncontract ITokenOperator is ISmartToken, ICalled, ICaller {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function dummy() public pure returns (IDummyToken) {}\r\n    \r\n\tfunction emitEventTransfer(address _from, address _to, uint256 _amount) public;\r\n\r\n    function updateChanges(address) public;\r\n    function updateChangesByBrother(address, uint256, uint256) public;\r\n    \r\n    function token_name() public view returns (string);\r\n    function token_symbol() public view returns (string);\r\n    function token_decimals() public view returns (uint8);\r\n    \r\n    function token_totalSupply() public view returns (uint256);\r\n    function token_balanceOf(address _owner) public view returns (uint256);\r\n    function token_allowance(address _from, address _spender) public view returns (uint256);\r\n\r\n    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);\r\n    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\r\n    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);\r\n    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    function fallback(address _from, bytes _data) public payable;                      \t\t// eth input\r\n    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233\r\n}\r\n\r\ncontract IsContract {\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) internal view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n              //retrieve the size of the code on target address, this needs assembly\r\n              length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n   contract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n}\r\ncontract DummyToken is IDummyToken, Owned, IsContract {\r\n    ITokenOperator public operator = ITokenOperator(msg.sender);\r\n    \r\n    function calledUpdate(address _oldCalled, address _newCalled) public ownerOnly {\r\n        if(operator == _oldCalled) {\r\n            operator = ITokenOperator(_newCalled);\r\n        \temit CalledUpdate(_oldCalled, _newCalled);\r\n\t\t}\r\n    }\r\n    \r\n    function name() public view returns (string){\r\n        return operator.token_name();\r\n    }\r\n    function symbol() public view returns (string){\r\n        return operator.token_symbol();\r\n    }\r\n    function decimals() public view returns (uint8){\r\n        return operator.token_decimals();\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256){\r\n        return operator.token_totalSupply();\r\n    }\r\n    function balanceOf(address addr)public view returns(uint256){\r\n        return operator.token_balanceOf(addr);\r\n    }\r\n    function allowance(address _from, address _spender) public view returns (uint256){\r\n        return operator.token_allowance(_from, _spender);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        success = operator.token_transfer(msg.sender, _to, _value);\r\n        bytes memory emptyBytes;\r\n        internalTokenFallback(msg.sender, _to, _value, emptyBytes);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success){\r\n        success = operator.token_transfer(msg.sender, _to, _value, _data);\r\n        internalTokenFallback(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success){\r\n        success = operator.token_transfer(msg.sender, _to, _value, _data, _custom_fallback);\r\n        internalTokenFallback(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        success = operator.token_transferFrom(msg.sender, _from, _to, _value);\r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        bytes memory emptyBytes;\r\n\t\tif(msg.sender == address(operator) && _from == address(this))\t\t\t\t// for issue\r\n\t\t\tinternalTokenFallback(_from, _to, _value, emptyBytes);\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        success = operator.token_approve(msg.sender, _spender, _value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n    \r\n    function() public payable {\r\n        operator.fallback.value(msg.value)(msg.sender, msg.data);\r\n\t}\r\n\t\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool){\r\n        return operator.token_fallback(msg.sender, _from, _value, _data);\r\n    }\r\n\r\n    function internalTokenFallback(address _from, address _to, uint256 _value, bytes _data)internal{\r\n        if(isContract(_to)){\r\n           require(IERC223Receiver(_to).tokenFallback(_from, _value, _data));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldCalled\",\"type\":\"address\"},{\"name\":\"_newCalled\",\"type\":\"address\"}],\"name\":\"calledUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldCalled\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newCalled\",\"type\":\"address\"}],\"name\":\"CalledUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DummyToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1cfcf87b9e3d053dec660b3ac4d7c510cdacf991dd2214385e77b3dca824c694"}]}