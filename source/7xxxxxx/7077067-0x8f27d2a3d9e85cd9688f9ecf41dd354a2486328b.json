{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract DerivedAddressCalc {\r\n    \r\n    function derivedAddress(address _origin, uint256 _nonce) public pure returns (string memory) {\r\n        bytes memory packed;\r\n        \r\n        if (_nonce == 0x00) {\r\n            packed = abi.encodePacked(byte(0xd6), byte(0x94), _origin, byte(0x80));\r\n        } else if (_nonce <= 0x7f) {\r\n            packed = abi.encodePacked(byte(0xd6), byte(0x94), _origin, uint8(_nonce));\r\n        } else if (_nonce <= 0xff) {\r\n            packed = abi.encodePacked(byte(0xd7), byte(0x94), _origin, byte(0x81), uint8(_nonce));\r\n        } else if (_nonce <= 0xffff) {\r\n            packed = abi.encodePacked(byte(0xd8), byte(0x94), _origin, byte(0x82), uint16(_nonce));\r\n        } else if (_nonce <= 0xffffff) {\r\n            packed = abi.encodePacked(byte(0xd9), byte(0x94), _origin, byte(0x83), uint24(_nonce));\r\n        } else {\r\n            packed = abi.encodePacked(byte(0xda), byte(0x94), _origin, byte(0x84), uint32(_nonce));\r\n        }\r\n        \r\n        bytes32 addressBytes32 = keccak256(packed);\r\n        return addressBytes32ToString(addressBytes32);\r\n    }\r\n\r\n    function addressBytes32ToString(bytes32 _value) private pure returns (string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory resultBytes = new bytes(42);\r\n\r\n        resultBytes[0] = '0';\r\n        resultBytes[1] = 'x';\r\n        \r\n        for (uint256 i = 0; i < 20; i++) {\r\n            resultBytes[i * 2 + 2] = alphabet[uint8(_value[i + 12] >> 4)];\r\n            resultBytes[i * 2 + 3] = alphabet[uint8(_value[i + 12] & 0x0f)];\r\n        }\r\n        \r\n        return string(resultBytes);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_origin\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"derivedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"DerivedAddressCalc","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a0eb1394b9e9dd1d68af2a7759bb3b063bc5ae13a646080c964cb993f955b49"}]}