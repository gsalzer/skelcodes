{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum {\r\n    // read\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n\r\n    // write\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) public;\r\n    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) public returns(uint);\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) public;\r\n    \r\n}\r\n\r\ninterface EtheremonMonsterNFTInterface {\r\n   function triggerTransferEvent(address _from, address _to, uint _tokenId) external;\r\n}\r\n\r\ncontract EtheremonAdventureHandler is BasicAccessControl, EtheremonEnum {\r\n    uint8 constant public STAT_MAX_VALUE = 32;\r\n    uint8 constant public LEVEL_MAX_VALUE = 254;\r\n    \r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    // address\r\n    address public dataContract;\r\n    address public monsterNFT;\r\n    \r\n    mapping(uint8 => uint32) public levelExps;\r\n    uint public levelItemClass = 200;\r\n    uint public expItemClass = 201;\r\n    uint public rebornItemClass = 500;\r\n    uint[] public rebornMonsterIds = [25252, 25264, 25267, 25372, 25256, 25259, 25367, 25433];\r\n    \r\n    function setContract(address _dataContract, address _monsterNFT) onlyModerators public {\r\n        dataContract = _dataContract;\r\n        monsterNFT = _monsterNFT;\r\n    }\r\n    \r\n    function setConfig(uint _levelItemClass, uint _expItemClass, uint _rebornItemClass) onlyModerators public {\r\n        levelItemClass = _levelItemClass;\r\n        expItemClass = _expItemClass;\r\n        rebornItemClass = _rebornItemClass;\r\n    }\r\n    \r\n    function genLevelExp() onlyModerators external {\r\n        uint8 level = 1;\r\n        uint32 requirement = 100;\r\n        uint32 sum = requirement;\r\n        while(level <= 100) {\r\n            levelExps[level] = sum;\r\n            level += 1;\r\n            requirement = (requirement * 11) / 10 + 5;\r\n            sum += requirement;\r\n        }\r\n    }\r\n    \r\n    function handleSingleItem(address _sender, uint _classId, uint _value, uint _target, uint _param) onlyModerators public {\r\n        // check ownership of _target\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        if (_classId == rebornItemClass) {\r\n            if (rebornMonsterIds.length == 0) revert();\r\n            _param = getRandom(_sender, block.number-1) % rebornMonsterIds.length;\r\n            _target = rebornMonsterIds[_param];\r\n            \r\n            // remove monsterId\r\n            rebornMonsterIds[_param] = rebornMonsterIds[rebornMonsterIds.length-1];\r\n            delete rebornMonsterIds[rebornMonsterIds.length-1];\r\n            rebornMonsterIds.length--;\r\n\r\n            // get old exp \r\n            (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_target));\r\n            data.decreaseMonsterExp(obj.monsterId, uint32(obj.exp) - 1);\r\n\r\n            // transfer target to sender \r\n            data.addMonsterIdMapping(_sender, uint64(_target));\r\n            EtheremonMonsterNFTInterface(monsterNFT).triggerTransferEvent(address(0), _sender, uint64(_target));\r\n\r\n            return;\r\n        } else {\r\n            (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_target));\r\n            if (obj.monsterId != _target || obj.trainer != _sender) revert();\r\n        }  \r\n        \r\n        if (_classId == expItemClass) {\r\n            // exp item\r\n            data.increaseMonsterExp(obj.monsterId, uint32(_value));\r\n        } else if (_classId == levelItemClass) {\r\n            // level item\r\n            uint8 currentLevel = getLevel(obj.exp);\r\n            currentLevel += uint8(_value);\r\n            if (levelExps[currentLevel-1] < obj.exp || currentLevel > LEVEL_MAX_VALUE)\r\n                revert();\r\n            data.increaseMonsterExp(obj.monsterId, levelExps[currentLevel-1] - obj.exp);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function handleMultipleItems(address _sender, uint _classId1, uint _classId2, uint _classId3, uint _target, uint _param) onlyModerators public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_target));\r\n        if (obj.monsterId != _target || obj.trainer != _sender) revert();\r\n        \r\n        \r\n        uint index = 0;\r\n        if (_classId1 == 300 && _classId2 == 301 && _classId3 == 302) {\r\n            //health shards\r\n            index = 0;\r\n        } else if (_classId1 == 310 && _classId2 == 311 && _classId3 == 312) {\r\n            // primary attack shards\r\n            index = 1;\r\n        } else if (_classId1 == 320 && _classId2 == 321 && _classId3 == 322) {\r\n            // primary defense shards\r\n            index = 2;\r\n        } else if (_classId1 == 330 && _classId2 == 331 && _classId3 == 332) {\r\n            // secondary attack shards\r\n            index = 3;\r\n        } else if (_classId1 == 340 && _classId2 == 341 && _classId3 == 342) {\r\n            // secondary defense shards\r\n            index = 4;\r\n        } else if (_classId1 == 350 && _classId2 == 351 && _classId3 == 352) {\r\n            // speed shards\r\n            index = 5;\r\n        }\r\n        \r\n        uint8 currentValue = data.getElementInArrayType(ArrayType.STAT_BASE, obj.monsterId, index);\r\n        if (currentValue + 1 >= LEVEL_MAX_VALUE)\r\n            revert();\r\n        data.updateIndexOfArrayType(ArrayType.STAT_BASE, obj.monsterId, index, currentValue + 1);\r\n    }\r\n    \r\n    // public method\r\n    function getRandom(address _player, uint _block) view public returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(blockhash(_block), _player)));\r\n    }\r\n    \r\n    function getLevel(uint32 exp) view public returns (uint8) {\r\n        uint8 minIndex = 1;\r\n        uint8 maxIndex = 100;\r\n        uint8 currentIndex;\r\n     \r\n        while (minIndex < maxIndex) {\r\n            currentIndex = (minIndex + maxIndex) / 2;\r\n            if (exp < levelExps[currentIndex])\r\n                maxIndex = currentIndex;\r\n            else\r\n                minIndex = currentIndex + 1;\r\n        }\r\n\r\n        return minIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"expItemClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_levelItemClass\",\"type\":\"uint256\"},{\"name\":\"_expItemClass\",\"type\":\"uint256\"},{\"name\":\"_rebornItemClass\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_classId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_param\",\"type\":\"uint256\"}],\"name\":\"handleSingleItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebornItemClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_monsterNFT\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LEVEL_MAX_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genLevelExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_classId1\",\"type\":\"uint256\"},{\"name\":\"_classId2\",\"type\":\"uint256\"},{\"name\":\"_classId3\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_param\",\"type\":\"uint256\"}],\"name\":\"handleMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebornMonsterIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelExps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_MAX_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelItemClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtheremonAdventureHandler","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f7c9f5441d6de55b5cc0d26c11d576c18a0520b16b0a530b4950272a163e209"}]}