{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Blockchain-based strategy game\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ninterface CryptoMiningWarInterface {\r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\r\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\r\n    function isMiningWarContract() external pure returns(bool);\r\n}\r\ninterface CryptoEngineerInterface {\r\n    function addVirus(address /*_addr*/, uint256 /*_value*/) external pure;\r\n    function subVirus(address /*_addr*/, uint256 /*_value*/) external pure;\r\n\r\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/);\r\n    function isEngineerContract() external pure returns(bool);\r\n    function calCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/);\r\n    function calCurrentCrystals(address /*_addr*/) external pure returns(uint256 /*_currentCrystals*/);\r\n}\r\ninterface CryptoProgramFactoryInterface {\r\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\r\n    function isProgramFactoryContract() external pure returns(bool);\r\n\r\n    function subPrograms(address /*_addr*/, uint256[] /*_programs*/) external;\r\n    function getData(address _addr) external pure returns(uint256 /*_factoryLevel*/, uint256 /*_factoryTime*/, uint256[] /*memory _programs*/);\r\n    function getProgramsValue() external pure returns(uint256[]);\r\n}\r\ninterface MiniGameInterface {\r\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\r\n    function fallback() external payable;\r\n}\r\ncontract CrryptoArena {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public administrator;\r\n\r\n    uint256 public VIRUS_NORMAL = 0;\r\n    uint256 public HALF_TIME_ATK= 60 * 15;  \r\n    uint256 public CRTSTAL_MINING_PERIOD = 86400;\r\n    uint256 public VIRUS_MINING_PERIOD   = 86400;\r\n    address public engineerAddress;\r\n\r\n    CryptoMiningWarInterface      public MiningWar;\r\n    CryptoEngineerInterface       public Engineer;\r\n    CryptoProgramFactoryInterface public Factory;\r\n\r\n    // factory info\r\n    // player info\r\n    mapping(address => Player) public players;\r\n\r\n    mapping(uint256 => Virus)  public viruses;\r\n     // minigame info\r\n    mapping(address => bool)   public miniGames; \r\n   \r\n    struct Player {\r\n        uint256 virusDef;\r\n        uint256 nextTimeAtk;\r\n        uint256 endTimeUnequalledDef;\r\n    }\r\n    struct Virus {\r\n        uint256 atk;\r\n        uint256 def;\r\n    }\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    modifier onlyContractsMiniGame() \r\n    {\r\n        require(miniGames[msg.sender] == true);\r\n        _;\r\n    }\r\n    event Attack(address atkAddress, address defAddress, bool victory, uint256 reward, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round); // 1 : crystals, 2: hashrate, 3: virus\r\n    event Programs(uint256 programLv1, uint256 programLv2, uint256 programLv3, uint256 programLv4);\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface contract\r\n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\r\n        setEngineerInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\r\n        setFactoryInterface(0x0498e54b6598e96b7a42ade3d238378dc57b5bb2);\r\n\r\n         // setting virusupd\r\n        viruses[VIRUS_NORMAL] = Virus(1,1);\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n    function isArenaContract() public pure returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\r\n    {\r\n\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // SETTING CONTRACT MINI GAME \r\n    //--------------------------------------------------------------------------\r\n    function setContractsMiniGame( address _addr ) public isAdministrator \r\n    {\r\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\r\n        if( MiniGame.isContractMiniGame() == false ) revert(); \r\n\r\n        miniGames[_addr] = true;\r\n    }\r\n    /**\r\n    * @dev remove mini game contract from main contract\r\n    * @param _addr mini game contract address\r\n    */\r\n    function removeContractMiniGame(address _addr) public isAdministrator\r\n    {\r\n        miniGames[_addr] = false;\r\n    }\r\n    // ---------------------------------------------------------------------------------------\r\n    // SET INTERFACE CONTRACT\r\n    // ---------------------------------------------------------------------------------------\r\n    \r\n    function setMiningWarInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\r\n\r\n        require(miningWarInterface.isMiningWarContract() == true);\r\n                \r\n        MiningWar = miningWarInterface;\r\n    }\r\n    function setEngineerInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\r\n        \r\n        require(engineerInterface.isEngineerContract() == true);\r\n\r\n        engineerAddress = _addr;\r\n\r\n        Engineer = engineerInterface;\r\n    }\r\n    \r\n    function setFactoryInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoProgramFactoryInterface factoryInterface = CryptoProgramFactoryInterface(_addr);\r\n\r\n        Factory = factoryInterface;\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // FUCTION FOR NEXT VERSION\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    /**\r\n    * @dev additional time unequalled defence \r\n    * @param _addr player address \r\n    */\r\n    function setAtkNowForPlayer(address _addr) public onlyContractsMiniGame\r\n    {\r\n        Player storage p = players[_addr];\r\n        p.nextTimeAtk = now;\r\n    }\r\n    function setPlayerVirusDef(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {     \r\n        players[_addr].virusDef = SafeMath.mul(_value, VIRUS_MINING_PERIOD);\r\n    } \r\n    function addVirusDef(address _addr, uint256 _virus) public\r\n    {\r\n        require(miniGames[msg.sender] == true || msg.sender == _addr);\r\n\r\n        Engineer.subVirus(_addr, _virus);\r\n\r\n        Player storage p = players[_addr];\r\n\r\n        p.virusDef += SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\r\n    }\r\n    function subVirusDef(address _addr, uint256 _virus) public onlyContractsMiniGame\r\n    {        \r\n        _virus = SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\r\n        require(players[_addr].virusDef >= _virus);\r\n\r\n        Player storage p = players[_addr];\r\n\r\n        p.virusDef -= _virus;\r\n    }\r\n    function addTimeUnequalledDefence(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        Player storage p = players[_addr];\r\n        uint256 currentTimeUnequalled = p.endTimeUnequalledDef;\r\n        if (currentTimeUnequalled < now) currentTimeUnequalled = now;\r\n        \r\n        p.endTimeUnequalledDef = SafeMath.add(currentTimeUnequalled, _value);\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // MAIN CONTENT\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function setVirusInfo(uint256 _atk, uint256 _def) public isAdministrator\r\n    {\r\n        Virus storage v = viruses[VIRUS_NORMAL];\r\n        v.atk = _atk;\r\n        v.def = _def;\r\n    }\r\n\r\n    /**\r\n    * @dev ATTACK\r\n    * _programs[0]: + 10% _virus;\r\n    * _programs[1]: revival 15 % _virus if this atk lose(not use item before)\r\n    * _programs[2]: + 20% dame\r\n    * _programs[3]: -5% virus defence of player you want attack\r\n    */\r\n    function attack(address _defAddress, uint256 _virus, uint256[] _programs) public\r\n    {\r\n        require(validateAttack(msg.sender, _defAddress) == true);\r\n        require(_programs.length == 4);\r\n        require(validatePrograms(_programs) == true);\r\n\r\n        Factory.subPrograms(msg.sender, _programs);\r\n\r\n        players[msg.sender].nextTimeAtk = now + HALF_TIME_ATK;\r\n\r\n        if (players[_defAddress].virusDef == 0) return endAttack(_defAddress, true, 0, 0, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), 0, 1, _programs);\r\n\r\n        Engineer.subVirus(msg.sender, _virus);\r\n\r\n        uint256[] memory programsValue = Factory.getProgramsValue(); \r\n\r\n        bool victory;\r\n        uint256 atk;\r\n        uint256 def;\r\n        uint256 virusAtkDead;\r\n        uint256 virusDefDead;   \r\n        \r\n        (victory, atk, def, virusAtkDead, virusDefDead) = firstAttack(_defAddress, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), _programs, programsValue);\r\n\r\n        endAttack(_defAddress, victory, SafeMath.div(virusAtkDead, VIRUS_MINING_PERIOD), SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 1, _programs);\r\n\r\n        if (_programs[1] == 1 && victory == false)  \r\n            againAttack(_defAddress, SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, VIRUS_MINING_PERIOD), programsValue[1]), 100)); // revival 15 % _virus if this atk lose(not use item before)\r\n    }\r\n    function firstAttack(address _defAddress, uint256 _virus, uint256[] _programs, uint256[] programsValue) \r\n    private \r\n    returns(\r\n        bool victory,\r\n        uint256 atk,\r\n        uint256 def,\r\n        uint256 virusAtkDead,\r\n        uint256 virusDefDead        \r\n        )\r\n    {\r\n        Player storage pDef = players[_defAddress];\r\n\r\n        atk             = _virus; \r\n        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\r\n        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\r\n\r\n        if (_programs[0] == 1) // + 10% _virus;\r\n            atk += SafeMath.div(SafeMath.mul(atk, programsValue[0]), 100); \r\n        if (_programs[3] == 1) // -5% virus defence of player you want attack\r\n            pDef.virusDef = SafeMath.sub(pDef.virusDef, SafeMath.div(SafeMath.mul(pDef.virusDef, programsValue[3]), 100)); \r\n            \r\n        atk = SafeMath.div(SafeMath.mul(SafeMath.mul(atk, viruses[VIRUS_NORMAL].atk), rateAtk), 100);\r\n        def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, viruses[VIRUS_NORMAL].def), rateDef), 100);\r\n\r\n        if (_programs[2] == 1)  //+ 20% dame\r\n            atk += SafeMath.div(SafeMath.mul(atk, programsValue[2]), 100);\r\n\r\n        if (atk >= def) {\r\n            virusAtkDead = SafeMath.min(_virus, SafeMath.div(SafeMath.mul(def, 100), SafeMath.mul(viruses[VIRUS_NORMAL].atk, rateAtk)));\r\n            virusDefDead = pDef.virusDef;\r\n            victory      = true;\r\n        } else {\r\n            virusAtkDead = _virus;\r\n            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(viruses[VIRUS_NORMAL].def, rateDef)));\r\n        }\r\n\r\n        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\r\n\r\n        if (_virus > virusAtkDead) \r\n            Engineer.addVirus(msg.sender, SafeMath.div(SafeMath.sub(_virus, virusAtkDead), VIRUS_MINING_PERIOD));\r\n\r\n    }\r\n    function againAttack(address _defAddress, uint256 _virus) private returns(bool victory)\r\n    {\r\n        Player storage pDef = players[_defAddress];\r\n        // virus normal info\r\n        Virus memory v = viruses[VIRUS_NORMAL];\r\n\r\n        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\r\n        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\r\n\r\n        uint256 atk = SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, v.atk), rateAtk), 100);\r\n        uint256 def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, v.def), rateDef), 100);\r\n        uint256 virusDefDead = 0;\r\n        uint256[] memory programs;\r\n        if (atk >= def) {\r\n            virusDefDead = pDef.virusDef;\r\n            victory = true;\r\n        } else {\r\n            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(v.def, rateDef)));\r\n        }\r\n\r\n        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\r\n\r\n        endAttack(_defAddress, victory, 0,  SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 2, programs);\r\n    }\r\n    function endAttack(address _defAddress, bool victory, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round, uint256[] programs) private \r\n    {\r\n        uint256 reward = 0;\r\n        if (victory == true) {\r\n            uint256 pDefCrystals = Engineer.calCurrentCrystals(_defAddress);\r\n            // subtract random 10% to 50% current crystals of player defence\r\n            uint256 rate = 10 + randomNumber(_defAddress, pDefCrystals, 41);\r\n            reward = SafeMath.div(SafeMath.mul(pDefCrystals, rate),100);\r\n\r\n            if (reward > 0) {\r\n                MiningWar.subCrystal(_defAddress, reward);    \r\n                MiningWar.addCrystal(msg.sender, reward);\r\n            }\r\n        }\r\n        emit Attack(msg.sender, _defAddress, victory, reward, virusAtkDead, virusDefDead, atk, def, round);\r\n        if (round == 1) emit Programs( programs[0], programs[1], programs[2], programs[3]);\r\n    }\r\n    function validateAttack(address _atkAddress, address _defAddress) private view returns(bool _status) \r\n    {\r\n        if (\r\n            _atkAddress != _defAddress &&\r\n            players[_atkAddress].nextTimeAtk <= now &&\r\n            canAttack(_defAddress) == true\r\n            ) {\r\n            _status = true;\r\n        }\r\n    } \r\n    function validatePrograms(uint256[] _programs) private view returns(bool _status)\r\n    {\r\n        _status = true;\r\n        for(uint256 idx = 0; idx < _programs.length; idx++) {\r\n            if (_programs[idx] != 0 && _programs[idx] != 1) _status = false;\r\n        }\r\n    }\r\n    function canAttack(address _addr) private view returns(bool _canAtk)\r\n    {\r\n        if ( \r\n            players[_addr].endTimeUnequalledDef < now &&\r\n            Engineer.calCurrentCrystals(_addr) >= 5000\r\n            ) {\r\n            _canAtk = true;\r\n        }\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // CALL FUNCTION\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function getData(address _addr) \r\n    public\r\n    view\r\n    returns(\r\n        uint256 _virusDef,\r\n        uint256 _nextTimeAtk,\r\n        uint256 _endTimeUnequalledDef,\r\n        bool    _canAtk,\r\n        // engineer\r\n        uint256 _currentVirus, \r\n        // mingin war\r\n        uint256 _currentCrystals\r\n    ) {\r\n        Player memory p      = players[_addr];\r\n        _virusDef            = SafeMath.div(p.virusDef, VIRUS_MINING_PERIOD);\r\n        _nextTimeAtk         = p.nextTimeAtk;\r\n        _endTimeUnequalledDef= p.endTimeUnequalledDef;\r\n        _currentVirus        = SafeMath.div(Engineer.calCurrentVirus(_addr), VIRUS_MINING_PERIOD);\r\n        _currentCrystals     = Engineer.calCurrentCrystals(_addr);\r\n        _canAtk              = canAttack(_addr);\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // INTERNAL FUNCTION\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function randomNumber(address _addr, uint256 randNonce, uint256 _maxNumber) private view returns(uint256)\r\n    {\r\n        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFactoryInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"viruses\",\"outputs\":[{\"name\":\"atk\",\"type\":\"uint256\"},{\"name\":\"def\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"engineerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_virus\",\"type\":\"uint256\"}],\"name\":\"addVirusDef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_virusDef\",\"type\":\"uint256\"},{\"name\":\"_nextTimeAtk\",\"type\":\"uint256\"},{\"name\":\"_endTimeUnequalledDef\",\"type\":\"uint256\"},{\"name\":\"_canAtk\",\"type\":\"bool\"},{\"name\":\"_currentVirus\",\"type\":\"uint256\"},{\"name\":\"_currentCrystals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atk\",\"type\":\"uint256\"},{\"name\":\"_def\",\"type\":\"uint256\"}],\"name\":\"setVirusInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerVirusDef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAtkNowForPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractsMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isArenaContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_virus\",\"type\":\"uint256\"}],\"name\":\"subVirusDef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRTSTAL_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIRUS_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"virusDef\",\"type\":\"uint256\"},{\"name\":\"nextTimeAtk\",\"type\":\"uint256\"},{\"name\":\"endTimeUnequalledDef\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTimeUnequalledDefence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALF_TIME_ATK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIRUS_NORMAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_defAddress\",\"type\":\"address\"},{\"name\":\"_virus\",\"type\":\"uint256\"},{\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"atkAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"defAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"victory\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"virusAtkDead\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"virusDefDead\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atk\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"def\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"programLv1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programLv2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programLv3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programLv4\",\"type\":\"uint256\"}],\"name\":\"Programs\",\"type\":\"event\"}]","ContractName":"CrryptoArena","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d56f6939b81bf504ae8e3de19653455e8a5d593decf74d518678259528e7f609"}]}