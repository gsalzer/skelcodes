{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n * Contract that is working with ERC223 tokens\r\n */\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n/* New ERC223 contract interface */\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n\r\n  // solhint-disable-next-line\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n /**\r\n * ERC223 token by Dexaran\r\n *\r\n * https://github.com/Dexaran/ERC223-token-standard\r\n */\r\n\r\n /* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMathERC223 {\r\n  uint256 constant public MAX_UINT256 =\r\n  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  function safeAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    if (x > MAX_UINT256 - y) revert();\r\n    return x + y;\r\n  }\r\n\r\n  function safeSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    if (x < y) revert();\r\n    return x - y;\r\n  }\r\n\r\n  function safeMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    if (y == 0) return 0;\r\n    if (x > MAX_UINT256 / y) revert();\r\n    return x * y;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC223Token is ERC223, SafeMathERC223 {\r\n  mapping(address => uint) public balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  // Constractor\r\n  constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[msg.sender] = _totalSupply;\r\n  }\r\n\r\n  // Function to access name of token .\r\n  function name() public view returns (string _name) {\r\n    return name;\r\n  }\r\n\r\n  // Function to access symbol of token .\r\n  function symbol() public view returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n\r\n  // Function to access decimals of token .\r\n  function decimals() public view returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return totalSupply;\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n    if (isContract(_to)) {\r\n      return transferToContractCustom(msg.sender, _to, _value, _data, _custom_fallback);\r\n    } else {\r\n      return transferToAddress(msg.sender, _to, _value, _data);\r\n    }\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n    if (isContract(_to)) {\r\n      return transferToContract(msg.sender, _to, _value, _data);\r\n    } else {\r\n      return transferToAddress(msg.sender, _to, _value, _data);\r\n    }\r\n  }\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if (isContract(_to)) {\r\n      return transferToContract(msg.sender, _to, _value, empty);\r\n    } else {\r\n      return transferToAddress(msg.sender, _to, _value, empty);\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) internal view returns (bool is_contract) {\r\n    uint length;\r\n    assembly { // solhint-disable-line\r\n          //retrieve the size of the code on target address, this needs assembly\r\n          length := extcodesize(_addr)\r\n    }\r\n    return (length > 0);\r\n  }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _from, address _to, uint _value, bytes _data) internal returns (bool success) {\r\n    if (balanceOf(_from) < _value) revert();\r\n    balances[_from] = safeSub(balanceOf(_from), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    emit Transfer(_from, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _from, address _to, uint _value, bytes _data) internal returns (bool success) {\r\n    if (balanceOf(_from) < _value) revert();\r\n    balances[_from] = safeSub(balanceOf(_from), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(_from, _value, _data);\r\n    emit Transfer(_from, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContractCustom(address _from, address _to, uint _value, bytes _data, string _custom_fallback) internal returns (bool success) {\r\n    if (balanceOf(_from) < _value) revert();\r\n    balances[_from] = safeSub(balanceOf(_from), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    // solhint-disable-next-line\r\n    assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback, _from, _value, _data)));\r\n    emit Transfer(_from, _to, _value, _data);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC223Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000018d0bf423c03d8de000000000000000000000000000000000000000000000000000000000000000000000a5445535445524332323300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5445535445524332323300000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://91d1a1c0dbb56bdc73c595c260ca13e78963ee493cdaa5a758cda35457787d64"}]}