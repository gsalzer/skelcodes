{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external returns (uint);\r\n    \r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IDeadTokens {\r\n    function bury(IERC20 token) external;\r\n    function buried(IERC20 token) external view returns (bool);\r\n    function callback(IERC20 token, bool valid) external;\r\n}\r\ninterface IOracle {\r\n    function test(address token) external;\r\n}\r\n\r\n\r\ncontract Cleanedapp {\r\n    IDeadTokens dt;\r\n    uint public slotsCleared;\r\n    \r\n    constructor(IDeadTokens _dt) public {\r\n        dt = _dt;\r\n    }\r\n    \r\n    modifier onlyBuried(IERC20 token) {\r\n        require(dt.buried(token), \"bury token first!\");\r\n        _;        \r\n    }\r\n\r\n    \r\n    event Burned(address indexed token, address indexed user, uint amount, string message);\r\n    \r\n    function burn(IERC20 token, string calldata message) external onlyBuried(token) {\r\n        _burn(token, msg.sender, message);\r\n    }\r\n    function burn(IERC20 token, address user, string calldata message) external onlyBuried(token) {\r\n        _burn(token, user, message);\r\n    }\r\n\r\n    \r\n    function _burn(IERC20 token, address user, string memory message) internal {\r\n        uint approved = token.allowance(user, address(this));\r\n        uint balance = token.balanceOf(user);\r\n        uint amount = approved < balance ? approved : balance;\r\n        \r\n        if (amount > 0) {\r\n            token.transferFrom(user, address(this), amount);\r\n            if (amount == approved) {\r\n                // this guy just sent all his tokens\r\n                slotsCleared += 1;\r\n            }\r\n            emit Burned(address(token), user, amount, message);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slotsCleared\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"Cleanedapp","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c7c06ac46f2b66e00960944882f9c35eec54bba0","Library":"","SwarmSource":"bzzr://63f2ba0f1813187594e5ea7a75d4bd3907581be836672a4ba5adfed2a2147559"}]}