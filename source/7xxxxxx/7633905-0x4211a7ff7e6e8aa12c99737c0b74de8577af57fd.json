{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract Registry is Destructible {\r\n\r\n    // Authorized users in the system\r\n    mapping (address => bool) users;\r\n\r\n    // Authroized charities in the system\r\n    mapping (address => bool) charities;\r\n\r\n    /**\r\n     * Event for authorizations\r\n     * @param registrar address of the account to be authorized\r\n     * @param role type of account either \"user\" or \"charity\"\r\n     * @param enabled boolean value that denotes the authorization\r\n     */\r\n    event Authorize(address indexed registrar, string role, bool enabled);\r\n\r\n    modifier validAddress(address _addr) {\r\n        require(_addr != address(0), \"0x0 is not a valid address\");\r\n        require(_addr != address(this), \"Contract address is not a valid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks to see if a user is authorized in the system\r\n     * @param _address the address of the user\r\n     * @return A boolean value of the users authorization status\r\n     */\r\n    function checkUser(address _address) public view validAddress(_address) returns (bool) {\r\n        return users[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks to see if a charity is authorized in the system\r\n     * @param _address the address of the charity\r\n     * @return A boolean value of the charity's authorization status\r\n     */\r\n    function checkCharity(address _address) public view validAddress(_address) returns (bool) {\r\n        return charities[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the authorization status of a user\r\n     * @param _address the address of the user\r\n     * @param _enable the authorization status of a user\r\n     */\r\n    function authorizeUser(address _address, bool _enable) public onlyOwner validAddress(_address) {\r\n        users[_address] = _enable;\r\n        emit Authorize(_address, \"user\", _enable);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the authorization status of a charity\r\n     * @param _address the address of the charity\r\n     * @param _enable the authorization status of a charity\r\n     */\r\n    function authorizeCharity(address _address, bool _enable) public onlyOwner validAddress(_address) {\r\n        charities[_address] = _enable;\r\n        emit Authorize(_address, \"charity\", _enable);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"authorizeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"authorizeCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Authorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dba03af3f91a1a39eb836bb5a6140f552e7f03d6bc734d4174e8dd250b7c5956"}]}