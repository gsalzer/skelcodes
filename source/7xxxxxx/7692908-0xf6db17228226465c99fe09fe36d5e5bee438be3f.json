{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Strings.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\nlibrary Strings {\r\n\r\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < _ba.length; i++) {\r\n            babcde[k++] = _ba[i];\r\n        }\r\n        for (i = 0; i < _bb.length; i++) {\r\n            babcde[k++] = _bb[i];\r\n        }\r\n        for (i = 0; i < _bc.length; i++) {\r\n            babcde[k++] = _bc[i];\r\n        }\r\n        for (i = 0; i < _bd.length; i++) {\r\n            babcde[k++] = _bd[i];\r\n        }\r\n        for (i = 0; i < _be.length; i++) {\r\n            babcde[k++] = _be[i];\r\n        }\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/INiftyTradingCardCreator.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface INiftyTradingCardCreator {\r\n    function mintCard(\r\n        uint256 _cardType,\r\n        uint256 _nationality,\r\n        uint256 _position,\r\n        uint256 _ethnicity,\r\n        uint256 _kit,\r\n        uint256 _colour,\r\n        address _to\r\n    ) external returns (uint256 _tokenId);\r\n\r\n    function setAttributes(\r\n        uint256 _tokenId,\r\n        uint256 _strength,\r\n        uint256 _speed,\r\n        uint256 _intelligence,\r\n        uint256 _skill\r\n    ) external returns (bool);\r\n\r\n    function setName(\r\n        uint256 _tokenId,\r\n        uint256 _firstName,\r\n        uint256 _lastName\r\n    ) external returns (bool);\r\n\r\n    function setAttributesAndName(\r\n        uint256 _tokenId,\r\n        uint256 _strength,\r\n        uint256 _speed,\r\n        uint256 _intelligence,\r\n        uint256 _skill,\r\n        uint256 _firstName,\r\n        uint256 _lastName\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/generators/INiftyFootballTradingCardGenerator.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ncontract INiftyFootballTradingCardGenerator {\r\n    function generateCard(address _sender) external returns (uint256 _nationality, uint256 _position, uint256 _ethnicity, uint256 _kit, uint256 _colour);\r\n\r\n    function generateAttributes(address _sender, uint256 _base) external returns (uint256 strength, uint256 speed, uint256 intelligence, uint256 skill);\r\n\r\n    function generateName(address _sender) external returns (uint256 firstName, uint256 lastName);\r\n}\r\n\r\n// File: contracts/FundsSplitter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract FundsSplitter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public platform;\r\n    address payable public partner;\r\n\r\n    uint256 public partnerRate = 7;\r\n\r\n    constructor (address payable _platform, address payable _partner) public {\r\n        platform = _platform;\r\n        partner = _partner;\r\n    }\r\n\r\n    function splitFunds(uint256 _totalPrice) internal {\r\n        if (msg.value > 0) {\r\n            uint256 refund = msg.value.sub(_totalPrice);\r\n\r\n            // overpaid...\r\n            if (refund > 0) {\r\n                msg.sender.transfer(refund);\r\n            }\r\n\r\n            // work out the amount to split and send it\r\n            uint256 partnerAmount = _totalPrice.div(100).mul(partnerRate);\r\n            partner.transfer(partnerAmount);\r\n\r\n            // send remaining amount to partner wallet\r\n            uint256 remaining = _totalPrice.sub(partnerAmount);\r\n            platform.transfer(remaining);\r\n        }\r\n    }\r\n\r\n    function updatePartnerAddress(address payable _partner) onlyOwner public {\r\n        partner = _partner;\r\n    }\r\n\r\n    function updatePartnerRate(uint256 _techPartnerRate) onlyOwner public {\r\n        partnerRate = _techPartnerRate;\r\n    }\r\n\r\n    function updatePlatformAddress(address payable _platform) onlyOwner public {\r\n        platform = _platform;\r\n    }\r\n\r\n    function withdraw() public onlyOwner returns (bool) {\r\n        platform.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/NiftyFootballTradingCardBlindPack.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NiftyFootballTradingCardBlindPack is Ownable, Pausable, FundsSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    event PriceInWeiChanged(uint256 _old, uint256 _new);\r\n\r\n    event CreditAdded(address indexed _to);\r\n\r\n    event DefaultCardTypeChanged(uint256 _new);\r\n\r\n    event AttributesBaseChanged(uint256 _new);\r\n\r\n    event FutballCardsGeneratorChanged(INiftyFootballTradingCardGenerator _new);\r\n\r\n    INiftyFootballTradingCardGenerator public generator;\r\n    INiftyTradingCardCreator public creator;\r\n\r\n    mapping(address => uint256) public credits;\r\n\r\n    uint256 public totalPurchasesInWei = 0;\r\n    uint256 public cardTypeDefault = 0;\r\n    uint256 public attributesBase = 40; // Standard 40-100\r\n\r\n    uint256[] public pricePerCard = [\r\n    // single cards\r\n    11000000000000000, // 1 @ = 0.011 ETH / $1.75\r\n    11000000000000000, // 2 @ = 0.011 ETH / $1.75\r\n\r\n    // 1 packs\r\n    10000000000000000, //  3 @ = 0.01 ETH / $1.59\r\n    10000000000000000, //  4 @ = 0.01 ETH / $1.59\r\n    10000000000000000, //  5 @ = 0.01 ETH / $1.59\r\n\r\n    // 2 packs\r\n    9100000000000000, //  6 @ = 0.0091 ETH / $1.45\r\n    9100000000000000, //  7 @ = 0.0091 ETH / $1.45\r\n    9100000000000000, //  8 @ = 0.0091 ETH / $1.45\r\n\r\n    // 3 packs or more\r\n    8500000000000000, //  9 @ = 0.0085 ETH / $1.35\r\n    8500000000000000 //  10 @ = 0.0085 ETH / $1.35\r\n    ];\r\n\r\n    constructor (\r\n        address payable _wallet,\r\n        address payable _partnerAddress,\r\n        INiftyFootballTradingCardGenerator _generator,\r\n        INiftyTradingCardCreator _creator\r\n    ) FundsSplitter(_wallet, _partnerAddress) public {\r\n        generator = _generator;\r\n        creator = _creator;\r\n    }\r\n\r\n    function blindPack() whenNotPaused public payable {\r\n        blindPackTo(msg.sender);\r\n    }\r\n\r\n    function blindPackTo(address _to) whenNotPaused public payable {\r\n        uint256 _totalPrice = totalPrice(1);\r\n        require(\r\n            credits[msg.sender] > 0 || msg.value >= _totalPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n        require(!isContract(msg.sender), \"Unable to buy packs from another contract\");\r\n\r\n        _generateAndAssignCard(_to);\r\n\r\n        _takePayment(1, _totalPrice);\r\n    }\r\n\r\n    function buyBatch(uint256 _numberOfCards) whenNotPaused public payable {\r\n        return buyBatchTo(msg.sender, _numberOfCards);\r\n    }\r\n\r\n    function buyBatchTo(address _to, uint256 _numberOfCards) whenNotPaused public payable {\r\n        uint256 _totalPrice = totalPrice(_numberOfCards);\r\n        require(\r\n            credits[msg.sender] >= _numberOfCards || msg.value >= _totalPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n        require(!isContract(msg.sender), \"Unable to buy packs from another contract\");\r\n\r\n        for (uint i = 0; i < _numberOfCards; i++) {\r\n            _generateAndAssignCard(_to);\r\n        }\r\n\r\n        _takePayment(_numberOfCards, _totalPrice);\r\n    }\r\n\r\n    function _generateAndAssignCard(address _to) internal {\r\n        // Generate card\r\n        (uint256 _nationality, uint256 _position, uint256 _ethnicity, uint256 _kit, uint256 _colour) = generator.generateCard(msg.sender);\r\n\r\n        // cardType is 0 for genesis (initially)\r\n        uint256 tokenId = creator.mintCard(cardTypeDefault, _nationality, _position, _ethnicity, _kit, _colour, _to);\r\n\r\n        // Generate attributes\r\n        (uint256 _strength, uint256 _speed, uint256 _intelligence, uint256 _skill) = generator.generateAttributes(msg.sender, attributesBase);\r\n        (uint256 _firstName, uint256 _lastName) = generator.generateName(msg.sender);\r\n\r\n        creator.setAttributesAndName(tokenId, _strength, _speed, _intelligence, _skill, _firstName, _lastName);\r\n    }\r\n\r\n    function _takePayment(uint256 _numberOfCards, uint256 _totalPrice) internal {\r\n        // use credits first\r\n        if (credits[msg.sender] >= _numberOfCards) {\r\n            credits[msg.sender] = credits[msg.sender].sub(_numberOfCards);\r\n\r\n            // Refund any accidentally ETH\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n        } else {\r\n            // any trapped ether can be withdrawn with withdraw()\r\n            totalPurchasesInWei = totalPurchasesInWei.add(_totalPrice);\r\n            splitFunds(_totalPrice);\r\n        }\r\n    }\r\n\r\n    function setCardTypeDefault(uint256 _newDefaultCardType) public onlyOwner returns (bool) {\r\n        cardTypeDefault = _newDefaultCardType;\r\n\r\n        emit DefaultCardTypeChanged(_newDefaultCardType);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAttributesBase(uint256 _newAttributesBase) public onlyOwner returns (bool) {\r\n        attributesBase = _newAttributesBase;\r\n\r\n        emit AttributesBaseChanged(_newAttributesBase);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFutballCardsGenerator(INiftyFootballTradingCardGenerator _futballCardsGenerator) public onlyOwner returns (bool) {\r\n        generator = _futballCardsGenerator;\r\n\r\n        emit FutballCardsGeneratorChanged(_futballCardsGenerator);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updatePricePerCardAtIndex(uint256 _index, uint256 _priceInWei) public onlyOwner returns (bool) {\r\n        pricePerCard[_index] = _priceInWei;\r\n        return true;\r\n    }\r\n\r\n    function updatePricePerCard(uint256[] memory _pricePerCard) public onlyOwner returns (bool) {\r\n        pricePerCard = _pricePerCard;\r\n        return true;\r\n    }\r\n\r\n    function addCredit(address _to) public onlyOwner returns (bool) {\r\n        credits[_to] = credits[_to].add(1);\r\n\r\n        emit CreditAdded(_to);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addCredits(address _to, uint256 _creditsToAdd) public onlyOwner returns (bool) {\r\n        credits[_to] = credits[_to].add(_creditsToAdd);\r\n\r\n        emit CreditAdded(_to);\r\n\r\n        return true;\r\n    }\r\n\r\n    function totalPrice(uint256 _numberOfCards) public view returns (uint256) {\r\n        if (_numberOfCards > pricePerCard.length) {\r\n            return pricePerCard[pricePerCard.length - 1].mul(_numberOfCards);\r\n        }\r\n        return pricePerCard[_numberOfCards - 1].mul(_numberOfCards);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * Based on OpenZeppelin Address library\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"blindPackTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePerCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numberOfCards\",\"type\":\"uint256\"}],\"name\":\"totalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAttributesBase\",\"type\":\"uint256\"}],\"name\":\"setAttributesBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_futballCardsGenerator\",\"type\":\"address\"}],\"name\":\"setFutballCardsGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricePerCard\",\"type\":\"uint256[]\"}],\"name\":\"updatePricePerCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchasesInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"attributesBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_techPartnerRate\",\"type\":\"uint256\"}],\"name\":\"updatePartnerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfCards\",\"type\":\"uint256\"}],\"name\":\"buyBatch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numberOfCards\",\"type\":\"uint256\"}],\"name\":\"buyBatchTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_creditsToAdd\",\"type\":\"uint256\"}],\"name\":\"addCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatformAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardTypeDefault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDefaultCardType\",\"type\":\"uint256\"}],\"name\":\"setCardTypeDefault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"blindPack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"updatePricePerCardAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"name\":\"_generator\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"PriceInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"CreditAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"DefaultCardTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"AttributesBaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"FutballCardsGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"NiftyFootballTradingCardBlindPack","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000377a75c4ef92502fe40d2b454f0c3829b8c0ffc5000000000000000000000000ace0a8666953bf9e1fe1cc91abf5db5a1c57dd46000000000000000000000000ff511f5e620d75780f200f005a306f7c7bd30eb1000000000000000000000000bc5370374fe08d699cf7fcd2e625a93bf393ccc4","Library":"","SwarmSource":"bzzr://b52eb964fb6bc8fba13aec15f67cd6c34925a5b13027b99c43818323d96714ee"}]}