{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24; \r\n\r\n // ERC20 declare \r\n contract IERC20 { \r\n   function totalSupply() public view returns (uint256); \r\n   function balanceOf(address who) public view returns (uint256); \r\n   function transfer(address to, uint256 value) public returns (bool); \r\n   function allowance(address owner, address spender) public view returns (uint256); \r\n   function transferFrom(address from, address to, uint256 value) public returns (bool); \r\n   function approve(address spender, uint256 value) public returns (bool); \r\n   event Transfer(address indexed from, address indexed to, uint256 value); \r\n   event Approval(address indexed owner, address indexed spender, uint256 value); \r\n   event Burn(address indexed burner, uint256 value); \r\n } \r\n\r\n // SafeERC20 \r\n library SafeERC20 { \r\n   function safeTransfer( \r\n     IERC20 _token, \r\n     address _to, \r\n     uint256 _value \r\n   ) \r\n     internal \r\n   { \r\n     require(_token.transfer(_to, _value)); \r\n   } \r\n \r\n\r\n   function safeTransferFrom( \r\n     ERC20 _token, \r\n     address _from, \r\n     address _to, \r\n     uint256 _value \r\n   ) \r\n     internal \r\n   { \r\n     require(_token.transferFrom(_from, _to, _value)); \r\n   } \r\n \r\n\r\n   function safeApprove( \r\n     ERC20 _token, \r\n     address _spender, \r\n     uint256 _value \r\n   ) \r\n     internal \r\n   { \r\n     require(_token.approve(_spender, _value)); \r\n   } \r\n } \r\n \r\n // Ownable \r\n contract Ownable { \r\n   address public owner; \r\n   address public admin;  \r\n\r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \r\n \r\n\r\n   constructor() public { \r\n     owner = msg.sender; \r\n   } \r\n  \r\n\r\n   modifier onlyOwner() { \r\n     require(msg.sender == owner); \r\n     _; \r\n   } \r\n \r\n\r\n   modifier onlyOwnerOrAdmin() { \r\n     require(msg.sender != address(0) && (msg.sender == owner || msg.sender == admin)); \r\n     _; \r\n   }  \r\n \r\n\r\n   function transferOwnership(address newOwner) onlyOwner public { \r\n     require(newOwner != address(0)); \r\n     require(newOwner != owner); \r\n     require(newOwner != admin); \r\n \r\n\r\n     emit OwnershipTransferred(owner, newOwner); \r\n     owner = newOwner; \r\n   } \r\n \r\n\r\n   function setAdmin(address newAdmin) onlyOwner public { \r\n     require(admin != newAdmin); \r\n     require(owner != newAdmin); \r\n \r\n\r\n     admin = newAdmin; \r\n   } \r\n } \r\n \r\n \r\n\r\n// ERC20 functions \r\ncontract ERC20 is IERC20, Ownable { \r\n    using SafeMath for uint256; \r\n    //uint8 public decimals = 4;\r\n\r\n    mapping (address => uint256) private _balances; \r\n    mapping(address => bool) internal locks; \r\n    mapping (address => mapping (address => uint256)) private _allowed; \r\n     \r\n    uint256 public Max_supply = 10000000000 * (10 **18); \r\n    uint256 private _totalSupply; \r\n\r\n\r\n    function totalSupply() public view returns (uint256) { \r\n        return _totalSupply; \r\n    } \r\n\r\n\r\n    function balanceOf(address owner) public view returns (uint256) { \r\n        return _balances[owner]; \r\n    } \r\n\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) { \r\n        return _allowed[owner][spender]; \r\n    } \r\n\r\n    function transfer(address to, uint256 value) public returns (bool) { \r\n        _transfer(msg.sender, to, value); \r\n        return true; \r\n    } \r\n     \r\n    function _transfer(address from, address to, uint256 value) internal { \r\n        require(to != address(0)); \r\n        require(locks[msg.sender] == false); \r\n        _balances[from] = _balances[from].sub(value); \r\n        _balances[to] = _balances[to].add(value); \r\n        emit Transfer(from, to, value); \r\n    }     \r\n\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) { \r\n        _approve(msg.sender, spender, value); \r\n        return true; \r\n    } \r\n     \r\n    function _approve(address owner, address spender, uint256 value) internal { \r\n        require(spender != address(0)); \r\n        require(owner != address(0)); \r\n\r\n\r\n        _allowed[owner][spender] = value; \r\n        emit Approval(owner, spender, value); \r\n    } \r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) { \r\n        _transfer(from, to, value); \r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value)); \r\n        return true; \r\n    } \r\n\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) { \r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue)); \r\n        return true; \r\n    } \r\n\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { \r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue)); \r\n        return true; \r\n    } \r\n\r\n\r\n\r\n\r\n    function _mint(address account, uint256 value) internal { \r\n        require(account != address(0)); \r\n        require(Max_supply > _totalSupply); \r\n        _totalSupply = _totalSupply.add(value); \r\n        _balances[account] = _balances[account].add(value); \r\n        emit Transfer(address(0), account, value); \r\n    } \r\n     \r\n     \r\n    function burn(address from, uint256 value) public { \r\n        _burn(from, value); \r\n    } \r\n     \r\n\r\n\r\n    function _burn(address account, uint256 value) internal { \r\n        require(account != address(0)); \r\n         \r\n        _totalSupply = _totalSupply.sub(value); \r\n        _balances[account] = _balances[account].sub(value); \r\n        emit Transfer(account, address(0), value); \r\n    } \r\n     \r\n\r\n\r\n    function lock(address _owner) public onlyOwner returns (bool) { \r\n        require(locks[_owner] == false); \r\n        locks[_owner] = true; \r\n        return true; \r\n    } \r\n\r\n\r\n    function unlock(address _owner) public onlyOwner returns (bool) { \r\n        require(locks[_owner] == true); \r\n        locks[_owner] = false; \r\n        return true; \r\n    } \r\n\r\n\r\n    function showLockState(address _owner) public view returns (bool) { \r\n        return locks[_owner]; \r\n    } \r\n\r\n\r\n} \r\n\r\n\r\n\r\n\r\n// Pause, Mint base \r\nlibrary Roles { \r\n    struct Role { \r\n        mapping (address => bool) bearer; \r\n    } \r\n\r\n\r\n\r\n\r\n    function add(Role storage role, address account) internal { \r\n        require(account != address(0)); \r\n        require(!has(role, account)); \r\n\r\n\r\n        role.bearer[account] = true; \r\n    } \r\n\r\n\r\n\r\n\r\n    function remove(Role storage role, address account) internal { \r\n        require(account != address(0)); \r\n        require(has(role, account)); \r\n\r\n\r\n        role.bearer[account] = false; \r\n    } \r\n\r\n\r\n\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) { \r\n        require(account != address(0)); \r\n        return role.bearer[account]; \r\n    } \r\n} \r\n\r\n\r\n\r\n\r\n\r\n// ERC20Detailed \r\ncontract ERC20Detailed is IERC20 { \r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals; \r\n\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public { \r\n        _name = name; \r\n        _symbol = symbol; \r\n        _decimals = decimals; \r\n    } \r\n} \r\n\r\n\r\n\r\n// Math \r\nlibrary Math { \r\n\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) { \r\n        return a >= b ? a : b; \r\n    } \r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) { \r\n        return a < b ? a : b; \r\n    } \r\n\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) { \r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2); \r\n    } \r\n} \r\n\r\n\r\n\r\n\r\n// SafeMath \r\nlibrary SafeMath { \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    if (a == 0 || b == 0) { \r\n      return 0; \r\n    } \r\n\r\n\r\n    uint256 c = a * b; \r\n    assert(c / a == b); \r\n    return c; \r\n  } \r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 \r\n    uint256 c = a / b; \r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold \r\n    return c; \r\n  } \r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    assert(b <= a); \r\n    return a - b; \r\n  } \r\n\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a + b; \r\n    assert(c >= a); // overflow check \r\n    return c; \r\n  } \r\n} \r\n\r\n// Pause part \r\ncontract PauserRole { \r\n    using Roles for Roles.Role; \r\n\r\n\r\n    event PauserAdded(address indexed account); \r\n    event PauserRemoved(address indexed account); \r\n\r\n\r\n    Roles.Role private _pausers; \r\n\r\n\r\n    constructor () internal { \r\n        _addPauser(msg.sender); \r\n    } \r\n\r\n\r\n    modifier onlyPauser() { \r\n        require(isPauser(msg.sender)); \r\n        _; \r\n    } \r\n\r\n\r\n    function isPauser(address account) public view returns (bool) { \r\n        return _pausers.has(account); \r\n    } \r\n\r\n\r\n    function addPauser(address account) public onlyPauser { \r\n        _addPauser(account); \r\n    } \r\n\r\n\r\n    function renouncePauser() public { \r\n        _removePauser(msg.sender); \r\n    } \r\n\r\n\r\n    function _addPauser(address account) internal { \r\n        _pausers.add(account); \r\n        emit PauserAdded(account); \r\n    } \r\n\r\n\r\n    function _removePauser(address account) internal { \r\n        _pausers.remove(account); \r\n        emit PauserRemoved(account); \r\n    } \r\n} \r\n\r\ncontract Pausable is PauserRole { \r\n    event Paused(address account); \r\n    event Unpaused(address account); \r\n\r\n\r\n    bool private _paused; \r\n\r\n\r\n    constructor () internal { \r\n        _paused = false; \r\n    } \r\n\r\n\r\n    function paused() public view returns (bool) { \r\n        return _paused; \r\n    } \r\n\r\n    modifier whenNotPaused() { \r\n        require(!_paused); \r\n        _; \r\n    } \r\n\r\n    modifier whenPaused() { \r\n        require(_paused); \r\n        _; \r\n    } \r\n\r\n\r\n\r\n\r\n    function pause() public onlyPauser whenNotPaused { \r\n        _paused = true; \r\n        emit Paused(msg.sender); \r\n    } \r\n\r\n\r\n\r\n\r\n    function unpause() public onlyPauser whenPaused { \r\n        _paused = false; \r\n        emit Unpaused(msg.sender); \r\n    } \r\n} \r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable { \r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) { \r\n        return super.transfer(to, value); \r\n    } \r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) { \r\n        return super.transferFrom(from, to, value); \r\n    } \r\n\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) { \r\n        return super.approve(spender, value); \r\n    } \r\n\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) { \r\n        return super.increaseAllowance(spender, addedValue); \r\n    } \r\n\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) { \r\n        return super.decreaseAllowance(spender, subtractedValue); \r\n    } \r\n} \r\n\r\n\r\n// Snapshot part \r\nlibrary Arrays { \r\n\r\n\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) { \r\n        if (array.length == 0) { \r\n            return 0; \r\n        } \r\n\r\n\r\n        uint256 low = 0; \r\n        uint256 high = array.length; \r\n\r\n\r\n        while (low < high) { \r\n            uint256 mid = Math.average(low, high); \r\n\r\n\r\n            if (array[mid] > element) { \r\n                high = mid; \r\n            } else { \r\n                low = mid + 1; \r\n            } \r\n        } \r\n\r\n\r\n\r\n\r\n        if (low > 0 && array[low - 1] == element) { \r\n            return low - 1; \r\n        } else { \r\n            return low; \r\n        } \r\n    } \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Counters { \r\n    using SafeMath for uint256; \r\n\r\n\r\n    struct Counter { \r\n\r\n\r\n        uint256 _value;  \r\n    } \r\n\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) { \r\n        return counter._value; \r\n    } \r\n\r\n\r\n    function increment(Counter storage counter) internal { \r\n        counter._value += 1; \r\n    } \r\n\r\n\r\n    function decrement(Counter storage counter) internal { \r\n        counter._value = counter._value.sub(1); \r\n    } \r\n} \r\n\r\ncontract ERC20Snapshot is ERC20 { \r\n    using SafeMath for uint256; \r\n    using Arrays for uint256[]; \r\n    using Counters for Counters.Counter; \r\n\r\n\r\n\r\n\r\n    struct Snapshots { \r\n        uint256[] ids; \r\n        uint256[] values; \r\n    } \r\n\r\n\r\n    mapping (address => Snapshots) private _accountBalanceSnapshots; \r\n    Snapshots private _totalSupplySnaphots; \r\n\r\n\r\n\r\n\r\n    Counters.Counter private _currentSnapshotId; \r\n\r\n\r\n    event Snapshot(uint256 id); \r\n\r\n\r\n\r\n\r\n    function snapshot() public returns (uint256) { \r\n        _currentSnapshotId.increment(); \r\n\r\n\r\n        uint256 currentId = _currentSnapshotId.current(); \r\n        emit Snapshot(currentId); \r\n        return currentId; \r\n    } \r\n\r\n\r\n    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) { \r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]); \r\n\r\n\r\n        return snapshotted ? value : balanceOf(account); \r\n    } \r\n\r\n\r\n    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) { \r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnaphots); \r\n\r\n\r\n        return snapshotted ? value : totalSupply(); \r\n    } \r\n\r\n\r\n\r\n\r\n    function _transfer(address from, address to, uint256 value) internal { \r\n        _updateAccountSnapshot(from); \r\n        _updateAccountSnapshot(to); \r\n\r\n\r\n        super._transfer(from, to, value); \r\n    } \r\n\r\n\r\n    function _mint(address account, uint256 value) internal { \r\n        _updateAccountSnapshot(account); \r\n        _updateTotalSupplySnapshot(); \r\n\r\n\r\n        super._mint(account, value); \r\n    } \r\n\r\n\r\n    function _burn(address account, uint256 value) internal { \r\n        _updateAccountSnapshot(account); \r\n        _updateTotalSupplySnapshot(); \r\n\r\n\r\n        super._burn(account, value); \r\n    } \r\n\r\n\r\n\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) \r\n        private view returns (bool, uint256) \r\n    { \r\n        require(snapshotId > 0); \r\n        require(snapshotId <= _currentSnapshotId.current()); \r\n\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId); \r\n\r\n\r\n        if (index == snapshots.ids.length) { \r\n            return (false, 0); \r\n        } else { \r\n            return (true, snapshots.values[index]); \r\n        } \r\n    } \r\n\r\n\r\n    function _updateAccountSnapshot(address account) private { \r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account)); \r\n    } \r\n\r\n\r\n    function _updateTotalSupplySnapshot() private { \r\n        _updateSnapshot(_totalSupplySnaphots, totalSupply()); \r\n    } \r\n\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private { \r\n        uint256 currentId = _currentSnapshotId.current(); \r\n        if (_lastSnapshotId(snapshots.ids) < currentId) { \r\n            snapshots.ids.push(currentId); \r\n            snapshots.values.push(currentValue); \r\n        } \r\n    } \r\n\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) { \r\n        if (ids.length == 0) { \r\n            return 0; \r\n        } else { \r\n            return ids[ids.length - 1]; \r\n        } \r\n    } \r\n} \r\n\r\n\r\n// Mintable part \r\ncontract MinterRole { \r\n    using Roles for Roles.Role; \r\n\r\n\r\n    event MinterAdded(address indexed account); \r\n    event MinterRemoved(address indexed account); \r\n\r\n\r\n    Roles.Role private _minters; \r\n\r\n\r\n    constructor () internal { \r\n        _addMinter(msg.sender); \r\n    } \r\n\r\n\r\n    modifier onlyMinter() { \r\n        require(isMinter(msg.sender)); \r\n        _; \r\n    } \r\n\r\n\r\n    function isMinter(address account) public view returns (bool) { \r\n        return _minters.has(account); \r\n    } \r\n\r\n\r\n    function addMinter(address account) public onlyMinter { \r\n        _addMinter(account); \r\n    } \r\n\r\n\r\n    function renounceMinter() public { \r\n        _removeMinter(msg.sender); \r\n    } \r\n\r\n\r\n    function _addMinter(address account) internal { \r\n        _minters.add(account); \r\n        emit MinterAdded(account); \r\n    } \r\n\r\n\r\n    function _removeMinter(address account) internal { \r\n        _minters.remove(account); \r\n        emit MinterRemoved(account); \r\n    } \r\n} \r\n\r\n\r\ncontract ERC20Mintable is ERC20, MinterRole { \r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) { \r\n        _mint(to, value); \r\n        return true; \r\n    } \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n// Token detailed \r\ncontract MAINTOKEN is ERC20, ERC20Detailed, ERC20Snapshot, ERC20Pausable, ERC20Mintable { \r\n     \r\n    string public constant name = \"Extended STO\"; \r\n    string public constant symbol = \"ESTO\"; \r\n    uint8 public constant decimals = 4; \r\n    uint256 public constant INITIAL_SUPPLY = 0 * (10 ** uint256(decimals)); \r\n\r\n\r\n    constructor () public ERC20Detailed(name, symbol, decimals) { \r\n        _mint(msg.sender, INITIAL_SUPPLY); \r\n    } \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Max_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MAINTOKEN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://3e066ac0e378b95041a3d94f73ff4df90112f4fc2d157c982e6094c274bfd174"}]}