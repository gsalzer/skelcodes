{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface TubInterface {\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n    function free(bytes32, uint) external;\r\n    function give(bytes32, address) external;\r\n    function gem() external view returns (TokenInterface);\r\n    function skr() external view returns (TokenInterface);\r\n    function ink(bytes32) external view returns (uint);\r\n    function per() external view returns (uint);\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract FreeProxy is DSMath {\r\n    \r\n    /**\r\n     * @dev get MakerDAO CDP engine\r\n     */\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer CDP ownership\r\n     */\r\n    function give(uint cdpNum, address nextOwner) public {\r\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\r\n    }\r\n\r\n    function free3(uint cdpNum) public {\r\n        address tubAddr = getSaiTubAddress();\r\n        TubInterface tub = TubInterface(tubAddr);\r\n\r\n        uint freeJam = tub.gem().balanceOf(address(this)); // withdraw possible previous stuck WETH as well\r\n        tub.gem().withdraw(freeJam);\r\n        \r\n        address(msg.sender).transfer(freeJam);\r\n\r\n    }\r\n    \r\n    function free2(uint ink) public {\r\n        address tubAddr = getSaiTubAddress();\r\n        TubInterface tub = TubInterface(tubAddr);\r\n        TokenInterface peth = tub.skr();\r\n\r\n        setAllowance(peth, tubAddr);\r\n            \r\n        tub.exit(ink);\r\n\r\n    }\r\n\r\n    function free(uint cdpNum, uint jam) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        address tubAddr = getSaiTubAddress();\r\n        \r\n        if (jam > 0) {\r\n            \r\n            TubInterface tub = TubInterface(tubAddr);\r\n\r\n            uint ink = rdiv(jam, tub.per());\r\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n            tub.free(cup, ink);\r\n\r\n        }\r\n    }\r\n\r\n    function setAllowance(TokenInterface token_, address spender_) private {\r\n        if (token_.allowance(address(this), spender_) != uint(-1)) {\r\n            token_.approve(spender_, uint(-1));\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ink\",\"type\":\"uint256\"}],\"name\":\"free2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"free3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FreeProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71869ef552faf32bb8485371f096ecddba1af73394c35a2db21ff97a5eb607f5"}]}