{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      hash\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/// @title Unidirectional payment channels contract for ERC20 tokens.\r\ncontract TokenUnidirectional {\r\n    using SafeMath for uint256;\r\n\r\n    struct PaymentChannel {\r\n        address sender;\r\n        address receiver;\r\n        uint256 value; // Total amount of money deposited to the channel.\r\n\r\n        uint256 settlingPeriod; // How many blocks to wait for the receiver to claim her funds, after sender starts settling.\r\n        uint256 settlingUntil; // Starting with this block number, anyone can settle the channel.\r\n        address tokenContract; // Address of ERC20 token contract.\r\n    }\r\n\r\n    mapping (bytes32 => PaymentChannel) public channels;\r\n\r\n    event DidOpen(bytes32 indexed channelId, address indexed sender, address indexed receiver, uint256 value, address tokenContract);\r\n    event DidDeposit(bytes32 indexed channelId, uint256 deposit);\r\n    event DidClaim(bytes32 indexed channelId);\r\n    event DidStartSettling(bytes32 indexed channelId);\r\n    event DidSettle(bytes32 indexed channelId);\r\n\r\n    /*** ACTIONS AND CONSTRAINTS ***/\r\n\r\n    /// @notice Open a new channel between `msg.sender` and `receiver`, and do an initial deposit to the channel.\r\n    /// @param channelId Unique identifier of the channel to be created.\r\n    /// @param receiver Receiver of the funds, counter-party of `msg.sender`.\r\n    /// @param settlingPeriod Number of blocks to wait for receiver to `claim` her funds after the sender starts settling period (see `startSettling`).\r\n    /// After that period is over anyone could call `settle`, and move all the channel funds to the sender.\r\n    /// @param tokenContract Address of ERC20 token contract.\r\n    /// @param value Initial channel amount.\r\n    /// @dev Before opening a channel, the sender should `approve` spending the token by TokenUnidirectional contract.\r\n    function open(bytes32 channelId, address receiver, uint256 settlingPeriod, address tokenContract, uint256 value) public {\r\n        require(isAbsent(channelId), \"Channel with the same id is present\");\r\n\r\n        StandardToken token = StandardToken(tokenContract);\r\n        require(token.transferFrom(msg.sender, address(this), value), \"Unable to transfer token to the contract\");\r\n\r\n        channels[channelId] = PaymentChannel({\r\n            sender: msg.sender,\r\n            receiver: receiver,\r\n            value: value,\r\n            settlingPeriod: settlingPeriod,\r\n            settlingUntil: 0,\r\n            tokenContract: tokenContract\r\n        });\r\n\r\n        emit DidOpen(channelId, msg.sender, receiver, value, tokenContract);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can deposit funds into the channel identified by `channelId`.\r\n    /// @dev Constraint `deposit` call.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param origin Caller of `deposit` function.\r\n    function canDeposit(bytes32 channelId, address origin) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        bool isSender = channel.sender == origin;\r\n        return isOpen(channelId) && isSender;\r\n    }\r\n\r\n    /// @notice Add more funds to the contract.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param value Amount to be deposited.\r\n    function deposit(bytes32 channelId, uint256 value) public {\r\n        require(canDeposit(channelId, msg.sender), \"canDeposit returned false\");\r\n\r\n        PaymentChannel storage channel = channels[channelId];\r\n        StandardToken token = StandardToken(channel.tokenContract);\r\n        require(token.transferFrom(msg.sender, address(this), value), \"Unable to transfer token to the contract\");\r\n        channel.value = channel.value.add(value);\r\n\r\n        emit DidDeposit(channelId, value);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can start settling the channel identified by `channelId`.\r\n    /// @dev Constraint `startSettling` call.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param origin Caller of `startSettling` function.\r\n    function canStartSettling(bytes32 channelId, address origin) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        bool isSender = channel.sender == origin;\r\n        return isOpen(channelId) && isSender;\r\n    }\r\n\r\n    /// @notice Sender initiates settling of the contract.\r\n    /// @dev Actually set `settlingUntil` field of the PaymentChannel structure.\r\n    /// @param channelId Identifier of the channel.\r\n    function startSettling(bytes32 channelId) public {\r\n        require(canStartSettling(channelId, msg.sender), \"canStartSettling returned false\");\r\n\r\n        PaymentChannel storage channel = channels[channelId];\r\n        channel.settlingUntil = block.number.add(channel.settlingPeriod);\r\n\r\n        emit DidStartSettling(channelId);\r\n    }\r\n\r\n    /// @notice Ensure one can settle the channel identified by `channelId`.\r\n    /// @dev Check if settling period is over by comparing `settlingUntil` to a current block number.\r\n    /// @param channelId Identifier of the channel.\r\n    function canSettle(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        bool isWaitingOver = block.number >= channel.settlingUntil;\r\n        return isSettling(channelId) && isWaitingOver;\r\n    }\r\n\r\n    /// @notice Move the money to sender, and close the channel.\r\n    /// After the settling period is over, and receiver has not claimed the funds, anyone could call that.\r\n    /// @param channelId Identifier of the channel.\r\n    function settle(bytes32 channelId) public {\r\n        require(canSettle(channelId), \"canSettle returned false\");\r\n\r\n        PaymentChannel storage channel = channels[channelId];\r\n        StandardToken token = StandardToken(channel.tokenContract);\r\n\r\n        require(token.transfer(channel.sender, channel.value), \"Unable to transfer token to channel sender\");\r\n\r\n        delete channels[channelId];\r\n        emit DidSettle(channelId);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can claim `payment` amount on channel identified by `channelId`.\r\n    /// @dev Check if `signature` is made by sender part of the channel, and is for payment promise (see `paymentDigest`).\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount claimed.\r\n    /// @param origin Caller of `claim` function.\r\n    /// @param signature Signature for the payment promise.\r\n    function canClaim(bytes32 channelId, uint256 payment, address origin, bytes signature) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        bool isReceiver = origin == channel.receiver;\r\n        bytes32 hash = recoveryPaymentDigest(channelId, payment, channel.tokenContract);\r\n        bool isSigned = channel.sender == ECRecovery.recover(hash, signature);\r\n\r\n        return isReceiver && isSigned;\r\n    }\r\n\r\n    /// @notice Claim the funds, and close the channel.\r\n    /// @dev Can be claimed by channel receiver only. Guarded by `canClaim`.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount claimed.\r\n    /// @param signature Signature for the payment promise.\r\n    function claim(bytes32 channelId, uint256 payment, bytes signature) public {\r\n        require(canClaim(channelId, payment, msg.sender, signature), \"canClaim returned false\");\r\n\r\n        PaymentChannel storage channel = channels[channelId];\r\n        StandardToken token = StandardToken(channel.tokenContract);\r\n\r\n        if (payment >= channel.value) {\r\n            require(token.transfer(channel.receiver, channel.value), \"Unable to transfer token to channel receiver\");\r\n        } else {\r\n            require(token.transfer(channel.receiver, payment), \"Unable to transfer token to channel receiver\");\r\n            uint256 change = channel.value.sub(payment);\r\n            require(token.transfer(channel.sender, change), \"Unable to transfer token to channel sender\");\r\n        }\r\n\r\n        delete channels[channelId];\r\n\r\n        emit DidClaim(channelId);\r\n    }\r\n\r\n    /*** CHANNEL STATE ***/\r\n\r\n    /// @notice Check if the channel is not present.\r\n    /// @param channelId Identifier of the channel.\r\n    function isAbsent(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        return channel.sender == 0;\r\n    }\r\n\r\n    /// @notice Check if the channel is present: in open or settling state.\r\n    /// @param channelId Identifier of the channel.\r\n    function isPresent(bytes32 channelId) public view returns(bool) {\r\n        return !isAbsent(channelId);\r\n    }\r\n\r\n    /// @notice Check if the channel is in settling state: waits till the settling period is over.\r\n    /// @dev It is settling, if `settlingUntil` is set to non-zero.\r\n    /// @param channelId Identifier of the channel.\r\n    function isSettling(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel storage channel = channels[channelId];\r\n        return channel.settlingUntil != 0;\r\n    }\r\n\r\n    /// @notice Check if the channel is open: present and not settling.\r\n    /// @param channelId Identifier of the channel.\r\n    function isOpen(bytes32 channelId) public view returns(bool) {\r\n        return isPresent(channelId) && !isSettling(channelId);\r\n    }\r\n\r\n    /*** PAYMENT DIGEST ***/\r\n\r\n    /// @return Hash of the payment promise to sign.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount to send, and to claim later.\r\n    /// @param tokenContract Address of ERC20 token contract.\r\n    function paymentDigest(bytes32 channelId, uint256 payment, address tokenContract) public view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), channelId, payment, tokenContract));\r\n    }\r\n\r\n    /// @return Actually signed hash of the payment promise, considering \"Ethereum Signed Message\" prefix.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount to send, and to claim later.\r\n    function recoveryPaymentDigest(bytes32 channelId, uint256 payment, address tokenContract) internal view returns(bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return keccak256(abi.encodePacked(prefix, paymentDigest(channelId, payment, tokenContract)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isPresent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"settlingPeriod\",\"type\":\"uint256\"},{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"canDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"canStartSettling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isAbsent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isSettling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"settlingPeriod\",\"type\":\"uint256\"},{\"name\":\"settlingUntil\",\"type\":\"uint256\"},{\"name\":\"tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"canSettle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"paymentDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"startSettling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"DidOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"DidDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidStartSettling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidSettle\",\"type\":\"event\"}]","ContractName":"TokenUnidirectional","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a9cf56a6fc05f6e682dec87b314ecd14fef4e303e146116048063887283cbff"}]}