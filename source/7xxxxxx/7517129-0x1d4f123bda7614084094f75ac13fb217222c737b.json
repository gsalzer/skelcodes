{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.6;\r\n\r\n/** \r\n * xether.io - is a gambling ecosystem, which makes a difference by caring about its users.\r\n * Itâ€™s our passion for perfection, as well as finding and creating neat solutions,\r\n * that keeps us driven towards our goals.\r\n*/\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n      _name = name;\r\n      _symbol = symbol;\r\n      _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns (string memory) {\r\n      return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns (string memory) {\r\n      return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns (uint8) {\r\n      return _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  uint256 private _totalSupply;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Total number of tokens in existence\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n      return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param owner The address to query the balance of.\r\n   * @return A uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n      return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n      return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer token to a specified address\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n      _transfer(msg.sender, to, value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n      _approve(msg.sender, spender, value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another.\r\n   * Note that while this function emits an Approval event, this is not required as per the specification,\r\n   * and other compliant implementations may not emit the event.\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n      _transfer(from, to, value);\r\n      _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * Emits an Approval event.\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * Emits an Approval event.\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer token for a specified addresses\r\n   * @param from The address to transfer from.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n      require(to != address(0));\r\n\r\n      _balances[from] = _balances[from].sub(value);\r\n      _balances[to] = _balances[to].add(value);\r\n      emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n      require(account != address(0));\r\n\r\n      _totalSupply = _totalSupply.add(value);\r\n      _balances[account] = _balances[account].add(value);\r\n      emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n      require(account != address(0));\r\n\r\n      _totalSupply = _totalSupply.sub(value);\r\n      _balances[account] = _balances[account].sub(value);\r\n      emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve an address to spend another addresses' tokens.\r\n   * @param owner The address that owns the tokens.\r\n   * @param spender The address that will spend the tokens.\r\n   * @param value The number of tokens that can be spent.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n      require(spender != address(0));\r\n      require(owner != address(0));\r\n\r\n      _allowed[owner][spender] = value;\r\n      emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * Emits an Approval event (reflecting the reduced allowance).\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n      _burn(account, value);\r\n      _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary Percent {\r\n  // Solidity automatically throws when dividing by 0\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n\r\n  // storage\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) {\r\n      return 0;\r\n    }\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n\r\n  function toMemory(percent storage p) internal view returns (Percent.percent memory) {\r\n    return Percent.percent(p.num, p.den);\r\n  }\r\n\r\n  // memory\r\n  function mmul(percent memory p, uint a) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function msub(percent memory p, uint a) internal pure returns (uint) {\r\n    uint b = mmul(p, a);\r\n    if (b >= a) {\r\n      return 0;\r\n    }\r\n    return a - b;\r\n  }\r\n\r\n  function madd(percent memory p, uint a) internal pure returns (uint) {\r\n    return a + mmul(p, a);\r\n  }\r\n}\r\n\r\n/**\r\n* @title XetherToken is a basic ERC20 Token\r\n*/\r\ncontract XetherToken is ERC20Detailed(\"XetherEcosystemToken\", \"XEET\", 18), ERC20Burnable, Ownable {\r\n  /**\r\n  * Modifiers\r\n  */\r\n  modifier onlyParticipant {\r\n    require(showMyTokens() > 0);\r\n    _;\r\n  }\r\n\r\n  modifier hasDividends {\r\n    require(showMyDividends(true) > 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * Events\r\n  */\r\n  event onTokenBuy(\r\n    address indexed customerAddress,\r\n    uint256 incomeEth,\r\n    uint256 tokensCreated,\r\n    address indexed ref,\r\n    uint timestamp,\r\n    uint256 startPrice,\r\n    uint256 newPrice\r\n  );\r\n\r\n  event onTokenSell(\r\n    address indexed customerAddress,\r\n    uint256 tokensBurned,\r\n    uint256 earnedEth,\r\n    uint timestamp,\r\n    uint256 startPrice,\r\n    uint256 newPrice\r\n  );\r\n\r\n  event onReinvestment(\r\n    address indexed customerAddress,\r\n    uint256 reinvestEth,\r\n    uint256 tokensCreated\r\n  );\r\n\r\n  event onWithdraw(\r\n    address indexed customerAddress,\r\n    uint256 withdrawEth\r\n  );\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 tokens\r\n  );\r\n\r\n  using Percent for Percent.percent;\r\n  using SafeMath for *;\r\n\r\n  /**\r\n  * @dev percents\r\n  */\r\n  Percent.percent private inBonus_p  = Percent.percent(10, 100);           //   10/100  *100% = 10%\r\n  Percent.percent private outBonus_p  = Percent.percent(4, 100);           //   4/100  *100% = 4%\r\n  Percent.percent private refBonus_p = Percent.percent(30, 100);           //   30/100  *100% = 30%\r\n  Percent.percent private transferBonus_p = Percent.percent(1, 100);       //   1/100  *100% = 1%\r\n\r\n  /**\r\n  * @dev initial variables\r\n  */\r\n  address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  address public marketingAddress = DUMMY_ADDRESS;\r\n  uint256 constant internal tokenPriceInitial = 0.00005 ether;\r\n  uint256 constant internal tokenPriceIncremental = 0.0000000001 ether;\r\n  uint256 internal profitPerToken = 0;\r\n  uint256 internal decimalShift = 1e18;\r\n  uint256 internal currentTotalDividends = 0;\r\n\r\n  mapping(address => int256) internal payoutsTo;\r\n  mapping(address => uint256) internal refBalance;\r\n  mapping(address => address) internal referrals;\r\n\r\n  uint256 public actualTokenPrice = tokenPriceInitial;\r\n  uint256 public refMinBalanceReq = 50e18;\r\n\r\n  /**\r\n  * @dev Event to notify if transfer successful or failed\r\n  * after account approval verified\r\n  */\r\n  event TransferSuccessful(address indexed from_, address indexed to_, uint256 amount_);\r\n  event TransferFailed(address indexed from_, address indexed to_, uint256 amount_);\r\n  event debug(uint256 div1, uint256 div2);\r\n\r\n  /**\r\n  * @dev fallback function, buy tokens\r\n  */\r\n  function() payable external {\r\n    buyTokens(msg.sender, msg.value, referrals[msg.sender]);\r\n  }\r\n\r\n  /**\r\n  * Public\r\n  */\r\n  function setMarketingAddress(address newMarketingAddress) external onlyOwner {\r\n    marketingAddress = newMarketingAddress;\r\n  }\r\n\r\n  function ecosystemDividends() payable external {\r\n    uint dividends = msg.value;\r\n    uint256 toMarketingAmount = inBonus_p.mul(dividends);\r\n    uint256 toShareAmount = SafeMath.sub(dividends, toMarketingAmount);\r\n\r\n    buyTokens(marketingAddress, toMarketingAmount, address(0));\r\n    profitPerToken = profitPerToken.add(toShareAmount.mul(decimalShift).div(totalSupply()));\r\n  }\r\n\r\n  /**\r\n  * @dev main function to get/buy tokens\r\n  * @param _ref address of referal\r\n  */\r\n  function buy(address _ref) public payable returns (uint256) {\r\n    referrals[msg.sender] = _ref;\r\n    buyTokens(msg.sender, msg.value, _ref);\r\n  }\r\n\r\n  /**\r\n  * @dev main function to sell tokens\r\n  * @param _inRawTokens address of referal\r\n  */\r\n  function sell(uint256 _inRawTokens) onlyParticipant public {\r\n    sellTokens(_inRawTokens);\r\n  }\r\n\r\n  /**\r\n  * @dev function to withdraw balance\r\n  */\r\n  function withdraw() hasDividends public {\r\n    address payable _customerAddress = msg.sender;\r\n    uint256 _dividends = showMyDividends(false);\r\n\r\n    payoutsTo[_customerAddress] += (int256) (_dividends);\r\n    _dividends = _dividends.add(refBalance[_customerAddress]);\r\n    refBalance[_customerAddress] = 0;\r\n\r\n    _customerAddress.transfer(_dividends);\r\n\r\n    emit onWithdraw(_customerAddress, _dividends);\r\n  }\r\n\r\n  /**\r\n  * @dev function to withdraw balance\r\n  */\r\n  function withdraw(address customerAddress) internal {\r\n    uint256 _dividends = dividendsOf(customerAddress);\r\n\r\n    payoutsTo[customerAddress] += (int256) (_dividends);\r\n    _dividends = _dividends.add(refBalance[customerAddress]);\r\n    refBalance[customerAddress] = 0;\r\n\r\n    if (_dividends > 0) {\r\n      address payable _customerAddress = address(uint160(customerAddress));\r\n      _customerAddress.transfer(_dividends);\r\n\r\n      emit onWithdraw(customerAddress, _dividends);\r\n    }\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    address _customerAddress = msg.sender;\r\n    require(value <= balanceOf(_customerAddress));\r\n    require(to != address(0));\r\n\r\n    if (showMyDividends(true) > 0) {\r\n      withdraw();\r\n    }\r\n\r\n    uint256 _tokenFee = transferBonus_p.mul(value);\r\n    uint256 _taxedTokens = value.sub(_tokenFee);\r\n    uint256 _dividends = tokensToEth(_tokenFee);\r\n\r\n    _transfer(_customerAddress, to, _taxedTokens);\r\n    _burn(_customerAddress, _tokenFee);\r\n\r\n    payoutsTo[_customerAddress] -= (int256) (profitPerToken.mul(value).div(decimalShift));\r\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens).div(decimalShift));\r\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\r\n\r\n    emit TransferSuccessful(_customerAddress, to, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 _tokenFee = transferBonus_p.mul(value);\r\n    uint256 _taxedTokens = value.sub(_tokenFee);\r\n    uint256 _dividends = tokensToEth(_tokenFee);\r\n\r\n    withdraw(from);\r\n\r\n    ERC20.transferFrom(from, to, _taxedTokens);\r\n    _burn(from, _tokenFee);\r\n\r\n    payoutsTo[from] -= (int256) (profitPerToken.mul(value).div(decimalShift));\r\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens).div(decimalShift));\r\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\r\n\r\n    emit TransferSuccessful(from, to, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev function to sell all tokens and withdraw balance\r\n  */\r\n  function exit() public {\r\n    address _customerAddress = msg.sender;\r\n    uint256 _tokens = balanceOf(_customerAddress);\r\n\r\n    if (_tokens > 0) sell(_tokens);\r\n\r\n    withdraw();\r\n  }\r\n\r\n  /**\r\n  * @dev function to reinvest of dividends\r\n  */\r\n  function reinvest() onlyParticipant public {\r\n    uint256 _dividends = showMyDividends(false);\r\n    address _customerAddress = msg.sender;\r\n\r\n    payoutsTo[_customerAddress] += (int256) (_dividends);\r\n    _dividends = _dividends.add(refBalance[_customerAddress]);\r\n    refBalance[_customerAddress] = 0;\r\n\r\n    uint256 _tokens = buyTokens(_customerAddress, _dividends, address(0));\r\n\r\n    emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n  }\r\n\r\n  /**\r\n  * @dev show actual tokens price\r\n  */\r\n  function getActualTokenPrice() public view returns (uint256) {\r\n    return actualTokenPrice;\r\n  }\r\n\r\n  /**\r\n  * @dev show owner dividents\r\n  * @param _includeReferralBonus true/false\r\n  */\r\n  function showMyDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n    address _customerAddress = msg.sender;\r\n    return _includeReferralBonus ? dividendsOf(_customerAddress).add(refBalance[_customerAddress]) : dividendsOf(_customerAddress) ;\r\n  }\r\n\r\n  /**\r\n  * @dev show owner tokens\r\n  */\r\n  function showMyTokens() public view returns (uint256) {\r\n      address _customerAddress = msg.sender;\r\n      return balanceOf(_customerAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev show address dividents\r\n  * @param _customerAddress address to show dividends for\r\n  */\r\n  function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n    return (uint256) ((int256) (profitPerToken.mul(balanceOf(_customerAddress)).div(decimalShift)) - payoutsTo[_customerAddress]);\r\n  }\r\n\r\n  /**\r\n * @dev function to show ether/tokens ratio\r\n * @param _eth eth amount\r\n */\r\n function showEthToTokens(uint256 _eth) public view returns (uint256 _tokensReceived, uint256 _newTokenPrice) {\r\n   uint256 b = actualTokenPrice.mul(2).sub(tokenPriceIncremental);\r\n   uint256 c = _eth.mul(2);\r\n   uint256 d = SafeMath.add(b**2, tokenPriceIncremental.mul(4).mul(c));\r\n\r\n   // d = b**2 + 4 * a * c;\r\n   // (-b + Math.sqrt(d)) / (2*a)\r\n   _tokensReceived = SafeMath.div(sqrt(d).sub(b).mul(decimalShift), tokenPriceIncremental.mul(2));\r\n   _newTokenPrice = actualTokenPrice.add(tokenPriceIncremental.mul(_tokensReceived).div(decimalShift));\r\n }\r\n\r\n /**\r\n * @dev function to show tokens/ether ratio\r\n * @param _tokens tokens amount\r\n */\r\n function showTokensToEth(uint256 _tokens) public view returns (uint256 _eth, uint256 _newTokenPrice) {\r\n   // (2 * a1 - delta * (n - 1)) / 2 * n\r\n   _eth = SafeMath.sub(actualTokenPrice.mul(2), tokenPriceIncremental.mul(_tokens.sub(1e18)).div(decimalShift)).div(2).mul(_tokens).div(decimalShift);\r\n   _newTokenPrice = actualTokenPrice.sub(tokenPriceIncremental.mul(_tokens).div(decimalShift));\r\n }\r\n\r\n function sqrt(uint x) pure private returns (uint y) {\r\n    uint z = (x + 1) / 2;\r\n    y = x;\r\n    while (z < y) {\r\n        y = z;\r\n        z = (x / z + z) / 2;\r\n    }\r\n }\r\n\r\n  /**\r\n  * Internals\r\n  */\r\n\r\n  /**\r\n  * @dev function to buy tokens, calculate bonus, dividends, fees\r\n  * @param _inRawEth eth amount\r\n  * @param _ref address of referal\r\n  */\r\n  function buyTokens(address customerAddress, uint256 _inRawEth, address _ref) internal returns (uint256) {\r\n      uint256 _dividends = inBonus_p.mul(_inRawEth);\r\n      uint256 _inEth = _inRawEth.sub(_dividends);\r\n      uint256 _tokens = 0;\r\n      uint256 startPrice = actualTokenPrice;\r\n\r\n      if (_ref != address(0) && _ref != customerAddress && balanceOf(_ref) >= refMinBalanceReq) {\r\n        uint256 _refBonus = refBonus_p.mul(_dividends);\r\n        _dividends = _dividends.sub(_refBonus);\r\n        refBalance[_ref] = refBalance[_ref].add(_refBonus);\r\n      }\r\n\r\n      uint256 _totalTokensSupply = totalSupply();\r\n\r\n      if (_totalTokensSupply > 0) {\r\n        _tokens = ethToTokens(_inEth);\r\n        require(_tokens > 0);\r\n        profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(_totalTokensSupply));\r\n        _totalTokensSupply = _totalTokensSupply.add(_tokens);\r\n      } else {\r\n        // initial protect\r\n        if (!isOwner()) {\r\n            address(uint160(owner())).transfer(msg.value);\r\n            return 0;\r\n        }\r\n\r\n        _totalTokensSupply = ethToTokens(_inRawEth);\r\n        _tokens = _totalTokensSupply;\r\n      }\r\n\r\n      _mint(customerAddress, _tokens);\r\n      payoutsTo[customerAddress] += (int256) (profitPerToken.mul(_tokens).div(decimalShift));\r\n\r\n      emit onTokenBuy(customerAddress, _inEth, _tokens, _ref, now, startPrice, actualTokenPrice);\r\n\r\n      return _tokens;\r\n  }\r\n\r\n  /**\r\n  * @dev function to sell tokens, calculate dividends, fees\r\n  * @param _inRawTokens eth amount\r\n  */\r\n  function sellTokens(uint256 _inRawTokens) internal returns (uint256) {\r\n    address _customerAddress = msg.sender;\r\n    require(_inRawTokens <= balanceOf(_customerAddress));\r\n    uint256 _tokens = _inRawTokens;\r\n    uint256 _eth = 0;\r\n    uint256 startPrice = actualTokenPrice;\r\n\r\n    _eth = tokensToEth(_tokens);\r\n    _burn(_customerAddress, _tokens);\r\n\r\n    uint256 _dividends = outBonus_p.mul(_eth);\r\n    uint256 _ethTaxed = _eth.sub(_dividends);\r\n    int256 unlockPayout = (int256) (_ethTaxed.add((profitPerToken.mul(_tokens)).div(decimalShift)));\r\n\r\n    payoutsTo[_customerAddress] -= unlockPayout;\r\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\r\n\r\n    emit onTokenSell(_customerAddress, _tokens, _eth, now, startPrice, actualTokenPrice);\r\n  }\r\n\r\n  /**\r\n  * @dev function to calculate ether/tokens ratio\r\n  * @param _eth eth amount\r\n  */\r\n  function ethToTokens(uint256 _eth) internal returns (uint256 _tokensReceived) {\r\n    uint256 _newTokenPrice;\r\n    (_tokensReceived, _newTokenPrice) = showEthToTokens(_eth);\r\n    actualTokenPrice = _newTokenPrice;\r\n  }\r\n\r\n  /**\r\n  * @dev function to calculate tokens/ether ratio\r\n  * @param _tokens tokens amount\r\n  */\r\n  function tokensToEth(uint256 _tokens) internal returns (uint256 _eth) {\r\n    uint256 _newTokenPrice;\r\n    (_eth, _newTokenPrice) = showTokensToEth(_tokens);\r\n    actualTokenPrice = _newTokenPrice;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"showEthToTokens\",\"outputs\":[{\"name\":\"_tokensReceived\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refMinBalanceReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ecosystemDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"showTokensToEth\",\"outputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"showMyDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inRawTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomeEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"earnedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reinvestEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawEth\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"div1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"div2\",\"type\":\"uint256\"}],\"name\":\"debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"XetherToken","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7bfd1ce1a92f9f2f8eb8556a113a82df62ecf88c9879e76f7c97fc6af7d7431"}]}