{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract szfcMerkleRoot {\r\n\r\n    uint64 oneHour= 3600000;\r\n\r\n    address owner;\r\n\r\n    mapping(bytes32 => uint64) hash2timestamp;\r\n\r\n    mapping(uint64=> bytes32[]) public timestamp2hashes;  //date -> merkle root hash\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n    function push(uint64 _timestamp, bytes32 _root) external{\r\n\r\n        require(msg.sender == owner);\r\n\r\n        require(checkTime(_timestamp));\r\n        require(hash2timestamp[_root] == 0);\r\n\r\n        //归结\r\n        uint64 hour_point = _timestamp - _timestamp % oneHour;\r\n\r\n        hash2timestamp[_root] = _timestamp;\r\n\r\n        bytes32[] storage hashes = timestamp2hashes[hour_point];\r\n\r\n        hashes.push(_root);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function getAllHashes(uint64 _timestamp) external view returns(bytes32[] memory){\r\n\r\n        uint64 hour_point = _timestamp - _timestamp % oneHour;\r\n\r\n        bytes32[] storage hashes = timestamp2hashes[hour_point];\r\n\r\n        return hashes;\r\n\r\n    }\r\n\r\n\r\n    function getLastHash(uint64 _timestamp) public view returns(bytes32){\r\n\r\n        uint64 hour_point = _timestamp - _timestamp % oneHour;\r\n\r\n        bytes32[] storage hashes = timestamp2hashes[hour_point];\r\n\r\n        if( hashes.length > 0 ) {\r\n            return hashes[hashes.length-1];\r\n        }\r\n\r\n        return 0x00;\r\n\r\n    }\r\n\r\n\r\n    function getTimestamp(bytes32 _root) external view returns(uint64){\r\n\r\n        return hash2timestamp[_root];\r\n\r\n    }\r\n\r\n\r\n    function getOwner() external view returns(address){\r\n\r\n        return owner;\r\n\r\n    }\r\n\r\n\r\n    function checkTime(uint64 _timestamp) private view returns (bool) {\r\n\r\n        return ( _timestamp < now * 1000 );\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"getLastHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"getAllHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamp2hashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"szfcMerkleRoot","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://55db5adcee19e4114e071a53a7c2f3aeb189b94df0da6ac5aeaac8061c55648c"}]}