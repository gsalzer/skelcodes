{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Kitties {\r\n\r\n    function ownerOf(uint id) public view returns (address);\r\n\r\n}\r\n\r\ncontract ICollectable {\r\n\r\n    function mint(uint32 delegateID, address to) public returns (uint);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n}\r\n\r\ncontract IAuction {\r\n\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt);\r\n}\r\n\r\ncontract IPack {\r\n\r\n    function purchase(uint16, address) public payable;\r\n    function purchaseFor(address, uint16, address) public payable;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract CatInThePack is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // the pack of GU cards which will be purchased\r\n    IPack public pack;\r\n    // the core CK contract\r\n    Kitties public kitties;\r\n    // the core GU collectable contract\r\n    ICollectable public collectables;\r\n    // the list of CK auction contracts, usually [Sale, Sire]\r\n    IAuction[] public auctions;\r\n    \r\n    // whether it is currently possible to claim cats\r\n    bool public canClaim = true;\r\n    // the collectable delegate id \r\n    uint32 public delegateID;\r\n    // whether the contract is locked (i.e. no more claiming)\r\n    bool public locked = false;\r\n    // whether kitties on auction are considered to be owned by the sender\r\n    bool public includeAuctions = true;\r\n    // contract where funds will be sent\r\n    address public vault;\r\n    // max number of kitties per call\r\n    uint public claimLimit = 20;\r\n    // price per statue\r\n    uint public price = 0.024 ether;\r\n    \r\n    \r\n    // map to track whether a kitty has been claimed\r\n    mapping(uint => bool) public claimed;\r\n    // map from statue id to kitty id\r\n    mapping(uint => uint) public statues;\r\n\r\n    constructor(IPack _pack, IAuction[] memory _auctions, Kitties _kitties, \r\n        ICollectable _collectables, uint32 _delegateID, address _vault) public {\r\n        pack = _pack;\r\n        auctions = _auctions;\r\n        kitties = _kitties;\r\n        collectables = _collectables;\r\n        delegateID = _delegateID;\r\n        vault = _vault;\r\n    }\r\n\r\n    event CatsClaimed(uint[] statueIDs, uint[] kittyIDs);\r\n\r\n    // claim statues tied to the following kittyIDs\r\n    function claim(uint[] memory kittyIDs, address referrer) public payable returns (uint[] memory ids) {\r\n\r\n        require(canClaim, \"claiming not enabled\");\r\n        require(kittyIDs.length > 0, \"you must claim at least one cat\");\r\n        require(claimLimit >= kittyIDs.length, \"must claim >= the claim limit at a time\");\r\n        \r\n        // statue id array\r\n        ids = new uint[](kittyIDs.length);\r\n        \r\n        for (uint i = 0; i < kittyIDs.length; i++) {\r\n\r\n            uint kittyID = kittyIDs[i];\r\n\r\n            // mark the kitty as being claimed\r\n            require(!claimed[kittyID], \"kitty must not be claimed\");\r\n            claimed[kittyID] = true;\r\n\r\n            require(ownsOrSelling(kittyID), \"you must own all the cats you claim\");\r\n\r\n            // create the statue token\r\n            uint id = collectables.mint(delegateID, msg.sender);\r\n            ids[i] = id;\r\n            // record which kitty is associated with this statue\r\n            statues[id] = kittyID;    \r\n        }\r\n        \r\n        // calculate the total purchase price\r\n        uint totalPrice = price.mul(kittyIDs.length);\r\n\r\n        require(msg.value >= totalPrice, \"wrong value sent to contract\");\r\n       \r\n        uint half = totalPrice.div(2);\r\n\r\n        // send half the price to buy the packs\r\n        pack.purchaseFor.value(half)(msg.sender, uint16(kittyIDs.length), referrer); \r\n\r\n        // send the other half directly to the vault contract\r\n        vault.transfer(half);\r\n\r\n        emit CatsClaimed(ids, kittyIDs);\r\n        \r\n        return ids;\r\n    }\r\n\r\n    // returns whether the msg.sender owns or is auctioning a kitty\r\n    function ownsOrSelling(uint kittyID) public view returns (bool) {\r\n        // call to the core CK contract to find the owner of the kitty\r\n        address owner = kitties.ownerOf(kittyID);\r\n        if (owner == msg.sender) {\r\n            return true;\r\n        } \r\n        // check whether we are including the auction contracts\r\n        if (includeAuctions) {\r\n            address seller;\r\n            for (uint i = 0; i < auctions.length; i++) {\r\n                IAuction auction = auctions[i];\r\n                // make sure you check that this cat is owned by the auction \r\n                // before calling the method, or getAuction will throw\r\n                if (owner == address(auction)) {\r\n                    (seller, , , ,) = auction.getAuction(kittyID);\r\n                    return seller == msg.sender;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n \r\n    function setCanClaim(bool _can, bool lock) public onlyOwner {\r\n        require(!locked, \"claiming is permanently locked\");\r\n        if (lock) {\r\n            require(!_can, \"can't lock on permanently\");\r\n            locked = true;\r\n        }\r\n        canClaim = _can;\r\n    }\r\n\r\n    function getKitty(uint statueID) public view returns (uint) {\r\n        return statues[statueID];\r\n    }\r\n\r\n    function setClaimLimit(uint limit) public onlyOwner {\r\n        claimLimit = limit;\r\n    }\r\n\r\n    function setIncludeAuctions(bool _include) public onlyOwner {\r\n        includeAuctions = _include;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setClaimLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_can\",\"type\":\"bool\"},{\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"setCanClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kitties\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kittyIDs\",\"type\":\"uint256[]\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"includeAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"kittyID\",\"type\":\"uint256\"}],\"name\":\"ownsOrSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectables\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statueID\",\"type\":\"uint256\"}],\"name\":\"getKitty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pack\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_include\",\"type\":\"bool\"}],\"name\":\"setIncludeAuctions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pack\",\"type\":\"address\"},{\"name\":\"_auctions\",\"type\":\"address[]\"},{\"name\":\"_kitties\",\"type\":\"address\"},{\"name\":\"_collectables\",\"type\":\"address\"},{\"name\":\"_delegateID\",\"type\":\"uint32\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statueIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"kittyIDs\",\"type\":\"uint256[]\"}],\"name\":\"CatsClaimed\",\"type\":\"event\"}]","ContractName":"CatInThePack","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000777f76d195795268388789343068e4fcd28691900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d000000000000000000000000a5e5be69c923c701ae6ac8f1f5936af3ae610c68000000000000000000000000000000000000000000000000000000000000000200000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd6890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c7af99fe5513eb6710e6d5f44f9989da40f27f26000000000000000000000000b1690c08e213a35ed9bab7b318de14420fb57d8c","Library":"","SwarmSource":"bzzr://cbe7d3643db389b4a1b14b2e5fc804d4fda432f727e5866698f6371ed7aa49ea"}]}