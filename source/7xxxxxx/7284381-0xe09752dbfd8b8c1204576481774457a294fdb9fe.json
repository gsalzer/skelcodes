{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: contracts/governance/DelegateReference.sol\r\n\r\n/**\r\n* @title Delegate reference to be used in other contracts\r\n*/\r\ninterface DelegateReference {\r\n    /**\r\n    * @notice Stake specified amount of tokens to the delegate to participate in coin distribution\r\n    */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Unstake specified amount of tokens from the delegate\r\n    */\r\n    function unstake(uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Return number of tokens staked by the specified staker\r\n    */\r\n    function stakeOf(address _staker) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Sets Aerum address for delegate & calling staker\r\n    */\r\n    function setAerumAddress(address _aerum) external;\r\n}\r\n\r\n// File: contracts/vesting/MultiVestingWallet.sol\r\n\r\n/**\r\n * @title TokenVesting\r\n * @notice A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract MultiVestingWallet is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    event Released(address indexed account, uint256 amount);\r\n    event Revoked(address indexed account);\r\n    event UnRevoked(address indexed account);\r\n    event ReturnTokens(uint256 amount);\r\n    event Promise(address indexed account, uint256 amount);\r\n    event Stake(address indexed delegate, uint256 amount);\r\n    event Unstake(address indexed delegate, uint256 amount);\r\n\r\n    ERC20 public token;\r\n\r\n    uint256 public cliff;\r\n    uint256 public start;\r\n    uint256 public duration;\r\n    uint256 public staked;\r\n\r\n    bool public revocable;\r\n\r\n    address[] public accounts;\r\n    mapping(address => bool) public known;\r\n    mapping(address => uint256) public promised;\r\n    mapping(address => uint256) public released;\r\n    mapping(address => bool) public revoked;\r\n\r\n    /**\r\n     * @notice Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * of the balance will have vested.\r\n     * @param _token token being vested\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _start the time (as Unix time) at which point vesting starts\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _revocable whether the vesting is revocable or not\r\n     */\r\n    constructor(\r\n        address _token,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        bool _revocable\r\n    )\r\n    public\r\n    {\r\n        require(_token != address(0));\r\n        require(_cliff <= _duration);\r\n\r\n        token = ERC20(_token);\r\n        revocable = _revocable;\r\n        duration = _duration;\r\n        cliff = _start.add(_cliff);\r\n        start = _start;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n    function release() external {\r\n        _release(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to list of beneficiary.\r\n     * @param _addresses List of beneficiaries\r\n     */\r\n    function releaseBatch(address[] _addresses) external {\r\n        for (uint256 index = 0; index < _addresses.length; index++) {\r\n            _release(_addresses[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to batch of beneficiaries (starting 0)\r\n     * @param _start Index of first beneficiary to release tokens\r\n     * @param _count Number of beneficiaries to release tokens\r\n     */\r\n    function releaseBatchPaged(uint256 _start, uint256 _count) external {\r\n        uint256 last = _start.add(_count);\r\n        if (last > accounts.length) {\r\n            last = accounts.length;\r\n        }\r\n\r\n        for (uint256 index = _start; index < last; index++) {\r\n            _release(accounts[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to all beneficiaries.\r\n     */\r\n    function releaseAll() external {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _release(accounts[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Internal transfer of vested tokens to beneficiary.\r\n     */\r\n    function _release(address _beneficiary) internal {\r\n        uint256 amount = releasableAmount(_beneficiary);\r\n        if (amount > 0) {\r\n            released[_beneficiary] = released[_beneficiary].add(amount);\r\n            token.safeTransfer(_beneficiary, amount);\r\n\r\n            emit Released(_beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param _beneficiary Account which will be revoked\r\n     */\r\n    function revoke(address _beneficiary) public onlyOwner {\r\n        require(revocable);\r\n        require(!revoked[_beneficiary]);\r\n\r\n        promised[_beneficiary] = vestedAmount(_beneficiary);\r\n        revoked[_beneficiary] = true;\r\n\r\n        emit Revoked(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting for few addresses.\r\n     * @param _addresses Accounts which will be unrevoked\r\n     */\r\n    function revokeBatch(address[] _addresses) external onlyOwner {\r\n        for (uint256 index = 0; index < _addresses.length; index++) {\r\n            revoke(_addresses[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to unrevoke the vesting.\r\n     * @param _beneficiary Account which will be unrevoked\r\n     */\r\n    function unRevoke(address _beneficiary) public onlyOwner {\r\n        require(revocable);\r\n        require(revoked[_beneficiary]);\r\n\r\n        revoked[_beneficiary] = false;\r\n\r\n        emit UnRevoked(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to unrevoke the vesting for few addresses.\r\n     * @param _addresses Accounts which will be unrevoked\r\n     */\r\n    function unrevokeBatch(address[] _addresses) external onlyOwner {\r\n        for (uint256 index = 0; index < _addresses.length; index++) {\r\n            unRevoke(_addresses[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param _beneficiary Account which gets vested tokens\r\n     */\r\n    function releasableAmount(address _beneficiary) public view returns (uint256) {\r\n        return vestedAmount(_beneficiary).sub(released[_beneficiary]);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the amount that has already vested.\r\n     * @param _beneficiary Account which gets vested tokens\r\n     */\r\n    function vestedAmount(address _beneficiary) public view returns (uint256) {\r\n        uint256 totalPromised = promised[_beneficiary];\r\n\r\n        if (block.timestamp < cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= start.add(duration) || revoked[_beneficiary]) {\r\n            return totalPromised;\r\n        } else {\r\n            return totalPromised.mul(block.timestamp.sub(start)).div(duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the amount of free tokens in contract\r\n     */\r\n    function remainingBalance() public view returns (uint256) {\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        uint256 totalPromised = 0;\r\n        uint256 totalReleased = 0;\r\n\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            address account = accounts[index];\r\n            totalPromised = totalPromised.add(promised[account]);\r\n            totalReleased = totalReleased.add(released[account]);\r\n        }\r\n\r\n        uint256 promisedNotReleased = totalPromised.sub(totalReleased);\r\n        if (promisedNotReleased > tokenBalance) {\r\n            return 0;\r\n        }\r\n        return tokenBalance.sub(promisedNotReleased);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates amount of tokens promised\r\n    */\r\n    function totalPromised() public view returns (uint256) {\r\n        uint256 total = 0;\r\n\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            address account = accounts[index];\r\n            total = total.add(promised[account]);\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates amount of tokens released\r\n    */\r\n    function totalReleased() public view returns (uint256) {\r\n        uint256 total = 0;\r\n\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            address account = accounts[index];\r\n            total = total.add(released[account]);\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns free tokens to owner\r\n     */\r\n    function returnRemaining() external onlyOwner {\r\n        uint256 remaining = remainingBalance();\r\n        require(remaining > 0);\r\n\r\n        token.safeTransfer(owner, remaining);\r\n\r\n        emit ReturnTokens(remaining);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns all tokens to owner\r\n     */\r\n    function returnAll() external onlyOwner {\r\n        uint256 remaining = token.balanceOf(address(this));\r\n        token.safeTransfer(owner, remaining);\r\n\r\n        emit ReturnTokens(remaining);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets promise to account\r\n     * @param _beneficiary Account which gets vested tokens\r\n     * @param _amount Amount of tokens vested\r\n     */\r\n    function promise(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        if (!known[_beneficiary]) {\r\n            known[_beneficiary] = true;\r\n            accounts.push(_beneficiary);\r\n        }\r\n\r\n        promised[_beneficiary] = _amount;\r\n\r\n        emit Promise(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets promise to list of account\r\n     * @param _addresses Accounts which will get promises\r\n     * @param _amounts Promise amounts\r\n     */\r\n    function promiseBatch(address[] _addresses, uint256[] _amounts) external onlyOwner {\r\n        require(_addresses.length == _amounts.length);\r\n\r\n        for (uint256 index = 0; index < _addresses.length; index++) {\r\n            promise(_addresses[index], _amounts[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns full list if beneficiaries\r\n     */\r\n    function getBeneficiaries() external view returns (address[]) {\r\n        return accounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns number of beneficiaries\r\n     */\r\n    function getBeneficiariesCount() external view returns (uint256) {\r\n        return accounts.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Stake specified amount of vested tokens to the delegate by the beneficiary\r\n     */\r\n    function stake(address _delegate, uint256 _amount) external onlyOwner {\r\n        staked = staked.add(_amount);\r\n        token.approve(_delegate, _amount);\r\n        DelegateReference(_delegate).stake(_amount);\r\n\r\n        emit Stake(_delegate, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake the given number of vested tokens by the beneficiary\r\n     */\r\n    function unstake(address _delegate, uint256 _amount) external onlyOwner {\r\n        staked = staked.sub(_amount);\r\n        DelegateReference(_delegate).unstake(_amount);\r\n\r\n        emit Unstake(_delegate, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\registry\\ContractRegistry.sol\r\n\r\n/**\r\n * @title Contract registry\r\n */\r\ncontract ContractRegistry is Ownable {\r\n\r\n    struct ContractRecord {\r\n        address addr;\r\n        bytes32 name;\r\n        bool enabled;\r\n    }\r\n\r\n    address private token;\r\n\r\n    /**\r\n     * @dev contracts Mapping of contracts\r\n     */\r\n    mapping(bytes32 => ContractRecord) private contracts;\r\n    /**\r\n     * @dev contracts Mapping of contract names\r\n     */\r\n    bytes32[] private contractsName;\r\n\r\n    event ContractAdded(bytes32 indexed _name);\r\n    event ContractRemoved(bytes32 indexed _name);\r\n\r\n    constructor(address _token) public {\r\n        require(_token != address(0), \"Token is required\");\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns contract by name\r\n     * @param _name Contract's name\r\n     */\r\n    function getContractByName(bytes32 _name) external view returns (address, bytes32, bool) {\r\n        ContractRecord memory record = contracts[_name];\r\n        if(record.addr == address(0) || !record.enabled) {\r\n            return;\r\n        }\r\n        return (record.addr, record.name, record.enabled);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns contract's names\r\n     */\r\n    function getContractNames() external view returns (bytes32[]) {\r\n        uint count = 0;\r\n        for(uint i = 0; i < contractsName.length; i++) {\r\n            if(contracts[contractsName[i]].enabled) {\r\n                count++;\r\n            }\r\n        }\r\n        bytes32[] memory result = new bytes32[](count);\r\n        uint j = 0;\r\n        for(i = 0; i < contractsName.length; i++) {\r\n            if(contracts[contractsName[i]].enabled) {\r\n                result[j] = contractsName[i];\r\n                j++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * of the balance will have vested.\r\n     * @param _name contract's name\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _start the time (as Unix time) at which point vesting starts\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _revocable whether the vesting is revocable or not\r\n     */\r\n    function addContract(\r\n        bytes32 _name,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        bool _revocable) external onlyOwner {\r\n        require(contracts[_name].addr == address(0), \"Contract's name should be unique\");\r\n        require(_cliff <= _duration, \"Cliff shall be bigger than duration\");\r\n\r\n        MultiVestingWallet wallet = new MultiVestingWallet(token, _start, _cliff, _duration, _revocable);\r\n        wallet.transferOwnership(msg.sender);\r\n        address walletAddr = address(wallet);\r\n        \r\n        ContractRecord memory record = ContractRecord({\r\n            addr: walletAddr,\r\n            name: _name,\r\n            enabled: true\r\n        });\r\n        contracts[_name] = record;\r\n        contractsName.push(_name);\r\n\r\n        emit ContractAdded(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables/disables contract by address\r\n     * @param _name Name of the contract\r\n     */\r\n    function setEnabled(bytes32 _name, bool enabled) external onlyOwner {\r\n        ContractRecord memory record = contracts[_name];\r\n        require(record.addr != address(0), \"Contract with specified address does not exist\");\r\n\r\n        contracts[_name].enabled = enabled;\r\n    }\r\n\r\n     /**\r\n     * @dev Set's new name\r\n     * @param _oldName Old name of the contract\r\n     * @param _newName New name of the contract\r\n     */\r\n    function setNewName(bytes32 _oldName, bytes32 _newName) external onlyOwner {\r\n        require(contracts[_newName].addr == address(0), \"Contract's name should be unique\");\r\n\r\n        ContractRecord memory record = contracts[_oldName];\r\n        require(record.addr != address(0), \"Contract's old name should be defined\");\r\n\r\n        record.name = _newName;\r\n        contracts[_newName] = record;\r\n        contractsName.push(_newName);\r\n\r\n        delete contracts[_oldName];\r\n        contractsName = removeByValue(contractsName, _oldName);\r\n    }\r\n\r\n    function removeByValue(bytes32[] memory _array, bytes32 _name) private pure returns(bytes32[]) {\r\n        uint i = 0;\r\n        uint j = 0;\r\n        bytes32[] memory outArray = new bytes32[](_array.length - 1);\r\n        while (i < _array.length) {\r\n            if(_array[i] != _name) {\r\n                outArray[j] = _array[i];\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n        return outArray;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"addContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldName\",\"type\":\"bytes32\"},{\"name\":\"_newName\",\"type\":\"bytes32\"}],\"name\":\"setNewName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getContractByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ContractRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81","Library":"","SwarmSource":"bzzr://e31f03c35bbf61af00dae7a208fc906f7ade3ea2e92de796cd085a8ae1356b89"}]}