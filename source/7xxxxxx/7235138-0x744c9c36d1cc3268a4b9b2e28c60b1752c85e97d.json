{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n// @title Alluva (ALV) Token Contract\r\n// @owner Alluva\r\n\r\n// @notice Safe Maths Contract to stop over/underflow errors\r\ncontract SafeMath {\r\n    // @dev safe addition, reverts if integer overflow\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    // @dev safe subtraction, reverts if integer underflow\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    // @dev safe multiplication, reverts if integer overflow\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    // @dev safe division, revert on division by zero\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// @title ERC Token Standard #20 Interface\r\n// @notice https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// @dev ERC20 contract framework with default function definitions\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// @title Contract ownership functionality\r\n// @notice based on OpenZeppelin Ownable.sol\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    // @dev sets msg.sender to contract owner on initial deployment\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // @dev modifier to check ownership before function execution\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // @notice transfer ownership from one address to another\r\n    // @param _newOwner The address of the new owner\r\n    // @dev can only be executed by contract owner\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    // @notice function for new owner to accept contract ownership\r\n    // @dev reverts if called before transferOwnership\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\n// @title Alluva ERC20 Token\r\n// @notice Inherits default interface, ownership and safe maths.\r\ncontract AlluvaToken is ERC20Interface, Owned, SafeMath {\r\n    address public owner = msg.sender;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // @dev Constructor function\r\n    constructor() public {\r\n        symbol = \"ALV\";\r\n        name = \"Alluva\";\r\n        decimals = 18;\r\n        totalSupply = 3000000000000000000000000000;\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n    // @dev Returns the token balance for provided address\r\n    // @param _owner The address of token owner\r\n    // @return Balance of requested address\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // @dev Transfer tokens from sender to another address\r\n    // @param _to Address of recipient\r\n    // @param _value Number of tokens to transfer (in smallest divisible unit)\r\n    // @return True if transaction was successful\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev Transfer _value tokens from address _from to address _to. Caller\r\n    // needs to be approved by _from, using approve method, prior to calling\r\n    // @param _from Address to transfer tokens from\r\n    // @param _to Address to transfer tokens to\r\n    // @param _value Number of tokens to transfer (in smallest divisible unit)\r\n    // @return True if transaction was successful\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev Approves _spender to transfer _value tokens from message sender address\r\n    // @notice Frontend/Client should set allowance to 0 prior to updating to\r\n    // prevent approve/transferFrom attack vector as described here:\r\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    // @param _spender Address to allocate spending limit to\r\n    // @param _value Number of tokens to allow spender (in smallest divisible unit)\r\n    // @return True if transaction was successful\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev Returns the number of tokens that can be transferred from _owner to\r\n    // _spender, set by approve method\r\n    // @param _owner Address of token owner\r\n    // @param _spender Address of approved spender\r\n    // @return Remaining approved spending\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // @dev Increase the amount of tokens that _spender can transfer from owner\r\n    // approve should be called when allowed[_spender] == 0. To increment\r\n    // allowed value use this function to avoid 2 calls (and wait until the\r\n    // first transaction is mined)\r\n    // From OpenZeppelin ERC20.sol\r\n    // Emits an Approval event\r\n    // @param _spender The address that is allowed to spend funds\r\n    // @param _addedValue The value to add to allowance\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    // @dev Decrease the amount of tokens that _spender can transfer from owner\r\n    // approve should be called when allowed[_spender] == 0. To decrease\r\n    // allowed value use this function to avoid 2 calls (and wait until the\r\n    // first transaction is mined)\r\n    // From OpenZeppelin ERC20.sol\r\n    // Emits an Approval event\r\n    // @param _spender The address that is allowed to spend funds\r\n    // @param _subtractedValue The value to subtract from allowance\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = safeSub(allowed[msg.sender][_spender], _subtractedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    // @dev Fallback function to reject ether sent to contract\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    // @dev Allow contract owner to transfer other tokens sent to contract\r\n    // @param _tokenAddress contract address of token to transfer\r\n    // @param _tokens number of tokens to transfer\r\n    // @return True if transaction was successful\r\n    function transferAnyERC20Token(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AlluvaToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb0f01dbdbed10eab6f470813bb1f0f12005b44d52bb5993f549f9bad3fed07d"}]}