{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary StringUtils {\r\n    \r\n    function toAsciiString(address x) internal pure returns (string memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint i = 0; i < 20; i++) {\r\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            s[2*i] = _char(hi);\r\n            s[2*i+1] = _char(lo);            \r\n        }\r\n        return string(s);\r\n    }\r\n    \r\n    function _char(byte b) internal pure returns (byte c) {\r\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n    \r\n    function append(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n    \r\n    function append3(string memory a, string memory b, string memory c) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c));\r\n    }\r\n    \r\n    function append4(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c, d));\r\n    }\r\n    \r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\nlibrary IterableMap {\r\n    \r\n    struct IMap {\r\n        mapping(address => uint256) mapToData;\r\n        mapping(address => uint256) mapToIndex; // start with index 1\r\n        address[] indexes;\r\n    }\r\n    \r\n    function insert(IMap storage self, address _address, uint256 _value) internal returns (bool replaced) {\r\n      \r\n        require(_address != address(0));\r\n        \r\n        if(self.mapToIndex[_address] == 0){\r\n            \r\n            // add new\r\n            self.indexes.push(_address);\r\n            self.mapToIndex[_address] = self.indexes.length;\r\n            self.mapToData[_address] = _value;\r\n            return false;\r\n        }\r\n        \r\n        // replace\r\n        self.mapToData[_address] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function remove(IMap storage self, address _address) internal returns (bool success) {\r\n       \r\n        require(_address != address(0));\r\n        \r\n        // not existing\r\n        if(self.mapToIndex[_address] == 0){\r\n            return false;   \r\n        }\r\n        \r\n        uint256 deleteIndex = self.mapToIndex[_address];\r\n        if(deleteIndex <= 0 || deleteIndex > self.indexes.length){\r\n            return false;\r\n        }\r\n       \r\n         // if index to be deleted is not the last index, swap position.\r\n        if (deleteIndex < self.indexes.length) {\r\n            // swap \r\n            self.indexes[deleteIndex-1] = self.indexes[self.indexes.length-1];\r\n            self.mapToIndex[self.indexes[deleteIndex-1]] = deleteIndex;\r\n        }\r\n        self.indexes.length -= 1;\r\n        delete self.mapToData[_address];\r\n        delete self.mapToIndex[_address];\r\n       \r\n        return true;\r\n    }\r\n  \r\n    function contains(IMap storage self, address _address) internal view returns (bool exists) {\r\n        return self.mapToIndex[_address] > 0;\r\n    }\r\n      \r\n    function size(IMap storage self) internal view returns (uint256) {\r\n        return self.indexes.length;\r\n    }\r\n  \r\n    function get(IMap storage self, address _address) internal view returns (uint256) {\r\n        return self.mapToData[_address];\r\n    }\r\n\r\n    // start with index 0\r\n    function getKey(IMap storage self, uint256 _index) internal view returns (address) {\r\n        \r\n        if(_index < self.indexes.length){\r\n            return self.indexes[_index];\r\n        }\r\n        return address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Votable is ERC20{\r\n    \r\n    // Use itmap for all functions on the struct\r\n    using IterableMap for IterableMap.IMap;\r\n    using SafeMath for uint256;\r\n    \r\n    // event\r\n    event MintToken(uint256 sessionID, address indexed beneficiary, uint256 amount);\r\n    event MintFinished(uint256 sessionID);\r\n    event BurnToken(uint256 sessionID, address indexed beneficiary, uint256 amount);\r\n    event AddAuthority(uint256 sessionID, address indexed authority);\r\n    event RemoveAuthority(uint256 sessionID, address indexed authority);\r\n    event ChangeRequiredApproval(uint256 sessionID, uint256 from, uint256 to);\r\n    \r\n    event VoteAccept(uint256 sessionID, address indexed authority);\r\n    event VoteReject(uint256 sessionID, address indexed authority);\r\n    \r\n    // constant\r\n    uint256 constant NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE = 5760;\r\n\r\n    // Declare an iterable mapping\r\n    IterableMap.IMap authorities;\r\n    \r\n    bool public isMintingFinished;\r\n    \r\n    struct Topic {\r\n        uint8 BURN;\r\n        uint8 MINT;\r\n        uint8 MINT_FINISHED;\r\n        uint8 ADD_AUTHORITY;\r\n        uint8 REMOVE_AUTHORITY;\r\n        uint8 CHANGE_REQUIRED_APPROVAL;\r\n    }\r\n    \r\n    struct Session {\r\n        uint256 id;\r\n        uint8 topic;\r\n        uint256 blockNo;\r\n        uint256 referNumber;\r\n        address referAddress;\r\n        uint256 countAccept;\r\n        uint256 countReject;\r\n       // number of approval from authories to accept the current session\r\n        uint256 requireAccept;\r\n    }\r\n    \r\n    ERC20Votable.Topic topic;\r\n    ERC20Votable.Session session;\r\n    \r\n    constructor() public {\r\n        \r\n        topic.BURN = 1;\r\n        topic.MINT = 2;\r\n        topic.MINT_FINISHED = 3;\r\n        topic.ADD_AUTHORITY = 4;\r\n        topic.REMOVE_AUTHORITY = 5;\r\n        topic.CHANGE_REQUIRED_APPROVAL = 6;\r\n        \r\n        session.id = 1;\r\n        session.requireAccept = 1;\r\n    \r\n        authorities.insert(msg.sender, session.id);\r\n    }\r\n    \r\n    /**\r\n     * @dev modifier\r\n     */\r\n    modifier onlyAuthority() {\r\n        require(authorities.contains(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier onlySessionAvailable() {\r\n        require(_isSessionAvailable());\r\n        _;\r\n    }\r\n    \r\n     modifier onlyHasSession() {\r\n        require(!_isSessionAvailable());\r\n        _;\r\n    }\r\n    \r\n    function isAuthority(address _address) public view returns (bool){\r\n        return authorities.contains(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev get session detail\r\n     */\r\n    function getSessionName() public view returns (string memory){\r\n        \r\n        bool isSession = !_isSessionAvailable();\r\n        \r\n        if(isSession){\r\n            return (_getSessionName());\r\n        }\r\n        \r\n        return \"None\";\r\n    }\r\n    \r\n    function getSessionExpireAtBlockNo() public view returns (uint256){\r\n        \r\n        bool isSession = !_isSessionAvailable();\r\n        \r\n        if(isSession){\r\n            return (session.blockNo.add(NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE));\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function getSessionVoteAccept() public view returns (uint256){\r\n      \r\n        bool isSession = !_isSessionAvailable();\r\n        \r\n        if(isSession){\r\n            return session.countAccept;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function getSessionVoteReject() public view returns (uint256){\r\n      \r\n        bool isSession = !_isSessionAvailable();\r\n        \r\n        if(isSession){\r\n            return session.countReject;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function getSessionRequiredAcceptVote() public view returns (uint256){\r\n      \r\n        return session.requireAccept;\r\n    }\r\n    \r\n    function getTotalAuthorities() public view returns (uint256){\r\n      \r\n        return authorities.size();\r\n    }\r\n    \r\n\r\n    \r\n    /**\r\n     * @dev create session\r\n     */\r\n     \r\n    function createSessionMintToken(address _beneficiary, uint256 _amount) public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(!isMintingFinished);\r\n        require(_amount > 0);\r\n        require(_beneficiary != address(0));\r\n       \r\n        _createSession(topic.MINT);\r\n        session.referNumber = _amount;\r\n        session.referAddress = _beneficiary;\r\n    }\r\n    \r\n    function createSessionMintFinished() public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(!isMintingFinished);\r\n        _createSession(topic.MINT_FINISHED);\r\n        session.referNumber = 0;\r\n        session.referAddress = address(0);\r\n    }\r\n    \r\n    function createSessionBurnAuthorityToken(address _authority, uint256 _amount) public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(_amount > 0);\r\n        require(_authority != address(0));\r\n        require(isAuthority(_authority));\r\n       \r\n        _createSession(topic.BURN);\r\n        session.referNumber = _amount;\r\n        session.referAddress = _authority;\r\n    }\r\n    \r\n    function createSessionAddAuthority(address _authority) public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(!authorities.contains(_authority));\r\n        \r\n        _createSession(topic.ADD_AUTHORITY);\r\n        session.referNumber = 0;\r\n        session.referAddress = _authority;\r\n    }\r\n    \r\n    function createSessionRemoveAuthority(address _authority) public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(authorities.contains(_authority));\r\n        \r\n        // at least 1 authority remain\r\n        require(authorities.size() > 1);\r\n      \r\n        _createSession(topic.REMOVE_AUTHORITY);\r\n        session.referNumber = 0;\r\n        session.referAddress = _authority;\r\n    }\r\n    \r\n    function createSessionChangeRequiredApproval(uint256 _to) public onlyAuthority onlySessionAvailable {\r\n        \r\n        require(_to != session.requireAccept);\r\n        require(_to <= authorities.size());\r\n\r\n        _createSession(topic.CHANGE_REQUIRED_APPROVAL);\r\n        session.referNumber = _to;\r\n        session.referAddress = address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev vote\r\n     */\r\n    function voteAccept() public onlyAuthority onlyHasSession {\r\n        \r\n        // already vote\r\n        require(authorities.get(msg.sender) != session.id);\r\n        \r\n        authorities.insert(msg.sender, session.id);\r\n        session.countAccept = session.countAccept.add(1);\r\n        \r\n        emit VoteAccept(session.id, session.referAddress);\r\n        \r\n        // execute\r\n        if(session.countAccept >= session.requireAccept){\r\n            \r\n            if(session.topic == topic.BURN){\r\n                \r\n                _burnToken();\r\n                \r\n            }else if(session.topic == topic.MINT){\r\n                \r\n                _mintToken();\r\n                \r\n            }else if(session.topic == topic.MINT_FINISHED){\r\n                \r\n                _finishMinting();\r\n                \r\n            }else if(session.topic == topic.ADD_AUTHORITY){\r\n                \r\n                _addAuthority();    \r\n            \r\n            }else if(session.topic == topic.REMOVE_AUTHORITY){\r\n                \r\n                _removeAuthority();  \r\n                \r\n            }else if(session.topic == topic.CHANGE_REQUIRED_APPROVAL){\r\n                \r\n                _changeRequiredApproval();  \r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    function voteReject() public onlyAuthority onlyHasSession {\r\n        \r\n        // already vote\r\n        require(authorities.get(msg.sender) != session.id);\r\n        \r\n        authorities.insert(msg.sender, session.id);\r\n        session.countReject = session.countReject.add(1);\r\n        \r\n        emit VoteReject(session.id, session.referAddress);\r\n    }\r\n    \r\n    /**\r\n     * @dev private\r\n     */\r\n    function _createSession(uint8 _topic) internal {\r\n        \r\n        session.topic = _topic;\r\n        session.countAccept = 0;\r\n        session.countReject = 0;\r\n        session.id = session.id.add(1);\r\n        session.blockNo = block.number;\r\n    }\r\n    \r\n    function _getSessionName() internal view returns (string memory){\r\n        \r\n        string memory topicName = \"\";\r\n        \r\n        if(session.topic == topic.BURN){\r\n          \r\n           topicName = StringUtils.append3(\"Burn \", StringUtils.uint2str(session.referNumber) , \" token(s)\");\r\n           \r\n        }else if(session.topic == topic.MINT){\r\n          \r\n           topicName = StringUtils.append4(\"Mint \", StringUtils.uint2str(session.referNumber) , \" token(s) to address 0x\", StringUtils.toAsciiString(session.referAddress));\r\n         \r\n        }else if(session.topic == topic.MINT_FINISHED){\r\n          \r\n           topicName = \"Finish minting\";\r\n         \r\n        }else if(session.topic == topic.ADD_AUTHORITY){\r\n          \r\n           topicName = StringUtils.append3(\"Add 0x\", StringUtils.toAsciiString(session.referAddress), \" to authorities\");\r\n           \r\n        }else if(session.topic == topic.REMOVE_AUTHORITY){\r\n            \r\n            topicName = StringUtils.append3(\"Remove 0x\", StringUtils.toAsciiString(session.referAddress), \" from authorities\");\r\n            \r\n        }else if(session.topic == topic.CHANGE_REQUIRED_APPROVAL){\r\n            \r\n            topicName = StringUtils.append4(\"Change approval from \", StringUtils.uint2str(session.requireAccept), \" to \", StringUtils.uint2str(session.referNumber));\r\n            \r\n        }\r\n        \r\n        return topicName;\r\n    }\r\n    \r\n    function _isSessionAvailable() internal view returns (bool){\r\n        \r\n        // vote result accept\r\n        if(session.countAccept >= session.requireAccept) return true;\r\n        \r\n         // vote result reject\r\n        if(session.countReject > authorities.size().sub(session.requireAccept)) return true;\r\n        \r\n        // vote expire (1 day)\r\n        if(block.number.sub(session.blockNo) > NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE) return true;\r\n        \r\n        return false;\r\n    }   \r\n    \r\n    function _addAuthority() internal {\r\n        \r\n        authorities.insert(session.referAddress, session.id);\r\n        emit AddAuthority(session.id, session.referAddress);\r\n    }\r\n    \r\n    function _removeAuthority() internal {\r\n        \r\n        authorities.remove(session.referAddress);\r\n        if(authorities.size() < session.requireAccept){\r\n            emit ChangeRequiredApproval(session.id, session.requireAccept, authorities.size());\r\n            session.requireAccept = authorities.size();\r\n        }\r\n        emit RemoveAuthority(session.id, session.referAddress);\r\n    }\r\n    \r\n    function _changeRequiredApproval() internal {\r\n        \r\n        emit ChangeRequiredApproval(session.id, session.requireAccept, session.referNumber);\r\n        session.requireAccept = session.referNumber;\r\n        session.countAccept = session.requireAccept;\r\n    }\r\n    \r\n    function _mintToken() internal {\r\n        \r\n        require(!isMintingFinished);\r\n        _mint(session.referAddress, session.referNumber);\r\n        emit MintToken(session.id, session.referAddress, session.referNumber);\r\n    }\r\n    \r\n    function _finishMinting() internal {\r\n        \r\n        require(!isMintingFinished);\r\n        isMintingFinished = true;\r\n        emit MintFinished(session.id);\r\n    }\r\n    \r\n    function _burnToken() internal {\r\n        \r\n        _burn(session.referAddress, session.referNumber);\r\n        emit BurnToken(session.id, session.referAddress, session.referNumber);\r\n    }\r\n}\r\n\r\ncontract WorldClassSmartFarmToken is ERC20Detailed, ERC20Votable {\r\n    constructor (string memory name, string memory symbol, uint8 decimals)\r\n        public\r\n        ERC20Detailed(name, symbol, decimals)\r\n    {\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionVoteAccept\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"createSessionAddAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionRequiredAcceptVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionVoteReject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createSessionMintFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAuthorities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"createSessionRemoveAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteReject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"createSessionChangeRequiredApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSessionBurnAuthorityToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionExpireAtBlockNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSessionMintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AddAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"RemoveAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ChangeRequiredApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"VoteAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"VoteReject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WorldClassSmartFarmToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5743534620546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045743534600000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://81d9d600da84aebfca2423cbc29cfe1898819ca2ded2eb4a28bc829291247dd2"}]}