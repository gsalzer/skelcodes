{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nÂ© Copyright 2019. All rights reserved https://criplos.com\r\n*/\r\npragma solidity ^0.4.25;\r\n\r\ncontract Criplos {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    using SafeMath for uint;\r\n    using ToAddress for bytes;\r\n\r\n    string constant public symbol = \"CRL\";\r\n    string constant public name = \"CRipLos\";\r\n    uint8 constant public decimals = 18;\r\n\t\r\n\taddress owner;\r\n\taddress public advance;\r\n\taddress[] recordAccts;\r\n\r\n\tuint public priceTokens;\r\n\tuint public minMining;\r\n\tuint public minRemining;\r\n\tuint public minWithdraw;\r\n\tuint public minTransfer;\r\n\r\n\tuint totalTokens_;\r\n\tuint totalMining_;\r\n\tuint totalMiners_;\r\n\tuint techBuff_;\r\n\r\n\tstruct Record {\r\n\tuint balance;\r\n\tuint volume;\r\n\tuint level;\r\n    address master;\r\n\t}\r\n\t\r\n    mapping(address => Record) info;\r\n\t\r\n    constructor() public {\r\n\t\r\n\t\towner = msg.sender;\r\n\t\tadvance = 0x427ddC64b9c9e5b303993C6B32aC05Dd101D9Bc5;\r\n\r\n\t\tpriceTokens = 1e3;\r\n\t\tminMining = 1e17;\r\n\t\tminRemining = 1e19;\r\n\t\tminWithdraw = 1e19;\r\n\t\tminTransfer = 1e18;\r\n\r\n\t\ttotalTokens_ = 0;\r\n\t\ttotalMining_ = 0;\r\n\t\ttotalMiners_ = 0;\r\n\t\ttechBuff_ = 0;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return totalTokens_;\r\n    }\r\n\r\n    function totalMining() public view returns (uint) {\r\n        return totalMining_.add(techBuff_);\r\n    }\r\n\r\n    function totalMiners() public view returns (uint) {\r\n        return totalMiners_;\r\n    }\r\n\r\n    function techBuff() public view returns (uint) {\r\n        return techBuff_;\r\n    }\t\r\n\r\n    function balanceOf(address member) public view returns (uint balance) {\r\n        return info[member].balance;\r\n    }\r\n\r\n    function infoMining(address member) public view returns (uint volume, uint level, address master) {\r\n        return (info[member].volume, info[member].level, info[member].master);\r\n    }\t\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\t\trequire(tokens >= minTransfer && tokens <= info[msg.sender].balance);\t\t\r\n        info[msg.sender].balance = info[msg.sender].balance.sub(tokens);\r\n        info[to].balance = info[to].balance.add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function() public payable {\r\n        process(msg.data.toAddr());\r\n    }\r\n\r\n    function process(address master) private {\r\n\t\trequire(msg.value >= minMining);\t\r\n        uint tokens = msg.value.mul(priceTokens);\r\n\t\ttotalTokens_ = totalTokens_.add(tokens);\r\n\t\tprocess2(tokens, msg.sender, master);\r\n    }\r\n\r\n    function process2(uint tokens, address memeber, address master) private {\r\n\t\t\r\n\t\tif (info[memeber].level == 1) info[memeber].level = 0;\r\n\t\tuint mine = tokens.mul(6).div(5);\r\n\t\ttotalMining_ = totalMining_.add(mine);\r\n\r\n\t\tif (techBuff_ > 0) {\r\n\t\ttokens = tokens.add(techBuff_);\r\n\t\ttechBuff_ = 0;\t\t\r\n\t\t}\r\n\r\n\t\tif (info[msg.sender].level == 0) {\r\n\t\t\ttotalMiners_ ++;\r\n\t\t\trecordAccts.push(msg.sender) -1;\r\n\r\n\t\t\tif (info[master].level > 0) {\r\n\t\t\t\tinfo[msg.sender].master = master;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tinfo[msg.sender].master = advance;\r\n\t\t\t} \r\n\t\t}\r\n\t\r\n\t\tinfo[memeber].volume = info[memeber].volume.add(mine);\r\n\t\tinfo[memeber].level = info[memeber].level.add(mine);\r\n\t\t\r\n\t\tuint publicTokens = tokens.mul(21).div(25);\r\n\t\tuint advanceTokens = tokens.mul(9).div(100);\r\n\t\tuint masterTokens = tokens.mul(7).div(100);\r\n\t\tuint checkTokens;\r\n\r\n\t\tfor (uint i = 0; i < totalMiners_; i++) {\r\n\t\t\tif (info[recordAccts[i]].level > 1) {\r\n\t\t\t\r\n\t\t\t\tcheckTokens = publicTokens.mul(info[recordAccts[i]].level).div(totalMining_);\r\n\t\t\t\t\r\n\t\t\t\tif (checkTokens < info[recordAccts[i]].volume) {\r\n\t\t\t\t\tinfo[recordAccts[i]].volume = info[recordAccts[i]].volume.sub(checkTokens);\r\n\t\t\t\t\tinfo[recordAccts[i]].balance = info[recordAccts[i]].balance.add(checkTokens);\r\n\t\t\t\t\temit Transfer(owner, recordAccts[i], checkTokens);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinfo[recordAccts[i]].balance = info[recordAccts[i]].balance.add(info[recordAccts[i]].volume);\r\n\t\t\t\t\temit Transfer(owner, recordAccts[i], info[recordAccts[i]].volume);\r\n\t\t\t\t\ttechBuff_ = techBuff_.add(checkTokens.sub(info[recordAccts[i]].volume));\r\n\t\t\t\t\tinfo[recordAccts[i]].volume = 0;\r\n\t\t\t\t\tinfo[recordAccts[i]].level = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tinfo[advance].balance = info[advance].balance.add(advanceTokens);\r\n        emit Transfer(owner, advance, advanceTokens);\r\n\r\n        info[info[memeber].master].balance = info[info[memeber].master].balance.add(masterTokens);\r\n        emit Transfer(owner, info[memeber].master, masterTokens);\r\n\t\t\r\n\t}\r\n\r\n\tfunction remining(uint tokens) public returns (bool success) {\r\n\t\trequire(tokens >= minRemining && tokens <= info[msg.sender].balance);\r\n\t\tinfo[msg.sender].balance = info[msg.sender].balance.sub(tokens);\r\n\t\temit Transfer(msg.sender, owner, tokens);\r\n\t\tprocess2(tokens, msg.sender, 0x0);\r\n\t\treturn true;\r\n    }\r\n\r\n\tfunction withdraw(uint tokens) public returns (bool success) {\r\n\t\trequire(tokens >= minWithdraw && tokens <= info[msg.sender].balance);\r\n\t\tinfo[msg.sender].balance = info[msg.sender].balance.sub(tokens);\r\n\t\ttotalTokens_ = totalTokens_.sub(tokens);\r\n\t\temit Transfer(msg.sender, owner, tokens);\r\n\t\tmsg.sender.transfer(tokens.div(priceTokens));\r\n\t\treturn true;\r\n    }\t\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add failed\");\r\n        return c;\r\n    }\r\n\t\r\n    /**\r\n    * @dev Divided two numbers\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        require(b > 0, \"div failed\");\r\n        return c;\r\n    }\t\r\n}\r\n\r\nlibrary ToAddress {\r\n\r\n    /*\r\n    * @dev Transforms bytes to address\r\n    */\r\n    function toAddr(bytes source) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(source, 0x14))\r\n        }\r\n        return addr;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRemining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"infoMining\",\"outputs\":[{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"remining\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techBuff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Criplos","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd0ad4dcff948567cea61b653548a30c72c143342d417a1084915a186fc06fc9"}]}