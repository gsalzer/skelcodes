{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ens/AbstractENS.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 _node) public view returns(address);\r\n    function resolver(bytes32 _node) public view returns(address);\r\n    function ttl(bytes32 _node) public view returns(uint64);\r\n    function setOwner(bytes32 _node, address _owner) public;\r\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public;\r\n    function setResolver(bytes32 _node, address _resolver) public;\r\n    function setTTL(bytes32 _node, uint64 _ttl) public;\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\n// File: contracts/ens/PublicResolver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * A simple resolver anyone can use; only allows the owner of a node to set its\r\n * address.\r\n */\r\ncontract PublicResolver {\r\n    AbstractENS ens;\r\n    mapping(bytes32=>address) addresses;\r\n    mapping(bytes32=>bytes32) hashes;\r\n\r\n    modifier only_owner(bytes32 _node) {\r\n        require(ens.owner(_node) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param _ensAddr The ENS registrar contract.\r\n     */\r\n    constructor(AbstractENS _ensAddr) public {\r\n        ens = _ensAddr;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified node has the specified record type.\r\n     * @param _node The ENS node to query.\r\n     * @param _kind The record type name, as specified in EIP137.\r\n     * @return True if this resolver has a record of the provided type on the\r\n     *         provided node.\r\n     */\r\n    function has(bytes32 _node, bytes32 _kind) public view returns (bool) {\r\n        return (_kind == \"addr\" && addresses[_node] != address(0)) || (_kind == \"hash\" && hashes[_node] != 0);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the resolver implements the interface specified by the provided hash.\r\n     * @param _interfaceID The ID of the interface to check for.\r\n     * @return True if the contract implements the requested interface.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n        return _interfaceID == 0x3b3b57de || _interfaceID == 0xd8389dc5;\r\n    }\r\n\r\n    /**\r\n     * Returns the address associated with an ENS node.\r\n     * @param _node The ENS node to query.\r\n     * @return The associated address.\r\n     */\r\n    function addr(bytes32 _node) public view returns (address ret) {\r\n        ret = addresses[_node];\r\n    }\r\n\r\n    /**\r\n     * Sets the address associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param _node The node to update.\r\n     * @param _addr The address to set.\r\n     */\r\n    function setAddr(bytes32 _node, address _addr) public only_owner(_node) {\r\n        addresses[_node] = _addr;\r\n    }\r\n\r\n    /**\r\n     * Returns the content hash associated with an ENS node.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param _node The ENS node to query.\r\n     * @return The associated content hash.\r\n     */\r\n    function content(bytes32 _node) public view returns (bytes32 ret) {\r\n        ret = hashes[_node];\r\n    }\r\n\r\n    /**\r\n     * Sets the content hash associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param _node The node to update.\r\n     * @param _hash The content hash to set\r\n     */\r\n    function setContent(bytes32 _node, bytes32 _hash) public only_owner(_node) {\r\n        hashes[_node] = _hash;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"content\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"ret\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_kind\",\"type\":\"bytes32\"}],\"name\":\"has\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ensAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PublicResolver","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b","Library":"","SwarmSource":"bzzr://3c3e383e560d04b8cb1eeb22fb7ef32b3b6b5aafdd284e48ce9d3a19fa07695a"}]}