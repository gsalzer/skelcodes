{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title Smart contract for forwarding ETH to a pre-defined recipient in the passive mode i.e. someone has to trigger the transfer.\r\n/// It also allows recipient to call any smart contracts. For example: Calling Trustcoin smart contract to transfer TRST.\r\n/// @author WeTrustPlatform\r\ncontract PassiveForwarder {\r\n  /// @dev recipient must be a normal account or a smart contract with the standard payable fallback method.\r\n  /// Otherwise, fund will be stuck!\r\n  address public recipient;\r\n\r\n  event Received(address indexed sender, uint256 value);\r\n\r\n  constructor(address _recipient) public {\r\n    recipient = _recipient;\r\n  }\r\n\r\n  function () public payable {\r\n    require(msg.value > 0);\r\n    emit Received(msg.sender, msg.value);\r\n  }\r\n\r\n  function sweep() public {\r\n    recipient.transfer(address(this).balance);\r\n  }\r\n\r\n  /// @dev Courtesy of https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n  /// This method allows the pre-defined recipient to call other smart contracts.\r\n  function externalCall(address destination, uint256 value, bytes data) public returns (bool) {\r\n    require(msg.sender == recipient, \"Sender must be the recipient.\");\r\n    uint256 dataLength = data.length;\r\n    bool result;\r\n    assembly {\r\n      let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n      let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n      result := call(\r\n        sub(gas, 34710),     // 34710 is the value that solidity is currently emitting\r\n                             // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                             // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n        destination,\r\n        value,\r\n        d,\r\n        dataLength,          // Size of the input (in bytes) - this is what fixes the padding problem\r\n        x,\r\n        0                    // Output is ignored, therefore the output size is zero\r\n      )\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n/// @title Smart contract for calling the sweep function of more than one PassiveForwarder in a single call.\r\n/// @author WeTrustPlatform\r\ncontract SweepProxy {\r\n\r\n  function sweep(address[] forwarders) public {\r\n    uint len = forwarders.length;\r\n    for (uint i = 0; i < len; i++) {\r\n      PassiveForwarder pf = PassiveForwarder(forwarders[i]);\r\n      pf.sweep();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"forwarders\",\"type\":\"address[]\"}],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SweepProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5957aef538dac893fe69186a0e7e026c506f4bba8a2fa74bd6143f005a101c2a"}]}