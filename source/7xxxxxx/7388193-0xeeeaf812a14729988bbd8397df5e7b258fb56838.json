{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// This interface allows derivative contracts to pay Oracle fees for their use of the system.\r\ninterface StoreInterface {\r\n\r\n    // Pays Oracle fees in ETH to the store. To be used by contracts whose margin currency is ETH.\r\n    function payOracleFees() external payable;\r\n\r\n    // Pays Oracle fees in the margin currency, erc20Address, to the store. To be used if the margin currency is an\r\n    // ERC20 token rather than ETH. All approved tokens are transfered.\r\n    function payOracleFeesErc20(address erc20Address) external; \r\n\r\n    // Computes the Oracle fees that a contract should pay for a period. `pfc` is the \"profit from corruption\", or the\r\n    // maximum amount of margin currency that a token sponsor could extract from the contract through corrupting the\r\n    // price feed in their favor.\r\n    function computeOracleFees(uint startTime, uint endTime, uint pfc) external view returns (uint feeAmount);\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    // Withdraws ETH from the contract.\r\n    function withdraw(uint amount) external onlyOwner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Withdraws ERC20 tokens from the contract.\r\n    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        require(erc20.transfer(msg.sender, amount));\r\n    }\r\n}\r\n\r\n// An implementation of StoreInterface that can accept Oracle fees in ETH or any arbitrary ERC20 token.\r\ncontract CentralizedStore is StoreInterface, Withdrawable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint private fixedOracleFeePerSecond; // Percentage of 10^18. E.g., 1e18 is 100% Oracle fee.\r\n    uint private constant FP_SCALING_FACTOR = 10**18;\r\n\r\n    function payOracleFees() external payable {\r\n        require(msg.value > 0);\r\n    }\r\n\r\n    function payOracleFeesErc20(address erc20Address) external {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        uint authorizedAmount = erc20.allowance(msg.sender, address(this));\r\n        require(authorizedAmount > 0);\r\n        require(erc20.transferFrom(msg.sender, address(this), authorizedAmount));\r\n    }\r\n\r\n    // Sets a new Oracle fee per second.\r\n    function setFixedOracleFeePerSecond(uint newOracleFee) external onlyOwner {\r\n        // Oracle fees at or over 100% don't make sense.\r\n        require(newOracleFee < FP_SCALING_FACTOR);\r\n        fixedOracleFeePerSecond = newOracleFee;\r\n        emit SetFixedOracleFeePerSecond(newOracleFee);\r\n    }\r\n\r\n    function computeOracleFees(uint startTime, uint endTime, uint pfc) external view returns (uint oracleFeeAmount) {\r\n        uint timeRange = endTime.sub(startTime);\r\n\r\n        // The oracle fees before being divided by the FP_SCALING_FACTOR.\r\n        uint oracleFeesPreDivision = pfc.mul(fixedOracleFeePerSecond).mul(timeRange);\r\n        oracleFeeAmount = oracleFeesPreDivision.div(FP_SCALING_FACTOR);\r\n\r\n        // If there is any remainder, add 1. This causes the division to ceil rather than floor the result.\r\n        if (oracleFeesPreDivision.mod(FP_SCALING_FACTOR) != 0) {\r\n            oracleFeeAmount = oracleFeeAmount.add(1);\r\n        }\r\n    }\r\n\r\n    event SetFixedOracleFeePerSecond(uint newOracleFee);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracleFee\",\"type\":\"uint256\"}],\"name\":\"setFixedOracleFeePerSecond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"payOracleFeesErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"pfc\",\"type\":\"uint256\"}],\"name\":\"computeOracleFees\",\"outputs\":[{\"name\":\"oracleFeeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOracleFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOracleFee\",\"type\":\"uint256\"}],\"name\":\"SetFixedOracleFeePerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CentralizedStore","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f2ffeea74f10e0312084ad73887d91e5f44577213b4ea40d3fff89967dda9132"}]}