{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity > 0.4.99 <0.6.0;\r\n\r\ninterface IAssetSplitContracts {\r\n function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) external returns (bool success);\r\n}\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function burn(uint256 _value) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract Ownable {\r\n  address payable public _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n  * @return the address of the owner.\r\n  */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @return true if `msg.sender` is the owner of the contract.\r\n  */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to relinquish control of the contract.\r\n  * @notice Renouncing to ownership will leave the contract without an owner.\r\n  * It will not be possible to call the functions with the `onlyOwner`\r\n  * modifier anymore.\r\n  */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function _transferOwnership(address payable newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20Interface {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    \r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public returns (uint256 remaining);\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\ncontract ERC20 is ERC20Interface {\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {\r\n       name =  _name;\r\n       symbol = _symbol;\r\n       decimals = _decimals;\r\n       totalSupply = _totalSupply * 10 ** uint256(_decimals);\r\n       balanceOf[tx.origin] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        require(_to != address(0));\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[ _to] + _value >= balanceOf[ _to]); \r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(_to != address(0));\r\n        require(allowed[msg.sender][_from] >= _value);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[ _to] + _value >= balanceOf[ _to]);\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        allowed[msg.sender][_from] -= _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public returns (uint256 remaining){\r\n         return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Token is ERC20, Ownable {\r\n\r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n\r\n    event AddSupply(uint amount);\r\n    event Burn(address target, uint amount);\r\n    event Sold(address buyer, uint256 amount);\r\n    \r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals, uint _totalSupply) \r\n        ERC20(_name, _symbol, _decimals, _totalSupply) public {\r\n        }\r\n   \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        success = _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        success =  _transfer(_from, _to, _value);\r\n        allowed[_from][msg.sender]  -= _value;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n      require(_to != address(0));\r\n\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\r\n\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n\r\n   \r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n       require(balanceOf[msg.sender] >= _value);\r\n\r\n       totalSupply -= _value; \r\n       balanceOf[msg.sender] -= _value;\r\n\r\n       emit Burn(msg.sender, _value);\r\n       return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value)  public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        totalSupply -= _value; \r\n        balanceOf[msg.sender] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        \r\n    }\r\n}\r\n\r\ncontract TokenSale is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n    \r\n    IERC20Token public tokenContract;\r\n    uint256 public tokenPerEther;\r\n\r\n    uint256 public tokensSold;\r\n    \r\n    uint256 public bonusStage1;\r\n    uint256 public bonusStage2;\r\n    uint256 public bonusStage3;\r\n    \r\n    uint256 public bonusPercentage1;\r\n    uint256 public bonusPercentage2;\r\n    uint256 public bonusPercentage3;\r\n\r\n    event Sold(address buyer, uint256 amount);\r\n\r\n    constructor(address _tokenContract, uint256 _tokenPerEther, uint256 _bonusStage1, uint256 _bonusPercentage1, uint256 _bonusStage2, uint256 _bonusPercentage2, uint256 _bonusStage3, uint256 _bonusPercentage3) public {\r\n        tokenContract = IERC20Token(_tokenContract);\r\n        tokenPerEther = _tokenPerEther;\r\n        \r\n        bonusStage1 = _bonusStage1.mul(1 ether);\r\n        bonusStage2 = _bonusStage2.mul(1 ether);\r\n        bonusStage3 = _bonusStage3.mul(1 ether);\r\n        bonusPercentage1 = _bonusPercentage1;\r\n        bonusPercentage2 = _bonusPercentage2;\r\n        bonusPercentage3 = _bonusPercentage3;\r\n    }\r\n    \r\n    function buyTokenWithEther() public payable {\r\n        address payable creator = _owner;\r\n        uint256 scaledAmount;\r\n        \r\n        require(msg.value > 0);\r\n        \r\n        if (msg.value < bonusStage1 || bonusStage1 == 0) {\r\n        scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18);\r\n        }\r\n        if (bonusStage1 != 0 && msg.value >= bonusStage1) {\r\n            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage1).div(100);\r\n        }\r\n        if (bonusStage2 != 0 && msg.value >= bonusStage2) {\r\n            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage2).div(100);\r\n        }\r\n        if (bonusStage3 != 0 && msg.value >= bonusStage3) {\r\n            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage3).div(100);\r\n        }\r\n        \r\n        require(tokenContract.balanceOf(address(this)) >= scaledAmount);\r\n        emit Sold(msg.sender, scaledAmount);\r\n        tokensSold = tokensSold.add(scaledAmount);\r\n        creator.transfer(address(this).balance);\r\n        require(tokenContract.transfer(msg.sender, scaledAmount));\r\n    }\r\n    \r\n    function () external payable {\r\n        buyTokenWithEther();\r\n    }\r\n}\r\n\r\ncontract ASNTokenGenerator is Ownable {\r\n      \r\n    IERC20Token public tokenContract;\r\n    IAssetSplitContracts public assetSplitContract;\r\n\r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n    \r\n    uint256 priceInEther = 1 ether;\r\n    uint256 priceInToken = 2;\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    constructor(address _tokenContract, address _AssetSplitContracts) public {\r\n        tokenContract = IERC20Token(_tokenContract);\r\n        assetSplitContract = IAssetSplitContracts(_AssetSplitContracts);\r\n    }\r\n    \r\n    function purchaseTokenContract(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public payable returns (address) {\r\n        if (msg.value >= priceInEther) {\r\n            address c = newTokenContract(_name, _symbol, _decimals, _totalSupply);\r\n            _owner.transfer(address(this).balance);\r\n            return address(c);\r\n        } else {\r\n            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(10 ** tokenContract.decimals()));\r\n            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(10 ** tokenContract.decimals())));\r\n            address c = newTokenContract(_name, _symbol, _decimals, _totalSupply);\r\n            return address(c);\r\n        }\r\n    }\r\n    \r\n    function purchaseTokenSaleContract(address _tokenContractAddress, uint256 _tokenPerEther, uint256 _bonusStage1, uint _bonusPercentage1, uint256 _bonusStage2, uint _bonusPercentage2, uint256 _bonusStage3, uint _bonusPercentage3) public payable returns(address newContract) {\r\n        if (msg.value >= priceInEther) {\r\n            address c = newTokenSale(_tokenContractAddress, _tokenPerEther, _bonusStage1, _bonusPercentage1, _bonusStage2, _bonusPercentage2, _bonusStage3, _bonusPercentage3);\r\n            _owner.transfer(address(this).balance);\r\n            return address(c);\r\n        } else {\r\n            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(10 ** tokenContract.decimals()));\r\n            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(10 ** tokenContract.decimals())));\r\n            address c = newTokenSale(_tokenContractAddress, _tokenPerEther, _bonusStage1, _bonusPercentage1, _bonusStage2, _bonusPercentage2, _bonusStage3, _bonusPercentage3);\r\n            return address(c);\r\n        }\r\n        \r\n    }\r\n\r\n    function newTokenContract(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) internal returns (address) {\r\n\t\tERC20Token c = (new ERC20Token)(_name, _symbol, _decimals, _totalSupply);\r\n\t    assetSplitContract.addContract(address(c), msg.sender, 2);\r\n\t\treturn address(c);\r\n\t}\r\n\t\r\n\tfunction newTokenSale(address _tokenContractAddress, uint256 _tokenPerEther, uint256 _bonusStage1, uint _bonusPercentage1, uint256 _bonusStage2, uint _bonusPercentage2, uint256 _bonusStage3, uint _bonusPercentage3) internal returns(address newContract) { \r\n        TokenSale c = (new TokenSale)(_tokenContractAddress, _tokenPerEther, _bonusStage1, _bonusPercentage1, _bonusStage2, _bonusPercentage2, _bonusStage3, _bonusPercentage3);\r\n    \tassetSplitContract.addContract(address(c), msg.sender, 3);\r\n        return address(c);\r\n    }\r\n    \r\n    function() external payable {\r\n        \r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20Token","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d2fc65dce18069da119d53cd44f4dbf44f780b7a247c1500fbea929e2e2b62de"}]}