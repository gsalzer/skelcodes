{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.18;\r\n\r\ncontract ERC20Token {\r\n\r\n  function totalSupply () constant returns (uint256 _totalSupply);\r\n\r\n  function balanceOf (address _owner) constant returns (uint256 balance);\r\n\r\n  function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n  function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n  function allowance (address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval (address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n    assert (x <= MAX_UINT256 - y);\r\n    return x + y;\r\n  }\r\n\r\n  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n    assert (x >= y);\r\n    return x - y;\r\n  }\r\n\r\n  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    assert (x <= MAX_UINT256 / y);\r\n    return x * y;\r\n  }\r\n  \r\n  \r\n   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract Token is ERC20Token, SafeMath {\r\n\r\n  function Token () {\r\n    // Do nothing\r\n  }\r\n \r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (msg.sender, _to, _value); \r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)  returns (bool success) {\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n \r\n  function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) private allowances;\r\n}\r\n\r\n\r\ncontract PetjaToken is Token {\r\n    \r\n    address public owner;\r\n    \r\n     \r\n    uint256 tokenCount = 0;\r\n    \r\n    uint256 public bounce_reserve = 0;\r\n    uint256 public partner_reserve = 0;\r\n    uint256 public sale_reserve = 0;\r\n     \r\n    bool frozen = false;\r\n     \r\n    uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n     \r\n\tuint public constant _decimals = (10**18);\r\n\t\r\n     \r\n    modifier onlyOwner() {\r\n\t    require(owner == msg.sender);\r\n\t    _;\r\n\t}\r\n     \r\n     function PetjaToken() {\r\n         owner = msg.sender;\r\n         \r\n         createTokens(5 * (10**25)); // создание 50 млн токенов\r\n         \r\n         partner_reserve = 5 * (10**24); // резервация 5 млн токенов для 10% для инвесторов\r\n         bounce_reserve = 1 * (10**24); // резервация 1 млн токенов для бонусной программы\r\n         \r\n         // вычисления общего количества токенов для продажи (44 млн)\r\n         sale_reserve = safeSub(tokenCount, safeAdd(partner_reserve, bounce_reserve));  \r\n         \r\n         \r\n     }\r\n     \r\n    function totalSupply () constant returns (uint256 _totalSupply) {\r\n        return tokenCount;\r\n    }\r\n     \r\n    function name () constant returns (string result) {\r\n\t\treturn \"PetjaToken\";\r\n\t}\r\n\t\r\n\tfunction symbol () constant returns (string result) {\r\n\t\treturn \"PT\";\r\n\t}\r\n\t\r\n\tfunction decimals () constant returns (uint result) {\r\n        return 18;\r\n    }\r\n    \r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n        if (frozen) return false;\r\n        else return Token.transfer (_to, _value);\r\n    }\r\n\r\n  \r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n    if (frozen) return false;\r\n    else return Token.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n  \r\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\r\n    returns (bool success) {\r\n    if (allowance (msg.sender, _spender) == _currentValue)\r\n      return approve (_spender, _newValue);\r\n    else return false;\r\n  }\r\n\r\n  function burnTokens (uint256 _value) returns (bool success) {\r\n    if (_value > accounts [msg.sender]) return false;\r\n    else if (_value > 0) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      tokenCount = safeSub (tokenCount, _value);\r\n      return true;\r\n    } else return true;\r\n  }\r\n\r\n\r\n  function createTokens (uint256 _value) returns (bool success) {\r\n    require (msg.sender == owner);\r\n\r\n    if (_value > 0) {\r\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\r\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\r\n      tokenCount = safeAdd (tokenCount, _value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n // Установка нового владельца контракта \r\n // входной параметр адрес ETH кошелька \r\n\r\n  function setOwner (address _newOwner) {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function freezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (!frozen) {\r\n      frozen = true;\r\n      Freeze ();\r\n    }\r\n  }\r\n\r\n\r\n  function unfreezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (frozen) {\r\n      frozen = false;\r\n      Unfreeze ();\r\n    }\r\n  }\r\n\r\n  event Freeze ();\r\n\r\n  event Unfreeze ();\r\n\r\n}\r\n\r\n\r\ncontract PetjaTokenSale is PetjaToken  {\r\n \r\n    address[] balancesKeys;\r\n    mapping (address => uint256) balances;\r\n \r\n    enum State { PRE_ICO, ICO, STOPPED }\r\n    \r\n    \r\n    // 0 , 1 , 2\r\n    \r\n    State public currentState = State.STOPPED;\r\n\r\n    uint public tokenPrice = 50000000000000000;\r\n    uint public _minAmount = 0.05 ether;\r\n\t\r\n\tmapping (address => uint256) wallets;\r\n\r\n    address public beneficiary;\r\n\r\n\tuint256 public totalSold = 0;\r\n\tuint256 public totalBounces = 0;\r\n\t\r\n\tuint public current_percent = 15;\r\n\tuint public current_discount = 0;\r\n\r\n\tbool private _allowedTransfers = true;\r\n\t\r\n\tmodifier minAmount() {\r\n        require(msg.value >= _minAmount);\r\n        _;\r\n    }\r\n    \r\n    modifier saleIsOn() {\r\n        require(currentState != State.STOPPED && totalSold < sale_reserve);\r\n        _;\r\n    }\r\n    \r\n    modifier isAllowedBounce() {\r\n        require(totalBounces < bounce_reserve);\r\n        _;\r\n    }\r\n    \r\n\tfunction TokenSale() {\r\n\t    owner = msg.sender;\r\n\t    beneficiary = msg.sender;\r\n\t}\r\n\r\n\t\r\n\t// установка текущего бонуса за покупку\r\n\t\r\n\tfunction setBouncePercent(uint _percent) public onlyOwner {\r\n\t    current_percent = _percent;\r\n\t}\r\n\t\r\n\tfunction setDiscountPercent(uint _discount) public onlyOwner {\r\n\t    current_discount = _discount;\r\n\t}\r\n\t\r\n\t\r\n\t// установка текущей фазы продаж (pre-ico = 0, ico = 1, stopped = 3)\r\n\t\r\n\tfunction setState(State _newState) public onlyOwner {\r\n\t    currentState = _newState;\r\n\t}\r\n\t\r\n\t// установка минимальной суммы платежа в эфирах\r\n\t\r\n\tfunction setMinAmount(uint _new) public onlyOwner {\r\n\t    _minAmount = _new;\r\n\t}\r\n\t\r\n\t// возобновление переводов\r\n\t\r\n\tfunction allowTransfers() public onlyOwner {\r\n\t\t_allowedTransfers = true;\t\t\r\n\t}\r\n\t\r\n\t// заморозка всех переводов\r\n\t\r\n\tfunction stopTransfers() public onlyOwner {\r\n\t\t_allowedTransfers = false;\r\n\t}\r\n\t\r\n\t// функция смены адреса ETH куда будут поступать отправленные эфиры\r\n\t\r\n    function setBeneficiaryAddress(address _new) public onlyOwner {\r\n        beneficiary = _new;\r\n    }\r\n    \r\n    // функция установки стоимости одного токена в wei \r\n    \r\n    function setTokenPrice(uint _price) public onlyOwner {\r\n        tokenPrice = _price;\r\n    }\r\n    \r\n    // фукнция списания токенов с общего баланса на баланс отправителя\r\n    \r\n\tfunction transferPayable(address _address, uint _amount) private returns (bool) {\r\n\t    accounts[_address] = safeAdd(accounts[_address], _amount);\r\n\t    accounts[owner] = safeSub(accounts[owner], _amount);\r\n\t    totalSold = safeAdd(totalSold, _amount);\r\n\t    return true;\r\n\t}\r\n\t\r\n\t// вычисления количество токенов, равное количество отправленных эфиров\r\n\t// исходя из стоимости токена, бонуса и скидки\r\n\t\r\n\tfunction get_tokens_count(uint _amount) private returns (uint) {\r\n\t    \r\n\t     uint currentPrice = tokenPrice;\r\n\t     uint tokens = safeDiv( safeMul(_amount, _decimals), currentPrice ) ;\r\n\t     totalSold = safeAdd(totalSold, tokens);\r\n\t     \r\n\t     if(currentState == State.PRE_ICO) {\r\n\t         tokens = safeAdd(tokens, get_bounce_tokens(tokens)); // вызывается при PRE-ICO\r\n\t     } else if(currentState == State.ICO) {\r\n\t         tokens = safeAdd(tokens, get_discount_tokens(tokens)); // вызывается при ICO\r\n\t     }\r\n\t     \r\n\t     return tokens;\r\n\t}\r\n\t\r\n\t// вычисление текущей скидки\r\n\t\r\n\tfunction get_discount_tokens(uint _tokens) isAllowedBounce private returns (uint) {\r\n\t    \r\n\t    uint tokens = 0;\r\n\t    uint _current_percent = safeMul(current_discount, 100);\r\n\t    tokens = _tokens * _current_percent / 10000;\r\n\t    totalBounces = safeAdd(totalBounces, tokens);\r\n\t    return tokens;\r\n\t    \r\n\t}\r\n\t\r\n\t// вычисление бонусных токенов\r\n\t\r\n\tfunction get_bounce_tokens(uint _tokens) isAllowedBounce() private returns (uint) {\r\n\t    uint tokens = 0;\r\n\t    uint _current_percent = safeMul(current_percent, 100);\r\n\t    tokens = _tokens * _current_percent / 10000;\r\n\t    totalBounces = safeAdd(totalBounces, tokens);\r\n\t    return tokens;\r\n\t}\r\n\t\r\n\t// функция, которая вызывается при отправке эфира на контракт\r\n\t\r\n\tfunction buy() public saleIsOn() minAmount() payable {\r\n\t    uint tokens;\r\n\t    tokens = get_tokens_count(msg.value);\r\n\t\trequire(transferPayable(msg.sender , tokens));\r\n\t\tif(_allowedTransfers) {\r\n\t\t\tbeneficiary.transfer(msg.value);\r\n\t\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], msg.value);\r\n\t\t\tbalancesKeys.push(msg.sender);\r\n\t    }\r\n\t}\r\n\t\r\n\t// возврат средств, вызывается владельцем контракта,\r\n\t// для возврата на контракте должны присутствовать эфиры\r\n\t\r\n\tfunction refund() onlyOwner {\r\n      for(uint i = 0 ; i < balancesKeys.length ; i++) {\r\n          address addr = balancesKeys[i]; \r\n          uint value = balances[addr];\r\n          balances[addr] = 0; \r\n          accounts[addr] = 0;\r\n          addr.transfer(value); \r\n      }\r\n    }\r\n\t\r\n\t\r\n\tfunction() external payable {\r\n      buy();\r\n    }\r\n\t\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBounces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBouncePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_discount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner_reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounce_reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setBeneficiaryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PetjaTokenSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3b0011f3f61d4d4ba945c28dc4e21a6fcdd69f452378ed4748f0d1c8c1b0e451"}]}