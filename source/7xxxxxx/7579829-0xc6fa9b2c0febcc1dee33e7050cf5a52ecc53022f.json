{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract HUBRISSTAKE is Ownable {\r\n  ERC20 public token;\r\n  uint256 public principle;\r\n  uint256 public totalReward;\r\n  uint public startDay;\r\n  uint public duration;\r\n  bool public isClaimed;\r\n\r\n  constructor(ERC20 _token, address _owner, uint256 _principle, uint256 _totalReward, uint _duration) public {\r\n    uint today = block.timestamp / 24 hours;\r\n    token = _token;\r\n    owner = _owner;\r\n    principle = _principle;\r\n    totalReward = _totalReward;\r\n    startDay = today;\r\n    duration = _duration;\r\n    isClaimed = false;\r\n  }\r\n\r\n  function accumulatedReward() public view returns (uint256) {\r\n    if (isClaimed) return 0;\r\n    uint today = block.timestamp / 24 hours;\r\n    uint durationElapsed = today - startDay;\r\n    if ( durationElapsed > duration ) {\r\n        durationElapsed = duration;\r\n    }\r\n    return totalReward * durationElapsed / duration;\r\n  }\r\n\r\n  function isReadyToClaim() public view returns (bool) {\r\n    uint today = block.timestamp / 24 hours;\r\n    if (today < (startDay + duration)) return false;\r\n    if (isClaimed) return false;\r\n    return true;\r\n  }\r\n\r\n  function claim() public {\r\n    assert(isReadyToClaim());\r\n    token.transfer(owner, principle + totalReward);\r\n    isClaimed = true;\r\n  }\r\n\r\n}\r\n\r\ncontract HUBRISSTAKING is Ownable {\r\n  ERC20 public token;\r\n  mapping (uint => uint256) public threshold;\r\n  mapping (uint => uint256) public rewardPerTenThousand;\r\n  mapping (address => HUBRISSTAKE[]) public stakes;\r\n\r\n  constructor(ERC20 _token) public {\r\n    token = _token;\r\n    threshold[1] = 150000E18;\r\n    threshold[3] = 600000E18;\r\n    threshold[6] = 1500000E18;\r\n    threshold[12] = 2500000E18;\r\n    rewardPerTenThousand[1] = 50;\r\n    rewardPerTenThousand[3] = 20;\r\n    rewardPerTenThousand[6] = 450;\r\n    rewardPerTenThousand[12] = 1100;\r\n  }\r\n\r\n  function setThresholdAndReward(uint256 threshold_1Month, uint256 reward_1month, uint256 threshold_3Month, uint256 reward_3month, uint256 threshold_6Month, uint256 reward_6month, uint256 threshold_12Month, uint256 reward_12month) public onlyOwner {\r\n    threshold[1] = threshold_1Month;\r\n    threshold[3] = threshold_3Month;\r\n    threshold[6] = threshold_6Month;\r\n    threshold[12] = threshold_12Month;\r\n    rewardPerTenThousand[1] = reward_1month;\r\n    rewardPerTenThousand[3] = reward_3month;\r\n    rewardPerTenThousand[6] = reward_6month;\r\n    rewardPerTenThousand[12] = reward_12month;\r\n  }\r\n\r\n  function stake(uint256 _principle, uint months) public returns (HUBRISSTAKE) {\r\n    uint duration = months * 30;\r\n    uint256 totalReward;\r\n    assert((months == 1) || (months == 3) || (months == 6) || (months == 12));\r\n    assert(_principle >= threshold[months]);\r\n    totalReward = _principle * rewardPerTenThousand[months] / 10000;\r\n    HUBRISSTAKE stakeObj = new HUBRISSTAKE(token, msg.sender, _principle, totalReward, duration);\r\n    token.transferFrom(msg.sender, address(stakeObj), _principle);\r\n    token.transfer(address(stakeObj), totalReward);\r\n    stakes[msg.sender].push(stakeObj);\r\n    return stakeObj;\r\n  }\r\n\r\n  function totalPrinciple(address _owner) public view returns (uint256) {\r\n    uint256 result = 0;\r\n    for (uint i = 0; i < stakes[_owner].length; i++) {\r\n      if (!stakes[_owner][i].isClaimed()) {\r\n        result += stakes[_owner][i].principle();\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  function accumulatedReward(address _owner) public view returns (uint256) {\r\n    uint256 result = 0;\r\n    for (uint i = 0; i < stakes[_owner].length; i++) {\r\n      if (!stakes[_owner][i].isClaimed()) {\r\n        result += stakes[_owner][i].accumulatedReward();\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function isReadyToClaim(address _owner) public view returns (bool) {\r\n    for (uint i = 0; i < stakes[_owner].length; i++) {\r\n      if (stakes[_owner][i].isReadyToClaim()) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function claim() public {\r\n    bool isAtLeastOneClaimed = false;\r\n    for (uint i = 0; i < stakes[msg.sender].length; i++) {\r\n      if (stakes[msg.sender][i].isReadyToClaim()) {\r\n        stakes[msg.sender][i].claim();\r\n        isAtLeastOneClaimed = true;\r\n      }\r\n    }\r\n    assert(isAtLeastOneClaimed);\r\n  }\r\n\r\n  function getStakes(address _owner) public view returns (HUBRISSTAKE[] memory) {\r\n    return stakes[_owner];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"threshold_1Month\",\"type\":\"uint256\"},{\"name\":\"reward_1month\",\"type\":\"uint256\"},{\"name\":\"threshold_3Month\",\"type\":\"uint256\"},{\"name\":\"reward_3month\",\"type\":\"uint256\"},{\"name\":\"threshold_6Month\",\"type\":\"uint256\"},{\"name\":\"reward_6month\",\"type\":\"uint256\"},{\"name\":\"threshold_12Month\",\"type\":\"uint256\"},{\"name\":\"reward_12month\",\"type\":\"uint256\"}],\"name\":\"setThresholdAndReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalPrinciple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_principle\",\"type\":\"uint256\"},{\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerTenThousand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulatedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isReadyToClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"HUBRISSTAKING","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000432555e5c898f83fc5f00df631bd9c2801fea289","Library":"","SwarmSource":"bzzr://5087e954b15b591ae5b2a4e51e474c919311bc58eb043231ea6ae3223b4f30bb"}]}