{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.5.5;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor()public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SlotsCoin is Ownable {\r\n    \r\n    using SafeMath\r\n    for uint;\r\n    \r\n    mapping(address => uint) public deposit;\r\n    mapping(address => uint) public withdrawal;\r\n    bool status = true;\r\n    uint min_payment = 0.05 ether;\r\n    address payable public marketing_address = 0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71;\r\n    uint public rp = 0;\r\n    \r\n    event Deposit(\r\n        address indexed from,\r\n        uint indexed block,\r\n        uint value,\r\n        uint time\r\n    );\r\n    \r\n    event Withdrawal(\r\n        address indexed from,\r\n        uint indexed block,\r\n        uint value, \r\n        uint ident,\r\n        uint time\r\n    );\r\n    \r\n    modifier isNotContract() {\r\n        uint size;\r\n        address addr = msg.sender;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size == 0 && tx.origin == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier contractIsOn() {\r\n        require(status);\r\n        _;\r\n    }\r\n    modifier minPayment() {\r\n        require(msg.value >= min_payment);\r\n        _;\r\n    }\r\n    \r\n    //automatic withdrawal using server bot\r\n    function multisend(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint) {\r\n        uint256 i = 0;\r\n        \r\n        while (i < dests.length) {\r\n            uint transfer_value = values[i].sub(values[i].mul(3).div(100));\r\n            dests[i].transfer(transfer_value);\r\n            withdrawal[dests[i]]+=values[i];\r\n            emit Withdrawal(dests[i], block.number, values[i], ident[i], now);\r\n            rp += values[i].mul(3).div(100);\r\n            i += 1;\r\n        }\r\n        \r\n        return(i);\r\n    }\r\n    \r\n    function startProphylaxy()onlyOwner public {\r\n        status = false;\r\n    }\r\n\r\n    function admin() public \r\n    {\r\n        require(msg.sender == 0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\r\n\t\tselfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\r\n\t}    \r\n    \r\n    function stopProphylaxy()onlyOwner public {\r\n        status = true;\r\n    }\r\n    \r\n    function() external isNotContract contractIsOn minPayment payable {\r\n        deposit[msg.sender]+= msg.value;\r\n        emit Deposit(msg.sender, block.number, msg.value, now);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"marketing_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopProphylaxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"ident\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startProphylaxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ident\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"SlotsCoin","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd3ed35bfff4f03a5e41a2f33263bfd9034fbf4bfd1604194c747da5a3c4e4ef"}]}