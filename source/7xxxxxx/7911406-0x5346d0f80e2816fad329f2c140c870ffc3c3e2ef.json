{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n/*\r\n  This file is part of The Colony Network.\r\n\r\n  The Colony Network is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  The Colony Network is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n/*\r\n  This file is part of The Colony Network.\r\n\r\n  The Colony Network is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  The Colony Network is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// ignore-file-swc-101 This is due to ConsenSys/truffle-security#245 and the bad-line reporting associated with it\r\n// (It's really the abi.encodepacked later)\r\n\r\ncontract Resolver is DSAuth {\r\n  mapping (bytes4 => address) public pointers;\r\n\r\n  function register(string memory signature, address destination) public\r\n  auth\r\n  {\r\n    pointers[stringToSig(signature)] = destination;\r\n  }\r\n\r\n  function lookup(bytes4 sig) public view returns(address) {\r\n    return pointers[sig];\r\n  }\r\n\r\n  function stringToSig(string memory signature) public pure returns(bytes4) {\r\n    return bytes4(keccak256(abi.encodePacked(signature)));\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract EtherRouter is DSAuth {\r\n  Resolver public resolver;\r\n\r\n  function() external payable {\r\n    if (msg.sig == 0) {\r\n      return;\r\n    }\r\n    // Contracts that want to receive Ether with a plain \"send\" have to implement\r\n    // a fallback function with the payable modifier. Contracts now throw if no payable\r\n    // fallback function is defined and no function matches the signature.\r\n    // However, 'send' only provides 2300 gas, which is not enough for EtherRouter\r\n    // so we shortcut it here.\r\n    //\r\n    // Note that this means we can never have a fallback function that 'does' stuff.\r\n    // but those only really seem to be ICOs, to date. To be explicit, there is a hard\r\n    // decision to be made here. Either:\r\n    // 1. Contracts that use 'send' or 'transfer' cannot send money to Colonies/ColonyNetwork\r\n    // 2. We commit to never using a fallback function that does anything.\r\n    //\r\n    // We have decided on option 2 here. In the future, if we wish to have such a fallback function\r\n    // for a Colony, it could be in a separate extension contract.\r\n\r\n    // Get routing information for the called function\r\n    address destination = resolver.lookup(msg.sig);\r\n\r\n    // Make the call\r\n    assembly {\r\n      let size := extcodesize(destination)\r\n      if eq(size, 0) { revert(0,0) }\r\n\r\n      calldatacopy(mload(0x40), 0, calldatasize)\r\n      let result := delegatecall(gas, destination, mload(0x40), calldatasize, mload(0x40), 0) // ignore-swc-113\r\n      // as their addresses are controlled by the Resolver which we trust\r\n      returndatacopy(mload(0x40), 0, returndatasize)\r\n      switch result\r\n      case 1 { return(mload(0x40), returndatasize) }\r\n      default { revert(mload(0x40), returndatasize) }\r\n    }\r\n  }\r\n\r\n  function setResolver(address _resolver) public\r\n  auth\r\n  {\r\n    resolver = Resolver(_resolver);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"EtherRouter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://f0149d120d10d800a2426e1be260041fa00e884552016ea0add83f7a8ce33d7c"}]}