{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/*\r\n   ________  _____    ____  ____  _______    _   __   __________  __    ____ \r\n  / ____/ / / /   |  / __ \\/ __ \\/  _/   |  / | / /  / ____/ __ \\/ /   / __ \\\r\n / / __/ / / / /| | / /_/ / / / // // /| | /  |/ /  / / __/ / / / /   / / / /\r\n/ /_/ / /_/ / ___ |/ _, _/ /_/ // // ___ |/ /|  /  / /_/ / /_/ / /___/ /_/ / \r\n\\____/\\____/_/  |_/_/ |_/_____/___/_/  |_/_/ |_/   \\____/\\____/_____/_____/  \r\n\r\n\r\n*/\r\n      \r\n//  Guardian Gold Token\r\n//  https://guardian-gold.com\r\n//  https://guardian-gold.com/exchange.html\r\n//  Launch Jan 30, 2019  22:00 UTC\r\n// \r\n//  Gold Backed Cryptocurrency with Proof of Stake Rewards\r\n//  1 GGT = 1 Gram of Physical Gold\r\n//  NO Transaction Fees\r\n//  NO Gold Storage Fees\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Buy(address to, uint amount);\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    event onGoldAccountWithdraw(\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    event onOpAccountWithdraw(\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    event onTokenSale(\r\n        address indexed customerAddress,\r\n        uint256 amount\r\n    );\r\n    event onTokenRedeem(\r\n        address indexed customerAddress,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \r\n        {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n           return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n        }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    //if(myDividends() > 0) withdraw();\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract MultiSigTransfer is Ownable {\r\n  string public name = \"MultiSigTransfer\";\r\n  string public symbol = \"MST\";\r\n  bool public complete = false;\r\n  bool public denied = false;\r\n  uint256 public quantity;\r\n  address public targetAddress;\r\n  address public requesterAddress;\r\n\r\n  /**\r\n  * @dev The multisig transfer contract ensures that no single administrator can\r\n  * GGTs without approval of another administrator\r\n  * @param _quantity The number of GGT to transfer\r\n  * @param _targetAddress The receiver of the GGTs\r\n  * @param _requesterAddress The administrator requesting the transfer\r\n  */\r\n  constructor(\r\n    uint256 _quantity,\r\n    address _targetAddress,\r\n    address _requesterAddress\r\n  ) public {\r\n    quantity = _quantity;\r\n    targetAddress = _targetAddress;\r\n    requesterAddress = _requesterAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Mark the transfer as approved / complete\r\n  */\r\n  function approveTransfer() public onlyOwner {\r\n    require(denied == false, \"cannot approve a denied transfer\");\r\n    require(complete == false, \"cannot approve a complete transfer\");\r\n    complete = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Mark the transfer as denied\r\n  */\r\n  function denyTransfer() public onlyOwner {\r\n    require(denied == false, \"cannot deny a transfer that is already denied\");\r\n    denied = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Determine if the transfer is pending\r\n  */\r\n  function isPending() public view returns (bool) {\r\n    return !complete;\r\n  }\r\n}\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\ncontract GuardianGoldToken is BasicToken, Ownable, RBAC {\r\n    string public name = \"GuardianGoldToken\";\r\n    string public symbol = \"GGT\";\r\n    uint8 public decimals = 18;\r\n    string public constant ADMIN_ROLE = \"ADMIN\";\r\n\r\n    uint256 constant internal magnitude = 2**64;\r\n\r\n    uint public maxTokens = 5000e18;\r\n\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint public goldAccount = 0;\r\n    uint public operationsAccount = 0;\r\n\r\n    uint256 internal profitPerShare_;\r\n\r\n    address[] public transfers;\r\n\r\n    uint public constant INITIAL_SUPPLY = 62207e15; \r\n    uint public totalSupply = 62207e15;\r\n    uint public totalGoldReserves = 62207e15;\r\n    uint public pendingGold = 0;\r\n    uint public totalETHReceived = 57.599 ether;\r\n\r\n    bool public isTransferable = true;\r\n    bool public toggleTransferablePending = false;\r\n    address public transferToggleRequester = address(0);\r\n\r\n    uint public tokenPrice = 0.925925 ether;\r\n    uint public goldPrice = 0.390185 ether;\r\n\r\n    uint public tokenSellDiscount = 950;  //95%\r\n    uint public referralFee = 30;  //3%\r\n\r\n    uint minGoldPrice = 0.2 ether;\r\n    uint maxGoldPrice = 0.7 ether;\r\n\r\n    uint minTokenPrice = 0.5 ether;\r\n    uint maxTokenPrice = 2 ether;\r\n\r\n    uint public dividendRate = 150;  //15%\r\n\r\n\r\n    uint public minPurchaseAmount = 0.1 ether;\r\n    uint public minSaleAmount = 1e18;   //1 GGT\r\n    uint public minRefStake = 1e17;  //0.1 GGT\r\n\r\n    bool public allowBuy = false;\r\n    bool public allowSell = false;\r\n    bool public allowRedeem = false;\r\n\r\n\r\n\r\n    constructor() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        addRole(msg.sender, ADMIN_ROLE);\r\n        emit Transfer(address(this), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n\r\n    function buy(address _referredBy) \r\n\r\n      payable \r\n      public  \r\n\r\n      {\r\n          require(msg.value >= minPurchaseAmount);\r\n          require(allowBuy);\r\n          //uint newTokens = SafeMath.div(msg.value,tokenPrice);\r\n          //newTokens = SafeMath.mul(newTokens, 1e18);\r\n          uint newTokens = ethereumToTokens_(msg.value);\r\n\r\n          totalETHReceived = SafeMath.add(totalETHReceived, msg.value);\r\n\r\n          require(SafeMath.add(totalSupply, newTokens) <= maxTokens);\r\n\r\n          balances[msg.sender] = SafeMath.add(balances[msg.sender], newTokens);\r\n          totalSupply = SafeMath.add(newTokens, totalSupply);\r\n\r\n          uint goldAmount = SafeMath.div(SafeMath.mul(goldPrice,msg.value),tokenPrice);\r\n          uint operationsAmount = SafeMath.sub(msg.value,goldAmount);\r\n\r\n          uint256 _referralBonus = SafeMath.div(SafeMath.mul(operationsAmount, referralFee),1000);\r\n\r\n          goldAccount = SafeMath.add(goldAmount, goldAccount);\r\n          uint _dividends = SafeMath.div(SafeMath.mul(dividendRate, operationsAmount),1000);\r\n\r\n          if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            _referredBy != msg.sender &&\r\n            balances[_referredBy] >= minRefStake)\r\n            {\r\n                operationsAmount = SafeMath.sub(operationsAmount,_referralBonus);\r\n                //add referral amount to referrer dividend account\r\n                referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n            }\r\n\r\n          uint256 _fee = _dividends * magnitude;\r\n          profitPerShare_ += (_dividends * magnitude / (totalSupply));\r\n          _fee = _fee - (_fee-(newTokens * (_dividends * magnitude / (totalSupply))));\r\n          int256 _updatedPayouts = (int256) ((profitPerShare_ * newTokens) - _fee);\r\n\r\n          payoutsTo_[msg.sender] += _updatedPayouts;\r\n          operationsAmount = SafeMath.sub(operationsAmount, _dividends);\r\n          operationsAccount = SafeMath.add(operationsAccount, operationsAmount);\r\n\r\n          pendingGold = SafeMath.add(pendingGold, newTokens);\r\n          emit Buy(msg.sender, newTokens);\r\n          emit Transfer(address(this), msg.sender, newTokens);\r\n    \r\n    }\r\n\r\n    function sell(uint amount) \r\n\r\n      public\r\n  \r\n      {\r\n\r\n        require(allowSell);\r\n        require(amount >= minSaleAmount);\r\n        require(balances[msg.sender] >= amount);\r\n\r\n        //calculate Eth to be returned\r\n        uint256 _ethereum = tokensToEthereum_(amount);\r\n        require(_ethereum <= operationsAccount);\r\n        //burn sold tokens\r\n        totalSupply = SafeMath.sub(totalSupply, amount);\r\n\r\n        if (pendingGold > amount) {\r\n            pendingGold = SafeMath.sub(pendingGold, amount);\r\n        }else{\r\n            pendingGold = 0;\r\n        }\r\n\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], amount);\r\n\r\n        //payout goes to dividend account\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * amount + (_ethereum * magnitude));\r\n        payoutsTo_[msg.sender] -= _updatedPayouts;    \r\n\r\n        operationsAccount = SafeMath.sub(operationsAccount, _ethereum);  \r\n        emit onTokenSale(msg.sender, amount); \r\n    }\r\n\r\n\r\n    function redeemTokensForGold(uint amount)\r\n\r\n    public\r\n    {\r\n        //burn tokens that are to be redeemed for physical gold\r\n        require(allowRedeem);\r\n        require(balances[msg.sender] >= amount);\r\n        if(myDividends(true) > 0) withdraw();\r\n\r\n        payoutsTo_[msg.sender] -= (int256) (profitPerShare_ * amount);\r\n\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], amount);\r\n        totalSupply = SafeMath.sub(totalSupply, amount);\r\n        emit onTokenRedeem(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function getTokenAmount(uint amount) public \r\n    \r\n    returns(uint)\r\n\r\n    {\r\n        return (amount*1e18)/(tokenPrice);\r\n    }\r\n\r\n    function depositGold()\r\n      public\r\n      payable\r\n    {\r\n        goldAccount = SafeMath.add(goldAccount, msg.value);\r\n    }\r\n\r\n    function depositOperations()\r\n      public\r\n      payable\r\n    {\r\n        operationsAccount = SafeMath.add(operationsAccount, msg.value);\r\n    }\r\n\r\n  \r\n    function tokensToEthereum_(uint256 _tokens)\r\n       internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint liquidPrice = SafeMath.div(SafeMath.mul(goldPrice, tokenSellDiscount),1000);\r\n        uint256 _etherReceived = SafeMath.div(_tokens * liquidPrice, 1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokensReceived = SafeMath.div(_ethereum*1e18, tokenPrice);\r\n            \r\n        return _tokensReceived;\r\n    }\r\n\r\n    function updateGoldReserves(uint newReserves)\r\n    public\r\n    onlyRole(ADMIN_ROLE)\r\n    {\r\n        totalGoldReserves = newReserves;\r\n        if (totalSupply > totalGoldReserves) {\r\n            pendingGold = SafeMath.sub(totalSupply,totalGoldReserves);\r\n        }else{\r\n            pendingGold = 0;\r\n        }\r\n    }\r\n\r\n    function setTokenPrice(uint newPrice)\r\n      public\r\n      onlyRole(ADMIN_ROLE)\r\n    {\r\n        require(newPrice >= minTokenPrice);\r\n        require(newPrice <= maxTokenPrice);\r\n        tokenPrice = newPrice;\r\n    }\r\n\r\n    function setGoldPrice(uint newPrice)\r\n      public\r\n      onlyRole(ADMIN_ROLE)\r\n    {\r\n        require(newPrice >= minGoldPrice);\r\n        require(newPrice <= maxGoldPrice);\r\n        goldPrice = newPrice;\r\n    }\r\n\r\n    function setTokenRange(uint newMax, uint newMin)\r\n        public\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n            minTokenPrice = newMin;\r\n            maxTokenPrice = newMax;\r\n        }\r\n\r\n    function setmaxTokens(uint newMax)\r\n      public\r\n      onlyRole(ADMIN_ROLE)\r\n      {\r\n          maxTokens = newMax;\r\n      }\r\n\r\n    function setGoldRange(uint newMax, uint newMin)\r\n      public\r\n      onlyRole(ADMIN_ROLE)\r\n      {\r\n        minGoldPrice = newMin;\r\n        maxGoldPrice = newMax;\r\n      }\r\n\r\n    function withDrawGoldAccount(uint amount)\r\n        public\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n          require(amount <= goldAccount);\r\n          goldAccount = SafeMath.sub(goldAccount, amount);\r\n          msg.sender.transfer(amount);\r\n        }\r\n\r\n      function withDrawOperationsAccount(uint amount)\r\n          public\r\n          onlyRole(ADMIN_ROLE)\r\n          {\r\n            require(amount <= operationsAccount);\r\n            operationsAccount = SafeMath.sub(operationsAccount, amount);\r\n            msg.sender.transfer(amount);\r\n          }\r\n\r\n      function setAllowBuy(bool newAllow)\r\n          public\r\n          onlyRole(ADMIN_ROLE)\r\n          {\r\n            allowBuy = newAllow;\r\n          }\r\n\r\n      function setAllowSell(bool newAllow)\r\n          public\r\n          onlyRole(ADMIN_ROLE)\r\n          {\r\n            allowSell = newAllow;\r\n          }\r\n\r\n      function setAllowRedeem(bool newAllow)\r\n          public\r\n          onlyRole(ADMIN_ROLE)\r\n          {\r\n            allowRedeem = newAllow;\r\n          }\r\n\r\n      function setMinPurchaseAmount(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          minPurchaseAmount = newAmount;\r\n      } \r\n\r\n      function setMinSaleAmount(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          minSaleAmount = newAmount;\r\n      } \r\n\r\n      function setMinRefStake(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          minRefStake = newAmount;\r\n      } \r\n\r\n      function setReferralFee(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          referralFee = newAmount;\r\n      } \r\n\r\n      function setProofofStakeFee(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          dividendRate = newAmount;\r\n      } \r\n      \r\n      function setTokenSellDiscount(uint newAmount)\r\n          public \r\n          onlyRole(ADMIN_ROLE)\r\n      {\r\n          tokenSellDiscount = newAmount;\r\n      } \r\n      \r\n\r\n      function withdraw()\r\n          {\r\n              //require(myDividends() > 0);\r\n\r\n              address _customerAddress = msg.sender;\r\n              uint256 _dividends = myDividends(false);\r\n\r\n              payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n              // add ref. bonus\r\n              _dividends += referralBalance_[_customerAddress];\r\n              referralBalance_[_customerAddress] = 0;\r\n\r\n              msg.sender.transfer(_dividends);\r\n\r\n              onWithdraw(_customerAddress, _dividends);\r\n          }\r\n\r\n      function myDividends(bool _includeReferralBonus) \r\n          public \r\n          view \r\n          returns(uint256)\r\n            {\r\n                address _customerAddress = msg.sender;\r\n               // return dividendsOf(_customerAddress);\r\n                return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n            }\r\n\r\n\r\n    /**\r\n      * Retrieve the dividend balance of any single address.\r\n      */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n        {\r\n            return (uint256) ((int256)(profitPerShare_ * balanceOf(_customerAddress)) - payoutsTo_[_customerAddress]) / magnitude;\r\n        }\r\n    \r\n    function profitShare() \r\n        public \r\n        view \r\n        returns(uint256)\r\n        {\r\n            return profitPerShare_;\r\n        }\r\n\r\n    function payouts() \r\n        public \r\n        view \r\n        returns(int256)\r\n        {\r\n            return payoutsTo_[msg.sender];\r\n        }\r\n\r\n    function getTotalDivs() \r\n      public\r\n      view\r\n      returns(uint256)\r\n      {\r\n          return (profitPerShare_ * totalSupply);\r\n      }\r\n\r\n\r\n      function tokenData() \r\n          //Ethereum Balance, MyTokens, TotalTokens, myDividends\r\n          public \r\n          view \r\n          returns(uint256, uint256, uint256, uint256, uint256, uint256)\r\n      {\r\n          return(address(this).balance, balanceOf(msg.sender), totalSupply, myDividends(true), tokenSellDiscount, goldPrice);\r\n      }\r\n\r\n\r\n  /**\r\n  * @dev Determine if the address is the owner of the contract\r\n  * @param _address The address to determine of ownership\r\n  */\r\n  function isOwner(address _address) public view returns (bool) {\r\n    return owner == _address;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the list of MultiSig transfers\r\n  */\r\n  function getTransfers() public view returns (address[]) {\r\n    return transfers;\r\n  }\r\n\r\n  /**\r\n  * @dev The GGT ERC20 token uses adminstrators to handle transfering to the crowdsale, vesting and pre-purchasers\r\n  */\r\n  function isAdmin(address _address) public view returns (bool) {\r\n    return hasRole(_address, ADMIN_ROLE);\r\n  }\r\n\r\n  /**\r\n  * @dev Set an administrator as the owner, using Open Zepplin RBAC implementation\r\n  */\r\n  function setAdmin(address _newAdmin) public onlyOwner {\r\n    return addRole(_newAdmin, ADMIN_ROLE);\r\n  }\r\n\r\n  /**\r\n  * @dev Remove an administrator as the owner, using Open Zepplin RBAC implementation\r\n  */\r\n  function removeAdmin(address _oldAdmin) public onlyOwner {\r\n    return removeRole(_oldAdmin, ADMIN_ROLE);\r\n  }\r\n\r\n  /**\r\n  * @dev As an administrator, request the token is made transferable\r\n  * @param _toState The transfer state being requested\r\n  */\r\n  function setTransferable(bool _toState) public onlyRole(ADMIN_ROLE) {\r\n    require(isTransferable != _toState, \"to init a transfer toggle, the toState must change\");\r\n    toggleTransferablePending = true;\r\n    transferToggleRequester = msg.sender;\r\n  }\r\n\r\n  /**\r\n  * @dev As an administrator who did not make the request, approve the transferable state change\r\n  */\r\n  function approveTransferableToggle() public onlyRole(ADMIN_ROLE) {\r\n    require(toggleTransferablePending == true, \"transfer toggle not in pending state\");\r\n    require(transferToggleRequester != msg.sender, \"the requester cannot approve the transfer toggle\");\r\n    isTransferable = !isTransferable;\r\n    toggleTransferablePending = false;\r\n    transferToggleRequester = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function _transfer(address _to, address _from, uint256 _value) private returns (bool) {\r\n    require(_value <= balances[_from], \"the balance in the from address is smaller than the tx value\");\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    //payoutsTo_[_to] += (int256) (profitPerShare_ * _value);\r\n\r\n  \r\n    if(myDividends(true) > 0) withdraw();\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n     // update dividend trackers\r\n    payoutsTo_[_from] -= (int256) (profitPerShare_ * _value);\r\n    payoutsTo_[_to] += (int256) (profitPerShare_ * _value);\r\n        \r\n    // disperse dividends among holders\r\n    //profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / totalSupply);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Public transfer token function. This wrapper ensures the token is transferable\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0), \"cannot transfer to the zero address\");\r\n\r\n    /* We allow holders to return their Tokens to the contract owner at any point */\r\n    if (_to != owner && msg.sender != crowdsale) {\r\n      require(isTransferable == true, \"GGT is not yet transferable\");\r\n    }\r\n\r\n    /* Transfers from the owner address must use the administrative transfer */\r\n    require(msg.sender != owner, \"the owner of the GGT contract cannot transfer\");\r\n\r\n    return _transfer(_to, msg.sender, _value);\r\n  }\r\n\r\n\r\n\r\n\r\n   function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n\r\n  /**\r\n  * @dev Request an administrative transfer. This does not move tokens\r\n  * @param _to The address to transfer to.\r\n  * @param _quantity The amount to be transferred.\r\n  */\r\n  function adminTransfer(address _to, uint256 _quantity) public onlyRole(ADMIN_ROLE) {\r\n    address newTransfer = new MultiSigTransfer(_quantity, _to, msg.sender);\r\n    transfers.push(newTransfer);\r\n  }\r\n\r\n  /**\r\n  * @dev Approve an administrative transfer. This moves the tokens if the requester\r\n  * is an admin, but not the same admin as the one who made the request\r\n  * @param _approvedTransfer The contract address of the multisignature transfer.\r\n  */\r\n  function approveTransfer(address _approvedTransfer) public onlyRole(ADMIN_ROLE) returns (bool) {\r\n    MultiSigTransfer transferToApprove = MultiSigTransfer(_approvedTransfer);\r\n\r\n    uint256 transferQuantity = transferToApprove.quantity();\r\n    address deliveryAddress = transferToApprove.targetAddress();\r\n    address requesterAddress = transferToApprove.requesterAddress();\r\n\r\n    require(msg.sender != requesterAddress, \"a requester cannot approve an admin transfer\");\r\n\r\n    transferToApprove.approveTransfer();\r\n    return _transfer(deliveryAddress, owner, transferQuantity);\r\n  }\r\n\r\n  /**\r\n  * @dev Deny an administrative transfer. This ensures it cannot be approved.\r\n  * @param _approvedTransfer The contract address of the multisignature transfer.\r\n  */\r\n  function denyTransfer(address _approvedTransfer) public onlyRole(ADMIN_ROLE) returns (bool) {\r\n    MultiSigTransfer transferToApprove = MultiSigTransfer(_approvedTransfer);\r\n    transferToApprove.denyTransfer();\r\n  }\r\n\r\n  address public crowdsale = address(0);\r\n\r\n  /**\r\n  * @dev Any admin can set the current crowdsale address, to allows transfers\r\n  * from the crowdsale to the purchaser\r\n  */\r\n  function setCrowdsaleAddress(address _crowdsaleAddress) public onlyRole(ADMIN_ROLE) {\r\n    crowdsale = _crowdsaleAddress;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toggleTransferablePending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSellDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setGoldPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingGold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRefStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllow\",\"type\":\"bool\"}],\"name\":\"setAllowRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setmaxTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveTransferableToggle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvedTransfer\",\"type\":\"address\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositOperations\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"},{\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setGoldRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRefStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositGold\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETHReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setReferralFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemTokensForGold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"},{\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setTokenRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenSellDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReserves\",\"type\":\"uint256\"}],\"name\":\"updateGoldReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSaleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withDrawGoldAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGoldReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toState\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferToggleRequester\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setProofofStakeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withDrawOperationsAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllow\",\"type\":\"bool\"}],\"name\":\"setAllowSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllow\",\"type\":\"bool\"}],\"name\":\"setAllowBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvedTransfer\",\"type\":\"address\"}],\"name\":\"denyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onGoldAccountWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onOpAccountWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTokenRedeem\",\"type\":\"event\"}]","ContractName":"GuardianGoldToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27fcae16c7970f526dd3ff325b918261a5939ad76cfb3b665657c43ea1f1d2bb"}]}