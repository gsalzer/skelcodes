{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n// ----------------------------------------------------------------------------\r\n// 'FLT' 'FLAToken' token contract\r\n//\r\n// Symbol            : FLT\r\n// Name              : FLAToken\r\n// Total supply      : 75,000,00.000000000000000000\r\n// Decimals          : 18\r\n//\r\n// The real cryptocurrency :D\r\n//\r\n// (c) FLAToken 2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n    function mod(uint a, uint b) internal pure returns (uint c) {\r\n        require(b != 0);\r\n        c = a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n    address payable public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract FLAToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    string public version = 'FLT1.0';\r\n    uint8 public decimals;\r\n    uint public tokenSold;\r\n    uint _totalSupply;\r\n    uint _unitsOneEthCanBuy;\r\n    uint _bonusEachTarget;\r\n    uint _bonusAmount;\r\n    bool _salesOpen;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    struct Topic {\r\n        address sender;\r\n        string argument;\r\n        uint likes;\r\n        uint dislikes;\r\n        bool isValue;\r\n    }\r\n    uint _tokensToSendTopic;\r\n\r\n    mapping(bytes32 => Topic) topics;\r\n    bytes32[] topicsList;\r\n\r\n    event Upvote(bytes32 topicKey, uint likes);\r\n    event Downvote(bytes32 topicKey, uint dislikes);\r\n    event NewTopic(bytes32 topicKey);\r\n\r\n    constructor() public {\r\n        symbol = \"FLT\";\r\n        name = \"FLAToken\";\r\n        decimals = 18;\r\n        _totalSupply = 75000000 * 10**uint(decimals);\r\n        _unitsOneEthCanBuy = 3750;\r\n        _tokensToSendTopic = 1 * 10**uint(decimals);\r\n        _bonusEachTarget = 1000000000000000000; //1 ETH\r\n        _bonusAmount = 100 * 10**uint(decimals);\r\n        tokenSold = 0;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        _salesOpen = true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function availableSupply() public view returns (uint) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function unitsOneEthCanBuy() public view returns (uint) {\r\n        return _calculateUnitsOneEthCanBuy();\r\n    }\r\n\r\n    function setUnitsOneEthCanBuy(uint tokens) public onlyOwner {\r\n        _unitsOneEthCanBuy = tokens;\r\n    }\r\n\r\n    function _calculateUnitsOneEthCanBuy() private view returns (uint tokens){\r\n        if(tokenSold > 60000000 * 10**uint(decimals)) {\r\n            return 500;\r\n        } else if (tokenSold > 45000000 * 10**uint(decimals)) {\r\n            return 1500;\r\n        } else if (tokenSold > 30000000 * 10**uint(decimals)) {\r\n            return 2500;\r\n        } else if (tokenSold > 15000000 * 10**uint(decimals)) {\r\n            return 3000;\r\n        }\r\n\r\n        return _unitsOneEthCanBuy;\r\n    }\r\n\r\n    function closeICO() public onlyOwner {\r\n        _salesOpen = false;\r\n        balances[owner] = 0;\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(tokens > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require((tokens == 0) || (allowed[msg.sender][spender] == 0));\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(tokens > 0);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    function buy() external payable {\r\n        require(msg.value > 0 && _salesOpen);\r\n\r\n        uint amount = msg.value.mul(_calculateUnitsOneEthCanBuy());\r\n        if(msg.value >= _bonusEachTarget) {\r\n            amount = amount.add(_bonusAmount.mul(msg.value.div(_bonusEachTarget)));\r\n        }\r\n        require(amount > 0 && balances[owner] >= amount);\r\n\r\n        balances[owner] = balances[owner].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n\r\n        tokenSold = tokenSold.add(amount);\r\n\r\n        emit Transfer(owner, msg.sender, amount);\r\n\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    function newTopic(bytes32 topicKey, string memory argument) public returns(bool success) {\r\n        require(!topics[topicKey].isValue);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_tokensToSendTopic);\r\n        balances[owner] = balances[owner].add(_tokensToSendTopic);\r\n\r\n        emit Transfer(msg.sender, owner, _tokensToSendTopic);\r\n\r\n        topics[topicKey].argument = argument;\r\n        topics[topicKey].sender = msg.sender;\r\n        topics[topicKey].likes = 0;\r\n        topics[topicKey].dislikes = 0;\r\n        topics[topicKey].isValue = true;\r\n\r\n        topicsList.push(topicKey);\r\n\r\n        emit NewTopic(topicKey);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTopic(bytes32 topicKey) public view returns (string memory argument, address sender, uint likes, uint dislikes) {\r\n        Topic memory t = topics[topicKey];\r\n        require(t.isValue);\r\n\r\n        return(t.argument, t.sender, t.likes, t.dislikes);\r\n    }\r\n\r\n     function getTopicsCount() public view returns (uint topicsCount) {\r\n        return topicsList.length;\r\n    }\r\n\r\n    function getTopicAtIndex(uint row) public view returns (bytes32 key, string memory arg, address sender, uint likes, uint dislikes) {\r\n        Topic memory t = topics[topicsList[row]];\r\n        require(t.isValue);\r\n\r\n        return(topicsList[row], t.argument, t.sender, t.likes, t.dislikes);\r\n    }\r\n\r\n    function upvote(bytes32 topicKey, uint tokens) public returns (bool success) {\r\n        require(tokens > 0);\r\n\r\n        Topic storage t = topics[topicKey];\r\n        require(t.isValue && t.sender != msg.sender);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[t.sender] = balances[t.sender].add(tokens);\r\n\r\n        emit Transfer(msg.sender, t.sender, tokens);\r\n\r\n        t.likes = t.likes.add(tokens);\r\n\r\n        emit Upvote(topicKey, t.likes);\r\n\r\n        return true;\r\n    }\r\n\r\n    function downvote(bytes32 topicKey, uint tokens) public returns (bool success) {\r\n        require(tokens > 0);\r\n\r\n        Topic storage t = topics[topicKey];\r\n        require(t.isValue && t.sender != msg.sender);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[t.sender] = balances[t.sender].add(tokens);\r\n\r\n        emit Transfer(msg.sender, t.sender, tokens);\r\n\r\n        t.dislikes = t.dislikes.add(tokens);\r\n\r\n        emit Downvote(topicKey, t.dislikes);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"row\",\"type\":\"uint256\"}],\"name\":\"getTopicAtIndex\",\"outputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"arg\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"likes\",\"type\":\"uint256\"},{\"name\":\"dislikes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"topicKey\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"upvote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"topicKey\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"downvote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"topicKey\",\"type\":\"bytes32\"},{\"name\":\"argument\",\"type\":\"string\"}],\"name\":\"newTopic\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"topicKey\",\"type\":\"bytes32\"}],\"name\":\"getTopic\",\"outputs\":[{\"name\":\"argument\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"likes\",\"type\":\"uint256\"},{\"name\":\"dislikes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"setUnitsOneEthCanBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopicsCount\",\"outputs\":[{\"name\":\"topicsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"topicKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"likes\",\"type\":\"uint256\"}],\"name\":\"Upvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"topicKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"dislikes\",\"type\":\"uint256\"}],\"name\":\"Downvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"topicKey\",\"type\":\"bytes32\"}],\"name\":\"NewTopic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FLAToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab476cf196d6061e4ec636da5224b699904e2a4be3c27040587899379aa5e40b"}]}