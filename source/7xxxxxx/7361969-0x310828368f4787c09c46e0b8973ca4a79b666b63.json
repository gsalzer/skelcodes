{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned\r\n{\r\n  address internal owner;\r\n  address private manager;\r\n  address internal sink;\r\n\r\n  constructor() public\r\n  {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n    sink = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner\r\n  {\r\n    require(msg.sender == owner, \"Contract owner is required\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyManager\r\n  {\r\n    require(msg.sender == manager, \"Contract manager is required\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyManagerNUser(address user)\r\n  {\r\n    require(msg.sender == manager || msg.sender == user, \"Contract manager or wallet owner is required\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner, address newManager, address newSink) onlyOwner public\r\n  {\r\n    owner = newOwner;\r\n    manager = newManager;\r\n    sink = newSink;\r\n  }\r\n}\r\n\r\n/*\r\ninterface tokenRecipient\r\n{\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n*/\r\n\r\ncontract SupplyInfo\r\n{\r\n  string public name;\r\n  string public symbol;\r\n  uint8 constant public decimals = 18;\r\n  uint256 constant internal denominator = 10 ** uint256(decimals);\r\n  uint256 public totalSupply;\r\n\r\n  constructor(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      string tokenSymbol\r\n  )\r\n    public\r\n  {\r\n    totalSupply = initialSupply * denominator;\r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n  }\r\n}\r\n\r\ncontract Transferable\r\n{\r\n  mapping (address => uint256) public balanceOf;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function _transferTokens(address _from, address _to, uint _value) internal\r\n  {\r\n    require(balanceOf[_from] >= _value, \"Not enough funds\");\r\n    require(balanceOf[_to] + _value >= balanceOf[_to], \"BufferOverflow on receiver side\");\r\n\r\n    // uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n    balanceOf[_from] -= _value;\r\n    balanceOf[_to] += _value;\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    // assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success)\r\n  {\r\n    _transferTokens(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is SupplyInfo, Transferable\r\n{\r\n  constructor(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      string tokenSymbol\r\n  ) SupplyInfo(initialSupply, tokenName, tokenSymbol)\r\n    public\r\n  {\r\n    balanceOf[this] = totalSupply;\r\n  }\r\n}\r\n\r\ncontract Manageable is Transferable, Owned {\r\n  event Deposit(\r\n      address indexed _from,\r\n      // bytes32 indexed _id,\r\n      uint _value,\r\n      string comment\r\n  );\r\n\r\n  event Withdraw(\r\n      address indexed _to,\r\n      uint _value,\r\n      string comment\r\n  );\r\n\r\n  // function deposit(bytes32 _id) public payable {\r\n  function deposit(string comment) public payable {\r\n    emit Deposit(msg.sender, msg.value, comment);\r\n  }\r\n\r\n  function withdraw(uint256 amount, string comment) onlyOwner public {\r\n    _transferEther(sink, amount);\r\n    emit Withdraw(sink, amount, comment);\r\n  }\r\n\r\n  function _transferEther(address _to, uint _value) internal {\r\n    address contractAddress = this;\r\n    require(contractAddress.balance >= _value);\r\n    _to.transfer(_value);\r\n  }\r\n}\r\n\r\ncontract Tradeable is ERC20, Manageable {\r\n\r\n\r\n  event Buy(address indexed who, uint256 amount, uint256 buyPrice, string comment);\r\n  event Sell(address indexed who, uint256 amount, uint256 sellPrice, string comment);\r\n\r\n  function _convertEtherToToken(uint256 etherAmount, uint256 buyPrice) pure internal returns (uint256) {\r\n    require(buyPrice > 0, \"Buy price cant be zero\");\r\n\r\n    // BufferOverflow just in case\r\n    require(etherAmount * denominator > etherAmount, \"BufferOverflow\");\r\n    uint256 tokenAmount = etherAmount * denominator / buyPrice;\r\n\r\n    return tokenAmount;\r\n  }\r\n\r\n  function _convertTokenToEther(uint256 tokenAmount, uint256 sellPrice) pure internal returns (uint256) {\r\n    require(sellPrice > 0, \"Sell price cant be zero\");\r\n\r\n    // BufferOverflow just in case\r\n    require(tokenAmount * sellPrice > tokenAmount, \"BufferOverflow\");\r\n    uint256 etherAmount = tokenAmount * sellPrice / denominator;\r\n    return etherAmount;\r\n  }\r\n\r\n  function _buy(uint256 etherAmount, uint256 buyPrice, string comment) internal {\r\n    require(etherAmount > 0, \"Ether amount cant be zero\");\r\n    uint256 tokenAmount = _convertEtherToToken(etherAmount, buyPrice);\r\n\r\n    // At this point transaction is accepted, just send tokens in return\r\n    _transferTokens(this, msg.sender, tokenAmount);\r\n    _transferEther(sink, etherAmount);\r\n    emit Buy(msg.sender, tokenAmount, buyPrice, comment);\r\n  }\r\n\r\n  function _sell(uint256 tokenAmount, uint256 sellPrice, string comment) internal {\r\n    uint256 etherAmount = _convertTokenToEther(tokenAmount, sellPrice);\r\n    require(etherAmount > 0, \"Ether amount after convert become zero - reverting\"); // makes no sense otherwise\r\n\r\n    _transferTokens(msg.sender, this, tokenAmount);\r\n    _transferEther(msg.sender, tokenAmount);\r\n    emit Sell(msg.sender, tokenAmount,sellPrice, comment);\r\n  }\r\n}\r\n\r\ncontract FrezeeableAccounts is Transferable, Owned {\r\n  mapping (address => bool) internal frozenAccount;\r\n  /* This generates a public event  on the blockchain that will notify clients */\r\n  event FrozenFunds(address indexed target, bool indexed frozen);\r\n\r\n  modifier notFrozen(address target)\r\n  {\r\n    require(!frozenAccount[target], \"Account is frozen\");\r\n    _;\r\n  }\r\n\r\n  function freezeAccount(address target, bool freeze) onlyManager public {\r\n    frozenAccount[target] = freeze;\r\n    emit FrozenFunds(target, freeze);\r\n  }\r\n\r\n  function iamFrozen() view public returns(bool isFrozen)\r\n  {\r\n    return frozenAccount[msg.sender];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notFrozen(msg.sender) notFrozen(_to) returns (bool success)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n}\r\n\r\ncontract Destructable is Owned {\r\n  event Destruct(string indexed comment);\r\n\r\n  function destruct(string comment) onlyOwner public {\r\n    selfdestruct(owner);\r\n    emit Destruct(comment);\r\n  }\r\n}\r\n\r\ncontract CoeficientTransform is SupplyInfo\r\n{\r\n  function applyChange(uint256 currentCoeficient, uint256 value) pure internal returns(uint256)\r\n  {\r\n    return currentCoeficient * value / denominator;\r\n  }\r\n\r\n  function deduceChange(uint256 currentCoeficient, uint256 value) pure internal returns(uint256)\r\n  {\r\n    require(value > 0, \"Cant deduce zero change\");\r\n    uint256 opposite = denominator * denominator / value;\r\n    return applyChange(currentCoeficient, opposite);\r\n  }\r\n}\r\n\r\ncontract DayCounter\r\n{\r\n  uint private DayZero;\r\n  uint internal constant SecondsInDay = 60 * 60 * 24;\r\n\r\n  constructor(uint ZeroDayTimestamp) public\r\n  {\r\n    DayZero = ZeroDayTimestamp;\r\n  }\r\n\r\n  function daysSince(uint a, uint b) pure internal returns(uint)\r\n  {\r\n    return (b - a) / SecondsInDay;\r\n  }\r\n\r\n  function DaysPast() view public returns(uint)\r\n  {\r\n    return daysSince(DayZero, now);\r\n  }\r\n}\r\n\r\ncontract InvestmentTransform is CoeficientTransform, DayCounter\r\n{\r\n  uint constant private percentsPerYear = 1095;\r\n\r\n  function currentRoiInPersents() view public returns(uint)\r\n  {\r\n    uint currentPercents = percentsPerYear * DaysPast() / 365;\r\n    return 100 + currentPercents;\r\n  }\r\n\r\n  function investmentRate(uint256 currentCoeficient) view internal returns(uint256)\r\n  {\r\n    uint256 dailyMultiply = denominator * currentRoiInPersents() / 100;\r\n    return applyChange(currentCoeficient, dailyMultiply);\r\n  }\r\n}\r\n\r\ncontract LinkedToFiatTransform is CoeficientTransform, Owned\r\n{\r\n  uint256 public fiatDriftAncor;\r\n  uint256 public etherToFiatRate;\r\n\r\n  event FiatLink(uint256 ancorDrift, uint exchangeRate);\r\n\r\n  function setFiatLinkedCoef(uint256 newAncor, uint256 newRate) public onlyManager {\r\n    require(newAncor > 0 && newRate > 0, \"Coeficients cant be zero\");\r\n    fiatDriftAncor = newAncor;\r\n    etherToFiatRate = newRate;\r\n    emit FiatLink(newAncor, newRate);\r\n  }\r\n\r\n  function fiatDrift(uint256 currentCoeficient) view internal returns(uint256)\r\n  {\r\n    return applyChange(currentCoeficient, fiatDriftAncor);\r\n  }\r\n\r\n  function FiatToEther(uint256 amount) view internal returns(uint256)\r\n  {\r\n    return deduceChange(amount, etherToFiatRate);\r\n  }\r\n\r\n  function EtherToFiat(uint256 amount) view internal returns(uint256)\r\n  {\r\n    return applyChange(amount, etherToFiatRate);\r\n  }\r\n}\r\n\r\ncontract StartStopSell is CoeficientTransform, Owned\r\n{\r\n  bool internal buyAvailable = false;\r\n  bool internal sellAvailable = false;\r\n\r\n  function updateBuySellFlags(bool allowBuy, bool allowSell) public onlyManager\r\n  {\r\n    buyAvailable = allowBuy;\r\n    sellAvailable = allowSell;\r\n  }\r\n\r\n  modifier canBuy()\r\n  {\r\n    require(buyAvailable, \"Buy currently disabled\");\r\n    _;\r\n  }\r\n\r\n  modifier canSell()\r\n  {\r\n    require(sellAvailable, \"Sell currently disabled\");\r\n    _;\r\n  }\r\n}\r\n\r\ncontract LISCTrade is FrezeeableAccounts, Tradeable, LinkedToFiatTransform, InvestmentTransform, StartStopSell\r\n{\r\n  uint256 internal baseFiatPrice;\r\n  uint256 public minBuyAmount;\r\n\r\n  constructor(uint256 basePrice) public\r\n  {\r\n    baseFiatPrice = basePrice;\r\n  }\r\n\r\n  function setMinTrade(uint256 _minBuyAmount) onlyManager public\r\n  {\r\n    minBuyAmount = _minBuyAmount;\r\n  }\r\n\r\n  function priceInUSD() view public returns(uint256)\r\n  {\r\n    uint256 price = baseFiatPrice;\r\n    price = fiatDrift(price);\r\n    price = investmentRate(price);\r\n    require(price > 0, \"USD price cant be zero\");\r\n    return price;\r\n  }\r\n\r\n  function priceInETH() view public returns(uint256)\r\n  {\r\n    return FiatToEther(priceInUSD());\r\n  }\r\n\r\n  function tokensPerETH() view public returns(uint256)\r\n  {\r\n    uint256 EthPerToken = priceInETH();\r\n    return deduceChange(denominator, EthPerToken);\r\n  }\r\n\r\n  function buy(string comment) payable public canBuy notFrozen(msg.sender)\r\n  {\r\n    uint256 USDAmount = EtherToFiat(msg.value);\r\n    require(USDAmount > minBuyAmount, \"You cant buy lesser than min USD amount\");\r\n    _buy(msg.value, priceInETH(), comment);\r\n  }\r\n\r\n  function sell(uint256 tokenAmount, string comment) public canSell notFrozen(msg.sender)\r\n  {\r\n    _sell(tokenAmount, priceInETH(), comment);\r\n  }\r\n}\r\n\r\n\r\ncontract MintNBurn is ERC20\r\n{\r\n  event Mint(address indexed target, uint256 mintedAmount, string comment);\r\n  event Burn(address indexed target, uint256 mintedAmount, string comment);\r\n\r\n\r\n  function mintToken(address target, uint256 mintedAmount, string comment) internal\r\n  {\r\n    balanceOf[this] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n\r\n    _transferTokens(this, target, mintedAmount);\r\n    emit Mint(target, mintedAmount, comment);\r\n  }\r\n\r\n  function burnToken(address target, uint256 amount, string comment) internal\r\n  {\r\n    _transferTokens(msg.sender, this, amount);\r\n    balanceOf[this] -= amount;\r\n    totalSupply -= amount;\r\n    emit Burn(target, amount, comment);\r\n  }\r\n}\r\n\r\ncontract Upgradeable is MintNBurn, Owned\r\n{\r\n  address private prevVersion;\r\n  address private newVersion = 0x0;\r\n  mapping (address => bool) public upgraded;\r\n\r\n  constructor(address upgradeFrom) internal {\r\n    prevVersion = upgradeFrom;\r\n  }\r\n\r\n  function setUpgradeTo(address upgradeTo) public onlyOwner {\r\n    newVersion = upgradeTo;\r\n  }\r\n\r\n  function upgradeAvalable() view public returns(bool) {\r\n    return newVersion != 0x0;\r\n  }\r\n\r\n  function upgradeMe() public {\r\n    upgradeUser(msg.sender);\r\n  }\r\n\r\n  function upgradeUser(address target) public onlyManagerNUser(target)\r\n  {\r\n    require(upgradeAvalable(), \"New version not yet available\");\r\n    Upgradeable newContract = Upgradeable(newVersion);\r\n    require(!newContract.upgraded(target), \"Your account already been upgraded\");\r\n    newContract.importUser(target);\r\n    burnToken(target, balanceOf[target], \"Upgrading to new version\");\r\n  }\r\n\r\n  function importMe() public {\r\n    importUser(msg.sender);\r\n  }\r\n\r\n  function importUser(address target) onlyManager public\r\n  {\r\n    if (target == prevVersion) {\r\n      target = this;\r\n    }\r\n\r\n    require(!upgraded[target], \"Account already been upgraded\");\r\n    upgraded[target] = true;\r\n    Transferable oldContract = Transferable(prevVersion);\r\n    uint256 amount = oldContract.balanceOf(target);\r\n\r\n    mintToken(target, amount, \"Upgrade from previous version\");\r\n  }\r\n}\r\n\r\ncontract TOKEN is ERC20, Owned, Destructable, LISCTrade, Upgradeable  {\r\n\r\n  event Init(uint256 basePrice, uint dayZero);\r\n\r\n  constructor(\r\n      string tokenName,\r\n      string tokenSymbol,\r\n      address _prevVersion\r\n  ) ERC20(0, tokenName, tokenSymbol) DayCounter(1542585600) LISCTrade(15 * denominator) Upgradeable(_prevVersion) public\r\n  {\r\n    emit Init(15, 1542585600);\r\n  }\r\n\r\n  function balance() view public returns(uint256)\r\n  {\r\n    return balanceOf[msg.sender];\r\n  }\r\n\r\n  event Broadcast(string message);\r\n\r\n  function broadcast(string _message) public onlyManager\r\n  {\r\n    emit Broadcast(_message);\r\n  }\r\n\r\n  event Mint(address indexed target, uint256 mintedAmount, string comment);\r\n\r\n  function mint(address target, uint256 mintedAmount, string comment) onlyOwner public {\r\n    mintedAmount *= denominator;\r\n    mintToken(target, mintedAmount, comment);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"broadcast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"upgradeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iamFrozen\",\"outputs\":[{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowBuy\",\"type\":\"bool\"},{\"name\":\"allowSell\",\"type\":\"bool\"}],\"name\":\"updateBuySellFlags\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"importUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoiInPersents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"importMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAncor\",\"type\":\"uint256\"},{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setFiatLinkedCoef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newManager\",\"type\":\"address\"},{\"name\":\"newSink\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"upgradeTo\",\"type\":\"address\"}],\"name\":\"setUpgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAvalable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToFiatRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatDriftAncor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DaysPast\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_prevVersion\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dayZero\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Broadcast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ancorDrift\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"FiatLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Destruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TOKEN","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000940d04b20069475d3757196fda30e6bc4065fa0d00000000000000000000000000000000000000000000000000000000000000114c49535420284c4953432e574f524c442900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094c4953542076312e330000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4f040f52ba0491e992234adbaca35bdd2886d8d7aaa94a0a6f956521735efbc9"}]}