{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * Copy right (c) Donex UG (haftungsbeschraenkt)\r\n * All rights reserved\r\n * Version 0.2.1 (BETA)\r\n */\r\n\r\ncontract Bounty {\r\n\r\n    address payable public masterAddress;\r\n    mapping(address => bool) bountyPermission;\r\n    uint public bounty;\r\n    mapping(address => bool) gotBounty;\r\n\r\n    uint8 public maxNumberOfBounties;\r\n    uint8 public numberOfGivenBounties;\r\n\r\n    mapping(address => address) creatorsConditionalPaymentAddress;\r\n\r\n    address owner;\r\n    uint public deadline;\r\n\r\n    modifier onlyByOwner ()\r\n    {\r\n        require(msg.sender ==  owner);\r\n        _;\r\n    }\r\n\r\n    modifier deadlineExceeded ()\r\n    {\r\n        require(now > deadline);\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address payable _masterAddress,\r\n        uint8 _maxNumberOfBounties,\r\n        uint _deadline\r\n    )\r\n        payable\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        deadline = _deadline;\r\n        numberOfGivenBounties = 0;\r\n        maxNumberOfBounties = _maxNumberOfBounties;\r\n        bounty = msg.value / maxNumberOfBounties;\r\n        masterAddress = _masterAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice The aim is to create a conditional payment and find someone to buy the counter position\r\n     *\r\n     * Parameters to forward to master contract:\r\n     * @param long .. Decide if you want to be in the long or short position of your contract.\r\n     * @param dueDate .. Set a due date of your contract. Make sure this is supported by us. Use OD.exchange to avoid conflicts here.\r\n     * @param strikePrice .. Choose a strike price which will be used at due date for calculation of your payout. Make sure that the format is correct. Use OD.exchange to avoid mistakes.\r\n     */\r\n    function createContractWithBounty (\r\n        bool long,\r\n        uint256 dueDate,\r\n        uint256 strikePrice\r\n    )\r\n        payable\r\n        public\r\n    {\r\n        // New conditional payment must be created before deadline exceeded\r\n        require(now < deadline);\r\n\r\n        // Only once per creator address\r\n        require(!bountyPermission[msg.sender]);\r\n        bountyPermission[msg.sender] = true;\r\n\r\n        // Only first customers can get bounty\r\n        numberOfGivenBounties += 1;\r\n        require(numberOfGivenBounties <= maxNumberOfBounties);\r\n\r\n        // Create new conditional payment in master contract:\r\n        Master master = Master(masterAddress);\r\n        address newConditionalPayment = master.createConditionalPayment.value(msg.value)(\r\n            msg.sender,\r\n            long,\r\n            dueDate,\r\n            strikePrice\r\n        );\r\n\r\n        // Attribute conditional payment to creator\r\n        creatorsConditionalPaymentAddress[msg.sender] = newConditionalPayment;\r\n    }\r\n\r\n    /**\r\n     *  @notice Withdraw the bounty after creation of conditional payment and finding counter party\r\n     */\r\n    function withdrawBounty ()\r\n        public\r\n    {\r\n        // Creator needs to have permission\r\n        require(bountyPermission[msg.sender]);\r\n        bountyPermission[msg.sender] = false;\r\n\r\n        // Only one withdraw per creator\r\n        require(!gotBounty[msg.sender]);\r\n        gotBounty[msg.sender] = true;\r\n\r\n        ConditionalPayment conditionalPayment = ConditionalPayment(creatorsConditionalPaymentAddress[msg.sender]);\r\n\r\n        // Conditional payment needs to have at least one counter party\r\n        require(conditionalPayment.countCounterparties() > 0);\r\n\r\n        msg.sender.transfer(bounty);\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can withdraw bounty permission if creators did not succeed to find a taker before the deadline\r\n     */\r\n    function withdrawPermission (address unsuccessfulCreator)\r\n        public\r\n        onlyByOwner\r\n        deadlineExceeded\r\n    {\r\n        // Unsuccessful criterium\r\n        ConditionalPayment conditionalPayment = ConditionalPayment(creatorsConditionalPaymentAddress[unsuccessfulCreator]);\r\n        require(conditionalPayment.countCounterparties() == 0);\r\n\r\n        // Disqualify creator from bounty\r\n        bountyPermission[unsuccessfulCreator] = false;\r\n        creatorsConditionalPaymentAddress[msg.sender] = 0x0000000000000000000000000000000000000000;\r\n\r\n        numberOfGivenBounties -= 1;\r\n    }\r\n\r\n    function withdrawUnusedBounties ()\r\n        public\r\n        onlyByOwner\r\n        deadlineExceeded\r\n    {\r\n        msg.sender.transfer((maxNumberOfBounties - numberOfGivenBounties)*bounty);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface Master {\r\n\r\n    function createConditionalPayment (\r\n        address payable,\r\n        bool,\r\n        uint256,\r\n        uint256\r\n    )\r\n        payable\r\n        external\r\n        returns(address newDerivativeAddress);\r\n\r\n}\r\n\r\ninterface ConditionalPayment {\r\n\r\n    function countCounterparties () external returns(uint8);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfBounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnusedBounties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unsuccessfulCreator\",\"type\":\"address\"}],\"name\":\"withdrawPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGivenBounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"long\",\"type\":\"bool\"},{\"name\":\"dueDate\",\"type\":\"uint256\"},{\"name\":\"strikePrice\",\"type\":\"uint256\"}],\"name\":\"createContractWithBounty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_masterAddress\",\"type\":\"address\"},{\"name\":\"_maxNumberOfBounties\",\"type\":\"uint8\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000077d774c419d0d6357f7a23f0f512e63528c77932000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000005d0d4550","Library":"","SwarmSource":"bzzr://9f2e6a5314f1af3fcc2721263af08f317c7556562025af56da32014f2008ef28"}]}