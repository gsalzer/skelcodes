{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n/** \r\n _____                   __  __      ______      ____                 ____       ______      ______   \r\n/\\  __`\\     /'\\_/`\\    /\\ \\/\\ \\    /\\__  _\\    /\\  _`\\              /\\  _`\\    /\\__  _\\    /\\__  _\\  \r\n\\ \\ \\/\\ \\   /\\      \\   \\ \\ `\\\\ \\   \\/_/\\ \\/    \\ \\,\\L\\_\\            \\ \\ \\L\\ \\  \\/_/\\ \\/    \\/_/\\ \\/  \r\n \\ \\ \\ \\ \\  \\ \\ \\__\\ \\   \\ \\ , ` \\     \\ \\ \\     \\/_\\__ \\    _______  \\ \\  _ <'    \\ \\ \\       \\ \\ \\  \r\n  \\ \\ \\_\\ \\  \\ \\ \\_/\\ \\   \\ \\ \\`\\ \\     \\_\\ \\__    /\\ \\L\\ \\ /\\______\\  \\ \\ \\L\\ \\    \\_\\ \\__     \\ \\ \\ \r\n   \\ \\_____\\  \\ \\_\\\\ \\_\\   \\ \\_\\ \\_\\    /\\_____\\   \\ `\\____\\\\/______/   \\ \\____/    /\\_____\\     \\ \\_\\\r\n    \\/_____/   \\/_/ \\/_/    \\/_/\\/_/    \\/_____/    \\/_____/             \\/___/     \\/_____/      \\/_/\r\n\r\n    WEBSITE: omnis-bit.com\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakerToken {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n\r\n    function claimStake() public returns(bool);\r\n\r\n    function coinAge() public view returns(uint256);\r\n\r\n    function annualInterest() public view returns(uint256);\r\n    event ClaimStake(address indexed _address, uint _reward);\r\n}\r\n\r\ncontract OMNIS is ERC20, StakerToken, Ownable {\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    string public name = \"OMNIS-BIT\";\r\n    string public symbol = \"OMNIS\";\r\n    uint public decimals = 18;\r\n\r\n    uint public chainStartTime;\r\n    uint public chainStartBlockNumber;\r\n    uint public stakeStartTime;\r\n    uint public stakeMinAge = 3 days;\r\n    uint public stakeMaxAge = 90 days;\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n\r\n    struct Airdrop {\r\n        uint value;\r\n        bool claimed;\r\n    }\r\n\r\n    mapping(address => Airdrop) public airdrops;\r\n\r\n    //ESCROW RELATED\r\n    enum PaymentStatus {\r\n        Pending,\r\n        Completed,\r\n        Refunded\r\n    }\r\n\r\n    event NewFeeRate(uint newFee);\r\n    event NewCollectionWallet(address newWallet);\r\n    event PaymentCreation(uint indexed orderId, address indexed customer, uint value);\r\n    event PaymentCompletion(uint indexed orderId, address indexed provider, address indexed customer, uint value, PaymentStatus status);\r\n\r\n    struct Payment {\r\n        address provider;\r\n        address customer;\r\n        uint value;\r\n        PaymentStatus status;\r\n        bool refundApproved;\r\n    }\r\n\r\n    uint escrowCounter;\r\n    uint public escrowFeePercent = 5; //0.5%\r\n\r\n    mapping(uint => Payment) public payments;\r\n    address public collectionAddress;\r\n    //ESCROW SECTION END\r\n\r\n    struct transferInStruct {\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => transferInStruct[]) transferIns;\r\n\r\n    modifier canPoSclaimStake() {\r\n        require(totalSupply < maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        maxTotalSupply = 1000000000 * 10 ** 18;\r\n        totalInitialSupply = 820000000 * 10 ** 18;\r\n\r\n        chainStartTime = now; //Original Time\r\n        chainStartBlockNumber = block.number; //Original Block\r\n\r\n        totalSupply = totalInitialSupply;\r\n        \r\n        collectionAddress = msg.sender; //Initially collection address to owner\r\n\r\n        balances[msg.sender] = totalInitialSupply;\r\n        emit Transfer(address(0), msg.sender, totalInitialSupply);\r\n    }\r\n\r\n    function setCurrentEscrowFee(uint _newFee) onlyOwner public {\r\n        require(_newFee != 0 && _newFee < 1000);\r\n        escrowFeePercent = _newFee;\r\n        emit NewFeeRate(escrowFeePercent);\r\n    }\r\n\r\n    function setCollectionWallet(address _newWallet) onlyOwner public {\r\n        require(_newWallet != address(0));\r\n        collectionAddress = _newWallet;\r\n        emit NewCollectionWallet(collectionAddress);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n\r\n        if (msg.sender == _to) return claimStake();\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev claimStake\r\n     * @dev Allow any user to claim stake earned\r\n     */\r\n    function claimStake() canPoSclaimStake public returns(bool) {\r\n        if (balances[msg.sender] <= 0) return false;\r\n        if (transferIns[msg.sender].length <= 0) return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if (reward <= 0) return false;\r\n\r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), uint64(now)));\r\n\r\n        emit Transfer(address(0),msg.sender,reward);\r\n        emit ClaimStake(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev getBlockNumber\r\n     * @dev Returns the block number since deployment\r\n     */\r\n    function getBlockNumber() public view returns(uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev coinAge\r\n     * @dev Returns the coinage for the callers account\r\n     */\r\n    function coinAge() public view returns(uint myCoinAge) {\r\n        myCoinAge = getCoinAge(msg.sender, now);\r\n    }\r\n\r\n    /**\r\n     * @dev annualInterest\r\n     * @dev Returns the current interest rate\r\n     */\r\n    function annualInterest() public view returns(uint interest) {\r\n        uint _now = now;\r\n        interest = 0;\r\n        if ((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            interest = (106 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 1) {\r\n            interest = (49 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 2) {\r\n            interest = (24 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 3) {\r\n            interest = (13 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 4) {\r\n            interest = (11 * 1e15);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev getProofOfStakeReward\r\n     * @dev Returns the current stake of a wallet\r\n     * @param _address is the user wallet\r\n     */\r\n    function getProofOfStakeReward(address _address) public view returns(uint) {\r\n        require((now >= stakeStartTime) && (stakeStartTime > 0));\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if (_coinAge <= 0) return 0;\r\n\r\n        uint interest = 0;\r\n\r\n        if ((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            interest = (106 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 1) {\r\n            interest = (49 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 2) {\r\n            interest = (24 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 3) {\r\n            interest = (13 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 4) {\r\n            interest = (11 * 1e1);\r\n        }\r\n\r\n        return (_coinAge * interest).div(365 * (10 ** decimals));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns(uint _coinAge) {\r\n        if (transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++) {\r\n            if (_now < uint(transferIns[_address][i].time).add(stakeMinAge)) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if (nCoinSeconds > stakeMaxAge) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev ownerSetStakeStartTime\r\n     * @dev Used by the owner to define the staking period start\r\n     * @param timestamp time in UNIX format\r\n     */\r\n    function ownerSetStakeStartTime(uint timestamp) onlyOwner public {\r\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\r\n        stakeStartTime = timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev batchTransfer\r\n     * @dev Used by the owner to deliver several transfers at the same time (Airdrop)\r\n     * @param _recipients Array of addresses\r\n     * @param _values Array of values\r\n     */\r\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner external returns(bool) {\r\n        //Check data sizes\r\n        require(_recipients.length > 0 && _recipients.length == _values.length);\r\n        //Total value calc\r\n        uint total = 0;\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            total = total.add(_values[i]);\r\n        }\r\n        //Sender must hold funds\r\n        require(total <= balances[msg.sender]);\r\n        //Make transfers\r\n        uint64 _now = uint64(now);\r\n        for (uint j = 0; j < _recipients.length; j++) {\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]), _now));\r\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\r\n        }\r\n        //Reduce all balance on a single transaction from sender\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        if (balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev dropSet\r\n     * @dev Used by the owner to set several self-claiming drops at the same time (Airdrop)\r\n     * @param _recipients Array of addresses\r\n     * @param _values Array of values\r\n     */\r\n    function dropSet(address[] _recipients, uint[] _values) onlyOwner external returns(bool) {\r\n        //Check data sizes \r\n        require(_recipients.length > 0 && _recipients.length == _values.length);\r\n\r\n        for (uint j = 0; j < _recipients.length; j++) {\r\n            //Store user drop info\r\n            airdrops[_recipients[j]].value = _values[j];\r\n            airdrops[_recipients[j]].claimed = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev claimAirdrop\r\n     * @dev Allow any user with a drop set to claim it\r\n     */\r\n    function claimAirdrop() external returns(bool) {\r\n        //Check if not claimed\r\n        require(airdrops[msg.sender].claimed == false);\r\n        require(airdrops[msg.sender].value != 0);\r\n\r\n        //Set Claim to True\r\n        airdrops[msg.sender].claimed = true;\r\n        //Clear value\r\n        airdrops[msg.sender].value = 0;\r\n\r\n        //Tokens are on owner wallet\r\n        address _from = owner;\r\n        //Tokens goes to costumer\r\n        address _to = msg.sender;\r\n        //Original value\r\n        uint _value = airdrops[msg.sender].value;\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        return true;\r\n\r\n    }\r\n\r\n    //ESCROW SECTION\r\n    /**\r\n     * @dev createPayment\r\n     * @dev Allow a user to start a Escrow process\r\n     * @param _customer Counterpart that will receive payment on success\r\n     * @param _value Amount to be escrowed\r\n     */\r\n    function createPayment(address _customer, uint _value) external returns(uint) {\r\n\r\n        address _to = address(this);\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\r\n\r\n        payments[escrowCounter] = Payment(msg.sender, _customer, _value, PaymentStatus.Pending, false);\r\n        emit PaymentCreation(escrowCounter, _customer, _value);\r\n\r\n        escrowCounter = escrowCounter.add(1);\r\n        return escrowCounter - 1;\r\n    }\r\n\r\n    /**\r\n     * @dev release\r\n     * @dev Allow a user to release a payment\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function release(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending);\r\n        //Only owner or token provider\r\n        require(msg.sender == owner || msg.sender == payment.provider);\r\n        //Tokens are on contract\r\n        address _from = address(this);\r\n        //Tokens goes to costumer\r\n        address _to = payment.customer;\r\n        //Original value\r\n        uint _value = payment.value;\r\n        //Fee calculation\r\n        uint _fee = _value.mul(escrowFeePercent).div(1000);\r\n        //Value less fees\r\n        _value = _value.sub(_fee);\r\n        //Costumer transfer\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        //collectionAddress fee recolection\r\n        balances[_from] = balances[_from].sub(_fee);\r\n        balances[collectionAddress] = balances[collectionAddress].add(_fee);\r\n        emit Transfer(_from, collectionAddress, _fee);\r\n        //Delete any staking from contract address itself\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        //Store staking information for receivers\r\n        uint64 _now = uint64(now);\r\n        //Costumer\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        //collectionAddress\r\n        transferIns[collectionAddress].push(transferInStruct(uint128(_fee), _now));\r\n        //Payment Escrow Completed\r\n        payment.status = PaymentStatus.Completed;\r\n        //Emit Event\r\n        emit PaymentCompletion(_orderId, payment.provider, payment.customer, payment.value, payment.status);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev refund\r\n     * @dev Allow a user to refund a payment\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function refund(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending);\r\n        //Only if refund was approved\r\n        require(payment.refundApproved);\r\n        //Tokens are on contract\r\n        address _from = address(this);\r\n        //Tokens go back to provider\r\n        address _to = payment.provider;\r\n        //Original value\r\n        uint _value = payment.value;\r\n        //Provider transfer\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        //Delete any staking from contract address itself\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        //Store staking information for receivers\r\n        uint64 _now = uint64(now);\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        //Payment Escrow Refunded\r\n        payment.status = PaymentStatus.Refunded;\r\n        //Emit Event\r\n        emit PaymentCompletion(_orderId, payment.provider, payment.customer, payment.value, payment.status);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev approveRefund\r\n     * @dev Allow a user to approve a refund\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function approveRefund(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending);\r\n        //Only owner or costumer\r\n        require(msg.sender == owner || msg.sender == payment.customer);\r\n        //Approve Refund\r\n        payment.refundApproved = true;\r\n\r\n        return true;\r\n    }\r\n    //ESCROW SECTION END\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getProofOfStakeReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setCurrentEscrowFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerSetStakeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"approveRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"customer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"refundApproved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"dropSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setCollectionWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"NewFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewCollectionWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"PaymentCompletion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"ClaimStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OMNIS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://807adeda907c573622d08cd63f3f64aee4267c4dcb932586a55f86daa940b301"}]}