{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n/**\r\n * Trickle is a decentralized program allowing people to create\r\n * secure fixed hourly rate agreements leveraging the power of blockchain technology.\r\n * Trickle works with any ERC20-compatible tokens on top of Ethereum, including stablecoins.\r\n *\r\n * Brought to you by DreamTeam <https://token.dreamteam.gg>.\r\n * Learn more about Trickle <https://github.com/dreamteam-gg/trickle-dapp>.\r\n * Access this DApp at <https://trickle.gg> or <http://zitros.github.io/trickle-dapp>.\r\n */\r\ncontract Trickle {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event AgreementCreated(\r\n        uint256 indexed agreementId,\r\n        address token,\r\n        address indexed recipient,\r\n        address indexed sender,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 totalAmount,\r\n        uint256 createdAt\r\n    );\r\n    event AgreementCanceled(\r\n        uint256 indexed agreementId,\r\n        address token,\r\n        address indexed recipient,\r\n        address indexed sender,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 amountReleased,\r\n        uint256 amountCanceled,\r\n        uint256 canceledAt\r\n    );\r\n    event Withdraw(\r\n        uint256 indexed agreementId,\r\n        address token,\r\n        address indexed recipient,\r\n        address indexed sender,\r\n        uint256 amountReleased,\r\n        uint256 releasedAt\r\n    );\r\n\r\n    uint256 private lastAgreementId;\r\n\r\n    struct Agreement {\r\n        uint256 meta; // Metadata packs 3 values to save on storage:\r\n                      // + uint48 start;    // Timestamp with agreement start. Up to year 999999+.\r\n                      // + uint48 duration; // Agreement duration. Up to year 999999+.\r\n                      // + uint160 token;   // Token address converted to uint.\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n        address recipient;\r\n        address sender;\r\n    }\r\n\r\n    mapping (uint256 => Agreement) private agreements;\r\n\r\n    modifier agreementPartiesOnly(uint256 agreementId) {\r\n        require (\r\n            msg.sender == agreements[agreementId].sender ||\r\n            msg.sender == agreements[agreementId].recipient,\r\n            \"Allowed only for agreement's sender or recipient\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validAgreement(uint256 agreementId) {\r\n        require(agreements[agreementId].releasedAmount < agreements[agreementId].totalAmount, \"Agreement is completed or does not exists\");\r\n        _;\r\n    }\r\n\r\n    function createAgreement(IERC20 token, address recipient, uint256 totalAmount, uint48 duration, uint48 start) external {\r\n        require(duration > 0, \"Duration must be greater than zero\");\r\n        require(totalAmount > 0, \"Total Amount must be greater than zero\");\r\n        require(start > 0, \"Start must be greater than zero\");\r\n        require(token != IERC20(0x0), \"Token must be a valid Ethereum address\");\r\n        require(recipient != address(0x0), \"Recipient must be a valid Ethereum address\");\r\n\r\n        uint256 agreementId = ++lastAgreementId;\r\n\r\n        agreements[agreementId] = Agreement({\r\n            meta: encodeMeta(start, duration, uint256(address(token))),\r\n            recipient: recipient,\r\n            totalAmount: totalAmount,\r\n            sender: msg.sender,\r\n            releasedAmount: 0\r\n        });\r\n\r\n        token.transferFrom(agreements[agreementId].sender, address(this), agreements[agreementId].totalAmount);\r\n\r\n        emit AgreementCreated(\r\n            agreementId,\r\n            address(token),\r\n            recipient,\r\n            msg.sender,\r\n            start,\r\n            duration,\r\n            totalAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getAgreement(uint256 agreementId) external view returns (\r\n        address token,\r\n        address recipient,\r\n        address sender,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 totalAmount,\r\n        uint256 releasedAmount\r\n    ) {\r\n        (start, duration, token) = decodeMeta(agreements[agreementId].meta);\r\n        sender = agreements[agreementId].sender;\r\n        totalAmount = agreements[agreementId].totalAmount;\r\n        releasedAmount = agreements[agreementId].releasedAmount;\r\n        recipient = agreements[agreementId].recipient;\r\n    }\r\n\r\n    function withdrawTokens(uint256 agreementId) public validAgreement(agreementId) {\r\n        uint256 unreleased = withdrawableAmount(agreementId);\r\n        require(unreleased > 0, \"Nothing to withdraw\");\r\n\r\n        agreements[agreementId].releasedAmount = agreements[agreementId].releasedAmount.add(unreleased);\r\n        (, , address token) = decodeMeta(agreements[agreementId].meta);\r\n        IERC20(token).transfer(agreements[agreementId].recipient, unreleased);\r\n\r\n        emit Withdraw(\r\n            agreementId,\r\n            token,\r\n            agreements[agreementId].recipient,\r\n            agreements[agreementId].sender,\r\n            unreleased,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function cancelAgreement(uint256 agreementId) external validAgreement(agreementId) agreementPartiesOnly(agreementId) {\r\n        if (withdrawableAmount(agreementId) > 0) {\r\n            withdrawTokens(agreementId);\r\n        }\r\n\r\n        uint256 releasedAmount = agreements[agreementId].releasedAmount;\r\n        uint256 canceledAmount = agreements[agreementId].totalAmount.sub(releasedAmount);\r\n\r\n        (uint256 start, uint256 duration, address token) = decodeMeta(agreements[agreementId].meta);\r\n\r\n        agreements[agreementId].releasedAmount = agreements[agreementId].totalAmount;\r\n        if (canceledAmount > 0) {\r\n            IERC20(token).transfer(agreements[agreementId].sender, canceledAmount);\r\n        }\r\n\r\n        emit AgreementCanceled(\r\n            agreementId,\r\n            token,\r\n            agreements[agreementId].recipient,\r\n            agreements[agreementId].sender,\r\n            start,\r\n            duration,\r\n            releasedAmount,\r\n            canceledAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawableAmount(uint256 agreementId) public view returns (uint256) {\r\n        return proportionalAmount(agreementId).sub(agreements[agreementId].releasedAmount);\r\n    }\r\n\r\n    function proportionalAmount(uint256 agreementId) private view returns (uint256) {\r\n        (uint256 start, uint256 duration, ) = decodeMeta(agreements[agreementId].meta);\r\n        if (block.timestamp >= start.add(duration)) {\r\n            return agreements[agreementId].totalAmount;\r\n        } else if (block.timestamp <= start) {\r\n            return 0;\r\n        } else {\r\n            return agreements[agreementId].totalAmount.mul(\r\n                block.timestamp.sub(start)\r\n            ).div(duration);\r\n        }\r\n    }\r\n\r\n    function encodeMeta(uint256 start, uint256 duration, uint256 token) private pure returns(uint256 result) {\r\n        require(\r\n            start < 2 ** 48 &&\r\n            duration < 2 ** 48 &&\r\n            token < 2 ** 160,\r\n            \"Start, Duration or Token Address provided have invalid values\"\r\n        );\r\n\r\n        result = start;\r\n        result |= duration << (48);\r\n        result |= token << (48 + 48);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodeMeta(uint256 meta) private pure returns(uint256 start, uint256 duration, address token) {\r\n        start = uint48(meta);\r\n        duration = uint48(meta >> (48));\r\n        token = address(meta >> (48 + 48));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint48\"},{\"name\":\"start\",\"type\":\"uint48\"}],\"name\":\"createAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"getAgreement\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"cancelAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"withdrawableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountCanceled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"canceledAt\",\"type\":\"uint256\"}],\"name\":\"AgreementCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasedAt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"Trickle","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db816e2826c89a332aef22b98454e23552a23a2c4b1fa3b5859ea406d52460aa"}]}