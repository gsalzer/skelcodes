{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath::mul: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath::div: Invalid divisor zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath::sub: Integer underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath::add: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath::mod: Invalid divisor zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract IHumanity {\r\n    function mint(address account, uint256 value) public;\r\n    function totalSupply() public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title HumanityRegistry\r\n * @dev A list of Ethereum addresses that belong to unique humans as determined by Humanity governance.\r\n */\r\ncontract HumanityRegistry {\r\n\r\n    mapping (address => bool) public humans;\r\n\r\n    IHumanity public humanity;\r\n    address public governance;\r\n\r\n    constructor(IHumanity _humanity, address _governance) public {\r\n        humanity = _humanity;\r\n        governance = _governance;\r\n    }\r\n\r\n    function add(address who) public {\r\n        require(msg.sender == governance, \"HumanityRegistry::add: Only governance can add an identity\");\r\n        require(humans[who] == false, \"HumanityRegistry::add: Address is already on the registry\");\r\n\r\n        _reward(who);\r\n        humans[who] = true;\r\n    }\r\n\r\n    function remove(address who) public {\r\n        require(\r\n            msg.sender == governance || msg.sender == who,\r\n            \"HumanityRegistry::remove: Only governance or the identity owner can remove an identity\"\r\n        );\r\n        delete humans[who];\r\n    }\r\n\r\n    function isHuman(address who) public view returns (bool) {\r\n        return humans[who];\r\n    }\r\n\r\n    function _reward(address who) internal {\r\n        uint totalSupply = humanity.totalSupply();\r\n\r\n        if (totalSupply < 28000000e18) {\r\n            humanity.mint(who, 30000e18); // 1 - 100\r\n        } else if (totalSupply < 46000000e18) {\r\n            humanity.mint(who, 20000e18); // 101 - 1000\r\n        } else if (totalSupply < 100000000e18) {\r\n            humanity.mint(who, 6000e18); // 1001 - 10000\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title UniversalBasicIncome\r\n * @dev Dai that can be claimed by humans on the Human Registry.\r\n */\r\ncontract UniversalBasicIncome {\r\n    using SafeMath for uint;\r\n\r\n    HumanityRegistry public registry;\r\n    IERC20 public dai;\r\n\r\n    uint public constant MONTHLY_INCOME = 1e18; // 1 Dai\r\n    uint public constant INCOME_PER_SECOND = MONTHLY_INCOME / 30 days;\r\n\r\n    mapping (address => uint) public claimTimes;\r\n\r\n    constructor(HumanityRegistry _registry, IERC20 _dai) public {\r\n        registry = _registry;\r\n        dai = _dai;\r\n    }\r\n\r\n    function claim() public {\r\n        require(registry.isHuman(msg.sender), \"UniversalBasicIncome::claim: You must be on the Humanity registry to claim income\");\r\n\r\n        uint income;\r\n        uint time = block.timestamp;\r\n\r\n        // If claiming for the first time, send 1 month of UBI\r\n        if (claimTimes[msg.sender] == 0) {\r\n            income = MONTHLY_INCOME;\r\n        } else {\r\n            income = time.sub(claimTimes[msg.sender]).mul(INCOME_PER_SECOND);\r\n        }\r\n\r\n        uint balance = dai.balanceOf(address(this));\r\n        // If not enough Dai reserves, send the remaining balance\r\n        uint actualIncome = balance < income ? balance : income;\r\n\r\n        dai.transfer(msg.sender, actualIncome);\r\n        claimTimes[msg.sender] = time;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INCOME_PER_SECOND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTHLY_INCOME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_dai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UniversalBasicIncome","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004ee46dc4962c2c2f6bcd4c098a0e2b28f66a5e9000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://464e4e74d5100a4d20a07a128bb02e33fe44b5750eb24bfa0ad4dfe5bb7395af"}]}