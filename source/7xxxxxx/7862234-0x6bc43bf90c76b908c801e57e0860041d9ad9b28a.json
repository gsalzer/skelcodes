{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title SDU Exchange contract\r\n * @author https://grox.solutions\r\n */\r\ncontract SDUExchange is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public SDUM;\r\n    IERC20 public SDU;\r\n\r\n    mapping (address => User) _users;\r\n\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 checkpoint;\r\n        uint256 reserved;\r\n    }\r\n\r\n    event Exchanged(address user, uint256 amount);\r\n    event Withdrawn(address user, uint256 amount);\r\n\r\n    constructor(address SDUMAddr, address SDUAddr, address initialOwner) public Ownable(initialOwner) {\r\n        require(SDUMAddr != address(0) && SDUAddr != address(0));\r\n\r\n        SDUM = IERC20(SDUMAddr);\r\n        SDU = IERC20(SDUAddr);\r\n    }\r\n\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external {\r\n        require(token == address(SDUM));\r\n        exchange(from, amount);\r\n    }\r\n\r\n    function exchange(address from, uint256 amount) public {\r\n        SDUM.burnFrom(from, amount);\r\n\r\n        SDU.transfer(from, amount);\r\n\r\n        if (_users[from].deposit != 0) {\r\n            _users[from].reserved = getDividends(msg.sender);\r\n        }\r\n\r\n        _users[from].checkpoint = block.timestamp;\r\n        _users[from].deposit = _users[from].deposit.add(amount);\r\n\r\n        emit Exchanged(from, amount);\r\n    }\r\n\r\n    function() external payable {\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 payout = getDividends(msg.sender);\r\n\r\n        if (_users[msg.sender].reserved != 0) {\r\n            payout = payout.add(_users[msg.sender].reserved);\r\n            _users[msg.sender].reserved = 0;\r\n        }\r\n\r\n        _users[msg.sender].checkpoint = block.timestamp;\r\n        SDU.transfer(msg.sender, payout);\r\n\r\n        emit Withdrawn(msg.sender, payout);\r\n    }\r\n\r\n    function getDeposit(address addr) public view returns(uint256) {\r\n        return _users[addr].deposit;\r\n    }\r\n\r\n    function getDividends(address addr) public view returns(uint256) {\r\n        return (_users[addr].deposit.div(10)).mul(block.timestamp.sub(_users[addr].checkpoint)).div(30 days);\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SDUM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SDU\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"SDUMAddr\",\"type\":\"address\"},{\"name\":\"SDUAddr\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SDUExchange","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004c43d60e14085c4ac30f1e6ee826d214a743f3a30000000000000000000000003c4fffbd1cad526ff15bbea88d9ebc234e0dce13000000000000000000000000f687011727b63cd1d196a23a643efb3c6cddf0ad","Library":"","SwarmSource":"bzzr://2f162ed475d7aae6b9d1ce78b05c0251ccf3f8e5e5fb8bd11d6cbfbaefd6ee2b"}]}