{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) public returns (bool);\r\n}\r\n\r\n\r\ncontract EventfulMarket {\r\n    event LogItemUpdate(uint id);\r\n    event LogTrade(uint pay_amt, address indexed pay_gem, uint buy_amt, address indexed buy_gem);\r\n\r\n    event LogMake(\r\n        bytes32  indexed  id,\r\n        bytes32  indexed  pair,\r\n        address  indexed  maker,\r\n        ERC20             pay_gem,\r\n        ERC20             buy_gem,\r\n        uint128           pay_amt,\r\n        uint128           buy_amt,\r\n        uint64            timestamp\r\n    );\r\n\r\n    event LogBump(\r\n        bytes32  indexed  id,\r\n        bytes32  indexed  pair,\r\n        address  indexed  maker,\r\n        ERC20             pay_gem,\r\n        ERC20             buy_gem,\r\n        uint128           pay_amt,\r\n        uint128           buy_amt,\r\n        uint64            timestamp\r\n    );\r\n\r\n    event LogTake(\r\n        bytes32           id,\r\n        bytes32  indexed  pair,\r\n        address  indexed  maker,\r\n        ERC20             pay_gem,\r\n        ERC20             buy_gem,\r\n        address  indexed  taker,\r\n        uint128           take_amt,\r\n        uint128           give_amt,\r\n        uint64            timestamp\r\n    );\r\n\r\n    event LogKill(\r\n        bytes32  indexed  id,\r\n        bytes32  indexed  pair,\r\n        address  indexed  maker,\r\n        ERC20             pay_gem,\r\n        ERC20             buy_gem,\r\n        uint128           pay_amt,\r\n        uint128           buy_amt,\r\n        uint64            timestamp\r\n    );\r\n}\r\n\r\ncontract SimpleMarket is EventfulMarket, DSMath {\r\n    uint public last_offer_id;\r\n    mapping (uint => OfferInfo) public offers;\r\n    bool locked;\r\n\r\n    struct OfferInfo {\r\n        uint     pay_amt;\r\n        ERC20    pay_gem;\r\n        uint     buy_amt;\r\n        ERC20    buy_gem;\r\n        address  owner;\r\n        uint64   timestamp;\r\n    }\r\n\r\n    modifier can_buy(uint id) {\r\n        require(isActive(id));\r\n        _;\r\n    }\r\n\r\n    modifier can_cancel(uint id) {\r\n        require(isActive(id));\r\n        require(getOwner(id) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier can_offer {\r\n        _;\r\n    }\r\n\r\n    modifier synchronized {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function isActive(uint id) public constant returns (bool active) {\r\n        return offers[id].timestamp > 0;\r\n    }\r\n\r\n    function getOwner(uint id) public constant returns (address owner) {\r\n        return offers[id].owner;\r\n    }\r\n\r\n    function getOffer(uint id) public constant returns (uint, ERC20, uint, ERC20) {\r\n        var offer = offers[id];\r\n        return (offer.pay_amt, offer.pay_gem, offer.buy_amt, offer.buy_gem);\r\n    }\r\n\r\n    // ---- Public entrypoints ---- //\r\n\r\n    function bump(bytes32 id_)\r\n        public\r\n        can_buy(uint256(id_))\r\n    {\r\n        var id = uint256(id_);\r\n        LogBump(\r\n            id_,\r\n            keccak256(offers[id].pay_gem, offers[id].buy_gem),\r\n            offers[id].owner,\r\n            offers[id].pay_gem,\r\n            offers[id].buy_gem,\r\n            uint128(offers[id].pay_amt),\r\n            uint128(offers[id].buy_amt),\r\n            offers[id].timestamp\r\n        );\r\n    }\r\n\r\n    // Accept given `quantity` of an offer. Transfers funds from caller to\r\n    // offer maker, and from market to caller.\r\n    function buy(uint id, uint quantity)\r\n        public\r\n        can_buy(id)\r\n        synchronized\r\n        returns (bool)\r\n    {\r\n        OfferInfo memory offer = offers[id];\r\n        uint spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\r\n\r\n        require(uint128(spend) == spend);\r\n        require(uint128(quantity) == quantity);\r\n\r\n        // For backwards semantic compatibility.\r\n        if (quantity == 0 || spend == 0 ||\r\n            quantity > offer.pay_amt || spend > offer.buy_amt)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\r\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\r\n        require( offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) );\r\n        require( offer.pay_gem.transfer(msg.sender, quantity) );\r\n\r\n        LogItemUpdate(id);\r\n        LogTake(\r\n            bytes32(id),\r\n            keccak256(offer.pay_gem, offer.buy_gem),\r\n            offer.owner,\r\n            offer.pay_gem,\r\n            offer.buy_gem,\r\n            msg.sender,\r\n            uint128(quantity),\r\n            uint128(spend),\r\n            uint64(now)\r\n        );\r\n        LogTrade(quantity, offer.pay_gem, spend, offer.buy_gem);\r\n\r\n        if (offers[id].pay_amt == 0) {\r\n            delete offers[id];\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Cancel an offer. Refunds offer maker.\r\n    function cancel(uint id)\r\n        public\r\n        can_cancel(id)\r\n        synchronized\r\n        returns (bool success)\r\n    {\r\n        // read-only offer. Modify an offer by directly accessing offers[id]\r\n        OfferInfo memory offer = offers[id];\r\n        delete offers[id];\r\n\r\n        require( offer.pay_gem.transfer(offer.owner, offer.pay_amt) );\r\n\r\n        LogItemUpdate(id);\r\n        LogKill(\r\n            bytes32(id),\r\n            keccak256(offer.pay_gem, offer.buy_gem),\r\n            offer.owner,\r\n            offer.pay_gem,\r\n            offer.buy_gem,\r\n            uint128(offer.pay_amt),\r\n            uint128(offer.buy_amt),\r\n            uint64(now)\r\n        );\r\n\r\n        success = true;\r\n    }\r\n\r\n    function kill(bytes32 id)\r\n        public\r\n    {\r\n        require(cancel(uint256(id)));\r\n    }\r\n\r\n\r\n    function make(\r\n        ERC20    pay_gem,\r\n        ERC20    buy_gem,\r\n        uint128  pay_amt,\r\n        uint128  buy_amt\r\n    ) public returns (bytes32 id) {\r\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\r\n    }\r\n\r\n    // Make a new offer. Takes funds from the caller into market escrow.\r\n    function offer(uint pay_amt, ERC20 pay_gem, uint buy_amt, ERC20 buy_gem)\r\n        public\r\n        can_offer\r\n        synchronized\r\n        returns (uint id)\r\n    {\r\n        require(uint128(pay_amt) == pay_amt);\r\n        require(uint128(buy_amt) == buy_amt);\r\n        require(pay_amt > 0);\r\n        require(pay_gem != ERC20(0x0));\r\n        require(buy_amt > 0);\r\n        require(buy_gem != ERC20(0x0));\r\n        require(pay_gem != buy_gem);\r\n\r\n        OfferInfo memory info;\r\n        info.pay_amt = pay_amt;\r\n        info.pay_gem = pay_gem;\r\n        info.buy_amt = buy_amt;\r\n        info.buy_gem = buy_gem;\r\n        info.owner = msg.sender;\r\n        info.timestamp = uint64(now);\r\n        id = _next_id();\r\n        offers[id] = info;\r\n\r\n        require( pay_gem.transferFrom(msg.sender, this, pay_amt) );\r\n\r\n        LogItemUpdate(id);\r\n        LogMake(\r\n            bytes32(id),\r\n            keccak256(pay_gem, buy_gem),\r\n            msg.sender,\r\n            pay_gem,\r\n            buy_gem,\r\n            uint128(pay_amt),\r\n            uint128(buy_amt),\r\n            uint64(now)\r\n        );\r\n    }\r\n\r\n    function take(bytes32 id, uint128 maxTakeAmount) public {\r\n        require(buy(uint256(id), maxTakeAmount));\r\n    }\r\n\r\n\r\n    function _next_id() internal returns (uint) {\r\n        last_offer_id++;\r\n        return last_offer_id;\r\n    }\r\n}\r\n\r\n// Simple Market with a market lifetime. When the close_time has been reached,\r\n// offers can only be cancelled (offer and buy will throw).\r\ncontract ExpiringMarket is DSAuth, SimpleMarket {\r\n    uint64 public close_time;\r\n    bool public stopped;\r\n\r\n    // after close_time has been reached, no new offers are allowed\r\n    modifier can_offer {\r\n        require(!isClosed());\r\n        _;\r\n    }\r\n\r\n    // after close, no new buys are allowed\r\n    modifier can_buy(uint id) {\r\n        require(isActive(id));\r\n        require(!isClosed());\r\n        _;\r\n    }\r\n\r\n    // after close, anyone can cancel an offer\r\n    modifier can_cancel(uint id) {\r\n        require(isActive(id));\r\n        require(isClosed() || (msg.sender == getOwner(id)));\r\n        _;\r\n    }\r\n\r\n    function ExpiringMarket(uint64 _close_time)\r\n        public\r\n    {\r\n        close_time = _close_time;\r\n    }\r\n\r\n    function isClosed() public constant returns (bool closed) {\r\n        return stopped || getTime() > close_time;\r\n    }\r\n\r\n    function getTime() public constant returns (uint64) {\r\n        return uint64(now);\r\n    }\r\n\r\n    function stop() public auth {\r\n        stopped = true;\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract MatchingEvents {\r\n    event LogBuyEnabled(bool isEnabled);\r\n    event LogMinSell(address pay_gem, uint min_amount);\r\n    event LogMatchingEnabled(bool isEnabled);\r\n    event LogUnsortedOffer(uint id);\r\n    event LogSortedOffer(uint id);\r\n    event LogAddTokenPairWhitelist(ERC20 baseToken, ERC20 quoteToken);\r\n    event LogRemTokenPairWhitelist(ERC20 baseToken, ERC20 quoteToken);\r\n    event LogInsert(address keeper, uint id);\r\n    event LogDelete(address keeper, uint id);\r\n}\r\n\r\ncontract MatchingMarket is MatchingEvents, ExpiringMarket, DSNote {\r\n    bool public buyEnabled = true;      //buy enabled\r\n    bool public matchingEnabled = true; //true: enable matching,\r\n                                         //false: revert to expiring market\r\n    struct sortInfo {\r\n        uint next;  //points to id of next higher offer\r\n        uint prev;  //points to id of previous lower offer\r\n        uint delb;  //the blocknumber where this entry was marked for delete\r\n    }\r\n    mapping(uint => sortInfo) public _rank;                     //doubly linked lists of sorted offer ids\r\n    mapping(address => mapping(address => uint)) public _best;  //id of the highest offer for a token pair\r\n    mapping(address => mapping(address => uint)) public _span;  //number of offers stored for token pair in sorted orderbook\r\n    mapping(address => uint) public _dust;                      //minimum sell amount for a token to avoid dust offers\r\n    mapping(uint => uint) public _near;         //next unsorted offer id\r\n    mapping(bytes32 => bool) public _menu;      //whitelist tracking which token pairs can be traded\r\n    mapping(bytes32 => uint) public _minrate;      //whitelist tracking which token pairs can be traded\r\n    uint _head;                                 //first unsorted offer id\r\n\r\n    //check if token pair is enabled\r\n    modifier isWhitelist(ERC20 buy_gem, ERC20 pay_gem, uint rate) {\r\n        require(_menu[keccak256(buy_gem, pay_gem)] || _menu[keccak256(pay_gem, buy_gem)]);\r\n        require(rate >= _minrate[keccak256(buy_gem, pay_gem)] || _menu[keccak256(pay_gem, buy_gem)]);\r\n        _;\r\n    }\r\n\r\n    function MatchingMarket(uint64 close_time) ExpiringMarket(close_time) public {\r\n\r\n    }\r\n\r\n    // ---- Public entrypoints ---- //\r\n\r\n    function make(\r\n        ERC20    pay_gem,\r\n        ERC20    buy_gem,\r\n        uint128  pay_amt,\r\n        uint128  buy_amt\r\n    )\r\n        public\r\n        returns (bytes32)\r\n    {\r\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\r\n    }\r\n\r\n    function take(bytes32 id, uint128 maxTakeAmount) public {\r\n        require(buy(uint256(id), maxTakeAmount));\r\n    }\r\n\r\n    function kill(bytes32 id) public {\r\n        require(cancel(uint256(id)));\r\n    }\r\n\r\n    // Make a new offer. Takes funds from the caller into market escrow.\r\n    //\r\n    // If matching is enabled:\r\n    //     * creates new offer without putting it in\r\n    //       the sorted list.\r\n    //     * available to authorized contracts only!\r\n    //     * keepers should call insert(id,pos)\r\n    //       to put offer in the sorted list.\r\n    //\r\n    // If matching is disabled:\r\n    //     * calls expiring market's offer().\r\n    //     * available to everyone without authorization.\r\n    //     * no sorting is done.\r\n    //\r\n    function offer(\r\n        uint pay_amt,    //maker (ask) sell how much\r\n        ERC20 pay_gem,   //maker (ask) sell which token\r\n        uint buy_amt,    //taker (ask) buy how much\r\n        ERC20 buy_gem    //taker (ask) buy which token\r\n    )\r\n        public\r\n        isWhitelist(pay_gem, buy_gem, buy_amt / pay_amt)\r\n        /* NOT synchronized!!! */\r\n        returns (uint)\r\n    {\r\n        var fn = matchingEnabled ? _offeru : super.offer;\r\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\r\n    }\r\n\r\n    // Make a new offer. Takes funds from the caller into market escrow.\r\n    function offer(\r\n        uint pay_amt,    //maker (ask) sell how much\r\n        ERC20 pay_gem,   //maker (ask) sell which token\r\n        uint buy_amt,    //maker (ask) buy how much\r\n        ERC20 buy_gem,   //maker (ask) buy which token\r\n        uint pos         //position to insert offer, 0 should be used if unknown\r\n    )\r\n        public\r\n        isWhitelist(pay_gem, buy_gem, buy_amt / pay_amt)\r\n        /*NOT synchronized!!! */\r\n        can_offer\r\n        returns (uint)\r\n    {\r\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, false);\r\n    }\r\n\r\n    function offer(\r\n        uint pay_amt,    //maker (ask) sell how much\r\n        ERC20 pay_gem,   //maker (ask) sell which token\r\n        uint buy_amt,    //maker (ask) buy how much\r\n        ERC20 buy_gem,   //maker (ask) buy which token\r\n        uint pos,        //position to insert offer, 0 should be used if unknown\r\n        bool rounding    //match \"close enough\" orders?\r\n    )\r\n        public\r\n        isWhitelist(pay_gem, buy_gem, buy_amt / pay_amt)\r\n        /*NOT synchronized!!! */\r\n        can_offer\r\n        returns (uint)\r\n    {\r\n        require(_dust[pay_gem] <= pay_amt);\r\n\r\n        if (matchingEnabled) {\r\n            return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, rounding);\r\n        }\r\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\r\n    }\r\n\r\n    //Transfers funds from caller to offer maker, and from market to caller.\r\n    function buy(uint id, uint amount)\r\n        public\r\n        /*NOT synchronized!!! */\r\n        can_buy(id)\r\n        returns (bool)\r\n    {\r\n        var fn = matchingEnabled ? _buys : super.buy;\r\n        return fn(id, amount);\r\n    }\r\n\r\n    // Cancel an offer. Refunds offer maker.\r\n    function cancel(uint id)\r\n        public\r\n        /*NOT synchronized!!! */\r\n        can_cancel(id)\r\n        returns (bool success)\r\n    {\r\n        if (matchingEnabled) {\r\n            if (isOfferSorted(id)) {\r\n                require(_unsort(id));\r\n            } else {\r\n                require(_hide(id));\r\n            }\r\n        }\r\n        return super.cancel(id);    //delete the offer.\r\n    }\r\n\r\n    //insert offer into the sorted list\r\n    //keepers need to use this function\r\n    function insert(\r\n        uint id,   //maker (ask) id\r\n        uint pos   //position to insert into\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(!isOfferSorted(id));    //make sure offers[id] is not yet sorted\r\n        require(isActive(id));          //make sure offers[id] is active\r\n\r\n        _hide(id);                      //remove offer from unsorted offers list\r\n        _sort(id, pos);                 //put offer into the sorted offers list\r\n        LogInsert(msg.sender, id);\r\n        return true;\r\n    }\r\n\r\n    //deletes _rank [id]\r\n    //  Function should be called by keepers.\r\n    function del_rank(uint id)\r\n        public\r\n    returns (bool)\r\n    {\r\n        require(!isActive(id) && _rank[id].delb != 0 && _rank[id].delb < block.number - 10);\r\n        delete _rank[id];\r\n        LogDelete(msg.sender, id);\r\n        return true;\r\n    }\r\n\r\n    //returns true if token is succesfully added to whitelist\r\n    //  Function is used to add a token pair to the whitelist\r\n    //  All incoming offers are checked against the whitelist.\r\n    function addTokenPairWhitelist(\r\n        ERC20 baseToken,\r\n        ERC20 quoteToken,\r\n        uint minRate\r\n    ) public auth note returns (bool) {\r\n        require(!isTokenPairWhitelisted(baseToken, quoteToken));\r\n        require(address(baseToken) != 0x0 && address(quoteToken) != 0x0);\r\n        require(minRate >= 0);\r\n\r\n        _menu[keccak256(baseToken, quoteToken)] = true;\r\n        _minrate[keccak256(baseToken, quoteToken)] = minRate;\r\n\r\n        emit LogAddTokenPairWhitelist(baseToken, quoteToken);\r\n        return true;\r\n    }\r\n\r\n    //returns true if token is successfully removed from whitelist\r\n    //  Function is used to remove a token pair from the whitelist.\r\n    //  All incoming offers are checked against the whitelist.\r\n    function remTokenPairWhitelist(ERC20 baseToken, ERC20 quoteToken)\r\n        public auth note returns (bool) {\r\n        require(isTokenPairWhitelisted(baseToken, quoteToken));\r\n\r\n        delete _menu[keccak256(baseToken, quoteToken)];\r\n        delete _menu[keccak256(quoteToken, baseToken)];\r\n        emit LogRemTokenPairWhitelist(baseToken, quoteToken);\r\n        return true;\r\n    }\r\n\r\n\r\n    function isTokenPairWhitelisted(ERC20 baseToken, ERC20 quoteToken) public constant returns (bool) {\r\n        return (_menu[keccak256(baseToken, quoteToken)] || _menu[keccak256(quoteToken, baseToken)]);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev set the minimum sell amount for a token\r\n     * Function is used to avoid \"dust offers\" that have very small\r\n     * amount of tokens to sell, and it would cost more gas to accept\r\n     * the offer, than the value of tokens received.\r\n     *\r\n     * @param pay_gem token to assign minimum sell amount to\r\n     * @param dust maker (ask) minimum sell amount\r\n     */\r\n    function setMinSell(ERC20 pay_gem, uint dust) public auth note returns (bool) {\r\n        _dust[pay_gem] = dust;\r\n        LogMinSell(pay_gem, dust);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev returns the minimum sell amount for an offer\r\n     * @param pay_gem token for which minimum sell amount is queried\r\n     */\r\n    function getMinSell(ERC20 pay_gem) public constant returns (uint) {\r\n        return _dust[pay_gem];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev set buy functionality enabled/disabled\r\n     */\r\n    function setBuyEnabled(bool buyEnabled_) public auth returns (bool) {\r\n        buyEnabled = buyEnabled_;\r\n        LogBuyEnabled(buyEnabled);\r\n        return true;\r\n    }\r\n\r\n\r\n    //set matching enabled/disabled\r\n    //    If matchingEnabled true(default), then inserted offers are matched.\r\n    //    Except the ones inserted by contracts, because those end up\r\n    //    in the unsorted list of offers, that must be later sorted by\r\n    //    keepers using insert().\r\n    //    If matchingEnabled is false then MatchingMarket is reverted to ExpiringMarket,\r\n    //    and matching is not done, and sorted lists are disabled.\r\n    function setMatchingEnabled(bool matchingEnabled_) public auth returns (bool) {\r\n        matchingEnabled = matchingEnabled_;\r\n        LogMatchingEnabled(matchingEnabled);\r\n        return true;\r\n    }\r\n\r\n    //return the best offer for a token pair\r\n    //      the best offer is the lowest one if it's an ask,\r\n    //      and highest one if it's a bid offer\r\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\r\n        return _best[sell_gem][buy_gem];\r\n    }\r\n\r\n    //return the next worse offer in the sorted list\r\n    //      the worse offer is the higher one if its an ask,\r\n    //      a lower one if its a bid offer,\r\n    //      and in both cases the newer one if they're equal.\r\n    function getWorseOffer(uint id) public constant returns(uint) {\r\n        return _rank[id].prev;\r\n    }\r\n\r\n    //return the next better offer in the sorted list\r\n    //      the better offer is in the lower priced one if its an ask,\r\n    //      the next higher priced one if its a bid offer\r\n    //      and in both cases the older one if they're equal.\r\n    function getBetterOffer(uint id) public constant returns(uint) {\r\n\r\n        return _rank[id].next;\r\n    }\r\n\r\n    //return the amount of better offers for a token pair\r\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\r\n        return _span[sell_gem][buy_gem];\r\n    }\r\n\r\n    //get the first unsorted offer that was inserted by a contract\r\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\r\n    //      Their offers get put in the unsorted list of offers.\r\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\r\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\r\n    function getFirstUnsortedOffer() public view returns(uint) {\r\n        return _head;\r\n    }\r\n\r\n    //get the next unsorted offer\r\n    //      Can be used to cycle through all the unsorted offers.\r\n    function getNextUnsortedOffer(uint id) public view returns(uint) {\r\n        return _near[id];\r\n    }\r\n\r\n    function isOfferSorted(uint id) public view returns(bool) {\r\n        return _rank[id].next != 0 || _rank[id].prev != 0 ||\r\n            _best[offers[id].pay_gem][offers[id].buy_gem] == id;\r\n    }\r\n\r\n    function sellAllAmount(ERC20 pay_gem, uint pay_amt, ERC20 buy_gem, uint min_fill_amount)\r\n        public returns (uint fill_amt)\r\n    {\r\n        uint offerId;\r\n        while (pay_amt > 0) {                           //while there is amount to sell\r\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\r\n            require(offerId != 0);                      //Fails if there are not more offers\r\n\r\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\r\n            if (pay_amt * 1 ether < wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) {\r\n                break;                                  //We consider that all amount is sold\r\n            }\r\n\r\n            // If amount to sell is higher or equal than current offer amount to buy\r\n            if (pay_amt >= offers[offerId].buy_amt) {\r\n                // Add amount bought to acumulator\r\n                fill_amt = add(fill_amt, offers[offerId].pay_amt);\r\n\r\n                // Decrease amount to sell\r\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt);\r\n\r\n                // We take the whole offer\r\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));\r\n            } else { // if lower\r\n                var baux = rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9;\r\n                fill_amt = add(fill_amt, baux);         //Add amount bought to acumulator\r\n                take(bytes32(offerId), uint128(baux));  //We take the portion of the offer that we need\r\n                pay_amt = 0;                            //All amount is sold\r\n            }\r\n        }\r\n        require(fill_amt >= min_fill_amount);\r\n    }\r\n\r\n\r\n    function buyAllAmount(ERC20 buy_gem, uint buy_amt, ERC20 pay_gem, uint max_fill_amount)\r\n        public returns (uint fill_amt) {\r\n        uint offerId;\r\n        while (buy_amt > 0) {                           //Meanwhile there is amount to buy\r\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\r\n            require(offerId != 0);\r\n\r\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\r\n            if (buy_amt * 1 ether < wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) {\r\n                break;                                  //We consider that all amount is sold\r\n            }\r\n            if (buy_amt >= offers[offerId].pay_amt) {                       //If amount to buy is higher or equal than current offer amount to sell\r\n                fill_amt = add(fill_amt, offers[offerId].buy_amt);          //Add amount sold to acumulator\r\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt);            //Decrease amount to buy\r\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));   //We take the whole offer\r\n            } else {                                                        //if lower\r\n                fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add amount sold to acumulator\r\n                take(bytes32(offerId), uint128(buy_amt));                   //We take the portion of the offer that we need\r\n                buy_amt = 0;                                                //All amount is bought\r\n            }\r\n        }\r\n        require(fill_amt <= max_fill_amount);\r\n    }\r\n\r\n\r\n    function getBuyAmount(ERC20 buy_gem, ERC20 pay_gem, uint pay_amt) public constant returns (uint fill_amt) {\r\n        var offerId = getBestOffer(buy_gem, pay_gem);           //Get best offer for the token pair\r\n        while (pay_amt > offers[offerId].buy_amt) {\r\n            fill_amt = add(fill_amt, offers[offerId].pay_amt);  //Add amount to buy accumulator\r\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt);    //Decrease amount to pay\r\n            if (pay_amt > 0) {                                  //If we still need more offers\r\n                offerId = getWorseOffer(offerId);               //We look for the next best offer\r\n                require(offerId != 0);                          //Fails if there are not enough offers to complete\r\n            }\r\n        }\r\n        fill_amt = add(fill_amt, rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9); //Add proportional amount of last offer to buy accumulator\r\n    }\r\n\r\n\r\n    function getPayAmount(ERC20 pay_gem, ERC20 buy_gem, uint buy_amt) public constant returns (uint fill_amt) {\r\n        var offerId = getBestOffer(buy_gem, pay_gem);           // Get best offer for the token pair\r\n        while (buy_amt > offers[offerId].pay_amt) {\r\n            fill_amt = add(fill_amt, offers[offerId].buy_amt);  // Add amount to pay accumulator\r\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt);    // Decrease amount to buy\r\n            if (buy_amt > 0) {                                  // If we still need more offers\r\n                offerId = getWorseOffer(offerId);               // We look for the next best offer\r\n                require(offerId != 0);                          // Fails if there are not enough offers to complete\r\n            }\r\n        }\r\n        fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add proportional amount of last offer to pay accumulator\r\n    }\r\n\r\n\r\n    // ---- Internal Functions ---- //\r\n    function _buys(uint id, uint amount) internal returns (bool)\r\n    {\r\n        require(buyEnabled);\r\n\r\n        if (amount == offers[id].pay_amt && isOfferSorted(id)) {\r\n            //offers[id] must be removed from sorted list because all of it is bought\r\n            _unsort(id);\r\n        }\r\n        require(super.buy(id, amount));\r\n        return true;\r\n    }\r\n\r\n    // find the id of the next higher offer after offers[id]\r\n    function _find(uint id) internal view returns (uint)\r\n    {\r\n        require( id > 0 );\r\n\r\n        address buy_gem = address(offers[id].buy_gem);\r\n        address pay_gem = address(offers[id].pay_gem);\r\n        uint top = _best[pay_gem][buy_gem];\r\n        uint old_top = 0;\r\n\r\n        // Find the larger-than-id order whose successor is less-than-id.\r\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\r\n            old_top = top;\r\n            top = _rank[top].prev;\r\n        }\r\n        return old_top;\r\n    }\r\n\r\n    // find the id of the next higher offer after offers[id]\r\n    function _findpos(uint id, uint pos) internal view returns (uint) {\r\n        require(id > 0);\r\n\r\n        // Look for an active order.\r\n        while (pos != 0 && !isActive(pos)) {\r\n            pos = _rank[pos].prev;\r\n        }\r\n\r\n        if (pos == 0) {\r\n            //if we got to the end of list without a single active offer\r\n            return _find(id);\r\n\r\n        } else {\r\n            // if we did find a nearby active offer\r\n            // Walk the order book down from there...\r\n            if(_isPricedLtOrEq(id, pos)) {\r\n                uint old_pos;\r\n\r\n                // Guaranteed to run at least once because of\r\n                // the prior if statements.\r\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\r\n                    old_pos = pos;\r\n                    pos = _rank[pos].prev;\r\n                }\r\n                return old_pos;\r\n\r\n            // ...or walk it up.\r\n            } else {\r\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\r\n                    pos = _rank[pos].next;\r\n                }\r\n                return pos;\r\n            }\r\n        }\r\n    }\r\n\r\n    //return true if offers[low] priced less than or equal to offers[high]\r\n    function _isPricedLtOrEq(\r\n        uint low,   //lower priced offer's id\r\n        uint high   //higher priced offer's id\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return mul(offers[low].buy_amt, offers[high].pay_amt)\r\n            >= mul(offers[high].buy_amt, offers[low].pay_amt);\r\n    }\r\n\r\n    //these variables are global only because of solidity local variable limit\r\n\r\n    //match offers with taker offer, and execute token transactions\r\n    function _matcho(\r\n        uint t_pay_amt,    //taker sell how much\r\n        ERC20 t_pay_gem,   //taker sell which token\r\n        uint t_buy_amt,    //taker buy how much\r\n        ERC20 t_buy_gem,   //taker buy which token\r\n        uint pos,          //position id\r\n        bool rounding      //match \"close enough\" orders?\r\n    )\r\n        internal\r\n        returns (uint id)\r\n    {\r\n        uint best_maker_id;    //highest maker id\r\n        uint t_buy_amt_old;    //taker buy how much saved\r\n        uint m_buy_amt;        //maker offer wants to buy this much token\r\n        uint m_pay_amt;        //maker offer wants to sell this much token\r\n\r\n        // there is at least one offer stored for token pair\r\n        while (_best[t_buy_gem][t_pay_gem] > 0) {\r\n            best_maker_id = _best[t_buy_gem][t_pay_gem];\r\n            m_buy_amt = offers[best_maker_id].buy_amt;\r\n            m_pay_amt = offers[best_maker_id].pay_amt;\r\n\r\n            // Ugly hack to work around rounding errors. Based on the idea that\r\n            // the furthest the amounts can stray from their \"true\" values is 1.\r\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\r\n            // their \"correct\" values and m_buy_amt and t_buy_amt at -1.\r\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\r\n            // c * d > a * b + a + b + c + d, we write...\r\n            if (mul(m_buy_amt, t_buy_amt) > mul(t_pay_amt, m_pay_amt) +\r\n                (rounding ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt : 0))\r\n            {\r\n                break;\r\n            }\r\n            // ^ The `rounding` parameter is a compromise borne of a couple days\r\n            // of discussion.\r\n\r\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\r\n            t_buy_amt_old = t_buy_amt;\r\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\r\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\r\n\r\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (t_buy_amt > 0 && t_pay_amt > 0) {\r\n            //new offer should be created\r\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\r\n            //insert offer into the sorted list\r\n            _sort(id, pos);\r\n        }\r\n    }\r\n\r\n    // Make a new offer without putting it in the sorted list.\r\n    // Takes funds from the caller into market escrow.\r\n    // ****Available to authorized contracts only!**********\r\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\r\n    function _offeru(\r\n        uint pay_amt,      //maker (ask) sell how much\r\n        ERC20 pay_gem,     //maker (ask) sell which token\r\n        uint buy_amt,      //maker (ask) buy how much\r\n        ERC20 buy_gem      //maker (ask) buy which token\r\n    )\r\n        internal\r\n        returns (uint id)\r\n    {\r\n        require(_dust[pay_gem] <= pay_amt);\r\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\r\n        _near[id] = _head;\r\n        _head = id;\r\n        LogUnsortedOffer(id);\r\n    }\r\n\r\n\r\n    /**\r\n     * put offer into the sorted list\r\n     * @param id    maker (ask) id\r\n     * @param pos  position to insert into\r\n     */\r\n    function _sort(uint id, uint pos) internal {\r\n        require(isActive(id));\r\n\r\n        address buy_gem = address(offers[id].buy_gem);\r\n        address pay_gem = address(offers[id].pay_gem);\r\n        uint prev_id;                                      //maker (ask) id\r\n\r\n        if (pos == 0 || !isOfferSorted(pos)) {\r\n            pos = _find(id);\r\n        } else {\r\n            pos = _findpos(id, pos);\r\n\r\n            //if user has entered a `pos` that belongs to another currency pair\r\n            //we start from scratch\r\n            if(pos != 0 && (offers[pos].pay_gem != offers[id].pay_gem\r\n                      || offers[pos].buy_gem != offers[id].buy_gem))\r\n            {\r\n                pos = 0;\r\n                pos=_find(id);\r\n            }\r\n        }\r\n\r\n\r\n        //requirement below is satisfied by statements above\r\n        //require(pos == 0 || isOfferSorted(pos));\r\n\r\n        if (pos != 0) {                                    //offers[id] is not the highest offer\r\n            //requirement below is satisfied by statements above\r\n            //require(_isPricedLtOrEq(id, pos));\r\n            prev_id = _rank[pos].prev;\r\n            _rank[pos].prev = id;\r\n            _rank[id].next = pos;\r\n        } else {                                           //offers[id] is the highest offer\r\n            prev_id = _best[pay_gem][buy_gem];\r\n            _best[pay_gem][buy_gem] = id;\r\n        }\r\n\r\n        if (prev_id != 0) {                               //if lower offer does exist\r\n            //requirement below is satisfied by statements above\r\n            //require(!_isPricedLtOrEq(id, prev_id));\r\n            _rank[prev_id].next = id;\r\n            _rank[id].prev = prev_id;\r\n        }\r\n\r\n        _span[pay_gem][buy_gem]++;\r\n        LogSortedOffer(id);\r\n    }\r\n\r\n\r\n    // Remove offer from the sorted list (does not cancel offer)\r\n    function _unsort(\r\n        uint id    //id of maker (ask) offer to remove from sorted list\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        address buy_gem = address(offers[id].buy_gem);\r\n        address pay_gem = address(offers[id].pay_gem);\r\n        require(_span[pay_gem][buy_gem] > 0);\r\n\r\n        require(_rank[id].delb == 0 && isOfferSorted(id), \"assert id is in the sorted list\");\r\n\r\n        if (id != _best[pay_gem][buy_gem]) {              // offers[id] is not the highest offer\r\n            require(_rank[_rank[id].next].prev == id);\r\n            _rank[_rank[id].next].prev = _rank[id].prev;\r\n        } else {                                          //offers[id] is the highest offer\r\n            _best[pay_gem][buy_gem] = _rank[id].prev;\r\n        }\r\n\r\n        if (_rank[id].prev != 0) {                        //offers[id] is not the lowest offer\r\n            require(_rank[_rank[id].prev].next == id);\r\n            _rank[_rank[id].prev].next = _rank[id].next;\r\n        }\r\n\r\n        _span[pay_gem][buy_gem]--;\r\n        _rank[id].delb = block.number;                    //mark _rank[id] for deletion\r\n        return true;\r\n    }\r\n\r\n    //Hide offer from the unsorted order book (does not cancel offer)\r\n    function _hide(\r\n        uint id     //id of maker offer to remove from unsorted list\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint uid = _head;               //id of an offer in unsorted offers list\r\n        uint pre = uid;                 //id of previous offer in unsorted offers list\r\n\r\n        require(!isOfferSorted(id));    //make sure offer id is not in sorted offers list\r\n\r\n        if (_head == id) {              //check if offer is first offer in unsorted offers list\r\n            _head = _near[id];          //set head to new first unsorted offer\r\n            _near[id] = 0;              //delete order from unsorted order list\r\n            return true;\r\n        }\r\n        \r\n        while (uid > 0 && uid != id) {  //find offer in unsorted order list\r\n            pre = uid;\r\n            uid = _near[uid];\r\n        }\r\n        if (uid != id) {                //did not find offer id in unsorted offers list\r\n            return false;\r\n        }\r\n        _near[pre] = _near[id];         //set previous unsorted offer to point to offer after offer id\r\n        _near[id] = 0;                  //delete order from unsorted order list\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"matchingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sell_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getBestOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"min_fill_amount\",\"type\":\"uint256\"}],\"name\":\"sellAllAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"name\":\"buy_amt\",\"type\":\"uint128\"}],\"name\":\"make\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"remTokenPairWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_offer_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_minrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchingEnabled_\",\"type\":\"bool\"}],\"name\":\"setMatchingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"del_rank\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"maxTakeAmount\",\"type\":\"uint128\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"}],\"name\":\"getMinSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextUnsortedOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"close_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_span\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_best\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id_\",\"type\":\"bytes32\"}],\"name\":\"bump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sell_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getOfferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"max_fill_amount\",\"type\":\"uint256\"}],\"name\":\"buyAllAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstUnsortedOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"isTokenPairWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetterOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorseOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_menu\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_near\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rank\",\"outputs\":[{\"name\":\"next\",\"type\":\"uint256\"},{\"name\":\"prev\",\"type\":\"uint256\"},{\"name\":\"delb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOfferSorted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyEnabled_\",\"type\":\"bool\"}],\"name\":\"setBuyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pos\",\"type\":\"uint256\"},{\"name\":\"rounding\",\"type\":\"bool\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"quoteToken\",\"type\":\"address\"},{\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"addTokenPairWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"}],\"name\":\"getPayAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"close_time\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogItemUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogMake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogBump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogBuyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"LogMinSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogMatchingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogUnsortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogSortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"LogAddTokenPairWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"LogRemTokenPairWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogInsert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogDelete\",\"type\":\"event\"}]","ContractName":"MatchingMarket","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000339c1130f05","Library":"","SwarmSource":"bzzr://3236efe38bcbaa07d2e432a332ea4194a9f25be42cd3b612860179c628f8854a"}]}