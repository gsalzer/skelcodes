{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ERC20 Interface\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint _totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(owner==msg.sender);\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\n// ERC20Token\r\ncontract ERC20Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => mapping (address => uint256)) remainallowed;\r\n    mapping(address => uint256) distBalances;  \r\n    uint256 public totalToken; \r\n     uint256 public baseStartTime; //\r\n     //debug value \r\n     uint256 debug_totalallower;\r\n     uint256 debug_mondiff;\r\n     uint256 debug_now;\r\n     \r\n     \r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            distBalances[_to] = distBalances[_to].add(_value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n       \r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            //allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n  \r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalToken;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        remainallowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n//总的额度\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    // 剩余的额度\r\n\r\n  function remainallowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return remainallowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FGTToken is ERC20Token, Owned {\r\n\r\n    string  public  name = \"Food&GoodsChain\";\r\n    string  public  symbol = \"FGT\";\r\n    uint256 public  decimals = 18;\r\n    uint256 public tokenDestroyed;\r\n      //list of distributed balance of each address to calculate restricted amount\r\n\r\n    event Burn(address indexed _from, uint256 _tokenDestroyed, uint256 _timestamp);\r\n\r\n    function FGTToken(string tokenName, string tokenSymbol,uint256 initialSupply) public {\r\n    name=tokenName;\r\n    symbol=tokenSymbol;\r\n    totalToken = initialSupply * 10 ** uint256(decimals);\r\n    \r\n    balances[msg.sender] = totalToken;\r\n    }\r\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n   //计算本期释放额度\r\n   uint256 calfreeamount=freeAmount(_from,msg.sender);\r\n    if(calfreeamount<_value){\r\n        _value=calfreeamount;\r\n    }\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            //allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            remainallowed[_from][msg.sender] = remainallowed[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferAnyERC20Token(address _tokenAddress, address _recipient, uint256 _amount) public onlyOwner returns (bool success) {\r\n        return ERC20(_tokenAddress).transfer(_recipient, _amount);\r\n    }\r\n\r\n    function burn (uint256 _burntAmount) public returns (bool success) {\r\n        require(balances[msg.sender] >= _burntAmount && _burntAmount > 0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_burntAmount);\r\n        totalToken = totalToken.sub(_burntAmount);\r\n        tokenDestroyed = tokenDestroyed.add(_burntAmount);\r\n        require (tokenDestroyed <= totalToken);\r\n        Transfer(address(this), 0x0, _burntAmount);\r\n        Burn(msg.sender, _burntAmount, block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n   \r\n        \r\n         function setStartTime(uint _startTime) public onlyOwner {\r\n            require (msg.sender==owner);\r\n            baseStartTime = _startTime;\r\n        }\r\n         /* 增发增发代币 */\r\n        function  addToken(address target, uint256 mintedAmount)  public onlyOwner {\r\n        require(target==owner);//仅仅对账户创建者增发\r\n        balances[target] += mintedAmount;\r\n        totalToken += mintedAmount;\r\n        emit Transfer(0, msg.sender, mintedAmount);\r\n        emit Transfer(msg.sender, target, mintedAmount);\r\n    }\r\n    \r\n     function freeAmount(address _from,address user) public returns (uint256 amount) {\r\n        uint256 totalallower= allowed[_from][user] ;\r\n        debug_totalallower=totalallower;\r\n        uint256 releseamount=0;\r\n            //0) no restriction for founder\r\n            if (user == owner) {\r\n                return balances[user];\r\n            }\r\n        debug_now=now;\r\n            //1) no free amount before base start time;\r\n            if (now < baseStartTime) {\r\n                return 0;\r\n            }\r\n \r\n            //2) calculate number of months passed since base start time;\r\n            uint256 monthDiff =  now.sub(baseStartTime) / (30 days);\r\n         debug_mondiff=monthDiff;\r\n            //3) 大于50个月，所有剩余额度一次释放\r\n            if (monthDiff > 50) {\r\n              releseamount=remainallowed[_from][user];\r\n                return releseamount;\r\n            }\r\n \r\n            //4) 到本期为止，总共允许释放额度\r\n            uint256 unrestricted =totalallower.div( 50).add( (totalallower.div(50)).mul( monthDiff));\r\n        \r\n            //5) 总释放额度 -已经释放额度  (已经释放额度=（总额度 - 剩余额度）)\r\n            if (unrestricted >remainallowed[_from][user]) {\r\n                releseamount =remainallowed[_from][user];\r\n            } else {\r\n                //本期为止总释放额度 减去 已经释放额度（总额度 - 剩余额度）\r\n                releseamount = unrestricted.sub(totalallower.sub(remainallowed[_from][user]));\r\n            \r\n            }\r\n            if(releseamount>balanceOf(_from)){\r\n                releseamount=balanceOf(_from);\r\n            }\r\n            return releseamount;\r\n        }\r\n       \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"remainallowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burntAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDestroyed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenDestroyed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FGTToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000000010466f6f6426476f6f647320546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034647540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://be6cb2d4d48144e13d00ae94660c88756efbe2bebe0ad9f67cc5b0fa3f64ce95"}]}