{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Token/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Token/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(value <= _allowed[from][msg.sender]);\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= _balances[from]);\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != 0);\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n}\r\n\r\n// File: contracts/library/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/library/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/Token/ERC20Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint addedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint subtractedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n// File: contracts/whitelist/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an address access to this role\r\n     */\r\n    function add(Role storage _role, address _addr) internal {\r\n        _role.bearer[_addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address' access to this role\r\n     */\r\n    function remove(Role storage _role, address _addr) internal {\r\n        _role.bearer[_addr] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * // reverts\r\n     */\r\n    function check(Role storage _role, address _addr) internal view {\r\n        require(has(_role, _addr));\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage _role, address _addr) internal view returns (bool) {\r\n        return _role.bearer[_addr];\r\n    }\r\n}\r\n\r\n// File: contracts/whitelist/RBAC.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n    using Roles for Roles.Role;\r\n\r\n    mapping (string => Roles.Role) private roles;\r\n\r\n    event RoleAdded(address indexed operator, string role);\r\n    event RoleRemoved(address indexed operator, string role);\r\n\r\n    /**\r\n     * @dev reverts if addr does not have role\r\n     * @param _operator address\r\n     * @param _role the name of the role\r\n     * // reverts\r\n     */\r\n    function checkRole(address _operator, string _role)\r\n        public\r\n        view\r\n    {\r\n        roles[_role].check(_operator);\r\n    }\r\n\r\n    /**\r\n     * @dev determine if addr has role\r\n     * @param _operator address\r\n     * @param _role the name of the role\r\n     * @return bool\r\n     */\r\n    function hasRole(address _operator, string _role)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return roles[_role].has(_operator);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param _operator address\r\n     * @param _role the name of the role\r\n     */\r\n    function addRole(address _operator, string _role) internal {\r\n        roles[_role].add(_operator);\r\n        emit RoleAdded(_operator, _role);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param _operator address\r\n     * @param _role the name of the role\r\n     */\r\n    function removeRole(address _operator, string _role) internal {\r\n        roles[_role].remove(_operator);\r\n        emit RoleRemoved(_operator, _role);\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n     * @param _role the name of the role\r\n     * // reverts\r\n     */\r\n    modifier onlyRole(string _role) {\r\n        checkRole(msg.sender, _role);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/whitelist/Whitelist.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n    string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n    /**\r\n     * @dev Throws if operator is not whitelisted.\r\n     * @param _operator address\r\n     */\r\n    modifier onlyIfWhitelisted(address _operator) {\r\n        checkRole(_operator, ROLE_WHITELISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev add an address to the whitelist\r\n     * @param _operator address\r\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n     */\r\n    function addAddressToWhitelist(address _operator)\r\n        public\r\n        onlyOwner\r\n    {\r\n        addRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev getter to determine if address is in whitelist\r\n     */\r\n    function whitelist(address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return hasRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev add addresses to the whitelist\r\n     * @param _operators addresses\r\n     * @return true if at least one address was added to the whitelist,\r\n     * false if all addresses were already in the whitelist\r\n     */\r\n    function addAddressesToWhitelist(address[] _operators)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            addAddressToWhitelist(_operators[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address from the whitelist\r\n     * @param _operator address\r\n     * @return true if the address was removed from the whitelist,\r\n     * false if the address wasn't in the whitelist in the first place\r\n     */\r\n    function removeAddressFromWhitelist(address _operator)\r\n        public\r\n        onlyOwner\r\n    {\r\n        removeRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev remove addresses from the whitelist\r\n     * @param _operators addresses\r\n     * @return true if at least one address was removed from the whitelist,\r\n     * false if all addresses weren't in the whitelist in the first place\r\n     */\r\n    function removeAddressesFromWhitelist(address[] _operators)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            removeAddressFromWhitelist(_operators[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Xcoin.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Xcoin is ERC20Pausable {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    mapping (address => bool) private _frozenAccounts;\r\n\r\n    Whitelist private _whitelistForBurn;\r\n    Pausable private _pauseForAll;\r\n\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event WhitelistForBurnChanged(address indexed oldAddress, address indexed newAddress);\r\n    event TransferWithMessage(address from, address to, uint256 value, bytes message);\r\n\r\n    // Constructor\r\n    constructor(\r\n        string name,\r\n        string symbol,\r\n        uint8 decimals,\r\n        uint256 initialSupply,\r\n        address tokenHolder,\r\n        address owner,\r\n        address whitelistForBurn,\r\n        address pauseForAll\r\n    )\r\n    public\r\n    {\r\n        _transferOwnership(owner);\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n\r\n        _whitelistForBurn = Whitelist(whitelistForBurn);\r\n        _pauseForAll = Pausable(pauseForAll);\r\n\r\n        uint256 initialSupplyWithDecimals = initialSupply.mul(10 ** uint256(_decimals));\r\n        _mint(tokenHolder, initialSupplyWithDecimals);\r\n    }\r\n\r\n    // Modifier to check _pauseForAll is not true\r\n    modifier whenNotPausedForAll() {\r\n        require(!_pauseForAll.paused(), \"pausedForAll is paused\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Return name of this token\r\n    /// @return token name\r\n    function name() public view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    /// @notice Return symbol of this token\r\n    /// @return token symbol\r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// @notice Return decimals of this token\r\n    /// @return token decimals\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /// @notice Return flag whether account is freezed or not\r\n    /// @return true if account is freezed\r\n    function frozenAccounts(address target) public view returns (bool) {\r\n        return _frozenAccounts[target];\r\n    }\r\n\r\n    /// @notice Return address of _whitelistForBurn contract\r\n    /// @return _whitelistForBurn address\r\n    function whitelistForBurn() public view returns (address) {\r\n        return _whitelistForBurn;\r\n    }\r\n\r\n    /// @notice Return address of _pauseForAll contract\r\n    /// @return _pauseForAll address\r\n    function pauseForAll() public view returns (address) {\r\n        return _pauseForAll;\r\n    }\r\n\r\n    /// @notice Change the address of _whitelistForBurn address.\r\n    ///         Owner can only execute this function\r\n    /// @param newWhitelistForBurn new _whitelistForBurn address\r\n    function changeWhitelistForBurn(address newWhitelistForBurn) public onlyOwner {\r\n        address oldWhitelist = _whitelistForBurn;\r\n        _whitelistForBurn = Whitelist(newWhitelistForBurn);\r\n        emit WhitelistForBurnChanged(oldWhitelist, newWhitelistForBurn);\r\n    }\r\n\r\n    /// @notice Freezes specific addresses.\r\n    /// @param targets The array of target addresses.\r\n    function freeze(address[] targets) public onlyOwner {\r\n        require(targets.length > 0, \"the length of targets is 0\");\r\n\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            require(targets[i] != address(0), \"targets has zero address.\");\r\n            _frozenAccounts[targets[i]] = true;\r\n            emit FrozenFunds(targets[i], true);\r\n        }\r\n    }\r\n\r\n    /// @notice Unfreezes specific addresses.\r\n    /// @param targets The array of target addresses.\r\n    function unfreeze(address[] targets) public onlyOwner {\r\n        require(targets.length > 0, \"the length of targets is 0\");\r\n\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            require(targets[i] != address(0), \"targets has zero address.\");\r\n            _frozenAccounts[targets[i]] = false;\r\n            emit FrozenFunds(targets[i], false);\r\n        }\r\n    }\r\n\r\n    /// @notice transfer token. If msg.sender is frozen, this function will be reverted.\r\n    /// @param to Target address to transfer token.\r\n    /// @param value Amount of token msg.sender wants to transfer.\r\n    /// @return true if execution works correctly.\r\n    function transfer(address to, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\r\n        require(!frozenAccounts(msg.sender), \"msg.sender address is frozen.\");\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /// @notice transfer token with message.\r\n    /// @param to Target address to transfer token.\r\n    /// @param value Amount of token msg.sender wants to transfer.\r\n    /// @param message UTF-8 encoded Message sent from msg.sender to to address.\r\n    /// @return true if execution works correctly.\r\n    function transferWithMessage(\r\n        address to,\r\n        uint256 value,\r\n        bytes message\r\n    )\r\n    public\r\n    whenNotPaused\r\n    whenNotPausedForAll\r\n    returns (bool)\r\n    {\r\n        require(!_frozenAccounts[msg.sender], \"msg.sender is frozen\");\r\n        emit TransferWithMessage(msg.sender, to, value, message);\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /// @notice transfer token. If from address is frozen, this function will be reverted.\r\n    /// @param from The sender address.\r\n    /// @param to Target address to transfer token.\r\n    /// @param value Amount of token msg.sender wants to transfer.\r\n    /// @return true if execution works correctly.\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\r\n        require(!frozenAccounts(from), \"from address is frozen.\");\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /// @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    ///         Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    ///         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    ///         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param value The amount of tokens to be spent.\r\n    /// @return true if execution works correctly.\r\n    function approve(address spender, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /// @notice Increase the amount of tokens that an owner allowed to a spender.\r\n    ///         approve should be called when allowed_[_spender] == 0. To increment\r\n    ///         allowed value is better to use this function to avoid 2 calls (and wait until\r\n    ///         the first transaction is mined)\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param addedValue The amount of tokens to increase the allowance by.\r\n    /// @return true if execution works correctly.\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused whenNotPausedForAll returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /// @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n    ///         approve should be called when allowed_[_spender] == 0. To decrement\r\n    ///         allowed value is better to use this function to avoid 2 calls (and wait until\r\n    ///         the first transaction is mined)\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    /// @return true if execution works correctly.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused whenNotPausedForAll returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /// @notice Function to mint tokens\r\n    ///         Owner can only execute this function.\r\n    /// @param to The address that will receive the minted tokens.\r\n    /// @param value The amount of tokens to mint.\r\n    /// @return A boolean that indicates if the operation was successful.\r\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\r\n        super._mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public whenNotPaused whenNotPausedForAll {\r\n        require(_whitelistForBurn.whitelist(msg.sender), \"msg.sender is not added on whitelist\");\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= _balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        _balances[_who] = _balances[_who].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df198abb22a2288396c860b7961240367d834d8705224ed002920f9cb7e96d28"}]}