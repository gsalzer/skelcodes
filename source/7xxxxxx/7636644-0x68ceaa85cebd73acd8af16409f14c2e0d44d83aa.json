{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Game20A {\r\n    using SafeMath for uint;\r\n    uint public betFirstMin = 5 ether / 100;\r\n    uint public betFirstMax = 1 ether / 10;\r\n    uint public bet = betFirstMin;\r\n    uint public currentMinBet = betFirstMin;\r\n    uint public percentRaise = 20;\r\n    address private admin = 0xAF53747Ce9cd5132c52Ab9e9D11259875935C55A;\r\n    address public player = admin;\r\n    uint public compensation;\r\n    bool public first = true;\r\n    uint public time = 0;\r\n    uint public waitTime = 24 hours;\r\n\r\n    event Withdrawal(address player, uint time, uint value, uint bet);\r\n    event Bet(address player, uint time, uint bet);\r\n    event newCircle(address player, uint time, uint compensation);\r\n\r\n    function firstBet() private {\r\n        require(msg.value >= betFirstMin && msg.value <= betFirstMax, 'Wrong ETH value');\r\n\r\n        compensation = compensation.add(msg.value);\r\n\r\n        player = msg.sender;\r\n        time = now;\r\n        bet = msg.value;\r\n        currentMinBet = bet.mul(percentRaise).div(100).add(bet);\r\n\r\n        first = false;\r\n\r\n        emit Bet(player, time, bet);\r\n    }\r\n\r\n    function usualBet() private {\r\n        require(msg.value >= currentMinBet, 'Wrong ETH value');\r\n\r\n        uint profit = msg.value.sub(bet);\r\n\r\n        player.transfer(profit.mul(10).div(20).add(bet));\r\n        emit Withdrawal(player, now, profit.mul(10).div(20).add(bet), bet);\r\n        admin.transfer(profit.mul(1).div(20));\r\n        compensation = compensation.add(profit.mul(9).div(20));\r\n\r\n        player = msg.sender;\r\n        time = now;\r\n        bet = msg.value;\r\n        currentMinBet = bet.mul(percentRaise).div(100).add(bet);\r\n\r\n        emit Bet(player, time, bet);\r\n    }\r\n\r\n    function lastBet() private {\r\n        emit newCircle(player, time, bet);\r\n\r\n        if (msg.value >= betFirstMin && msg.value <= betFirstMax) {\r\n            player.transfer(address(this).balance.sub(msg.value));\r\n            emit Withdrawal(player, now, address(this).balance.sub(msg.value), bet);\r\n\r\n            compensation = 0;\r\n\r\n            firstBet();\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            player.transfer(address(this).balance);\r\n            emit Withdrawal(player, now, address(this).balance, bet);\r\n\r\n            compensation = 0;\r\n            player = admin;\r\n            bet = betFirstMin;\r\n            currentMinBet = bet;\r\n            time = 0;\r\n            first = true;\r\n        }\r\n\r\n    }\r\n\r\n    function() external payable {\r\n        if (first == true) {\r\n            firstBet();\r\n        } else {\r\n            now >= time + waitTime ? lastBet() : usualBet();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMinBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compensation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betFirstMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betFirstMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compensation\",\"type\":\"uint256\"}],\"name\":\"newCircle\",\"type\":\"event\"}]","ContractName":"Game20A","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41bac6401700df57fdf38d892cff992a402460820e473c8b33c19c89031f9851"}]}