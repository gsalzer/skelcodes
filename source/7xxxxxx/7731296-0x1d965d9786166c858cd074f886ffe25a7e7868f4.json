{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract owned {\r\n\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\ninterface tokenRecipient {\r\n\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract TokenERC20 {\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring memory tokenName,\r\n\t\tstring memory tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);\r\n\t\tbalanceOf[msg.sender] = totalSupply;\r\n\t\tname = tokenName;\r\n\t\tsymbol = tokenSymbol;\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\r\n\t\trequire(_to != address(0x0));\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n\t\trequire(_value <= allowance[_from][msg.sender]);\r\n\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\r\n\t\t_transfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\r\n\t\trequire(balanceOf[msg.sender] >= _value);\r\n\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\ttotalSupply -= _value;\r\n\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\trequire(_value <= allowance[_from][msg.sender]);\r\n\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\ttotalSupply -= _value;\r\n\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract XRUN is owned, TokenERC20 {\r\n\r\n\tuint256 public sellPrice;\r\n\tuint256 public buyPrice;\r\n\r\n\tmapping (address => bool) public frozenAccount;\r\n\tmapping (address => uint256) public limitAccount;\r\n\r\n    event MultiFrozenFunds(address[] target, bool freeze);\r\n\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring memory tokenName,\r\n\t\tstring memory tokenSymbol\r\n\t) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\r\n\t\trequire(_to != address(0x0));\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\trequire(balanceOf[_to] + _value >= balanceOf[_to]);\r\n\t\t\r\n\t\tif ( frozenAccount[_from] ) {\r\n\t\t\trequire(limitAccount[_from] >= _value);\r\n\t\t}\r\n\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\r\n\t\tif ( frozenAccount[_from] ) {\r\n\t\t\tlimitAccount[_from] -= _value;\r\n\t\t}\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\ttotalSupply += mintedAmount;\r\n\r\n\t\temit Transfer(address(0), address(this), mintedAmount);\r\n\t\temit Transfer(address(this), target, mintedAmount);\r\n\t}\r\n\r\n    function multiSend(address[] _to, uint[] values) onlyOwner public {\r\n\r\n        for ( uint j=0; j<_to.length; j++ ) {\r\n\r\n\t\t\taddress to = _to[j];\r\n\t\t\tuint value = values[j];\r\n\r\n            balanceOf[msg.sender] -= value;\r\n\t\t\tbalanceOf[to] += value;\r\n        }\r\n    }\r\n\r\n    function multiFrozen(address[] target, bool freeze) onlyOwner public {\r\n\r\n\t\tfor ( uint i=0; i<target.length; i++ ) {\r\n\t\t\tfrozenAccount[target[i]] = freeze;\r\n\t\t}\r\n\r\n        emit MultiFrozenFunds(target, freeze);\r\n    }\r\n\r\n\tfunction multiLimit(address[] target, uint256[] limitBalance) onlyOwner public {\r\n\t\t\r\n\t\tfor ( uint i=0; i<target.length; i++ ) {\r\n\t\t\tlimitAccount[target[i]] = limitBalance[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n\r\n\t\tsellPrice = newSellPrice;\r\n\t\tbuyPrice = newBuyPrice;\r\n\t}\r\n\r\n\tfunction buy() payable public {\r\n\r\n\t\tuint amount = msg.value / buyPrice;\r\n\r\n\t\t_transfer(address(this), msg.sender, amount);\r\n\t}\r\n\r\n\tfunction sell(uint256 amount) public {\r\n\r\n\t\taddress myAddress = address(this);\r\n\r\n\t\trequire(myAddress.balance >= amount * sellPrice);\r\n\r\n\t\t_transfer(msg.sender, address(this), amount);\r\n\r\n\t\tmsg.sender.transfer(amount * sellPrice);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address[]\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"multiFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address[]\"},{\"name\":\"limitBalance\",\"type\":\"uint256[]\"}],\"name\":\"multiLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"MultiFrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"XRUN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000007d2b7500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000045852554e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045852554e00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4ad7e01587d44d4b8af6630538bcb5ec82103c17d91128ed44ebb75479fb6366"}]}