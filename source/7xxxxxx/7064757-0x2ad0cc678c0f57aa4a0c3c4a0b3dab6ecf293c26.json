{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract PurchaseContract {\r\n    \r\n  using SafeMath for uint256;\r\n  \r\n  uint purchasedProductsCount;\r\n  uint unPurchasedProductsCount;\r\n\r\n  IERC20 token;\r\n\r\n  struct Product {\r\n    uint id;\r\n    uint price;\r\n    address buyer;\r\n    address retailer;\r\n    address model;\r\n    bool purchased;\r\n  }\r\n\r\n  Product[] products;\r\n  \r\n  event Purchase(uint _id, uint _price, address _buyer, address _retailer, address _model);\r\n  \r\n  constructor(address _tokenAddress) public {\r\n    token = IERC20(_tokenAddress);\r\n  }\r\n\r\n  function addProduct(uint _productId, uint _price) external {\r\n    require(_productId > 0);\r\n    require(_price > 0);\r\n\r\n    products.push(Product(_productId, _price, address(0), msg.sender, address(0), false));\r\n    unPurchasedProductsCount = unPurchasedProductsCount.add(1);\r\n  }\r\n\r\n  function addProducts(uint[] calldata _productIds, uint[] calldata _prices) external {\r\n    require(_productIds.length > 0);\r\n    require(_prices.length > 0);\r\n    require(_productIds.length == _prices.length);\r\n\r\n    for(uint i = 0; i < _productIds.length; i++) {\r\n      require(_productIds[i] > 0 && _prices[i] > 0); \r\n      products.push(Product(_productIds[i], _prices[i], address(0), msg.sender, address(0), false));\r\n      unPurchasedProductsCount = unPurchasedProductsCount.add(1);\r\n    }\r\n  }\r\n  \r\n  function purchaseRequest(uint _productId) external {\r\n    (Product memory _product, uint index) = findProductAndIndexById(_productId);\r\n    require(_productId != 0 && _product.id == _productId && _product.purchased == false);\r\n    require(_product.buyer == address(0));\r\n    require(_product.price <= token.balanceOf(msg.sender));\r\n    _product.buyer = msg.sender;\r\n     products[index] = _product;\r\n  }\r\n\r\n  function getProductPrice(uint _productId) external view returns(uint) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.price;\r\n  }\r\n\r\n  function getProductRetailer(uint _productId) external view returns(address) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.retailer;\r\n  }\r\n  \r\n  function getProductBuyer(uint _productId) external view returns(address) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.buyer;\r\n  }\r\n  \r\n  function isPurchased(uint _productId) external view returns(bool) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.purchased;\r\n  }\r\n\r\n  function getUnPurchasedProducts() external view returns(uint[] memory) {\r\n    uint index;\r\n    bool isEmpty = true;\r\n    uint[] memory results = new uint[](unPurchasedProductsCount);\r\n\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(!products[i].purchased){\r\n         results[index] = products[i].id;\r\n         index = index.add(1);\r\n         isEmpty = false;\r\n       }\r\n    }\r\n    \r\n    if(isEmpty) {\r\n        return new uint[](1);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n  \r\n  function getPurchasedProducts() external view returns(uint[] memory) {\r\n    uint index;\r\n    bool isEmpty = true;\r\n    uint[] memory results = new uint[](purchasedProductsCount);\r\n\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].purchased){\r\n         results[index] = products[i].id;\r\n         index = index.add(1);\r\n         isEmpty = false;\r\n       }\r\n    }\r\n    \r\n    if(isEmpty) {\r\n        return new uint[](1);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function confirmPurchase(uint _productId, address _model) external {\r\n    require(_productId != 0);\r\n\r\n    (Product memory _product, uint index) = findProductAndIndexById(_productId);\r\n\r\n    require(msg.sender == _product.retailer && _product.buyer != address(0) && token.allowance(_product.buyer, address(this)) >= _product.price); \r\n\r\n    _product.model = _model;\r\n\r\n    token.transferFrom(_product.buyer, _product.retailer, _product.price.mul(90).div(100));\r\n    token.transferFrom(_product.buyer, _product.model, _product.price.mul(6).div(100));\r\n    \r\n    _product.purchased = true;\r\n    purchasedProductsCount = purchasedProductsCount.add(1);\r\n    unPurchasedProductsCount = unPurchasedProductsCount.sub(1);\r\n    \r\n    products[index] = _product;\r\n\r\n    emit Purchase(_productId, _product.price, _product.buyer, _product.retailer, _model);\r\n  }\r\n\r\n  function findProductAndIndexById(uint _productId) internal view returns(Product memory, uint) {\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].id == _productId){\r\n         return (products[i], i);\r\n       }\r\n    }\r\n    \r\n    return (Product(0, 1, address(0), address(0), address(0), false), 0);\r\n  }\r\n  \r\n  function findProductById(uint _productId) internal view returns(Product memory) {\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].id == _productId){\r\n         return products[i];\r\n       }\r\n    }\r\n    \r\n    return Product(0, 1, address(0), address(0), address(0), false);\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPurchasedProducts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"isPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductRetailer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"purchaseRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnPurchasedProducts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_model\",\"type\":\"address\"}],\"name\":\"confirmPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"addProducts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_retailer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_model\",\"type\":\"address\"}],\"name\":\"Purchase\",\"type\":\"event\"}]","ContractName":"PurchaseContract","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000282db008df771bc04c8a298d70471bc2d5dc6783","Library":"","SwarmSource":"bzzr://c887a2097891302d23fa5511ec8756f5a3b589b2f10b738d264ad41a2c8de7a0"}]}