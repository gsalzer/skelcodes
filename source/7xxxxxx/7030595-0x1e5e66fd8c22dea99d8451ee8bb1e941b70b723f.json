{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assertCheck(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assertCheck(b > 0);\r\n    uint256 c = a / b;\r\n    assertCheck(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assertCheck(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assertCheck(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assertCheck(bool assertion) internal pure {\r\n    require(assertion == true);\r\n  }\r\n}\r\ncontract SWAP is SafeMath{\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n\taddress public owner;\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function setName(string _name) onlyOwner public returns (string){\r\n         name = _name;\r\n         return name;\r\n    }\r\n    function setSymbol(string _symbol) onlyOwner public returns (string){\r\n         symbol = _symbol;\r\n         return symbol;\r\n     }\r\n    \r\n     function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\r\n         decimals = _decimals;\r\n         return decimals;\r\n     }\r\n    \r\n    \r\n     function getOwner() view public returns(address){\r\n        return owner;\r\n     }\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    event Withdraw(address to, uint amount);\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public payable {\r\n        balanceOf[msg.sender] = 100000000000*10**18;\r\n        totalSupply = balanceOf[msg.sender];\r\n        name = 'SWAP'; \r\n        symbol = 'SWAP'; \r\n        decimals = 18; \r\n\t\towner = msg.sender;\r\n    }\r\n\r\n   \r\n    function _transfer(address _from, address _to, uint _value) internal{\r\n        require(_to != 0x0); \r\n\t\trequire(_value > 0); \r\n        require(balanceOf[_from] >= _value);   \r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    \r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);               \r\n        emit Transfer(_from, _to, _value);       \r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public payable returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success) {\r\n\t\trequire(_value > 0); \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n       \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n    public\r\n    payable  {\r\n        require (_to != 0x0) ;             \r\n\t\trequire (_value > 0); \r\n        require (balanceOf[_from] >= _value) ;       \r\n        require (balanceOf[_to] + _value >= balanceOf[_to]) ;\r\n        require (_value <= allowance[_from][msg.sender]) ;   \r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);               \r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);  \r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);    \r\n\t\trequire (_value > 0) ; \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\r\n        totalSupply = SafeMath.safeSub(totalSupply,_value); // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    function create(uint256 _value) public onlyOwner returns (bool success) {\r\n        require (_value > 0) ; \r\n        totalSupply = SafeMath.safeAdd(totalSupply,_value);\r\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        return true;\r\n    }\r\n    \r\n\t// transfer balance to owner\r\n\tfunction withdraw() external onlyOwner{\r\n\t\trequire(msg.sender == owner);\r\n\t\tmsg.sender.transfer(address(this).balance);\r\n        emit Withdraw(msg.sender,address(this).balance);\r\n\t}\r\n\t\r\n\t// can accept ether\r\n\tfunction() private payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"SWAP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b832d29afd31a00066fd9f35fe25c6789e83edc0001ea176c24be811d98fb1a9"}]}