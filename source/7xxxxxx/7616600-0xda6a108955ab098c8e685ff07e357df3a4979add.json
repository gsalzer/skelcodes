{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ncontract AuraToken {\r\n\r\n    mapping (address => uint256) balances;\r\n    uint256 totalSupply;\r\n    uint256 freeSupply;\r\n    address owner1;\r\n    address owner2;\r\n    address owner3;\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H1.7';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n    uint256 rateBuy;\r\n    //uint256 amount1;\r\n    //uint256 amount2;\r\n    //uint256 amount3;\r\n    address payable w_owner;\r\n    uint256 w_amount;\r\n    ///uint256 rateSell;\r\n\r\n    constructor () public {\r\n        owner2 = 0xEb5887409Dbf80de52cBE1dD441801F1f01c568b;\r\n        owner1 = 0xBd1A0E79e12F9D7109d58D014C2A8fba1AA44935;\r\n        owner3 = 0xc0eE5076F0D78D87AD992B6CE205d88133aD25c0;\r\n\r\n        //balances[msg.sender] = 1000000000000000; // Give the creator all initial tokens (100000 for example)\r\n        totalSupply = 0;                    // Update total supply (100000 for example)\r\n        freeSupply = 0;                     // Update free supply (100000 for example)\r\n        name = \"atlant resourse\";           // Set the name for display purposes\r\n        decimals = 8;                        // Amount of decimals for display purposes\r\n        symbol = \"AURA\";                     // Set the symbol for display purposes\r\n        rateBuy = 200000000000;              // 20 eth per AURA\r\n        ///rateSell = 404000000;\r\n        emit TotalSupply(totalSupply);\r\n        //amount1 = 0;\r\n        //amount2 = 0;\r\n        //amount3 = 0;\r\n        w_amount = 0;\r\n    }\r\n\r\n    /// @return total amount of tokens\r\n    function total_supply() public view returns (uint256 _supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /// @return free amount of tokens\r\n    function free_supply() public view returns (uint256 _supply) {\r\n        return freeSupply;\r\n    }\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] - _value >= 0 && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from New Atlantis Central bank\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred. Negative value is allowed\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFromNA(address _to, uint256 _value) public returns (bool success) {\r\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\r\n        balances[_to] += _value;\r\n        freeSupply -= _value;\r\n        emit Transfer(address(0), _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event TotalSupply(uint256 _value);\r\n    event Rates(uint256 _value);\r\n    \r\n    function () external payable {\r\n        buyAura();\r\n    }\r\n\r\n    ///function setRates(uint256 _rateBuy, uint256 _rateSell) public {\r\n    function setRates(uint256 _rateBuy) public {\r\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\r\n        ///require(_rateBuy < _rateSell);\r\n        rateBuy = _rateBuy;\r\n        ///rateSell = _rateSell;\r\n        emit Rates(rateBuy);\r\n    }\r\n    \r\n    function printTokens(uint256 _amount) public {       // must be signed from owner1\r\n        require(totalSupply<=1500000000000000000000000);  // 15 000 000 000 000 000 AURA\r\n        require(_amount>0);\r\n        require(_amount<=1500000000000000000);          // 15 000 000 000 AURA\r\n        //if(msg.sender == owner1) amount1 = _amount;\r\n        //if(msg.sender == owner2) amount2 = _amount;\r\n        //if(msg.sender == owner3) amount3 = _amount;\r\n        //if((amount1 == amount2) && (amount2 == amount3)) {\r\n        if(msg.sender == owner1) {\r\n            totalSupply +=_amount;\r\n            freeSupply += _amount;\r\n            emit TotalSupply(_amount);\r\n            //amount1 = 0;\r\n            //amount2 = 0;\r\n            //amount3 = 0;\r\n        }\r\n    }\r\n    \r\n    function buyAura() public payable {\r\n        require(msg.value > 0);\r\n        require(msg.value <= 150000000000000000000000000000); //150 000 000 000 ether\r\n        balances[msg.sender] += msg.value / rateBuy;\r\n        freeSupply -= msg.value / rateBuy; // Negative value is allowed\r\n    }\r\n    \r\n    ///function sellAura(uint256 _amount) public {\r\n    ///    require(balances[msg.sender] > _amount);\r\n    ///    balances[msg.sender] -= _amount;\r\n    ///    msg.sender.transfer(_amount / rateSell);\r\n    ///}\r\n    \r\n    function withdraw(uint256 _amount) public {  // must be signed from 2 owners\r\n        require(_amount > 0);\r\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\r\n        if((msg.sender != w_owner) && (_amount == w_amount)) {\r\n            w_amount = 0;\r\n            w_owner.transfer(_amount);\r\n        }\r\n        else {\r\n            w_owner = msg.sender;\r\n            w_amount = _amount;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateBuy\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyAura\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"free_supply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromNA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"printTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Rates\",\"type\":\"event\"}]","ContractName":"AuraToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf4ae8cbd00788232c2a3e034b5fce5e81b295d29ead8b2a77911804f0258ff6"}]}