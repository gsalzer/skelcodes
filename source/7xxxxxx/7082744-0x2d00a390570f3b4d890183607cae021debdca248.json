{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public coinvest;\r\n  mapping (address => bool) public admins;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    coinvest = msg.sender;\r\n    admins[owner] = true;\r\n    admins[coinvest] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier coinvestOrOwner() {\r\n      require(msg.sender == coinvest || msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n      require(admins[msg.sender]);\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Changes the Coinvest wallet that will receive funds from investment contract.\r\n   * @param _newCoinvest The address of the new wallet.\r\n  **/\r\n  function transferCoinvest(address _newCoinvest) \r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_newCoinvest != address(0));\r\n    coinvest = _newCoinvest;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to add admins who are allowed to add funds to the investment contract and change gas price.\r\n   * @param _user The address of the admin to add or remove.\r\n   * @param _status True to add the user, False to remove the user.\r\n  **/\r\n  function alterAdmin(address _user, bool _status)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_user != address(0));\r\n    require(_user != coinvest);\r\n    admins[_user] = _status;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n/**\r\n * @title Bank\r\n * @dev Bank holds all user funds so Investment contract can easily be replaced.\r\n**/\r\ncontract Bank is Ownable {\r\n    \r\n    address public investmentAddr;      // Investment contract address used to allow withdrawals\r\n    address public coinToken;           // COIN token address.\r\n    address public cashToken;           // CASH token address.\r\n\r\n    /**\r\n     * @param _coinToken address of the Coinvest token.\r\n     * @param _cashToken address of the CASH token.\r\n    **/\r\n    constructor(address _coinToken, address _cashToken)\r\n      public\r\n    {\r\n        coinToken = _coinToken;\r\n        cashToken = _cashToken;\r\n    }\r\n\r\n/** ****************************** Only Investment ****************************** **/\r\n    \r\n    /**\r\n     * @dev Investment contract needs to be able to disburse funds to users.\r\n     * @param _to Address to send funds to.\r\n     * @param _value Amount of funds to send to _to.\r\n     * @param _isCoin True if the crypto to be transferred is COIN, false if it is CASH.\r\n    **/\r\n    function transfer(address _to, uint256 _value, bool _isCoin)\r\n      external\r\n    returns (bool success)\r\n    {\r\n        require(msg.sender == investmentAddr);\r\n\r\n        ERC20Interface token;\r\n        if (_isCoin) token = ERC20Interface(coinToken);\r\n        else token = ERC20Interface(cashToken);\r\n\r\n        require(token.transfer(_to, _value));\r\n        return true;\r\n    }\r\n    \r\n/** ******************************* Only Owner ********************************** **/\r\n    \r\n    /**\r\n     * @dev Owner may change the investment address when contracts are being updated.\r\n     * @param _newInvestment The address of the new investment contract.\r\n    **/\r\n    function changeInvestment(address _newInvestment)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_newInvestment != address(0));\r\n        investmentAddr = _newInvestment;\r\n    }\r\n    \r\n/** ****************************** Only Coinvest ******************************* **/\r\n\r\n    /**\r\n     * @dev Allow the owner to take non-COIN Ether or tokens off of this contract if they are accidentally sent.\r\n     * @param _tokenContract The address of the token to withdraw (0x0 if Ether)--cannot be COIN.\r\n    **/\r\n    function tokenEscape(address _tokenContract)\r\n      external\r\n      coinvestOrOwner\r\n    {\r\n        require(_tokenContract != coinToken && _tokenContract != cashToken);\r\n        if (_tokenContract == address(0)) coinvest.transfer(address(this).balance);\r\n        else {\r\n            ERC20Interface lostToken = ERC20Interface(_tokenContract);\r\n        \r\n            uint256 stuckTokens = lostToken.balanceOf(address(this));\r\n            lostToken.transfer(coinvest, stuckTokens);\r\n        }    \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"alterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"tokenEscape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestment\",\"type\":\"address\"}],\"name\":\"changeInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoinvest\",\"type\":\"address\"}],\"name\":\"transferCoinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_isCoin\",\"type\":\"bool\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coinToken\",\"type\":\"address\"},{\"name\":\"_cashToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bank","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000eb547ed1d8a3ff1461abaa7f0022fed4836e00a40000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f665bf37993083d8f722bd70563ecfa375392cd291e24cf0d6cec8b3318610bb"}]}