{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * ZeroDelta - The Official ZeroCache (DEX) Decentralized Exchange\r\n *\r\n *             This is the first non-custodial, blockchain exchange. ALL tokens\r\n *             are held securely in ZeroCache; plus require authorized signatures\r\n *             of both the MAKER and TAKER for ANY and ALL token transfers.\r\n *\r\n * Version 19.3.14\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ECRecovery\r\n *\r\n * Contract function to validate signature of pre-approved token transfers.\r\n * (borrowed from LavaWallet)\r\n */\r\ncontract ECRecovery {\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ZeroCache Interface\r\n */\r\ncontract ZeroCacheInterface {\r\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, address _token, uint _tokens) external returns (bool success);\r\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice ZeroDelta\r\n *\r\n * @dev Decentralized Exchange (DEX) exclusively for use with ZeroCache.\r\n */\r\ncontract ZeroDelta is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n\r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /**\r\n     * Order Structure\r\n     *\r\n     * Stores the MAKER's desired trade parameters; along with their\r\n     * ZeroCache transfer signature.\r\n     *\r\n     * NOTE: Transfer Signatures are required to move ANY funds within\r\n     * the ZeroCache that come from a 3rd-party.\r\n     */\r\n    struct Order {\r\n        address maker;\r\n        bytes makerSig;\r\n        address tokenRequest;\r\n        uint amountRequest;\r\n        address tokenOffer;\r\n        uint amountOffer;\r\n        uint expires;\r\n        uint nonce;\r\n        bool canPartialFill;\r\n        uint amountFilled; // of `tokenRequest`\r\n    }\r\n\r\n    /**\r\n     * Orders\r\n     */\r\n    mapping (bytes32 => Order) private _orders;\r\n\r\n    /**\r\n     * Trade Structure\r\n     * \r\n     * NOTE: Transfer Signatures are required to move ANY funds within\r\n     * the ZeroCache that come from a 3rd-party.\r\n     */\r\n    struct Trade {\r\n        bytes32 orderId;\r\n        address taker;\r\n        bytes takerSig;\r\n        uint paymentAmount;\r\n        address staekholder;\r\n        uint staek;\r\n    }\r\n\r\n    /**\r\n     * Trades\r\n     */\r\n    mapping (bytes32 => Trade) private _trades;\r\n\r\n    /* Maximum order expiration time. */\r\n    // NOTE: 10,000 blocks = ~1 3/4 days\r\n    uint private _MAX_ORDER_EXPIRATION = 10000;\r\n\r\n    /* Set namespace. */\r\n    string private _namespace = 'zerodelta';\r\n\r\n    event OrderCancel(\r\n        bytes32 indexed marketId,\r\n        bytes32 orderId\r\n    );\r\n\r\n    event OrderRequest(\r\n        bytes32 indexed marketId,\r\n        bytes32 orderId\r\n    );\r\n\r\n    event TradeComplete(\r\n        bytes32 indexed marketId,\r\n        bytes32 tradeId\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = ZeroDelta(_predecessor).getRevision();\r\n\r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     *\r\n     * ACTIONS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Create (On-chain) Order\r\n     *\r\n     * Allows a MARKET MAKER to place a new trade request on-chain.\r\n     *\r\n     * The maker's authorization signature is also stored on-chain,\r\n     * which is required when fulfilling an order for a TAKER.\r\n     *\r\n     * Due to the \"abolsute\" security design of the ZeroCache; partial\r\n     * fills can ONLY be supported by supplying 2x the order volume,\r\n     * until the entire order has been FILLED. MAKERs can enable/disable\r\n     * partial fills, by setting a flag.\r\n     *\r\n     * NOTE: Required to support fully decentralized (no 3rd-party)\r\n     *       token transactions.\r\n     */\r\n    function createOrder(\r\n        address _tokenRequest,\r\n        uint _amountRequest,\r\n        address _tokenOffer,\r\n        uint _amountOffer,\r\n        uint _expires,\r\n        uint _nonce,\r\n        bytes _makerSig,\r\n        bool _canPartialFill\r\n    ) external returns (bool success) {\r\n        /* Create new order request. */\r\n        bytes32 orderId = _createOrderRequest(\r\n            msg.sender, // Market Maker\r\n            _tokenRequest,\r\n            _amountRequest,\r\n            _tokenOffer,\r\n            _amountOffer,\r\n            _expires, // NOTE: This value is unchecked (NOT SAFE).\r\n            _nonce // NOTE: This value is unchecked (NOT SAFE).\r\n        );\r\n\r\n        /* Build order. */\r\n        Order memory order = Order(\r\n            msg.sender, // Market Maker\r\n            _makerSig,\r\n            _tokenRequest,\r\n            _amountRequest,\r\n            _tokenOffer,\r\n            _amountOffer,\r\n            _expires,\r\n            _nonce,\r\n            _canPartialFill,\r\n            uint(0) // amountFilled\r\n        );\r\n\r\n        /* Save order to storage. */\r\n        _orders[orderId] = order;\r\n\r\n        /* Calculate transfer hash. */\r\n        bytes32 transferHash = _calcTransferHash(\r\n            _tokenOffer,\r\n            _amountOffer,\r\n            address(0x0), // staekholder\r\n            uint(0), // staek amount\r\n            _expires,\r\n            _nonce\r\n        );\r\n\r\n        /* Validate request has authorized signature. */\r\n        // NOTE: A valid transfer signature is required for ZeroCache.\r\n        bool requestHasAuthSig = _requestHasAuthSig(\r\n            msg.sender, // Market Maker\r\n            transferHash,\r\n            _expires,\r\n            _makerSig\r\n        );\r\n        \r\n        /* Validate authorization. */\r\n        if (!requestHasAuthSig) {\r\n            revert('Oops! Your order has an INVALID signature.');\r\n        }\r\n\r\n        /* Broadcast event. */\r\n        emit OrderRequest(\r\n            _calcMarketId(\r\n                _tokenRequest, \r\n                _tokenOffer\r\n            ),\r\n            orderId\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Create Order Request\r\n     *\r\n     * Will validate all parameters and return a new order id.\r\n     *\r\n     * NOTE: Order Id creation follows the scheme common in DEXs\r\n     *       (eg. EtherDelta / ForkDelta).\r\n     */\r\n    function _createOrderRequest(\r\n        address _maker,\r\n        address _tokenRequest,\r\n        uint _amountRequest,\r\n        address _tokenOffer,\r\n        uint _amountOffer,\r\n        uint _expires,\r\n        uint _nonce\r\n    ) private view returns (bytes32 orderId) {\r\n        /* Validate expiration. */\r\n        if (_expires > block.number.add(_MAX_ORDER_EXPIRATION)) {\r\n            revert('Oops! You entered an INVALID expiration.');\r\n        }\r\n\r\n        /* Retrieve maker balance from ZeroCache. */\r\n        uint makerBalance = _zeroCache()\r\n            .balanceOf(_tokenOffer, _maker);\r\n\r\n        /* Validate MAKER token balance. */\r\n        if (_amountOffer > makerBalance) {\r\n            revert('Oops! Maker DOES NOT have enough tokens.');\r\n        }\r\n\r\n        /* Calculate order id. */\r\n        orderId = keccak256(abi.encodePacked(\r\n            address(this),\r\n            _tokenRequest,\r\n            _amountRequest,\r\n            _tokenOffer,\r\n            _amountOffer,\r\n            _expires,\r\n            _nonce\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Cancel (On-chain) Order\r\n     *\r\n     * Allows market makers to discontinue a previously placed\r\n     * on-chain order.\r\n     *\r\n     * NOTE: This procedure disables an active order by FILLING\r\n     *       the available volume to the order's FULL capacity;\r\n     *       thereby reducing the avaiable trade volume to ZERO.\r\n     */\r\n    function cancelOrder(\r\n        bytes32 _orderId\r\n    ) external {\r\n        /* Validate MAKER authorized request. */\r\n        if (msg.sender != _orders[_orderId].maker) {\r\n            revert('Oops! Your request is NOT authorized.');\r\n        }\r\n\r\n        /* Fill order. */\r\n        _setAmountFilled(\r\n            _orderId, \r\n            _orders[_orderId].amountRequest\r\n        );\r\n\r\n        /* Broadcast event. */\r\n        emit OrderCancel(\r\n            _calcMarketId(\r\n                _orders[_orderId].tokenRequest, \r\n                _orders[_orderId].tokenOffer\r\n            ),\r\n            _orderId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * (On-chain <> On-chain) Trade Simulation\r\n     *\r\n     * Validates each of the trade/order parameters and returns a\r\n     * success value, based on the result of an \"actual\" trade\r\n     * occuring on the network at that (current block) time.\r\n     *\r\n     * NOTE: A successful result DOES NOT guarantee that the trade\r\n     *       will be successful in subsequent blocks (as available\r\n     *       volumes can change due to external token activites).\r\n     */\r\n    function tradeSimulation(\r\n        bytes32 _orderId,\r\n        bytes _takerSig,\r\n        uint _paymentAmount,\r\n        address _staekholder,\r\n        uint _staek\r\n    ) external view returns (bool success) {\r\n        /* Initialize success. */\r\n        success = true;\r\n        \r\n        // TODO Validate signature\r\n        if (_takerSig[0] == 0x0 && _takerSig[0] != 0x0) {\r\n            /* Set flag. */\r\n            success = false;\r\n        }\r\n\r\n        // TODO Validate staekholder\r\n        if (_staekholder == 0x0 && _staekholder != 0x0) {\r\n            /* Set flag. */\r\n            success = false;\r\n        }\r\n\r\n        // TODO Validate staek\r\n        if (_staek == 0 && _staek != 0) {\r\n            /* Set flag. */\r\n            success = false;\r\n        }\r\n\r\n        /* Retrieve available volume. */\r\n        uint availableVolume = getAvailableVolume(_orderId);\r\n\r\n        /* Validate available (on-chain) volume. */\r\n        if (_paymentAmount > availableVolume) {\r\n            /* Set flag. */\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (On-chain <> On-chain) Trade\r\n     *\r\n     * Executed 100% on-chain by both the MAKER and TAKER,\r\n     * which allows for a FULLY decentralized trade experience.\r\n     *\r\n     * 1. Maker creates an on-chain `order` request, specifying\r\n     *    their desired trade parameters.\r\n     *\r\n     * 2. Taker executes an on-chain transaction to fill any available\r\n     *    volume from the maker's active order.\r\n     *\r\n     * NOTE: The is the MOST inefficient, timely, and costly of all the\r\n     *       available trade procedures. However, this trade option\r\n     *       WILL ALWAYS serve as the exchange's DEFAULT recommendation,\r\n     *       as it requires ZERO intervention from ANY centralized\r\n     *       (or 3rd-party) service(s); guaranteeing the MAXIMUM safety\r\n     *       and security to both the maker and taker of the transaction.\r\n     */\r\n    function trade(\r\n        bytes32 _orderId,\r\n        bytes _takerSig,\r\n        uint _paymentAmount,\r\n        address _staekholder,\r\n        uint _staek\r\n    ) external returns (bool success) {\r\n        /* Validate order. */\r\n        if (_orders[_orderId].maker == 0x0) {\r\n            revert('Oops! That order DOES NOT exist.');\r\n        }\r\n\r\n        /* Initialize taker. */\r\n        address taker = msg.sender;\r\n        \r\n        /* Create new trade request. */\r\n        bytes32 tradeId = _createTradeRequest(\r\n            _orderId,\r\n            taker,\r\n            _paymentAmount,\r\n            _staekholder,\r\n            _staek\r\n        );\r\n\r\n        /* Build new (trade) request. */\r\n        Trade memory request = Trade(\r\n            _orderId,\r\n            taker,\r\n            _takerSig,\r\n            _paymentAmount,\r\n            _staekholder,\r\n            _staek\r\n        );\r\n\r\n        /* Save trade to trades. */\r\n        _trades[tradeId] = request;\r\n\r\n        /* Retrieve available volume. */\r\n        uint availableVolume = getAvailableVolume(_orderId);\r\n\r\n        /* Validate available (trade) volume. */\r\n        if (_paymentAmount > availableVolume) {\r\n            revert('Oops! Amount to be paid EXCEEDS available volume.');\r\n        }\r\n\r\n        /* Request atomic trade. */\r\n        return _trade(tradeId);\r\n    }\r\n\r\n    /**\r\n     * Create Trade Request\r\n     *\r\n     * Will validate all parameters and return a new trade id.\r\n     */\r\n    function _createTradeRequest(\r\n        bytes32 _orderId,\r\n        address _taker,\r\n        uint _paymentAmount,\r\n        address _staekholder,\r\n        uint _staek\r\n    ) private view returns (bytes32 tradeId) {\r\n        // TODO Do some validation before creating new id.\r\n\r\n        /* Calculate trade id. */\r\n        tradeId = keccak256(abi.encodePacked(\r\n            address(this),\r\n            _orderId,\r\n            _taker,\r\n            _paymentAmount,\r\n            _staekholder,\r\n            _staek\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * (On-chain <> Off-chain) RELAYED | MARKET Trade\r\n     *\r\n     * Allows for ETH-less on-chain order fulfillment for takers.\r\n     */\r\n    // function trade(\r\n    //     address _maker,\r\n    //     address _taker,\r\n    //     bytes _takerSig,\r\n    //     address _staekholder,\r\n    //     uint _staek,\r\n    //     address _tokenRequest,\r\n    //     uint _amountRequest,\r\n    //     address _tokenOffer,\r\n    //     uint _amountOffer,\r\n    //     uint _expires,\r\n    //     uint _nonce,\r\n    //     uint _paymentAmount\r\n    // ) external returns (bool success) {\r\n    //     /* Retrieve available volume. */\r\n    //     uint availableVolume = getAvailableVolume(_orderId);\r\n\r\n    //     /* Validate available (trade) volume. */\r\n    //     if (_paymentAmount > availableVolume) {\r\n    //         revert('Oops! Amount requested EXCEEDS available volume.');\r\n    //     }\r\n\r\n    //     /* Calculate order id. */\r\n    //     bytes32 orderId = keccak256(abi.encodePacked(\r\n    //         address(this),\r\n    //         _tokenGet,\r\n    //         _amountRequest,\r\n    //         _tokenGive,\r\n    //         _amountGive,\r\n    //         _expires,\r\n    //         _nonce\r\n    //     ));\r\n\r\n    //     /* Validate maker. */\r\n    //     bytes32 makerSig = keccak256(abi.encodePacked(\r\n    //         '\\x19Ethereum Signed Message:\\n32', orderId));\r\n\r\n    //     /* Calculate trade hash. */\r\n    //     bytes32 tradeHash = keccak256(abi.encodePacked(\r\n    //         _maker,\r\n    //         orderId,\r\n    //         _staekholder,\r\n    //         _staek,\r\n    //         _amount\r\n    //     ));\r\n\r\n    //     /* Validate maker. */\r\n    //     bytes32 takerSig = keccak256(abi.encodePacked(\r\n    //         '\\x19Ethereum Signed Message:\\n32', tradeHash));\r\n\r\n    //     /* Retrieve authorized taker. */\r\n    //     address authorizedTaker = _ecRecovery().recover(\r\n    //         takerSig, _takerSig);\r\n\r\n    //     /* Validate taker. */\r\n    //     if (authorizedTaker != _taker) {\r\n    //         revert('Oops! Taker signature is NOT valid.');\r\n    //     }\r\n\r\n    //     /* Add volume to reduce remaining order availability. */\r\n    //     _orderFills[_maker][orderId] =\r\n    //         _orderFills[_maker][orderId].add(_amount);\r\n\r\n    //     /* Request atomic trade. */\r\n    //     _trade(\r\n    //         _maker,\r\n    //         _taker,\r\n    //         _tokenGet,\r\n    //         _amountRequest,\r\n    //         _tokenGive,\r\n    //         _amountGive,\r\n    //         _amount\r\n    //     );\r\n\r\n    //     /* Return success. */\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * (Off-chain <> Off-chain) Trade\r\n     *\r\n     * Utilizes a CENTRALIZED order book to manage off-chain trades.\r\n     *\r\n     * 1. Maker provides a signed `orderId` along with desired\r\n     *    order/trade parameters.\r\n     *\r\n     * 2. Taker provides a signed `tradeId` along with desired\r\n     *    trade/fulfillment parameters.\r\n     */\r\n    // function trade(\r\n    //     address _maker,\r\n    //     bytes _makerSig,\r\n    //     address _taker,\r\n    //     bytes _takerSig,\r\n    //     address _staekholder,\r\n    //     uint _staek,\r\n    //     address _tokenRequest,\r\n    //     uint _amountRequest,\r\n    //     address _tokenOffer,\r\n    //     uint _amountOffer,\r\n    //     uint _paymentAmount,\r\n    //     uint _expires,\r\n    //     uint _nonce\r\n    // ) external returns (bool success) {\r\n    //     /* Calculate order id. */\r\n    //     bytes32 orderId = keccak256(abi.encodePacked(\r\n    //         address(this),\r\n    //         _tokenGet,\r\n    //         _amountRequest,\r\n    //         _tokenGive,\r\n    //         _amountGive,\r\n    //         _expires,\r\n    //         _nonce\r\n    //     ));\r\n\r\n    //     /* Validate maker. */\r\n    //     bytes32 makerSig = keccak256(abi.encodePacked(\r\n    //         '\\x19Ethereum Signed Message:\\n32', orderId));\r\n\r\n    //     /* Retrieve authorized maker. */\r\n    //     address authorizedMaker = _ecRecovery().recover(\r\n    //         makerSig, _makerSig);\r\n\r\n    //     /* Validate maker. */\r\n    //     if (authorizedMaker != _maker) {\r\n    //         revert('Oops! Maker signature is NOT valid.');\r\n    //     }\r\n\r\n    //     /* Calculate trade hash. */\r\n    //     bytes32 tradeHash = keccak256(abi.encodePacked(\r\n    //         _maker,\r\n    //         orderId,\r\n    //         _staekholder,\r\n    //         _staek,\r\n    //         _paymentAmount\r\n    //     ));\r\n\r\n    //     /* Validate maker. */\r\n    //     bytes32 takerSig = keccak256(abi.encodePacked(\r\n    //         '\\x19Ethereum Signed Message:\\n32', tradeHash));\r\n\r\n    //     /* Retrieve authorized taker. */\r\n    //     address authorizedTaker = _ecRecovery().recover(\r\n    //         takerSig, _takerSig);\r\n\r\n    //     /* Validate taker. */\r\n    //     if (authorizedTaker != _taker) {\r\n    //         revert('Oops! Taker signature is NOT valid.');\r\n    //     }\r\n\r\n    //     /* Request atomic trade. */\r\n    //     _trade(\r\n    //         _maker,\r\n    //         _makerSig,\r\n    //         _taker,\r\n    //         _takerSig,\r\n    //         _staekholder,\r\n    //         _staek,\r\n    //         _tokenGet,\r\n    //         _amountRequest,\r\n    //         _tokenGive,\r\n    //         _amountGive,\r\n    //         _paymentAmount,\r\n    //         _expires,\r\n    //         _nonce\r\n    //     );\r\n\r\n    //     /* Return success. */\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * (Off-chain <> Off-chain) RELAYED | MARKET Trade\r\n     *\r\n     * Allows a taker to fill an order at the BEST market price.\r\n     *\r\n     * NOTE: This will support the ability to execute MULTIPLE\r\n     *       trades (on a taker's behalf), while insuring that\r\n     *       the authorized staekholder is limited in the volume\r\n     *       they can trade (on a taker's behalf).\r\n     */\r\n    // function trade(\r\n    //     address _maker,\r\n    //     bytes _makerSig,\r\n    //     address _taker,\r\n    //     bytes _takerSig,\r\n    //     address _staekholder,\r\n    //     uint _staek,\r\n    //     address _tokenRequest,\r\n    //     uint _amountRequest,\r\n    //     address _tokenOffer,\r\n    //     uint _amountOffer,\r\n    //     uint _paymentAmount,\r\n    //     uint _expires,\r\n    //     uint _nonce\r\n    // ) external returns (bool success) {\r\n    //     /* Validate boost fee and pay (if necessary). */\r\n    //     // if (_staekholder != 0x0 && _staek > 0) {\r\n    //     //     _addStaek(_taker, _staekholder, _staek);\r\n    //     // }\r\n\r\n    //     /* Request OFF-CHAIN <> OFF-CHAIN trade. */\r\n    //     trade(\r\n    //         _maker,\r\n    //         _makerSig,\r\n    //         _taker,\r\n    //         _takerSig,\r\n    //         _staekholder,\r\n    //         _staek,\r\n    //         _tokenGet,\r\n    //         _amountRequest,\r\n    //         _tokenGive,\r\n    //         _amountGive,\r\n    //         _paymentAmount,\r\n    //         _expires,\r\n    //         _nonce\r\n    //     );\r\n\r\n    //     /* Return success. */\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * (Atomic) Trade\r\n     *\r\n     * Executes an atomic trade between the maker and taker.\r\n     *\r\n     * 1. We TEMPORARILY transfer a pre-authorized `amountGive` quantity\r\n     *    of the MAKER's tokens here from their ZeroCache.\r\n     * \r\n     * 2. We calculate `_paymentAmount` of the TAKER's trade request, \r\n     *    immediately return the unused balance (if any) back to the MAKER.\r\n     * \r\n     * 3. We then transfer the reserved balance to the TAKER, \r\n     *    completing the transaction.\r\n     *\r\n     * NOTE: Due to restrictions in ZeroCache \"signature-based\" design security; \r\n     *       it is recommended that a MAKER preserve 2x their `amountGive` within\r\n     *       ZeroCache, to guarantee the ability to fill the order's entire volume.\r\n     */\r\n    function _trade(\r\n        bytes32 _tradeId\r\n    ) private returns (bool success) {\r\n        /* Set order id. */\r\n        bytes32 orderId = _trades[_tradeId].orderId;\r\n    \r\n        /* Validate permission to partial fill. */\r\n        _canPartialFill(\r\n            _orders[orderId].canPartialFill, \r\n            _orders[orderId].amountOffer, \r\n            _trades[_tradeId].paymentAmount\r\n        );\r\n\r\n        /* Calculate the amount recieved by TAKER. */\r\n        uint amountTaken = _orders[orderId].amountOffer\r\n            .mul(_trades[_tradeId].paymentAmount)\r\n            .div(_orders[orderId].amountRequest);\r\n\r\n        /* Calculate new fill amount. */\r\n        uint newFillAmount = _orders[orderId].amountFilled\r\n            .add(_trades[_tradeId].paymentAmount);\r\n\r\n        /* Set amount filled. */\r\n        _setAmountFilled(orderId, newFillAmount);\r\n\r\n        /* Transer tokens from MAKER to ZeroDelta. */\r\n        // NOTE: This is a PRE-AUTHORIZED transfer request using `makerSig`.\r\n        _transferFromMaker(orderId);\r\n\r\n        /* Transfer unneeded balance back to MAKER. */\r\n        _transferChangeToMaker(\r\n            orderId, \r\n            amountTaken\r\n        );\r\n\r\n        /* Transer (payment) tokens from TAKER to MAKER. */\r\n        _transferFromTakerToMaker(\r\n            _tradeId,\r\n            _trades[_tradeId].paymentAmount\r\n        );\r\n\r\n        /* Transfer tokens from ZeroDelta to TAKER. */\r\n        // WARNING This MUST be the LAST transfer to safeguard against\r\n        // a re-entry attack.\r\n        // NOTE: This reduces ZeroDelta's token holdings back to ZERO.\r\n        _transferToTaker(\r\n            _tradeId, \r\n            amountTaken\r\n        );\r\n\r\n        /* Broadcast event. */\r\n        emit TradeComplete(\r\n            _calcMarketId(\r\n                _orders[orderId].tokenRequest, \r\n                _orders[orderId].tokenOffer\r\n            ),\r\n            _tradeId\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     *\r\n     * GETTERS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Get Order\r\n     *\r\n     * Retrieves the FULL details of an order.\r\n     */\r\n    function getOrder(\r\n        bytes32 _orderId\r\n    ) public view returns (\r\n        address maker,\r\n        bytes makerSig,\r\n        address tokenRequest,\r\n        uint amountRequest,\r\n        address tokenOffer,\r\n        uint amountOffer,\r\n        uint expires,\r\n        uint nonce,\r\n        bool canPartialFill,\r\n        uint amountFilled\r\n    ) {\r\n        /* Retrieve maker. */\r\n        maker = _orders[_orderId].maker;\r\n\r\n        /* Retrieve maker signature. */\r\n        makerSig = _orders[_orderId].makerSig;\r\n\r\n        /* Retrieve token requested. */\r\n        tokenRequest = _orders[_orderId].tokenRequest;\r\n\r\n        /* Retrieve amount requested. */\r\n        amountRequest = _orders[_orderId].amountRequest;\r\n\r\n        /* Retrieve token offered. */\r\n        tokenOffer = _orders[_orderId].tokenOffer;\r\n\r\n        /* Retrieve amount offered. */\r\n        amountOffer = _orders[_orderId].amountOffer;\r\n\r\n        /* Retrieve expiration. */\r\n        expires = _orders[_orderId].expires;\r\n\r\n        /* Retrieve nonce. */\r\n        nonce = _orders[_orderId].nonce;\r\n\r\n        /* Retrieve partial fill flag. */\r\n        canPartialFill = _orders[_orderId].canPartialFill;\r\n\r\n        /* Retrieve amount (has been) filled. */\r\n        // NOTE: This is of `tokenRequest`.\r\n        amountFilled = _orders[_orderId].amountFilled;\r\n    }\r\n\r\n    /**\r\n     * Get Trade\r\n     *\r\n     * Retrieves the FULL details of a successful trade.\r\n     */\r\n    function getTrade(\r\n        bytes32 _tradeId\r\n    ) public view returns (\r\n        bytes32 orderId,\r\n        address taker,\r\n        uint paymentAmount,\r\n        address staekholder,\r\n        uint staek\r\n    ) {\r\n        /* Retrieve order id. */\r\n        orderId = _trades[_tradeId].orderId;\r\n\r\n        /* Retrieve taker. */\r\n        taker = _trades[_tradeId].taker;\r\n\r\n        /* Retrieve payment amount. */\r\n        paymentAmount = _trades[_tradeId].paymentAmount;\r\n\r\n        /* Retrieve staekholder. */\r\n        staekholder = _trades[_tradeId].staekholder;\r\n\r\n        /* Retrieve staek. */\r\n        staek = _trades[_tradeId].staek;\r\n    }\r\n\r\n    /**\r\n     * Get Available (Order) Volume\r\n     */\r\n    function getAvailableVolume(\r\n        bytes32 _orderId\r\n    ) public view returns (uint availableVolume) {\r\n        /* Validate expiration. */\r\n        if (block.number > _orders[_orderId].expires) {\r\n            availableVolume = 0;\r\n        } else {\r\n            /* Retrieve maker balance from ZeroCache. */\r\n            uint makerBalance = _zeroCache()\r\n                .balanceOf(\r\n                    _orders[_orderId].tokenOffer, \r\n                    _orders[_orderId].maker\r\n                );\r\n\r\n            /* Calculate order (trade) balance. */\r\n            uint orderBalance = _orders[_orderId].amountRequest\r\n                .sub(_orders[_orderId].amountFilled);\r\n\r\n            /* Calculate maker (trade) balance. */\r\n            uint tradeBalance = makerBalance\r\n                .mul(_orders[_orderId].amountRequest)\r\n                .div(_orders[_orderId].amountOffer);\r\n\r\n            /* Validate available volume. */\r\n            if (orderBalance < tradeBalance) {\r\n                availableVolume = orderBalance;\r\n            } else {\r\n                availableVolume = tradeBalance;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n\r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n\r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     *\r\n     * SETTERS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Set Successor\r\n     *\r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set (Volume) Amount Filled\r\n     */\r\n    function _setAmountFilled(\r\n        bytes32 _orderId,\r\n        uint _amountFilled\r\n    ) private returns (bool success) {\r\n        /* Set fill amount. */\r\n        _orders[_orderId].amountFilled = _amountFilled;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     *\r\n     * INTERFACES\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     *\r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     *\r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n\r\n        // TODO Add additional interfaces here.\r\n\r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ECRecovery Interface\r\n     */\r\n    function _ecRecovery() private view returns (\r\n        ECRecovery ecrecovery\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.ecrecovery');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        ecrecovery = ECRecovery(aname);\r\n    }\r\n\r\n    /**\r\n     * ZeroCache Interface\r\n     *\r\n     * Retrieves the current ZeroCache interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroCache() private view returns (\r\n        ZeroCacheInterface zeroCache\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.zerocache');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        zeroCache = ZeroCacheInterface(aname);\r\n    }\r\n\r\n    /**\r\n     * MakerDAO DAI Interface\r\n     * \r\n     * Retrieves the current DAI interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _dai() private view returns (\r\n        ERC20Interface dai\r\n    ) {\r\n        /* Initialize hash. */\r\n        // NOTE: ERC tokens are case-sensitive.\r\n        bytes32 hash = keccak256('aname.DAI');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        dai = ERC20Interface(aname);\r\n    }\r\n\r\n    /**\r\n     * ZeroGold Interface\r\n     *\r\n     * Retrieves the current ZeroGold interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroGold() private view returns (\r\n        ERC20Interface zeroGold\r\n    ) {\r\n        /* Initialize hash. */\r\n        // NOTE: ERC tokens are case-sensitive.\r\n        bytes32 hash = keccak256('aname.0GOLD');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        zeroGold = ERC20Interface(aname);\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     *\r\n     * UTILITIES\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Calculate Market Identificaiton\r\n     *\r\n     * \"Officially\" Supported ZeroGold Markets\r\n     * ---------------------------------------\r\n     *\r\n     * 1. 0GOLD / 0xBTC     ZeroGold / 0xBitcoin Token\r\n     * 2. 0GOLD / DAI       ZeroGold / MakerDAO Dai\r\n     * 3. 0GOLD / WBTC      ZeroGold / Wrapped Bitcoin\r\n     * 4. 0GOLD / WETH      ZeroGold / Wrapped Ethereum\r\n     * \r\n     * \"Officially\" Supported MakerDAO Dai Markets\r\n     * -------------------------------------------\r\n     *\r\n     * 1. 0GOLD / DAI               ZeroGold / MakerDAO Dai\r\n     * 2. 0xBTC / DAI        0xBitcoin Token / MakerDAO Dai\r\n     * 3.  WBTC / DAI        Wrapped Bitcoin / MakerDAO Dai\r\n     * 4.  WETH / DAI       Wrapped Ethereum / MakerDAO Dai\r\n     *\r\n     * NOTE: ZeroGold will serve as the \"official\" base token.\r\n     *       MakerDAO Dai will serve as the \"official\" quote token.\r\n     */\r\n    function _calcMarketId(\r\n        address _tokenRequest,\r\n        address _tokenOffer\r\n    ) private view returns (bytes32 market) {\r\n        /* Set DAI address. */\r\n        address daiAddress = _dai();\r\n\r\n        /* Set ZeroGold address. */\r\n        address zgAddress = _zeroGold();\r\n\r\n        /* Initialize base token. */\r\n        address baseToken = 0x0;\r\n\r\n        /* Initailize quote token. */\r\n        address quoteToken = 0x0;\r\n\r\n        /* Set ZeroGold as base token. */\r\n        if (_tokenRequest == zgAddress || _tokenOffer == zgAddress) {\r\n            baseToken = zgAddress;\r\n        }\r\n\r\n        /* Set ZeroGold as base token. */\r\n        if (_tokenRequest == daiAddress || _tokenOffer == daiAddress) {\r\n            quoteToken = daiAddress;\r\n        }\r\n\r\n        /* Validate market pair. */\r\n        // NOTE: Either ZeroGold OR Dai MUST be specified for a valid \r\n        //       market to be available.\r\n        if (baseToken == 0x0 && quoteToken == 0x0) {\r\n            revert('Oops! That market is NOT currently supported.');\r\n        }\r\n\r\n        /* Validate/set quote token. */\r\n        if (quoteToken == 0x0) {\r\n            if (baseToken == _tokenRequest) {\r\n                quoteToken = _tokenOffer;\r\n            } else {\r\n                quoteToken = _tokenRequest;\r\n            }\r\n        }\r\n        \r\n        /* Validate/set base token. */\r\n        if (baseToken == 0x0) {\r\n            if (quoteToken == _tokenRequest) {\r\n                baseToken = _tokenOffer;\r\n            } else {\r\n                baseToken = _tokenRequest;\r\n            }\r\n        }\r\n        \r\n        /* Calculate market id. */\r\n        market = keccak256(abi.encodePacked(\r\n            baseToken, quoteToken));\r\n    }\r\n\r\n    /**\r\n     * Calculate Transfer Hash\r\n     * \r\n     * Calculate the \"authorized\" transfer hash used by ZeroCache.\r\n     * \r\n     * NOTE: We utilize this primarily to help defeat stack depth issues.\r\n     */\r\n    function _calcTransferHash(\r\n        address _token,\r\n        uint _tokens,\r\n        address _staekholder,\r\n        uint _staek,\r\n        uint _expires,\r\n        uint _nonce\r\n    ) private view returns (bytes32 transferHash) {\r\n        /* Calculate transfer hash. */\r\n        transferHash = keccak256(abi.encodePacked(\r\n            address(_zeroCache()),\r\n            _token, \r\n            msg.sender,\r\n            address(this),\r\n            _tokens,\r\n            _staekholder,\r\n            _staek,\r\n            _expires,\r\n            _nonce\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Can Partial Fill?\r\n     */\r\n    function _canPartialFill(\r\n        bool _allowed,\r\n        uint _amountOffer,\r\n        uint _amountTaken\r\n    ) private pure returns (bool success) {\r\n        if (!_allowed && _amountOffer != _amountTaken) {\r\n            revert('Oops! You CANNOT partial fill this order.');\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Request Hash Authorized Signature\r\n     * \r\n     * Validates ALL signature requests by:\r\n     *     1. Uses ECRecovery to validate the signature.\r\n     *     2. Verify expiration against the current block number.\r\n     */\r\n    function _requestHasAuthSig(\r\n        address _from,\r\n        bytes32 _authHash,\r\n        uint _expires,\r\n        bytes _signature\r\n    ) private view returns (bool success) {\r\n        /* Calculate signature hash. */\r\n        bytes32 sigHash = keccak256(abi.encodePacked(\r\n            '\\x19Ethereum Signed Message:\\n32', _authHash));\r\n\r\n        /* Validate the expiration time. */\r\n        if (block.number > _expires) {\r\n            return false;\r\n        }\r\n        \r\n        /* Retrieve the authorized account (address). */\r\n        address authorizedAccount = \r\n            _ecRecovery().recover(sigHash, _signature);\r\n\r\n        /* Validate the signer matches owner of the tokens. */\r\n        if (_from != authorizedAccount) {\r\n            return false;\r\n        }\r\n\r\n        /* Return success. */    \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer Change (Back) to Maker\r\n     * \r\n     * NOTE: We manage change because we require the MAKER to \r\n     *       keep at least 2x `amountOffer` tokens available for\r\n     *       `cacanPartialFill` requests.\r\n     */\r\n    function _transferChangeToMaker(\r\n        bytes32 _orderId,\r\n        uint _amountTaken\r\n    ) private returns (bool success) {\r\n        /* Validate change. */\r\n        if (_orders[_orderId].amountOffer > _amountTaken) {\r\n            _zeroCache().transfer(\r\n                _orders[_orderId].maker,\r\n                _orders[_orderId].tokenOffer,\r\n                _orders[_orderId].amountOffer.sub(_amountTaken)\r\n            );\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer (Tokens) from Maker.\r\n     * \r\n     * NOTE: This executes the SIGNED transfer request, \r\n     *       by the MAKER that allows ZeroDelta to perfom an \r\n     *       atomic token swap.\r\n     * \r\n     *       *** THERE IS NO STAEKHOLDER SUPPORT FOR MAKERS ***\r\n     */\r\n    function _transferFromMaker(\r\n        bytes32 _orderId\r\n    ) private returns (bool success) {\r\n        /* Transer tokens from MAKER to ZeroDelta. */\r\n        // NOTE: This is a PRE-AUTHORIZED transfer request using `makerSig`.\r\n        _zeroCache().transfer(\r\n            _orders[_orderId].tokenOffer,\r\n            _orders[_orderId].maker,\r\n            address(this),\r\n            _orders[_orderId].amountOffer,\r\n            address(0x0),\r\n            uint(0),\r\n            _orders[_orderId].expires,\r\n            _orders[_orderId].nonce,\r\n            _orders[_orderId].makerSig\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Tranfer (Tokens) from Taker to Maker\r\n     * \r\n     * NOTE: This executes the SIGNED transfer request, \r\n     *       by the TAKER for the payment amount to MAKER.\r\n     */\r\n    function _transferFromTakerToMaker(\r\n        bytes32 _tradeId,\r\n        uint _paymentAmount\r\n    ) private returns (bool success) {\r\n        /* Set order id. */\r\n        bytes32 orderId = _trades[_tradeId].orderId;\r\n    \r\n        // WARNING Do this BEFORE TAKER transfer to safeguard against\r\n        // a re-entry attack.\r\n        // NOTE: This is a PRE-AUTHORIZED transfer request using `takerSig`,\r\n        //       while also allowing for a staekholder to expedite the transfer.\r\n        _zeroCache().transfer(\r\n            _orders[orderId].tokenRequest,\r\n            _trades[_tradeId].taker,\r\n            _orders[orderId].maker,\r\n            _paymentAmount,\r\n            _trades[_tradeId].staekholder,\r\n            _trades[_tradeId].staek,\r\n            _orders[orderId].expires,\r\n            _orders[orderId].nonce,\r\n            _trades[_tradeId].takerSig\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer (Tokens) to Taker\r\n     */\r\n    function _transferToTaker(\r\n        bytes32 _tradeId,\r\n        uint _amountTaken\r\n    ) private returns (bool success) {\r\n        /* Set order id. */\r\n        bytes32 orderId = _trades[_tradeId].orderId;\r\n    \r\n        /* Transfer tokens to taker. */\r\n        _zeroCache().transfer(\r\n            _trades[_tradeId].taker,\r\n            _orders[orderId].tokenOffer,\r\n            _amountTaken\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Convert Bytes to Bytes32\r\n     */\r\n    function _bytesToBytes32(\r\n        bytes _data,\r\n        uint _offset\r\n    ) private pure returns (bytes32 result) {\r\n        /* Loop through each byte. */\r\n        for (uint i = 0; i < 32; i++) {\r\n            /* Shift bytes onto result. */\r\n            result |= bytes32(_data[i + _offset] & 0xFF) >> (i * 8);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bytes-to-Address\r\n     *\r\n     * Converts bytes into type address.\r\n     */\r\n    function _bytesToAddress(\r\n        bytes _address\r\n    ) private pure returns (address) {\r\n        uint160 m = 0;\r\n        uint160 b = 0;\r\n\r\n        for (uint8 i = 0; i < 20; i++) {\r\n            m *= 256;\r\n            b = uint160(_address[i]);\r\n            m += (b);\r\n        }\r\n\r\n        return address(m);\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address _tokenAddress,\r\n        uint _tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_takerSig\",\"type\":\"bytes\"},{\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"}],\"name\":\"tradeSimulation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"makerSig\",\"type\":\"bytes\"},{\"name\":\"tokenRequest\",\"type\":\"address\"},{\"name\":\"amountRequest\",\"type\":\"uint256\"},{\"name\":\"tokenOffer\",\"type\":\"address\"},{\"name\":\"amountOffer\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"canPartialFill\",\"type\":\"bool\"},{\"name\":\"amountFilled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"bytes32\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"bytes32\"},{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"name\":\"staekholder\",\"type\":\"address\"},{\"name\":\"staek\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getAvailableVolume\",\"outputs\":[{\"name\":\"availableVolume\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_takerSig\",\"type\":\"bytes\"},{\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenRequest\",\"type\":\"address\"},{\"name\":\"_amountRequest\",\"type\":\"uint256\"},{\"name\":\"_tokenOffer\",\"type\":\"address\"},{\"name\":\"_amountOffer\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_makerSig\",\"type\":\"bytes\"},{\"name\":\"_canPartialFill\",\"type\":\"bool\"}],\"name\":\"createOrder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"bytes32\"}],\"name\":\"TradeComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZeroDelta","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://089e32b514cee83d9f87f6349ad272eb4eb12152a5163711b613acf46aea4f58"}]}