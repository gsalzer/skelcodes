{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract WhiteListed{\r\n    mapping(address => bool)whitelist;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract IziCoin is ERC20Interface, Owned, WhiteListed {\r\n        \r\n    using SafeMath for uint;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    uint _totalSupply;\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    \r\n    constructor () public {\r\n        symbol = \"IZI\";\r\n        name = \"IziCoin\";\r\n        decimals = 8;\r\n        _totalSupply = 24606905043426990;\r\n        balances[owner] = _totalSupply;\r\n        whitelist[owner] = true;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n    \r\n    //ERC20\r\n    function totalSupply() public view returns (uint){\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n        return allowed[tokenOwner][spender];        \r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success){\r\n        require(balances[msg.sender] >= tokens &&\r\n        tokens > 0 && \r\n        to != address(0x0) &&\r\n        whitelist[msg.sender] &&\r\n        whitelist[to]);\r\n        executeTransfer(msg.sender,to, tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        require(balances[msg.sender] >= tokens &&\r\n        whitelist[msg.sender] &&\r\n        whitelist[spender]);\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(balances[from] >= tokens &&\r\n        allowed[from][msg.sender] >= tokens &&\r\n        tokens > 0 && \r\n        to != address(0x0) &&\r\n        whitelist[msg.sender] &&\r\n        whitelist[to]);\r\n        executeTransfer(from, to, tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    //IziCoin\r\n    function executeTransfer(address from,address to, uint tokens) private{\r\n        uint previousBalances = balances[from] + balances[to];\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        assert((balances[from] + balances[to] == previousBalances) && (whitelist[from] && whitelist[to]));\r\n    }\r\n    \r\n    function executeTransferWithTax(address from,address to, uint tokens, uint taxFee) private{\r\n        uint previousBalances = balances[from] + balances[to];\r\n        uint taxedTokens = tokens.sub(taxFee);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(taxedTokens);\r\n        if(from != owner){\r\n           balances[owner] = balances[owner].add(taxFee); \r\n        }\r\n        emit Transfer(from, to, taxedTokens);\r\n        emit Transfer(from, owner, taxFee);\r\n        assert((balances[from] + balances[to] == previousBalances.sub(taxFee)) && (whitelist[from] && whitelist[to]));\r\n    }\r\n    \r\n    function mintIziCoins(uint tokenIncrease) public onlyOwner{\r\n        require(tokenIncrease > 0);\r\n        uint oldTotalSupply = _totalSupply;\r\n        _totalSupply = _totalSupply.add(tokenIncrease);\r\n        balances[owner] = balances[owner].add(tokenIncrease);\r\n        assert(_totalSupply > oldTotalSupply);\r\n    }\r\n    \r\n    function sendBatchTransaction(address[] memory from, address[] memory to, uint[] memory tokens, uint[] memory taxFee)public onlyOwner{\r\n        for(uint i = 0; i < getCount(from); i++){\r\n            executeTransferWithTax(from[i],to[i],tokens[i],taxFee[i]);\r\n        }\r\n    }\r\n    \r\n    //Whitelist\r\n    function seeWhitelist(address whitelistUser) public view returns (bool){\r\n        return whitelist[whitelistUser] == true;\r\n    }\r\n    \r\n    function addBulkWhitelist(address[] memory whitelistUsers) public onlyOwner{\r\n        for(uint i = 0; i < getCount(whitelistUsers); i++){\r\n            whitelist[whitelistUsers[i]] = true;\r\n        }\r\n        return;\r\n    }\r\n    \r\n    function removeBulkWhitelist(address[] memory whitelistUsers) public onlyOwner{\r\n        for(uint i = 0; i < getCount(whitelistUsers); i++){\r\n            whitelist[whitelistUsers[i]] = false;\r\n        }\r\n        return;\r\n    }\r\n    \r\n    function getCount(address[] memory whitelistUsers) private pure returns(uint count) {\r\n        return whitelistUsers.length;\r\n    }\r\n    \r\n    //Fallback\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address[]\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"name\":\"taxFee\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"whitelistUser\",\"type\":\"address\"}],\"name\":\"seeWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistUsers\",\"type\":\"address[]\"}],\"name\":\"removeBulkWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistUsers\",\"type\":\"address[]\"}],\"name\":\"addBulkWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIncrease\",\"type\":\"uint256\"}],\"name\":\"mintIziCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IziCoin","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5cc13c13480a51ec7a010799987151c4de05ffc7ea1d6d058ad92784b36a00d0"}]}