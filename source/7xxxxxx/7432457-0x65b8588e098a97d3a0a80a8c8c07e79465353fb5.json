{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.6;\r\n/**\r\n * TOKEN Contract\r\n * ERC-20 Token Standard Compliant\r\n */\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 Token minimal interface\r\n */\r\ninterface extToken {\r\n\r\n    function balanceOf(address _owner) external returns(uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns(bool success);\r\n\r\n}\r\n\r\n/**\r\n * Token contract declaration\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Admin parameters\r\n * @dev Define administration parameters for this contract\r\n */\r\ncontract admined { //This token contract is administered\r\n    //The master address of the contract is called owner since etherscan\r\n    //uses this name to recognize the owner of the contract\r\n    address public owner; //Master address is public\r\n    mapping(address => uint256) public level; //Admin level\r\n    bool public lockSupply; //Burn Lock flag\r\n    bool public lockTransfer; //Transfer Lock flag\r\n    address public allowedAddress; //An address that can override lock condition\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     * define initial administrator\r\n     */\r\n    constructor() public {\r\n        owner = 0xb4549c4CBbB5003beEb2b70098E6f5AD4CE4c2e6; //Set initial owner to contract creator\r\n        level[0xb4549c4CBbB5003beEb2b70098E6f5AD4CE4c2e6] = 2;\r\n        emit Owned(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set an allowed address\r\n     * @param _to The address to give privileges.\r\n     */\r\n    function setAllowedAddress(address _to) onlyAdmin(2) public {\r\n        allowedAddress = _to;\r\n        emit AllowedSet(_to);\r\n    }\r\n\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(msg.sender == owner || level[msg.sender] >= _level);\r\n        _;\r\n    }\r\n\r\n    modifier supplyLock() { //A modifier to lock burn transactions\r\n        require(lockSupply == false);\r\n        _;\r\n    }\r\n\r\n    modifier transferLock() { //A modifier to lock transactions\r\n        require(lockTransfer == false || allowedAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set new owner address\r\n     * @param _newOwner The address to transfer administration to\r\n     */\r\n    function transferOwnership(address _newOwner) onlyAdmin(2) public { //owner can be transfered\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        level[_newOwner] = 2;\r\n        emit TransferAdminship(owner);\r\n    }\r\n\r\n    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {\r\n        level[_target] = _level;\r\n        emit AdminLevelSet(_target, _level);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set burn locks\r\n     * @param _set boolean flag (true | false)\r\n     */\r\n    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply\r\n        lockSupply = _set;\r\n        emit SetSupplyLock(_set);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set global transfer lock\r\n     * @param _set boolean flag (true | false)\r\n     */\r\n    function setTransferLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on transfers\r\n        lockTransfer = _set;\r\n        emit SetTransferLock(_set);\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event AllowedSet(address _to);\r\n    event SetSupplyLock(bool _set);\r\n    event SetTransferLock(bool _set);\r\n    event TransferAdminship(address newAdminister);\r\n    event Owned(address administer);\r\n    event AdminLevelSet(address _target, uint8 _level);\r\n\r\n}\r\n\r\n/**\r\n * @title Token definition\r\n * @dev Define token paramters including ERC20 ones\r\n */\r\ncontract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\r\n    using SafeMath\r\n    for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances; //A mapping of all balances per address\r\n    mapping(address => mapping(address => uint256)) allowed; //A mapping of all allowances\r\n    mapping(address => bool) frozen; //A mapping of frozen accounts\r\n\r\n    /**\r\n     * @dev Get the balance of an specified address.\r\n     * @param _owner The address to be query.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256 value) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token to a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) transferLock public returns(bool success) {\r\n        require(frozen[msg.sender] == false);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token from an address to another specified address using allowance\r\n     * @param _from The address where token comes.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns(bool success) {\r\n        require(frozen[_from] == false);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Assign allowance to an specified address to use the owner balance\r\n     * @param _spender The address to be allowed to spend.\r\n     * @param _value The amount to be allowed.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the allowance of an specified address to use another address balance.\r\n     * @param _owner The address of the owner of the tokens.\r\n     * @param _spender The address of the allowed spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Burn token of an specified address.\r\n     * @param _burnedAmount amount to burn.\r\n     */\r\n    function burnToken(uint256 _burnedAmount) onlyAdmin(2) supplyLock public {\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        emit Burned(msg.sender, _burnedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Frozen account.\r\n     * @param _target The address to being frozen.\r\n     * @param _flag The status of the frozen\r\n     */\r\n    function setFrozen(address _target, bool _flag) onlyAdmin(2) public {\r\n        frozen[_target] = _flag;\r\n        emit FrozenStatus(_target, _flag);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Log Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n    event FrozenStatus(address _target, bool _flag);\r\n}\r\n\r\n/**\r\n * @title Asset\r\n * @dev Initial supply creation\r\n */\r\ncontract Asset is ERC20Token {\r\n    string public name = 'ORIGIN Foundation Token';\r\n    uint8 public decimals = 18;\r\n    string public symbol = 'ORIGIN';\r\n    string public version = '1';\r\n\r\n    constructor() public {\r\n        totalSupply = 100000000000 * (10 ** uint256(decimals)); //initial token creation\r\n        balances[0xb4549c4CBbB5003beEb2b70098E6f5AD4CE4c2e6] = totalSupply;\r\n        emit Transfer(address(0), 0xb4549c4CBbB5003beEb2b70098E6f5AD4CE4c2e6, balances[0xb4549c4CBbB5003beEb2b70098E6f5AD4CE4c2e6]);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to claim ANY token stuck on contract accidentally\r\n     * In case of claim of stuck tokens please contact contract owners\r\n     */\r\n    function claimExtTokens(extToken _address, address _to) onlyAdmin(2) public {\r\n        require(_to != address(0));\r\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\r\n        _address.transfer(_to, remainder); //Transfer tokens to creator\r\n    }\r\n\r\n    /**\r\n     *@dev Function to handle callback calls\r\n     */\r\n    function () external {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setAdminLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimExtTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setSupplyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"FrozenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetSupplyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Owned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminLevelSet\",\"type\":\"event\"}]","ContractName":"Asset","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1be658b8a6ad100467e43e4bea529452a94a74eb7a6fe336db7c841eabc8943b"}]}