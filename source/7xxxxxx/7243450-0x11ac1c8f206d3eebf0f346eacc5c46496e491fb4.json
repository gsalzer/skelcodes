{"status":"1","message":"OK","result":[{"SourceCode":"/*! payment_processor.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\r\n\r\npragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) return 0;\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"NaN\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0, \"NaN\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a, \"NaN\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"NaN\");\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0, \"NaN\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PaymentProcessor is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public commission = 10;\r\n    address public recepient = 0x0000000000000000000000000000000000000000;      // при деплое надо указать получателя\r\n    uint public min_payment = 0.001 ether;\r\n\r\n    mapping(address => uint) public buyers;\r\n\r\n    event NewCommission(uint previousCommission, uint newCommission);\r\n    event NewRecepient(address previousRecepient, address newRecepient);\r\n    event NewMinPayment(uint previousMinPayment, uint newMinPayment);\r\n    event Payment(address indexed submiter, address indexed recepient, address indexed middleman, uint amount, uint commission);\r\n\r\n    function() payable public {\r\n        require(msg.value >= min_payment, \"Too small amount\");\r\n\r\n        address middleman = bytesToAddress(msg.data);\r\n\r\n        require(middleman != address(0), \"Zero address middleman\");\r\n        require(middleman == recepient || buyers[middleman] > 0, \"The mediator did not make purchases\");\r\n\r\n        uint com = msg.value.mul(commission).div(100);\r\n        uint value = msg.value.sub(com);\r\n\r\n        recepient.transfer(value);\r\n        middleman.transfer(com);\r\n\r\n        buyers[msg.sender] = buyers[msg.sender].add(msg.value);\r\n\r\n        emit Payment(msg.sender, recepient, middleman, value, com);\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) pure private returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function setCommission(uint new_commission) onlyOwner public {\r\n        emit NewCommission(commission, new_commission);\r\n\r\n        commission = new_commission;\r\n    }\r\n\r\n    function setRecepient(address new_recepient) onlyOwner public {\r\n        require(new_recepient != address(0), \"Zero address\");\r\n\r\n        emit NewRecepient(recepient, new_recepient);\r\n\r\n        recepient = new_recepient;\r\n    }\r\n\r\n    function setMinPayment(uint new_min_payment) onlyOwner public {\r\n        emit NewMinPayment(min_payment, new_min_payment);\r\n\r\n        min_payment = new_min_payment;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"new_recepient\",\"type\":\"address\"}],\"name\":\"setRecepient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_min_payment\",\"type\":\"uint256\"}],\"name\":\"setMinPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recepient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCommission\",\"type\":\"uint256\"}],\"name\":\"NewCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRecepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRecepient\",\"type\":\"address\"}],\"name\":\"NewRecepient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMinPayment\",\"type\":\"uint256\"}],\"name\":\"NewMinPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"submiter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"middleman\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PaymentProcessor","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ecf96a3736214a65eaea90037dfdac74e52e566b22713f696f10e27b7d0db9ce"}]}