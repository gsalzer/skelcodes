{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\ninterface CitizenInterface {\r\n    function addWinIncome(address _citizen, uint256 _value) external;\r\n    function getRef(address _address) external view returns(address);\r\n    function isCitizen(address _address) external view returns(bool);\r\n    \r\n    function addGameEthSpendWin(address _citizen, uint256 _value)  external;\r\n    function addGameEthSpendLose(address _citizen, uint256 _value) external;\r\n    function addGameTokenSpend(address _citizen, uint256 _value) external;\r\n}\r\n\r\ninterface DAAInterface {\r\n    function pushDividend() external payable;\r\n    function payOut(address _winner, uint256 _unit, uint256 _value, uint256 _valuewin) external;\r\n    function pushGameRefIncome(address _sender,uint256 _unit, uint256 _value) external payable;\r\n    function citizenUseDeposit(address _citizen, uint _value) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Helper {\r\n    using SafeMath for uint256;\r\n    \r\n        \r\n    function bytes32ToUint(bytes32 n) \r\n        public\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        return uint256(n);\r\n    }\r\n    \r\n    function stringToBytes32(string memory source) \r\n        public\r\n        pure\r\n        returns (bytes32 result) \r\n    {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    function stringToUint(string memory source) \r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return bytes32ToUint(stringToBytes32(source));\r\n    }\r\n    \r\n    function validUsername(string _username)\r\n        public\r\n        pure\r\n        returns(bool)\r\n    {\r\n        uint256 len = bytes(_username).length;\r\n        // Im Raum [4, 18]\r\n        if ((len < 4) || (len > 18)) return false;\r\n        // Letzte Char != ' '\r\n        if (bytes(_username)[len-1] == 32) return false;\r\n        // Erste Char != '0'\r\n        return uint256(bytes(_username)[0]) != 48;\r\n    }   \r\n    \r\n    function getRandom(uint256 _seed, uint256 _range)\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        if (_range == 0) return _seed;\r\n        return (_seed % _range);\r\n    }\r\n\r\n}\r\n\r\ncontract DiceGame {\r\n    using SafeMath for uint256;\r\n    \r\n    modifier registered(){\r\n        require(citizenContract.isCitizen(msg.sender), \"must be a citizen\");\r\n        _;\r\n    }\r\n    \r\n     modifier onlyAdmin() {\r\n        require(msg.sender == devTeam1, \"admin required\");\r\n        _;\r\n    }\r\n    \r\n    event BetAGame(\r\n        uint256 totalPayout,\r\n        uint256 histoyLen,\r\n        address indexed player,\r\n        uint256 prediction,\r\n        bool prediction_type,\r\n        uint256 result,\r\n        bool isHighRoller,\r\n        bool isRareWins,\r\n        bool isWin,\r\n        uint256 amount,\r\n        uint256 payout,\r\n        uint256 unit,\r\n        uint256 creationDate\r\n    );\r\n    \r\n    uint8 public decimals = 10;\r\n    uint256 public unitRate;\r\n    \r\n    uint256 constant public MULTIPLIES = 985;\r\n    uint256 public HIGHROLLER = 8 ether;\r\n    uint256 public HIGHROLLERTOKEN = 8;\r\n    uint256 public MIN=0.006 ether;\r\n    uint256 public MAX=10 ether;\r\n    uint256 public MIN_TOKEN=1;\r\n    uint256 public MAX_TOKEN=10;\r\n    address devTeam1;\r\n    uint256 privateKey;\r\n    \r\n    struct History{\r\n        address player;\r\n        uint256 prediction; \r\n        bool prediction_type;\r\n        uint256 result;\r\n        bool isHighRoller;\r\n        bool isRareWins;\r\n        bool isWin;\r\n        uint256 amount;\r\n        uint256 payout;\r\n        uint256 unit;\r\n        uint256 creationDate;\r\n    }\r\n    \r\n    History[] public gameHistory;\r\n    mapping(address => History[]) public myHistory;\r\n    History[] public isHighRollerHistory;\r\n    History[] public isRareWinsHistory;\r\n    uint256 public totalPayout;\r\n    \r\n    mapping(address=>uint256) public citizenSpendEth;\r\n    mapping(address=>uint256) public citizenSpendToken;\r\n    mapping(address=>uint256) public citizenSeed;\r\n    \r\n    address[11] public mostTotalSpender;\r\n    mapping (address => uint256) public mostTotalSpenderId;\r\n    \r\n    CitizenInterface public citizenContract;\r\n    DAAInterface public DAAContract;\r\n    \r\n    constructor (address[3] _contract, string _key)\r\n        public\r\n    {\r\n        unitRate = 10 ** uint256(decimals);\r\n        HIGHROLLERTOKEN = HIGHROLLERTOKEN.mul(unitRate);\r\n        MIN_TOKEN = MIN_TOKEN.mul(unitRate);\r\n        MAX_TOKEN = MAX_TOKEN.mul(unitRate);\r\n        \r\n        citizenContract = CitizenInterface(_contract[1]);\r\n        DAAContract = DAAInterface(_contract[0]);\r\n        devTeam1 = _contract[2];\r\n        privateKey = Helper.stringToUint(_key);\r\n    }\r\n    \r\n    function setSeed(string _key) public registered() {\r\n        citizenSeed[msg.sender] =  Helper.stringToUint(_key);\r\n    }\r\n    \r\n    function getMyHistoryLength(address _sender) public view returns(uint256){\r\n        return myHistory[_sender].length;\r\n    }\r\n    \r\n    function getGameHistoryLength() public view returns(uint256){\r\n        return gameHistory.length;\r\n    }\r\n    \r\n    function getIsHighRollerHistoryLength() public view returns(uint256){\r\n        return isHighRollerHistory.length;\r\n    }\r\n    \r\n    function getIsRareWinsHistoryLength() public view returns(uint256){\r\n        return isRareWinsHistory.length;\r\n    }\r\n    \r\n    function sortMostSpend(address _citizen) public payable {\r\n        uint256 citizen_spender = citizenSpendEth[_citizen];\r\n        uint256 i=1;\r\n        while (i<11) {\r\n            if (mostTotalSpender[i]==0x0||(mostTotalSpender[i]!=0x0&&citizenSpendEth[mostTotalSpender[i]]<citizen_spender)){\r\n                if (mostTotalSpenderId[_citizen]!=0&&mostTotalSpenderId[_citizen]<i){\r\n                    break;\r\n                }\r\n                if (mostTotalSpenderId[_citizen]!=0){\r\n                    mostTotalSpender[mostTotalSpenderId[_citizen]]=0x0;\r\n                }\r\n                address temp1 = mostTotalSpender[i];\r\n                address temp2;\r\n                uint256 j=i+1;\r\n                while (j<11&&temp1!=0x0){\r\n                    temp2 = mostTotalSpender[j];\r\n                    mostTotalSpender[j]=temp1;\r\n                    mostTotalSpenderId[temp1]=j;\r\n                    temp1 = temp2;\r\n                    j++;\r\n                }\r\n                mostTotalSpender[i]=_citizen;\r\n                mostTotalSpenderId[_citizen]=i;\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    function addToHistory(address _sender,uint256 _prediction,bool _prediction_type, uint256 _result,bool _isWin, uint256 _amount, uint256 _payout, uint256 _unit) private returns(History){\r\n        History memory _history;\r\n        _history.player = _sender;\r\n        _history.prediction = _prediction;\r\n        _history.prediction_type = _prediction_type;\r\n        _history.result = _result;\r\n        _history.isWin = _isWin;\r\n        _history.amount = _amount;\r\n        _history.payout = _payout;\r\n        _history.unit = _unit;\r\n        _history.creationDate = now;\r\n        \r\n        uint256 tempRareWin;\r\n        if (_prediction_type){\r\n            tempRareWin = _prediction;\r\n        }else{\r\n            tempRareWin = 99-_prediction;\r\n        }\r\n        if (_isWin==true&&tempRareWin<10) _history.isRareWins = true;\r\n        if ((_unit==0&&_amount>HIGHROLLER)||(_unit==1&&_amount>HIGHROLLERTOKEN)) _history.isHighRoller = true;\r\n        \r\n        gameHistory.push(_history);\r\n        myHistory[_sender].push(_history);\r\n        if (_history.isHighRoller) isHighRollerHistory.push(_history);\r\n        if (_history.isHighRoller) isRareWinsHistory.push(_history);\r\n        emit BetAGame(totalPayout, gameHistory.length, _sender, _prediction, _prediction_type, _result, _history.isHighRoller, _history.isRareWins, _isWin, _amount, _payout, _unit, _history.creationDate);\r\n        return _history;\r\n    }\r\n    \r\n    function betByEth(bool _method,uint256 _prediction) public payable registered() {\r\n        History memory _history;\r\n        address _sender = msg.sender;\r\n        uint256 _value = msg.value;\r\n        require(_value>=MIN&&_value<=MAX);\r\n        \r\n        // _method = True is roll under\r\n        // _method = False is roll over\r\n        uint256 _seed = getSeed();\r\n        uint256 _winnumber = Helper.getRandom(_seed, 100);\r\n        uint256 _valueForRef = _value*15/1000;\r\n        uint256 _win_value;\r\n        if(_method){\r\n            require(_prediction>0&&_prediction<96);\r\n            citizenSpendEth[_sender] = _value.add(citizenSpendEth[_sender]);\r\n            DAAContract.pushDividend.value(_value)();\r\n            DAAContract.pushGameRefIncome(_sender,1,_valueForRef);\r\n            if (_winnumber<_prediction){\r\n                _win_value = _value.mul(MULTIPLIES).div(10).div(_prediction);\r\n                // citizenContract.addGametEthSpendWin(_sender,_value);\r\n                DAAContract.payOut(_sender,0,_win_value,_value);\r\n                totalPayout = totalPayout.add(_win_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,true,_value,_win_value,0);\r\n            } else {\r\n                citizenContract.addGameEthSpendLose(_sender,_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,false,_value,0,0);\r\n            }\r\n            \r\n        }else{\r\n            require(_prediction>3&&_prediction<99);\r\n            citizenSpendEth[_sender] = _value.add(citizenSpendEth[_sender]);\r\n            DAAContract.pushDividend.value(_value)();\r\n            DAAContract.pushGameRefIncome(_sender,1,_valueForRef);\r\n            if (_winnumber>_prediction){\r\n                _win_value = _value.mul(MULTIPLIES).div(10).div(99-_prediction);\r\n                // citizenContract.addGametEthSpendWin(_sender,_value);\r\n                DAAContract.payOut(_sender,0,_win_value,_value);\r\n                totalPayout = totalPayout.add(_win_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,true,_value,_win_value,0);\r\n            } else {\r\n                citizenContract.addGameEthSpendLose(_sender,_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,false,_value,0,0);\r\n            }\r\n        }\r\n        sortMostSpend(_sender);\r\n    } \r\n    \r\n    function betByToken(bool _method,uint256 _prediction, uint256 _value) public registered() {\r\n        History memory _history;\r\n        address _sender = msg.sender;\r\n        DAAContract.citizenUseDeposit(_sender, _value);\r\n        require(_value>=MIN_TOKEN&&_value<=MAX_TOKEN);\r\n        \r\n        // _method = True is roll under\r\n        // _method = False is roll over\r\n        uint256 _seed = getSeed();\r\n        uint256 _winnumber = Helper.getRandom(_seed, 100);\r\n        uint256 _valueForRef = _value*15/1000;\r\n        uint256 _win_value;\r\n        if(_method){\r\n            require(_prediction>0&&_prediction<96);\r\n            citizenSpendToken[_sender] = _value.add(citizenSpendToken[_sender]);\r\n            citizenContract.addGameTokenSpend(_sender,_value);\r\n            DAAContract.pushGameRefIncome(_sender,0,_valueForRef);\r\n            if (_winnumber<_prediction){\r\n                _win_value = _value.mul(MULTIPLIES).div(10).div(_prediction);\r\n                DAAContract.payOut(_sender,1,_win_value,_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,true,_value,_win_value,1);\r\n            } else {\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,false,_value,0,1);\r\n            }\r\n            \r\n        }else{\r\n            require(_prediction>3&&_prediction<99);\r\n            citizenSpendToken[_sender] = _value.add(citizenSpendToken[_sender]);\r\n            citizenContract.addGameTokenSpend(_sender,_value);\r\n            DAAContract.pushGameRefIncome(_sender,0,_valueForRef);\r\n            if (_winnumber>_prediction){\r\n                _win_value = _value.mul(MULTIPLIES).div(10).div(99-_prediction);\r\n                DAAContract.payOut(_sender,1,_win_value,_value);\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,true,_value,_win_value,1);\r\n            } else {\r\n                _history = addToHistory(_sender,_prediction,_method,_winnumber,false,_value,0,1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function updateHIGHROLLER(uint256 _value) onlyAdmin() public{\r\n        HIGHROLLER = _value;\r\n    }\r\n    \r\n    function updateHIGHROLLERTOKEN(uint256 _value) onlyAdmin() public{\r\n        HIGHROLLERTOKEN = _value;\r\n    }\r\n    \r\n    function updateMinEth(uint256 _value) onlyAdmin() public{\r\n        MIN = _value;\r\n    }\r\n    \r\n    function updateMaxEth(uint256 _value) onlyAdmin() public {\r\n        MAX = _value;\r\n    }\r\n    \r\n    function updateMinToken(uint256 _value) onlyAdmin() public{\r\n        MIN_TOKEN = _value;\r\n    }\r\n    \r\n    function updateMaxToken(uint256 _value) onlyAdmin() public{\r\n        MAX_TOKEN = _value;\r\n    }\r\n    \r\n    function getSeed()\r\n        public\r\n        view\r\n        returns (uint64)\r\n    {\r\n        if (citizenSeed[msg.sender]==0){\r\n            return uint64(keccak256(block.timestamp, keccak256(block.difficulty, msg.sender, privateKey)));\r\n        }\r\n        return uint64(keccak256(block.timestamp, keccak256(block.difficulty, msg.sender, citizenSeed[msg.sender])));\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getIsHighRollerHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsRareWinsHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAAContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"setSeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRareWinsHistory\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"prediction\",\"type\":\"uint256\"},{\"name\":\"prediction_type\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"isHighRoller\",\"type\":\"bool\"},{\"name\":\"isRareWins\",\"type\":\"bool\"},{\"name\":\"isWin\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"creationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getMyHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mostTotalSpenderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myHistory\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"prediction\",\"type\":\"uint256\"},{\"name\":\"prediction_type\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"isHighRoller\",\"type\":\"bool\"},{\"name\":\"isRareWins\",\"type\":\"bool\"},{\"name\":\"isWin\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"creationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizenSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isHighRollerHistory\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"prediction\",\"type\":\"uint256\"},{\"name\":\"prediction_type\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"isHighRoller\",\"type\":\"bool\"},{\"name\":\"isRareWins\",\"type\":\"bool\"},{\"name\":\"isWin\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"creationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizenSpendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateHIGHROLLERTOKEN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizenSpendEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_method\",\"type\":\"bool\"},{\"name\":\"_prediction\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"betByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGHROLLER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMaxToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGHROLLERTOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_method\",\"type\":\"bool\"},{\"name\":\"_prediction\",\"type\":\"uint256\"}],\"name\":\"betByEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMaxEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citizenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMinEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameHistory\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"prediction\",\"type\":\"uint256\"},{\"name\":\"prediction_type\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"isHighRoller\",\"type\":\"bool\"},{\"name\":\"isRareWins\",\"type\":\"bool\"},{\"name\":\"isWin\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"creationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMinToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mostTotalSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"}],\"name\":\"sortMostSpend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateHIGHROLLER\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contract\",\"type\":\"address[3]\"},{\"name\":\"_key\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"histoyLen\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prediction\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prediction_type\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isHighRoller\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isRareWins\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isWin\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creationDate\",\"type\":\"uint256\"}],\"name\":\"BetAGame\",\"type\":\"event\"}]","ContractName":"DiceGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f9b540d1104e46e22bde406f422cd152f205e523000000000000000000000000ace024458674fe19c02c15624e4afefad71b60b600000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab7850000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e49616d6675636b696e6763617265000000000000000000000000000000000000","Library":"Helper:8b0e2d5bb4fe1ec0c3ec2f3c4577b54fe90d7228","SwarmSource":"bzzr://3803af807e20962c6c97082bdcb12d1266b1b52c5eed72e1a37367ed1772b20d"}]}