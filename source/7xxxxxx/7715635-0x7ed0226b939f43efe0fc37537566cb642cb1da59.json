{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary IterableMap {\r\n    \r\n    struct IMap {\r\n        mapping(address => uint256) mapToData;\r\n        mapping(address => uint256) mapToIndex; // start with index 1\r\n        address[] indexes;\r\n    }\r\n    \r\n    function insert(IMap storage self, address _address, uint256 _value) internal returns (bool replaced) {\r\n      \r\n        require(_address != address(0));\r\n        \r\n        if(self.mapToIndex[_address] == 0){\r\n            \r\n            // add new\r\n            self.indexes.push(_address);\r\n            self.mapToIndex[_address] = self.indexes.length;\r\n            self.mapToData[_address] = _value;\r\n            return false;\r\n        }\r\n        \r\n        // replace\r\n        self.mapToData[_address] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function remove(IMap storage self, address _address) internal returns (bool success) {\r\n       \r\n        require(_address != address(0));\r\n        \r\n        // not existing\r\n        if(self.mapToIndex[_address] == 0){\r\n            return false;   \r\n        }\r\n        \r\n        uint256 deleteIndex = self.mapToIndex[_address];\r\n        if(deleteIndex <= 0 || deleteIndex > self.indexes.length){\r\n            return false;\r\n        }\r\n       \r\n         // if index to be deleted is not the last index, swap position.\r\n        if (deleteIndex < self.indexes.length) {\r\n            // swap \r\n            self.indexes[deleteIndex-1] = self.indexes[self.indexes.length-1];\r\n            self.mapToIndex[self.indexes[deleteIndex-1]] = deleteIndex;\r\n        }\r\n        self.indexes.length -= 1;\r\n        delete self.mapToData[_address];\r\n        delete self.mapToIndex[_address];\r\n       \r\n        return true;\r\n    }\r\n  \r\n    function contains(IMap storage self, address _address) internal view returns (bool exists) {\r\n        return self.mapToIndex[_address] > 0;\r\n    }\r\n      \r\n    function size(IMap storage self) internal view returns (uint256) {\r\n        return self.indexes.length;\r\n    }\r\n  \r\n    function get(IMap storage self, address _address) internal view returns (uint256) {\r\n        return self.mapToData[_address];\r\n    }\r\n\r\n    // start with index 0\r\n    function getKey(IMap storage self, uint256 _index) internal view returns (address) {\r\n        \r\n        if(_index < self.indexes.length){\r\n            return self.indexes[_index];\r\n        }\r\n        return address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ZmineVoteKeep is Ownable {\r\n  \r\n    // Use itmap for all functions on the struct\r\n    using IterableMap for IterableMap.IMap;\r\n    using SafeMath for uint256;\r\n    \r\n    // ERC20 basic token contract being held\r\n    IERC20 public token;\r\n  \r\n    // map address => vote\r\n    IterableMap.IMap voteRecordMap;\r\n    // map address => token available for reclaim\r\n    IterableMap.IMap reclaimTokenMap;\r\n    \r\n    // time to start vote period\r\n    uint256 public timestampStartVote;\r\n    // time to end vote period\r\n    uint256 public timestampEndVote;\r\n    // time to enable reclaim token process\r\n    uint256 public timestampReleaseToken;\r\n    \r\n    // cumulative count for total vote\r\n    uint256 _totalVote;\r\n    \r\n    constructor(IERC20 _token) public {\r\n\r\n        token = _token;\r\n        \r\n        // (Mainnet) May 22, 2019 GMT (epoch time 1558483200)\r\n        // (Kovan) from now\r\n        timestampStartVote = 1558483200; \r\n        \r\n        // (Mainnet) May 28, 2019 GMT (epoch time 1559001600)\r\n        // (Kovan) period for 10 years\r\n        timestampEndVote = 1559001600; \r\n        \r\n        // (Mainnet) May 30, 2019 GMT (epoch time 1559174400)\r\n        // (Kovan) from now\r\n        timestampReleaseToken = 1559174400; \r\n    }\r\n    \r\n    /**\r\n     * modifier\r\n     */\r\n     \r\n    // during the votable period?\r\n    modifier onlyVotable() {\r\n        require(isVotable());\r\n        _;\r\n    }\r\n    \r\n    // during the reclaimable period?\r\n    modifier onlyReclaimable() {\r\n        require(isReclaimable());\r\n        _;\r\n    }\r\n  \r\n    /**\r\n     * public methods\r\n     */\r\n     \r\n    function isVotable() public view returns (bool){\r\n        return (timestampStartVote <= block.timestamp && block.timestamp <= timestampEndVote);\r\n    }\r\n    \r\n    function isReclaimable() public view returns (bool){\r\n        return (block.timestamp >= timestampReleaseToken);\r\n    }\r\n    \r\n    function countVoteUser() public view returns (uint256){\r\n        return voteRecordMap.size();\r\n    }\r\n    \r\n    function countVoteScore() public view returns (uint256){\r\n        return _totalVote;\r\n    }\r\n    \r\n    function getVoteByAddress(address _address) public view returns (uint256){\r\n        return voteRecordMap.get(_address);\r\n    }\r\n    \r\n    // vote by transfer token into this contract as collateral\r\n    // This process require approval from sender, to allow contract transfer token on the sender behalf.\r\n    function voteKeep(uint256 amount) public onlyVotable {\r\n\r\n        require(token.balanceOf(msg.sender) >= amount);\r\n        \r\n        // transfer token on the sender behalf.\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        \r\n        // calculate cumulative vote\r\n        uint256 newAmount = voteRecordMap.get(msg.sender).add(amount);\r\n        \r\n        // save to map\r\n        reclaimTokenMap.insert(msg.sender, newAmount);\r\n        voteRecordMap.insert(msg.sender, newAmount);\r\n        \r\n        // cumulative count total vote\r\n        _totalVote = _totalVote.add(amount);\r\n    }\r\n    \r\n    // Take the token back to the sender after reclaimable period has come.\r\n    function reclaimToken() public onlyReclaimable {\r\n      \r\n        uint256 amount = reclaimTokenMap.get(msg.sender);\r\n        require(amount > 0);\r\n        require(token.balanceOf(address(this)) >= amount);\r\n          \r\n        // transfer token back to sender\r\n        token.transfer(msg.sender, amount);\r\n        \r\n        // remove from map\r\n        reclaimTokenMap.remove(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * admin methods\r\n     */\r\n     \r\n    function adminCountReclaimableUser() public view onlyOwner returns (uint256){\r\n        return reclaimTokenMap.size();\r\n    }\r\n    \r\n    function adminCheckReclaimableAddress(uint256 index) public view onlyOwner returns (address){\r\n        \r\n        require(index >= 0); \r\n        \r\n        if(reclaimTokenMap.size() > index){\r\n            return reclaimTokenMap.getKey(index);\r\n        }else{\r\n            return address(0);\r\n        }\r\n    }\r\n    \r\n    function adminCheckReclaimableToken(uint256 index) public view onlyOwner returns (uint256){\r\n    \r\n        require(index >= 0); \r\n    \r\n        if(reclaimTokenMap.size() > index){\r\n            return reclaimTokenMap.get(reclaimTokenMap.getKey(index));\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function adminCheckVoteAddress(uint256 index) public view onlyOwner returns (address){\r\n        \r\n        require(index >= 0); \r\n        \r\n        if(voteRecordMap.size() > index){\r\n            return voteRecordMap.getKey(index);\r\n        }else{\r\n            return address(0);\r\n        }\r\n    }\r\n    \r\n    function adminCheckVoteToken(uint256 index) public view onlyOwner returns (uint256){\r\n    \r\n        require(index >= 0); \r\n    \r\n        if(voteRecordMap.size() > index){\r\n            return voteRecordMap.get(voteRecordMap.getKey(index));\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    // perform reclaim token by admin \r\n    function adminReclaimToken(address _address) public onlyOwner {\r\n      \r\n        uint256 amount = reclaimTokenMap.get(_address);\r\n        require(amount > 0);\r\n        require(token.balanceOf(address(this)) >= amount);\r\n          \r\n        token.transfer(_address, amount);\r\n        \r\n        // remove from map\r\n        reclaimTokenMap.remove(_address);\r\n    }\r\n    \r\n    // Prevent deposit tokens by accident to a contract with the transfer function? \r\n    // The transaction will succeed but this will not be recognized by the contract.\r\n    // After reclaim process was ended, admin will able to transfer the remain tokens to himself. \r\n    // And return the remain tokens to senders by manual process.\r\n    function adminSweepMistakeTransferToken() public onlyOwner {\r\n        \r\n        require(reclaimTokenMap.size() == 0);\r\n        require(token.balanceOf(address(this)) > 0);\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"adminCheckVoteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampReleaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminReclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"adminCheckVoteAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminSweepMistakeTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteKeep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReclaimable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getVoteByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampStartVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"adminCheckReclaimableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCountReclaimableUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVoteScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"adminCheckReclaimableAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVoteUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampEndVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZmineVoteKeep","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000554ffc77f4251a9fb3c0e3590a6a205f8d4e067d","Library":"","SwarmSource":"bzzr://206dcae7bc660333df00c4997bc5a870d19ec02cea54f41f6f522037b753ce70"}]}