{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function claimEcoSystemReservePart1() public;\r\n\r\n    function claimEcoSystemReservePart2() public;\r\n\r\n    function recoverToken(address _token) public;\r\n\r\n    function claimTeamReserve() public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title The Multisig contract contains functions to transfer ETH and LYMPO tokens.\r\n * @author Roman Holovay\r\n */\r\ncontract Multisig {\r\n\tstruct WithdrawEtherStruct {\r\n\t\taddress payable toAddr;\r\n\t\tuint amount;\r\n\t\taddress[] confirmators;\r\n\t\tbool completed;\r\n\t}\r\n\t\r\n\tstruct SendTokensStruct {\r\n\t\taddress toAddr;\r\n\t\tuint amount;\r\n\t\taddress[] confirmators;\r\n\t\tbool completed;\r\n\t}\r\n\t\r\n\tIERC20 public token;\r\n\r\n\tWithdrawEtherStruct[] public withdrawEther;\r\n\tSendTokensStruct[] public sendTokens;\r\n\r\n\tuint public confirmationCount;\r\n\tmapping(address => bool) public owners;\r\n\r\n\tmodifier onlyOwners { \r\n\t\trequire(owners[msg.sender]); \r\n\t\t_; \r\n\t}\r\n\t\r\n\tconstructor(address _tokenAddress, address[] memory _addresses, uint _confirmationCount) public {\r\n\t\trequire(_addresses.length >= _confirmationCount && _confirmationCount > 1);\r\n\t\t\r\n\t\tfor (uint i = 0; i < _addresses.length; i++){\r\n\t\t\towners[_addresses[i]] = true;\r\n\t\t}\r\n\t\t\r\n\t\ttoken = IERC20(_tokenAddress);\r\n\r\n\t\tconfirmationCount = _confirmationCount;\r\n\t}\r\n\r\n\t/**\r\n     * @dev changeTokenAddress changing token address only when it is not set yet.\r\n     * @param _tokenAddress New token address.\r\n     */\r\n\tfunction changeTokenAddress(address _tokenAddress) public  {\r\n\t\trequire (owners[msg.sender]);\r\n\t\trequire (token == IERC20(address(0)));\r\n\t\ttoken = IERC20(_tokenAddress);\r\n\t}\r\n\t\r\n    \r\n    /**\r\n     * @dev createNewEtherWithdrawRequest creates a new ETH transfer request\r\n     * @param _toAddr The addresses that will receive ETH.\r\n     * @param _amount The number of ETH that can be received.\r\n     */\r\n\tfunction createNewEtherWithdrawRequest(address payable _toAddr, uint _amount) public onlyOwners {\r\n\t\taddress[] memory conf;\r\n\t\twithdrawEther.push(WithdrawEtherStruct(_toAddr, _amount, conf, false));\r\n\t\twithdrawEther[withdrawEther.length-1].confirmators.push(msg.sender);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev approveEtherWithdrawRequest approve already created ETH transfer request.\r\n     * This function can be used only by one of owners.\r\n     * @param withdrawEtherId means position of withdrawEther array.\r\n     */\r\n\tfunction approveEtherWithdrawRequest(uint withdrawEtherId) public onlyOwners {\r\n\t    require(!withdrawEther[withdrawEtherId].completed);\r\n\t    \r\n\t    for (uint i = 0; i < withdrawEther[withdrawEtherId].confirmators.length; i++) {\r\n\t        require (msg.sender != withdrawEther[withdrawEtherId].confirmators[i]);\r\n\t    }\r\n\t    \r\n\t    withdrawEther[withdrawEtherId].confirmators.push(msg.sender);\r\n\t    \r\n\t    if (withdrawEther[withdrawEtherId].confirmators.length >= confirmationCount) {\r\n\t        withdrawEther[withdrawEtherId].completed = true;\r\n\t        withdrawEther[withdrawEtherId].toAddr.transfer(withdrawEther[withdrawEtherId].amount);\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev createTransferTokensRequest creates a new Token transfer request\r\n     * @param _toAddr The addresses that will receive tokens.\r\n     * @param _amount The number of tokens that can be received.\r\n     */\r\n\tfunction createTransferTokensRequest(address _toAddr, uint _amount) public onlyOwners {\r\n\t    address[] memory conf;\r\n\t\tsendTokens.push(SendTokensStruct(_toAddr, _amount, conf, false));\r\n\t\tsendTokens[sendTokens.length-1].confirmators.push(msg.sender);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev approveEtherWithdrawRequest approve already created ETH transfer request.\r\n     * This function can be used only by one of owners.\r\n     * @param sendTokensId means position of sendTokens array.\r\n     */\r\n\tfunction approveTransferTokensRequest(uint sendTokensId) public onlyOwners {\r\n\t    require(!sendTokens[sendTokensId].completed);\r\n\t    \r\n\t    for (uint i = 0; i < sendTokens[sendTokensId].confirmators.length; i++) {\r\n\t        require(msg.sender != sendTokens[sendTokensId].confirmators[i]);\r\n\t    }\r\n\t    \r\n\t    sendTokens[sendTokensId].confirmators.push(msg.sender);\r\n\t    \r\n\t    if (sendTokens[sendTokensId].confirmators.length >= confirmationCount) {\r\n\t       sendTokens[sendTokensId].completed = true;\r\n\t       token.transfer(sendTokens[sendTokensId].toAddr, sendTokens[sendTokensId].amount);\r\n\t    }\r\n\t}\r\n\r\n\tfunction claimTeamReserve() public onlyOwners {\r\n        token.claimTeamReserve();\r\n    }\r\n\r\n    function claimEcoSystemReservePart1() public onlyOwners {\r\n    \ttoken.claimEcoSystemReservePart1();\r\n    }\r\n\r\n    function claimEcoSystemReservePart2() public onlyOwners {\r\n    \ttoken.claimEcoSystemReservePart2();\r\n    }\r\n\r\n    function recoverToken(address _token) public onlyOwners {\r\n    \ttoken.recoverToken(_token);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"sendTokensId\",\"type\":\"uint256\"}],\"name\":\"approveTransferTokensRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createTransferTokensRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawEtherId\",\"type\":\"uint256\"}],\"name\":\"approveEtherWithdrawRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTeamReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEcoSystemReservePart1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmationCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createNewEtherWithdrawRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEcoSystemReservePart2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_confirmationCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Multisig","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b2847c5d670e547aa6a89d2db4d21a44aad87d83000000000000000000000000b7eb825721a079f23f6f47c7f06de393a837c88d000000000000000000000000af66653f8ce1e40712f6c2de3433376b70b893c00000000000000000000000000462f900400bbd18a3f4a1ecd57040100f2689d30000000000000000000000009c803c1527ea8f8baede55b8a8cb214f0d621e99","Library":"","SwarmSource":"bzzr://67ad0d8bf713e403d0501a920c7a0ef98897d713b859dab7e74798ec4f51632d"}]}