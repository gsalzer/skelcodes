{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary BytesUtils {\r\n  function isZero(bytes memory b) internal pure returns (bool) {\r\n    if (b.length == 0) {\r\n      return true;\r\n    }\r\n    bytes memory zero = new bytes(b.length);\r\n    return keccak256(b) == keccak256(zero);\r\n  }\r\n}\r\n\r\nlibrary DnsUtils {\r\n  function isDomainName(bytes memory s) internal pure returns (bool) {\r\n    byte last = '.';\r\n    bool ok = false;\r\n    uint partlen = 0;\r\n\r\n    for (uint i = 0; i < s.length; i++) {\r\n      byte c = s[i];\r\n      if (c >= 'a' && c <= 'z' || c == '_') {\r\n        ok = true;\r\n        partlen++;\r\n      } else if (c >= '0' && c <= '9') {\r\n        partlen++;\r\n      } else if (c == '-') {\r\n        // byte before dash cannot be dot.\r\n        if (last == '.') {\r\n          return false;\r\n        }\r\n        partlen++;\r\n      } else if (c == '.') {\r\n        // byte before dot cannot be dot, dash.\r\n        if (last == '.' || last == '-') {\r\n          return false;\r\n        }\r\n        if (partlen > 63 || partlen == 0) {\r\n          return false;\r\n        }\r\n        partlen = 0;\r\n      } else {\r\n        return false;\r\n      }\r\n      last = c;\r\n    }\r\n    if (last == '-' || partlen > 63) {\r\n      return false;\r\n    }\r\n    return ok;\r\n  }\r\n}\r\n\r\ncontract Marketplace is Ownable, Pausable {\r\n  using BytesUtils for bytes;\r\n  using DnsUtils for bytes;\r\n\r\n  /**\r\n    Structures\r\n   */\r\n\r\n  struct Service {\r\n    uint256 createTime;\r\n    address owner;\r\n    bytes sid;\r\n\r\n    mapping(bytes32 => Version) versions; // version hash => Version\r\n    bytes32[] versionsList;\r\n\r\n    Offer[] offers;\r\n\r\n    mapping(address => Purchase) purchases; // purchaser's address => Purchase\r\n    address[] purchasesList;\r\n  }\r\n\r\n  struct Purchase {\r\n    uint256 createTime;\r\n    uint expire;\r\n  }\r\n\r\n  struct Version {\r\n    uint256 createTime;\r\n    bytes manifest;\r\n    bytes manifestProtocol;\r\n  }\r\n\r\n  struct Offer {\r\n    uint256 createTime;\r\n    uint price;\r\n    uint duration;\r\n    bool active;\r\n  }\r\n\r\n  /**\r\n    Constant\r\n   */\r\n\r\n  uint constant INFINITY = ~uint256(0);\r\n  uint constant SID_MIN_LEN = 1;\r\n  uint constant SID_MAX_LEN = 63;\r\n\r\n  /**\r\n    Errors\r\n  */\r\n\r\n  string constant private ERR_ADDRESS_ZERO = \"address is zero\";\r\n\r\n  string constant private ERR_SID_LEN = \"sid must be between 1 and 63 characters\";\r\n  string constant private ERR_SID_INVALID = \"sid must be a valid dns name\";\r\n\r\n  string constant private ERR_SERVICE_EXIST = \"service with given sid already exists\";\r\n  string constant private ERR_SERVICE_NOT_EXIST = \"service with given sid does not exist\";\r\n  string constant private ERR_SERVICE_NOT_OWNER = \"sender is not the service owner\";\r\n\r\n  string constant private ERR_VERSION_EXIST = \"version with given hash already exists\";\r\n  string constant private ERR_VERSION_MANIFEST_LEN = \"version manifest must have at least 1 character\";\r\n  string constant private ERR_VERSION_MANIFEST_PROTOCOL_LEN = \"version manifest protocol must have at least 1 character\";\r\n\r\n  string constant private ERR_OFFER_NOT_EXIST = \"offer dose not exist\";\r\n  string constant private ERR_OFFER_NO_VERSION = \"offer must be created with at least 1 version\";\r\n  string constant private ERR_OFFER_NOT_ACTIVE = \"offer must be active\";\r\n  string constant private ERR_OFFER_DURATION_MIN = \"offer duration must be greater than 0\";\r\n\r\n  string constant private ERR_PURCHASE_OWNER = \"sender cannot purchase his own service\";\r\n  string constant private ERR_PURCHASE_INFINITY = \"service already purchase for infinity\";\r\n  string constant private ERR_PURCHASE_TOKEN_BALANCE = \"token balance must be greater to purchase the service\";\r\n  string constant private ERR_PURCHASE_TOKEN_APPROVE = \"sender must approve the marketplace to spend token\";\r\n\r\n  /**\r\n    State variables\r\n   */\r\n\r\n  IERC20 public token;\r\n\r\n  mapping(bytes32 => Service) public services; // service hashed sid => Service\r\n  bytes32[] public servicesList;\r\n\r\n  mapping(bytes32 => bytes32) public versionHashToService; // version hash => service hashed sid\r\n\r\n  /**\r\n    Constructor\r\n   */\r\n\r\n  constructor(IERC20 _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n    Events\r\n   */\r\n\r\n  event ServiceCreated(\r\n    bytes sid,\r\n    address indexed owner\r\n  );\r\n\r\n  event ServiceOwnershipTransferred(\r\n    bytes sid,\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  event ServiceVersionCreated(\r\n    bytes sid,\r\n    bytes32 indexed versionHash,\r\n    bytes manifest,\r\n    bytes manifestProtocol\r\n  );\r\n\r\n  event ServiceOfferCreated(\r\n    bytes sid,\r\n    uint indexed offerIndex,\r\n    uint price,\r\n    uint duration\r\n  );\r\n\r\n  event ServiceOfferDisabled(\r\n    bytes sid,\r\n    uint indexed offerIndex\r\n  );\r\n\r\n  event ServicePurchased(\r\n    bytes sid,\r\n    uint indexed offerIndex,\r\n    address indexed purchaser,\r\n    uint price,\r\n    uint duration,\r\n    uint expire\r\n  );\r\n\r\n  /**\r\n    Modifiers\r\n   */\r\n\r\n  modifier whenAddressNotZero(address a) {\r\n    require(a != address(0), ERR_ADDRESS_ZERO);\r\n    _;\r\n  }\r\n\r\n  modifier whenManifestNotEmpty(bytes memory manifest) {\r\n    require(!manifest.isZero(), ERR_VERSION_MANIFEST_LEN);\r\n    _;\r\n  }\r\n\r\n  modifier whenManifestProtocolNotEmpty(bytes memory manifestProtocol) {\r\n    require(!manifestProtocol.isZero(), ERR_VERSION_MANIFEST_PROTOCOL_LEN);\r\n    _;\r\n  }\r\n\r\n  modifier whenDurationNotZero(uint duration) {\r\n    require(duration > 0, ERR_OFFER_DURATION_MIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    Internals\r\n   */\r\n\r\n  function _service(bytes memory sid)\r\n    internal view\r\n    returns (Service storage service, bytes32 sidHash)\r\n  {\r\n    sidHash = keccak256(sid);\r\n    require(_isServiceExist(sidHash), ERR_SERVICE_NOT_EXIST);\r\n    return (services[sidHash], sidHash);\r\n  }\r\n\r\n  function _isServiceExist(bytes32 sidHash)\r\n    internal view\r\n    returns (bool exist)\r\n  {\r\n    return services[sidHash].owner != address(0);\r\n  }\r\n\r\n  function _isServiceOwner(bytes32 sidHash, address owner)\r\n    internal view\r\n    returns (bool isOwner)\r\n  {\r\n    return services[sidHash].owner == owner;\r\n  }\r\n\r\n  function _isServiceOfferExist(bytes32 sidHash, uint offerIndex)\r\n    internal view\r\n    returns (bool exist)\r\n  {\r\n    return offerIndex < services[sidHash].offers.length;\r\n  }\r\n\r\n  function _isServicesPurchaseExist(bytes32 sidHash, address purchaser)\r\n    internal view\r\n    returns (bool exist)\r\n  {\r\n    return services[sidHash].purchases[purchaser].createTime > 0;\r\n  }\r\n\r\n  /**\r\n    External and public functions\r\n   */\r\n\r\n  function createService(bytes memory sid)\r\n    public\r\n    whenNotPaused\r\n  {\r\n    require(SID_MIN_LEN <= sid.length && sid.length <= SID_MAX_LEN, ERR_SID_LEN);\r\n    require(sid.isDomainName(), ERR_SID_INVALID);\r\n    bytes32 sidHash = keccak256(sid);\r\n    require(!_isServiceExist(sidHash), ERR_SERVICE_EXIST);\r\n    services[sidHash].owner = msg.sender;\r\n    services[sidHash].sid = sid;\r\n    services[sidHash].createTime = now;\r\n    servicesList.push(sidHash);\r\n    emit ServiceCreated(sid, msg.sender);\r\n  }\r\n\r\n  function transferServiceOwnership(bytes calldata sid, address newOwner)\r\n    external\r\n    whenNotPaused\r\n    whenAddressNotZero(newOwner)\r\n  {\r\n    (Service storage service, bytes32 sidHash) = _service(sid);\r\n    require(_isServiceOwner(sidHash, msg.sender), ERR_SERVICE_NOT_OWNER);\r\n    emit ServiceOwnershipTransferred(sid, service.owner, newOwner);\r\n    service.owner = newOwner;\r\n  }\r\n\r\n  function createServiceVersion(\r\n    bytes memory sid,\r\n    bytes memory manifest,\r\n    bytes memory manifestProtocol\r\n  )\r\n    public\r\n    whenNotPaused\r\n    whenManifestNotEmpty(manifest)\r\n    whenManifestProtocolNotEmpty(manifestProtocol)\r\n  {\r\n    (Service storage service, bytes32 sidHash) = _service(sid);\r\n    require(_isServiceOwner(sidHash, msg.sender), ERR_SERVICE_NOT_OWNER);\r\n    bytes32 versionHash = keccak256(abi.encodePacked(msg.sender, sid, manifest, manifestProtocol));\r\n    require(!isServiceVersionExist(versionHash), ERR_VERSION_EXIST);\r\n    Version storage version = service.versions[versionHash];\r\n    version.manifest = manifest;\r\n    version.manifestProtocol = manifestProtocol;\r\n    version.createTime = now;\r\n    services[sidHash].versionsList.push(versionHash);\r\n    versionHashToService[versionHash] = sidHash;\r\n    emit ServiceVersionCreated(sid, versionHash, manifest, manifestProtocol);\r\n  }\r\n\r\n  function publishServiceVersion(\r\n    bytes calldata sid,\r\n    bytes calldata manifest,\r\n    bytes calldata manifestProtocol\r\n  )\r\n    external\r\n    whenNotPaused\r\n  {\r\n    if (!isServiceExist(sid)) {\r\n      createService(sid);\r\n    }\r\n    createServiceVersion(sid, manifest, manifestProtocol);\r\n  }\r\n\r\n  function createServiceOffer(bytes calldata sid, uint price, uint duration)\r\n    external\r\n    whenNotPaused\r\n    whenDurationNotZero(duration)\r\n    returns (uint offerIndex)\r\n  {\r\n    (Service storage service, bytes32 sidHash) = _service(sid);\r\n    require(_isServiceOwner(sidHash, msg.sender), ERR_SERVICE_NOT_OWNER);\r\n    require(service.versionsList.length > 0, ERR_OFFER_NO_VERSION);\r\n    Offer[] storage offers = services[sidHash].offers;\r\n    offers.push(Offer({\r\n      createTime: now,\r\n      price: price,\r\n      duration: duration,\r\n      active: true\r\n    }));\r\n    emit ServiceOfferCreated(sid, offers.length - 1, price, duration);\r\n    return offers.length - 1;\r\n  }\r\n\r\n  function disableServiceOffer(bytes calldata sid, uint offerIndex)\r\n    external\r\n    whenNotPaused\r\n  {\r\n    (Service storage service, bytes32 sidHash) = _service(sid);\r\n    require(_isServiceOwner(sidHash, msg.sender), ERR_SERVICE_NOT_OWNER);\r\n    require(_isServiceOfferExist(sidHash, offerIndex), ERR_OFFER_NOT_EXIST);\r\n    service.offers[offerIndex].active = false;\r\n    emit ServiceOfferDisabled(sid, offerIndex);\r\n  }\r\n\r\n  function purchase(bytes calldata sid, uint offerIndex)\r\n    external\r\n    whenNotPaused\r\n  {\r\n    (Service storage service, bytes32 sidHash) = _service(sid);\r\n    require(!_isServiceOwner(sidHash, msg.sender), ERR_PURCHASE_OWNER);\r\n    require(_isServiceOfferExist(sidHash, offerIndex), ERR_OFFER_NOT_EXIST);\r\n    require(service.offers[offerIndex].active, ERR_OFFER_NOT_ACTIVE);\r\n\r\n    Offer storage offer = service.offers[offerIndex];\r\n\r\n    // if offer has been purchased for infinity then return\r\n    require(service.purchases[msg.sender].expire != INFINITY, ERR_PURCHASE_INFINITY);\r\n\r\n    // Check if offer is active, sender has enough balance and approved the transform\r\n    require(token.balanceOf(msg.sender) >= offer.price, ERR_PURCHASE_TOKEN_BALANCE);\r\n    require(token.allowance(msg.sender, address(this)) >= offer.price, ERR_PURCHASE_TOKEN_APPROVE);\r\n\r\n    // Transfer the token from sender to service owner\r\n    token.transferFrom(msg.sender, service.owner, offer.price);\r\n\r\n    // max(service.purchases[msg.sender].expire,  now)\r\n    uint expire = service.purchases[msg.sender].expire <= now ?\r\n                     now : service.purchases[msg.sender].expire;\r\n\r\n    // set expire + duration or INFINITY on overflow\r\n    expire = expire + offer.duration < expire ?\r\n               INFINITY : expire + offer.duration;\r\n\r\n    // if given address purchase service\r\n    // 1st time add it to purchases list and set create time\r\n    if (service.purchases[msg.sender].expire == 0) {\r\n      service.purchases[msg.sender].createTime = now;\r\n      service.purchasesList.push(msg.sender);\r\n    }\r\n\r\n    // set new expire time\r\n    service.purchases[msg.sender].expire = expire;\r\n    emit ServicePurchased(\r\n      sid,\r\n      offerIndex,\r\n      msg.sender,\r\n      offer.price,\r\n      offer.duration,\r\n      expire\r\n    );\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n  /**\r\n    External views\r\n   */\r\n\r\n  function servicesLength()\r\n    external view\r\n    returns (uint length)\r\n  {\r\n    return servicesList.length;\r\n  }\r\n\r\n  function service(bytes calldata _sid)\r\n    external view\r\n    returns (uint256 createTime, address owner, bytes memory sid)\r\n  {\r\n    bytes32 sidHash = keccak256(_sid);\r\n    Service storage s = services[sidHash];\r\n    return (s.createTime, s.owner, s.sid);\r\n  }\r\n\r\n  function serviceVersionsLength(bytes calldata sid)\r\n    external view\r\n    returns (uint length)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    return s.versionsList.length;\r\n  }\r\n\r\n  function serviceVersionHash(bytes calldata sid, uint versionIndex)\r\n    external view\r\n    returns (bytes32 versionHash)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    return s.versionsList[versionIndex];\r\n  }\r\n\r\n  function serviceVersion(bytes32 versionHash)\r\n    external view\r\n    returns (\r\n      uint256 createTime,\r\n      bytes memory manifest,\r\n      bytes memory manifestProtocol\r\n    )\r\n  {\r\n    bytes32 sidHash = versionHashToService[versionHash];\r\n    require(_isServiceExist(sidHash), ERR_SERVICE_NOT_EXIST);\r\n    Version storage version = services[sidHash].versions[versionHash];\r\n    return (version.createTime, version.manifest, version.manifestProtocol);\r\n  }\r\n\r\n  function serviceOffersLength(bytes calldata sid)\r\n    external view\r\n    returns (uint length)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    return s.offers.length;\r\n  }\r\n\r\n  function serviceOffer(bytes calldata sid, uint offerIndex)\r\n    external view\r\n    returns (uint256 createTime, uint price, uint duration, bool active)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    Offer storage offer = s.offers[offerIndex];\r\n    return (offer.createTime, offer.price, offer.duration, offer.active);\r\n  }\r\n\r\n  function servicePurchasesLength(bytes calldata sid)\r\n    external view\r\n    returns (uint length)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    return s.purchasesList.length;\r\n  }\r\n\r\n  function servicePurchaseAddress(bytes calldata sid, uint purchaseIndex)\r\n    external view\r\n    returns (address purchaser)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    return s.purchasesList[purchaseIndex];\r\n  }\r\n\r\n  function servicePurchase(bytes calldata sid, address purchaser)\r\n    external view\r\n    returns (uint256 createTime, uint expire)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    Purchase storage p = s.purchases[purchaser];\r\n    return (p.createTime, p.expire);\r\n  }\r\n\r\n  function isAuthorized(bytes calldata sid, address purchaser)\r\n    external view\r\n    returns (bool authorized)\r\n  {\r\n    (Service storage s,) = _service(sid);\r\n    if (s.owner == purchaser || s.purchases[purchaser].expire >= now) {\r\n      return true;\r\n    }\r\n\r\n    for (uint i = 0; i < s.offers.length; i++) {\r\n      if (s.offers[i].active && s.offers[i].price == 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n    Public views\r\n   */\r\n\r\n  function isServiceExist(bytes memory sid)\r\n    public view\r\n    returns (bool exist)\r\n  {\r\n    bytes32 sidHash = keccak256(sid);\r\n    return _isServiceExist(sidHash);\r\n  }\r\n\r\n  function isServiceOwner(bytes memory sid, address owner)\r\n    public view\r\n    returns (bool isOwner)\r\n  {\r\n    bytes32 sidHash = keccak256(sid);\r\n    return _isServiceOwner(sidHash, owner);\r\n  }\r\n\r\n  function isServiceVersionExist(bytes32 versionHash)\r\n    public view\r\n    returns (bool exist)\r\n  {\r\n    return _isServiceExist(versionHashToService[versionHash]);\r\n  }\r\n\r\n  function isServiceOfferExist(bytes memory sid, uint offerIndex)\r\n    public view\r\n    returns (bool exist)\r\n  {\r\n    bytes32 sidHash = keccak256(sid);\r\n    return _isServiceOfferExist(sidHash, offerIndex);\r\n  }\r\n\r\n  function isServicesPurchaseExist(bytes memory sid, address purchaser)\r\n    public view\r\n  returns (bool exist) {\r\n    bytes32 sidHash = keccak256(sid);\r\n    return _isServicesPurchaseExist(sidHash, purchaser);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"disableServiceOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"isServicesPurchaseExist\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"services\",\"outputs\":[{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sid\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"}],\"name\":\"isServiceExist\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isServiceOwner\",\"outputs\":[{\"name\":\"isOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servicesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicesList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createServiceOffer\",\"outputs\":[{\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"versionIndex\",\"type\":\"uint256\"}],\"name\":\"serviceVersionHash\",\"outputs\":[{\"name\":\"versionHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"versionHash\",\"type\":\"bytes32\"}],\"name\":\"isServiceVersionExist\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"versionHashToService\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"}],\"name\":\"serviceVersionsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sid\",\"type\":\"bytes\"}],\"name\":\"service\",\"outputs\":[{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sid\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"isServiceOfferExist\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"serviceOffer\",\"outputs\":[{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"versionHash\",\"type\":\"bytes32\"}],\"name\":\"serviceVersion\",\"outputs\":[{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"manifest\",\"type\":\"bytes\"},{\"name\":\"manifestProtocol\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"authorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"}],\"name\":\"createService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"manifest\",\"type\":\"bytes\"},{\"name\":\"manifestProtocol\",\"type\":\"bytes\"}],\"name\":\"publishServiceVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"}],\"name\":\"serviceOffersLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"servicePurchase\",\"outputs\":[{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"manifest\",\"type\":\"bytes\"},{\"name\":\"manifestProtocol\",\"type\":\"bytes\"}],\"name\":\"createServiceVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"servicePurchaseAddress\",\"outputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"}],\"name\":\"servicePurchasesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sid\",\"type\":\"bytes\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferServiceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ServiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ServiceOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"versionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"manifest\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"manifestProtocol\",\"type\":\"bytes\"}],\"name\":\"ServiceVersionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ServiceOfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"ServiceOfferDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expire\",\"type\":\"uint256\"}],\"name\":\"ServicePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Marketplace","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2","Library":"","SwarmSource":"bzzr://5611bf134db4ee1fa34372f756d660430cc3dbb5e8468999f148565063f8138b"}]}