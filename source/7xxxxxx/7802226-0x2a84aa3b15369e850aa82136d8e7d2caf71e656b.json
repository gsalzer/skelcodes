{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract EthicHubStorageInterface {\r\n\r\n    //modifier for access in sets and deletes\r\n    modifier onlyEthicHubContracts() {_;}\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string);\r\n    function getBytes(bytes32 _key) external view returns (bytes);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EthicHubReputationInterface {\r\n    modifier onlyUsersContract(){_;}\r\n    modifier onlyLendingContract(){_;}\r\n    function burnReputation(uint delayDays)  external;\r\n    function incrementReputation(uint completedProjectsByTier)  external;\r\n    function initLocalNodeReputation(address localNode)  external;\r\n    function initCommunityReputation(address community)  external;\r\n    function getCommunityReputation(address target) public view returns(uint256);\r\n    function getLocalNodeReputation(address target) public view returns(uint256);\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract EthicHubBase {\r\n\r\n    uint8 public version;\r\n\r\n    EthicHubStorageInterface public ethicHubStorage = EthicHubStorageInterface(0);\r\n\r\n    constructor(address _storageAddress) public {\r\n        require(_storageAddress != address(0));\r\n        ethicHubStorage = EthicHubStorageInterface(_storageAddress);\r\n    }\r\n\r\n}\r\n\r\ncontract EthicHubLending is EthicHubBase, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    //uint256 public minContribAmount = 0.1 ether;                          // 0.1 ether\r\n    enum LendingState {\r\n        Uninitialized,\r\n        AcceptingContributions,\r\n        ExchangingToFiat,\r\n        AwaitingReturn,\r\n        ProjectNotFunded,\r\n        ContributionReturned,\r\n        Default\r\n    }\r\n    mapping(address => Investor) public investors;\r\n    uint256 public investorCount;\r\n    uint256 public reclaimedContributions;\r\n    uint256 public reclaimedSurpluses;\r\n    uint256 public fundingStartTime;                                     // Start time of contribution period in UNIX time\r\n    uint256 public fundingEndTime;                                       // End time of contribution period in UNIX time\r\n    uint256 public totalContributed;\r\n    bool public capReached;\r\n    LendingState public state;\r\n    uint256 public annualInterest;\r\n    uint256 public totalLendingAmount;\r\n    uint256 public lendingDays;\r\n    uint256 public borrowerReturnDays;\r\n    uint256 public initialEthPerFiatRate;\r\n    uint256 public totalLendingFiatAmount;\r\n    address public borrower;\r\n    address public localNode;\r\n    address public ethicHubTeam;\r\n    //uint256 public borrowerReturnDate;\r\n    uint256 public borrowerReturnEthPerFiatRate;\r\n    uint256 public ethichubFee;\r\n    uint256 public localNodeFee;\r\n    uint256 public tier;\r\n    // interest rate is using base uint 100 and 100% 10000, this means 1% is 100\r\n    // this guarantee we can have a 2 decimal presicion in our calculation\r\n    uint256 public constant interestBaseUint = 100;\r\n    uint256 public constant interestBasePercent = 10000;\r\n    bool public localNodeFeeReclaimed;\r\n    bool public ethicHubTeamFeeReclaimed;\r\n    uint256 public surplusEth;\r\n    uint256 public returnedEth;\r\n\r\n    struct Investor {\r\n        uint256 amount;\r\n        bool isCompensated;\r\n        bool surplusEthReclaimed;\r\n    }\r\n\r\n    // events\r\n    event onCapReached(uint endTime);\r\n    event onContribution(uint totalContributed, address indexed investor, uint amount, uint investorsCount);\r\n    event onCompensated(address indexed contributor, uint amount);\r\n    event onSurplusSent(uint256 amount);\r\n    event onSurplusReclaimed(address indexed contributor, uint amount);\r\n    event StateChange(uint state);\r\n    event onInitalRateSet(uint rate);\r\n    event onReturnRateSet(uint rate);\r\n    event onReturnAmount(address indexed borrower, uint amount);\r\n    event onBorrowerChanged(address indexed newBorrower);\r\n    event onInvestorChanged(address indexed oldInvestor, address indexed newInvestor);\r\n\r\n    // modifiers\r\n    modifier checkProfileRegistered(string profile) {\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", profile, msg.sender)));\r\n        require(isRegistered, \"Sender not registered in EthicHub.com\");\r\n        _;\r\n    }\r\n\r\n    modifier checkIfArbiter() {\r\n        address arbiter = ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"arbiter\", this)));\r\n        require(arbiter == msg.sender, \"Sender not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrLocalNode() {\r\n        require(localNode == msg.sender || owner == msg.sender,\"Sender not authorized\");\r\n        _;\r\n    }\r\n\r\n    //modifier onlyInvestorOrPaymentGateway() {\r\n    //    bool isInvestor = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"investor\", msg.sender)));\r\n    //    bool isPaymentGateway = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"paymentGateway\", msg.sender)));\r\n    //    require(isPaymentGateway || isInvestor, \"Sender not authorized\");\r\n    //    _;\r\n    //}\r\n\r\n    constructor(\r\n        uint256 _fundingStartTime,\r\n        uint256 _fundingEndTime,\r\n        address _borrower,\r\n        uint256 _annualInterest,\r\n        uint256 _totalLendingAmount,\r\n        uint256 _lendingDays,\r\n        address _storageAddress,\r\n        address _localNode,\r\n        address _ethicHubTeam,\r\n        uint256 _ethichubFee,\r\n        uint256 _localNodeFee\r\n        )\r\n        EthicHubBase(_storageAddress)\r\n        public {\r\n        require(_fundingEndTime > fundingStartTime, \"fundingEndTime should be later than fundingStartTime\");\r\n        require(_borrower != address(0), \"No borrower set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"representative\", _borrower))), \"Borrower not registered representative\");\r\n        require(_localNode != address(0), \"No Local Node set\");\r\n        require(_ethicHubTeam != address(0), \"No EthicHub Team set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"localNode\", _localNode))), \"Local Node is not registered\");\r\n        require(_totalLendingAmount > 0, \"_totalLendingAmount must be > 0\");\r\n        require(_lendingDays > 0, \"_lendingDays must be > 0\");\r\n        require(_annualInterest > 0 && _annualInterest < 100, \"_annualInterest must be between 0 and 100\");\r\n        version = 7;\r\n        reclaimedContributions = 0;\r\n        reclaimedSurpluses = 0;\r\n        borrowerReturnDays = 0;\r\n        fundingStartTime = _fundingStartTime;\r\n        fundingEndTime = _fundingEndTime;\r\n        localNode = _localNode;\r\n        ethicHubTeam = _ethicHubTeam;\r\n        borrower = _borrower;\r\n        annualInterest = _annualInterest;\r\n        totalLendingAmount = _totalLendingAmount;\r\n        lendingDays = _lendingDays;\r\n        ethichubFee = _ethichubFee;\r\n        localNodeFee = _localNodeFee;\r\n        state = LendingState.Uninitialized;\r\n    }\r\n\r\n    function saveInitialParametersToStorage(uint256 _maxDelayDays, uint256 _tier, uint256 _communityMembers, address _community) external onlyOwnerOrLocalNode {\r\n        require(_maxDelayDays != 0, \"_maxDelayDays must be > 0\");\r\n        require(state == LendingState.Uninitialized, \"State must be Uninitialized\");\r\n        require(_tier > 0, \"_tier must be > 0\");\r\n        require(_communityMembers > 0, \"_communityMembers must be > 0\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"community\", _community))), \"Community is not registered\");\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.maxDelayDays\", this)), _maxDelayDays);\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"lending.community\", this)), _community);\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"lending.localNode\", this)), localNode);\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.tier\", this)), _tier);\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.communityMembers\", this)), _communityMembers);\r\n        tier = _tier;\r\n        state = LendingState.AcceptingContributions;\r\n        emit StateChange(uint(state));\r\n\r\n    }\r\n\r\n    function setBorrower(address _borrower) external checkIfArbiter {\r\n        require(_borrower != address(0), \"No borrower set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"representative\", _borrower))), \"Borrower not registered representative\");\r\n        borrower = _borrower;\r\n        emit onBorrowerChanged(borrower);\r\n    }\r\n\r\n    function changeInvestorAddress(address oldInvestor, address newInvestor) external checkIfArbiter {\r\n        require(newInvestor != address(0));\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"investor\", newInvestor))));\r\n        //oldInvestor should have invested in this project\r\n        require(investors[oldInvestor].amount != 0);\r\n        //newInvestor should not have invested anything in this project to not complicate return calculation\r\n        require(investors[newInvestor].amount == 0);\r\n        investors[newInvestor].amount = investors[oldInvestor].amount;\r\n        investors[newInvestor].isCompensated = investors[oldInvestor].isCompensated;\r\n        investors[newInvestor].surplusEthReclaimed = investors[oldInvestor].surplusEthReclaimed;\r\n        delete investors[oldInvestor];\r\n        emit onInvestorChanged(oldInvestor, newInvestor);\r\n    }\r\n\r\n    function() public payable whenNotPaused {\r\n        require(state == LendingState.AwaitingReturn || state == LendingState.AcceptingContributions || state == LendingState.ExchangingToFiat, \"Can't receive ETH in this state\");\r\n        if(state == LendingState.AwaitingReturn) {\r\n            returnBorrowedEth();\r\n        } else if (state == LendingState.ExchangingToFiat) {\r\n            // borrower can send surplus eth back to contract to avoid paying interest\r\n            sendBackSurplusEth();\r\n        } else {\r\n            require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"investor\", msg.sender))), \"Sender is not registered lender\");\r\n            contributeWithAddress(msg.sender);\r\n        }\r\n    }\r\n\r\n    function sendBackSurplusEth() internal {\r\n        require(state == LendingState.ExchangingToFiat);\r\n        require(msg.sender == borrower);\r\n        surplusEth = surplusEth.add(msg.value);\r\n        require(surplusEth <= totalLendingAmount);\r\n        emit onSurplusSent(msg.value);\r\n    }\r\n\r\n    /**\r\n     * After the contribution period ends unsuccesfully, this method enables the contributor\r\n     *  to retrieve their contribution\r\n     */\r\n    function declareProjectNotFunded() external onlyOwnerOrLocalNode {\r\n        require(totalContributed < totalLendingAmount);\r\n        require(state == LendingState.AcceptingContributions);\r\n        require(now > fundingEndTime);\r\n        state = LendingState.ProjectNotFunded;\r\n        emit StateChange(uint(state));\r\n    }\r\n\r\n    function declareProjectDefault() external onlyOwnerOrLocalNode {\r\n        require(state == LendingState.AwaitingReturn);\r\n        uint maxDelayDays = getMaxDelayDays();\r\n        require(getDelayDays(now) >= maxDelayDays);\r\n        EthicHubReputationInterface reputation = EthicHubReputationInterface(ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", \"reputation\"))));\r\n        require(reputation != address(0));\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.delayDays\", this)), maxDelayDays);\r\n        reputation.burnReputation(maxDelayDays);\r\n        state = LendingState.Default;\r\n        emit StateChange(uint(state));\r\n    }\r\n\r\n    function setBorrowerReturnEthPerFiatRate(uint256 _borrowerReturnEthPerFiatRate) external onlyOwnerOrLocalNode {\r\n        require(state == LendingState.AwaitingReturn, \"State is not AwaitingReturn\");\r\n        borrowerReturnEthPerFiatRate = _borrowerReturnEthPerFiatRate;\r\n        emit onReturnRateSet(borrowerReturnEthPerFiatRate);\r\n    }\r\n\r\n    /**\r\n    * Marks the initial exchange period as over (the ETH collected amount has been exchanged for local Fiat currency)\r\n    * If there was surplus, the  amount returned is substracted over the total amount collected\r\n    * Sets the local currency to return, on the basis of which the interest will be calculated\r\n    * @param _initialEthPerFiatRate the rate with 2 decimals. i.e. 444.22 is 44422 , 1245.00 is 124500\r\n    */\r\n    function finishInitialExchangingPeriod(uint256 _initialEthPerFiatRate) external onlyOwnerOrLocalNode {\r\n        require(capReached == true, \"Cap not reached\");\r\n        require(state == LendingState.ExchangingToFiat, \"State is not ExchangingToFiat\");\r\n        initialEthPerFiatRate = _initialEthPerFiatRate;\r\n        if (surplusEth > 0) {\r\n            totalLendingAmount = totalLendingAmount.sub(surplusEth);\r\n        }\r\n        totalLendingFiatAmount = totalLendingAmount.mul(initialEthPerFiatRate);\r\n        emit onInitalRateSet(initialEthPerFiatRate);\r\n        state = LendingState.AwaitingReturn;\r\n        emit StateChange(uint(state));\r\n    }\r\n\r\n    /**\r\n     * Method to reclaim contribution after project is declared default (% of partial funds)\r\n     * @param  beneficiary the contributor\r\n     *\r\n     */\r\n    function reclaimContributionDefault(address beneficiary) external {\r\n        require(state == LendingState.Default);\r\n        require(!investors[beneficiary].isCompensated);\r\n        // contribution = contribution * partial_funds / total_funds\r\n        uint256 contribution = checkInvestorReturns(beneficiary);\r\n        require(contribution > 0);\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    /**\r\n     * Method to reclaim contribution after a project is declared as not funded\r\n     * @param  beneficiary the contributor\r\n     *\r\n     */\r\n    function reclaimContribution(address beneficiary) external {\r\n        require(state == LendingState.ProjectNotFunded, \"State is not ProjectNotFunded\");\r\n        require(!investors[beneficiary].isCompensated, \"Contribution already reclaimed\");\r\n        uint256 contribution = investors[beneficiary].amount;\r\n        require(contribution > 0, \"Contribution is 0\");\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    function reclaimSurplusEth(address beneficiary) external {\r\n        require(surplusEth > 0, \"No surplus ETH\");\r\n        // only can be reclaimed after cap reduced\r\n        require(state != LendingState.ExchangingToFiat, \"State is ExchangingToFiat\");\r\n        require(!investors[beneficiary].surplusEthReclaimed, \"Surplus already reclaimed\");\r\n        uint256 surplusContribution = investors[beneficiary].amount.mul(surplusEth).div(surplusEth.add(totalLendingAmount));\r\n        require(surplusContribution > 0, \"Surplus is 0\");\r\n        investors[beneficiary].surplusEthReclaimed = true;\r\n        reclaimedSurpluses = reclaimedSurpluses.add(1);\r\n        emit onSurplusReclaimed(beneficiary, surplusContribution);\r\n        doReclaim(beneficiary, surplusContribution);\r\n    }\r\n\r\n    function reclaimContributionWithInterest(address beneficiary) external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(!investors[beneficiary].isCompensated, \"Lender already compensated\");\r\n        uint256 contribution = checkInvestorReturns(beneficiary);\r\n        require(contribution > 0, \"Contribution is 0\");\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    function reclaimLocalNodeFee() external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(localNodeFeeReclaimed == false, \"Local Node's fee already reclaimed\");\r\n        uint256 fee = totalLendingFiatAmount.mul(localNodeFee).mul(interestBaseUint).div(interestBasePercent).div(borrowerReturnEthPerFiatRate);\r\n        require(fee > 0, \"Local Node's team fee is 0\");\r\n        localNodeFeeReclaimed = true;\r\n        doReclaim(localNode, fee);\r\n    }\r\n\r\n    function reclaimEthicHubTeamFee() external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(ethicHubTeamFeeReclaimed == false, \"EthicHub team's fee already reclaimed\");\r\n        uint256 fee = totalLendingFiatAmount.mul(ethichubFee).mul(interestBaseUint).div(interestBasePercent).div(borrowerReturnEthPerFiatRate);\r\n        require(fee > 0, \"EthicHub's team fee is 0\");\r\n        ethicHubTeamFeeReclaimed = true;\r\n        doReclaim(ethicHubTeam, fee);\r\n    }\r\n\r\n    function reclaimLeftoverEth() external checkIfArbiter {\r\n        require(state == LendingState.ContributionReturned || state == LendingState.Default, \"State is not ContributionReturned or Default\");\r\n        require(localNodeFeeReclaimed, \"Local Node fee is not reclaimed\");\r\n        require(ethicHubTeamFeeReclaimed, \"Team fee is not reclaimed\");\r\n        require(investorCount == reclaimedContributions, \"Not all investors have reclaimed their share\");\r\n        if(surplusEth > 0) {\r\n            require(investorCount == reclaimedSurpluses, \"Not all investors have reclaimed their surplus\");\r\n        }\r\n        doReclaim(ethicHubTeam, address(this).balance);\r\n    }\r\n\r\n    function doReclaim(address target, uint256 amount) internal {\r\n        if ( address(this).balance < amount ) {\r\n            target.transfer(address(this).balance);\r\n        } else {\r\n            target.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function returnBorrowedEth() internal {\r\n        require(state == LendingState.AwaitingReturn, \"State is not AwaitingReturn\");\r\n        require(msg.sender == borrower, \"Only the borrower can repay\");\r\n        require(borrowerReturnEthPerFiatRate > 0, \"Second exchange rate not set\");\r\n        bool projectRepayed = false;\r\n        uint excessRepayment = 0;\r\n        uint newReturnedEth = 0;\r\n        emit onReturnAmount(msg.sender, msg.value);\r\n        (newReturnedEth, projectRepayed, excessRepayment) = calculatePaymentGoal(borrowerReturnAmount(), returnedEth, msg.value);\r\n        returnedEth = newReturnedEth;\r\n        if (projectRepayed == true) {\r\n            borrowerReturnDays = getDaysPassedBetweenDates(fundingEndTime, now);\r\n            state = LendingState.ContributionReturned;\r\n            emit StateChange(uint(state));\r\n            updateReputation();\r\n        }\r\n        if (excessRepayment > 0) {\r\n            msg.sender.transfer(excessRepayment);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // @notice make cotribution throught a paymentGateway\r\n    // @param contributor Address\r\n    function contributeForAddress(address contributor) external checkProfileRegistered('paymentGateway') payable whenNotPaused {\r\n        contributeWithAddress(contributor);\r\n    }\r\n\r\n    // @notice Function to participate in contribution period\r\n    //  Amounts from the same address should be added up\r\n    //  If cap is reached, end time should be modified\r\n    //  Funds should be transferred into multisig wallet\r\n    // @param contributor Address\r\n    function contributeWithAddress(address contributor) internal whenNotPaused {\r\n        require(state == LendingState.AcceptingContributions, \"state is not AcceptingContributions\");\r\n        require(isContribPeriodRunning(), \"can't contribute outside contribution period\");\r\n\r\n        uint oldTotalContributed = totalContributed;\r\n        uint newTotalContributed = 0;\r\n        uint excessContribValue = 0;\r\n        (newTotalContributed, capReached, excessContribValue) = calculatePaymentGoal(totalLendingAmount, oldTotalContributed, msg.value);\r\n        totalContributed = newTotalContributed;\r\n        if (capReached) {\r\n            fundingEndTime = now;\r\n            emit onCapReached(fundingEndTime);\r\n        }\r\n        if (investors[contributor].amount == 0) {\r\n            investorCount = investorCount.add(1);\r\n        }\r\n        if (excessContribValue > 0) {\r\n            contributor.transfer(excessContribValue);\r\n            investors[contributor].amount = investors[contributor].amount.add(msg.value).sub(excessContribValue);\r\n            emit onContribution(newTotalContributed, contributor, msg.value.sub(excessContribValue), investorCount);\r\n        } else {\r\n            investors[contributor].amount = investors[contributor].amount.add(msg.value);\r\n            emit onContribution(newTotalContributed, contributor, msg.value, investorCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates if a target value is reached after increment, and by how much it was surpassed.\r\n     * @param goal the target to achieve\r\n     * @param oldTotal the total so far after the increment\r\n     * @param contribValue the increment\r\n     * @return (the incremented count, not bigger than max), (goal has been reached), (excess to return)\r\n     */\r\n    function calculatePaymentGoal(uint goal, uint oldTotal, uint contribValue) internal pure returns(uint, bool, uint) {\r\n        uint newTotal = oldTotal.add(contribValue);\r\n        bool goalReached = false;\r\n        uint excess = 0;\r\n        if (newTotal >= goal && oldTotal < goal) {\r\n            goalReached = true;\r\n            excess = newTotal.sub(goal);\r\n            contribValue = contribValue.sub(excess);\r\n            newTotal = goal;\r\n        }\r\n        return (newTotal, goalReached, excess);\r\n    }\r\n\r\n    function sendFundsToBorrower() external onlyOwnerOrLocalNode {\r\n      //Waiting for Exchange\r\n        require(state == LendingState.AcceptingContributions);\r\n        require(capReached);\r\n        state = LendingState.ExchangingToFiat;\r\n        emit StateChange(uint(state));\r\n        borrower.transfer(totalContributed);\r\n    }\r\n\r\n    function updateReputation() internal {\r\n        EthicHubReputationInterface reputation = EthicHubReputationInterface(\r\n            ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", \"reputation\")))\r\n            );\r\n        require(reputation != address(0));\r\n        uint delayDays = getDelayDays(now);\r\n        if (delayDays > 0) {\r\n            ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.delayDays\", this)), delayDays);\r\n            reputation.burnReputation(delayDays);\r\n        } else {\r\n            uint completedProjectsByTier = ethicHubStorage.getUint(keccak256(abi.encodePacked(\"community.completedProjectsByTier\", this, tier))).add(1);\r\n            ethicHubStorage.setUint(keccak256(abi.encodePacked(\"community.completedProjectsByTier\", this, tier)), completedProjectsByTier);\r\n            reputation.incrementReputation(completedProjectsByTier);\r\n        }\r\n    }\r\n    /**\r\n    * Calculates days passed after defaulting\r\n    * @param date timestamp to calculate days\r\n    * @return day number\r\n    */\r\n    function getDelayDays(uint date) public view returns(uint) {\r\n        uint lendingDaysSeconds = lendingDays * 1 days;\r\n        uint defaultTime = fundingEndTime.add(lendingDaysSeconds);\r\n        if (date < defaultTime) {\r\n            return 0;\r\n        } else {\r\n            return getDaysPassedBetweenDates(defaultTime, date);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Calculates days passed between two dates in seconds\r\n    * @param firstDate timestamp\r\n    * @param lastDate timestamp\r\n    * @return days passed\r\n    */\r\n    function getDaysPassedBetweenDates(uint firstDate, uint lastDate) public pure returns(uint) {\r\n        require(firstDate <= lastDate, \"lastDate must be bigger than firstDate\");\r\n        return lastDate.sub(firstDate).div(60).div(60).div(24);\r\n    }\r\n\r\n    // lendingInterestRate with 2 decimal\r\n    // 15 * (lending days)/ 365 + 4% local node fee + 3% LendingDev fee\r\n    function lendingInterestRatePercentage() public view returns(uint256){\r\n        return annualInterest.mul(interestBaseUint)\r\n            // current days\r\n            .mul(getDaysPassedBetweenDates(fundingEndTime, now)).div(365)\r\n            .add(localNodeFee.mul(interestBaseUint))\r\n            .add(ethichubFee.mul(interestBaseUint))\r\n            .add(interestBasePercent);\r\n    }\r\n\r\n    // lendingInterestRate with 2 decimal\r\n    function investorInterest() public view returns(uint256){\r\n        return annualInterest.mul(interestBaseUint).mul(borrowerReturnDays).div(365).add(interestBasePercent);\r\n    }\r\n\r\n    function borrowerReturnFiatAmount() public view returns(uint256) {\r\n        return totalLendingFiatAmount.mul(lendingInterestRatePercentage()).div(interestBasePercent);\r\n    }\r\n\r\n    function borrowerReturnAmount() public view returns(uint256) {\r\n        return borrowerReturnFiatAmount().div(borrowerReturnEthPerFiatRate);\r\n    }\r\n\r\n    function isContribPeriodRunning() public view returns(bool) {\r\n        return fundingStartTime <= now && fundingEndTime > now && !capReached;\r\n    }\r\n\r\n    function checkInvestorContribution(address investor) public view returns(uint256){\r\n        return investors[investor].amount;\r\n    }\r\n\r\n    function checkInvestorReturns(address investor) public view returns(uint256) {\r\n        uint256 investorAmount = 0;\r\n        if (state == LendingState.ContributionReturned) {\r\n            investorAmount = investors[investor].amount;\r\n            if (surplusEth > 0){\r\n                investorAmount = investors[investor].amount.mul(totalLendingAmount).div(totalContributed);\r\n            }\r\n            return investorAmount.mul(initialEthPerFiatRate).mul(investorInterest()).div(borrowerReturnEthPerFiatRate).div(interestBasePercent);\r\n        } else if (state == LendingState.Default){\r\n            investorAmount = investors[investor].amount;\r\n            // contribution = contribution * partial_funds / total_funds\r\n            return investorAmount.mul(returnedEth).div(totalLendingAmount);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getMaxDelayDays() public view returns(uint256){\r\n        return ethicHubStorage.getUint(keccak256(abi.encodePacked(\"lending.maxDelayDays\", this)));\r\n    }\r\n\r\n    function getUserContributionReclaimStatus(address userAddress) public view returns(bool isCompensated, bool surplusEthReclaimed){\r\n        isCompensated = investors[userAddress].isCompensated;\r\n        surplusEthReclaimed = investors[userAddress].surplusEthReclaimed;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNodeFeeReclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestBasePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendFundsToBorrower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimSurplusEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnFiatAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingInterestRatePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxDelayDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldInvestor\",\"type\":\"address\"},{\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"changeInvestorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimLeftoverEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareProjectDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialEthPerFiatRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getDelayDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContributionDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDelayDays\",\"type\":\"uint256\"},{\"name\":\"_tier\",\"type\":\"uint256\"},{\"name\":\"_communityMembers\",\"type\":\"uint256\"},{\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"saveInitialParametersToStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestBaseUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrowerReturnEthPerFiatRate\",\"type\":\"uint256\"}],\"name\":\"setBorrowerReturnEthPerFiatRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isCompensated\",\"type\":\"bool\"},{\"name\":\"surplusEthReclaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubTeamFeeReclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialEthPerFiatRate\",\"type\":\"uint256\"}],\"name\":\"finishInitialExchangingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareProjectNotFunded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNodeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surplusEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"firstDate\",\"type\":\"uint256\"},{\"name\":\"lastDate\",\"type\":\"uint256\"}],\"name\":\"getDaysPassedBetweenDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserContributionReclaimStatus\",\"outputs\":[{\"name\":\"isCompensated\",\"type\":\"bool\"},{\"name\":\"surplusEthReclaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimedSurpluses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"checkInvestorReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContributionWithInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimedContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributeForAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEthicHubTeamFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"setBorrower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContribPeriodRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethichubFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimLocalNodeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingFiatAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnEthPerFiatRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"checkInvestorContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"name\":\"_fundingEndTime\",\"type\":\"uint256\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_annualInterest\",\"type\":\"uint256\"},{\"name\":\"_totalLendingAmount\",\"type\":\"uint256\"},{\"name\":\"_lendingDays\",\"type\":\"uint256\"},{\"name\":\"_storageAddress\",\"type\":\"address\"},{\"name\":\"_localNode\",\"type\":\"address\"},{\"name\":\"_ethicHubTeam\",\"type\":\"address\"},{\"name\":\"_ethichubFee\",\"type\":\"uint256\"},{\"name\":\"_localNodeFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalContributed\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorsCount\",\"type\":\"uint256\"}],\"name\":\"onContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onSurplusSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onSurplusReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"onInitalRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"onReturnRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onReturnAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBorrower\",\"type\":\"address\"}],\"name\":\"onBorrowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldInvestor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"onInvestorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthicHubLending","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ce3cc20000000000000000000000000000000000000000000000000000000005d0caaa0000000000000000000000000a51253c7727ad26b860493acb0de291f6fea2c53000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000143d10ce0f81ec868000000000000000000000000000000000000000000000000000000000000010c0000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca000000000000000000000000de7c8c613c68fc9ff1ab7abe6ba3ea7613d1e0920000000000000000000000008307df1d17ee7d58c6298cb3346c1c503fddcdf400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004","Library":"","SwarmSource":"bzzr://f118f2d354a9d995675478712288c36d4f2844367bb14225308ab2e539939010"}]}