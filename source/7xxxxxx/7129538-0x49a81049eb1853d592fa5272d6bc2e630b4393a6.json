{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/common/IDatabase.sol\r\n\r\ninterface IDatabase {\r\n    \r\n    function createEntry() external payable returns (uint256);\r\n    function auth(uint256, address) external;\r\n    function deleteEntry(uint256) external;\r\n    function fundEntry(uint256) external payable;\r\n    function claimEntryFunds(uint256, uint256) external;\r\n    function updateEntryCreationFee(uint256) external;\r\n    function updateDatabaseDescription(string) external;\r\n    function addDatabaseTag(bytes32) external;\r\n    function updateDatabaseTag(uint8, bytes32) external;\r\n    function removeDatabaseTag(uint8) external;\r\n    function readEntryMeta(uint256) external view returns (\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    );\r\n    function getChaingearID() external view returns (uint256);\r\n    function getEntriesIDs() external view returns (uint256[]);\r\n    function getIndexByID(uint256) external view returns (uint256);\r\n    function getEntryCreationFee() external view returns (uint256);\r\n    function getEntriesStorage() external view returns (address);\r\n    function getSchemaDefinition() external view returns (string);\r\n    function getDatabaseBalance() external view returns (uint256);\r\n    function getDatabaseDescription() external view returns (string);\r\n    function getDatabaseTags() external view returns (bytes32[]);\r\n    function getDatabaseSafe() external view returns (address);\r\n    function getSafeBalance() external view returns (uint256);\r\n    function getDatabaseInitStatus() external view returns (bool);\r\n    function pause() external;\r\n    function unpause() external;\r\n    function transferAdminRights(address) external;\r\n    function getAdmin() external view returns (address);\r\n    function getPaused() external view returns (bool);\r\n    function transferOwnership(address) external;\r\n    function deletePayees() external;\r\n}\r\n\r\n// File: contracts/common/IDatabaseBuilder.sol\r\n\r\ninterface IDatabaseBuilder {\r\n    \r\n    function deployDatabase(\r\n        address[],\r\n        uint256[],\r\n        string,\r\n        string\r\n    ) external returns (IDatabase);\r\n    function setChaingearAddress(address) external;\r\n    function getChaingearAddress() external view returns (address);\r\n    function getOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/common/Safe.sol\r\n\r\n/**\r\n* @title Chaingear - the novel Ethereum database framework\r\n* @author cyber•Congress, Valery litvin (@litvintech)\r\n* @notice not audited, not recommend to use in mainnet\r\n*/\r\ncontract Safe {\r\n    \r\n    address private owner;\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        require(msg.sender == owner);\r\n    }\r\n\r\n    function claim(address _entryOwner, uint256 _amount)\r\n        external\r\n    {\r\n        require(msg.sender == owner);\r\n        require(_amount <= address(this).balance);\r\n        require(_entryOwner != address(0));\r\n        \r\n        _entryOwner.transfer(_amount);\r\n    }\r\n\r\n    function getOwner()\r\n        external\r\n        view\r\n        returns(address)\r\n    {\r\n        return owner;\r\n    }\r\n}\r\n\r\n// File: contracts/common/IChaingear.sol\r\n\r\ninterface IChaingear {\r\n    \r\n    function addDatabaseBuilderVersion(\r\n        string,\r\n        IDatabaseBuilder,\r\n        string,\r\n        string\r\n    ) external;\r\n    function updateDatabaseBuilderDescription(string, string) external;\r\n    function depricateDatabaseBuilder(string) external;\r\n    function createDatabase(\r\n        string,\r\n        address[],\r\n        uint256[],\r\n        string,\r\n        string\r\n    ) external payable returns (address, uint256);\r\n    function deleteDatabase(uint256) external;\r\n    function fundDatabase(uint256) external payable;\r\n    function claimDatabaseFunds(uint256, uint256) external;\r\n    function updateCreationFee(uint256) external;\r\n    function getAmountOfBuilders() external view returns (uint256);\r\n    function getBuilderByID(uint256) external view returns(string);\r\n    function getDatabaseBuilder(string) external view returns(address, string, string, bool);\r\n    function getDatabasesIDs() external view returns (uint256[]);\r\n    function getDatabaseIDByAddress(address) external view returns (uint256);\r\n    function getDatabaseAddressByName(string) external view returns (address);\r\n    function getDatabaseSymbolByID(uint256) external view returns (string);\r\n    function getDatabaseIDBySymbol(string) external view returns (uint256);\r\n    function getDatabase(uint256) external view returns (\r\n        string,\r\n        string,\r\n        address,\r\n        string,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    );\r\n    function getDatabaseBalance(uint256) external view returns (uint256, uint256);\r\n    function getChaingearDescription() external pure returns (string);\r\n    function getCreationFeeWei() external view returns (uint256);\r\n    function getSafeBalance() external view returns (uint256);\r\n    function getSafeAddress() external view returns (address);\r\n    function getNameExist(string) external view returns (bool);\r\n    function getSymbolExist(string) external view returns (bool);\r\n}\r\n\r\n// File: contracts/common/PaymentSplitter.sol\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract can be used when payments need to be received by a group\r\n * of people and split proportionately to some number of shares they own.\r\n */\r\ncontract PaymentSplitter {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal totalShares;\r\n    uint256 internal totalReleased;\r\n\r\n    mapping(address => uint256) internal shares;\r\n    mapping(address => uint256) internal released;\r\n    address[] internal payees;\r\n    \r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    constructor (address[] _payees, uint256[] _shares)\r\n        public\r\n        payable\r\n    {\r\n        _initializePayess(_payees, _shares);\r\n    }\r\n\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        emit PaymentReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function getTotalShares()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalShares;\r\n    }\r\n\r\n    function getTotalReleased()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalReleased;\r\n    }\r\n\r\n    function getShares(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return shares[_account];\r\n    }\r\n\r\n    function getReleased(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return released[_account];\r\n    }\r\n\r\n    function getPayee(uint256 _index)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return payees[_index];\r\n    }\r\n    \r\n    function getPayeesCount() \r\n        external\r\n        view\r\n        returns (uint256)\r\n    {   \r\n        return payees.length;\r\n    }\r\n\r\n    function release(address _account) \r\n        public\r\n    {\r\n        require(shares[_account] > 0);\r\n\r\n        uint256 totalReceived = address(this).balance.add(totalReleased);\r\n        uint256 payment = totalReceived.mul(shares[_account]).div(totalShares).sub(released[_account]);\r\n\r\n        require(payment != 0);\r\n\r\n        released[_account] = released[_account].add(payment);\r\n        totalReleased = totalReleased.add(payment);\r\n\r\n        _account.transfer(payment);\r\n        \r\n        emit PaymentReleased(_account, payment);\r\n    }\r\n    \r\n    function _initializePayess(address[] _payees, uint256[] _shares)\r\n        internal\r\n    {\r\n        require(payees.length == 0);\r\n        require(_payees.length == _shares.length);\r\n        require(_payees.length > 0 && _payees.length <= 8);\r\n\r\n        for (uint256 i = 0; i < _payees.length; i++) {\r\n            _addPayee(_payees[i], _shares[i]);\r\n        }\r\n    }\r\n\r\n    function _addPayee(\r\n        address _account,\r\n        uint256 _shares\r\n    ) \r\n        internal\r\n    {\r\n        require(_account != address(0));\r\n        require(_shares > 0);\r\n        require(shares[_account] == 0);\r\n\r\n        payees.push(_account);\r\n        shares[_account] = _shares;\r\n        totalShares = totalShares.add(_shares);\r\n        \r\n        emit PayeeAdded(_account, _shares);\r\n    }\r\n}\r\n\r\n// File: contracts/chaingear/FeeSplitterChaingear.sol\r\n\r\ncontract FeeSplitterChaingear is PaymentSplitter, Ownable {\r\n    \r\n    event PayeeAddressChanged(\r\n        uint8 payeeIndex, \r\n        address oldAddress, \r\n        address newAddress\r\n    );\r\n\r\n    constructor(address[] _payees, uint256[] _shares)\r\n        public\r\n        payable\r\n        PaymentSplitter(_payees, _shares)\r\n    { }\r\n    \r\n    function changePayeeAddress(uint8 _payeeIndex, address _newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_payeeIndex < 12);\r\n        require(payees[_payeeIndex] != _newAddress);\r\n        \r\n        address oldAddress = payees[_payeeIndex];\r\n        shares[_newAddress] = shares[oldAddress];\r\n        released[_newAddress] = released[oldAddress];\r\n        payees[_payeeIndex] = _newAddress;\r\n\r\n        delete shares[oldAddress];\r\n        delete released[oldAddress];\r\n\r\n        emit PayeeAddressChanged(_payeeIndex, oldAddress, _newAddress);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/common/ERC721MetadataValidation.sol\r\n\r\nlibrary ERC721MetadataValidation {\r\n\r\n    function validateName(string _base) \r\n        internal\r\n        pure\r\n    {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            require(_baseBytes[i] >= 0x61 && _baseBytes[i] <= 0x7A || _baseBytes[i] >= 0x30 && _baseBytes[i] <= 0x39 || _baseBytes[i] == 0x2D);\r\n        }\r\n    }\r\n\r\n    function validateSymbol(string _base) \r\n        internal\r\n        pure\r\n    {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            require(_baseBytes[i] >= 0x41 && _baseBytes[i] <= 0x5A || _baseBytes[i] >= 0x30 && _baseBytes[i] <= 0x39);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/chaingear/Chaingear.sol\r\n\r\n/**\r\n* @title Chaingear - the novel Ethereum database framework\r\n* @author cyber•Congress, Valery litvin (@litvintech)\r\n* @notice not audited, not recommend to use in mainnet\r\n*/\r\ncontract Chaingear is IChaingear, Ownable, SupportsInterfaceWithLookup, Pausable, FeeSplitterChaingear, ERC721Token {\r\n\r\n    using SafeMath for uint256;\r\n    using ERC721MetadataValidation for string;\r\n\r\n    /*\r\n    *  Storage\r\n    */\r\n\r\n    struct DatabaseMeta {\r\n        IDatabase databaseContract;\r\n        address creatorOfDatabase;\r\n        string versionOfDatabase;\r\n        string linkABI;\r\n        uint256 createdTimestamp;\r\n        uint256 currentWei;\r\n        uint256 accumulatedWei;\r\n    }\r\n\r\n    struct DatabaseBuilder {\r\n        IDatabaseBuilder builderAddress;\r\n        string linkToABI;\r\n        string description;\r\n        bool operational;\r\n    }\r\n\r\n    DatabaseMeta[] private databases;\r\n    mapping(string => bool) private databasesNamesIndex;\r\n    mapping(string => bool) private databasesSymbolsIndex;\r\n\r\n    uint256 private headTokenID = 0;\r\n    mapping(address => uint256) private databasesIDsByAddressesIndex;\r\n    mapping(string => address) private databasesAddressesByNameIndex;\r\n    mapping(uint256 => string) private databasesSymbolsByIDIndex;\r\n    mapping(string => uint256) private databasesIDsBySymbolIndex;\r\n\r\n    uint256 private amountOfBuilders = 0;\r\n    mapping(uint256 => string) private buildersVersionIndex;\r\n    mapping(string => DatabaseBuilder) private buildersVersion;\r\n\r\n    Safe private chaingearSafe;\r\n    uint256 private databaseCreationFeeWei = 1 finney;\r\n\r\n    string private constant CHAINGEAR_DESCRIPTION = \"The novel Ethereum database framework\";\r\n    bytes4 private constant INTERFACE_CHAINGEAR_EULER_ID = 0xea1db66f; \r\n    bytes4 private constant INTERFACE_DATABASE_V1_EULER_ID = 0xf2c320c4;\r\n    bytes4 private constant INTERFACE_DATABASE_BUILDER_EULER_ID = 0xce8bbf93;\r\n    \r\n    /*\r\n    *  Events\r\n    */\r\n    event DatabaseBuilderAdded(\r\n        string version,\r\n        IDatabaseBuilder builderAddress,\r\n        string linkToABI,\r\n        string description\r\n    );\r\n    event DatabaseDescriptionUpdated(string version, string description);\r\n    event DatabaseBuilderDepricated(string version);\r\n    event DatabaseCreated(\r\n        string name,\r\n        address databaseAddress,\r\n        address creatorAddress,\r\n        uint256 databaseChaingearID\r\n    );\r\n    event DatabaseDeleted(\r\n        string name,\r\n        address databaseAddress,\r\n        address creatorAddress,\r\n        uint256 databaseChaingearID\r\n    );\r\n    event DatabaseFunded(\r\n        uint256 databaseID,\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n    event DatabaseFundsClaimed(\r\n        uint256 databaseID,\r\n        address claimer,\r\n        uint256 amount\r\n    );    \r\n    event CreationFeeUpdated(uint256 newFee);\r\n\r\n    /*\r\n    *  Constructor\r\n    */\r\n\r\n    constructor(address[] _beneficiaries, uint256[] _shares)\r\n        public\r\n        ERC721Token (\"CHAINGEAR\", \"CHG\")\r\n        FeeSplitterChaingear (_beneficiaries, _shares)\r\n    {\r\n        chaingearSafe = new Safe();\r\n        _registerInterface(INTERFACE_CHAINGEAR_EULER_ID);\r\n    }\r\n\r\n    /*\r\n    *  Modifiers\r\n    */\r\n\r\n    modifier onlyOwnerOf(uint256 _databaseID){\r\n        require(ownerOf(_databaseID) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /*\r\n    *  External functions\r\n    */\r\n\r\n    function addDatabaseBuilderVersion(\r\n        string _version,\r\n        IDatabaseBuilder _builderAddress,\r\n        string _linkToABI,\r\n        string _description\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        require(buildersVersion[_version].builderAddress == address(0));\r\n\r\n        SupportsInterfaceWithLookup support = SupportsInterfaceWithLookup(_builderAddress);\r\n        require(support.supportsInterface(INTERFACE_DATABASE_BUILDER_EULER_ID));\r\n\r\n        buildersVersion[_version] = (DatabaseBuilder(\r\n        {\r\n            builderAddress: _builderAddress,\r\n            linkToABI: _linkToABI,\r\n            description: _description,\r\n            operational: true\r\n        }));\r\n        buildersVersionIndex[amountOfBuilders] = _version;\r\n        amountOfBuilders = amountOfBuilders.add(1);\r\n        \r\n        emit DatabaseBuilderAdded(\r\n            _version,\r\n            _builderAddress,\r\n            _linkToABI,\r\n            _description\r\n        );\r\n    }\r\n\r\n    function updateDatabaseBuilderDescription(string _version, string _description)\r\n        external\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        require(buildersVersion[_version].builderAddress != address(0));\r\n        buildersVersion[_version].description = _description;    \r\n        emit DatabaseDescriptionUpdated(_version, _description);\r\n    }\r\n    \r\n    function depricateDatabaseBuilder(string _version)\r\n        external\r\n        onlyOwner\r\n        whenPaused\r\n    {\r\n        require(buildersVersion[_version].builderAddress != address(0));\r\n        require(buildersVersion[_version].operational == true);\r\n        buildersVersion[_version].operational = false;\r\n        emit DatabaseBuilderDepricated(_version);\r\n    }\r\n\r\n    function createDatabase(\r\n        string    _version,\r\n        address[] _beneficiaries,\r\n        uint256[] _shares,\r\n        string    _name,\r\n        string    _symbol\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns (address, uint256)\r\n    {\r\n        _name.validateName();\r\n        _symbol.validateSymbol();\r\n        require(buildersVersion[_version].builderAddress != address(0));\r\n        require(buildersVersion[_version].operational == true);\r\n        require(databaseCreationFeeWei == msg.value);\r\n        require(databasesNamesIndex[_name] == false);\r\n        require(databasesSymbolsIndex[_symbol] == false);\r\n\r\n        return _deployDatabase(\r\n            _version,\r\n            _beneficiaries,\r\n            _shares,\r\n            _name,\r\n            _symbol\r\n        );\r\n    }\r\n\r\n    function deleteDatabase(uint256 _databaseID)\r\n        external\r\n        onlyOwnerOf(_databaseID)\r\n        whenNotPaused\r\n    {\r\n        uint256 databaseIndex = allTokensIndex[_databaseID];\r\n        IDatabase database = databases[databaseIndex].databaseContract;\r\n        require(database.getSafeBalance() == uint256(0));\r\n        require(database.getPaused() == true);\r\n        \r\n        string memory databaseName = ERC721(database).name();\r\n        string memory databaseSymbol = ERC721(database).symbol();\r\n        \r\n        delete databasesNamesIndex[databaseName];\r\n        delete databasesSymbolsIndex[databaseSymbol];\r\n        delete databasesIDsByAddressesIndex[database];  \r\n        delete databasesIDsBySymbolIndex[databaseSymbol];\r\n        delete databasesSymbolsByIDIndex[_databaseID];\r\n\r\n        uint256 lastDatabaseIndex = databases.length.sub(1);\r\n        DatabaseMeta memory lastDatabase = databases[lastDatabaseIndex];\r\n        databases[databaseIndex] = lastDatabase;\r\n        delete databases[lastDatabaseIndex];\r\n        databases.length--;\r\n\r\n        super._burn(msg.sender, _databaseID);\r\n        database.transferOwnership(msg.sender);\r\n        \r\n        emit DatabaseDeleted(\r\n            databaseName,\r\n            database,\r\n            msg.sender,\r\n            _databaseID\r\n        );\r\n    }\r\n\r\n    function fundDatabase(uint256 _databaseID)\r\n        external\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        require(exists(_databaseID) == true);\r\n        uint256 databaseIndex = allTokensIndex[_databaseID];\r\n\r\n        uint256 currentWei = databases[databaseIndex].currentWei.add(msg.value);\r\n        databases[databaseIndex].currentWei = currentWei;\r\n\r\n        uint256 accumulatedWei = databases[databaseIndex].accumulatedWei.add(msg.value);\r\n        databases[databaseIndex].accumulatedWei = accumulatedWei;\r\n\r\n        emit DatabaseFunded(_databaseID, msg.sender, msg.value);\r\n        address(chaingearSafe).transfer(msg.value);\r\n    }\r\n\r\n    function claimDatabaseFunds(uint256 _databaseID, uint256 _amount)\r\n        external\r\n        onlyOwnerOf(_databaseID)\r\n        whenNotPaused\r\n    {\r\n        uint256 databaseIndex = allTokensIndex[_databaseID];\r\n\r\n        uint256 currentWei = databases[databaseIndex].currentWei;\r\n        require(_amount <= currentWei);\r\n\r\n        databases[databaseIndex].currentWei = currentWei.sub(_amount);\r\n\r\n        emit DatabaseFundsClaimed(_databaseID, msg.sender, _amount);\r\n        chaingearSafe.claim(msg.sender, _amount);\r\n    }\r\n\r\n    function updateCreationFee(uint256 _newFee)\r\n        external\r\n        onlyOwner\r\n        whenPaused\r\n    {\r\n        databaseCreationFeeWei = _newFee;\r\n        emit CreationFeeUpdated(_newFee);\r\n    }\r\n\r\n    /*\r\n    *  Views\r\n    */\r\n\r\n    function getAmountOfBuilders()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return amountOfBuilders;\r\n    }\r\n\r\n    function getBuilderByID(uint256 _id)\r\n        external\r\n        view\r\n        returns(string)\r\n    {\r\n        return buildersVersionIndex[_id];\r\n    }\r\n\r\n    function getDatabaseBuilder(string _version)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            string,\r\n            string,\r\n            bool\r\n        )\r\n    {\r\n        return(\r\n            buildersVersion[_version].builderAddress,\r\n            buildersVersion[_version].linkToABI,\r\n            buildersVersion[_version].description,\r\n            buildersVersion[_version].operational\r\n        );\r\n    }\r\n\r\n    function getDatabasesIDs()\r\n        external\r\n        view\r\n        returns(uint256[])\r\n    {\r\n        return allTokens;\r\n    }\r\n\r\n    function getDatabaseIDByAddress(address _databaseAddress)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 databaseID = databasesIDsByAddressesIndex[_databaseAddress];\r\n        return databaseID;\r\n    }\r\n    \r\n    function getDatabaseAddressByName(string _name)\r\n        external\r\n        view\r\n        returns(address)\r\n    {\r\n        return databasesAddressesByNameIndex[_name];\r\n    }\r\n\r\n    function getDatabaseSymbolByID(uint256 _databaseID)\r\n        external\r\n        view\r\n        returns(string)\r\n    {\r\n        return databasesSymbolsByIDIndex[_databaseID];\r\n    }\r\n\r\n    function getDatabaseIDBySymbol(string _symbol)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return databasesIDsBySymbolIndex[_symbol];\r\n    }\r\n\r\n    function getDatabase(uint256 _databaseID)\r\n        external\r\n        view\r\n        returns (\r\n            string,\r\n            string,\r\n            address,\r\n            string,\r\n            uint256,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 databaseIndex = allTokensIndex[_databaseID];\r\n        IDatabase databaseAddress = databases[databaseIndex].databaseContract;\r\n\r\n        return (\r\n            ERC721(databaseAddress).name(),\r\n            ERC721(databaseAddress).symbol(),\r\n            databaseAddress,\r\n            databases[databaseIndex].versionOfDatabase,\r\n            databases[databaseIndex].createdTimestamp,\r\n            databaseAddress.getAdmin(),\r\n            ERC721(databaseAddress).totalSupply()\r\n        );\r\n    }\r\n\r\n    function getDatabaseBalance(uint256 _databaseID)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 databaseIndex = allTokensIndex[_databaseID];\r\n\r\n        return (\r\n            databases[databaseIndex].currentWei,\r\n            databases[databaseIndex].accumulatedWei\r\n        );\r\n    }\r\n\r\n    function getChaingearDescription()\r\n        external\r\n        pure\r\n        returns (string)\r\n    {\r\n        return CHAINGEAR_DESCRIPTION;\r\n    }\r\n\r\n    function getCreationFeeWei()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return databaseCreationFeeWei;\r\n    }\r\n\r\n    function getSafeBalance()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(chaingearSafe).balance;\r\n    }\r\n\r\n    function getSafeAddress()\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return chaingearSafe;\r\n    }\r\n\r\n    function getNameExist(string _name)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return databasesNamesIndex[_name];\r\n    }\r\n\r\n    function getSymbolExist(string _symbol)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return databasesSymbolsIndex[_symbol];\r\n    }\r\n\r\n    /*\r\n    *  Public functions\r\n    */\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        uint256 databaseIndex = allTokensIndex[_tokenId];\r\n        IDatabase database = databases[databaseIndex].databaseContract;\r\n        require(address(database).balance == 0);\r\n        require(database.getPaused() == true);\r\n        super.transferFrom(_from, _to, _tokenId);\r\n        \r\n        IDatabase databaseAddress = databases[databaseIndex].databaseContract;\r\n        databaseAddress.deletePayees();\r\n        databaseAddress.transferAdminRights(_to);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        safeTransferFrom(\r\n            _from,\r\n            _to,\r\n            _tokenId,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        transferFrom(_from, _to, _tokenId);\r\n\r\n        require(\r\n            checkAndCallSafeTransfer(\r\n                _from,\r\n                _to,\r\n                _tokenId,\r\n                _data\r\n        ));\r\n    }\r\n\r\n    /*\r\n    *  Private functions\r\n    */\r\n\r\n    function _deployDatabase(\r\n        string    _version,\r\n        address[] _beneficiaries,\r\n        uint256[] _shares,\r\n        string    _name,\r\n        string    _symbol\r\n    )\r\n        private\r\n        returns (address, uint256)\r\n    {\r\n        IDatabaseBuilder builder = buildersVersion[_version].builderAddress;\r\n        IDatabase databaseContract = builder.deployDatabase(\r\n            _beneficiaries,\r\n            _shares,\r\n            _name,\r\n            _symbol\r\n        );\r\n\r\n        address databaseAddress = address(databaseContract);\r\n\r\n        SupportsInterfaceWithLookup support = SupportsInterfaceWithLookup(databaseAddress);\r\n        require(support.supportsInterface(INTERFACE_DATABASE_V1_EULER_ID));\r\n        require(support.supportsInterface(InterfaceId_ERC721));\r\n        require(support.supportsInterface(InterfaceId_ERC721Metadata));\r\n        require(support.supportsInterface(InterfaceId_ERC721Enumerable));\r\n\r\n        DatabaseMeta memory database = (DatabaseMeta(\r\n        {\r\n            databaseContract: databaseContract,\r\n            creatorOfDatabase: msg.sender,\r\n            versionOfDatabase: _version,\r\n            linkABI: buildersVersion[_version].linkToABI,\r\n            createdTimestamp: block.timestamp,\r\n            currentWei: 0,\r\n            accumulatedWei: 0\r\n        }));\r\n\r\n        databases.push(database);\r\n\r\n        databasesNamesIndex[_name] = true;\r\n        databasesSymbolsIndex[_symbol] = true;\r\n\r\n        uint256 newTokenID = headTokenID;\r\n        databasesIDsByAddressesIndex[databaseAddress] = newTokenID;\r\n        super._mint(msg.sender, newTokenID);\r\n        databasesSymbolsByIDIndex[newTokenID] = _symbol;\r\n        databasesIDsBySymbolIndex[_symbol] = newTokenID;\r\n        databasesAddressesByNameIndex[_name] = databaseAddress;\r\n        headTokenID = headTokenID.add(1);\r\n\r\n        emit DatabaseCreated(\r\n            _name,\r\n            databaseAddress,\r\n            msg.sender,\r\n            newTokenID\r\n        );\r\n\r\n        databaseContract.transferAdminRights(msg.sender);\r\n        return (databaseAddress, newTokenID);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfBuilders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"}],\"name\":\"fundDatabase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayeesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getNameExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimDatabaseFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"}],\"name\":\"getDatabaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"}],\"name\":\"deleteDatabase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChaingearDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDatabaseAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreationFeeWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_builderAddress\",\"type\":\"address\"},{\"name\":\"_linkToABI\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addDatabaseBuilderVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getDatabaseIDBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSafeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"}],\"name\":\"getDatabaseSymbolByID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBuilderByID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"getDatabaseBuilder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payeeIndex\",\"type\":\"uint8\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changePayeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"updateDatabaseBuilderDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_databaseAddress\",\"type\":\"address\"}],\"name\":\"getDatabaseIDByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPayee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSafeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getSymbolExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createDatabase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_databaseID\",\"type\":\"uint256\"}],\"name\":\"getDatabase\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDatabasesIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"depricateDatabaseBuilder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"builderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"linkToABI\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"DatabaseBuilderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"DatabaseDescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"}],\"name\":\"DatabaseBuilderDepricated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"databaseAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"databaseChaingearID\",\"type\":\"uint256\"}],\"name\":\"DatabaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"databaseAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"databaseChaingearID\",\"type\":\"uint256\"}],\"name\":\"DatabaseDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"databaseID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DatabaseFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"databaseID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DatabaseFundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"CreationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payeeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PayeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"}]","ContractName":"Chaingear","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b52b7eda722249499e3a28b5bb6c778ee0ac462c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://3516617b9e9fa2cba89646e03cd0498b303e32bf1936f2bd93ff88f6aa21c801"}]}