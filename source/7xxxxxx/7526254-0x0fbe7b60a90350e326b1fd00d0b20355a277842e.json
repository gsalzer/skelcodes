{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * FUNCTIONS, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // MODIFIERS\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the new owner.\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender == newOwner, \"Only New Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0), \"Address is Null\");\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    \r\n    function transferOwnership(address _newOwner) public notNull(_newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /// @dev Allow the new owner to claim ownership and so proving that the newOwner is valid.\r\n    function acceptOwnership() public onlyNewOwner {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    // EVENTS\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"only when not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"only when paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event Pause();\r\n\r\n    event Unpause();\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\ncontract ERC20Interface {\r\n    /// total amount of tokens\r\n    function totalSupply() public view returns(uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // EVENTS\r\n    \r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // require(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20Token is Ownable, ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n    \r\n    // CONSTRUCTOR\r\n\r\n    constructor(uint256 initialAmount) public {\r\n        if (initialAmount == 0)\r\n            return;\r\n        balances[msg.sender] = initialAmount;\r\n        _totalSupply = initialAmount;\r\n        emit Transfer(address(0), msg.sender, initialAmount);\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    function totalSupply() public view returns(uint256 supply)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\r\n        return transferInternal(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* ALLOW FUNCTIONS */\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    */\r\n   \r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens   \r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public notNull(_spender) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowed[_from][msg.sender], \"insufficient tokens\");\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return transferInternal(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @notice internal send `_value` token to `_to` from `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) notNull(_to) returns (bool) {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }   \r\n\r\n    // PRIVATE FUNCTIONS\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is ERC20Token, Pausable {\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\n\r\n// module handling minting and burning of tokens and administration of minters\r\n\r\ncontract MintableToken is PausableToken\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) internal minters; // list of allowed minters\r\n\r\n    // MODIFIERS\r\n\r\n    modifier onlyMinter {\r\n        require(minters[msg.sender], \"Caller not minter\");\r\n        _; \r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() public {\r\n        addMinter(msg.sender);   // Set the owner as minter\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev  mint tokens to address\r\n    /// @notice mint `_value` token to `_to`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be minted\r\n    function mint(address _to, uint256 _value) public onlyMinter {\r\n        mintInternal(_to, _value);\r\n    }\r\n\r\n    /// @dev add minter\r\n    /// @notice add minter address `_newMinter`\r\n    /// @param _newMinter The address of the minter to add\r\n    function addMinter(address _newMinter) public notNull(_newMinter) onlyOwner {\r\n        if (minters[_newMinter])\r\n            return;\r\n        minters[_newMinter] = true;\r\n        emit AddMinter(_newMinter);\r\n    }\r\n\r\n    /// @dev remove minter \r\n    /// @notice remove minter address  `_oldMinter`\r\n    /// @param _oldMinter The address of the minter to remove\r\n    function removeMinter(address _oldMinter) public notNull(_oldMinter) onlyOwner {\r\n        if (!minters[_oldMinter])\r\n            return;\r\n        minters[_oldMinter] = false;\r\n        emit RemoveMinter(_oldMinter);\r\n    }\r\n\r\n    /// @dev check minter\r\n    /// @notice is address `_minter` a inter\r\n    /// @param _minter The address of the minter to check\r\n    function isMinter(address _minter) public notNull(_minter) view returns(bool)  {\r\n        return minters[_minter];\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @dev  mint tokens to address\r\n    /// @notice mint `_value` token to `_to`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be _totalSupply\r\n    function mintInternal(address _to, uint256 _value) internal notNull(_to) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    /// @dev burn tokens, e.g. when migrating\r\n    /// @notice burn `_value` token from `_from`\r\n    /// @param _from The address of the recipient\r\n    /// @param _value The amount of token to be _totalSupply from the callers account\r\n    function burn(address _from, uint256 _value) internal notNull(_from) {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // EVENTS\r\n    \r\n    event AddMinter(address indexed newMinter);\r\n    \r\n    event RemoveMinter(address indexed oldMinter);\r\n}\r\n\r\n/// @dev Migration Agent Base\r\ncontract MigrationAgent is Ownable, Pausable {\r\n\r\n    address public migrationToContract; // the contract to migrate to\r\n    address public migrationFromContract; // the conttactto migate from\r\n\r\n    // MODIFIERS\r\n    \r\n    modifier onlyMigrationFromContract() {\r\n        require(msg.sender == migrationFromContract, \"Only from migration contract\");\r\n        _;\r\n    }\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev set contract to migrate to \r\n    /// @param _toContract Then contract address to migrate to\r\n    function startMigrateToContract(address _toContract) public onlyOwner whenPaused {\r\n        migrationToContract = _toContract;\r\n        require(MigrationAgent(migrationToContract).isMigrationAgent(), \"not a migratable contract\");\r\n        emit StartMigrateToContract(address(this), _toContract);\r\n    }\r\n\r\n    /// @dev set contract to migrate from\r\n    /// @param _fromContract Then contract address to migrate from\r\n    function startMigrateFromContract(address _fromContract) public onlyOwner whenPaused {\r\n        migrationFromContract = _fromContract;\r\n        require(MigrationAgent(migrationFromContract).isMigrationAgent(), \"not a migratable contract\");\r\n        emit StartMigrateFromContract(_fromContract, address(this));\r\n    }\r\n\r\n    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\r\n    function migrate() public;   \r\n\r\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\r\n    /// @param _from The account to be migrated into new contract\r\n    /// @param _value The token balance to be migrated\r\n    function migrateFrom(address _from, uint256 _value) public returns(bool);\r\n\r\n    /// @dev is a valid migration agent\r\n    /// @return true if contract is a migratable contract\r\n    function isMigrationAgent() public pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // EVENTS\r\n\r\n    event StartMigrateToContract(address indexed fromContract, address indexed toContract);\r\n\r\n    event StartMigrateFromContract(address indexed fromContract, address indexed toContract);\r\n\r\n    event MigratedTo(address indexed owner, address indexed _contract, uint256 value);\r\n\r\n    event MigratedFrom(address indexed owner, address indexed _contract, uint256 value);\r\n}\r\n\r\n\r\ncontract ActiveBitcoinEtherCertificate is MintableToken, MigrationAgent {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"Active Bitcoin Ether Certificate\";\r\n    string constant public symbol = \"ABEC\";\r\n    uint8 constant public decimals = 5;\r\n    string constant public version = \"1.0.0.0\";\r\n\r\n    address public redeemAddress;\r\n    string public description;\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(address _redeemAddress) ERC20Token(0) notNull(_redeemAddress) public {\r\n        redeemAddress = _redeemAddress;\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    /// @notice update contract description to  `_text` \r\n    /// @param _text The new description\r\n    function updateDescription(string calldata _text) external onlyMinter {\r\n        description = _text;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /*\r\n        MIGRATE FUNCTIONS\r\n     */\r\n    // safe migrate function\r\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\r\n    /// @param _from The account to be migrated into new contract\r\n    /// @param _value The token balance to be migrated\r\n    function migrateFrom(address _from, uint256 _value) public onlyMigrationFromContract whenNotPaused returns(bool) {\r\n        mintInternal(_from, _value);\r\n\r\n        emit MigratedFrom(_from, migrationFromContract, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\r\n    function migrate() public whenNotPaused {\r\n        require(migrationToContract != address(0), \"not in migration mode\"); // revert if not in migrate mode\r\n        uint256 value = balanceOf(msg.sender);\r\n        require (value > 0, \"no balance\"); // revert if not value left to transfer\r\n        burn(msg.sender, value);\r\n        require(MigrationAgent(migrationToContract).migrateFrom(msg.sender, value)==true, \"migrateFrom must return true\");\r\n        emit MigratedTo(msg.sender, migrationToContract, value);\r\n    }\r\n\r\n    /*\r\n        Helper FUNCTIONS\r\n    */\r\n\r\n    /// @dev helper function to return foreign tokens accidental send to contract address\r\n    /// @param _tokenaddress Address of foreign ERC20 contract\r\n    /// @param _to Address to send foreign tokens to\r\n    function refundForeignTokens(address _tokenaddress,address _to) public notNull(_to) onlyMinter {\r\n        require(_tokenaddress != address(this), \"Must not be self\");\r\n        ERC20Interface token = ERC20Interface(_tokenaddress);\r\n\r\n        // transfer current balance for this contract to _to  in token contract\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.transfer.selector, _to, token.balanceOf(address(this))));\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }        \r\n    }\r\n\r\n    /// @notice minter transfer account tokens from one address `_from` to new token owner address `_to`. If `_to` is the redeem address then tokens will be burned \r\n    /// @param _from The address of the original token owner\r\n    /// @param _to The address of the new token owner\r\n    /// @return Whether the transfer was successful or not\r\n    function transferAccount(address _from, address _to) public onlyMinter returns (bool result) {\r\n        uint256 balance = balanceOf(_from);\r\n        if(_to == redeemAddress) {\r\n            result = transferInternal(_from, _to, balance);\r\n        } else {\r\n            result = super.transferInternal(_from, _to, balance);\r\n        }\r\n        emit TransferAccount(_from, _to);\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @notice internal send `_value` token to `_to` from `_from` \r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred \r\n    /// @return Whether the transfer was successful or not\r\n    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) returns (bool) {\r\n        require(_to == redeemAddress, \"Wrong destination address\");\r\n        // burn _value\r\n        balances[_from] = balances[_from].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        // report as transfer + burn \r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_to, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    event TransferAccount(address indexed _from, address indexed _to);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_toContract\",\"type\":\"address\"}],\"name\":\"startMigrateToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldMinter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrateFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenaddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refundForeignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAccount\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromContract\",\"type\":\"address\"}],\"name\":\"startMigrateFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_redeemAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateToContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"AddMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"RemoveMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ActiveBitcoinEtherCertificate","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abec0a9d4f357ef021ee5154d0d78361ef5943d8","Library":"","SwarmSource":"bzzr://c00fcea7c19ab458e48786a9d63b4c4c62cf93273210c79a0d904066db4b22f2"}]}