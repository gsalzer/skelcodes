{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owner parameters\r\n * @dev Define ownership parameters for this contract\r\n */\r\ncontract Owned { //This token contract is owned\r\n    address public owner; //Owner address is public\r\n    bool public lockSupply; //Supply Lock flag\r\n\r\n    /**\r\n     * @dev Contract constructor, define initial administrator\r\n     */\r\n    constructor() internal {\r\n        owner = 0xA0c6f96035d0FA5F44D781060F84A0Bc6B8D87Ee; //Set initial owner to contract creator\r\n        emit TransferOwnership(owner);\r\n    }\r\n\r\n    modifier onlyOwner() { //A modifier to define owner-only functions\r\n        require(msg.sender == owner, \"Not Allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier supplyLock() { //A modifier to lock supply-change transactions\r\n        require(lockSupply == false, \"Supply is locked\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set new owner address\r\n     * @param _newOwner The address to transfer administration to\r\n     */\r\n    function transferAdminship(address _newOwner) public onlyOwner { //Owner can be transfered\r\n        require(_newOwner != address(0), \"Not allowed\");\r\n        owner = _newOwner;\r\n        emit TransferOwnership(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set supply locks\r\n     * @param _set boolean flag (true | false)\r\n     */\r\n    function setSupplyLock(bool _set) public onlyOwner { //Only the owner can set a lock on supply\r\n        lockSupply = _set;\r\n        emit SetSupplyLock(lockSupply);\r\n    }\r\n\r\n    //All owner actions have a log for public review\r\n    event SetSupplyLock(bool _set);\r\n    event TransferOwnership(address indexed newAdminister);\r\n}\r\n\r\n/**\r\n * Token contract interface\r\n */\r\ncontract ERC20TokenInterface {\r\n    function balanceOf(address _owner) public view returns(uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title Token definition\r\n * @dev Define token parameters, including ERC20 ones\r\n */\r\ncontract ERC20Token is Owned, ERC20TokenInterface {\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances; //A mapping of all balances per address\r\n    mapping(address => mapping(address => uint256)) allowed; //A mapping of all allowances\r\n\r\n    /**\r\n     * @dev Get the balance of an specified address.\r\n     * @param _owner The address to be query.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256 value) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token to a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token from an address to another specified address using allowance\r\n     * @param _from The address where token comes.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Assign allowance to an specified address to use the owner balance\r\n     * @param _spender The address to be allowed to spend.\r\n     * @param _value The amount to be allowed.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the allowance of an specified address to use another address balance.\r\n     * @param _owner The address of the owner of the tokens.\r\n     * @param _spender The address of the allowed spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Burn token of an specified address.\r\n     * @param _value amount to burn.\r\n     */\r\n    function burnTokens(uint256 _value) public onlyOwner {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        emit Burned(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Log Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Asset\r\n * @dev Initial supply creation\r\n */\r\ncontract Asset is ERC20Token {\r\n    string public name = 'Orionix';\r\n    uint8 public decimals = 18;\r\n    string public symbol = 'ORX';\r\n    string public version = '2';\r\n\r\n    constructor() public {\r\n        totalSupply = 600000000 * (10 ** uint256(decimals)); //initial token creation\r\n        balances[0xA0c6f96035d0FA5F44D781060F84A0Bc6B8D87Ee] = totalSupply;\r\n        emit Transfer(\r\n            address(0),\r\n            0xA0c6f96035d0FA5F44D781060F84A0Bc6B8D87Ee,\r\n            balances[0xA0c6f96035d0FA5F44D781060F84A0Bc6B8D87Ee]);\r\n    }\r\n\r\n    /**\r\n     *@dev Function to handle callback calls\r\n     */\r\n    function () external {\r\n        revert(\"This contract cannot receive direct payments or fallback calls\");\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setSupplyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetSupplyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"Asset","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e55b4119020e52b252d7d7a1c2e9ad7e7c5a032cbbd764ff9eff52b17a4d3e45"}]}