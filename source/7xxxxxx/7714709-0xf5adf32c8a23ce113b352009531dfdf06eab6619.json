{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract OwnableSecondary is Ownable {\r\n  address private _primary;\r\n\r\n  event PrimaryTransferred(\r\n    address recipient\r\n  );\r\n\r\n  /**\r\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n   */\r\n  constructor() internal {\r\n    _primary = msg.sender;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called from any account other than the primary or the owner.\r\n   */\r\n   modifier onlyPrimaryOrOwner() {\r\n     require(msg.sender == _primary || msg.sender == owner(), \"not the primary user nor the owner\");\r\n     _;\r\n   }\r\n\r\n   /**\r\n    * @dev Reverts if called from any account other than the primary.\r\n    */\r\n  modifier onlyPrimary() {\r\n    require(msg.sender == _primary, \"not the primary user\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the primary.\r\n   */\r\n  function primary() public view returns (address) {\r\n    return _primary;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers contract to a new primary.\r\n   * @param recipient The address of new primary.\r\n   */\r\n  function transferPrimary(address recipient) public onlyOwner {\r\n    require(recipient != address(0), \"new primary address is null\");\r\n    _primary = recipient;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ImmutableEternalStorageInterface is OwnableSecondary {\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  function createUint(bytes32 key, uint value) external;\r\n\r\n  function createString(bytes32 key, string calldata value) external;\r\n\r\n  function createAddress(bytes32 key, address value) external;\r\n\r\n  function createBytes(bytes32 key, bytes calldata value) external;\r\n\r\n  function createBytes32(bytes32 key, bytes32 value) external;\r\n\r\n  function createBool(bytes32 key, bool value) external;\r\n\r\n  function createInt(bytes32 key, int value) external;\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function getUint(bytes32 key) external view returns(uint);\r\n\r\n  function uintExists(bytes32 key) external view returns(bool);\r\n\r\n  function getString(bytes32 key) external view returns(string memory);\r\n\r\n  function stringExists(bytes32 key) external view returns(bool);\r\n\r\n  function getAddress(bytes32 key) external view returns(address);\r\n\r\n  function addressExists(bytes32 key) external view returns(bool);\r\n\r\n  function getBytes(bytes32 key) external view returns(bytes memory);\r\n\r\n  function bytesExists(bytes32 key) external view returns(bool);\r\n\r\n  function getBytes32(bytes32 key) external view returns(bytes32);\r\n\r\n  function bytes32Exists(bytes32 key) external view returns(bool);\r\n\r\n  function getBool(bytes32 key) external view returns(bool);\r\n\r\n  function boolExists(bytes32 key) external view returns(bool);\r\n\r\n  function getInt(bytes32 key) external view returns(int);\r\n\r\n  function intExists(bytes32 key) external view returns(bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract StatementRegisteryInterface is OwnableSecondary {\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external returns(bytes32);\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function statementIdsByBuildingPermit(string calldata id) external view returns(bytes32[] memory);\r\n\r\n  function statementExists(bytes32 statementId) public view returns(bool);\r\n\r\n  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory);\r\n\r\n  function getStatementPcId(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementDestination(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory);\r\n\r\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory);\r\n\r\n  function getAllStatements() external view returns(bytes32[] memory);\r\n}\r\n\r\n\r\n\r\ncontract StatementRegistery is StatementRegisteryInterface {\r\n  ImmutableEternalStorageInterface public dataStore;\r\n  string[] public buildingPermitIds;\r\n  mapping(bytes32 => uint) public statementCountByBuildingPermitHash;\r\n\r\n  event NewStatementEvent(string indexed buildingPermitId, bytes32 statementId);\r\n\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  constructor(address immutableDataStore) public {\r\n    require(immutableDataStore != address(0), \"null data store\");\r\n    dataStore = ImmutableEternalStorageInterface(immutableDataStore);\r\n  }\r\n\r\n  /* Only to be called by the Controller contract */\r\n  function recordStatement(\r\n    string calldata buildingPermitId,\r\n    uint[] calldata statementDataLayout,\r\n    bytes calldata statementData\r\n  ) external onlyPrimaryOrOwner returns(bytes32) {\r\n    bytes32 statementId = generateNewStatementId(buildingPermitId);\r\n\r\n    assert(!statementExists(statementId));\r\n\r\n    recordStatementKeyValues(statementId, statementDataLayout, statementData);\r\n\r\n    dataStore.createBool(keccak256(abi.encodePacked(statementId)), true);\r\n    updateStatementCountByBuildingPermit(buildingPermitId);\r\n\r\n    emit NewStatementEvent(buildingPermitId, statementId);\r\n\r\n    return statementId;\r\n  }\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function statementIdsByBuildingPermit(string calldata buildingPermitId) external view returns(bytes32[] memory) {\r\n    uint nbStatements = statementCountByBuildingPermit(buildingPermitId);\r\n\r\n    bytes32[] memory res = new bytes32[](nbStatements);\r\n\r\n    while(nbStatements > 0) {\r\n      nbStatements--;\r\n      res[nbStatements] = computeStatementId(buildingPermitId,nbStatements);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  function statementExists(bytes32 statementId) public view returns(bool) {\r\n    return dataStore.boolExists(keccak256(abi.encodePacked(statementId)));\r\n  }\r\n\r\n  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory) {\r\n    return dataStore.getString(keccak256(abi.encodePacked(statementId, key)));\r\n  }\r\n\r\n  function getStatementPcId(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"pcId\");\r\n  }\r\n\r\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"acquisitionDate\");\r\n  }\r\n\r\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"recipient\");\r\n  }\r\n\r\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"architect\");\r\n  }\r\n\r\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"cityHall\");\r\n  }\r\n\r\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"maximumHeight\");\r\n  }\r\n\r\n  function getStatementDestination(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"destination\");\r\n  }\r\n\r\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"siteArea\");\r\n  }\r\n\r\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory) {\r\n    return getStatementString(statementId, \"buildingArea\");\r\n  }\r\n\r\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory) {\r\n    return getStatementString(statementId, \"nearImage\");\r\n  }\r\n\r\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory) {\r\n    return getStatementString(statementId, \"farImage\");\r\n  }\r\n\r\n  function getAllStatements() external view returns(bytes32[] memory) {\r\n    uint nbStatements = 0;\r\n    for(uint idx = 0; idx < buildingPermitIds.length; idx++) {\r\n      nbStatements += statementCountByBuildingPermit(buildingPermitIds[idx]);\r\n    }\r\n\r\n    bytes32[] memory res = new bytes32[](nbStatements);\r\n\r\n    uint statementIdx = 0;\r\n    for(uint idx = 0; idx < buildingPermitIds.length; idx++) {\r\n      nbStatements = statementCountByBuildingPermit(buildingPermitIds[idx]);\r\n      while(nbStatements > 0){\r\n        nbStatements--;\r\n        res[statementIdx] = computeStatementId(buildingPermitIds[idx],nbStatements);\r\n        statementIdx++;\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**********************/\r\n  /** INTERNAL - WRITE **/\r\n  /**********************/\r\n  function updateStatementCountByBuildingPermit(string memory buildingPermitId) internal {\r\n    uint oldCount = statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))];\r\n\r\n    if(oldCount == 0) { // first record for this building permit id\r\n      buildingPermitIds.push(buildingPermitId);\r\n    }\r\n\r\n    uint newCount = oldCount + 1;\r\n    assert(newCount > oldCount);\r\n    statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))] = newCount;\r\n  }\r\n\r\n  function recordStatementKeyValues(\r\n    bytes32 statementId,\r\n    uint[] memory statementDataLayout,\r\n    bytes memory statementData) internal {\r\n    string[] memory infos = parseStatementStrings(statementDataLayout, statementData);\r\n\r\n    require(infos.length == 11, \"the statement key values array length is incorrect\");\r\n\r\n    /** enforce the rules given in the legal specifications **/\r\n    // required infos\r\n    require(!isEmpty(infos[0]) && !isEmpty(infos[1]), \"acquisitionDate and pcId are required\");\r\n    require(!isEmpty(infos[9]) && !isEmpty(infos[10]), \"missing image\");\r\n\r\n    // < 2 missing non required info\r\n    uint nbMissingNRIs = (isEmpty(infos[2]) ? 1 : 0) + (isEmpty(infos[3]) ? 1 : 0) + (isEmpty(infos[4]) ? 1 : 0) + (isEmpty(infos[7]) ? 1 : 0);\r\n    require(nbMissingNRIs <= 2, \"> 2 missing non required info\");\r\n\r\n    // mo missing mandatory info or one missing mandatory info and 0 missing non required info\r\n    uint nbMissingMIs = (isEmpty(infos[5]) ? 1 : 0) + (isEmpty(infos[6]) ? 1 : 0) + (isEmpty(infos[8]) ? 1 : 0);\r\n    require(nbMissingMIs == 0 || (nbMissingMIs == 1 && nbMissingNRIs == 0), \"missing mandatory info\");\r\n\r\n    recordStatementString(statementId, \"pcId\", infos[0]);\r\n    recordStatementString(statementId, \"acquisitionDate\", infos[1]);\r\n    if(!isEmpty(infos[2])) recordStatementString(statementId, \"recipient\", infos[2]);\r\n    if(!isEmpty(infos[3])) recordStatementString(statementId, \"architect\", infos[3]);\r\n    if(!isEmpty(infos[4])) recordStatementString(statementId, \"cityHall\", infos[4]);\r\n    if(!isEmpty(infos[5])) recordStatementString(statementId, \"maximumHeight\", infos[5]);\r\n    if(!isEmpty(infos[6])) recordStatementString(statementId, \"destination\", infos[6]);\r\n    if(!isEmpty(infos[7])) recordStatementString(statementId, \"siteArea\", infos[7]);\r\n    if(!isEmpty(infos[8])) recordStatementString(statementId, \"buildingArea\", infos[8]);\r\n    recordStatementString(statementId, \"nearImage\", infos[9]);\r\n    recordStatementString(statementId, \"farImage\", infos[10]);\r\n  }\r\n\r\n  function recordStatementString(bytes32 statementId, string memory key, string memory value) internal {\r\n    require(!dataStore.stringExists(keccak256(abi.encodePacked(statementId, key))), \"Trying to write an existing key-value string pair\");\r\n\r\n    dataStore.createString(keccak256(abi.encodePacked(statementId,key)), value);\r\n  }\r\n\r\n  /*********************/\r\n  /** INTERNAL - READ **/\r\n  /*********************/\r\n  function generateNewStatementId(string memory buildingPermitId) internal view returns (bytes32) {\r\n    uint nbStatements = statementCountByBuildingPermit(buildingPermitId);\r\n    return computeStatementId(buildingPermitId,nbStatements);\r\n  }\r\n\r\n  function statementCountByBuildingPermit(string memory buildingPermitId) internal view returns (uint) {\r\n    return statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))]; // mapping's default is 0\r\n  }\r\n\r\n  function computeStatementId(string memory buildingPermitId, uint statementNb) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(buildingPermitId,statementNb));\r\n  }\r\n\r\n  function parseStatementStrings(uint[] memory statementDataLayout, bytes memory statementData) internal pure returns(string[] memory) {\r\n    string[] memory res = new string[](statementDataLayout.length);\r\n    uint bytePos = 0;\r\n    uint resLength = res.length;\r\n    for(uint i = 0; i < resLength; i++) {\r\n      bytes memory strBytes = new bytes(statementDataLayout[i]);\r\n      uint strBytesLength = strBytes.length;\r\n      for(uint j = 0; j < strBytesLength; j++) {\r\n        strBytes[j] = statementData[bytePos];\r\n        bytePos++;\r\n      }\r\n      res[i] = string(strBytes);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  function isEmpty(string memory s) internal pure returns(bool) {\r\n    return bytes(s).length == 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAllStatements\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementBuildingArea\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementNearImage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingPermitIds\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementCityHall\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"statementCountByBuildingPermitHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buildingPermitId\",\"type\":\"string\"},{\"name\":\"statementDataLayout\",\"type\":\"uint256[]\"},{\"name\":\"statementData\",\"type\":\"bytes\"}],\"name\":\"recordStatement\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementAcquisitionDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementPcId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementSiteArea\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getStatementString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"statementExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementMaximumHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementArchitect\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buildingPermitId\",\"type\":\"string\"}],\"name\":\"statementIdsByBuildingPermit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementFarImage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"immutableDataStore\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buildingPermitId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"NewStatementEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StatementRegistery","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000927a6bcc1967f5c913bf19a6dc6d28450887ddf1","Library":"","SwarmSource":"bzzr://8fe8600c68b45a74047e393f25fb13a4c40a7b4bc916117d2d9fc7280eb0c151"}]}