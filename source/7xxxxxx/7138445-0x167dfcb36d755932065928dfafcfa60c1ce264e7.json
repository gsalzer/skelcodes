{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/IGrowHops.sol\r\n\r\ninterface IGrowHops {\r\n\r\n  function addPlanBase(uint256 minimumAmount, uint256 lockTime, uint32 lessToHops) external;\r\n\r\n  function togglePlanBase(bytes32 planBaseId, bool isOpen) external;\r\n\r\n  function growHops(bytes32 planBaseId, uint256 lessAmount) external;\r\n\r\n  function updateHopsAddress(address _address) external;\r\n\r\n  function updatelessAddress(address _address) external;\r\n\r\n  function withdraw(bytes32 planId) external;\r\n\r\n  function checkPlanBase(bytes32 planBaseId)\r\n    external view returns (uint256, uint256, uint32, bool);\r\n  \r\n  function checkPlanBaseIds() external view returns(bytes32[]);\r\n\r\n  function checkPlanIdsByPlanBase(bytes32 planBaseId) external view returns(bytes32[]);\r\n\r\n  function checkPlanIdsByUser(address user) external view returns(bytes32[]);\r\n\r\n  function checkPlan(bytes32 planId)\r\n    external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool);\r\n\r\n  /* Events */\r\n\r\n  event PlanBaseEvt (\r\n    bytes32 planBaseId,\r\n    uint256 minimumAmount,\r\n    uint256 lockTime,\r\n    uint32 lessToHops,\r\n    bool isOpen\r\n  );\r\n\r\n  event TogglePlanBaseEvt (\r\n    bytes32 planBaseId,\r\n    bool isOpen\r\n  );\r\n\r\n  event PlanEvt (\r\n    bytes32 planId,\r\n    bytes32 planBaseId,\r\n    address plantuser,\r\n    uint256 lessAmount,\r\n    uint256 hopsAmount,\r\n    uint256 lockAt,\r\n    uint256 releaseAt,\r\n    bool isWithdrawn\r\n  );\r\n\r\n  event WithdrawPlanEvt (\r\n    bytes32 planId,\r\n    address plantuser,\r\n    uint256 lessAmount,\r\n    bool isWithdrawn,\r\n    uint256 withdrawAt\r\n  );\r\n\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. batchplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i=1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/GrowHops.sol\r\n\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function allowance(address tokenOwner, address spender) external view returns (uint);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function mint(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract GrowHops is IGrowHops, Ownable, Pausable {\r\n\r\n  using SafeMath for *;\r\n\r\n  address public hopsAddress;\r\n  address public lessAddress;\r\n\r\n  struct PlanBase {\r\n    uint256 minimumAmount;\r\n    uint256 lockTime;\r\n    uint32 lessToHops;\r\n    bool isOpen;\r\n  }\r\n\r\n  struct Plan {\r\n    bytes32 planBaseId;\r\n    address plantuser;\r\n    uint256 lessAmount;\r\n    uint256 hopsAmount;\r\n    uint256 lockAt;\r\n    uint256 releaseAt;\r\n    bool isWithdrawn;\r\n  }\r\n  bytes32[] public planBaseIds;\r\n\r\n  mapping (bytes32 => bytes32[]) planIdsByPlanBase;\r\n  mapping (bytes32 => PlanBase) planBaseIdToPlanBase;\r\n  \r\n  mapping (bytes32 => Plan) planIdToPlan;\r\n  mapping (address => bytes32[]) userToPlanIds;\r\n\r\n  constructor (address _hopsAddress, address _lessAddress) public {\r\n    hopsAddress = _hopsAddress;\r\n    lessAddress = _lessAddress;\r\n  }\r\n\r\n  function addPlanBase(uint256 minimumAmount, uint256 lockTime, uint32 lessToHops)\r\n    onlyOwner external {\r\n    bytes32 planBaseId = keccak256(\r\n      abi.encodePacked(block.timestamp, minimumAmount, lockTime, lessToHops)\r\n    );\r\n\r\n    PlanBase memory planBase = PlanBase(\r\n      minimumAmount,\r\n      lockTime,\r\n      lessToHops,\r\n      true\r\n    );\r\n\r\n    planBaseIdToPlanBase[planBaseId] = planBase;\r\n    planBaseIds.push(planBaseId);\r\n    emit PlanBaseEvt(planBaseId, minimumAmount, lockTime, lessToHops, true);\r\n  }\r\n\r\n  function togglePlanBase(bytes32 planBaseId, bool isOpen) onlyOwner external {\r\n\r\n    planBaseIdToPlanBase[planBaseId].isOpen = isOpen;\r\n    emit TogglePlanBaseEvt(planBaseId, isOpen);\r\n  }\r\n  \r\n  function growHops(bytes32 planBaseId, uint256 lessAmount) whenNotPaused external {\r\n    address sender = msg.sender;\r\n    require(IERC20(lessAddress).allowance(sender, address(this)) >= lessAmount);\r\n\r\n    PlanBase storage planBase = planBaseIdToPlanBase[planBaseId];\r\n    require(planBase.isOpen);\r\n    require(lessAmount >= planBase.minimumAmount);\r\n    bytes32 planId = keccak256(\r\n      abi.encodePacked(block.timestamp, sender, planBaseId, lessAmount)\r\n    );\r\n    uint256 hopsAmount = lessAmount.mul(planBase.lessToHops);\r\n\r\n    Plan memory plan = Plan(\r\n      planBaseId,\r\n      sender,\r\n      lessAmount,\r\n      hopsAmount,\r\n      block.timestamp,\r\n      block.timestamp.add(planBase.lockTime),\r\n      false\r\n    );\r\n    \r\n    require(IERC20(lessAddress).transferFrom(sender, address(this), lessAmount));\r\n    require(IERC20(hopsAddress).mint(sender, hopsAmount));\r\n\r\n    planIdToPlan[planId] = plan;\r\n    userToPlanIds[sender].push(planId);\r\n    planIdsByPlanBase[planBaseId].push(planId);\r\n    emit PlanEvt(planId, planBaseId, sender, lessAmount, hopsAmount, block.timestamp, block.timestamp.add(planBase.lockTime), false);\r\n  }\r\n\r\n  function updateHopsAddress(address _address) external onlyOwner {\r\n    hopsAddress = _address;\r\n  }\r\n\r\n  function updatelessAddress(address _address) external onlyOwner {\r\n    lessAddress = _address;\r\n  }\r\n\r\n  function withdraw(bytes32 planId) whenNotPaused external {\r\n    address sender = msg.sender;\r\n    Plan storage plan = planIdToPlan[planId];\r\n    require(!plan.isWithdrawn);\r\n    require(plan.plantuser == sender);\r\n    require(block.timestamp >= plan.releaseAt);\r\n    require(IERC20(lessAddress).transfer(sender, plan.lessAmount));\r\n\r\n    planIdToPlan[planId].isWithdrawn = true;\r\n    emit WithdrawPlanEvt(planId, sender, plan.lessAmount, true, block.timestamp);\r\n  }\r\n\r\n  function checkPlanBase(bytes32 planBaseId)\r\n    external view returns (uint256, uint256, uint32, bool){\r\n    PlanBase storage planBase = planBaseIdToPlanBase[planBaseId];\r\n    return (\r\n      planBase.minimumAmount,\r\n      planBase.lockTime,\r\n      planBase.lessToHops,\r\n      planBase.isOpen\r\n    );\r\n  }\r\n\r\n  function checkPlanBaseIds() external view returns(bytes32[]) {\r\n    return planBaseIds;\r\n  }\r\n\r\n  function checkPlanIdsByPlanBase(bytes32 planBaseId) external view returns(bytes32[]) {\r\n    return planIdsByPlanBase[planBaseId];\r\n  }\r\n\r\n  function checkPlanIdsByUser(address user) external view returns(bytes32[]) {\r\n    return userToPlanIds[user];\r\n  }\r\n\r\n  function checkPlan(bytes32 planId)\r\n    external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool) {\r\n    Plan storage plan = planIdToPlan[planId];\r\n    return (\r\n      plan.planBaseId,\r\n      plan.plantuser,\r\n      plan.lessAmount,\r\n      plan.hopsAmount,\r\n      plan.lockAt,\r\n      plan.releaseAt,\r\n      plan.isWithdrawn\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"planBaseId\",\"type\":\"bytes32\"},{\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"togglePlanBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"planBaseId\",\"type\":\"bytes32\"}],\"name\":\"checkPlanBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"planBaseId\",\"type\":\"bytes32\"},{\"name\":\"lessAmount\",\"type\":\"uint256\"}],\"name\":\"growHops\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkPlanIdsByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"planBaseId\",\"type\":\"bytes32\"}],\"name\":\"checkPlanIdsByPlanBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hopsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatelessAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planBaseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"planId\",\"type\":\"bytes32\"}],\"name\":\"checkPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"planId\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateHopsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"name\":\"lockTime\",\"type\":\"uint256\"},{\"name\":\"lessToHops\",\"type\":\"uint32\"}],\"name\":\"addPlanBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkPlanBaseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lessAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hopsAddress\",\"type\":\"address\"},{\"name\":\"_lessAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"planBaseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lessToHops\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"PlanBaseEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"planBaseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"TogglePlanBaseEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"planBaseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"plantuser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lessAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hopsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWithdrawn\",\"type\":\"bool\"}],\"name\":\"PlanEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"plantuser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lessAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"withdrawAt\",\"type\":\"uint256\"}],\"name\":\"WithdrawPlanEvt\",\"type\":\"event\"}]","ContractName":"GrowHops","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000471daee6e481b2ab7d2f2f64b8f9b083daae29da0000000000000000000000007ca121b093e2fbd4bb9a894bd5ff487d16f1f83b","Library":"","SwarmSource":"bzzr://3f8d549fbe8c4943f7d92ff2e1e8591b2b2bde4a7a9db0f60bfb090d9b448ad8"}]}