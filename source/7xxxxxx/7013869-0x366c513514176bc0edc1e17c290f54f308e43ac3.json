{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\utils\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev gives square root of given x.\r\n  */\r\n  function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256 y)\r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y)\r\n    {\r\n        y = z;\r\n        z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev gives square. multiplies x by x\r\n  */\r\n  function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n\r\n  /**\r\n  * @dev x to the power of y\r\n  */\r\n  function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else\r\n    {\r\n        uint256 z = x;\r\n        for (uint256 i=1; i < y; i++)\r\n            z = mul(z,x);\r\n        return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts\\FundCenter.sol\r\n\r\n// This contract only keep user's deposit & withdraw records. \r\n// we use a private chain to maintain users' balance book. \r\n// All user's spending and earning records are kept in the private chain. \r\ncontract FundCenter {\r\n    using SafeMath for *;\r\n\r\n    string constant public name = \"FundCenter\";\r\n    string constant public symbol = \"FundCenter\";\r\n    \r\n    event BalanceRecharge(address indexed sender, uint256 amount, uint64 evented_at); // deposit\r\n    event BalanceWithdraw(address indexed sender, uint256 amount, bytes txHash, uint64 evented_at); //withdraw\r\n\r\n    uint lowestRecharge = 0.1 ether; // lowest deposit amount \r\n    uint lowestWithdraw = 0.1 ether; //lowest withdraw amount\r\n    bool enable = true;\r\n    address public CEO;\r\n    address public COO;\r\n    address public gameAddress; \r\n\r\n    mapping(address => uint) public recharges; // deposit records \r\n    mapping(address => uint) public withdraws; // withdraw records \r\n\r\n    modifier onlyCEO {\r\n        require(CEO == msg.sender, \"Only CEO can operate.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCOO {\r\n        require(COO == msg.sender, \"Only COO can operate.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyEnable {\r\n        require(enable == true, \"The service is closed.\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _COO) public {\r\n        CEO = msg.sender;\r\n        COO = _COO;\r\n    }\r\n\r\n    function recharge() public payable onlyEnable {\r\n        require(msg.value >= lowestRecharge, \"The minimum recharge amount does not meet the requirements.\");\r\n        recharges[msg.sender] = recharges[msg.sender].add(msg.value); // only records deposit amount. \r\n        emit BalanceRecharge(msg.sender, msg.value, uint64(now));\r\n    }\r\n    \r\n    function() public payable onlyEnable {\r\n        require(msg.sender == gameAddress, \"only receive eth from game address\"); \r\n    }\r\n    \r\n    function setGameAddress(address _gameAddress) public onlyCOO {\r\n        gameAddress = _gameAddress; \r\n    }\r\n\r\n    function withdrawBalanceFromServer(address _to, uint _amount, bytes _txHash) public onlyCOO onlyEnable {\r\n        require(address(this).balance >= _amount, \"Insufficient balance.\");\r\n        _to.transfer(_amount);\r\n        withdraws[_to] = withdraws[_to].add(_amount); // record withdraw amount \r\n        emit BalanceWithdraw(_to, _amount, _txHash, uint64(now));\r\n    }\r\n\r\n\r\n    function withdrawBalanceFromAdmin(uint _amount) public onlyCOO {\r\n        require(address(this).balance >= _amount, \"Insufficient balance.\");\r\n        CEO.transfer(_amount);\r\n    }\r\n\r\n    function setLowestClaim(uint _lowestRecharge, uint _lowestWithdraw) public onlyCOO {\r\n        lowestRecharge = _lowestRecharge;\r\n        lowestWithdraw = _lowestWithdraw;\r\n    }\r\n\r\n    function setEnable(bool _enable) public onlyCOO {\r\n        enable = _enable;\r\n    }\r\n\r\n    function transferCEO(address _CEOAddress) public onlyCEO {\r\n        CEO = _CEOAddress;\r\n    }\r\n\r\n    function setCOO(address _COOAddress) public onlyCEO {\r\n        COO = _COOAddress;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_COOAddress\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraws\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"setGameAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lowestRecharge\",\"type\":\"uint256\"},{\"name\":\"_lowestWithdraw\",\"type\":\"uint256\"}],\"name\":\"setLowestClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recharges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalanceFromAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"bytes\"}],\"name\":\"withdrawBalanceFromServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CEOAddress\",\"type\":\"address\"}],\"name\":\"transferCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_COO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"evented_at\",\"type\":\"uint64\"}],\"name\":\"BalanceRecharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"evented_at\",\"type\":\"uint64\"}],\"name\":\"BalanceWithdraw\",\"type\":\"event\"}]","ContractName":"FundCenter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002250f5ce3d49caab3476e9e1811942fdc67f88e5","Library":"","SwarmSource":"bzzr://fb8e144d1d092dd2924af5d63148809a1c3a8ce5eb519ff7b63f61fb5813ac03"}]}