{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\introspection\\IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: contracts\\IMarketplace.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract IMarketplace {\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint128 duration\r\n    )\r\n        external;\r\n}\r\n\r\n// File: contracts\\AnimalMarketplace.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AnimalMarketplace is Ownable, IMarketplace {\r\n    using SafeMath for uint256;\r\n    uint8 internal percentFee = 5;\r\n\r\n    IERC721Full private erc721Contract;\r\n\r\n    struct Auction {\r\n        address payable tokenOwner;\r\n        uint256 startTime;\r\n        uint128 startPrice;\r\n        uint128 endPrice;\r\n        uint128 duration;\r\n    }\r\n\r\n    struct AuctionEntry {\r\n        uint256 keyIndex;\r\n        Auction value;\r\n    }\r\n\r\n    struct TokenIdAuctionMap {\r\n        mapping(uint256 => AuctionEntry) data;\r\n        uint256[] keys;\r\n    }\r\n\r\n    TokenIdAuctionMap private auctions;\r\n\r\n    event AuctionBoughtEvent(\r\n        uint256 tokenId,\r\n        address previousOwner,\r\n        address newOwner,\r\n        uint256 pricePaid\r\n    );\r\n\r\n    event AuctionCreatedEvent(\r\n        uint256 tokenId,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint128 duration\r\n    );\r\n\r\n    event AuctionCanceledEvent(uint256 tokenId);\r\n\r\n    constructor(IERC721Full _erc721Contract) public {\r\n        erc721Contract = _erc721Contract;\r\n    }\r\n\r\n    // \"approve\" in game contract will revert if sender is not token owner\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint128 _duration\r\n    )\r\n        external\r\n    {\r\n        // this can be only called from game contract\r\n        require(msg.sender == address(erc721Contract));\r\n\r\n        AuctionEntry storage entry = auctions.data[_tokenId];\r\n        require(entry.keyIndex == 0);\r\n\r\n        address payable tokenOwner = address(uint160(erc721Contract.ownerOf(_tokenId)));\r\n        erc721Contract.transferFrom(tokenOwner, address(this), _tokenId);\r\n\r\n        entry.value = Auction({\r\n            tokenOwner: tokenOwner,\r\n            startTime: block.timestamp,\r\n            startPrice: _startPrice,\r\n            endPrice: _endPrice,\r\n            duration: _duration\r\n        });\r\n\r\n        entry.keyIndex = ++auctions.keys.length;\r\n        auctions.keys[entry.keyIndex - 1] = _tokenId;\r\n\r\n        emit AuctionCreatedEvent(_tokenId, _startPrice, _endPrice, _duration);\r\n    }\r\n\r\n    function cancelAuction(uint256 _tokenId) external {\r\n        AuctionEntry storage entry = auctions.data[_tokenId];\r\n        Auction storage auction = entry.value;\r\n        address sender = msg.sender;\r\n        require(sender == auction.tokenOwner);\r\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\r\n        deleteAuction(_tokenId, entry);\r\n        emit AuctionCanceledEvent(_tokenId);\r\n    }\r\n\r\n    function buyAuction(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        AuctionEntry storage entry = auctions.data[_tokenId];\r\n        require(entry.keyIndex > 0);\r\n        Auction storage auction = entry.value;\r\n        address payable sender = msg.sender;\r\n        address payable tokenOwner = auction.tokenOwner;\r\n        uint256 auctionPrice = calculateCurrentPrice(auction);\r\n        uint256 pricePaid = msg.value;\r\n\r\n        require(pricePaid >= auctionPrice);\r\n        deleteAuction(_tokenId, entry);\r\n\r\n        refundSender(sender, pricePaid, auctionPrice);\r\n        payTokenOwner(tokenOwner, auctionPrice);\r\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\r\n        emit AuctionBoughtEvent(_tokenId, tokenOwner, sender, auctionPrice);\r\n    }\r\n\r\n    function getAuctionByTokenId(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tokenId,\r\n            address tokenOwner,\r\n            uint128 startPrice,\r\n            uint128 endPrice,\r\n            uint256 startTime,\r\n            uint128 duration,\r\n            uint256 currentPrice,\r\n            bool exists\r\n        )\r\n    {\r\n        AuctionEntry storage entry = auctions.data[_tokenId];\r\n        Auction storage auction = entry.value;\r\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\r\n        return (\r\n            entry.keyIndex > 0 ? _tokenId : 0,\r\n            auction.tokenOwner,\r\n            auction.startPrice,\r\n            auction.endPrice,\r\n            auction.startTime,\r\n            auction.duration,\r\n            calculatedCurrentPrice,\r\n            entry.keyIndex > 0\r\n        );\r\n    }\r\n\r\n    function getAuctionByIndex(uint256 _auctionIndex)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tokenId,\r\n            address tokenOwner,\r\n            uint128 startPrice,\r\n            uint128 endPrice,\r\n            uint256 startTime,\r\n            uint128 duration,\r\n            uint256 currentPrice,\r\n            bool exists\r\n        )\r\n    {\r\n        // for consistency with getAuctionByTokenId when returning invalid auction - otherwise it would throw error\r\n        if (_auctionIndex >= auctions.keys.length) {\r\n            return (0, address(0), 0, 0, 0, 0, 0, false);\r\n        }\r\n\r\n        uint256 currentTokenId = auctions.keys[_auctionIndex];\r\n        Auction storage auction = auctions.data[currentTokenId].value;\r\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\r\n        return (\r\n            currentTokenId,\r\n            auction.tokenOwner,\r\n            auction.startPrice,\r\n            auction.endPrice,\r\n            auction.startTime,\r\n            auction.duration,\r\n            calculatedCurrentPrice,\r\n            true\r\n        );\r\n    }\r\n\r\n    function getAuctionsCount() external view returns (uint256 auctionsCount) {\r\n        return auctions.keys.length;\r\n    }\r\n\r\n    function isOnAuction(uint256 _tokenId) public view returns (bool onAuction) {\r\n        return auctions.data[_tokenId].keyIndex > 0;\r\n    }\r\n\r\n    function withdrawContract() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function refundSender(address payable _sender, uint256 _pricePaid, uint256 _auctionPrice) private {\r\n        uint256 etherToRefund = _pricePaid.sub(_auctionPrice);\r\n        if (etherToRefund > 0) {\r\n            _sender.transfer(etherToRefund);\r\n        }\r\n    }\r\n\r\n    function payTokenOwner(address payable _tokenOwner, uint256 _auctionPrice) private {\r\n        uint256 etherToPay = _auctionPrice.sub(_auctionPrice * percentFee / 100);\r\n        if (etherToPay > 0) {\r\n            _tokenOwner.transfer(etherToPay);\r\n        }\r\n    }\r\n\r\n    function deleteAuction(uint256 _tokenId, AuctionEntry storage _entry) private {\r\n        uint256 keysLength = auctions.keys.length;\r\n        if (_entry.keyIndex <= keysLength) {\r\n            // Move an existing element into the vacated key slot.\r\n            auctions.data[auctions.keys[keysLength - 1]].keyIndex = _entry.keyIndex;\r\n            auctions.keys[_entry.keyIndex - 1] = auctions.keys[keysLength - 1];\r\n            auctions.keys.length = keysLength - 1;\r\n            delete auctions.data[_tokenId];\r\n        }\r\n    }\r\n\r\n    function calculateCurrentPrice(Auction storage _auction) private view returns (uint256) {\r\n        uint256 secondsInProgress = block.timestamp - _auction.startTime;\r\n\r\n        if (secondsInProgress >= _auction.duration) {\r\n            return _auction.endPrice;\r\n        }\r\n\r\n        int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\r\n        int256 currentPriceChange =\r\n            totalPriceChange * int256(secondsInProgress) / int256(_auction.duration);\r\n\r\n        int256 calculatedPrice = int256(_auction.startPrice) + int256(currentPriceChange);\r\n\r\n        return uint256(calculatedPrice);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint128\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOnAuction\",\"outputs\":[{\"name\":\"onAuction\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionByTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint128\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionIndex\",\"type\":\"uint256\"}],\"name\":\"getAuctionByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint128\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionsCount\",\"outputs\":[{\"name\":\"auctionsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc721Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"AuctionBoughtEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"endPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint128\"}],\"name\":\"AuctionCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AnimalMarketplace","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000014c4293d7e7325cec8c52cea3df37d91aa9cc7b6","Library":"","SwarmSource":"bzzr://f8a4a1ab08e7286dd2077dadee51f1f2b9c6a5c45bd49ca1873aebce912d1512"}]}