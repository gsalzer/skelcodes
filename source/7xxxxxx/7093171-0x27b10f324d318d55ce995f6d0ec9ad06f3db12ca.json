{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n// Interface to ERC20 functions used in this contract\r\ninterface ERC20token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\ncontract ExoTokensMarketSimple {\r\n    ERC20token ExoToken;\r\n    address owner;\r\n    uint256 tokensPerEth;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        tokensPerEth = 1000;\r\n    }\r\n\r\n    function setTokensPerEth(uint256 _tokensPerEth) public onlyOwner {\r\n        tokensPerEth = _tokensPerEth;\r\n    }\r\n    function getTokensPerEth() public view returns(uint256) {\r\n        return tokensPerEth;\r\n    }\r\n    function setERC20Token(address tokenAddr) public onlyOwner  {\r\n        ExoToken = ERC20token(tokenAddr);\r\n    }\r\n    function getERC20Token() public view returns(address) {\r\n        return ExoToken;\r\n    }\r\n    function getERC20Balance() public view returns(uint256) {\r\n        return ExoToken.balanceOf(this);\r\n    }\r\n    function depositERC20Token(uint256 _exo_amount) public  {\r\n        require(ExoToken.allowance(msg.sender, this) >= _exo_amount);\r\n        require(ExoToken.transferFrom(msg.sender, this, _exo_amount));\r\n    }\r\n\r\n    // EXO buying function\r\n    // All of the ETH included in the TX is converted to EXO\r\n    function BuyTokens() public payable{\r\n        require(msg.value > 0, \"eth value must be non zero\");\r\n        uint256 exo_balance = ExoToken.balanceOf(this);\r\n        uint256 tokensToXfer = msg.value * tokensPerEth;\r\n        require(exo_balance >= tokensToXfer, \"Not enough tokens in contract\");\r\n        require(ExoToken.transfer(msg.sender, tokensToXfer), \"Couldn't send funds\");\r\n    }\r\n\r\n    // Withdraw erc20 tokens\r\n    function withdrawERC20Tokens(uint _val) public onlyOwner {\r\n        require(ExoToken.transfer(msg.sender, _val), \"Couldn't send funds\"); // send EXO tokens\r\n    }\r\n\r\n    // Withdraw Ether\r\n    function withdrawEther() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n\r\n    }\r\n \r\n    // change the owner\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;    \r\n    }\r\n    // fallback\r\n    function() external payable { }   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exo_amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getERC20Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ExoTokensMarketSimple","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c92a0f60b7adc26c4d25b73bc55f2c555c2e4365ab99524317a5d1e5fff94764"}]}