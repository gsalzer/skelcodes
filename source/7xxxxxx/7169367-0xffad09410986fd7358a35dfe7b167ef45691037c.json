{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\taddress private _owner;\r\n\tevent OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n\t/**\r\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t* account.\r\n\t*/\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\r\n\t/**\r\n\t* @return the address of the owner.\r\n\t*/\r\n\tfunction owner() public view returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner());\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @return true if `msg.sender` is the owner of the contract.\r\n\t*/\r\n\tfunction isOwner() public view returns(bool) {\r\n\t\treturn msg.sender == _owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to relinquish control of the contract.\r\n\t* @notice Renouncing to ownership will leave the contract without an owner.\r\n\t* It will not be possible to call the functions with the `onlyOwner`\r\n\t* modifier anymore.\r\n\t*/\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfers control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract RicoContract is Ownable {\r\n\t\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint32 public decimals;\r\n\t\r\n\tuint256 private  _totalSupply;\r\n\tmapping(address => uint256) private  _balances;\r\n\tmapping (address => mapping (address => uint256)) private  _allowed;\r\n\t\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent CreateOrder(address indexed owner, uint256 indexed amount, uint256 indexed price);\r\n\t\r\n\tstruct Stage{\r\n\t\tuint256 leadTime;\r\n\t\tuint256 startTime;\r\n\t\tuint256 amount;\r\n\t\tuint256 amountLimit;\r\n\t\tuint256 price;\r\n\t\tbool additional;\r\n\t}\r\n\tStage[] public stages;\r\n\t\r\n\tuint256 constant public minLeadTime = 1 minutes; \r\n\t\r\n\tstruct Order{\r\n\t    address owner;\r\n\t\tuint256 price;\r\n\t\tuint256 amount;\r\n\t}\r\n\tOrder[] public orders;\r\n\t\r\n\tmapping( address => mapping( uint256 => uint256 ) ) public stageBalances;\r\n\r\n\tmodifier onlyValidStage() {\r\n\t\trequire( getCurrentStage() > 0 );\r\n\t\t_;\r\n\t}\r\n\t\r\n\r\n    /**\r\n     * @dev Create new oprder\r\n     * @param _price Price for one token\r\n     * @param _amount Total tokens amount\r\n     */\r\n\tfunction createOrder( uint256 _price, uint256 _amount ) public \r\n\t{\r\n\t    require( _balances[msg.sender] > 0 && _balances[msg.sender] >= _amount );\r\n\t    require( _price > 0 && _amount > 0 );\r\n\t    \r\n\t    _pushOrder(msg.sender, _price, _amount);\r\n\t    _transfer( msg.sender, address( this ), _amount );\r\n\t    emit CreateOrder( msg.sender, _amount, _price );\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Delete order by id\r\n     * @param _orderID order id\r\n     */\r\n\tfunction removeOrder( uint256 _orderID ) public\r\n\t{\r\n\t    require( orders[_orderID].owner == msg.sender && orders[_orderID].amount > 0 );\r\n\t    _transfer( address( this ), orders[_orderID].owner, orders[_orderID].amount );\r\n\t    delete(orders[_orderID]);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Total number of stages\r\n     */\r\n\tfunction getStageCount() public view returns( uint256 )\r\n\t{\r\n\t    return stages.length;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Internal function that implements the creation new order\r\n     * @param _address owner address\r\n     * @param _price token price\r\n     * @param _amount Total tokens amount\r\n     */\r\n    function _pushOrder( address _address, uint256 _price, uint256 _amount ) internal returns( uint256 )\r\n    {\r\n        orders.push(Order({\r\n            owner: _address,\r\n            price: _price,\r\n            amount: _amount\r\n        }));\r\n        \r\n        return orders.length-1;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function return total orders count\r\n     */\r\n    function getOrdersCount() public view returns( uint256 )\r\n    {\r\n        return orders.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Buying tokens in oreder\r\n     * @param _orderID order id\r\n     */\r\n    function buyByOrder( uint256 _orderID ) public payable\r\n    {\r\n        require( msg.value % orders[_orderID].price == 0 );\r\n        uint256 _calcTokens = msg.value.div( orders[_orderID].price ) *1 ether;\r\n        \r\n        require( _calcTokens <= orders[_orderID].amount );\r\n        \r\n        orders[_orderID].owner.transfer(msg.value);\r\n        _transfer( address(this), msg.sender, _calcTokens );\r\n        orders[_orderID].amount = orders[_orderID].amount.sub( _calcTokens );\r\n    }\r\n\r\n\t/**\r\n\t* @dev Default setting\r\n\t*/\r\n\tconstructor() public {\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: 1 days, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount:0,\r\n\t\t\tamountLimit: 3 ether,\r\n\t\t\tprice: 0.1 ether,\r\n\t\t\tadditional: false\r\n\t\t}));\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: 7 days, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount:0,\r\n\t\t\tamountLimit: 11 ether,\r\n\t\t\tprice: 0.1 ether,\r\n\t\t\tadditional: false\r\n\t\t}));\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: 7 days, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount:0,\r\n\t\t\tamountLimit:  4.5 ether,\r\n\t\t\tprice: 0.1 ether,\r\n\t\t\tadditional: false\r\n\t\t}));\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: 30 days, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount:0,\r\n\t\t\tamountLimit:  12.7 ether,\r\n\t\t\tprice: 0.1 ether,\r\n\t\t\tadditional: false\r\n\t\t}));\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: 7 days, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount:0,\r\n\t\t\tamountLimit:  3.5 ether,\r\n\t\t\tprice: 0.1 ether,\r\n\t\t\tadditional: false\r\n\t\t}));\r\n\r\n\t\tname = \"RICO\";\r\n\t\tsymbol = \"RICO\";\r\n\t\tdecimals = 18;\r\n\t\t\r\n\t\trequire( checkDefaultStages() );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * @dev Buying tokens \r\n     */\r\n\tfunction() public payable \r\n\t{\r\n\t\tbuy();\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Function that implements the buying tokens\r\n     */\r\n\tfunction buy() public payable onlyValidStage\r\n\t{\r\n\t    uint256 _stage = getCurrentStage()-1;\r\n\t    \r\n\t    require( msg.value % stages[_stage].price == 0 );\r\n\t\trequire( msg.value >= stages[_stage].price );\r\n\t\trequire( stages[_stage].amount.add( msg.value ) <= stages[_stage].amountLimit );\r\n\t\t\r\n\t\tuint256 _calcTokens = msg.value.div( stages[_stage].price ) * 1 ether;\r\n\t\t_mint( this, _calcTokens );\r\n\t\t_transfer(this, msg.sender, _calcTokens);\r\n\t\tstages[_stage].amount = stages[_stage].amount.add( msg.value );\r\n\t\tstageBalances[msg.sender][_stage] = stageBalances[msg.sender][_stage].add( _calcTokens );\r\n\t\t\r\n\t\tif( stages[_stage].amount == stages[_stage].amountLimit && stages[_stage].startTime == 0)\r\n\t        _fixStateStartTime( _stage );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * @dev Sselling tokens to smart contract\r\n     */\r\n\tfunction sell( uint256 _amount ) public onlyValidStage\r\n\t{\r\n\t\t_sell( msg.sender, _amount );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * @dev Internal function that implements the selling tokens\r\n     */\r\n\tfunction _sell( address _from, uint256 _amount ) internal\r\n\t{\r\n\t    uint256 _stage = getCurrentStage()-1;\r\n\t    uint256 _ethamount = _amount.div(1 ether).mul( stages[_stage].price );\r\n\t    \r\n\t    require( stageBalances[_from][_stage] >= _amount );\r\n\t\trequire( stages[_stage].amount >= _ethamount );\r\n\t\t\r\n\t\tstages[getCurrentStage()-1].amount = stages[_stage].amount.sub( _ethamount );\r\n\t\t_from.transfer( _ethamount );\r\n\t\t_burn( _from, _amount );\r\n\t\tstageBalances[_from][_stage] = stageBalances[_from][_stage].sub( _amount );\r\n\t}\r\n\t\r\n\r\n\t/**\r\n     * @dev Function checks the validity of the stages conditions.\r\n     */\r\n\tfunction checkDefaultStages() internal view returns(bool)\r\n\t{\r\n\t    uint256 i;\r\n\t    \r\n\t\tfor( i = 1; i < stages.length; i++ ){\r\n\t\t\tif( stages[i].leadTime < minLeadTime ) return false;\r\n\t\t}\r\n\r\n\t\tfor( i = 1; i < stages.length; i++ ){\r\n\t\t\tif( stages[i].startTime != 0 ) return false;\r\n\t\t}\r\n\t\t\r\n\t\tfor( i = 1; i < stages.length; i++ ){\r\n\t\t\tif( stages[i].price < stages[i-1].price ) return false;\r\n\t\t}\r\n\t\t\r\n\t\tfor( i = 0; i <= stages.length - 1; i++ ){\r\n\t\t\tif( stages[i].additional == true ) return false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Internal function which records the time of the stage after fees\r\n     * @param _stageID stage id\r\n     */\r\n\tfunction _fixStateStartTime( uint256 _stageID ) internal\r\n\t{\r\n\t    require( stages[_stageID].amount >= stages[_stageID].amountLimit );\r\n\t    require( stages[_stageID].startTime == 0 );\r\n\t    \r\n\t    stages[_stageID].startTime = now;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Function which records the time of the stage after fees\r\n     * @param _stageID stage id\r\n     */\r\n\tfunction fixStateStartTime( uint256 _stageID ) public onlyOwner\r\n\t{\r\n\t    _fixStateStartTime( _stageID );\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Function return current stage\r\n     */\r\n\tfunction getCurrentStage() public view returns( uint256 )\r\n\t{\r\n\t\tfor( uint256 i = 0; i < stages.length; i++ ){\r\n\t\t    \r\n\t\t    if( stages[i].startTime == 0 )\r\n\t\t        return i + 1;\r\n\t        else\r\n\t            if( now < stages[i].startTime.add( stages[i].leadTime ) )\r\n\t                return i + 1;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\r\n    /**\r\n     * @dev Withdrawal of funds from the smart contract\r\n     * @param _amount amount tokens\r\n     * @param _address address where to send eth\r\n     * @param _stageID stage id\r\n     */\r\n\tfunction withdraw( uint256 _amount, address _address, uint256 _stageID ) public onlyOwner\r\n\t{\r\n\t\trequire( getCurrentStage() >= 2 || getCurrentStage() == 0 );\r\n\t\trequire( _amount <= stages[_stageID].amount );\r\n\t\trequire( stages[_stageID].startTime != 0 );\r\n\t\t\r\n\t\trequire( now > stages[_stageID].startTime.add( stages[_stageID].leadTime ) );\r\n\t\t_address.transfer( _amount );\r\n\t\tstages[_stageID].amount = stages[_stageID].amount.sub( _amount );\r\n\t}\r\n\r\n\r\n    /**\r\n     * @dev Add new stage\r\n     * @param _leadTime stage development time\r\n     * @param _amountLimit required amount of funds\r\n     * @param _price token price\r\n     */\r\n\tfunction addStage( uint256 _leadTime, uint256 _amountLimit, uint256 _price ) public onlyOwner\r\n\t{\r\n\t\trequire( _leadTime >= minLeadTime );\r\n\t\trequire( _price >= stages[stages.length-1].price );\r\n\t\t\r\n\t\tstages.push(Stage({\r\n\t\t\tleadTime: _leadTime, \r\n\t\t\tstartTime: 0,\r\n\t\t\tamount: 0,\r\n\t\t\tamountLimit: _amountLimit,\r\n\t\t\tprice: _price,\r\n\t\t\tadditional: true\r\n\t\t}));\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Delete stage by id\r\n     * @param _stageID stage id\r\n     */\r\n\tfunction deleteStage( uint256 _stageID ) public onlyOwner\r\n\t{\r\n\t\trequire( stages[_stageID].additional );\r\n\t\trequire( stages[_stageID].amount == 0 );\r\n\t\tdelete stages[ _stageID ];\r\n\t}\r\n\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n\tfunction _transfer(address _from, address _to, uint256 _amount) internal returns (bool)\r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_amount <= _balances[_from]);\r\n\t\t\r\n\t\t_balances[_from] = _balances[_from].sub(_amount);\r\n\t\t_balances[_to] = _balances[_to].add(_amount);\r\n\t\temit Transfer(_from, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n\tfunction transfer(address _to, uint256 _amount) public returns (bool)\r\n\t{\r\n\t    if( _to == address( this ) )\r\n\t        _sell( msg.sender, _amount );\r\n        else\r\n\t\t    _transfer(msg.sender, _to, _amount);\r\n\t\t    \r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance)\r\n\t{\r\n\t\treturn _balances[_owner];\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\t\r\n\t\r\n\t/**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _amount uint256 the amount of tokens to be transferred\r\n     */\r\n\tfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool)\r\n\t{\r\n\t\trequire(_amount <= _allowed[_from][msg.sender]);\r\n\t\t_allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_amount);\r\n\t\t\r\n\t\tif( _to == address( this ) )\r\n\t        _sell( _from, _amount );\r\n        else\r\n\t\t    _transfer(_from, _to, _amount);\r\n\t\t    \r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool)\r\n\t{\r\n\t\t_allowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256)\r\n\t{\r\n\t\treturn _allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n\tfunction increaseAllowance(address _spender, uint _addedValue) public returns (bool)\r\n\t{\r\n\t\t_allowed[msg.sender][_spender] = _allowed[msg.sender][_spender].add(_addedValue);\r\n\t\temit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n\tfunction decreaseAllowance(address _spender, uint _subtractedValue) public returns (bool)\r\n\t{\r\n\t\tuint oldValue = _allowed[msg.sender][_spender];\r\n\t\t\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\t_allowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\t_allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\r\n\t\temit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stageID\",\"type\":\"uint256\"}],\"name\":\"deleteStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLeadTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"leadTime\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"additional\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"removeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leadTime\",\"type\":\"uint256\"},{\"name\":\"_amountLimit\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_stageID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stageID\",\"type\":\"uint256\"}],\"name\":\"fixStateStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"buyByOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RicoContract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a4b18a5010facb86f9afda1993c142bc50bd6417d58ccade8c530321cb185ba0"}]}