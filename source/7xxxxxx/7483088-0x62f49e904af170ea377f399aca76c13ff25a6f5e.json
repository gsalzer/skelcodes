{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// This contract is still in Beta, use at your own risk\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n\r\n    function transfer(address _to, uint _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n    function balanceOf(address _owner) external view returns (uint);\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value); // solhint-disable-line\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract TrustlessOTC is Ownable {\r\n    \r\n    mapping(address => uint256) public balanceTracker;\r\n    \r\n    event OfferCreated(uint indexed tradeID);\r\n    event OfferCancelled(uint indexed tradeID);\r\n    event OfferTaken(uint indexed tradeID);\r\n    \r\n    struct TradeOffer {\r\n        address tokenFrom;\r\n        address tokenTo;\r\n        uint256 amountFrom;\r\n        uint256 amountTo;\r\n        address creator;\r\n        bool active;\r\n        uint tradeID;\r\n    }\r\n    \r\n    TradeOffer[] public offers;\r\n    \r\n    function initiateTrade(\r\n        address _tokenFrom,\r\n        address _tokenTo, \r\n        uint256 _amountFrom,\r\n        uint256 _amountTo\r\n        ) public returns (uint newTradeID) {\r\n            require(Token(_tokenFrom).transferFrom(msg.sender, address(this), _amountFrom));\r\n            newTradeID = offers.length;\r\n            offers.length++;\r\n            TradeOffer storage o = offers[newTradeID];\r\n            balanceTracker[_tokenFrom] += _amountFrom;\r\n            o.tokenFrom = _tokenFrom;\r\n            o.tokenTo = _tokenTo;\r\n            o.amountFrom = _amountFrom;\r\n            o.amountTo = _amountTo;\r\n            o.creator = msg.sender;\r\n            o.active = true;\r\n            o.tradeID = newTradeID;\r\n            emit OfferCreated(newTradeID);\r\n    }\r\n    \r\n    function cancelTrade(uint tradeID) public returns (bool) {\r\n        TradeOffer storage o = offers[tradeID];\r\n        require(msg.sender == o.creator);\r\n        require(Token(o.tokenFrom).transfer(o.creator, o.amountFrom));\r\n        balanceTracker[o.tokenFrom] -= o.amountFrom;\r\n        o.active = false;\r\n        emit OfferCancelled(tradeID);\r\n        return true;\r\n    }\r\n    \r\n    function take(uint tradeID) public returns (bool) {\r\n        TradeOffer storage o = offers[tradeID];\r\n        require(o.active == true);\r\n        require(Token(o.tokenFrom).transfer(msg.sender, o.amountFrom));\r\n        balanceTracker[o.tokenFrom] -= o.amountFrom;\r\n        require(Token(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo));\r\n        o.active = false;\r\n        emit OfferTaken(tradeID);\r\n        return true;\r\n    }\r\n    \r\n    function getOfferDetails(uint tradeID) external view returns (\r\n        address _tokenFrom,\r\n        address _tokenTo, \r\n        uint256 _amountFrom,\r\n        uint256 _amountTo,\r\n        address _creator,\r\n        bool _active\r\n    ) {\r\n        TradeOffer storage o = offers[tradeID];\r\n        _tokenFrom = o.tokenFrom;\r\n        _tokenTo = o.tokenTo;\r\n        _amountFrom = o.amountFrom;\r\n        _amountTo = o.amountTo;\r\n        _creator = o.creator;\r\n        _active = o.active;\r\n    }\r\n\r\n    \r\n    function reclaimToken(Token _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        uint256 excess = balance - balanceTracker[address(_token)];\r\n        require(excess > 0);\r\n        _token.transfer(owner, excess);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"getOfferDetails\",\"outputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"tokenFrom\",\"type\":\"address\"},{\"name\":\"tokenTo\",\"type\":\"address\"},{\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"name\":\"amountTo\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"}],\"name\":\"initiateTrade\",\"outputs\":[{\"name\":\"newTradeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TrustlessOTC","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6db37517c76922c733b5a26a57811f16e209ae64e6df0a4cfd5dc27ff3e4b716"}]}