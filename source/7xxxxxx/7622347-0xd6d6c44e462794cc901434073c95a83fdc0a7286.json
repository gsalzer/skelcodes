{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n  \r\n  bool public stopped = false;\r\n  \r\n  event Stop(address indexed from);\r\n  \r\n  event Start(address indexed from);\r\n  \r\n  modifier isRunning {\r\n    assert (!stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) isRunning public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 ownerBalance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  function stop() onlyOwner public {\r\n    stopped = true;\r\n    emit Stop(msg.sender);\r\n  }\r\n\r\n  function start() onlyOwner public {\r\n    stopped = false;\r\n    emit Start(msg.sender);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) isRunning public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) isRunning public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) isRunning public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) isRunning public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CappedMintableToken token\r\n */\r\ncontract CappedMintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n  uint256 public cap;\r\n\r\n  bool public mintingFinished = false;\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyMintAgent() {\r\n    // crowdsale contracts or owner are allowed to mint new tokens\r\n    if(!mintAgents[msg.sender] && (msg.sender != owner)) {\r\n        revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    emit MintingAgentChanged(addr, state);\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyMintAgent canMint isRunning public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ODXToken\r\n * @dev Simple ERC20 Token,   \r\n * Tokens are mintable and burnable.\r\n * No initial token upon creation\r\n * Added max token supply\r\n */\r\ncontract ODXToken is CappedMintableToken, StandardBurnableToken {\r\n\r\n  string public name; \r\n  string public symbol; \r\n  uint8 public decimals; \r\n\r\n  /**\r\n   * @dev set totalSupply_ = 0;\r\n   */\r\n  constructor(\r\n      string _name, \r\n      string _symbol, \r\n      uint8 _decimals, \r\n      uint256 _maxTokens\r\n  ) \r\n    public \r\n    CappedMintableToken(_maxTokens) \r\n  {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    totalSupply_ = 0;\r\n  }\r\n  \r\n  function () payable public {\r\n      revert();\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title PrivateSaleRules\r\n * @dev Specifically use for private sale with lockup.\r\n */\r\ncontract PrivateSaleRules is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // private sale tracker of contribution\r\n  uint256 public weiRaisedDuringPrivateSale;\r\n\r\n  mapping(address => uint256[]) public lockedTokens;\r\n  \r\n  uint256[] public lockupTimes;\r\n  mapping(address => uint256) public privateSale;\r\n  \r\n  mapping (address => bool) public privateSaleAgents;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  event AddLockedTokens(address indexed beneficiary, uint256 totalContributionAmount, uint256[] tokenAmount);\r\n  event UpdateLockedTokens(address indexed beneficiary, uint256 totalContributionAmount, uint256 lockedTimeIndex, uint256 tokenAmount);\r\n  event PrivateSaleAgentChanged(address addr, bool state);\r\n\r\n\r\n  modifier onlyPrivateSaleAgent() {\r\n    // crowdsale contracts or owner are allowed to whitelist address\r\n    require(privateSaleAgents[msg.sender] || msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Constructor, sets lockupTimes and token address\r\n   * @param _lockupTimes arraylist of lockup times\r\n   * @param _token tokens to be minted\r\n   */\r\n  constructor(uint256[] _lockupTimes, ODXToken _token) public {\r\n    require(_lockupTimes.length > 0);\r\n    \r\n    lockupTimes = _lockupTimes;\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n   * Owner can add an address to the privatesaleagents.\r\n   */\r\n  function setPrivateSaleAgent(address addr, bool state) onlyOwner public {\r\n    privateSaleAgents[addr] = state;\r\n    emit PrivateSaleAgentChanged(addr, state);\r\n  }\r\n  \r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(ODXToken(token).mint(_beneficiary, _tokenAmount));\r\n  }\r\n  \r\n  /**\r\n   * @dev claim locked tokens only after lockup time.\r\n   */\r\n   \r\n  function claimLockedTokens() public {\r\n    for (uint i=0; i<lockupTimes.length; i++) {\r\n        uint256 lockupTime = lockupTimes[i];\r\n        if (lockupTime < now){\r\n            uint256 tokens = lockedTokens[msg.sender][i];\r\n            if (tokens>0){\r\n                lockedTokens[msg.sender][i] = 0;\r\n                _deliverTokens(msg.sender, tokens);    \r\n            }\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev release locked tokens only after lockup time.\r\n   */\r\n  function releaseLockedTokensByIndex(address _beneficiary, uint256 _lockedTimeIndex) onlyOwner public {\r\n    require(lockupTimes[_lockedTimeIndex] < now);\r\n    uint256 tokens = lockedTokens[_beneficiary][_lockedTimeIndex];\r\n    if (tokens>0){\r\n        lockedTokens[_beneficiary][_lockedTimeIndex] = 0;\r\n        _deliverTokens(_beneficiary, tokens);    \r\n    }\r\n  }\r\n  \r\n  function releaseLockedTokens(address _beneficiary) public {\r\n    for (uint i=0; i<lockupTimes.length; i++) {\r\n        uint256 lockupTime = lockupTimes[i];\r\n        if (lockupTime < now){\r\n            uint256 tokens = lockedTokens[_beneficiary][i];\r\n            if (tokens>0){\r\n                lockedTokens[_beneficiary][i] = 0;\r\n                _deliverTokens(_beneficiary, tokens);    \r\n            }\r\n        }\r\n    }\r\n    \r\n  }\r\n  \r\n  function tokensReadyForRelease(uint256 releaseBatch) public view returns (bool) {\r\n      bool forRelease = false;\r\n      uint256 lockupTime = lockupTimes[releaseBatch];\r\n      if (lockupTime < now){\r\n        forRelease = true;\r\n      }\r\n      return forRelease;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the locked tokens of a specific user.\r\n   * @param _beneficiary Address whose locked tokens is to be checked\r\n   * @return locked tokens for individual user\r\n   */\r\n  function getTotalLockedTokensPerUser(address _beneficiary) public view returns (uint256) {\r\n    uint256 totalTokens = 0;\r\n    uint256[] memory lTokens = lockedTokens[_beneficiary];\r\n    for (uint i=0; i<lockupTimes.length; i++) {\r\n        totalTokens += lTokens[i];\r\n    }\r\n    return totalTokens;\r\n  }\r\n  \r\n  function getLockedTokensPerUser(address _beneficiary) public view returns (uint256[]) {\r\n    return lockedTokens[_beneficiary];\r\n  }\r\n\r\n  function addPrivateSaleWithMonthlyLockup(address _beneficiary, uint256[] _atokenAmount, uint256 _totalContributionAmount) onlyPrivateSaleAgent public {\r\n      require(_beneficiary != address(0));\r\n      require(_totalContributionAmount > 0);\r\n      require(_atokenAmount.length == lockupTimes.length);\r\n      \r\n      uint256 existingContribution = privateSale[_beneficiary];\r\n      if (existingContribution > 0){\r\n        revert();\r\n      }else{\r\n        lockedTokens[_beneficiary] = _atokenAmount;\r\n        privateSale[_beneficiary] = _totalContributionAmount;\r\n          \r\n        weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.add(_totalContributionAmount);\r\n          \r\n        emit AddLockedTokens(\r\n          _beneficiary,\r\n          _totalContributionAmount,\r\n          _atokenAmount\r\n        );\r\n          \r\n      }\r\n      \r\n  }\r\n  \r\n  /*\r\n  function getTotalTokensPerArray(uint256[] _tokensArray) internal pure returns (uint256) {\r\n      uint256 totalTokensPerArray = 0;\r\n      for (uint i=0; i<_tokensArray.length; i++) {\r\n        totalTokensPerArray += _tokensArray[i];\r\n      }\r\n      return totalTokensPerArray;\r\n  }\r\n  */\r\n\r\n\r\n  /**\r\n   * @dev update locked tokens per user \r\n   * @param _beneficiary Token purchaser\r\n   * @param _lockedTimeIndex lockupTimes index\r\n   * @param _atokenAmount Amount of tokens to be minted\r\n   * @param _totalContributionAmount ETH equivalent of the contribution\r\n   */\r\n  function updatePrivateSaleWithMonthlyLockupByIndex(address _beneficiary, uint _lockedTimeIndex, uint256 _atokenAmount, uint256 _totalContributionAmount) onlyPrivateSaleAgent public {\r\n      require(_beneficiary != address(0));\r\n      require(_totalContributionAmount > 0);\r\n      //_lockedTimeIndex must be valid within the lockuptimes length\r\n      require(_lockedTimeIndex < lockupTimes.length);\r\n\r\n      \r\n      uint256 oldContributions = privateSale[_beneficiary];\r\n      //make sure beneficiary has existing contribution otherwise use addPrivateSaleWithMonthlyLockup\r\n      require(oldContributions > 0);\r\n\r\n      //make sure lockuptime of the index is less than now (tokens were not yet released)\r\n      require(!tokensReadyForRelease(_lockedTimeIndex));\r\n      \r\n      lockedTokens[_beneficiary][_lockedTimeIndex] = _atokenAmount;\r\n      \r\n      //subtract old contribution from weiRaisedDuringPrivateSale\r\n      weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.sub(oldContributions);\r\n      \r\n      //add new contribution to weiRaisedDuringPrivateSale\r\n      privateSale[_beneficiary] = _totalContributionAmount;\r\n      weiRaisedDuringPrivateSale = weiRaisedDuringPrivateSale.add(_totalContributionAmount);\r\n            \r\n      emit UpdateLockedTokens(\r\n      _beneficiary,\r\n      _totalContributionAmount,\r\n      _lockedTimeIndex,\r\n      _atokenAmount\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title ODXPrivateSale\r\n * @dev This is for the private sale of ODX.  \r\n */\r\ncontract ODXPrivateSale is PrivateSaleRules {\r\n\r\n  uint256[] alockupTimes = [1556035200,1556100000,1556121600,1556186400,1556208000,1556272800,1556294400,1556359200,1556380800,1556445600];\r\n  \r\n  constructor(\r\n    ODXToken _token\r\n  )\r\n    public\r\n    PrivateSaleRules(alockupTimes, _token)\r\n  {  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_lockedTimeIndex\",\"type\":\"uint256\"},{\"name\":\"_atokenAmount\",\"type\":\"uint256\"},{\"name\":\"_totalContributionAmount\",\"type\":\"uint256\"}],\"name\":\"updatePrivateSaleWithMonthlyLockupByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedDuringPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_atokenAmount\",\"type\":\"uint256[]\"},{\"name\":\"_totalContributionAmount\",\"type\":\"uint256\"}],\"name\":\"addPrivateSaleWithMonthlyLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimLockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalLockedTokensPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSaleAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releaseLockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockupTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"releaseBatch\",\"type\":\"uint256\"}],\"name\":\"tokensReadyForRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_lockedTimeIndex\",\"type\":\"uint256\"}],\"name\":\"releaseLockedTokensByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getLockedTokensPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPrivateSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalContributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"AddLockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalContributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedTimeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateLockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"PrivateSaleAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ODXPrivateSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000094588247e31dd13c6fbecda4cea7b91533b57246","Library":"","SwarmSource":"bzzr://154c35dc6e84099523434b78b0f0afbf851a5d94e918a840de3ddd5aeecad0af"}]}