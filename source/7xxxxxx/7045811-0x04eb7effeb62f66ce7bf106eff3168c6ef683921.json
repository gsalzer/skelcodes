{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n      \t\treturn 0;\r\n    \t}\r\n\r\n    \tc = a * b;\r\n    \tassert(c / a == b);\r\n    \treturn c;\r\n  \t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn a / b;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    \tc = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n\t}\r\n\t\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"you are not the owner!\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"cannot transfer ownership to ZERO address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ITokenStore {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function transfer(address src, address dest, uint256 amount) external;\r\n    function approve(address owner, address spender, uint256 amount) external;\r\n    function mint(address dest, uint256 amount) external;\r\n    function burn(address dest, uint256 amount) external;\r\n}\r\n\r\n/*\r\n    TokenStore\r\n*/\r\ncontract TokenStore is ITokenStore, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    address private _tokenLogic;\r\n    uint256 private _totalSupply;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    constructor(uint256 totalSupply, address holder) public {\r\n        _totalSupply = totalSupply;\r\n        _balances[holder] = totalSupply;\r\n    }\r\n    \r\n    // token logic\r\n    event ChangeTokenLogic(address newTokenLogic);\r\n    \r\n    modifier onlyTokenLogic() {\r\n        require(msg.sender == _tokenLogic, \"this method MUST be called by the security's logic address\");\r\n        _;\r\n    }\r\n    \r\n    function tokenLogic() public view returns (address) {\r\n        return _tokenLogic;\r\n    }\r\n    \r\n    function setTokenLogic(ITokenLogic newTokenLogic) public onlyOwner {\r\n        _tokenLogic = newTokenLogic;\r\n        emit ChangeTokenLogic(newTokenLogic);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns(uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address src, address dest, uint256 amount) public onlyTokenLogic {\r\n        _balances[src] = _balances[src].sub(amount);\r\n        _balances[dest] = _balances[dest].add(amount);\r\n    }\r\n    \r\n    function approve(address owner, address spender, uint256 amount) public onlyTokenLogic {\r\n        _allowed[owner][spender] = amount;\r\n    }\r\n    \r\n    function mint(address dest, uint256 amount) public onlyTokenLogic {\r\n        _balances[dest] = _balances[dest].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    \r\n    function burn(address dest, uint256 amount) public onlyTokenLogic {\r\n        _balances[dest] = _balances[dest].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n    }\r\n}\r\n\r\n/*\r\n    TokenLogic\r\n*/\r\ninterface ITokenLogic {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value, address owner) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value, address spender) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue, address owner) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external returns (bool);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenLogic\",\"type\":\"address\"}],\"name\":\"setTokenLogic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenLogic\",\"type\":\"address\"}],\"name\":\"ChangeTokenLogic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenStore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000c409c5ae78f1046a7e6a01ae95ed5a848e24429d","Library":"","SwarmSource":"bzzr://c1df92de4b3379a035aab0ef341452d10ffb847534b8cad42d4381973d2a65fc"}]}