{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title AdvertisingInterface\r\n */\r\ninterface AdvertisingInterface {\r\n\tfunction incrementBetCounter() external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != 0x0);\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t\tpublic\r\n\t\treturns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract developed {\r\n\taddress public developer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() public {\r\n\t\tdeveloper = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks only developer address is calling\r\n\t */\r\n\tmodifier onlyDeveloper {\r\n\t\trequire(msg.sender == developer);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to switch developer address\r\n\t * @param _developer The new developer address to be set\r\n\t */\r\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\r\n\t\tdeveloper = _developer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to withdraw ERC20 Token\r\n\t */\r\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\r\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\r\n\t\tif (_token.balanceOf(this) > 0) {\r\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Advertising\r\n */\r\ncontract Advertising is developed, AdvertisingInterface {\r\n\tusing SafeMath for uint256;\r\n\taddress private incrementer;\r\n\r\n\tbool public paused;\r\n\tbool public contractKilled;\r\n\r\n\tuint256 public numCreatives;\r\n\tuint256 public numCreativeTypes;\r\n\tuint256 public maxCountPerCreativeType;\r\n\tuint256 public earnedBalance;\r\n\r\n\tstruct Creative {\r\n\t\tbytes32 creativeId;\r\n\t\taddress advertiser;\r\n\t\tuint256 creativeTypeId;       // This determines the creative size and where we display it\r\n\t\tstring name;\r\n\t\tuint256 weiBudget;\r\n\t\tuint256 weiPerBet;\r\n\t\tuint256 betCounter;\r\n\t\tint256 position;\r\n\t\tstring url;\r\n\t\tstring imageUrl;\r\n\t\tbool approved;\r\n\t\tuint256 createdOn;\r\n\t}\r\n\r\n\tstruct CreativeType {\r\n\t\tstring name;\r\n\t\tuint256 width;\r\n\t\tuint256 height;\r\n\t\t/**\r\n\t\t * @dev Where to display the creative\r\n\t\t * 1 = top\r\n\t\t * 2 = right\r\n\t\t * 3 = bottom\r\n\t\t * 4 = left\r\n\t\t */\r\n\t\tuint256 position;\r\n\t\tbool active;\r\n\t}\r\n\r\n\tmapping (bytes32 => Creative) public creatives;\r\n\tmapping (bytes32 => uint256) private creativeIdLookup;\r\n\tmapping (uint256 => CreativeType) public creativeTypes;\r\n\tmapping (address => uint256) public advertiserPendingWithdrawals;\r\n\tmapping (uint256 => bytes32[]) public pendingCreativePosition;\r\n\tmapping (uint256 => bytes32[]) public approvedCreativePosition;\r\n\r\n\t/**\r\n\t * @dev Log when dev add new creative type\r\n\t */\r\n\tevent LogAddCreativeType(uint256 indexed creativeTypeId, string name, uint256 width, uint256 height, uint256 position);\r\n\r\n\t/**\r\n\t * @dev Log when dev activate/deactivate creative type\r\n\t */\r\n\tevent LogSetActiveCreativeType(uint256 creativeTypeId, bool active);\r\n\r\n\t/**\r\n\t * @dev Log when dev approves creative\r\n\t */\r\n\tevent LogApproveCreative(bytes32 indexed creativeId, address indexed advertiser, uint256 indexed creativeTypeId, int256 position);\r\n\r\n\t/**\r\n\t * @dev Log when dev set contract to emergency mode\r\n\t */\r\n\tevent LogEscapeHatch();\r\n\r\n\t/**\r\n\t * @dev Log when advertiser creates creative\r\n\t */\r\n\tevent LogCreateCreative(bytes32 indexed creativeId, address indexed advertiser, uint256 indexed creativeTypeId, string name, uint256 weiBudget, uint256 weiPerBet, int256 position);\r\n\r\n\t/**\r\n\t * @dev Log when we refund creative\r\n\t * creativeStatus:\r\n\t * 0 = pending\r\n\t * 1 = approved\r\n\t * refundStatus:\r\n\t * 0 = failed\r\n\t * 1 = success\r\n\t */\r\n\tevent LogRefundCreative(bytes32 indexed creativeId, address indexed advertiser, uint256 refundAmount, uint256 creativeStatus, uint256 refundStatus);\r\n\r\n\t/**\r\n\t * @dev Log when advertiser withdraws balance from failed transfer\r\n\t *\r\n\t * Status:\r\n\t * 0 = failed\r\n\t * 1 = success\r\n\t */\r\n\tevent LogWithdrawBalance(address indexed advertiser, uint256 withdrawAmount, uint256 status);\r\n\r\n\t/**\r\n\t * @dev Log when we increment bet counter for a creative\r\n\t */\r\n\tevent LogIncrementBetCounter(bytes32 indexed creativeId, address indexed advertiser, uint256 numBets);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(address _incrementer) public {\r\n\t\tdevSetMaxCountPerCreativeType(10);\r\n\t\tdevSetIncrementer(_incrementer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the contract is currently alive\r\n\t */\r\n\tmodifier contractIsAlive {\r\n\t\trequire(contractKilled == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if contract is active\r\n\t */\r\n\tmodifier isActive {\r\n\t\trequire(paused == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if creative is valid\r\n\t * @param creativeTypeId The creative type ID\r\n\t * @param name The name of this creative\r\n\t * @param weiBudget The budget for this creative\r\n\t * @param weiPerBet Cost per bet for an ad\r\n\t * @param url The url of the ad that we want to redirect to\r\n\t * @param imageUrl The image url for this ad\r\n\t */\r\n\tmodifier creativeIsValid(uint256 creativeTypeId, string name, uint256 weiBudget, uint256 weiPerBet, string url, string imageUrl) {\r\n\t\trequire (creativeTypes[creativeTypeId].active == true &&\r\n\t\t\t bytes(name).length > 0 &&\r\n\t\t\t weiBudget > 0 &&\r\n\t\t\t weiPerBet > 0 &&\r\n\t\t\t weiBudget >= weiPerBet &&\r\n\t\t\t bytes(url).length > 0 &&\r\n\t\t\t bytes(imageUrl).length > 0 &&\r\n\t\t\t (pendingCreativePosition[creativeTypeId].length < maxCountPerCreativeType ||\r\n\t\t\t  (pendingCreativePosition[creativeTypeId].length == maxCountPerCreativeType && weiPerBet > creatives[pendingCreativePosition[creativeTypeId][maxCountPerCreativeType-1]].weiPerBet)\r\n\t\t\t )\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks is caller is from incrementer\r\n\t */\r\n\tmodifier onlyIncrementer {\r\n\t\trequire (msg.sender == incrementer);\r\n\t\t_;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*       DEVELOPER ONLY METHODS           */\r\n\t/******************************************/\r\n\t/**\r\n\t * @dev Dev sets address that is allowed to increment ad metrics\r\n\t * @param _incrementer The address to be set\r\n\t */\r\n\tfunction devSetIncrementer(address _incrementer) public onlyDeveloper {\r\n\t\tincrementer = _incrementer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Dev get incrementer address\r\n\t */\r\n\tfunction devGetIncrementer() public onlyDeveloper constant returns (address) {\r\n\t\treturn incrementer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Dev sets max count per creative type\r\n\t * @param _maxCountPerCreativeType The max number of ad for a creative type\r\n\t */\r\n\tfunction devSetMaxCountPerCreativeType(uint256 _maxCountPerCreativeType) public onlyDeveloper {\r\n\t\trequire (_maxCountPerCreativeType > 0);\r\n\t\tmaxCountPerCreativeType = _maxCountPerCreativeType;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Dev add creative type\r\n\t * @param name The name of this creative type\r\n\t * @param width The width of the creative\r\n\t * @param height The height of the creative\r\n\t * @param position The position of the creative\r\n\t */\r\n\tfunction devAddCreativeType(string name, uint256 width, uint256 height, uint256 position) public onlyDeveloper {\r\n\t\trequire (width > 0 && height > 0 && position > 0);\r\n\r\n\t\t// Increment num creative types\r\n\t\tnumCreativeTypes++;\r\n\r\n\t\tCreativeType storage _creativeType = creativeTypes[numCreativeTypes];\r\n\r\n\t\t// Store the info about this creative type\r\n\t\t_creativeType.name = name;\r\n\t\t_creativeType.width = width;\r\n\t\t_creativeType.height = height;\r\n\t\t_creativeType.position = position;\r\n\t\t_creativeType.active = true;\r\n\r\n\t\temit LogAddCreativeType(numCreativeTypes, _creativeType.name, _creativeType.width, _creativeType.height, _creativeType.position);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Dev activate/deactivate creative type\r\n\t * @param creativeTypeId The creative type ID to be set\r\n\t * @param active The bool value to be set\r\n\t */\r\n\tfunction devSetActiveCreativeType(uint256 creativeTypeId, bool active) public onlyDeveloper {\r\n\t\tcreativeTypes[creativeTypeId].active = active;\r\n\t\temit LogSetActiveCreativeType(creativeTypeId, active);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to approve/disapprove a creative\r\n\t * @param creativeId The creative ID to be approved\r\n\t */\r\n\tfunction devApproveCreative(bytes32 creativeId) public onlyDeveloper {\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\t\trequire (_creative.approved == false && _creative.position > -1 && _creative.createdOn > 0);\r\n\t\t_creative.approved = true;\r\n\t\t_removePending(creativeId);\r\n\t\t_insertSortApprovedCreative(_creative.creativeTypeId, _creative.creativeId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to withdraw earned balance\r\n\t */\r\n\tfunction devWithdrawEarnedBalance() public onlyDeveloper returns (bool) {\r\n\t\trequire (earnedBalance > 0);\r\n\t\trequire (address(this).balance >= earnedBalance);\r\n\t\tuint256 withdrawAmount = earnedBalance;\r\n\t\tearnedBalance = 0;\r\n\t\tif (!developer.send(withdrawAmount)) {\r\n\t\t\tearnedBalance = withdrawAmount;\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Dev ends the ad\r\n\t * @param creativeId The creative ID to be ended\r\n\t */\r\n\tfunction devEndCreative(bytes32 creativeId) public onlyDeveloper {\r\n\t\t_endCreative(creativeId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to pause the contract\r\n\t * @param _paused The new paused value to be set\r\n\t */\r\n\tfunction devSetPaused(bool _paused) public onlyDeveloper {\r\n\t\tpaused = _paused;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to trigger emergency mode.\r\n\t */\r\n\tfunction escapeHatch() public onlyDeveloper contractIsAlive returns (bool) {\r\n\t\tcontractKilled = true;\r\n\t\tif (earnedBalance > 0) {\r\n\t\t\tuint256 withdrawAmount = earnedBalance;\r\n\t\t\tearnedBalance = 0;\r\n\t\t\tif (!developer.send(withdrawAmount)) {\r\n\t\t\t\tearnedBalance = withdrawAmount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (numCreativeTypes > 0) {\r\n\t\t\tfor (uint256 i=1; i <= numCreativeTypes; i++) {\r\n\t\t\t\t/*\r\n\t\t\t\t * First, we refund all the pending creatives.\r\n\t\t\t\t * Instead of sending the refund amount, we ask advertisers to withdraw the refunded amount themselves\r\n\t\t\t\t */\r\n\t\t\t\tuint256 creativeCount = pendingCreativePosition[i].length;\r\n\t\t\t\tif (creativeCount > 0) {\r\n\t\t\t\t\tfor (uint256 j=0; j < creativeCount; j++) {\r\n\t\t\t\t\t\tCreative memory _creative = creatives[pendingCreativePosition[i][j]];\r\n\r\n\t\t\t\t\t\t// let advertiser withdraw via advertiserPendingWithdrawals\r\n\t\t\t\t\t\tadvertiserPendingWithdrawals[_creative.advertiser] = advertiserPendingWithdrawals[_creative.advertiser].add(_creative.weiBudget);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Then, we refund all the approved creatives\r\n\t\t\t\t */\r\n\t\t\t\tcreativeCount = approvedCreativePosition[i].length;\r\n\t\t\t\tif (creativeCount > 0) {\r\n\t\t\t\t\tfor (j=0; j < creativeCount; j++) {\r\n\t\t\t\t\t\t_creative = creatives[approvedCreativePosition[i][j]];\r\n\t\t\t\t\t\tuint256 refundAmount = _creative.weiBudget.sub(_creative.betCounter.mul(_creative.weiPerBet));\r\n\t\t\t\t\t\t// let advertiser withdraw via advertiserPendingWithdrawals\r\n\t\t\t\t\t\tadvertiserPendingWithdrawals[_creative.advertiser] = advertiserPendingWithdrawals[_creative.advertiser].add(refundAmount);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit LogEscapeHatch();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*      INCREMENT ADDRESS METHODS         */\r\n\t/******************************************/\r\n\tfunction incrementBetCounter() public onlyIncrementer contractIsAlive isActive returns (bool) {\r\n\t\tif (numCreativeTypes > 0) {\r\n\t\t\tfor (uint256 i=1; i <= numCreativeTypes; i++) {\r\n\t\t\t\tCreativeType memory _creativeType = creativeTypes[i];\r\n\t\t\t\tuint256 creativeCount = approvedCreativePosition[i].length;\r\n\t\t\t\tif (_creativeType.active == false || creativeCount == 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tCreative storage _creative = creatives[approvedCreativePosition[i][0]];\r\n\t\t\t\t_creative.betCounter++;\r\n\t\t\t\temit LogIncrementBetCounter(_creative.creativeId, _creative.advertiser, _creative.betCounter);\r\n\r\n\t\t\t\tuint256 totalSpent = _creative.weiPerBet.mul(_creative.betCounter);\r\n\t\t\t\tif (totalSpent > _creative.weiBudget) {\r\n\t\t\t\t\tearnedBalance = earnedBalance.add(_creative.weiBudget.sub(_creative.weiPerBet.mul(_creative.betCounter.sub(1))));\r\n\t\t\t\t\t_removeApproved(_creative.creativeId);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tearnedBalance = earnedBalance.add(_creative.weiPerBet);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*             PUBLIC METHODS             */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Advertiser submits an ad\r\n\t * @param creativeTypeId The creative type ID (determines where we display it)\r\n\t * @param name The name of this creative\r\n\t * @param weiPerBet Cost per bet for an ad\r\n\t * @param url The url of the ad that we want to redirect to\r\n\t * @param imageUrl The image url for this ad\r\n\t */\r\n\tfunction createCreative(uint256 creativeTypeId, string name, uint256 weiPerBet, string url, string imageUrl)\r\n\t\tpublic\r\n\t\tpayable\r\n\t\tcontractIsAlive\r\n\t\tisActive\r\n\t\tcreativeIsValid(creativeTypeId, name, msg.value, weiPerBet, url, imageUrl) {\r\n\t\t// Increment num creatives\r\n\t\tnumCreatives++;\r\n\r\n\t\t// Generate ID for this creative\r\n\t\tbytes32 creativeId = keccak256(abi.encodePacked(this, msg.sender, numCreatives));\r\n\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\r\n\t\t// Store the info about this creative\r\n\t\t_creative.creativeId = creativeId;\r\n\t\t_creative.advertiser = msg.sender;\r\n\t\t_creative.creativeTypeId = creativeTypeId;\r\n\t\t_creative.name = name;\r\n\t\t_creative.weiBudget = msg.value;\r\n\t\t_creative.weiPerBet = weiPerBet;\r\n\t\t_creative.url = url;\r\n\t\t_creative.imageUrl = imageUrl;\r\n\t\t_creative.createdOn = now;\r\n\r\n\t\t// Decide which position this creative is\r\n\t\t_insertSortPendingCreative(creativeTypeId, creativeId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advertiser ends the ad\r\n\t * @param creativeId The creative ID to be ended\r\n\t */\r\n\tfunction endCreative(bytes32 creativeId) public\r\n\t\tcontractIsAlive\r\n\t\tisActive {\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\t\trequire (_creative.advertiser == msg.sender);\r\n\t\t_endCreative(creativeId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev withdraws balance in case of a failed refund or failed win send\r\n\t */\r\n\tfunction withdrawPendingTransactions() public {\r\n\t\tuint256 withdrawAmount = advertiserPendingWithdrawals[msg.sender];\r\n\t\trequire (withdrawAmount > 0);\r\n\t\trequire (address(this).balance >= withdrawAmount);\r\n\r\n\t\tadvertiserPendingWithdrawals[msg.sender] = 0;\r\n\r\n\t\t// External call to untrusted contract\r\n\t\tif (msg.sender.send(withdrawAmount)) {\r\n\t\t\temit LogWithdrawBalance(msg.sender, withdrawAmount, 1);\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\t * If send failed, revert advertiserPendingWithdrawals[msg.sender] = 0\r\n\t\t\t * so that player can try to withdraw again later\r\n\t\t\t */\r\n\t\t\tadvertiserPendingWithdrawals[msg.sender] = withdrawAmount;\r\n\t\t\temit LogWithdrawBalance(msg.sender, withdrawAmount, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*           INTERNAL METHODS             */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Insert the newly submitted creative and sort the array to determine its position.\r\n\t *      If the array container length is greater than max count, then we want to refund the last element\r\n\t * @param creativeTypeId The creative type ID of this ad\r\n\t * @param creativeId The creative ID of this ad\r\n\t */\r\n\tfunction _insertSortPendingCreative(uint256 creativeTypeId, bytes32 creativeId) internal {\r\n\t\tpendingCreativePosition[creativeTypeId].push(creativeId);\r\n\r\n\t\tuint256 pendingCount = pendingCreativePosition[creativeTypeId].length;\r\n\t\tbytes32[] memory copyArray = new bytes32[](pendingCount);\r\n\r\n\t\tfor (uint256 i=0; i<pendingCount; i++) {\r\n\t\t\tcopyArray[i] = pendingCreativePosition[creativeTypeId][i];\r\n\t\t}\r\n\r\n\t\tuint256 value;\r\n\t\tbytes32 key;\r\n\t\tfor (i = 1; i < copyArray.length; i++) {\r\n\t\t\tkey = copyArray[i];\r\n\t\t\tvalue = creatives[copyArray[i]].weiPerBet;\r\n\t\t\tfor (uint256 j=i; j > 0 && creatives[copyArray[j-1]].weiPerBet < value; j--) {\r\n\t\t\t\tcopyArray[j] = copyArray[j-1];\r\n\t\t\t}\r\n\t\t\tcopyArray[j] = key;\r\n\t\t}\r\n\r\n\t\tfor (i=0; i<pendingCount; i++) {\r\n\t\t\tpendingCreativePosition[creativeTypeId][i] = copyArray[i];\r\n\t\t\tcreatives[copyArray[i]].position = int(i);\r\n\t\t}\r\n\r\n\t\tCreative memory _creative = creatives[creativeId];\r\n\t\temit LogCreateCreative(_creative.creativeId, _creative.advertiser, _creative.creativeTypeId, _creative.name, _creative.weiBudget, _creative.weiPerBet, _creative.position);\r\n\r\n\t\t// If total count is more than max count, then we want to refund the last ad\r\n\t\tif (pendingCount > maxCountPerCreativeType) {\r\n\t\t\tbytes32 removeCreativeId = pendingCreativePosition[creativeTypeId][pendingCount-1];\r\n\t\t\tcreatives[removeCreativeId].position = -1;\r\n\t\t\tdelete pendingCreativePosition[creativeTypeId][pendingCount-1];\r\n\t\t\tpendingCreativePosition[creativeTypeId].length--;\r\n\t\t\t_refundPending(removeCreativeId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Refund the pending creative\r\n\t * @param creativeId The creative ID of this ad\r\n\t */\r\n\tfunction _refundPending(bytes32 creativeId) internal {\r\n\t\tCreative memory _creative = creatives[creativeId];\r\n\t\trequire (address(this).balance >= _creative.weiBudget);\r\n\t\trequire (_creative.position == -1);\r\n\t\tif (!_creative.advertiser.send(_creative.weiBudget)) {\r\n\t\t\temit LogRefundCreative(_creative.creativeId, _creative.advertiser, _creative.weiBudget, 0, 0);\r\n\r\n\t\t\t// If send failed, let advertiser withdraw via advertiserPendingWithdrawals\r\n\t\t\tadvertiserPendingWithdrawals[_creative.advertiser] = advertiserPendingWithdrawals[_creative.advertiser].add(_creative.weiBudget);\r\n\t\t} else {\r\n\t\t\temit LogRefundCreative(_creative.creativeId, _creative.advertiser, _creative.weiBudget, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Insert the newly approved creative and sort the array to determine its position.\r\n\t *      If the array container length is greater than max count, then we want to refund the last element.\r\n\t * @param creativeTypeId The creative type ID of this ad\r\n\t * @param creativeId The creative ID of this ad\r\n\t */\r\n\tfunction _insertSortApprovedCreative(uint256 creativeTypeId, bytes32 creativeId) internal {\r\n\t\tapprovedCreativePosition[creativeTypeId].push(creativeId);\r\n\r\n\t\tuint256 approvedCount = approvedCreativePosition[creativeTypeId].length;\r\n\t\tbytes32[] memory copyArray = new bytes32[](approvedCount);\r\n\r\n\t\tfor (uint256 i=0; i<approvedCount; i++) {\r\n\t\t\tcopyArray[i] = approvedCreativePosition[creativeTypeId][i];\r\n\t\t}\r\n\r\n\t\tuint256 value;\r\n\t\tbytes32 key;\r\n\t\tfor (i = 1; i < copyArray.length; i++) {\r\n\t\t\tkey = copyArray[i];\r\n\t\t\tvalue = creatives[copyArray[i]].weiPerBet;\r\n\t\t\tfor (uint256 j=i; j > 0 && creatives[copyArray[j-1]].weiPerBet < value; j--) {\r\n\t\t\t\tcopyArray[j] = copyArray[j-1];\r\n\t\t\t}\r\n\t\t\tcopyArray[j] = key;\r\n\t\t}\r\n\r\n\t\tfor (i=0; i<approvedCount; i++) {\r\n\t\t\tapprovedCreativePosition[creativeTypeId][i] = copyArray[i];\r\n\t\t\tcreatives[copyArray[i]].position = int(i);\r\n\t\t}\r\n\r\n\t\tCreative memory _creative = creatives[creativeId];\r\n\t\temit LogApproveCreative(_creative.creativeId, _creative.advertiser, _creative.creativeTypeId, _creative.position);\r\n\r\n\t\t// If total count is more than max count, then we want to refund the last ad\r\n\t\tif (approvedCount > maxCountPerCreativeType) {\r\n\t\t\tbytes32 removeCreativeId = approvedCreativePosition[creativeTypeId][approvedCount-1];\r\n\t\t\tcreatives[removeCreativeId].position = -1;\r\n\t\t\tdelete approvedCreativePosition[creativeTypeId][approvedCount-1];\r\n\t\t\tapprovedCreativePosition[creativeTypeId].length--;\r\n\t\t\t_refundApproved(removeCreativeId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Refund the approved creative\r\n\t * @param creativeId The creative ID of this ad\r\n\t */\r\n\tfunction _refundApproved(bytes32 creativeId) internal {\r\n\t\tCreative memory _creative = creatives[creativeId];\r\n\t\tuint256 refundAmount = _creative.weiBudget.sub(_creative.betCounter.mul(_creative.weiPerBet));\r\n\t\trequire (address(this).balance >= refundAmount);\r\n\t\trequire (_creative.position == -1);\r\n\t\tif (!_creative.advertiser.send(refundAmount)) {\r\n\t\t\temit LogRefundCreative(_creative.creativeId, _creative.advertiser, refundAmount, 1, 0);\r\n\r\n\t\t\t// If send failed, let advertiser withdraw via advertiserPendingWithdrawals\r\n\t\t\tadvertiserPendingWithdrawals[_creative.advertiser] = advertiserPendingWithdrawals[_creative.advertiser].add(refundAmount);\r\n\t\t} else {\r\n\t\t\temit LogRefundCreative(_creative.creativeId, _creative.advertiser, refundAmount, 1, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev End creative\r\n\t * @param creativeId The creative ID to be removed\r\n\t */\r\n\tfunction _endCreative(bytes32 creativeId) internal {\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\t\trequire (_creative.position > -1 && _creative.createdOn > 0);\r\n\r\n\t\tif (_creative.approved == false) {\r\n\t\t\t_removePending(creativeId);\r\n\t\t\t_refundPending(creativeId);\r\n\t\t} else {\r\n\t\t\t_removeApproved(creativeId);\r\n\t\t\t_refundApproved(creativeId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove element in pending creatives array\r\n\t * @param creativeId The creative ID to be removed\r\n\t */\r\n\tfunction _removePending(bytes32 creativeId) internal {\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\t\tuint256 pendingCount = pendingCreativePosition[_creative.creativeTypeId].length;\r\n\r\n\t\tif (_creative.position >= int256(pendingCount)) return;\r\n\r\n\t\tfor (uint256 i = uint256(_creative.position); i < pendingCount-1; i++){\r\n\t\t\tpendingCreativePosition[_creative.creativeTypeId][i] = pendingCreativePosition[_creative.creativeTypeId][i+1];\r\n\t\t\tcreatives[pendingCreativePosition[_creative.creativeTypeId][i]].position = int256(i);\r\n\t\t}\r\n\t\t_creative.position = -1;\r\n\t\tdelete pendingCreativePosition[_creative.creativeTypeId][pendingCount-1];\r\n\t\tpendingCreativePosition[_creative.creativeTypeId].length--;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove element in approved creatives array\r\n\t * @param creativeId The creative ID to be removed\r\n\t */\r\n\tfunction _removeApproved(bytes32 creativeId) internal {\r\n\t\tCreative storage _creative = creatives[creativeId];\r\n\t\tuint256 approvedCount = approvedCreativePosition[_creative.creativeTypeId].length;\r\n\r\n\t\tif (_creative.position >= int256(approvedCount)) return;\r\n\r\n\t\tfor (uint256 i = uint256(_creative.position); i < approvedCount-1; i++){\r\n\t\t\tapprovedCreativePosition[_creative.creativeTypeId][i] = approvedCreativePosition[_creative.creativeTypeId][i+1];\r\n\t\t\tcreatives[approvedCreativePosition[_creative.creativeTypeId][i]].position = int256(i);\r\n\t\t}\r\n\t\t_creative.position = -1;\r\n\t\tdelete approvedCreativePosition[_creative.creativeTypeId][approvedCount-1];\r\n\t\tapprovedCreativePosition[_creative.creativeTypeId].length--;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"weiPerBet\",\"type\":\"uint256\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"}],\"name\":\"createCreative\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"escapeHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractKilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"devSetPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedCreativePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingCreativePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPendingTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devWithdrawEarnedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"advertiserPendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devGetIncrementer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"creatives\",\"outputs\":[{\"name\":\"creativeId\",\"type\":\"bytes32\"},{\"name\":\"advertiser\",\"type\":\"address\"},{\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"weiBudget\",\"type\":\"uint256\"},{\"name\":\"weiPerBet\",\"type\":\"uint256\"},{\"name\":\"betCounter\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"int256\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"createdOn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCreativeTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCountPerCreativeType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incrementBetCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"width\",\"type\":\"uint256\"},{\"name\":\"height\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"devAddCreativeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creativeTypes\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"width\",\"type\":\"uint256\"},{\"name\":\"height\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creativeId\",\"type\":\"bytes32\"}],\"name\":\"devApproveCreative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCreatives\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creativeId\",\"type\":\"bytes32\"}],\"name\":\"endCreative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creativeId\",\"type\":\"bytes32\"}],\"name\":\"devEndCreative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earnedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"devSetActiveCreativeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_incrementer\",\"type\":\"address\"}],\"name\":\"devSetIncrementer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxCountPerCreativeType\",\"type\":\"uint256\"}],\"name\":\"devSetMaxCountPerCreativeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_incrementer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"width\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"LogAddCreativeType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"LogSetActiveCreativeType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creativeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"int256\"}],\"name\":\"LogApproveCreative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogEscapeHatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creativeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creativeTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weiBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiPerBet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"int256\"}],\"name\":\"LogCreateCreative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creativeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creativeStatus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundStatus\",\"type\":\"uint256\"}],\"name\":\"LogRefundCreative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creativeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numBets\",\"type\":\"uint256\"}],\"name\":\"LogIncrementBetCounter\",\"type\":\"event\"}]","ContractName":"Advertising","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000453939ddbb64a8ce1da8b0648281ca281dfaa2ef","Library":"","SwarmSource":"bzzr://66dad66ff9d66f9c89ae829ad68ac401714bf0518181fb47650f4ca17f96b0fe"}]}