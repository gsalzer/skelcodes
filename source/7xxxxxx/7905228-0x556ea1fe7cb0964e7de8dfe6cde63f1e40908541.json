{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title Proxy\r\n * @dev This is the proxy contract for the DUSDToken Registry\r\n */\r\ncontract Proxy {\r\n    \r\n    /**\r\n    * @dev Tell the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function implementation() public view returns (address);\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns.\r\n    */\r\n    function() external payable {\r\n        address _impl = implementation();\r\n        require(_impl != address(0), \"Proxy: implementation contract not set\");\r\n        \r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n\r\n    // Event, it will be emitted every time the implementation gets upgraded.\r\n    event Upgraded(address indexed currentImplementation, address indexed newImplementation);\r\n\r\n    // Storage position of the address of the current implementation\r\n    bytes32 private constant implementationPosition = keccak256(\"DUSD.proxy.implementation\");\r\n\r\n    /**\r\n    * @dev Return to the current implementation.\r\n    */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n          impl := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set the address of the current implementation.\r\n    * @param newImplementation address representing the new implementation to be set.\r\n    */\r\n    function _setImplementation(address newImplementation) internal {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n          sstore(position, newImplementation)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrade the implementation address.\r\n    * @param newImplementation representing the address of the new implementation to be set.\r\n    */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        address currentImplementation = implementation();\r\n        require(currentImplementation != newImplementation, \"UpgradeabilityProxy: newImplementation is the same as currentImplementation\");\r\n        emit Upgraded(currentImplementation, newImplementation);\r\n        _setImplementation(newImplementation);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title DUSDProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract DUSDProxy is UpgradeabilityProxy {\r\n\r\n    // Event to show ownership has been transferred.\r\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Event to show ownership transfer is pending.\r\n    event NewPendingOwner(address currentOwner, address pendingOwner);\r\n    \r\n    // Storage position of the owner and pendingOwner of the contract.\r\n    bytes32 private constant proxyOwnerPosition = keccak256(\"DUSD.proxy.owner\");\r\n    bytes32 private constant pendingProxyOwnerPosition = keccak256(\"DUSD.pending.proxy.owner\");\r\n\r\n    /**\r\n    * @dev The constructor sets the original owner of the contract to the sender account.\r\n    */\r\n    constructor() public {\r\n        _setUpgradeabilityOwner(0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1);\r\n    }\r\n\r\n    /**\r\n    * @dev Throw if called by any account other than the proxy owner.\r\n    */\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner(), \"DUSDProxy: the caller must be the proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throw if called by any account other than the pending owner.\r\n    */\r\n    modifier onlyPendingProxyOwner() {\r\n        require(msg.sender == pendingProxyOwner(), \"DUSDProxy: the caller must be the pending proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Return the address of the proxy owner.\r\n    * @return The address of the proxy owner.\r\n    */\r\n    function proxyOwner() public view returns (address owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Return the address of the pending proxy owner.\r\n    * @return The address of the pending proxy owner.\r\n    */\r\n    function pendingProxyOwner() public view returns (address pendingOwner) {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            pendingOwner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set the address of the proxy owner.\r\n    */\r\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newProxyOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set the address of the pending proxy owner.\r\n    */\r\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newPendingProxyOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Change the owner of the proxy.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\r\n        require(newOwner != address(0), \"DUSDProxy: cannot transfer control of the proxy owner to the zero address\");\r\n        _setPendingUpgradeabilityOwner(newOwner);\r\n        emit NewPendingOwner(proxyOwner(), newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Allow the pendingOwner to claim ownership of the proxy.\r\n    */\r\n    function claimProxyOwnership() external onlyPendingProxyOwner {\r\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\r\n        _setUpgradeabilityOwner(pendingProxyOwner());\r\n        _setPendingUpgradeabilityOwner(address(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Allow the proxy owner to upgrade the current version of the proxy.\r\n    * @param implementation representing the address of the new implementation to be set.\r\n    */\r\n    function upgradeTo(address implementation) external onlyProxyOwner {\r\n        _upgradeTo(implementation);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingProxyOwner\",\"outputs\":[{\"name\":\"pendingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentImplementation\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"DUSDProxy","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0968ee6228ffc3115383125c18ee0282bf8e0df1cf7e24a8bbb24287caed7243"}]}