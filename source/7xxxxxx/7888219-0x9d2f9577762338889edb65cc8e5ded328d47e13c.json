{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n**/\r\n\r\nlibrary SafeMathLib{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n**/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract APM is Ownable {\r\n    using SafeMathLib for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    \r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed from, address indexed spender, uint tokens);\r\n    \r\n    constructor(uint256 tokenSupply, string tokenName, string tokenSymbol) public {\r\n        totalSupply = tokenSupply; \r\n        balances[msg.sender] = totalSupply;  \r\n        name = tokenName;                                 \r\n        symbol = tokenSymbol;                           \r\n    }\r\n\r\n    /** ****************************** Internal ******************************** **/ \r\n        /**\r\n         * @dev Internal transfer for all functions that transfer.\r\n         * @param _from The address that is transferring coins.\r\n         * @param _to The receiving address of the coins.\r\n         * @param _amount The amount of coins being transferred.\r\n        **/\r\n\r\n        function _transfer(address _from, address _to, uint256 _amount) internal returns (bool success)\r\n        {\r\n            require (_to != address(0));\r\n            require(balances[_from] >= _amount);\r\n            \r\n            balances[_from] = balances[_from].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            \r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Internal approve for all functions that require an approve.\r\n         * @param _owner The owner who is allowing spender to use their balance.\r\n         * @param _spender The wallet approved to spend tokens.\r\n         * @param _amount The amount of tokens approved to spend.\r\n        **/\r\n        function _approve(address _owner, address _spender, uint256 _amount) internal returns (bool success)\r\n        {\r\n            allowed[_owner][_spender] = _amount;\r\n            emit Approval(_owner, _spender, _amount);\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Increases the allowed by \"_amount\" for \"_spender\" from \"owner\"\r\n         * @param _owner The address that tokens may be transferred from.\r\n         * @param _spender The address that may transfer these tokens.\r\n         * @param _amount The amount of tokens to transfer.\r\n        **/\r\n        function _increaseApproval(address _owner, address _spender, uint256 _amount) internal returns (bool success)\r\n        {\r\n            allowed[_owner][_spender] = allowed[_owner][_spender].add(_amount);\r\n            emit Approval(_owner, _spender, allowed[_owner][_spender]);\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Decreases the allowed by \"_amount\" for \"_spender\" from \"_owner\"\r\n         * @param _owner The owner of the tokens to decrease allowed for.\r\n         * @param _spender The spender whose allowed will decrease.\r\n         * @param _amount The amount of tokens to decrease allowed by.\r\n        **/\r\n        function _decreaseApproval(address _owner, address _spender, uint256 _amount) internal returns (bool success)\r\n        {\r\n            if (allowed[_owner][_spender] <= _amount) allowed[_owner][_spender] = 0;\r\n            else allowed[_owner][_spender] = allowed[_owner][_spender].sub(_amount);\r\n            \r\n            emit Approval(_owner, _spender, allowed[_owner][_spender]);\r\n            return true;\r\n        }\r\n    /** ****************************** End Internal ******************************** **/\r\n \r\n\r\n    /** ******************************** ERC20 ********************************* **/\r\n        /**\r\n         * @dev Transfers coins from one address to another.\r\n         * @param _to The recipient of the transfer amount.\r\n         * @param _amount The amount of tokens to transfer.\r\n        **/\r\n        function transfer(address _to, uint256 _amount) public returns (bool success)\r\n        {\r\n            require(_transfer(msg.sender, _to, _amount));\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev An allowed address can transfer tokens from another's address.\r\n         * @param _from The owner of the tokens to be transferred.\r\n         * @param _to The address to which the tokens will be transferred.\r\n         * @param _amount The amount of tokens to be transferred.\r\n        **/\r\n        function transferFrom(address _from, address _to, uint _amount) public returns (bool success)\r\n        {\r\n            require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);\r\n\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            \r\n            require(_transfer(_from, _to, _amount));\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Approves a wallet to transfer tokens on one's behalf.\r\n         * @param _spender The wallet approved to spend tokens.\r\n         * @param _amount The amount of tokens approved to spend.\r\n        **/\r\n        function approve(address _spender, uint256 _amount) public returns (bool success)\r\n        {\r\n            require(_approve(msg.sender, _spender, _amount));\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Increases the allowed amount for spender from msg.sender.\r\n         * @param _spender The address to increase allowed amount for.\r\n         * @param _amount The amount of tokens to increase allowed amount by.\r\n        **/\r\n        function increaseApproval(address _spender, uint256 _amount) public returns (bool success)\r\n        {\r\n            require(_increaseApproval(msg.sender, _spender, _amount));\r\n            return true;\r\n        }\r\n        \r\n        /**\r\n         * @dev Decreases the allowed amount for spender from msg.sender.\r\n         * @param _spender The address to decrease allowed amount for.\r\n         * @param _amount The amount of tokens to decrease allowed amount by.\r\n        **/\r\n        function decreaseApproval(address _spender, uint256 _amount) public returns (bool success)\r\n        {\r\n            require(_decreaseApproval(msg.sender, _spender, _amount));\r\n            return true;\r\n        }\r\n    /** ******************************** End ERC20 ********************************* **/\r\n    \r\n\r\n    /** ******************************** Avior Plus Miles ********************** **/\r\n        function transferDelegate(address _from, address _to, uint256 _amount, uint256 _fee) public onlyOwner returns (bool success) \r\n        {\r\n            require(balances[_from] >= _amount + _fee);\r\n            require(_transfer(_from, _to, _amount));\r\n            require(_transfer(_from, msg.sender, _fee));\r\n            return true;\r\n        }\r\n    /** ******************************** END Avior Plus Miles ********************** **/\r\n\r\n    \r\n    /** ****************************** Constants ******************************* **/\r\n    \r\n        /**\r\n         * @dev Return total supply of token.\r\n        **/\r\n        function totalSupply() external view returns (uint256)\r\n        {\r\n            return totalSupply;\r\n        }\r\n\r\n        /**\r\n         * @dev Return balance of a certain address.\r\n         * @param _owner The address whose balance we want to check.\r\n        **/\r\n        function balanceOf(address _owner) external view returns (uint256) \r\n        {\r\n            return balances[_owner];\r\n        }\r\n        \r\n        function notRedeemed() external view returns (uint256) \r\n        {\r\n            return totalSupply - balances[owner];\r\n        }\r\n        \r\n        /**\r\n         * @dev Allowed amount for a user to spend of another's tokens.\r\n         * @param _owner The owner of the tokens approved to spend.\r\n         * @param _spender The address of the user allowed to spend the tokens.\r\n        **/\r\n        function allowance(address _owner, address _spender) external view returns (uint256) \r\n        {\r\n            return allowed[_owner][_spender];\r\n        }\r\n    /** ****************************** END Constants ******************************* **/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"transferDelegate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"APM","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000104176696f7220506c7573204d696c657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341504d0000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://39a0ee1aa2218907fe2103493560156413c49b7f5b0f211f12643f7b82e42768"}]}