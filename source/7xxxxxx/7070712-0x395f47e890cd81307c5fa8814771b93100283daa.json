{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/helpers/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n\r\n    event OwnershipTransferred(\r\n      address indexed previousOwner,\r\n      address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Account is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"Account is not pending owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Empty address\");\r\n        pendingOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/AllowanceSheet.sol\r\n\r\n/**\r\n* @title AllowanceSheet\r\n* @notice A wrapper around an allowance mapping. \r\n*/\r\ncontract AllowanceSheet is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/BalanceSheet.sol\r\n\r\n/**\r\n* @title BalanceSheet\r\n* @notice A wrapper around the balanceOf mapping. \r\n*/\r\ncontract BalanceSheet is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    uint256 public totalSupply;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n\r\n    function addTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.add(_value);\r\n    }\r\n\r\n    function subTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.sub(_value);\r\n    }\r\n\r\n    function setTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/token/dataStorage/TokenStorage.sol\r\n\r\n/**\r\n* @title TokenStorage\r\n*/\r\ncontract TokenStorage {\r\n    /**\r\n        Storage\r\n    */\r\n    BalanceSheet public balances;\r\n    AllowanceSheet public allowances;\r\n\r\n\r\n    string public name;   //name of Token                \r\n    uint8  public decimals;        //decimals of Token        \r\n    string public symbol;   //Symbol of Token\r\n\r\n    /**\r\n    * @dev a TokenStorage consumer can set its storages only once, on construction\r\n    *\r\n    **/\r\n    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public {\r\n        balances = BalanceSheet(_balances);\r\n        allowances = AllowanceSheet(_allowances);\r\n\r\n        name = _name;\r\n        decimals = _decimals;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev claim ownership of balance sheet passed into constructor.\r\n    **/\r\n    function claimBalanceOwnership() public {\r\n        balances.claimOwnership();\r\n    }\r\n\r\n    /**\r\n    * @dev claim ownership of allowance sheet passed into constructor.\r\n    **/\r\n    function claimAllowanceOwnership() public {\r\n        allowances.claimOwnership();\r\n    }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/Proxy.sol\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/token/TokenProxy.sol\r\n\r\n/**\r\n* @title TokenProxy\r\n* @notice A proxy contract that serves the latest implementation of TokenProxy.\r\n*/\r\ncontract TokenProxy is UpgradeabilityProxy, TokenStorage, Ownable {\r\n    constructor(address _implementation, address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) \r\n    UpgradeabilityProxy(_implementation) \r\n    TokenStorage(_balances, _allowances, _name, _decimals, _symbol) public {\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrade the backing implementation of the proxy.\r\n    * Only the admin can call this function.\r\n    * @param newImplementation Address of the new implementation.\r\n    */\r\n    function upgradeTo(address newImplementation) public onlyOwner {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n    * @return The address of the implementation.\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBalanceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAllowanceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_balances\",\"type\":\"address\"},{\"name\":\"_allowances\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"TokenProxy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008ce6d33ba7af176fe818c17a96c0c3cfa8ffec990000000000000000000000005add827c5e0b4737c0063f1af3d8f26ba2cf5b2300000000000000000000000023c5814cf742bfe387417aa2d06b2fcf76c2097e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000009416b726f706f6c697300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414b540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://72bb4bbd2bf29e21fc63afadfd0d610a43678875030d2e27bce0b91fab2766a6"}]}