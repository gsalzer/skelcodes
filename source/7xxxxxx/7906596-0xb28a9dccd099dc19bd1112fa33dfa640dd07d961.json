{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Utils.sol\r\n\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\npragma solidity 0.5.7;\r\n\r\n\r\ncontract Utils {\r\n    /** MODIFIERS **/\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"invalid address\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/management/Manageable.sol\r\n\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\n pragma solidity 0.5.7;\r\n\r\n\r\n\r\ncontract Manageable is Ownable, Utils {\r\n    mapping(address => bool) public isManager;     // manager accounts\r\n\r\n    /** EVENTS **/\r\n    event ChangedManager(address indexed manager, bool active);\r\n\r\n    /** MODIFIERS **/\r\n    modifier onlyManager() {\r\n        require(isManager[msg.sender], \"is not manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice constructor sets the deployer as a manager\r\n    */\r\n    constructor() public {\r\n        setManager(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @notice enable/disable an account to be a manager\r\n     * @param _manager address address of the manager to create/alter\r\n     * @param _active bool flag that shows if the manager account is active\r\n     */\r\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\r\n        isManager[_manager] = _active;\r\n        emit ChangedManager(_manager, _active);\r\n    }\r\n\r\n    /** OVERRIDE \r\n    * @notice does not allow owner to give up ownership\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        revert(\"Cannot renounce ownership\");\r\n    }\r\n}\r\n\r\n// File: contracts/whitelist/GlobalWhitelist.sol\r\n\r\n/**\r\n * @title Global Whitelist Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\ncontract GlobalWhitelist is Ownable, Manageable {\r\n    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\r\n    bool public isWhitelisting = true;             // whitelisting enabled by default\r\n\r\n    /** EVENTS **/\r\n    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\r\n    event GlobalWhitelistDisabled(address indexed manager);\r\n    event GlobalWhitelistEnabled(address indexed manager);\r\n\r\n    /**\r\n    * @dev add an address to the whitelist\r\n    * @param _address address\r\n    */\r\n    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = true;\r\n        emit ChangedWhitelisting(_address, true);\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param _addresses addresses array\r\n    */\r\n    function addAddressesToWhitelist(address[] calldata _addresses) external {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addAddressToWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param _address address\r\n    */\r\n    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = false;\r\n        emit ChangedWhitelisting(_address, false);\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param _addresses addresses\r\n    */\r\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            removeAddressFromWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /** \r\n    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\r\n    */\r\n    function toggleWhitelist() external onlyOwner {\r\n        isWhitelisting = isWhitelisting ? false : true;\r\n\r\n        if (isWhitelisting) {\r\n            emit GlobalWhitelistEnabled(msg.sender);\r\n        } else {\r\n            emit GlobalWhitelistDisabled(msg.sender);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelisting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"ChangedWhitelisting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"GlobalWhitelistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"GlobalWhitelistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ChangedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GlobalWhitelist","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87597829c98b520dc22f901e558dfd8bef26cf3c6a9648f0f4646de17076da04"}]}