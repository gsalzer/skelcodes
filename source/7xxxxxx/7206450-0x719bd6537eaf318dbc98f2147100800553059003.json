{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/KyberReserveInterface.sol\r\n\r\n/// @title Kyber Reserve contract\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool);\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n    mapping(address=>uint) internal decimals;\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\r\n        else decimals[token] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[token];\r\n        // technically, there might be token with decimals 0\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if(tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n}\r\n\r\n// File: contracts/Utils2.sol\r\n\r\ncontract Utils2 is Utils {\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(ERC20 token, address user) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return user.balance;\r\n        else\r\n            return token.balanceOf(user);\r\n    }\r\n\r\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\r\n\r\n        if (decimals[token] == 0) {\r\n            setDecimals(token);\r\n        }\r\n\r\n        return decimals[token];\r\n    }\r\n\r\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n        internal pure returns(uint)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(destAmount <= MAX_QTY);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/dutchX/KyberDutchXReserve.sol\r\n\r\ninterface WETH9 {\r\n    function approve(address spender, uint amount) public returns(bool);\r\n    function withdraw(uint amount) public;\r\n    function deposit() public payable;\r\n}\r\n\r\n\r\ninterface DutchXExchange {\r\n    // Two functions below are in fact: mapping (address => mapping (address => uint)) public sellVolumesCurrent;\r\n    // Token => Token => amount\r\n    function buyVolumes(address sellToken, address buyToken) public view returns (uint);\r\n    function sellVolumesCurrent(address sellToken, address buyToken) public view returns (uint);\r\n    function deposit(address tokenAddress,uint amount) public returns(uint);\r\n    function postBuyOrder(address sellToken,address buyToken,uint auctionIndex,uint amount) public returns (uint);\r\n\r\n    function claimBuyerFunds(address sellToken, address buyToken, address user, uint auctionIndex) public\r\n        returns(uint returned, uint frtsIssued);\r\n\r\n    function withdraw(address tokenAddress,uint amount) public returns (uint);\r\n    function getAuctionIndex(address sellToken, address buyToken) public view returns(uint index);\r\n    function getFeeRatio(address user) public view returns (uint num, uint den); // feeRatio < 10^4\r\n\r\n    function getCurrentAuctionPrice(address sellToken, address buyToken, uint auctionIndex) public view\r\n        returns (uint num, uint den);\r\n}\r\n\r\n\r\ncontract KyberDutchXReserve is KyberReserveInterface, Withdrawable, Utils2 {\r\n\r\n    uint public constant BPS = 10000;\r\n    uint public constant DEFAULT_KYBER_FEE_BPS = 25;\r\n    uint public feeBps = DEFAULT_KYBER_FEE_BPS;\r\n    uint public dutchXFeeNum;\r\n    uint public dutchXFeeDen;\r\n\r\n    DutchXExchange public dutchX;\r\n    address public kyberNetwork;\r\n    WETH9 public weth;\r\n\r\n    mapping(address => bool) listedTokens;\r\n\r\n    bool public tradeEnabled;\r\n\r\n    /**\r\n        Constructor\r\n    */\r\n    function KyberDutchXReserve(\r\n        DutchXExchange _dutchX,\r\n        address _admin,\r\n        address _kyberNetwork,\r\n        WETH9 _weth\r\n    )\r\n        public\r\n    {\r\n        require(address(_dutchX) != 0);\r\n        require(_admin != 0);\r\n        require(_kyberNetwork != 0);\r\n        require(_weth != WETH9(0));\r\n\r\n        dutchX = _dutchX;\r\n        admin = _admin;\r\n        kyberNetwork = _kyberNetwork;\r\n        weth = _weth;\r\n\r\n        weth.approve(dutchX, 2 ** 255);\r\n        setDecimals(ETH_TOKEN_ADDRESS);\r\n        listedTokens[ETH_TOKEN_ADDRESS] = true;\r\n    }\r\n\r\n    function() public payable {\r\n        // anyone can deposit ether\r\n    }\r\n\r\n    struct AuctionData {\r\n        uint index;\r\n        ERC20 srcToken;\r\n        ERC20 dstToken;\r\n        uint num;\r\n        uint den;\r\n    }\r\n\r\n    /**\r\n        Returns rate = dest quantity / source quantity.\r\n    */\r\n    function getConversionRate(\r\n        ERC20 src,\r\n        ERC20 dest,\r\n        uint srcQty,\r\n        uint blockNumber\r\n    )\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        blockNumber;\r\n        if (!tradeEnabled) return 0;\r\n        if (!listedTokens[src] || !listedTokens[dest]) return 0;\r\n\r\n        AuctionData memory auctionData;\r\n        auctionData.srcToken = src == ETH_TOKEN_ADDRESS ? ERC20(weth) : src;\r\n        auctionData.dstToken = dest == ETH_TOKEN_ADDRESS ? ERC20(weth) : dest;\r\n        auctionData.index = dutchX.getAuctionIndex(auctionData.dstToken, auctionData.srcToken);\r\n        if (auctionData.index == 0) return 0;\r\n\r\n        (auctionData.num, auctionData.den) = dutchX.getCurrentAuctionPrice(\r\n                auctionData.dstToken,\r\n                auctionData.srcToken,\r\n                auctionData.index\r\n            );\r\n\r\n        if (!sufficientLiquidity(auctionData.srcToken, srcQty, auctionData.dstToken,\r\n            auctionData.num, auctionData.den)) {\r\n            return 0;\r\n        }\r\n\r\n        // if source is Eth, reduce kyber fee from source.\r\n        uint actualSrcQty = (src == ETH_TOKEN_ADDRESS) ? srcQty * (BPS - feeBps) / BPS : srcQty;\r\n        require(actualSrcQty * auctionData.den > actualSrcQty);\r\n        uint convertedQty = (actualSrcQty * auctionData.den) / auctionData.num;\r\n        // reduce dutchX fees\r\n        convertedQty = convertedQty * (dutchXFeeDen - dutchXFeeNum) / dutchXFeeDen;\r\n\r\n        // if destination is Eth, reduce kyber fee from destination.\r\n        convertedQty = (src == ETH_TOKEN_ADDRESS) ? convertedQty : convertedQty * (BPS - feeBps) / BPS;\r\n\r\n        // here use original srcQty, which will give the real rate (as seen by internal kyberNetwork)\r\n        return calcRateFromQty(\r\n            srcQty, /* srcAmount */\r\n            convertedQty, /* destAmount */\r\n            getDecimals(src), /* srcDecimals */\r\n            getDecimals(dest) /* dstDecimals */\r\n        );\r\n    }\r\n\r\n    event TradeExecute(\r\n        address indexed sender,\r\n        address src,\r\n        uint srcAmount,\r\n        address destToken,\r\n        uint destAmount,\r\n        address destAddress,\r\n        uint auctionIndex\r\n    );\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        validate;\r\n\r\n        require(tradeEnabled);\r\n        require(msg.sender == kyberNetwork);\r\n\r\n        AuctionData memory auctionData;\r\n        auctionData.srcToken = srcToken == ETH_TOKEN_ADDRESS ? ERC20(weth) : srcToken;\r\n        auctionData.dstToken = destToken == ETH_TOKEN_ADDRESS ? ERC20(weth) : destToken;\r\n        auctionData.index = dutchX.getAuctionIndex(auctionData.dstToken, auctionData.srcToken);\r\n        if (auctionData.index == 0) revert();\r\n\r\n        uint actualSrcQty;\r\n\r\n        if (srcToken == ETH_TOKEN_ADDRESS){\r\n            require(srcAmount == msg.value);\r\n            actualSrcQty = srcAmount * (BPS - feeBps) / BPS;\r\n            weth.deposit.value(actualSrcQty)();\r\n        } else {\r\n            require(msg.value == 0);\r\n            require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\r\n            actualSrcQty = srcAmount;\r\n        }\r\n\r\n        dutchX.deposit(auctionData.srcToken, actualSrcQty);\r\n        dutchX.postBuyOrder(auctionData.dstToken, auctionData.srcToken, auctionData.index, actualSrcQty);\r\n\r\n        uint destAmount;\r\n        uint frtsIssued;\r\n        (destAmount, frtsIssued) = dutchX.claimBuyerFunds(auctionData.dstToken, auctionData.srcToken, this,\r\n            auctionData.index);\r\n        dutchX.withdraw(auctionData.dstToken, destAmount);\r\n\r\n        if (destToken == ETH_TOKEN_ADDRESS) {\r\n            weth.withdraw(destAmount);\r\n            destAmount = destAmount * (BPS - feeBps) / BPS;\r\n            destAddress.transfer(destAmount);\r\n        } else {\r\n            require(auctionData.dstToken.transfer(destAddress, destAmount));\r\n        }\r\n\r\n        require(conversionRate <= calcRateFromQty(\r\n            srcAmount, /* srcAmount */\r\n            destAmount, /* destAmount */\r\n            getDecimals(srcToken), /* srcDecimals */\r\n            getDecimals(destToken) /* dstDecimals */\r\n        ));\r\n        \r\n        TradeExecute(\r\n            msg.sender, /* sender */\r\n            srcToken, /* src */\r\n            srcAmount, /* srcAmount */\r\n            destToken, /* destToken */\r\n            destAmount, /* destAmount */\r\n            destAddress, /* destAddress */\r\n            auctionData.index\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    event FeeUpdated(\r\n        uint bps\r\n    );\r\n\r\n    function setFee(uint bps) public onlyAdmin {\r\n        require(bps <= BPS);\r\n        feeBps = bps;\r\n        FeeUpdated(bps);\r\n    }\r\n\r\n    event TokenListed(\r\n        ERC20 token\r\n    );\r\n\r\n    function listToken(ERC20 token)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(address(token) != 0);\r\n\r\n        listedTokens[token] = true;\r\n\r\n        setDecimals(token);\r\n\r\n        require(token.approve(dutchX, 2**255));\r\n\r\n        TokenListed(token);\r\n    }\r\n\r\n    event TokenDelisted(ERC20 token);\r\n\r\n    function delistToken(ERC20 token)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(listedTokens[token] == true);\r\n        listedTokens[token] == false;\r\n\r\n        TokenDelisted(token);\r\n    }\r\n\r\n    event TradeEnabled(\r\n        bool enable\r\n    );\r\n\r\n    function setDutchXFee() public {\r\n        (dutchXFeeNum, dutchXFeeDen) = dutchX.getFeeRatio(this);\r\n\r\n        // can't use denominator 0 (EVM bad instruction)\r\n        if (dutchXFeeDen == 0) {\r\n            tradeEnabled = false;\r\n        } else {\r\n            tradeEnabled = true;\r\n        }\r\n\r\n        TradeEnabled(tradeEnabled);\r\n    }\r\n\r\n    function disableTrade()\r\n        public\r\n        onlyAlerter\r\n        returns(bool)\r\n    {\r\n        tradeEnabled = false;\r\n        TradeEnabled(false);\r\n        return true;\r\n    }\r\n\r\n    event KyberNetworkSet(\r\n        address kyberNetwork\r\n    );\r\n\r\n    function setKyberNetwork(\r\n        address _kyberNetwork\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_kyberNetwork != 0);\r\n        kyberNetwork = _kyberNetwork;\r\n        KyberNetworkSet(kyberNetwork);\r\n    }\r\n\r\n    event DutchXSet(\r\n        DutchXExchange dutchX\r\n    );\r\n\r\n    function setDutchX(\r\n        DutchXExchange _dutchX\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_dutchX != DutchXExchange(0));\r\n        dutchX = _dutchX;\r\n        DutchXSet(dutchX);\r\n    }\r\n\r\n    event Execution(bool success, address caller, address destination, uint value, bytes data);\r\n\r\n    function executeTransaction(address destination, uint value, bytes data)\r\n        public\r\n        onlyOperator\r\n    {\r\n        if (destination.call.value(value)(data)) {\r\n            Execution(true, msg.sender, destination, value, data);\r\n        } else {\r\n            Execution(false, msg.sender, destination, value, data);\r\n        }\r\n    }\r\n\r\n    function sufficientLiquidity(ERC20 src, uint srcQty, ERC20 dest, uint num, uint den) internal view returns(bool) {\r\n\r\n        uint buyVolume = dutchX.buyVolumes(dest, src);\r\n        uint sellVolume = dutchX.sellVolumesCurrent(dest, src);\r\n\r\n        // 10^30 * 10^37 = 10^67\r\n        require(sellVolume * num > sellVolume);\r\n        uint outstandingVolume = (sellVolume * num) / den - buyVolume;\r\n\r\n        if (outstandingVolume >= srcQty) return true;\r\n\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDutchXFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_KYBER_FEE_BPS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dutchX\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dutchXFeeDen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberNetwork\",\"type\":\"address\"}],\"name\":\"setKyberNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"},{\"name\":\"destAddress\",\"type\":\"address\"},{\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"name\":\"validate\",\"type\":\"bool\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"delistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetwork\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dutchXFeeNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dutchX\",\"type\":\"address\"}],\"name\":\"setDutchX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dutchX\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_kyberNetwork\",\"type\":\"address\"},{\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"TradeExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"TradeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"kyberNetwork\",\"type\":\"address\"}],\"name\":\"KyberNetworkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dutchX\",\"type\":\"address\"}],\"name\":\"DutchXSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"KyberDutchXReserve","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af1745c0f8117384dfa5fff40f824057c70f2ed3000000000000000000000000f069cb44739a913c16622edc31a066e38913d82500000000000000000000000065897adcba42dcca5dd162c647b1cc3e31238490000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","Library":"","SwarmSource":"bzzr://b310a8b412c8d7964cd600185efcee6046625c69f767702910976829eb1fa62e"}]}