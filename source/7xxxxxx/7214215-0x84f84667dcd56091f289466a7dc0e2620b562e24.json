{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Factory{\r\n\tfunction getExchange(address token_addr) public view returns(address);\r\n}\r\n\r\ncontract Exchange{\r\n\tfunction tokenToEthSwapInput(uint256 token_sold, uint256 min_eth,uint256 deadline) public returns(uint256);\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address _owner) view public returns(uint256);\r\n    function allowance(address _owner, address _spender) view public returns(uint256);\r\n    function transfer(address _to, uint256 _value) public returns(bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    function approve(address _spender, uint256 _value) public returns(bool);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool);\r\n}\r\n\r\ncontract CryptoCow is ERC20{\r\n\tfunction selltoken(uint256 _amount) public;\r\n\tfunction buyToken() public payable;\r\n}\r\n\r\ncontract CowSwap{\r\n\tFactory factory = Factory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n\tCryptoCow cow = CryptoCow(0xFDb0065240753FEF4880a9CC7876be59E09D78BB);\r\n\r\n\tfunction () public payable{}\r\n\r\n\tfunction tokenToCow(address token, uint256 amount) public {\r\n\r\n\t\tERC20 erc20 = ERC20(token);\r\n\t\taddress t = factory.getExchange(token);\r\n\t\trequire(t != address(0));\r\n\t\tExchange te = Exchange(t);\r\n\r\n\t\trequire(erc20.transferFrom(msg.sender, address(this), amount));\r\n\t\terc20.approve(t, amount);\r\n\t\tte.tokenToEthSwapInput(amount, 1, now);\r\n\r\n\t\tuint256 ethIn = address(this).balance;\r\n\t\tcow.buyToken.value(ethIn)();\r\n\r\n\t\tuint256 cowBought = cow.balanceOf(address(this));\r\n\t\tcow.transfer(msg.sender, cowBought);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenToCow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CowSwap","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67a419f3e35af75b1c41708a8649f7ad3244ace1cd01f5cb6a638b8b6ad30cc4"}]}