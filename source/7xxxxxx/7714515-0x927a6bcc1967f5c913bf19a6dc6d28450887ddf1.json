{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract OwnableSecondary is Ownable {\r\n  address private _primary;\r\n\r\n  event PrimaryTransferred(\r\n    address recipient\r\n  );\r\n\r\n  /**\r\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n   */\r\n  constructor() internal {\r\n    _primary = msg.sender;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called from any account other than the primary or the owner.\r\n   */\r\n   modifier onlyPrimaryOrOwner() {\r\n     require(msg.sender == _primary || msg.sender == owner(), \"not the primary user nor the owner\");\r\n     _;\r\n   }\r\n\r\n   /**\r\n    * @dev Reverts if called from any account other than the primary.\r\n    */\r\n  modifier onlyPrimary() {\r\n    require(msg.sender == _primary, \"not the primary user\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the primary.\r\n   */\r\n  function primary() public view returns (address) {\r\n    return _primary;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers contract to a new primary.\r\n   * @param recipient The address of new primary.\r\n   */\r\n  function transferPrimary(address recipient) public onlyOwner {\r\n    require(recipient != address(0), \"new primary address is null\");\r\n    _primary = recipient;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n}\r\n\r\n\r\ncontract ImmutableEternalStorageInterface is OwnableSecondary {\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  function createUint(bytes32 key, uint value) external;\r\n\r\n  function createString(bytes32 key, string calldata value) external;\r\n\r\n  function createAddress(bytes32 key, address value) external;\r\n\r\n  function createBytes(bytes32 key, bytes calldata value) external;\r\n\r\n  function createBytes32(bytes32 key, bytes32 value) external;\r\n\r\n  function createBool(bytes32 key, bool value) external;\r\n\r\n  function createInt(bytes32 key, int value) external;\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function getUint(bytes32 key) external view returns(uint);\r\n\r\n  function uintExists(bytes32 key) external view returns(bool);\r\n\r\n  function getString(bytes32 key) external view returns(string memory);\r\n\r\n  function stringExists(bytes32 key) external view returns(bool);\r\n\r\n  function getAddress(bytes32 key) external view returns(address);\r\n\r\n  function addressExists(bytes32 key) external view returns(bool);\r\n\r\n  function getBytes(bytes32 key) external view returns(bytes memory);\r\n\r\n  function bytesExists(bytes32 key) external view returns(bool);\r\n\r\n  function getBytes32(bytes32 key) external view returns(bytes32);\r\n\r\n  function bytes32Exists(bytes32 key) external view returns(bool);\r\n\r\n  function getBool(bytes32 key) external view returns(bool);\r\n\r\n  function boolExists(bytes32 key) external view returns(bool);\r\n\r\n  function getInt(bytes32 key) external view returns(int);\r\n\r\n  function intExists(bytes32 key) external view returns(bool);\r\n}\r\n\r\n\r\ncontract ImmutableEternalStorage is ImmutableEternalStorageInterface {\r\n    struct UintEntity {\r\n      uint value;\r\n      bool isEntity;\r\n    }\r\n    struct StringEntity {\r\n      string value;\r\n      bool isEntity;\r\n    }\r\n    struct AddressEntity {\r\n      address value;\r\n      bool isEntity;\r\n    }\r\n    struct BytesEntity {\r\n      bytes value;\r\n      bool isEntity;\r\n    }\r\n    struct Bytes32Entity {\r\n      bytes32 value;\r\n      bool isEntity;\r\n    }\r\n    struct BoolEntity {\r\n      bool value;\r\n      bool isEntity;\r\n    }\r\n    struct IntEntity {\r\n      int value;\r\n      bool isEntity;\r\n    }\r\n    mapping(bytes32 => UintEntity) private uIntStorage;\r\n    mapping(bytes32 => StringEntity) private stringStorage;\r\n    mapping(bytes32 => AddressEntity) private addressStorage;\r\n    mapping(bytes32 => BytesEntity) private bytesStorage;\r\n    mapping(bytes32 => Bytes32Entity) private bytes32Storage;\r\n    mapping(bytes32 => BoolEntity) private boolStorage;\r\n    mapping(bytes32 => IntEntity) private intStorage;\r\n\r\n    /********************/\r\n    /** PUBLIC - WRITE **/\r\n    /********************/\r\n    function createUint(bytes32 key, uint value) onlyPrimaryOrOwner external {\r\n        require(!uIntStorage[key].isEntity);\r\n\r\n        uIntStorage[key].value = value;\r\n        uIntStorage[key].isEntity = true;\r\n    }\r\n\r\n    function createString(bytes32 key, string calldata value) onlyPrimaryOrOwner external {\r\n        require(!stringStorage[key].isEntity);\r\n\r\n        stringStorage[key].value = value;\r\n        stringStorage[key].isEntity = true;\r\n    }\r\n\r\n    function createAddress(bytes32 key, address value) onlyPrimaryOrOwner external {\r\n        require(!addressStorage[key].isEntity);\r\n\r\n        addressStorage[key].value = value;\r\n        addressStorage[key].isEntity = true;\r\n    }\r\n\r\n    function createBytes(bytes32 key, bytes calldata value) onlyPrimaryOrOwner external {\r\n        require(!bytesStorage[key].isEntity);\r\n\r\n        bytesStorage[key].value = value;\r\n        bytesStorage[key].isEntity = true;\r\n    }\r\n\r\n    function createBytes32(bytes32 key, bytes32 value) onlyPrimaryOrOwner external {\r\n        require(!bytes32Storage[key].isEntity);\r\n\r\n        bytes32Storage[key].value = value;\r\n        bytes32Storage[key].isEntity = true;\r\n    }\r\n\r\n    function createBool(bytes32 key, bool value) onlyPrimaryOrOwner external {\r\n        require(!boolStorage[key].isEntity);\r\n\r\n        boolStorage[key].value = value;\r\n        boolStorage[key].isEntity = true;\r\n    }\r\n\r\n    function createInt(bytes32 key, int value) onlyPrimaryOrOwner external {\r\n        require(!intStorage[key].isEntity);\r\n\r\n        intStorage[key].value = value;\r\n        intStorage[key].isEntity = true;\r\n    }\r\n\r\n    /*******************/\r\n    /** PUBLIC - READ **/\r\n    /*******************/\r\n    function getUint(bytes32 key) external view returns(uint) {\r\n        return uIntStorage[key].value;\r\n    }\r\n\r\n    function uintExists(bytes32 key) external view returns(bool) {\r\n      return uIntStorage[key].isEntity;\r\n    }\r\n\r\n    function getString(bytes32 key) external view returns(string memory) {\r\n        return stringStorage[key].value;\r\n    }\r\n\r\n    function stringExists(bytes32 key) external view returns(bool) {\r\n      return stringStorage[key].isEntity;\r\n    }\r\n\r\n    function getAddress(bytes32 key) external view returns(address) {\r\n        return addressStorage[key].value;\r\n    }\r\n\r\n    function addressExists(bytes32 key) external view returns(bool) {\r\n      return addressStorage[key].isEntity;\r\n    }\r\n\r\n    function getBytes(bytes32 key) external view returns(bytes memory) {\r\n        return bytesStorage[key].value;\r\n    }\r\n\r\n    function bytesExists(bytes32 key) external view returns(bool) {\r\n      return bytesStorage[key].isEntity;\r\n    }\r\n\r\n    function getBytes32(bytes32 key) external view returns(bytes32) {\r\n        return bytes32Storage[key].value;\r\n    }\r\n\r\n    function bytes32Exists(bytes32 key) external view returns(bool) {\r\n      return bytes32Storage[key].isEntity;\r\n    }\r\n\r\n    function getBool(bytes32 key) external view returns(bool) {\r\n        return boolStorage[key].value;\r\n    }\r\n\r\n    function boolExists(bytes32 key) external view returns(bool) {\r\n      return boolStorage[key].isEntity;\r\n    }\r\n\r\n    function getInt(bytes32 key) external view returns(int) {\r\n        return intStorage[key].value;\r\n    }\r\n\r\n    function intExists(bytes32 key) external view returns(bool) {\r\n      return intStorage[key].isEntity;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"bytes32Exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"addressExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"createBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"stringExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"createBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"createInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"boolExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"createAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"bytesExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"createUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"uintExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"intExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"createBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"createString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ImmutableEternalStorage","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b47d9e5c5860d03fde17aa298809ee98aae50d3bf1f7d4238a97c404f7cf13b"}]}