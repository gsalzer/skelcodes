{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Banker {\r\n    uint256 maxBetWei;\r\n\r\n    address public owner;\r\n    address public banker;\r\n\r\n    struct Bet {\r\n        address player;\r\n        uint256 transferredAmount; // For refund.\r\n        bytes32 betData;\r\n        uint256 placedOnBlock;\r\n        uint256 lastRevealBlock;\r\n    }\r\n\r\n    mapping (uint256 => uint8) odds;\r\n    mapping (uint256 => Bet) bets;\r\n\r\n    event BetIsPlaced(\r\n        uint256 transferredAmount,\r\n        uint256 magicNumber,\r\n        bytes32 betData,\r\n        uint256 lastRevealBlock\r\n    );\r\n\r\n    enum RevealFailStatus { InsufficientContractBalance }\r\n\r\n    event BetCannotBeRevealed(uint256 magicNumber, RevealFailStatus reason);\r\n\r\n    event BetIsRevealed(uint256 magicNumber, uint256 dice, uint256 winAmount);\r\n\r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner, \"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        maxBetWei = 1 ether / 10;\r\n\r\n        // Initialize odds.\r\n        odds[1] = 35;\r\n        odds[2] = 17;\r\n        odds[3] = 11;\r\n        odds[4] = 8;\r\n        odds[5] = 6;\r\n        odds[6] = 5;\r\n        odds[12] = 2;\r\n        odds[18] = 1;\r\n    }\r\n\r\n    function setMaxBetWei(uint256 numOfWei) public ownerOnly {\r\n        maxBetWei = numOfWei;\r\n    }\r\n\r\n    function deposit() public payable {}\r\n\r\n    function setBanker(address newBanker) public ownerOnly {\r\n        banker = newBanker;\r\n    }\r\n\r\n    function withdrawToOwner(uint256 weiToWithdraw) public ownerOnly {\r\n        require(\r\n            address(this).balance >= weiToWithdraw,\r\n            \"The value of this withdrawal is invalid.\"\r\n        );\r\n\r\n        owner.transfer(weiToWithdraw);\r\n    }\r\n\r\n    function convertAmountToWei(uint32 amount) private pure returns (uint256) {\r\n        return uint256(amount) * (1 finney * 10);\r\n    }\r\n\r\n    function calcBetAmount(bytes32 betData) private pure returns (uint32) {\r\n        uint8 numOfBets = uint8(betData[0]);\r\n        require(numOfBets > 0 && numOfBets <= 15, \"Invalid number value of bets.\");\r\n\r\n        uint8 p = 1;\r\n        uint32 betAmount = 0;\r\n\r\n        for (uint8 i = 0; i < numOfBets; ++i) {\r\n            uint8 amount = uint8(betData[p++]);\r\n            require(\r\n                amount == 100 || amount == 50 || amount == 20 || amount == 10 ||\r\n                    amount == 5 || amount == 2 || amount == 1,\r\n                \"Invalid bet amount.\"\r\n            );\r\n\r\n            betAmount += amount;\r\n\r\n            // Skip numbers.\r\n            uint8 numOfNumsOrIndex = uint8(betData[p++]);\r\n            if (numOfNumsOrIndex <= 4) {\r\n                p += numOfNumsOrIndex;\r\n            } else {\r\n                require(numOfNumsOrIndex >= 129 && numOfNumsOrIndex <= 152, \"Invalid bet index.\");\r\n            }\r\n\r\n            // Note: When numOfNumsOrIndex > 4 (Actually it should be larger than 128),\r\n            //       there is no number follows. So we do not skip any byte in this case.\r\n        }\r\n\r\n        return betAmount;\r\n    }\r\n\r\n    function calcWinAmountOnNumber(bytes32 betData, uint8 number) private view returns (uint32) {\r\n        uint8 numOfBets = uint8(betData[0]);\r\n        require(numOfBets <= 15, \"Too many bets.\");\r\n\r\n        // Reading index of betData.\r\n        uint8 p = 1;\r\n        uint32 winAmount = 0;\r\n\r\n        // Loop every bet.\r\n        for (uint8 i = 0; i < numOfBets; ++i) {\r\n            require(p < 32, \"Out of betData's range.\");\r\n\r\n            // Now read the bet amount (in ROU).\r\n            uint8 amount = uint8(betData[p++]);\r\n            require(\r\n                amount == 100 || amount == 50 || amount == 20 || amount == 10 ||\r\n                    amount == 5 || amount == 2 || amount == 1,\r\n                \"Invalid bet amount.\"\r\n            );\r\n\r\n            // The number of numbers to bet.\r\n            uint8 numOfNumsOrIndex = uint8(betData[p++]);\r\n\r\n            // Read and check numbers.\r\n            if (numOfNumsOrIndex <= 4) {\r\n                // We will read numbers from the following bytes.\r\n                bool hit = false;\r\n                for (uint8 j = 0; j < numOfNumsOrIndex; ++j) {\r\n                    require(p < 32, \"Out of betData's range.\");\r\n\r\n                    uint8 thisNumber = uint8(betData[p++]);\r\n                    require(thisNumber >= 0 && thisNumber <= 37, \"Invalid bet number.\");\r\n\r\n                    if (!hit && thisNumber == number) {\r\n                        hit = true;\r\n                        // Add win amount.\r\n                        winAmount += uint32(odds[numOfNumsOrIndex] + 1) * amount;\r\n                    }\r\n                }\r\n            } else {\r\n                // This is the index from table.\r\n                require(numOfNumsOrIndex >= 129 && numOfNumsOrIndex <= 152, \"Bad bet index.\");\r\n\r\n                uint8 numOfNums = 0;\r\n\r\n                if (numOfNumsOrIndex == 129 && (number >= 1 && number <= 6)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 130 && (number >= 4 && number <= 9)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 131 && (number >= 7 && number <= 12)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 132 && (number >= 10 && number <= 15)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 133 && (number >= 13 && number <= 18)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 134 && (number >= 16 && number <= 21)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 135 && (number >= 19 && number <= 24)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 136 && (number >= 22 && number <= 27)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 137 && (number >= 25 && number <= 30)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 138 && (number >= 28 && number <= 33)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 139 && (number >= 31 && number <= 36)) {\r\n                    numOfNums = 6;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 140 && ((number >= 0 && number <= 3) || number == 37)) {\r\n                    numOfNums = 5;\r\n                }\r\n\r\n                uint8 n;\r\n\r\n                if (numOfNumsOrIndex == 141) {\r\n                    for (n = 1; n <= 34; n += 3) {\r\n                        if (n == number) {\r\n                            numOfNums = 12;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 142) {\r\n                    for (n = 2; n <= 35; n += 3) {\r\n                        if (n == number) {\r\n                            numOfNums = 12;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 143) {\r\n                    for (n = 3; n <= 36; n += 3) {\r\n                        if (n == number) {\r\n                            numOfNums = 12;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 144 && (number >= 1 && number <= 12)) {\r\n                    numOfNums = 12;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 145 && (number >= 13 && number <= 24)) {\r\n                    numOfNums = 12;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 146 && (number >= 25 && number <= 36)) {\r\n                    numOfNums = 12;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 147) {\r\n                    for (n = 1; n <= 35; n += 2) {\r\n                        if (n == number) {\r\n                            numOfNums = 18;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 148) {\r\n                    for (n = 2; n <= 36; n += 2) {\r\n                        if (n == number) {\r\n                            numOfNums = 18;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 149 &&\r\n                    (number == 1 || number == 3 || number == 5 || number == 7 || number == 9 || number == 12 ||\r\n                    number == 14 || number == 16 || number == 18 || number == 19 || number == 21 || number == 23 ||\r\n                    number == 25 || number == 27 || number == 30 || number == 32 || number == 34 || number == 36)) {\r\n                    numOfNums = 18;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 150 &&\r\n                    (number == 2 || number == 4 || number == 6 || number == 8 || number == 10 || number == 11 ||\r\n                    number == 13 || number == 15 || number == 17 || number == 20 || number == 22 || number == 24 ||\r\n                    number == 26 || number == 28 || number == 29 || number == 31 || number == 33 || number == 35)) {\r\n                    numOfNums = 18;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 151 && (number >= 1 && number <= 18)) {\r\n                    numOfNums = 18;\r\n                }\r\n\r\n                if (numOfNumsOrIndex == 152 && (number >= 19 && number <= 36)) {\r\n                    numOfNums = 18;\r\n                }\r\n\r\n                // Increase winAmount.\r\n                if (numOfNums > 0) {\r\n                    winAmount += uint32(odds[numOfNums] + 1) * amount;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return winAmount;\r\n    }\r\n\r\n    function calcMaxWinAmount(bytes32 betData) private view returns (uint32) {\r\n        uint32 maxWinAmount = 0;\r\n        for (uint8 guessWinNumber = 0; guessWinNumber <= 37; ++guessWinNumber) {\r\n            uint32 amount = calcWinAmountOnNumber(betData, guessWinNumber);\r\n            if (amount > maxWinAmount) {\r\n                maxWinAmount = amount;\r\n            }\r\n        }\r\n        return maxWinAmount;\r\n    }\r\n\r\n    function clearBet(uint256 magicNumber) private {\r\n        Bet storage bet = bets[magicNumber];\r\n\r\n        // Clear the slot.\r\n        bet.player = address(0);\r\n        bet.transferredAmount = 0;\r\n        bet.betData = bytes32(0);\r\n        bet.placedOnBlock = 0;\r\n        bet.lastRevealBlock = 0;\r\n    }\r\n\r\n    function placeBet(\r\n        uint256 magicNumber,\r\n        uint256 expiredAfterBlock,\r\n        bytes32 betData,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        require(\r\n            block.number <= expiredAfterBlock,\r\n            \"Timeout of current bet to place.\"\r\n        );\r\n\r\n        // Check the slot and make sure there is no playing bet.\r\n        Bet storage bet = bets[magicNumber];\r\n        require(bet.player == address(0), \"The slot is not empty.\");\r\n\r\n        // Throw if there are not enough wei are provided by customer.\r\n        uint32 betAmount = calcBetAmount(betData);\r\n        uint256 betWei = convertAmountToWei(betAmount);\r\n\r\n        require(msg.value >= betWei, \"There are not enough wei are provided by customer.\");\r\n        require(betWei <= maxBetWei, \"Exceed the maximum.\");\r\n\r\n        // Check the signature.\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(magicNumber, expiredAfterBlock)\r\n        );\r\n        address signer = ecrecover(\r\n            keccak256(abi.encodePacked(prefix, hash)),\r\n            28, r, s\r\n        );\r\n        require(\r\n            signer == banker,\r\n            \"The signature is not signed by the banker.\"\r\n        );\r\n\r\n        // Prepare and save bet record.\r\n        bet.player = msg.sender;\r\n        bet.transferredAmount = msg.value;\r\n        bet.betData = betData;\r\n        bet.placedOnBlock = block.number;\r\n        bet.lastRevealBlock = expiredAfterBlock;\r\n        bets[magicNumber] = bet;\r\n\r\n        emit BetIsPlaced(bet.transferredAmount, magicNumber, betData, expiredAfterBlock);\r\n    }\r\n\r\n    function revealBet(uint256 randomNumber) public {\r\n        // Get the magic-number and find the slot of the bet.\r\n        uint256 magicNumber = uint256(\r\n            keccak256(abi.encodePacked(randomNumber))\r\n        );\r\n        Bet storage bet = bets[magicNumber];\r\n\r\n        // Save to local variables.\r\n        address betPlayer = bet.player;\r\n        bytes32 betbetData = bet.betData;\r\n        uint256 betPlacedOnBlock = bet.placedOnBlock;\r\n        uint256 betLastRevealBlock = bet.lastRevealBlock;\r\n\r\n        require(\r\n            betPlayer != address(0),\r\n            \"The bet slot cannot be empty.\"\r\n        );\r\n\r\n        require(\r\n            betPlacedOnBlock < block.number,\r\n            \"Cannot reveal the bet on the same block where it was placed.\"\r\n        );\r\n\r\n        require(\r\n            block.number <= betLastRevealBlock,\r\n            \"The bet is out of the block range (Timeout!).\"\r\n        );\r\n\r\n        // Calculate the result.\r\n        bytes32 n = keccak256(\r\n            abi.encodePacked(randomNumber, blockhash(betPlacedOnBlock))\r\n        );\r\n        uint8 spinNumber = uint8(uint256(n) % 38);\r\n\r\n        // Calculate win amount.\r\n        uint32 winAmount = calcWinAmountOnNumber(betbetData, spinNumber);\r\n        uint256 winWei = 0;\r\n        if (winAmount > 0) {\r\n            winWei = convertAmountToWei(winAmount);\r\n            if (address(this).balance < winWei) {\r\n                emit BetCannotBeRevealed(magicNumber, RevealFailStatus.InsufficientContractBalance);\r\n                return;\r\n            }\r\n            betPlayer.transfer(winWei);\r\n        }\r\n\r\n        emit BetIsRevealed(magicNumber, spinNumber, winAmount);\r\n        clearBet(magicNumber);\r\n    }\r\n\r\n    function refundBet(uint256 magicNumber) public {\r\n        Bet storage bet = bets[magicNumber];\r\n\r\n        address player = bet.player;\r\n        uint256 transferredAmount = bet.transferredAmount;\r\n        uint256 lastRevealBlock = bet.lastRevealBlock;\r\n\r\n        require(player != address(0), \"The bet slot is empty.\");\r\n\r\n        require(block.number > lastRevealBlock, \"The bet is still in play.\");\r\n\r\n        player.transfer(transferredAmount);\r\n\r\n        // Clear the slot.\r\n        clearBet(magicNumber);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"banker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"revealBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numOfWei\",\"type\":\"uint256\"}],\"name\":\"setMaxBetWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"magicNumber\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBanker\",\"type\":\"address\"}],\"name\":\"setBanker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"magicNumber\",\"type\":\"uint256\"},{\"name\":\"expiredAfterBlock\",\"type\":\"uint256\"},{\"name\":\"betData\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"magicNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betData\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lastRevealBlock\",\"type\":\"uint256\"}],\"name\":\"BetIsPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"magicNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"BetCannotBeRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"magicNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"BetIsRevealed\",\"type\":\"event\"}]","ContractName":"Banker","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0be61a47711becb413c27fc7c3f1d5fd79c105d1f580fd335759e21358fa531c"}]}