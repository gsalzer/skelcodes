{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/* SNAILTROI\r\n\r\nSnailTroi is a daily ROI game, with extra twists to sustain it.\r\n\r\n1) TROI\r\nTo start, players spend ETH to Grow their Troi.\r\nThey get a \"troi size\" proportional to their investment.\r\nEach player gets to harvest ETH equivalent to their troiSize.\r\nThis harvest starts equivalent to 1% of their initial, daily.\r\nA global bonus rises by 8% per day (1% in 3 hours, roughly 0.0001% per second).\r\nAs soon as any player claims this global bonus, it resets to 0.\r\nA player can only harvest once a day.\r\n\r\n2) FOUR KINGS\r\nPlayers can spend ETH to collect up to 4 kings.\r\nEach of these kings is a hot potato, with an unique effect.\r\nThe price of a king starts at 0.02 eth, and rises by 0.02 eth on each buy\r\n\r\nBLUE KING (0) - receives 4% divs on each buy\r\nRED KING (1) - doubles global bonus for the owner\r\nGREEN KING (2) - receives 4% divs on each claim\r\nPURPLE KING (3) - receives 4% of the pot when the Doomclock stops\r\n\r\n3) DOOMCLOCK \r\nA timer starts at 24 hours, FOMO style.\r\nIf this timer reaches 0, whoever bought last gets 4% of the pot.\r\nThe Four Kings come back to their base price, and ETH gains relative to troiSize are lowered by 10%.\r\nThe Doomclock resets to 24 hours on a large enough buy.\r\nThe required buy starts at 0.001 ETH, and increases by 0.001 ETH on each reset.\r\n\r\n4) REFERRALS\r\nWhenever a referred player claims, his referrer gets an extra 20% of his claim.\r\nIn the absence of referral, this extra 20% goes to the dev.\r\nTo be able to refer someone, a player must own a certain number of snails in SnailThrone.\r\nReferrals can be changed at any time through a new GrowTroi action.\r\n\r\n5) DAILY BONUS\r\nA daily timer of 24 hours runs nonstop.\r\nWhoever spends the most ETH in one buy during this 24 hour period wins 2% of the pot.\r\n\r\n6) SPLIT\r\nOn GrowTroi:\r\n- 90% to the troiPot (main pot)\r\n- 10% to the thronePot (SnailThrone divs)\r\n\r\nOn Kings:\r\n- initial + 0.01 eth to the previous owner\r\n- 0.005 eth to the troiPot\r\n- 0.005 eth to the thronePot\r\n\r\n*/\r\n\r\ncontract SnailThrone {\r\n    mapping (address => uint256) public hatcherySnail;\r\n}\r\n\r\ncontract SnailTroi {\r\n    using SafeMath for uint;\r\n    \r\n    /* Event */\r\n\r\n    event GrewTroi(address indexed player, uint eth, uint size);\r\n    event NewLeader(address indexed player, uint eth);\r\n    event HarvestedFroot(address indexed player, uint eth, uint size);\r\n    event BecameKing(address indexed player, uint eth, uint king);\r\n    event ResetClock(address indexed player, uint eth);\r\n    event Doomed(address leader, address king, uint eth);\r\n    event WonDaily (address indexed player, uint eth);\r\n    event WithdrewBalance (address indexed player, uint eth);\r\n    event PaidThrone (address indexed player, uint eth);\r\n    event BoostedChest (address indexed player, uint eth);\r\n\r\n    /* Constants */\r\n    \r\n    uint256 constant SECONDS_IN_DAY     = 86400;\r\n    uint256 constant MINIMUM_INVEST     = 0.001 ether; //same value for Doomclock raise\r\n    uint256 constant KING_BASE_COST     = 0.02 ether; //resets to this everytime the Doomclock reaches 0\r\n    uint256 constant REFERRAL_REQ       = 420;\r\n    uint256 constant REFERRAL_PERCENT   = 20;\r\n    uint256 constant KING_PERCENT       = 4;\r\n    uint256 constant DAILY_PERCENT      = 2;\r\n    address payable constant SNAILTHRONE= 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\r\n    \r\n\tSnailThrone throneContract;\r\n\r\n    /* Variables */\r\n\t\r\n\t//Game status to ensure proper start\r\n\tbool public gameActive              = false;\r\n\t\r\n\t//Dev address for proper start\r\n\taddress public dev                  = msg.sender;\r\n\t\r\n\t//Main reward pot\r\n\tuint256 public troiChest            = 0;\r\n\t\r\n\t//Divs for SnailThrone holders\r\n\tuint256 public thronePot            = 0;\r\n\t\r\n\t//Current reward per troiSize\r\n\tuint256 public troiReward           = 0.000001 ether; //divide by this to get troiSize per ETH\r\n\t\r\n\t//Doomclock\r\n\tuint256 public doomclockTimer;\r\n\tuint256 public doomclockCost        = MINIMUM_INVEST;\r\n\taddress public doomclockLeader; //last buyer spending more ETH than doomclockCost\r\n\t\r\n\t//King struct\r\n\tstruct King {\r\n        uint256 cost;\r\n        address owner;\r\n    }\r\n\r\n    King[4] lostKing;\r\n\t\r\n\t//Last global claim\r\n\tuint256 public lastBonus;\r\n\t\r\n\t//Daily timer, leader, current max\r\n\tuint256 public dailyTimer;\r\n\taddress public dailyLeader;\r\n\tuint256 public dailyMax;\r\n\t\r\n    /* Mappings */\r\n    \r\n    mapping (address => uint256) playerBalance;\r\n    mapping (address => uint256) troiSize;\r\n    mapping (address => uint256) lastFroot;\r\n    mapping (address => address) referral;\r\n\r\n    /* Functions */\r\n    \r\n    // Constructor\r\n    \r\n    constructor() public {\r\n        throneContract = SnailThrone(SNAILTHRONE);\r\n    }\r\n    \r\n    // StartGame\r\n    // Only usable by owner once, to start the game properly\r\n    // Requires a seed of 1 ETH\r\n    \r\n    function StartGame() payable public {\r\n        require(gameActive != true, \"game is already active\");\r\n        require(msg.sender == dev, \"you're not snailking!\");\r\n        require(msg.value == 1 ether, \"seed must be 1 ETH\");\r\n        \r\n        //All seed ETH goes to Chest\r\n\t\ttroiChest = msg.value;\r\n\t\t\r\n\t\t//Get troiSize to give\r\n        uint256 _growth = msg.value.div(troiReward);\r\n        \r\n        //Add player troiSize\r\n        troiSize[msg.sender] = troiSize[msg.sender].add(_growth);\r\n\t\t\r\n\t\t//Avoid blackholing ETH\r\n\t\treferral[msg.sender] = dev;\r\n\t\tdoomclockLeader = dev;\r\n\t\tdailyLeader = dev;\r\n\t\t\r\n        for(uint256 i = 0; i < 4; i++){\r\n            lostKing[i].cost = KING_BASE_COST;\r\n            lostKing[i].owner = dev;\r\n        }\r\n        \r\n        dailyTimer = now.add(SECONDS_IN_DAY);\r\n        doomclockTimer = now.add(SECONDS_IN_DAY);\r\n        lastBonus = now;\r\n        lastFroot[msg.sender] = now;\r\n        gameActive = true;\r\n    }\r\n    \r\n    //-- PRIVATE --\r\n    \r\n    // CheckDailyTimer\r\n    // If we're over, give reward to leader and reset values\r\n    // Transfer thronePot to SnailThrone if balance > 0.01 ETH\r\n    \r\n    function CheckDailyTimer() private {\r\n        if(now > dailyTimer){\r\n            dailyTimer = now.add(SECONDS_IN_DAY);\r\n            uint256 _reward = troiChest.mul(DAILY_PERCENT).div(100);\r\n            troiChest = troiChest.sub(_reward);\r\n            playerBalance[dailyLeader] = playerBalance[dailyLeader].add(_reward);\r\n            dailyMax = 0;\r\n            \r\n            emit WonDaily(dailyLeader, _reward);\r\n            \r\n            if(thronePot > 0.01 ether){\r\n                uint256 _payThrone = thronePot;\r\n                thronePot = 0;\r\n                (bool success, bytes memory data) = SNAILTHRONE.call.value(_payThrone)(\"\");\r\n                require(success);\r\n     \r\n                emit PaidThrone(msg.sender, _payThrone);\r\n            }\r\n        }\r\n    }\r\n\r\n    // CheckDoomclock\r\n    // If we're not over, check if enough ETH to reset\r\n    // Increase doomclockCost and change doomclockLeader if so\r\n    // Else, reward winners and reset Kings\r\n    \r\n    function CheckDoomclock(uint256 _msgValue) private {\r\n        if(now < doomclockTimer){\r\n            if(_msgValue >= doomclockCost){\r\n                doomclockTimer = now.add(SECONDS_IN_DAY);\r\n                doomclockCost = doomclockCost.add(MINIMUM_INVEST);\r\n                doomclockLeader = msg.sender;\r\n                \r\n                emit ResetClock(msg.sender, doomclockCost);\r\n            }\r\n        } else {\r\n\t\t\ttroiReward = troiReward.mul(9).div(10);\r\n            doomclockTimer = now.add(SECONDS_IN_DAY);\r\n            doomclockCost = MINIMUM_INVEST;\r\n            uint256 _reward = troiChest.mul(KING_PERCENT).div(100);\r\n            troiChest = troiChest.sub(_reward.mul(2));\r\n            playerBalance[doomclockLeader] = playerBalance[doomclockLeader].add(_reward);\r\n            playerBalance[lostKing[3].owner] = playerBalance[lostKing[3].owner].add(_reward);\r\n            \r\n            for(uint256 i = 0; i < 4; i++){\r\n            lostKing[i].cost = KING_BASE_COST;\r\n            }\r\n            \r\n            emit Doomed(doomclockLeader, lostKing[3].owner, _reward);\r\n        }\r\n    }\r\n    \r\n    //-- GAME ACTIONS --\r\n    \r\n    // GrowTroi\r\n    // Claims divs if need be\r\n    // Gives player troiSize in exchange for ETH\r\n    // Checks Doomclock, dailyMax\r\n    \r\n    function GrowTroi(address _ref) public payable {\r\n        require(gameActive == true, \"game hasn't started yet\");\r\n        require(tx.origin == msg.sender, \"no contracts allowed\");\r\n        require(msg.value >= MINIMUM_INVEST, \"at least 1 finney to grow a troi\");\r\n        require(_ref != msg.sender, \"can't refer yourself, silly\");\r\n        \r\n        //Call HarvestFroot if player is already invested, else set lastFroot to now\r\n        if(troiSize[msg.sender] != 0){\r\n            HarvestFroot();\r\n        } else {\r\n            lastFroot[msg.sender] = now;\r\n        }\r\n        \r\n        //Assign new ref. If referrer lacks snail requirement, dev becomes referrer\r\n        uint256 _snail = GetSnail(_ref);\r\n        if(_snail >= REFERRAL_REQ){\r\n            referral[msg.sender] = _ref;\r\n        } else {\r\n            referral[msg.sender] = dev;\r\n        }\r\n\r\n        //Split ETH to pot\r\n        uint256 _chestTemp = troiChest.add(msg.value.mul(9).div(10));\r\n        thronePot = thronePot.add(msg.value.div(10));\r\n        \r\n        //Give reward to Blue King\r\n        uint256 _reward = msg.value.mul(KING_PERCENT).div(100);\r\n        _chestTemp = _chestTemp.sub(_reward);\r\n        troiChest = _chestTemp;\r\n        playerBalance[lostKing[0].owner] = playerBalance[lostKing[0].owner].add(_reward);\r\n        \r\n        //Get troiSize to give\r\n        uint256 _growth = msg.value.div(troiReward);\r\n        \r\n        //Add player troiSize\r\n        troiSize[msg.sender] = troiSize[msg.sender].add(_growth);\r\n        \r\n        //Emit event\r\n        emit GrewTroi(msg.sender, msg.value, troiSize[msg.sender]);\r\n    \r\n        //Check msg.value against dailyMax\r\n        if(msg.value > dailyMax){\r\n            dailyMax = msg.value;\r\n            dailyLeader = msg.sender;\r\n            \r\n            emit NewLeader(msg.sender, msg.value);\r\n        }\r\n        \r\n        //Check dailyTimer\r\n        CheckDailyTimer();\r\n        \r\n        //Check Doomclock\r\n        CheckDoomclock(msg.value);\r\n    }\r\n    \r\n    // HarvestFroot\r\n    // Gives player his share of ETH, according to global bonus\r\n    // Sets his lastFroot to now, sets lastBonus to now\r\n    // Checks Doomclock\r\n    \r\n    function HarvestFroot() public {\r\n        require(gameActive == true, \"game hasn't started yet\");\r\n        require(troiSize[msg.sender] > 0, \"grow your troi first\");\r\n        uint256 _timeSince = lastFroot[msg.sender].add(SECONDS_IN_DAY);\r\n        require(now > _timeSince, \"your harvest isn't ready\");\r\n        \r\n        //Get ETH reward for player and ref\r\n        uint256 _reward = ComputeHarvest();\r\n        uint256 _ref = _reward.mul(REFERRAL_PERCENT).div(100);\r\n        uint256 _king = _reward.mul(KING_PERCENT).div(100);\r\n        \r\n        //Set lastFroot and lastBonus\r\n        lastFroot[msg.sender] = now;\r\n        lastBonus = now;\r\n        \r\n        //Lower troiPot\r\n        troiChest = troiChest.sub(_reward).sub(_ref).sub(_king);\r\n        \r\n        //Give referral reward\r\n        playerBalance[referral[msg.sender]] = playerBalance[referral[msg.sender]].add(_ref);\r\n        \r\n        //Give green king reward\r\n        playerBalance[lostKing[2].owner] = playerBalance[lostKing[2].owner].add(_king);\r\n        \r\n        //Give player reward\r\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_reward);\r\n        \r\n        emit HarvestedFroot(msg.sender, _reward, troiSize[msg.sender]);\r\n        \r\n        //Check dailyTimer\r\n        CheckDailyTimer();\r\n        \r\n        //Check Doomclock\r\n        CheckDoomclock(0);\r\n    }\r\n    \r\n    // BecomeKing\r\n    // Player becomes the owner of a King in exchange for ETH\r\n    // Pays out previous owner, increases cost\r\n    \r\n    function BecomeKing(uint256 _id) payable public {\r\n        require(gameActive == true, \"game is paused\");\r\n        require(tx.origin == msg.sender, \"no contracts allowed\");\r\n        require(msg.value == lostKing[_id].cost, \"wrong ether cost for king\");\r\n        \r\n        //split 0.01 ETH to pots\r\n        troiChest = troiChest.add(KING_BASE_COST.div(4));\r\n        thronePot = thronePot.add(KING_BASE_COST.div(4));\r\n        \r\n        //give value - 0.01 ETH to previous owner\r\n        uint256 _prevReward = msg.value.sub(KING_BASE_COST.div(2));\r\n        address _prevOwner = lostKing[_id].owner;\r\n        playerBalance[_prevOwner] = playerBalance[_prevOwner].add(_prevReward);\r\n        \r\n        //give King to flipper, increase cost\r\n        lostKing[_id].owner = msg.sender;\r\n        lostKing[_id].cost = lostKing[_id].cost.add(KING_BASE_COST);\r\n        \r\n        emit BecameKing(msg.sender, msg.value, _id);\r\n    }\r\n    \r\n    //-- MISC ACTIONS --\r\n    \r\n    // WithdrawBalance\r\n    // Withdraws the ETH balance of a player to his wallet\r\n    \r\n    function WithdrawBalance() public {\r\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\r\n        \r\n        uint _amount = playerBalance[msg.sender];\r\n        playerBalance[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit WithdrewBalance(msg.sender, _amount);\r\n    }\r\n    \r\n    // fallback function\r\n    // Feeds the troiChest\r\n    \r\n    function() external payable {\r\n        troiChest = troiChest.add(msg.value);\r\n        \r\n        emit BoostedChest(msg.sender, msg.value);\r\n    }\r\n    \r\n    //-- CALCULATIONS --\r\n    \r\n    // ComputeHarvest\r\n    // Returns ETH reward for HarvestShare\r\n    \r\n    function ComputeHarvest() public view returns(uint256) {\r\n        \r\n        //Get time since last Harvest\r\n        uint256 _timeLapsed = now.sub(lastFroot[msg.sender]);\r\n        \r\n        //Get current bonus\r\n        uint256 _bonus = ComputeBonus();\r\n        //Compute reward\r\n        uint256 _reward = troiReward.mul(troiSize[msg.sender]).mul(_timeLapsed.add(_bonus)).div(SECONDS_IN_DAY).div(100);\r\n        \r\n        //Check reward + ref + king isn't above remaining troiChest\r\n        uint256 _sum = _reward.add(_reward.mul(REFERRAL_PERCENT.add(KING_PERCENT)).div(100));\r\n        if(_sum > troiChest){\r\n            _reward = troiChest.mul(100).div(REFERRAL_PERCENT.add(KING_PERCENT).add(100));\r\n        }\r\n        return _reward;\r\n    }\r\n    \r\n    // ComputeBonus \r\n    // Returns time since last bonus x 8\r\n    \r\n    function ComputeBonus() public view returns(uint256) {\r\n        uint256 _bonus = (now.sub(lastBonus)).mul(8);\r\n        if(msg.sender == lostKing[1].owner){\r\n            _bonus = _bonus.mul(2);\r\n        }\r\n        return _bonus;\r\n    }\r\n    \r\n    //-- GETTERS --\r\n    \r\n    function GetTroi(address adr) public view returns(uint256) {\r\n        return troiSize[adr];\r\n    }\r\n\t\r\n\tfunction GetMyBalance() public view returns(uint256) {\r\n\t    return playerBalance[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetMyLastHarvest() public view returns(uint256) {\r\n\t    return lastFroot[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetMyReferrer() public view returns(address) {\r\n\t    return referral[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetSnail(address _adr) public view returns(uint256) {\r\n        return throneContract.hatcherySnail(_adr);\r\n    }\r\n\t\r\n\tfunction GetKingCost(uint256 _id) public view returns(uint256) {\r\n\t\treturn lostKing[_id].cost;\r\n\t}\r\n\t\r\n\tfunction GetKingOwner(uint256 _id) public view returns(address) {\r\n\t\treturn lostKing[_id].owner;\r\n\t}\r\n}\r\n\r\n/* SafeMath library */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetKingCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetTroi\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"doomclockTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"GetSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetKingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"BecomeKing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyLastHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"doomclockLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"troiChest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"GrowTroi\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"troiReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HarvestFroot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"doomclockCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"GrewTroi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"HarvestedFroot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"king\",\"type\":\"uint256\"}],\"name\":\"BecameKing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"ResetClock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"king\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Doomed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WonDaily\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedChest\",\"type\":\"event\"}]","ContractName":"SnailTroi","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0648b39c21ebbc707c2669119f327743c9ed11dcc88bde5a1a964618a4e0001"}]}