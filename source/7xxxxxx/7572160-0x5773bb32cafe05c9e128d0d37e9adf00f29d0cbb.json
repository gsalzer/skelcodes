{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/Restricted.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/ownership/CanReclaimEther.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract CanReclaimEther is Ownable {\r\n    event ReclaimEther(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Transfer all Ether held by the contract to the owner.\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        uint256 value = address(this).balance;\r\n        owner.transfer(value);\r\n\r\n        emit ReclaimEther(owner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of Ether held by the contract to the address.\r\n     * @param _to The address which will receive the Ether\r\n     * @param _value The amount of Ether to transfer\r\n     */\r\n    function reclaimEtherTo(address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _to.transfer(_value);\r\n\r\n        emit ReclaimEther(_to, _value);\r\n    }\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/ownership/CanReclaimTokens.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract CanReclaimTokens is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event ReclaimTokens(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Reclaim all ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        _token.safeTransfer(owner, balance);\r\n\r\n        emit ReclaimTokens(owner, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Reclaim specified amount of ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     * @param _to The address which will receive the tokens\r\n     * @param _value The amount of tokens to transfer\r\n     */\r\n    function reclaimTokenTo(ERC20Basic _token, address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _token.safeTransfer(_to, _value);\r\n\r\n        emit ReclaimTokens(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/MonethaClaimHandler.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  @title MonethaClaimHandler\r\n *\r\n *  MonethaClaimHandler handles claim creation, acceptance, resolution and confirmation.\r\n */\r\ncontract MonethaClaimHandler is Restricted, Pausable, CanReclaimEther, CanReclaimTokens {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event MinStakeUpdated(uint256 previousMinStake, uint256 newMinStake);\r\n\r\n    event ClaimCreated(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimAccepted(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimResolved(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimClosedAfterAcceptanceExpired(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimClosedAfterResolutionExpired(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimClosedAfterConfirmationExpired(uint256 indexed dealId, uint256 indexed claimIdx);\r\n    event ClaimClosed(uint256 indexed dealId, uint256 indexed claimIdx);\r\n\r\n    ERC20 public token;      // token contract address\r\n    uint256 public minStake; // minimum amount of token units to create and accept claim\r\n\r\n    // State of claim\r\n    enum State {\r\n        Null,\r\n        AwaitingAcceptance,\r\n        AwaitingResolution,\r\n        AwaitingConfirmation,\r\n        ClosedAfterAcceptanceExpired,\r\n        ClosedAfterResolutionExpired,\r\n        ClosedAfterConfirmationExpired,\r\n        Closed\r\n    }\r\n\r\n    struct Claim {\r\n        State state;\r\n        uint256 modified;\r\n        uint256 dealId; // immutable after AwaitingAcceptance\r\n        bytes32 dealHash; // immutable after AwaitingAcceptance\r\n        string reasonNote; // immutable after AwaitingAcceptance\r\n        bytes32 requesterId; // immutable after AwaitingAcceptance\r\n        address requesterAddress; // immutable after AwaitingAcceptance\r\n        uint256 requesterStaked; // immutable after AwaitingAcceptance\r\n        bytes32 respondentId; // immutable after AwaitingAcceptance\r\n        address respondentAddress; // immutable after Accepted\r\n        uint256 respondentStaked; // immutable after Accepted\r\n        string resolutionNote; // immutable after Resolved\r\n    }\r\n\r\n    Claim[] public claims;\r\n\r\n    constructor(ERC20 _token, uint256 _minStake) public {\r\n        require(_token != address(0), \"must be valid token address\");\r\n\r\n        token = _token;\r\n        _setMinStake(_minStake);\r\n    }\r\n\r\n    /**\r\n     * @dev sets the minimum amount of tokens units to stake when creating or accepting the claim.\r\n     * Only Monetha account allowed to call this method.\r\n     */\r\n    function setMinStake(uint256 _newMinStake) external whenNotPaused onlyMonetha {\r\n        _setMinStake(_newMinStake);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the number of claims created.\r\n     */\r\n    function getClaimsCount() public constant returns (uint256 count) {\r\n        return claims.length;\r\n    }\r\n\r\n    /**\r\n    * @dev creates new claim using provided parameters. Before calling this method, requester should approve\r\n    * this contract to transfer min. amount of token units in their behalf, by calling\r\n    * `approve(address _spender, uint _value)` method of token contract.\r\n    * Respondent should accept the claim by calling accept() method.\r\n    * claimIdx should be extracted from ClaimCreated event.\r\n    *\r\n    * Claim state after call 🡒 AwaitingAcceptance\r\n    */\r\n    function create(\r\n        uint256 _dealId,\r\n        bytes32 _dealHash,\r\n        string _reasonNote,\r\n        bytes32 _requesterId,\r\n        bytes32 _respondentId,\r\n        uint256 _amountToStake\r\n    ) external whenNotPaused {\r\n        require(bytes(_reasonNote).length > 0, \"reason note must not be empty\");\r\n        require(_dealHash != bytes32(0), \"deal hash must be non-zero\");\r\n        require(_requesterId != bytes32(0), \"requester ID must be non-zero\");\r\n        require(_respondentId != bytes32(0), \"respondent ID must be non-zero\");\r\n        require(keccak256(abi.encodePacked(_requesterId)) != keccak256(abi.encodePacked(_respondentId)),\r\n            \"requester and respondent must be different\");\r\n        require(_amountToStake >= minStake, \"amount to stake must be greater or equal to min.stake\");\r\n\r\n        uint256 requesterAllowance = token.allowance(msg.sender, address(this));\r\n        require(requesterAllowance >= _amountToStake, \"allowance too small\");\r\n        token.safeTransferFrom(msg.sender, address(this), _amountToStake);\r\n\r\n        Claim memory claim = Claim({\r\n            state : State.AwaitingAcceptance,\r\n            modified : now,\r\n            dealId : _dealId,\r\n            dealHash : _dealHash,\r\n            reasonNote : _reasonNote,\r\n            requesterId : _requesterId,\r\n            requesterAddress : msg.sender,\r\n            requesterStaked : _amountToStake,\r\n            respondentId : _respondentId,\r\n            respondentAddress : address(0),\r\n            respondentStaked : 0,\r\n            resolutionNote : \"\"\r\n            });\r\n        claims.push(claim);\r\n\r\n        emit ClaimCreated(_dealId, claims.length - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev accepts the claim by respondent. Before calling this method, respondent should approve\r\n     * this contract to transfer min. amount of token units in their behalf, by calling\r\n     * `approve(address _spender, uint _value)` method of token contract. Respondent must stake the same amount\r\n     * of tokens as requester.\r\n     *\r\n     * Claim state after call 🡒 AwaitingResolution (if was AwaitingAcceptance)\r\n     */\r\n    function accept(uint256 _claimIdx) external whenNotPaused {\r\n        require(_claimIdx < claims.length, \"invalid claim index\");\r\n        Claim storage claim = claims[_claimIdx];\r\n        require(State.AwaitingAcceptance == claim.state, \"State.AwaitingAcceptance required\");\r\n        require(msg.sender != claim.requesterAddress, \"requester and respondent addresses must be different\");\r\n\r\n        uint256 requesterStaked = claim.requesterStaked;\r\n        token.safeTransferFrom(msg.sender, address(this), requesterStaked);\r\n\r\n        claim.state = State.AwaitingResolution;\r\n        claim.modified = now;\r\n        claim.respondentAddress = msg.sender;\r\n        claim.respondentStaked = requesterStaked;\r\n\r\n        emit ClaimAccepted(claim.dealId, _claimIdx);\r\n    }\r\n\r\n    /**\r\n     * @dev resolves the claim by respondent. Respondent will get staked amount of tokens back.\r\n     *\r\n     * Claim state after call 🡒 AwaitingConfirmation (if was AwaitingResolution)\r\n     */\r\n    function resolve(uint256 _claimIdx, string _resolutionNote) external whenNotPaused {\r\n        require(_claimIdx < claims.length, \"invalid claim index\");\r\n        require(bytes(_resolutionNote).length > 0, \"resolution note must not be empty\");\r\n        Claim storage claim = claims[_claimIdx];\r\n        require(State.AwaitingResolution == claim.state, \"State.AwaitingResolution required\");\r\n        require(msg.sender == claim.respondentAddress, \"awaiting respondent\");\r\n\r\n        uint256 respStakedBefore = claim.respondentStaked;\r\n\r\n        claim.state = State.AwaitingConfirmation;\r\n        claim.modified = now;\r\n        claim.respondentStaked = 0;\r\n        claim.resolutionNote = _resolutionNote;\r\n\r\n        token.safeTransfer(msg.sender, respStakedBefore);\r\n\r\n        emit ClaimResolved(claim.dealId, _claimIdx);\r\n    }\r\n\r\n    /**\r\n     * @dev closes the claim by requester.\r\n     * Requester allowed to call this method 72 hours after call to create() or accept(), and immediately after resolve().\r\n     * Requester will get staked amount of tokens back. Requester will also get the respondent’s tokens if\r\n     * the respondent did not call the resolve() method within 72 hours.\r\n     *\r\n     * Claim state after call 🡒 Closed                         (if was AwaitingConfirmation, and less than 24 hours passed)\r\n     *                        🡒 ClosedAfterConfirmationExpired (if was AwaitingConfirmation, after 24 hours)\r\n     *                        🡒 ClosedAfterAcceptanceExpired   (if was AwaitingAcceptance, after 72 hours)\r\n     *                        🡒 ClosedAfterResolutionExpired   (if was AwaitingResolution, after 72 hours)\r\n     */\r\n    function close(uint256 _claimIdx) external whenNotPaused {\r\n        require(_claimIdx < claims.length, \"invalid claim index\");\r\n        State state = claims[_claimIdx].state;\r\n\r\n        if (State.AwaitingAcceptance == state) {\r\n            return _closeAfterAwaitingAcceptance(_claimIdx);\r\n        } else if (State.AwaitingResolution == state) {\r\n            return _closeAfterAwaitingResolution(_claimIdx);\r\n        } else if (State.AwaitingConfirmation == state) {\r\n            return _closeAfterAwaitingConfirmation(_claimIdx);\r\n        }\r\n\r\n        revert(\"claim.State\");\r\n    }\r\n\r\n    function _closeAfterAwaitingAcceptance(uint256 _claimIdx) internal {\r\n        Claim storage claim = claims[_claimIdx];\r\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\r\n        require(State.AwaitingAcceptance == claim.state, \"State.AwaitingAcceptance required\");\r\n        require(_hoursPassed(claim.modified, 72), \"expiration required\");\r\n\r\n        uint256 stakedBefore = claim.requesterStaked;\r\n\r\n        claim.state = State.ClosedAfterAcceptanceExpired;\r\n        claim.modified = now;\r\n        claim.requesterStaked = 0;\r\n\r\n        token.safeTransfer(msg.sender, stakedBefore);\r\n\r\n        emit ClaimClosedAfterAcceptanceExpired(claim.dealId, _claimIdx);\r\n    }\r\n\r\n    function _closeAfterAwaitingResolution(uint256 _claimIdx) internal {\r\n        Claim storage claim = claims[_claimIdx];\r\n        require(State.AwaitingResolution == claim.state, \"State.AwaitingResolution required\");\r\n        require(_hoursPassed(claim.modified, 72), \"expiration required\");\r\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\r\n\r\n        uint256 totalStaked = claim.requesterStaked.add(claim.respondentStaked);\r\n\r\n        claim.state = State.ClosedAfterResolutionExpired;\r\n        claim.modified = now;\r\n        claim.requesterStaked = 0;\r\n        claim.respondentStaked = 0;\r\n\r\n        token.safeTransfer(msg.sender, totalStaked);\r\n\r\n        emit ClaimClosedAfterResolutionExpired(claim.dealId, _claimIdx);\r\n    }\r\n\r\n    function _closeAfterAwaitingConfirmation(uint256 _claimIdx) internal {\r\n        Claim storage claim = claims[_claimIdx];\r\n        require(msg.sender == claim.requesterAddress, \"awaiting requester\");\r\n        require(State.AwaitingConfirmation == claim.state, \"State.AwaitingConfirmation required\");\r\n\r\n        bool expired = _hoursPassed(claim.modified, 24);\r\n        if (expired) {\r\n            claim.state = State.ClosedAfterConfirmationExpired;\r\n        } else {\r\n            claim.state = State.Closed;\r\n        }\r\n        claim.modified = now;\r\n\r\n        uint256 stakedBefore = claim.requesterStaked;\r\n        claim.requesterStaked = 0;\r\n\r\n        token.safeTransfer(msg.sender, stakedBefore);\r\n\r\n        if (expired) {\r\n            emit ClaimClosedAfterConfirmationExpired(claim.dealId, _claimIdx);\r\n        } else {\r\n            emit ClaimClosed(claim.dealId, _claimIdx);\r\n        }\r\n    }\r\n\r\n    function _hoursPassed(uint256 start, uint256 hoursAfter) internal view returns (bool) {\r\n        return now >= start + hoursAfter * 1 hours;\r\n    }\r\n\r\n    function _setMinStake(uint256 _newMinStake) internal {\r\n        uint256 previousMinStake = minStake;\r\n        if (previousMinStake != _newMinStake) {\r\n            emit MinStakeUpdated(previousMinStake, _newMinStake);\r\n            minStake = _newMinStake;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"},{\"name\":\"_dealHash\",\"type\":\"bytes32\"},{\"name\":\"_reasonNote\",\"type\":\"string\"},{\"name\":\"_requesterId\",\"type\":\"bytes32\"},{\"name\":\"_respondentId\",\"type\":\"bytes32\"},{\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"modified\",\"type\":\"uint256\"},{\"name\":\"dealId\",\"type\":\"uint256\"},{\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"name\":\"reasonNote\",\"type\":\"string\"},{\"name\":\"requesterId\",\"type\":\"bytes32\"},{\"name\":\"requesterAddress\",\"type\":\"address\"},{\"name\":\"requesterStaked\",\"type\":\"uint256\"},{\"name\":\"respondentId\",\"type\":\"bytes32\"},{\"name\":\"respondentAddress\",\"type\":\"address\"},{\"name\":\"respondentStaked\",\"type\":\"uint256\"},{\"name\":\"resolutionNote\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimIdx\",\"type\":\"uint256\"},{\"name\":\"_resolutionNote\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterAcceptanceExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterResolutionExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosedAfterConfirmationExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimIdx\",\"type\":\"uint256\"}],\"name\":\"ClaimClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaClaimHandler","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f160000000000000000000000000000000000000000000000000000000000e4e1c0","Library":"","SwarmSource":"bzzr://004cc4b9b67f666a48cd91db8c57cb72ef86000f2acf78f1a4f83d839ea778cc"}]}