{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.4 <0.6.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t * @dev Multiplies two numbers, throws on overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Integer division of two numbers, truncating the quotient.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two numbers, throws on overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\ninterface INameTAOPosition {\r\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\r\n\tfunction getAdvocate(address _id) external view returns (address);\r\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\r\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\r\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\r\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface INameFactory {\r\n\tfunction nonces(address _nameId) external view returns (uint256);\r\n\tfunction incrementNonce(address _nameId) external returns (uint256);\r\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\r\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\r\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\r\n}\r\n\r\n\r\ninterface IAOEarning {\r\n\tfunction calculateEarning(bytes32 _purchaseReceiptId) external returns (bool);\r\n\r\n\tfunction releaseEarning(bytes32 _purchaseReceiptId) external returns (bool);\r\n\r\n\tfunction getTotalStakedContentEarning(bytes32 _stakedContentId) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\n\r\ninterface IAOContentHost {\r\n\tfunction create(address _host, bytes32 _stakedContentId, string calldata _encChallenge, string calldata _contentDatKey, string calldata _metadataDatKey) external returns (bool);\r\n\r\n\tfunction getById(bytes32 _contentHostId) external view returns (bytes32, bytes32, address, string memory, string memory);\r\n\r\n\tfunction contentHostPrice(bytes32 _contentHostId) external view returns (uint256);\r\n\r\n\tfunction contentHostPaidByAO(bytes32 _contentHostId) external view returns (uint256);\r\n\r\n\tfunction isExist(bytes32 _contentHostId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IAOStakedContent {\r\n\tfunction getById(bytes32 _stakedContentId) external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool, uint256);\r\n\r\n\tfunction create(address _stakeOwner, bytes32 _contentId, uint256 _networkIntegerAmount, uint256 _networkFractionAmount, bytes8 _denomination, uint256 _primordialAmount, uint256 _profitPercentage) external returns (bytes32);\r\n\r\n\tfunction isActive(bytes32 _stakedContentId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IAOContent {\r\n\tfunction create(address _creator, string calldata _baseChallenge, uint256 _fileSize, bytes32 _contentUsageType, address _taoId) external returns (bytes32);\r\n\r\n\tfunction isAOContentUsageType(bytes32 _contentId) external view returns (bool);\r\n\r\n\tfunction getById(bytes32 _contentId) external view returns (address, uint256, bytes32, address, bytes32, uint8, bytes32, bytes32, string memory);\r\n\r\n\tfunction getBaseChallenge(bytes32 _contentId) external view returns (string memory);\r\n}\r\n\r\n\r\ninterface IAOTreasury {\r\n\tfunction toBase(uint256 integerAmount, uint256 fractionAmount, bytes8 denominationName) external view returns (uint256);\r\n\tfunction isDenominationExist(bytes8 denominationName) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IAOSetting {\r\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\r\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\r\n\r\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != address(0));\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title TAO\r\n */\r\ncontract TAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public vaultAddress;\r\n\tstring public name;\t\t\t\t// the name for this TAO\r\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\r\n\r\n\t// TAO's data\r\n\tstring public datHash;\r\n\tstring public database;\r\n\tstring public keyValue;\r\n\tbytes32 public contentId;\r\n\r\n\t/**\r\n\t * 0 = TAO\r\n\t * 1 = Name\r\n\t */\r\n\tuint8 public typeId;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _vaultAddress\r\n\t) public {\r\n\t\tname = _name;\r\n\t\toriginId = _originId;\r\n\t\tdatHash = _datHash;\r\n\t\tdatabase = _database;\r\n\t\tkeyValue = _keyValue;\r\n\t\tcontentId = _contentId;\r\n\r\n\t\t// Creating TAO\r\n\t\ttypeId = 0;\r\n\r\n\t\tvaultAddress = _vaultAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if calling address is Vault contract\r\n\t */\r\n\tmodifier onlyVault {\r\n\t\trequire (msg.sender == vaultAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Will receive any ETH sent\r\n\t */\r\n\tfunction () external payable {\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\t_recipient.transfer(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\r\n\t * @param _erc20TokenAddress The address of ERC20 Token\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\r\n\t\t_erc20.transfer(_recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Name\r\n */\r\ncontract Name is TAO {\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\r\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\r\n\t\t// Creating Name\r\n\t\ttypeId = 1;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOLibrary\r\n */\r\nlibrary AOLibrary {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\r\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given TAO ID is a TAO\r\n\t * @param _taoId The ID of the TAO\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isTAO(address _taoId) public view returns (bool) {\r\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given Name ID is a Name\r\n\t * @param _nameId The ID of the Name\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isName(address _nameId) public view returns (bool) {\r\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\r\n\t * @param _tokenAddress The ERC20 Token address to check\r\n\t */\r\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\r\n\t\tif (_tokenAddress == address(0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\r\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t * @param _sender The address to check\r\n\t * @param _theAO The AO address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t * @return true if yes, false otherwise\r\n\t */\r\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\r\n\t\treturn (_sender == _theAO ||\r\n\t\t\t(\r\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\r\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\r\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate percentage.\r\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\r\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\r\n\t */\r\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _PERCENTAGE_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate multiplier.\r\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\r\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\r\n\t */\r\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _MULTIPLIER_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _originId The Name ID the creates the TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployTAO(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (TAO _tao) {\r\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a Name\r\n\t * @param _name The name of the Name\r\n\t * @param _originId The eth address the creates the Name\r\n\t * @param _datHash The datHash of this Name\r\n\t * @param _database The database for this Name\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this Name\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployName(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (Name _myName) {\r\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\r\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\r\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\r\n\t * @return the new primordial weighted multiplier\r\n\t */\r\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\r\n\t\tif (_currentWeightedMultiplier > 0) {\r\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\r\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\r\n\t\t\treturn _totalWeightedIons.div(_totalIons);\r\n\t\t} else {\r\n\t\t\treturn _additionalWeightedMultiplier;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the primordial ion multiplier on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Multiplier = S\r\n\t *\t\tEnding Multiplier = E\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\r\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\r\n\t * @return The multiplier in (10 ** 6)\r\n\t */\r\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\r\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\r\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\r\n\t\t\t/**\r\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\r\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\r\n\t\t\t */\r\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus percentage of network ion on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Network Bonus Multiplier = Bs\r\n\t *\t\tEnding Network Bonus Multiplier = Be\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\r\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\r\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\r\n\t\t\t */\r\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\r\n\t\t\treturn bonusPercentage;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus amount of network ion on a given lot\r\n\t *\t\tAO Bonus Amount = B% x P\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\r\n\t\t/**\r\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\r\n\t\t * when calculating the network ion bonus amount\r\n\t\t */\r\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\r\n\t\treturn networkBonus;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the maximum amount of Primordial an account can burn\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_maximumMultiplier = S\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\tB = ((S x P) - (P x M)) / S\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _maximumMultiplier The maximum multiplier of this account\r\n\t * @return The maximum burn amount\r\n\t */\r\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\r\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after burning primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P - B)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToBurn The amount of primordial ion to burn\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToConvert = C\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P + C)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToConvert The amount of network ion to convert\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev count num of digits\r\n\t * @param number uint256 of the nuumber to be checked\r\n\t * @return uint8 num of digits\r\n\t */\r\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\r\n\t\tuint8 digits = 0;\r\n\t\twhile(number != 0) {\r\n\t\t\tnumber = number.div(10);\r\n\t\t\tdigits++;\r\n\t\t}\r\n\t\treturn digits;\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract TheAO {\r\n\taddress public theAO;\r\n\taddress public nameTAOPositionAddress;\r\n\r\n\t// Check whether an address is whitelisted and granted access to transact\r\n\t// on behalf of others\r\n\tmapping (address => bool) public whitelist;\r\n\r\n\tconstructor() public {\r\n\t\ttheAO = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if msg.sender is in whitelist.\r\n\t */\r\n\tmodifier inWhitelist() {\r\n\t\trequire (whitelist[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOContentFactory\r\n *\r\n * The purpose of this contract is to allow content creator to stake network AO ions and/or primordial AO+ ions\r\n * on his/her content\r\n */\r\ncontract AOContentFactory is TheAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public settingTAOId;\r\n\taddress public aoSettingAddress;\r\n\taddress public aoTreasuryAddress;\r\n\taddress public aoContentAddress;\r\n\taddress public aoStakedContentAddress;\r\n\taddress public aoContentHostAddress;\r\n\taddress public aoEarningAddress;\r\n\taddress public nameFactoryAddress;\r\n\r\n\tIAOSetting internal _aoSetting;\r\n\tIAOTreasury internal _aoTreasury;\r\n\tIAOContent internal _aoContent;\r\n\tIAOStakedContent internal _aoStakedContent;\r\n\tIAOContentHost internal _aoContentHost;\r\n\tIAOEarning internal _aoEarning;\r\n\tINameFactory internal _nameFactory;\r\n\tINameTAOPosition internal _nameTAOPosition;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t * @param _settingTAOId The TAO ID that controls the setting\r\n\t * @param _aoSettingAddress The address of AOSetting\r\n\t * @param _aoTreasuryAddress The address of AOTreasury\r\n\t * @param _aoContentAddress The address of AOContent\r\n\t * @param _aoStakedContentAddress The address of AOStakedContent\r\n\t * @param _aoContentHostAddress The address of AOContentHost\r\n\t * @param _aoEarningAddress The address of AOEarning\r\n\t * @param _nameFactoryAddress The address of NameFactory\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tconstructor(address _settingTAOId,\r\n\t\taddress _aoSettingAddress,\r\n\t\taddress _aoTreasuryAddress,\r\n\t\taddress _aoContentAddress,\r\n\t\taddress _aoStakedContentAddress,\r\n\t\taddress _aoContentHostAddress,\r\n\t\taddress _aoEarningAddress,\r\n\t\taddress _nameFactoryAddress,\r\n\t\taddress _nameTAOPositionAddress\r\n\t\t) public {\r\n\t\tsetSettingTAOId(_settingTAOId);\r\n\t\tsetAOSettingAddress(_aoSettingAddress);\r\n\t\tsetAOTreasuryAddress(_aoTreasuryAddress);\r\n\t\tsetAOContentAddress(_aoContentAddress);\r\n\t\tsetAOStakedContentAddress(_aoStakedContentAddress);\r\n\t\tsetAOContentHostAddress(_aoContentHostAddress);\r\n\t\tsetAOEarningAddress(_aoEarningAddress);\r\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\r\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t */\r\n\tmodifier onlyTheAO {\r\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets setting TAO ID\r\n\t * @param _settingTAOId The new setting TAO ID to set\r\n\t */\r\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\r\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\r\n\t\tsettingTAOId = _settingTAOId;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AO Setting address\r\n\t * @param _aoSettingAddress The address of AOSetting\r\n\t */\r\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\r\n\t\trequire (_aoSettingAddress != address(0));\r\n\t\taoSettingAddress = _aoSettingAddress;\r\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AO Treasury address\r\n\t * @param _aoTreasuryAddress The address of AOTreasury\r\n\t */\r\n\tfunction setAOTreasuryAddress(address _aoTreasuryAddress) public onlyTheAO {\r\n\t\trequire (_aoTreasuryAddress != address(0));\r\n\t\taoTreasuryAddress = _aoTreasuryAddress;\r\n\t\t_aoTreasury = IAOTreasury(_aoTreasuryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOContent address\r\n\t * @param _aoContentAddress The address of AOContent\r\n\t */\r\n\tfunction setAOContentAddress(address _aoContentAddress) public onlyTheAO {\r\n\t\trequire (_aoContentAddress != address(0));\r\n\t\taoContentAddress = _aoContentAddress;\r\n\t\t_aoContent = IAOContent(_aoContentAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOStakedContent address\r\n\t * @param _aoStakedContentAddress The address of AOStakedContent\r\n\t */\r\n\tfunction setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {\r\n\t\trequire (_aoStakedContentAddress != address(0));\r\n\t\taoStakedContentAddress = _aoStakedContentAddress;\r\n\t\t_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOContentHost address\r\n\t * @param _aoContentHostAddress The address of AOContentHost\r\n\t */\r\n\tfunction setAOContentHostAddress(address _aoContentHostAddress) public onlyTheAO {\r\n\t\trequire (_aoContentHostAddress != address(0));\r\n\t\taoContentHostAddress = _aoContentHostAddress;\r\n\t\t_aoContentHost = IAOContentHost(_aoContentHostAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOEarning address\r\n\t * @param _aoEarningAddress The address of AOEarning\r\n\t */\r\n\tfunction setAOEarningAddress(address _aoEarningAddress) public onlyTheAO {\r\n\t\trequire (_aoEarningAddress != address(0));\r\n\t\taoEarningAddress = _aoEarningAddress;\r\n\t\t_aoEarning = IAOEarning(_aoEarningAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameFactory address\r\n\t * @param _nameFactoryAddress The address of NameFactory\r\n\t */\r\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\r\n\t\trequire (_nameFactoryAddress != address(0));\r\n\t\tnameFactoryAddress = _nameFactoryAddress;\r\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameTAOPosition address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for an AO Content\r\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\r\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\r\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\r\n\t * @param _primordialAmount The amount of primordial ion to stake\r\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\r\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\r\n\t * @param _contentDatKey The dat key of the content\r\n\t * @param _metadataDatKey The dat key of the content's metadata\r\n\t * @param _fileSize The size of the file\r\n\t * @param _profitPercentage The percentage of profit the stake owner's media will charge\r\n\t */\r\n\tfunction stakeAOContent(\r\n\t\tuint256 _networkIntegerAmount,\r\n\t\tuint256 _networkFractionAmount,\r\n\t\tbytes8 _denomination,\r\n\t\tuint256 _primordialAmount,\r\n\t\tstring memory _baseChallenge,\r\n\t\tstring memory _encChallenge,\r\n\t\tstring memory _contentDatKey,\r\n\t\tstring memory _metadataDatKey,\r\n\t\tuint256 _fileSize,\r\n\t\tuint256 _profitPercentage\r\n\t\t) public {\r\n\t\t/**\r\n\t\t * 1. Store this content\r\n\t\t * 2. Stake the network/primordial ion on content\r\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\r\n\t\t */\r\n\t\trequire (\r\n\t\t\t_hostContent(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_stakeContent(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t_storeContent(\r\n\t\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t\t_baseChallenge,\r\n\t\t\t\t\t\t_fileSize,\r\n\t\t\t\t\t\t_contentUsageType_aoContent(),\r\n\t\t\t\t\t\taddress(0)\r\n\t\t\t\t\t),\r\n\t\t\t\t\t_networkIntegerAmount,\r\n\t\t\t\t\t_networkFractionAmount,\r\n\t\t\t\t\t_denomination,\r\n\t\t\t\t\t_primordialAmount,\r\n\t\t\t\t\t_profitPercentage\r\n\t\t\t\t),\r\n\t\t\t\t_encChallenge,\r\n\t\t\t\t_contentDatKey,\r\n\t\t\t\t_metadataDatKey\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for a Creative Commons Content\r\n\t * @param _networkIntegerAmount The integer amount of network on to stake\r\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\r\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\r\n\t * @param _primordialAmount The amount of primordial ion to stake\r\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\r\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\r\n\t * @param _contentDatKey The dat key of the content\r\n\t * @param _metadataDatKey The dat key of the content's metadata\r\n\t * @param _fileSize The size of the file\r\n\t */\r\n\tfunction stakeCreativeCommonsContent(\r\n\t\tuint256 _networkIntegerAmount,\r\n\t\tuint256 _networkFractionAmount,\r\n\t\tbytes8 _denomination,\r\n\t\tuint256 _primordialAmount,\r\n\t\tstring memory _baseChallenge,\r\n\t\tstring memory _encChallenge,\r\n\t\tstring memory _contentDatKey,\r\n\t\tstring memory _metadataDatKey,\r\n\t\tuint256 _fileSize\r\n\t\t) public {\r\n\t\t/**\r\n\t\t * 1. Store this content\r\n\t\t * 2. Stake the network/primordial ion on content\r\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\r\n\t\t */\r\n\t\trequire (\r\n\t\t\t_hostContent(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_stakeContent(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t_storeContent(\r\n\t\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t\t_baseChallenge,\r\n\t\t\t\t\t\t_fileSize,\r\n\t\t\t\t\t\t_contentUsageType_creativeCommons(),\r\n\t\t\t\t\t\taddress(0)\r\n\t\t\t\t\t),\r\n\t\t\t\t\t_networkIntegerAmount,\r\n\t\t\t\t\t_networkFractionAmount,\r\n\t\t\t\t\t_denomination,\r\n\t\t\t\t\t_primordialAmount,\r\n\t\t\t\t\t0\r\n\t\t\t\t),\r\n\t\t\t\t_encChallenge,\r\n\t\t\t\t_contentDatKey,\r\n\t\t\t\t_metadataDatKey\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for a T(AO) Content\r\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\r\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\r\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\r\n\t * @param _primordialAmount The amount of primordial ion to stake\r\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\r\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\r\n\t * @param _contentDatKey The dat key of the content\r\n\t * @param _metadataDatKey The dat key of the content's metadata\r\n\t * @param _fileSize The size of the file\r\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\r\n\t */\r\n\tfunction stakeTAOContent(\r\n\t\tuint256 _networkIntegerAmount,\r\n\t\tuint256 _networkFractionAmount,\r\n\t\tbytes8 _denomination,\r\n\t\tuint256 _primordialAmount,\r\n\t\tstring memory _baseChallenge,\r\n\t\tstring memory _encChallenge,\r\n\t\tstring memory _contentDatKey,\r\n\t\tstring memory _metadataDatKey,\r\n\t\tuint256 _fileSize,\r\n\t\taddress _taoId\r\n\t\t) public {\r\n\t\t/**\r\n\t\t * 1. Store this content\r\n\t\t * 2. Stake the network/primordial ion on content\r\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\r\n\t\t */\r\n\t\trequire (\r\n\t\t\t_hostContent(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_stakeContent(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t_storeContent(\r\n\t\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\t\t_baseChallenge,\r\n\t\t\t\t\t\t_fileSize,\r\n\t\t\t\t\t\t_contentUsageType_taoContent(),\r\n\t\t\t\t\t\t_taoId\r\n\t\t\t\t\t),\r\n\t\t\t\t\t_networkIntegerAmount,\r\n\t\t\t\t\t_networkFractionAmount,\r\n\t\t\t\t\t_denomination,\r\n\t\t\t\t\t_primordialAmount,\r\n\t\t\t\t\t0\r\n\t\t\t\t),\r\n\t\t\t\t_encChallenge,\r\n\t\t\t\t_contentDatKey,\r\n\t\t\t\t_metadataDatKey\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the staking information of a StakedContent ID\r\n\t * @param _stakedContentId The ID of the staked content\r\n\t * @return the network base ion amount staked for this content\r\n\t * @return the primordial ion amount staked for this content\r\n\t * @return the primordial weighted multiplier of the staked content\r\n\t */\r\n\tfunction getStakingMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256) {\r\n\t\t(,, uint256 networkAmount, uint256 primordialAmount, uint256 primordialWeightedMultiplier,,,) = _aoStakedContent.getById(_stakedContentId);\r\n\t\treturn (\r\n\t\t\tnetworkAmount,\r\n\t\t\tprimordialAmount,\r\n\t\t\tprimordialWeightedMultiplier\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the earning information of a StakedContent ID\r\n\t * @param _stakedContentId The ID of the staked content\r\n\t * @return the total earning from staking this content\r\n\t * @return the total earning from hosting this content\r\n\t * @return the total The AO earning of this content\r\n\t */\r\n\tfunction getEarningMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256) {\r\n\t\treturn _aoEarning.getTotalStakedContentEarning(_stakedContentId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the staking and earning information of a StakedContent ID\r\n\t * @param _stakedContentId The ID of the staked content\r\n\t * @return the network base ion amount staked for this content\r\n\t * @return the primordial ion amount staked for this content\r\n\t * @return the primordial weighted multiplier of the staked content\r\n\t * @return the total earning from staking this content\r\n\t * @return the total earning from hosting this content\r\n\t * @return the total The AO earning of this content\r\n\t */\r\n\tfunction getContentMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\t\t(uint256 networkAmount, uint256 primordialAmount, uint256 primordialWeightedMultiplier) = getStakingMetrics(_stakedContentId);\r\n\t\t(uint256 totalStakeEarning, uint256 totalHostEarning, uint256 totalTheAOEarning) = getEarningMetrics(_stakedContentId);\r\n\t\treturn (\r\n\t\t\tnetworkAmount,\r\n\t\t\tprimordialAmount,\r\n\t\t\tprimordialWeightedMultiplier,\r\n\t\t\ttotalStakeEarning,\r\n\t\t\ttotalHostEarning,\r\n\t\t\ttotalTheAOEarning\r\n\t\t);\r\n\t}\r\n\r\n\t/***** INTERNAL METHODS *****/\r\n\t/**\r\n\t * @dev Get Content Usage Type = AO Content setting\r\n\t * @return contentUsageType_aoContent Content Usage Type = AO Content\r\n\t */\r\n\tfunction _contentUsageType_aoContent() internal view returns (bytes32) {\r\n\t\t(,,,bytes32 contentUsageType_aoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_aoContent');\r\n\t\treturn contentUsageType_aoContent;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Content Usage Type = Creative Commons setting\r\n\t * @return contentUsageType_creativeCommons Content Usage Type = Creative Commons\r\n\t */\r\n\tfunction _contentUsageType_creativeCommons() internal view returns (bytes32) {\r\n\t\t(,,,bytes32 contentUsageType_creativeCommons,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_creativeCommons');\r\n\t\treturn contentUsageType_creativeCommons;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Content Usage Type = TAO Content setting\r\n\t * @return contentUsageType_taoContent Content Usage Type = T(AO) Content\r\n\t */\r\n\tfunction _contentUsageType_taoContent() internal view returns (bytes32) {\r\n\t\t(,,,bytes32 contentUsageType_taoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_taoContent');\r\n\t\treturn contentUsageType_taoContent;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Store the content information (content creation during staking)\r\n\t * @param _creator the address of the content creator\r\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\r\n\t * @param _fileSize The size of the file\r\n\t * @param _contentUsageType The content usage type, i.e AO Content, Creative Commons, or T(AO) Content\r\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\r\n\t * @return the ID of the content\r\n\t */\r\n\tfunction _storeContent(address _creator,\r\n\t\tstring memory _baseChallenge,\r\n\t\tuint256 _fileSize,\r\n\t\tbytes32 _contentUsageType,\r\n\t\taddress _taoId\r\n\t\t) internal returns (bytes32) {\r\n\t\taddress _creatorNameId = _nameFactory.ethAddressToNameId(_creator);\r\n\t\trequire (_creatorNameId != address(0));\r\n\t\treturn _aoContent.create(_creatorNameId, _baseChallenge, _fileSize, _contentUsageType, _taoId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Actual staking the content\r\n\t * @param _stakeOwner the address that stake the content\r\n\t * @param _contentId The ID of the content\r\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\r\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\r\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\r\n\t * @param _primordialAmount The amount of primordial ion to stake\r\n\t * @param _profitPercentage The percentage of profit the stake owner's media will charge\r\n\t * @return the newly created staked content ID\r\n\t */\r\n\tfunction _stakeContent(address _stakeOwner,\r\n\t\tbytes32 _contentId,\r\n\t\tuint256 _networkIntegerAmount,\r\n\t\tuint256 _networkFractionAmount,\r\n\t\tbytes8 _denomination,\r\n\t\tuint256 _primordialAmount,\r\n\t\tuint256 _profitPercentage\r\n\t\t) internal returns (bytes32) {\r\n\t\taddress _stakeOwnerNameId = _nameFactory.ethAddressToNameId(_stakeOwner);\r\n\t\trequire (_stakeOwnerNameId != address(0));\r\n\t\treturn _aoStakedContent.create(_stakeOwnerNameId, _contentId, _networkIntegerAmount, _networkFractionAmount, _denomination, _primordialAmount, _profitPercentage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add the distribution node info that hosts the content\r\n\t * @param _host the address of the host\r\n\t * @param _stakedContentId The ID of the staked content\r\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\r\n\t * @param _contentDatKey The dat key of the content\r\n\t * @param _metadataDatKey The dat key of the content's metadata\r\n\t * @return true on success\r\n\t */\r\n\tfunction _hostContent(address _host, bytes32 _stakedContentId, string memory _encChallenge, string memory _contentDatKey, string memory _metadataDatKey) internal returns (bool) {\r\n\t\taddress _hostNameId = _nameFactory.ethAddressToNameId(_host);\r\n\t\trequire (_hostNameId != address(0));\r\n\t\treturn _aoContentHost.create(_hostNameId, _stakedContentId, _encChallenge, _contentDatKey, _metadataDatKey);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoStakedContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setAOTreasuryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"}],\"name\":\"stakeCreativeCommonsContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoStakedContentAddress\",\"type\":\"address\"}],\"name\":\"setAOStakedContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoTreasuryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentAddress\",\"type\":\"address\"}],\"name\":\"setAOContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoEarningAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentHostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"},{\"name\":\"_profitPercentage\",\"type\":\"uint256\"}],\"name\":\"stakeAOContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getStakingMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getContentMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getEarningMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoEarningAddress\",\"type\":\"address\"}],\"name\":\"setAOEarningAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentHostAddress\",\"type\":\"address\"}],\"name\":\"setAOContentHostAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"},{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"stakeTAOContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"},{\"name\":\"_aoSettingAddress\",\"type\":\"address\"},{\"name\":\"_aoTreasuryAddress\",\"type\":\"address\"},{\"name\":\"_aoContentAddress\",\"type\":\"address\"},{\"name\":\"_aoStakedContentAddress\",\"type\":\"address\"},{\"name\":\"_aoContentHostAddress\",\"type\":\"address\"},{\"name\":\"_aoEarningAddress\",\"type\":\"address\"},{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AOContentFactory","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ec7aa72cb653b773b8c8c66a2e3e05669f4ef362000000000000000000000000bd314084ac5872598fdff2f31567084fc9c44270000000000000000000000000cec7c850458e5b966df0e7aa6f8ab374e1cc2c680000000000000000000000008db3ae7ad65b18282947ada2a6156a47b04cac9300000000000000000000000007afd974e8f5812c8c366318d379215475f42386000000000000000000000000264bf0625ac7aeb350952bc276ed388c50d37263000000000000000000000000e49b1cea729dc3468009f542fd650b0668a54b2500000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe","Library":"AOLibrary:1150d53299Abb7DE27464D01B626728f5c840229","SwarmSource":"bzzr://d98d9baed603900adc12330e41068580da8a2a5f3c2fdccd9d3d6ae54e17e85c"}]}