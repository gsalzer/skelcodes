{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/ethereum/EIPs/issues/179\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool); \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 totalSupply_;\r\n    mapping(address => uint256) balances;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } \r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// junil@cy2code.com\r\n// ----------------------------------------------------------------------------\r\ncontract OwnableToken is StandardToken {\r\n    uint256 public constant OPERATOR_MAX_COUNT = 10;\r\n    uint256 public operatorCount;\r\n\r\n    address public owner;\r\n    address[OPERATOR_MAX_COUNT] public operator;\r\n    mapping(address => string) operatorName;\r\n\r\n    event ChangeOwner(address indexed prevOwner, address indexed newOwner);\r\n    event AddOperator(address indexed Operator, string name);\r\n    event RemoveOperator(address indexed Operator);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        operatorCount = 0;\r\n\r\n        for (uint256 i = 0; i < OPERATOR_MAX_COUNT; i++) {\r\n            operator[i] = address(0);\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner); \r\n        _; \r\n    }\r\n    \r\n    modifier onlyOperator() {\r\n        require(msg.sender == owner || checkOperator(msg.sender) == true);\r\n        _;\r\n    }\r\n    \r\n    function checkOperator(address _operator) private view returns (bool) {\r\n        for (uint256 i = 0; i < OPERATOR_MAX_COUNT; i++) {\r\n            if (_operator == operator[i]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner returns (bool) {\r\n        require(_newOwner != address(0));\r\n        \r\n        emit ChangeOwner(owner, _newOwner);\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n    function addOperator(address _newOperator, string _name) external onlyOwner returns (bool) {\r\n        require(_newOperator != address(0));\r\n\r\n        for (uint256 i = 0; i < OPERATOR_MAX_COUNT; i++) {\r\n            if (_newOperator == operator[i]) {\r\n                revert();\r\n            }\r\n        }        \r\n        \r\n        for (i = 0; i < OPERATOR_MAX_COUNT; i++) {\r\n            if (operator[i] == address(0)) {\r\n                operator[i] = _newOperator;\r\n                operatorName[operator[i]] = _name;\r\n                operatorCount++;\r\n\r\n                emit AddOperator(_newOperator, _name);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function removeOperator(address _operator) external onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < OPERATOR_MAX_COUNT; i++) {\r\n            if (_operator == operator[i]) {\r\n                operatorName[operator[i]] = \"\";\r\n                operator[i] = address(0);\r\n                operatorCount--;\r\n\r\n                emit RemoveOperator(_operator);\r\n                return true;\r\n            }\r\n        }        \r\n\r\n        revert();\r\n    }\r\n\r\n    function getOperatorName(address _operator) external onlyOwner view returns (string) {\r\n        return operatorName[_operator];\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// junil@cy2code.com\r\n// ----------------------------------------------------------------------------\r\ncontract RestrictAmount is OwnableToken {\r\n    mapping(address => uint256) public keepAmount;\r\n\r\n    event LockAmount(address indexed addr, uint256 indexed amount);\r\n    event DecLockAmount(address indexed addr, uint256 indexed amount);\r\n    event UnlockAmount(address indexed addr);\r\n\r\n    function lockAmount(address _address, uint256 _amount) external onlyOperator returns (bool) {\r\n        keepAmount[_address] = _amount;\r\n\r\n        if (_amount > 0) emit LockAmount(_address, _amount);\r\n        else emit UnlockAmount(_address);\r\n    }\r\n\r\n    function decLockAmount(address _address, uint256 _amount) external onlyOperator returns (bool) {\r\n        uint256 amount = _amount;\r\n        if (amount > keepAmount[_address]) {\r\n            amount = keepAmount[_address];\r\n        }\r\n\r\n        keepAmount[_address] = keepAmount[_address].sub(amount);\r\n        emit DecLockAmount(_address, _amount);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// junil@cy2code.com\r\n// ----------------------------------------------------------------------------\r\ncontract LockAccount is OwnableToken {\r\n    enum LOCK_STATE { unlock, lock, timeLock }\r\n\r\n    struct lockInfo {\r\n        LOCK_STATE lock;\r\n        string reason;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(address => lockInfo) lockAccount;\r\n\r\n    event LockAddr(address indexed addr, string indexed reason, uint256 time);\r\n    event UnlockAddr(address indexed addr);\r\n    \r\n    modifier checkLockAccount {\r\n        if (   lockAccount[msg.sender].lock == LOCK_STATE.timeLock\r\n            && lockAccount[msg.sender].time <= now ) {\r\n            lockAccount[msg.sender].time = 0;\r\n            lockAccount[msg.sender].reason = \"\";\r\n            lockAccount[msg.sender].lock = LOCK_STATE.unlock;        \r\n            emit UnlockAddr(msg.sender);\r\n        }\r\n\r\n        require(   lockAccount[msg.sender].lock != LOCK_STATE.lock\r\n                && lockAccount[msg.sender].lock != LOCK_STATE.timeLock);\r\n        _;\r\n    }\r\n    \r\n    function lockAddr(address _address, string _reason, uint256 _untilTime) public onlyOperator returns (bool) {\r\n        require(_address != address(0));\r\n        require(_address != owner);\r\n        require(_untilTime == 0 || _untilTime > now);\r\n\r\n        if (_untilTime == 0) {\r\n            lockAccount[_address].lock = LOCK_STATE.lock;\r\n        }\r\n        else {\r\n            lockAccount[_address].lock = LOCK_STATE.timeLock;\r\n        }\r\n        \r\n        lockAccount[_address].reason = _reason;\r\n        lockAccount[_address].time = _untilTime;\r\n        emit LockAddr(_address, _reason, _untilTime);\r\n        return true;\r\n    }\r\n    \r\n    function unlockAddr(address _address) public onlyOwner returns (bool) {\r\n        lockAccount[_address].time = 0;\r\n        lockAccount[_address].reason = \"\";\r\n        lockAccount[_address].lock = LOCK_STATE.unlock;        \r\n        emit UnlockAddr(_address);\r\n        return true;\r\n    } \r\n\r\n    function getLockInfo(address _address) public returns (LOCK_STATE, string, uint256) {\r\n        if (\r\n               lockAccount[_address].lock == LOCK_STATE.timeLock\r\n            && lockAccount[_address].time <= now ) {\r\n            lockAccount[_address].time = 0;\r\n            lockAccount[_address].reason = \"\";\r\n            lockAccount[_address].lock = LOCK_STATE.unlock;        \r\n        }\r\n\r\n        return (  lockAccount[_address].lock\r\n                , lockAccount[_address].reason\r\n                , lockAccount[_address].time );\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// junil@cy2code.com\r\n// ----------------------------------------------------------------------------\r\ncontract TransferFromOperator is RestrictAmount, LockAccount {\r\n    function transferToMany(address[] _to, uint256[] _value) onlyOperator checkLockAccount external returns (bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        uint256 i;\r\n        uint256 totValue = 0;\r\n        for (i = 0; i < _to.length; i++) {\r\n            require(_to[i] != address(0));\r\n            totValue = totValue.add(_value[i]);\r\n        }\r\n        require(balances[msg.sender].sub(keepAmount[msg.sender]) >= totValue);\r\n\r\n        for (i = 0; i < _to.length; i++) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value[i]);\r\n            balances[_to[i]] = balances[_to[i]].add(_value[i]);\r\n            emit Transfer(msg.sender, _to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFromOperator(address _to, uint256 _value) onlyOperator checkLockAccount public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender].sub(keepAmount[msg.sender]) >= _value);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract Pausable is OwnableToken {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused); \r\n        _; \r\n    }\r\n    \r\n    modifier whenPaused() {\r\n        require(paused); \r\n        _; \r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract ControlledToken is Pausable, TransferFromOperator\r\n{\r\n    function transfer(address _to, uint256 _value) public whenNotPaused checkLockAccount returns (bool) {\r\n        require(balances[msg.sender].sub(keepAmount[msg.sender]) >= _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused checkLockAccount returns (bool) {\r\n        require(balances[_from].sub(keepAmount[_from]) >= _value);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused checkLockAccount onlyOperator returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused checkLockAccount onlyOperator returns (bool) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused checkLockAccount onlyOperator returns (bool) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract Burnable is OwnableToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[owner]);\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Transfer(owner, address(0), _value);\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n// ----------------------------------------------------------------------------\r\ncontract Mintable is OwnableToken {\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 value);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished); \r\n        _; \r\n    }\r\n\r\n    function mint(address _to, uint256 _value) onlyOwner canMint public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(address(0), _to, _value);\r\n        emit Mint(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract ManageSupplyToken is Mintable, Burnable {\r\n    /* ... */\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// junil@cy2code.com\r\n// ----------------------------------------------------------------------------\r\ncontract PPCToken is ControlledToken, ManageSupplyToken {\r\n    uint256 private constant INIT_SUPPLY = 1900000000;\r\n    string public name = \"PHILLIPS PAY COIN\";\r\n    string public symbol = \"PPC\";\r\n    uint256 public decimals = 1;\r\n    uint256 public initSupply = INIT_SUPPLY * (10 ** uint(decimals));\r\n\r\n    constructor() payable public {\r\n        totalSupply_ = initSupply;\r\n        balances[msg.sender] = totalSupply_;\r\n        emit Transfer(0x0, msg.sender, totalSupply_);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferToMany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"string\"},{\"name\":\"_untilTime\",\"type\":\"uint256\"}],\"name\":\"lockAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATOR_MAX_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LockAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnlockAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecLockAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnlockAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"RemoveOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PPCToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4273f471d9d7be0d1a3a0a39826f0a9211660de67b98f998ba2ae0627af15f0"}]}