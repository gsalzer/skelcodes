{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface tokenRecipient\r\n{\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\r\n}\r\n\r\n\r\ninterface IERC20 \r\n{\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC223Rtc \r\n{\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value,bytes _data);\r\n\tevent tFallback(address indexed _contract,address indexed _from, uint256 _value,bytes _data);\r\n\tevent tRetrive(address indexed _contract,address indexed _to, uint256 _value);\r\n\t\r\n\t\r\n\tmapping (address => bool) internal _tokenFull;\t\r\n\t//\tcontract => user => balance\r\n\tmapping (address => mapping (address => uint256)) internal _tokenInContract;\r\n\t\r\n\t/// @notice entry to receve tokens\r\n\tfunction tokenFallback(address _from, uint _value, bytes memory _data) public\r\n\t{\r\n        \t_tokenFull[msg.sender]=true;\r\n\t\t_tokenInContract[msg.sender][_from]=_value;\r\n\t\temit tFallback(msg.sender,_from, _value, _data);\r\n\t}\r\n\r\n\tfunction balanceOfToken(address _contract,address _owner) public view returns(uint256)\r\n\t{\r\n\t\tIERC20 cont=IERC20(_contract);\r\n\t\tuint256 tBal = cont.balanceOf(address(this));\r\n\t\tif(_tokenFull[_contract]==true)\t\t//full info\r\n\t\t{\r\n\t\t\tuint256 uBal=_tokenInContract[_contract][_owner];\t// user balans on contract\r\n\t\t\trequire(tBal >= uBal);\r\n\t\t\treturn(uBal);\r\n\t\t}\r\n\t\t\r\n\t\treturn(tBal);\r\n\t}\r\n\r\n\t\r\n\tfunction tokeneRetrive(address _contract, address _to, uint _value) public\r\n\t{\r\n\t\tIERC20 cont=IERC20(_contract);\r\n\t\t\r\n\t\tuint256 tBal = cont.balanceOf(address(this));\r\n\t\trequire(tBal >= _value);\r\n\t\t\r\n\t\tif(_tokenFull[_contract]==true)\t\t//full info\r\n\t\t{\r\n\t\t\tuint256 uBal=_tokenInContract[_contract][msg.sender];\t// user balans on contract\r\n\t\t\trequire(uBal >= _value);\r\n\t\t\t_tokenInContract[_contract][msg.sender]-=_value;\r\n\t\t}\r\n\t\t\r\n\t\tcont.transfer(_to, _value);\r\n\t\temit tRetrive(_contract, _to, _value);\r\n\t}\r\n\t\r\n\t//test contract is or not\r\n\tfunction isContract(address _addr) internal view returns (bool)\r\n\t{\r\n        \tuint length;\r\n        \tassembly\r\n        \t{\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (length>0);\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint _value, bytes memory _data) public returns(bool) \r\n\t{\r\n\t\tif(isContract(_to))\r\n        \t{\r\n\t\t\tERC223Rtc receiver = ERC223Rtc(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\t}\r\n        \t_transfer(msg.sender, _to, _value);\r\n        \temit Transfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;        \r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint _value) internal \r\n\t{\r\n\t\t// virtual must be defined later\r\n\t\tbytes memory empty;\r\n\t\temit Transfer(_from, _to, _value,empty);\r\n\t}\r\n}\r\n\r\ncontract FairSocialSystem is IERC20,ERC223Rtc\r\n{\r\n\t// Public variables of the token\r\n\tstring\tinternal _name;\r\n\tstring\tinternal _symbol;\r\n\tuint8\tinternal _decimals;\r\n\tuint256\tinternal _totalS;\r\n\r\n\t\r\n\t// Private variables of the token\r\n\taddress\tpayable internal _mainOwner;\r\n\tuint\tinternal _maxPeriodVolume;\t\t//max volume for period\r\n\tuint\tinternal _minPeriodVolume;\t\t//min volume for period\r\n\tuint\tinternal _currentPeriodVolume;\r\n\tuint\tinternal _startPrice;\r\n\tuint\tinternal _currentPrice;\r\n\tuint\tinternal _bonusPrice;\r\n\r\n\r\n\tuint16\tinternal _perUp;\t\t//percent / 2^20\r\n\tuint16\tinternal _perDown;\t\t//99 & 98 \r\n\tuint8\tinternal _bonus;\t\t//for test price up\r\n\tbool\tinternal _way;\t\t\t// buy or sell \r\n\r\n\r\n\t// This creates an array with all balances and allowance\r\n\tmapping (address => uint256) internal _balance;\r\n\tmapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Sell(address indexed owner, uint256 value);\r\n\tevent Buy (address indexed owner, uint256 value);\r\n\r\n\r\n\tconstructor() public \r\n\t{\r\n\t\t_name=\"Fair Social System\";\t// Set the name for display purposes\r\n\t\t_symbol=\"FSS\";\t\t\t// Set the symbol for display purposes\r\n\t\t_decimals=2;                 \t//start total = 128*1024*1024\r\n\t\t_totalS=13421772800;\t\t// Update total supply with the decimal amount\r\n\t\t_currentPrice=0.00000001 ether;\t\r\n\r\n\r\n\t\t_startPrice=_currentPrice;\r\n\t\t_bonusPrice=_currentPrice<<1;\t//*2\r\n\t\t_maxPeriodVolume=132864000;\t//for period\r\n\t\t_minPeriodVolume=131532800;\r\n\t\t_currentPeriodVolume=0;\r\n\r\n\r\n\t\t_mainOwner=0x394b570584F2D37D441E669e74563CD164142930;\r\n\t\t_balance[_mainOwner]=(_totalS*5)/100;\t// Give the creator 5% \r\n\t\t_perUp=10380;\t\t\t//percent / 2^20\r\n\t\t_perDown=10276;\t\t//99 & 98 \r\n\r\n\r\n\t\temit Transfer(address(this), _mainOwner, _balance[_mainOwner]);\r\n\t}\r\n\r\n\tfunction _calcPercent(uint mn1,uint mn2) internal pure returns (uint)\t//calc % by 2^20\r\n\t{\r\n\t\tuint res=mn1*mn2;\r\n\t\treturn res>>20;\r\n\t}\r\n\r\n\tfunction _initPeriod(bool way) internal\r\n\t{                   //main logic\r\n\t\tif(way)\t\t//true == sell\r\n\t\t{\r\n\t\t\t_totalS=_totalS-_maxPeriodVolume;\r\n\t\t\t_maxPeriodVolume=_minPeriodVolume;\r\n\t\t\t_minPeriodVolume=_minPeriodVolume-_calcPercent(_minPeriodVolume,_perUp);\r\n\r\n\t\t\t_currentPeriodVolume=_minPeriodVolume;\r\n\t\t\t_currentPrice=_currentPrice-_calcPercent(_currentPrice,_perUp);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_minPeriodVolume=_maxPeriodVolume;\r\n\t\t\t_maxPeriodVolume=_maxPeriodVolume+_calcPercent(_maxPeriodVolume,_perDown);\r\n\t\t\t_totalS=_totalS+_maxPeriodVolume;\r\n\t\t\t_currentPeriodVolume=0;\r\n\t\t\t_currentPrice=_currentPrice+_calcPercent(_currentPrice,_perDown);\r\n\t\t}\r\n\t\tif(_currentPrice>_bonusPrice)\t\t//bonus\r\n\t\t{\r\n\t\t\t_bonusPrice=_bonusPrice<<1;\t//next stage\r\n\t\t\tuint addBal=_totalS/100;\r\n\t\t\t_balance[_mainOwner]=_balance[_mainOwner]+addBal;\r\n\t\t\t_totalS=_totalS+addBal;\r\n\t\t\temit Transfer(address(this), _mainOwner, addBal);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getPrice() public view returns (uint,uint,uint) \r\n\t{\r\n\t\treturn (_currentPrice,_startPrice,_bonusPrice);\r\n\t}\r\n\r\n\tfunction getVolume() public view returns (uint,uint,uint) \r\n\t{\r\n\t\treturn (_currentPeriodVolume,_minPeriodVolume,_maxPeriodVolume);\r\n\t}\r\n\r\n\tfunction restartPrice() public\r\n\t{\r\n\t\trequire(address(msg.sender)==_mainOwner);\r\n\t\tif(_currentPrice<_startPrice)\r\n\t\t{\r\n\t\t\trequire(_balance[_mainOwner]>100);\r\n\t\t\t_currentPrice=address(this).balance/_balance[_mainOwner];\r\n\t\t\t_startPrice=_currentPrice;\r\n\t\t\t_bonusPrice=_startPrice<<1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//for all income\r\n\tfunction () external payable \r\n\t{        \r\n\t\tbuy();\r\n\t}\r\n\r\n\t// entry to buy tokens\r\n\tfunction buy() public payable\r\n\t{\r\n\t\t// reject contract buyer to avoid breaking interval limit\r\n\t\trequire(!isContract(msg.sender));\r\n\t\t\r\n\t\tuint ethAm=msg.value;\r\n\t\tuint amount=ethAm/_currentPrice;\r\n\t\tuint tAmount=0;\t\r\n\t\tuint cAmount=_maxPeriodVolume-_currentPeriodVolume;\t//for sell now \r\n\r\n\t\twhile (amount>=cAmount)\r\n\t\t{\r\n\t\t\ttAmount=tAmount+cAmount;\r\n\t\t\tethAm=ethAm-cAmount*_currentPrice;\r\n\t\t\t_initPeriod(false);\t//set new params from buy\r\n\t\t\tamount=ethAm/_currentPrice;\r\n\t\t\tcAmount=_maxPeriodVolume;\r\n\t\t}\r\n\t\tif(amount>0)\t\r\n\t\t{\r\n\t\t\t_currentPeriodVolume=_currentPeriodVolume+amount;\r\n\t\t\ttAmount=tAmount+amount;\r\n\t\t}\r\n\t\t_balance[msg.sender]+=tAmount;\r\n\t\temit Buy(msg.sender, tAmount);\t\t\r\n\t\temit Transfer(address(this), msg.sender, tAmount);\r\n\t}\r\n\r\n\r\n\t// entry to sell tokens\r\n\tfunction sell(uint _amount) public\r\n\t{\r\n\t\trequire(_balance[msg.sender] >= _amount);\r\n\r\n\t\tuint ethAm=0;\t\t//total \r\n\t\tuint tAmount=_amount;\t//for encounting\r\n//\t\taddress payble internal userAddr;\r\n\r\n\t\twhile (tAmount>=_currentPeriodVolume)\r\n\t\t{\r\n\t\t\tethAm=ethAm+_currentPeriodVolume*_currentPrice;\r\n\t\t\ttAmount=tAmount-_currentPeriodVolume;\r\n\t\t\t_initPeriod(true);\t//set new params from sell\r\n\t\t}\r\n\t\tif(tAmount>0)       //may be 0 \r\n\t\t{\r\n\t\t\t_currentPeriodVolume=_currentPeriodVolume-tAmount;\r\n\t\t\tethAm=ethAm+tAmount*_currentPrice;\r\n\t\t}\r\n\t\t\r\n//\t\tuserAddr=msg.sender;\r\n//\t\tuserAddr.transfer(ethAm);\r\n\t\t_balance[msg.sender] -= _amount;\r\n\t\tmsg.sender.transfer(ethAm);\r\n\t\temit Sell(msg.sender, _amount);\r\n\t\temit Transfer(msg.sender,address(this),_amount);\r\n\t}\r\n\r\n\r\n\r\n\t\r\n\t/**\r\n\t* Internal transfer, only can be called by this contract\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint _value) internal \r\n\t{\r\n\t\t// Prevent transfer to 0x0 address\r\n\t\trequire(_to != address(0x0));\r\n\t\t\r\n\t\t\r\n\t\t// Check if the sender has enough\r\n\t\trequire(_balance[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(_balance[_to] + _value > _balance[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint256 previousBalances = _balance[_from] + _balance[_to];\r\n\t\t// Subtract from the sender\r\n\t\t_balance[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\t_balance[_to] += _value;\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\trequire(_balance[_from] + _balance[_to] == previousBalances);\r\n\t\r\n\t\temit Transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n\t{\r\n\t\trequire(_allowed[_from][msg.sender] >= _value);\r\n        \r\n\t\t_allowed[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\temit Approval(_from, msg.sender, _allowed[_from][msg.sender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public returns(bool) \r\n\t{\r\n\t\tif (_to==address(this))\t\t//sell token \r\n\t\t{\r\n\t\t\tsell(_value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tbytes memory empty;\r\n\t\tif(isContract(_to))\r\n\t\t{\r\n\t\t\tERC223Rtc receiver = ERC223Rtc(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, empty);\r\n\t\t}\r\n\t\t\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool)\r\n\t{\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value))\r\n\t\t{\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns(bool)\r\n\t{\r\n\t\trequire(_spender != address(0));\r\n\t\t_allowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//check the amount of tokens that an owner allowed to a spender\r\n\tfunction allowance(address owner, address spender) public view returns (uint256)\r\n\t{\r\n\t\treturn _allowed[owner][spender];\r\n\t}\r\n\r\n\t//balance of the specified address with interest\r\n\tfunction balanceOf(address _addr) public view returns(uint256)\r\n\t{\r\n\t\treturn _balance[_addr];\r\n\t}\r\n\r\n    \t// Function to access total supply of tokens .\r\n\tfunction totalSupply() public view returns(uint256) \r\n\t{\r\n\t\treturn _totalS;\r\n\t}\r\n\r\n\r\n\t// the name of the token.\r\n\tfunction name() public view returns (string memory)\r\n\t{\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t//the symbol of the token\r\n\tfunction symbol() public view returns (string memory) \r\n\t{\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t//number of decimals of the token\r\n\tfunction decimals() public view returns (uint8) \r\n\t{\r\n\t\treturn _decimals;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokeneRetrive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tFallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tRetrive\",\"type\":\"event\"}]","ContractName":"FairSocialSystem","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://131c3bd1ebb78179f59f41b404d4fcc77a07a283026f51cdf625ab613e41767a"}]}