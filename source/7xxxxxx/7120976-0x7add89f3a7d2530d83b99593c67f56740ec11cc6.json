{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: contracts/PartialERC20.sol\r\n\r\n/**\r\n    * @title Standard ERC20 token\r\n    *\r\n    * @dev Implementation of the basic standard token.\r\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n    * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract PartialERC20 is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n        * @dev Total number of tokens in existence\r\n        */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n        * @dev Gets the balance of the specified address.\r\n        * @param owner The address to query the balance of.\r\n        * @return An uint256 representing the amount owned by the passed address.\r\n        */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n        * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n        * @param owner address The address which owns the funds.\r\n        * @param spender address The address which will spend the funds.\r\n        * @return A uint256 specifying the amount of tokens still available for the spender.\r\n        */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n        * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n        * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n        * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n        * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        * @param spender The address which will spend the funds.\r\n        * @param value The amount of tokens to be spent.\r\n        */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n        * approve should be called when allowed_[_spender] == 0. To increment\r\n        * allowed value is better to use this function to avoid 2 calls (and wait until\r\n        * the first transaction is mined)\r\n        * From MonolithDAO Token.sol\r\n        * @param spender The address which will spend the funds.\r\n        * @param addedValue The amount of tokens to increase the allowance by.\r\n        */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n        * approve should be called when allowed_[_spender] == 0. To decrement\r\n        * allowed value is better to use this function to avoid 2 calls (and wait until\r\n        * the first transaction is mined)\r\n        * From MonolithDAO Token.sol\r\n        * @param spender The address which will spend the funds.\r\n        * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n        */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * @dev Transfer token for a specified addresses\r\n        * @param from The address to transfer from.\r\n        * @param to The address to transfer to.\r\n        * @param value The amount to be transferred.\r\n        */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n        * @dev Internal function that mints an amount of the token and assigns it to\r\n        * an account. This encapsulates the modification of balances such that the\r\n        * proper events are emitted.\r\n        * @param account The account that will receive the created tokens.\r\n        * @param value The amount that will be created.\r\n        */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n        * @dev Internal function that burns an amount of the token of a given\r\n        * account.\r\n        * @param account The account whose tokens will be burnt.\r\n        * @param value The amount that will be burnt.\r\n        */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n        * @dev Internal function that burns an amount of the token of a given\r\n        * account, deducting from the sender's allowance for said account. Uses the\r\n        * internal burn function.\r\n        * @param account The account whose tokens will be burnt.\r\n        * @param value The amount that will be burnt.\r\n        */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n        value);\r\n        _burn(account, value);\r\n    }\r\n}\r\n\r\n// File: contracts/PrivateToken.sol\r\n\r\n/**  \r\n* @title Private Token\r\n* @dev This Private token used for early adoption for token holders, and have mechanism for migration to a production token.\r\n* @dev Migration Flow:\r\n*       Step1: call freeze()\r\n*       Step2: Loop mint for all holders on a production token.\r\n*/  \r\n\r\n\r\ncontract PrivateToken is PartialERC20, Ownable {\r\n    \r\n    bool public isFreezed = false;\r\n    \r\n    address[] public holders;\r\n    mapping(address => uint32) indexOfHolders;\r\n\r\n    event Freezed(address commander);\r\n    event RecordNewTokenHolder(address holder);\r\n    event RemoveTokenHolder(address holder);\r\n    \r\n    function numberOfTokenHolders() public view returns(uint32) {\r\n        return uint32(holders.length);\r\n    }\r\n\r\n    function isTokenHolder(address addr) public view returns(bool) {\r\n        return indexOfHolders[addr] > 0;        \r\n    }\r\n\r\n    modifier isNotFreezed() {\r\n        require(!isFreezed);\r\n        _;\r\n    }\r\n\r\n    function freeze() public onlyOwner {\r\n        isFreezed = true;\r\n\r\n        emit Freezed(msg.sender);\r\n    }\r\n\r\n    function _recordNewTokenHolder(address holder) internal {\r\n        // Record new holder\r\n        if (!isTokenHolder(holder)) {\r\n            holders.push(holder);\r\n            indexOfHolders[holder] = uint32(holders.length);\r\n            \r\n            emit RecordNewTokenHolder(holder);\r\n        }\r\n    }\r\n\r\n    function _removeTokenHolder(address holder) internal {\r\n        //check if holder exist\r\n        if (isTokenHolder(holder)) {\r\n\r\n            // delete holder in holders\r\n            uint32 index = indexOfHolders[holder] - 1;\r\n\r\n            if (holders.length > 1 && index != uint32(holders.length - 1)) {\r\n                //swap two elements of the array\r\n                address lastHolder = holders[holders.length - 1];\r\n                holders[holders.length - 1] = holders[index];\r\n                holders[index] = lastHolder;\r\n                \r\n                indexOfHolders[lastHolder] = indexOfHolders[holder];\r\n            }\r\n            holders.length--;\r\n            indexOfHolders[holder] = 0;\r\n            \r\n            emit RemoveTokenHolder(holder);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) \r\n        public \r\n        isNotFreezed\r\n        returns (bool) {\r\n\r\n        _transfer(msg.sender, to, value);\r\n\r\n        // Record new holder\r\n        _recordNewTokenHolder(to);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * @dev Transfer tokens from one address to another\r\n        * @param from address The address which you want to send tokens from\r\n        * @param to address The address which you want to transfer to\r\n        * @param value uint256 the amount of tokens to be transferred\r\n        */\r\n    function transferFrom(address from, address to, uint256 value) \r\n        public \r\n        isNotFreezed\r\n        returns (bool) {\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        \r\n        // Record new holder\r\n        _recordNewTokenHolder(to);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/KTFForTestMigration.sol\r\n\r\n/**\r\n    * @title Standard ERC20 token\r\n    *\r\n    * @dev Implementation of the basic standard token.\r\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n    * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract KTFForTestMigration is PartialERC20, Ownable {\r\n    // uint256 public totalSupply;  \r\n    string public name;  \r\n    string public symbol;  \r\n    uint32 public decimals; \r\n\r\n    PrivateToken public pktf;\r\n\r\n    uint32 public holderCount;\r\n\r\n    constructor(PrivateToken _pktf) public {  \r\n        symbol = \"KTF\";  \r\n        name = \"Katinrun Foundation\";  \r\n        decimals = 18;  \r\n        _totalSupply = 0;\r\n        \r\n        _balances[msg.sender] = _totalSupply;  \r\n\r\n        pktf = _pktf;\r\n    }\r\n\r\n    function migrateFromPKTF()\r\n        public\r\n        onlyOwner {\r\n\r\n        uint32 numberOfPKTFHolders = pktf.numberOfTokenHolders();\r\n        holderCount = numberOfPKTFHolders;\r\n        \r\n        for(uint256 i = 0; i < numberOfPKTFHolders; i++) {\r\n          address user = pktf.holders(i);\r\n          uint256 balance = pktf.balanceOf(user);\r\n\r\n          mint(user, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @dev Function to mint tokens\r\n        * @param to The address that will receive the minted tokens.\r\n        * @param value The amount of tokens to mint.\r\n        * @return A boolean that indicates if the operation was successful.\r\n        */\r\n    function mint(address to,uint256 value) \r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _mint(to, value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/MintableWithVoucher.sol\r\n\r\ncontract MintableWithVoucher is PrivateToken {\r\n    mapping(uint64 => bool) usedVouchers;\r\n    mapping(bytes32 => uint32) holderRedemptionCount;\r\n    \r\n    event VoucherUsed(\r\n        uint64 voucherID,\r\n        uint64 parityCode, \r\n        uint256 amount,  \r\n        uint256 expired,  \r\n        address indexed receiver, // use indexed for easy to filter event\r\n        bytes32 socialHash\r\n    );\r\n\r\n    function isVoucherUsed(uint64 _voucherID) public view returns (bool) {\r\n        return usedVouchers[_voucherID];\r\n    }\r\n    \r\n    function markVoucherAsUsed(uint64 _voucherID) private {\r\n        usedVouchers[_voucherID] = true;\r\n    }\r\n\r\n    function getHolderRedemptionCount(bytes32 socialHash) public view returns(uint32) {\r\n        return holderRedemptionCount[socialHash];\r\n    }\r\n\r\n    function isVoucherExpired(uint256 expired) public view returns(bool) {\r\n        return expired < now;\r\n    }\r\n\r\n    function expireTomorrow() public view returns (uint256) {\r\n        return now + 1 days;\r\n    }\r\n\r\n    function expireNow() public view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    // Implement voucher system\r\n    // * Amount is in unit of ether *\r\n    function redeemVoucher(\r\n        uint8 _v, \r\n        bytes32 _r, \r\n        bytes32 _s,\r\n        uint64 _voucherID,\r\n        uint64 _parityCode,\r\n        uint256 _amount,\r\n        uint256 _expired,\r\n        address _receiver,\r\n        bytes32 _socialHash\r\n    )  \r\n    public \r\n    isNotFreezed\r\n    {\r\n        require(!isVoucherUsed(_voucherID), \"Voucher has already been used.\");\r\n        require(!isVoucherExpired(_expired), \"Voucher is expired.\");\r\n\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n80\";\r\n        bytes memory encoded = abi.encodePacked(prefix,_voucherID, _parityCode, _amount, _expired);\r\n\r\n        require(ecrecover(keccak256(encoded), _v, _r, _s) == owner());\r\n\r\n        // Mint in unit of ether\r\n        _mint(_receiver, _amount * 10 ** 18);\r\n\r\n        // Record new holder\r\n        _recordNewTokenHolder(_receiver);\r\n\r\n        markVoucherAsUsed(_voucherID);\r\n\r\n        holderRedemptionCount[_socialHash]++;\r\n\r\n        emit VoucherUsed(_voucherID, _parityCode, _amount,  _expired, _receiver, _socialHash);\r\n    }\r\n    \r\n    /**\r\n        * @dev Function to mint tokens\r\n        * @param to The address that will receive the minted tokens.\r\n        * @param value The amount of tokens to mint.\r\n        * @return A boolean that indicates if the operation was successful.\r\n        */\r\n    function mint(address to,uint256 value) \r\n        public\r\n        onlyOwner // todo: or onlyMinter\r\n        isNotFreezed\r\n        returns (bool)\r\n    {\r\n        _mint(to, value);\r\n\r\n        // Record new holder\r\n        _recordNewTokenHolder(to);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * @dev Burns a specific amount of tokens. Only owner can burn themself.\r\n        * @param value The amount of token to be burned.\r\n        */\r\n    function burn(uint256 value) \r\n        public\r\n        onlyOwner\r\n        isNotFreezed {\r\n\r\n        _burn(msg.sender, value);\r\n        // _removeTokenHolder(msg.sender);\r\n    }\r\n\r\n    /**\r\n        * @dev Burns a specific amount of tokens. Only owner can burn themself.\r\n        * @param value The amount of token to be burned.\r\n        */\r\n    function burn(address account, uint256 value) \r\n        public\r\n        onlyOwner\r\n        isNotFreezed {\r\n\r\n        _burn(account, value);\r\n        // _removeTokenHolder(account);\r\n    }\r\n\r\n    /**\r\n        * @dev Internal function that burns an amount of the token of a given\r\n        * account.\r\n        * @param account The account whose tokens will be burnt.\r\n        * @param value The amount that will be burnt.\r\n        */\r\n    function burnFrom(address account, uint256 value) \r\n        public \r\n        isNotFreezed \r\n        {\r\n        require(account != address(0));\r\n\r\n        _burnFrom(account, value);\r\n\r\n        // if(balanceOf(account) == 0) {\r\n        //     _removeTokenHolder(account);\r\n        // }\r\n    }\r\n}\r\n\r\n// File: contracts/PrivateKatinrunFoudation.sol\r\n\r\ncontract PrivateKatinrunFoudation is MintableWithVoucher {\r\n    // uint256 public totalSupply;  \r\n    string public name;  \r\n    string public symbol;  \r\n    uint32 public decimals; \r\n\r\n    PrivateToken public pktf;\r\n    uint32 public holderCount;\r\n\r\n    constructor(PrivateToken _pktf) public {  \r\n        symbol = \"PKTF\";  \r\n        name = \"Private Katinrun Foundation\";  \r\n        decimals = 18;  \r\n        _totalSupply = 0;  \r\n        \r\n        _balances[msg.sender] = _totalSupply;  \r\n\r\n        if(_pktf != address(0)){\r\n            pktf = _pktf;\r\n            uint32 numberOfPKTFHolders = pktf.numberOfTokenHolders();\r\n            holderCount = numberOfPKTFHolders;\r\n            \r\n            for(uint256 i = 0; i < numberOfPKTFHolders; i++) {\r\n                address user = pktf.holders(i);\r\n                uint256 balance = pktf.balanceOf(user);\r\n\r\n                mint(user, balance);\r\n            }\r\n        }\r\n        \r\n        // emit Transfer(0x0, msg.sender, _totalSupply);  \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pktf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokenHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"expired\",\"type\":\"uint256\"}],\"name\":\"isVoucherExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expireNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voucherID\",\"type\":\"uint64\"}],\"name\":\"isVoucherUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_voucherID\",\"type\":\"uint64\"},{\"name\":\"_parityCode\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_expired\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_socialHash\",\"type\":\"bytes32\"}],\"name\":\"redeemVoucher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expireTomorrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"socialHash\",\"type\":\"bytes32\"}],\"name\":\"getHolderRedemptionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pktf\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voucherID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"parityCode\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expired\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"socialHash\",\"type\":\"bytes32\"}],\"name\":\"VoucherUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commander\",\"type\":\"address\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RecordNewTokenHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RemoveTokenHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PrivateKatinrunFoudation","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000059340948a91a1939a8d2519f75448ec651712d75","Library":"","SwarmSource":"bzzr://28998cb650e19f5992b63bc0eb1dc9d43e75b05a49adf3929449fffba61a218b"}]}