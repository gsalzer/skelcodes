{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// * etherdice.io\r\n//\r\n// * Ethereum smart contract.\r\n//\r\n// * Uses hybrid commit-reveal + block hash random number generation that is immune\r\n//   to tampering by players, house and miners. Apart from being fully transparent,\r\n//   this also allows arbitrarily high bets.\r\n//\r\ncontract EtherDice {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// *** Constants section\r\n\r\n    // Each bet is deducted 1% in favour of the house, but no less than some minimum.\r\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\r\n    // headroom for up to 10 Gwei prices.\r\n    uint constant HOUSE_EDGE_PERCENT = 1;\r\n\r\n    // There is minimum and maximum bets.\r\n    uint constant MIN_BET = 0.01 ether;\r\n    uint constant MAX_AMOUNT = 300000 ether;\r\n\r\n    // Modulo is a number of equiprobable outcomes in a game:\r\n    //  - 2 for coin flip\r\n    //  - 6 for dice\r\n    //  - 6*6 = 36 for double dice\r\n    //  - 100 for etheroll\r\n    //  - 37 for roulette\r\n    //  etc.\r\n    // It's called so because 256-bit entropy is treated like a huge integer and\r\n    // the remainder of its division by modulo is considered bet outcome.\r\n    uint constant MAX_MODULO = 100;\r\n\r\n    // For modulos below this threshold rolls are checked against a bit mask,\r\n    // thus allowing betting on any combination of outcomes. For example, given\r\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\r\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\r\n    // limit is used, allowing betting on any outcome in [0, N) range.\r\n    //\r\n    // The specific value is dictated by the fact that 256-bit intermediate\r\n    // multiplication result allows implementing population count efficiently\r\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of\r\n    // eight below 42.\r\n    uint constant MAX_MASK_MODULO = 40;\r\n\r\n    // This is a check on bet mask overflow.\r\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\r\n\r\n    // Some deliberately invalid address to initialize the secret signer with.\r\n    // Forces maintainers to invoke setSecretSigner before processing any bets.\r\n    address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\r\n    // past. Given that settleBet uses block hash of placeBet as one of\r\n    // complementary entropy sources, we cannot process bets older than this\r\n    // threshold. On rare occasions etherdice.io croupier may fail to invoke\r\n    // settleBet in this timespan due to technical issues or extreme Ethereum\r\n    // congestion; such bets can be refunded via invoking refundBet.\r\n    uint public betExpirationBlocks = 250;\r\n\r\n    // Standard contract ownership transfer.\r\n    address public owner;\r\n    address private nextOwner;\r\n\r\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\r\n    uint public maxProfit;\r\n\r\n    // The address corresponding to a private key used to sign placeBet commits.\r\n    address public secretSigner;\r\n\r\n    address public exchange = 0x29e737fe68F03CAD124d41b73E953Ae0B38FE5ab;\r\n\r\n    // Funds that are locked in potentially winning bets. Prevents contract from\r\n    // committing to bets it cannot pay out.\r\n    uint public lockedInBets;\r\n\r\n    // A structure representing a single bet.\r\n    struct Bet {\r\n        // Wager amount in wei.\r\n        uint amount;\r\n        // Modulo of a game.\r\n        uint8 modulo;\r\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\r\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\r\n        uint8 rollUnder;\r\n        // Block number of placeBet tx.\r\n        uint placeBlockNumber;\r\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\r\n        uint40 mask;\r\n        // Address of a gambler, used to pay out winning bets.\r\n        address gambler;\r\n    }\r\n\r\n    // Mapping from commits to all currently active & processed bets.\r\n    mapping (uint => Bet) bets;\r\n\r\n    // Croupier account.\r\n    address public croupier;\r\n\r\n    // This event is emitted in settleBet for user results and stats\r\n    event SettleBet(uint commit, uint dice, uint amount, uint diceWin);\r\n\r\n    // This event is emitted in refundBet\r\n    event Refund(uint commit, uint amount);\r\n\r\n    // This event is emitted in placeBet to record commit in the logs.\r\n    event Commit(uint commit);\r\n\r\n    // Constructor. Deliberately does not take any parameters.\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        secretSigner = DUMMY_ADDRESS;\r\n        croupier = DUMMY_ADDRESS;\r\n    }\r\n\r\n    // Standard modifier on methods invokable only by contract owner.\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    // Standard modifier on methods invokable only by contract owner.\r\n    modifier onlyCroupier {\r\n        require (msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\r\n        _;\r\n    }\r\n\r\n    // Standard contract ownership transfer implementation,\r\n    function approveNextOwner(address _nextOwner) external onlyOwner {\r\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\r\n        nextOwner = _nextOwner;\r\n    }\r\n\r\n    function acceptNextOwner() external {\r\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\r\n        owner = nextOwner;\r\n    }\r\n\r\n    // Fallback function deliberately left empty. It's primary use case\r\n    // is to top up the bank roll.\r\n    function () public payable {\r\n    }\r\n\r\n    // See comment for \"secretSigner\" variable.\r\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\r\n        secretSigner = newSecretSigner;\r\n    }\r\n\r\n    // Change the croupier address.\r\n    function setCroupier(address newCroupier) external onlyOwner {\r\n        croupier = newCroupier;\r\n    }\r\n\r\n    // Change max bet reward. Setting this to zero effectively disables betting.\r\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\r\n        require (_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\r\n        maxProfit = _maxProfit;\r\n    }\r\n\r\n    // Change bet expiration blocks. For the future.\r\n    function setBetExpirationBlocks(uint _betExpirationBlocks) public onlyOwner {\r\n        require (_betExpirationBlocks > 0, \"betExpirationBlocks should be a sane number.\");\r\n        betExpirationBlocks = _betExpirationBlocks;\r\n    }\r\n\r\n    // Funds withdrawal to reinvestment contract for token holders.\r\n    function withdrawFunds(uint withdrawAmount) external onlyOwner {\r\n        require (withdrawAmount <= address(this).balance, \"Increase amount larger than balance.\");\r\n        require (lockedInBets.add(withdrawAmount) <= address(this).balance, \"Not enough funds.\");\r\n        exchange.transfer(withdrawAmount);\r\n    }\r\n\r\n    function getBetInfoByReveal(uint reveal) external view returns (uint commit, uint amount, uint modulo, uint rollUnder, uint placeBlockNumber, uint mask, address gambler) {\r\n        commit = uint(keccak256(abi.encodePacked(reveal)));\r\n        (amount, modulo, rollUnder, placeBlockNumber, mask, gambler) = getBetInfo(commit);\r\n    }\r\n\r\n    function getBetInfo(uint commit) public view returns (uint amount, uint modulo, uint rollUnder, uint placeBlockNumber, uint mask, address gambler) {\r\n        Bet storage bet = bets[commit];\r\n        amount = bet.amount;\r\n        modulo = bet.modulo;\r\n        rollUnder = bet.rollUnder;\r\n        placeBlockNumber = bet.placeBlockNumber;\r\n        mask = bet.mask;\r\n        gambler = bet.gambler;\r\n    }\r\n\r\n    /// *** Betting logic\r\n\r\n    // Bet states:\r\n    //  amount == 0 && gambler == 0 - 'clean' (can place a bet)\r\n    //  amount != 0 && gambler != 0 - 'active' (can be settled or refunded)\r\n    //  amount == 0 && gambler != 0 - 'processed' (can clean storage)\r\n    //\r\n    //  NOTE: Storage cleaning is not implemented in this contract version; it will be added\r\n    //        with the next upgrade to prevent polluting Ethereum state with expired bets.\r\n\r\n    // Bet placing transaction - issued by the player.\r\n    //  betMask         - bet outcomes bit mask for modulo <= MAX_MASK_MODULO,\r\n    //                    [0, betMask) for larger modulos.\r\n    //  modulo          - game modulo.\r\n    //  commitLastBlock - number of the maximum block where \"commit\" is still considered valid.\r\n    //  commit          - Keccak256 hash of some secret \"reveal\" random number, to be supplied\r\n    //                    by the etherdice.io croupier bot in the settleBet transaction. Supplying\r\n    //                    \"commit\" ensures that \"reveal\" cannot be changed behind the scenes\r\n    //                    after placeBet have been mined.\r\n    //  recCode         - recommendation code. Record only the first recommendation relationship.\r\n    //  r, s            - components of ECDSA signature of (commitLastBlock, commit).\r\n    //\r\n    // Commit, being essentially random 256-bit number, is used as a unique bet identifier in\r\n    // the 'bets' mapping.\r\n    //\r\n    // Commits are signed with a block limit to ensure that they are used at most once - otherwise\r\n    // it would be possible for a miner to place a bet with a known commit/reveal pair and tamper\r\n    // with the blockhash. Croupier guarantees that commitLastBlock will always be not greater than\r\n    // placeBet block number plus betExpirationBlocks. See whitepaper for details.\r\n    function placeBet(uint betMask, uint modulo, uint commitLastBlock, uint commit, bytes32 r, bytes32 s, uint8 v) external payable {\r\n        // Check that the bet is in 'clean' state.\r\n        Bet storage bet = bets[commit];\r\n        require (bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\r\n\r\n        // Validate input data ranges.\r\n        require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\r\n        require (msg.value >= MIN_BET && msg.value <= MAX_AMOUNT, \"Amount should be within range.\");\r\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\r\n\r\n        // Check that commit is valid - it has not expired and its signature is valid.\r\n        require (block.number <= commitLastBlock && commitLastBlock <= block.number.add(betExpirationBlocks), \"Commit has expired.\");\r\n        require (secretSigner == ecrecover(keccak256(abi.encodePacked(uint40(commitLastBlock), commit)), v, r, s), \"ECDSA signature is not valid.\");\r\n\r\n        uint rollUnder;\r\n        //uint mask;\r\n\r\n        if (modulo <= MAX_MASK_MODULO) {\r\n            // Small modulo games specify bet outcomes via bit mask.\r\n            // rollUnder is a number of 1 bits in this mask (population count).\r\n            // This magic looking formula is an efficient way to compute population\r\n            // count on EVM for numbers below 2**40.\r\n            rollUnder = ((betMask.mul(POPCNT_MULT)) & POPCNT_MASK).mod(POPCNT_MODULO);\r\n            //mask = betMask;\r\n            bet.mask = uint40(betMask);\r\n        } else {\r\n            // Larger modulos specify the right edge of half-open interval of\r\n            // winning bet outcomes.\r\n            require (betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\r\n            rollUnder = betMask;\r\n        }\r\n\r\n        // Winning amount\r\n        uint possibleWinAmount;\r\n        possibleWinAmount = getDiceWinAmount(msg.value, modulo, rollUnder);\r\n\r\n        // Enforce max profit limit.\r\n        require (possibleWinAmount <= msg.value.add(maxProfit), \"maxProfit limit violation.\");\r\n\r\n        // Lock funds.\r\n        lockedInBets = lockedInBets.add(possibleWinAmount);\r\n\r\n        // Check whether contract has enough funds to process this bet.\r\n        require (lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\r\n\r\n        // Record commit in logs.\r\n        emit Commit(commit);\r\n\r\n        // Store bet parameters on blockchain.\r\n        bet.amount = msg.value;\r\n        bet.modulo = uint8(modulo);\r\n        bet.rollUnder = uint8(rollUnder);\r\n        bet.placeBlockNumber = block.number;\r\n        //bet.mask = uint40(mask);\r\n        bet.gambler = msg.sender;\r\n    }\r\n\r\n    // This is the method used to settle 99% of bets. To process a bet with a specific\r\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\r\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\r\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\r\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\r\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\r\n\r\n        Bet storage bet = bets[commit];\r\n\r\n        // Check that bet has not expired yet (see comment to betExpirationBlocks).\r\n        require (block.number > bet.placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\r\n        require (block.number <= bet.placeBlockNumber.add(betExpirationBlocks), \"Blockhash can't be queried by EVM.\");\r\n        require (blockhash(bet.placeBlockNumber) == blockHash);\r\n\r\n        // Settle bet using reveal and blockHash as entropy sources.\r\n        settleBetCommon(bet, reveal, commit, blockHash);\r\n    }\r\n\r\n    // Common settlement code for settleBet & settleBetUncleMerkleProof.\r\n    function settleBetCommon(Bet storage bet, uint reveal, uint commit, bytes32 entropyBlockHash) private {\r\n        // Fetch bet parameters into local variables (to save gas).\r\n        uint amount = bet.amount;\r\n        uint modulo = bet.modulo;\r\n        uint rollUnder = bet.rollUnder;\r\n        address gambler = bet.gambler;\r\n\r\n        // Check that bet is in 'active' state.\r\n        require (amount != 0, \"Bet should be in an 'active' state\");\r\n\r\n        // Move bet into 'processed' state already.\r\n        bet.amount = 0;\r\n\r\n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\r\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\r\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\r\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\r\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\r\n\r\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\r\n        uint dice = uint(entropy).mod(modulo);\r\n\r\n        uint diceWinAmount;\r\n        diceWinAmount = getDiceWinAmount(amount, modulo, rollUnder);\r\n\r\n        uint diceWin = 0;\r\n\r\n        // Determine dice outcome.\r\n        if (modulo <= MAX_MASK_MODULO) {\r\n            // For small modulo games, check the outcome against a bit mask.\r\n            if ((2 ** dice) & bet.mask != 0) {\r\n                diceWin = diceWinAmount;\r\n            }\r\n\r\n        } else {\r\n            // For larger modulos, check inclusion into half-open interval.\r\n            if (dice < rollUnder) {\r\n                diceWin = diceWinAmount;\r\n            }\r\n\r\n        }\r\n\r\n        // Unlock the bet amount, regardless of the outcome.\r\n        lockedInBets = lockedInBets.sub(diceWinAmount);\r\n\r\n        // Send the funds to gambler.\r\n        gambler.transfer(diceWin == 0 ? 1 wei : diceWin);\r\n\r\n        // Send results to user.\r\n        emit SettleBet(commit, dice, amount, diceWin);\r\n\r\n    }\r\n\r\n    // Refund transaction - return the bet amount of a roll that was not processed in a\r\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\r\n    // betExpirationBlocks comment above for details). In case you ever find yourself\r\n    // in a situation like this, just contact the etherdice.io support, however nothing\r\n    // precludes you from invoking this method yourself.\r\n    function refundBet(uint commit) external {\r\n        // Check that bet is in 'active' state.\r\n        Bet storage bet = bets[commit];\r\n        uint amount = bet.amount;\r\n\r\n        require (amount != 0, \"Bet should be in an 'active' state\");\r\n\r\n        // Check that bet has already expired.\r\n        require (block.number > bet.placeBlockNumber.add(betExpirationBlocks), \"Blockhash can't be queried by EVM.\");\r\n\r\n        // Move bet into 'processed' state, release funds.\r\n        bet.amount = 0;\r\n\r\n        uint diceWinAmount;\r\n        diceWinAmount = getDiceWinAmount(amount, bet.modulo, bet.rollUnder);\r\n\r\n        lockedInBets = lockedInBets.sub(diceWinAmount);\r\n\r\n        // Send the refund.\r\n        bet.gambler.transfer(amount);\r\n\r\n        // Send results to user.\r\n        emit Refund(commit, amount);\r\n    }\r\n\r\n    // Get the expected win amount after house edge is subtracted.\r\n    function getDiceWinAmount(uint amount, uint modulo, uint rollUnder) private pure returns (uint winAmount) {\r\n        require (0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\r\n\r\n        uint houseEdge = amount.mul(HOUSE_EDGE_PERCENT).div(100);\r\n\r\n        require (houseEdge <= amount, \"Bet doesn't even cover house edge.\");\r\n        winAmount = amount.sub(houseEdge).mul(modulo).div(rollUnder);\r\n    }\r\n\r\n    // This are some constants making O(1) population count in placeBet possible.\r\n    // See whitepaper for intuition and proofs behind it.\r\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\r\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\r\n    uint constant POPCNT_MODULO = 0x3F;\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"reveal\",\"type\":\"uint256\"}],\"name\":\"getBetInfoByReveal\",\"outputs\":[{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betExpirationBlocks\",\"type\":\"uint256\"}],\"name\":\"setBetExpirationBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"getBetInfo\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betExpirationBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reveal\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"diceWin\",\"type\":\"uint256\"}],\"name\":\"SettleBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"}]","ContractName":"EtherDice","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f95c0e2f45f1850d6fa24136d8891b5aa31cc5603d0456a8270e7280ac761427"}]}