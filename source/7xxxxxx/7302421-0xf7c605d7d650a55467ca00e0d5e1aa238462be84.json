{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Approvable is Ownable {\r\n    mapping(address => bool) private _approvedAddress;\r\n\r\n\r\n    modifier onlyApproved() {\r\n        require(isApproved());\r\n        _;\r\n    }\r\n\r\n    function isApproved() public view returns(bool) {\r\n        return _approvedAddress[msg.sender] || isOwner();\r\n    }\r\n\r\n    function approveAddress(address _address) public onlyOwner {\r\n        _approvedAddress[_address] = true;\r\n    }\r\n\r\n    function revokeApproval(address _address) public onlyOwner {\r\n        _approvedAddress[_address] = false;\r\n    }\r\n}\r\n\r\ncontract StoringCreationMeta {\r\n    uint public creationBlock;\r\n    uint public creationTime;\r\n\r\n    constructor() internal {\r\n        creationBlock = block.number;\r\n        creationTime = block.timestamp;\r\n    }\r\n}\r\n\r\ncontract UserRoles is StoringCreationMeta, Approvable {\r\n    struct Roles {\r\n        uint[] list;\r\n        mapping(uint => uint) position;\r\n    }\r\n    mapping(address => Roles) userRoles;\r\n\r\n    event RolesChanged(address indexed user, uint[] roles);\r\n    // Known roles:\r\n    // 1    - can create events\r\n\r\n    function setRole(address _user, uint _role) public onlyApproved {\r\n        _setRole(userRoles[_user], _role);\r\n        emit RolesChanged(_user, userRoles[_user].list);\r\n    }\r\n\r\n    function setRoles(address _user, uint[] memory _roles) public onlyApproved {\r\n        for(uint i = 0; i < _roles.length; ++i) {\r\n            _setRole(userRoles[_user], _roles[i]);\r\n        }\r\n        emit RolesChanged(_user, userRoles[_user].list);\r\n    }\r\n\r\n    function setRoleForUsers(address[] memory _users, uint _role) public onlyApproved {\r\n        for(uint i = 0; i < _users.length; ++i) {\r\n            _setRole(userRoles[_users[i]], _role);\r\n            emit RolesChanged(_users[i], userRoles[_users[i]].list);\r\n        }\r\n    }\r\n\r\n    function _setRole(Roles storage _roles, uint _role) private {\r\n        if (_roles.position[_role] != 0) {\r\n            // Already has role\r\n            return;\r\n        } else {\r\n            _roles.list.push(_role);\r\n            _roles.position[_role] = _roles.list.length;\r\n        }\r\n    }\r\n\r\n    function removeRole(address _user, uint _role) public onlyApproved {\r\n        _removeRole(userRoles[_user], _role);\r\n        emit RolesChanged(_user, userRoles[_user].list);\r\n    }\r\n\r\n    function removeRoles(address _user, uint[] memory _roles) public onlyApproved {\r\n        for(uint i = 0; i < _roles.length; ++i) {\r\n            _removeRole(userRoles[_user], _roles[i]);\r\n        }\r\n        emit RolesChanged(_user, userRoles[_user].list);\r\n    }\r\n\r\n    function _removeRole(Roles storage _roles, uint _role) private {\r\n        if (_roles.position[_role] == 0) {\r\n            // Role not present\r\n            return;\r\n        }\r\n\r\n        uint nIndex = _roles.position[_role] - 1;\r\n        uint lastIndex = _roles.list.length  - 1;\r\n        uint lastItem = _roles.list[lastIndex];\r\n\r\n        _roles.list[nIndex] = lastItem;\r\n        _roles.position[lastItem] = nIndex + 1;\r\n        _roles.position[_role] = 0;\r\n\r\n        _roles.list.pop();\r\n    }\r\n\r\n    function hasRole(address _user, uint _role) public view returns(bool) {\r\n        return userRoles[_user].position[_role] != 0;\r\n    }\r\n\r\n    function hasAnyRole(address _user, uint[] memory _roles) public view returns(bool) {\r\n        for(uint i = 0; i < _roles.length; ++i) {\r\n            if(hasRole(_user, _roles[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getUserRoles(address _user) public view returns(uint[] memory) {\r\n        return userRoles[_user].list;\r\n    }\r\n\r\n    function clearUserRoles(address _user) public onlyApproved {\r\n        Roles storage _roles = userRoles[_user];\r\n\r\n        for(uint i = 0; i < _roles.list.length; ++i) {\r\n            _roles.position[_roles.list[i]] = 0;\r\n        }\r\n\r\n        delete _roles.list;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_roles\",\"type\":\"uint256[]\"}],\"name\":\"removeRoles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"setRoleForUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_roles\",\"type\":\"uint256[]\"}],\"name\":\"hasAnyRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"setRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"removeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"clearUserRoles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_roles\",\"type\":\"uint256[]\"}],\"name\":\"setRoles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"approveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roles\",\"type\":\"uint256[]\"}],\"name\":\"RolesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UserRoles","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c70aa57609e931ca894c769805a3b5f57ffaa35bc25369c953c7b064f557abe"}]}