{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary ECStructs {\r\n\r\n    struct ECDSASig {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n}\r\n\r\ncontract ILotteryForCoke {\r\n    struct Ticket {\r\n        address payable ticketAddress;\r\n        uint256 period;\r\n        address payable buyer;\r\n        uint256 amount;\r\n        uint256 salt;\r\n    }\r\n\r\n    function buy(Ticket memory ticket, ECStructs.ECDSASig memory serverSig) public returns (bool);\r\n\r\n    function calcTicketPrice(Ticket memory ticket) public view returns (uint256 cokeAmount);\r\n}\r\n\r\ncontract IPledgeForCoke {\r\n\r\n    struct DepositRequest {\r\n        address payable depositAddress;\r\n        address payable from;\r\n        uint256 cokeAmount;\r\n        uint256 endBlock;\r\n        bytes32 billSeq;\r\n        bytes32 salt;\r\n    }\r\n\r\n    //the buyer should approve enough coke and then call this function\r\n    //or use 'approveAndCall' in Coke.sol in 1 request\r\n    function deposit(DepositRequest memory request, ECStructs.ECDSASig memory ecdsaSig) payable public returns (bool);\r\n\r\n    function depositCheck(DepositRequest memory request, ECStructs.ECDSASig memory ecdsaSig) public view returns (uint256);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath, mul\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath, div\");\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath, sub\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath, add\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath, mod\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IRequireUtils {\r\n    function requireCode(uint256 code) external pure;\r\n\r\n    function interpret(uint256 code) public pure returns (string memory);\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"nonReentrant\");\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0), \"ERC20 approve, spender can not be 0x00\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    //be careful, this is 'internal' function,\r\n    //you must add control permission to manipulate this function\r\n    function approveFrom(address owner, address spender, uint256 value) internal returns (bool) {\r\n        require(spender != address(0), \"ERC20 approveFrom, spender can not be 0x00\");\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(value <= _allowed[from][msg.sender], \"ERC20 transferFrom, allowance not enough\");\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(spender != address(0), \"ERC20 increaseAllowance, spender can not be 0x00\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(spender != address(0), \"ERC20 decreaseAllowance, spender can not be 0x00\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= _balances[from], \"ERC20 _transfer, not enough balance\");\r\n        require(to != address(0), \"ERC20 _transfer, to address can not be 0x00\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20 _mint, account can not be 0x00\");\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20 _burn, account can not be 0x00\");\r\n        require(value <= _balances[account], \"ERC20 _burn, not enough balance\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        require(value <= _allowed[account][msg.sender], \"ERC20 _burnFrom, allowance not enough\");\r\n\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n            value);\r\n        _burn(account, value);\r\n    }\r\n}\r\n\r\ncontract Coke is ERC20{\r\n    using SafeMath for uint256;\r\n\r\n    IRequireUtils rUtils;\r\n\r\n    //1 Coke = 10^18 Tin\r\n    string public name = \"COKE\";\r\n    string public symbol = \"COKE\";\r\n    uint256 public decimals = 18; //1:1\r\n\r\n    address public cokeAdmin;// admin has rights to mint and burn and etc.\r\n    mapping(address => bool) public gameMachineRecords;// game machine has permission to mint coke\r\n\r\n\r\n    uint256 public stagePercent;\r\n    uint256 public step;\r\n    uint256 public remain;\r\n    uint256 public currentDifficulty;//starts from 0\r\n    uint256 public currentStageEnd;\r\n\r\n    address team;\r\n    uint256 public teamRemain;\r\n    uint256 public unlockAllBlockNumber;\r\n    uint256 unlockNumerator;\r\n    uint256 unlockDenominator;\r\n\r\n    event Reward(address indexed account, uint256 amount, uint256 rawAmount);\r\n    event UnlockToTeam(address indexed account, uint256 amount, uint256 rawReward);\r\n\r\n    constructor (IRequireUtils _rUtils, address _cokeAdmin, uint256 _cap, address _team, uint256 _toTeam,\r\n        uint256 _unlockAllBlockNumber, address _bounty, uint256 _toBounty, uint256 _stagePercent,\r\n        uint256 _unlockNumerator, uint256 _unlockDenominator) /*ERC20Capped(_cap) */public {\r\n        rUtils = _rUtils;\r\n        cokeAdmin = _cokeAdmin;\r\n        unlockAllBlockNumber = _unlockAllBlockNumber;\r\n\r\n        team = _team;\r\n        teamRemain = _toTeam;\r\n\r\n        _mint(address(this), _toTeam);\r\n\r\n        _mint(_bounty, _toBounty);\r\n\r\n        stagePercent = _stagePercent;\r\n        step = _cap * _stagePercent / 100;\r\n        remain = _cap.sub(_toTeam).sub(_toBounty);\r\n\r\n        _mint(address(this), remain);\r\n\r\n        unlockNumerator = _unlockNumerator;\r\n        unlockDenominator=_unlockDenominator;\r\n        if (remain - step > 0) {\r\n            currentStageEnd = remain - step;\r\n        } else {\r\n            currentStageEnd = 0;\r\n        }\r\n        currentDifficulty = 0;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint256 value, bytes memory data) public nonReentrant returns (bool) {\r\n        require(approve(spender, value));\r\n\r\n        (bool success, bytes memory returnData) = spender.call(data);\r\n        rUtils.requireCode(success ? 0 : 501);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approveAndBuyLottery(ILotteryForCoke.Ticket memory ticket, ECStructs.ECDSASig memory serverSig) public nonReentrant returns (bool){\r\n        rUtils.requireCode(approve(ticket.ticketAddress, ILotteryForCoke(ticket.ticketAddress).calcTicketPrice(ticket)) ? 0 : 506);\r\n        rUtils.requireCode(ILotteryForCoke(ticket.ticketAddress).buy(ticket, serverSig) ? 0 : 507);\r\n        return true;\r\n    }\r\n\r\n    function approveAndPledgeCoke(IPledgeForCoke.DepositRequest memory depositRequest, ECStructs.ECDSASig memory serverSig) public nonReentrant returns (bool){\r\n        rUtils.requireCode(approve(depositRequest.depositAddress, depositRequest.cokeAmount) ? 0 : 508);\r\n        rUtils.requireCode(IPledgeForCoke(depositRequest.depositAddress).deposit(depositRequest, serverSig) ? 0 : 509);\r\n        return true;\r\n    }\r\n\r\n    function betReward(address _account, uint256 _amount) public mintPermission returns (uint256 minted){\r\n        uint256 input = _amount;\r\n        uint256 totalMint = 0;\r\n        while (input > 0) {\r\n\r\n            uint256 factor = 2 ** currentDifficulty;\r\n            uint256 discount = input / factor;\r\n            if (input % factor != 0) {\r\n                discount ++;\r\n            }\r\n\r\n            if (discount > remain - currentStageEnd) {\r\n                uint256 toMint = remain - currentStageEnd;\r\n                totalMint += toMint;\r\n                input = input - toMint * factor;\r\n                remain = currentStageEnd;\r\n            } else {\r\n                totalMint += discount;\r\n                input = 0;\r\n                remain = remain - discount;\r\n            }\r\n\r\n            //update to next stage\r\n            if (remain == currentStageEnd) {\r\n                if (currentStageEnd != 0) {\r\n                    currentDifficulty = currentDifficulty + 1;\r\n                    if (remain - step > 0) {\r\n                        currentStageEnd = remain - step;\r\n                    } else {\r\n                        currentStageEnd = 0;\r\n                    }\r\n                } else {\r\n                    input = 0;\r\n                }\r\n            }\r\n        }\r\n        _transfer(address(this), _account, totalMint);\r\n        emit Reward(_account, totalMint, _amount);\r\n\r\n        uint256 mintToTeam = totalMint * unlockDenominator / unlockNumerator;\r\n        if (teamRemain >= mintToTeam) {\r\n            teamRemain = teamRemain - mintToTeam;\r\n            _transfer(address(this), team, mintToTeam);\r\n            emit UnlockToTeam(team, mintToTeam, totalMint);\r\n        }\r\n\r\n        return totalMint;\r\n    }\r\n\r\n    \r\n    function setGameMachineRecords(address _input, bool _isActivated) public onlyCokeAdmin {\r\n        gameMachineRecords[_input] = _isActivated;\r\n    }\r\n\r\n    function unlockAllTeamCoke() public onlyCokeAdmin {\r\n        if (block.number > unlockAllBlockNumber) {\r\n            _transfer(address(this), team, teamRemain);\r\n            teamRemain = 0;\r\n            emit UnlockToTeam(team, teamRemain, 0);\r\n        }\r\n    }\r\n\r\n    modifier onlyCokeAdmin(){\r\n        rUtils.requireCode(msg.sender == cokeAdmin ? 0 : 503);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier mintPermission(){\r\n        rUtils.requireCode(gameMachineRecords[msg.sender] == true ? 0 : 505);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"},{\"name\":\"_isActivated\",\"type\":\"bool\"}],\"name\":\"setGameMachineRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockAllBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betReward\",\"outputs\":[{\"name\":\"minted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAllTeamCoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"depositAddress\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"cokeAmount\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"billSeq\",\"type\":\"bytes32\"},{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"depositRequest\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"serverSig\",\"type\":\"tuple\"}],\"name\":\"approveAndPledgeCoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameMachineRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cokeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"ticketAddress\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"ticket\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"serverSig\",\"type\":\"tuple\"}],\"name\":\"approveAndBuyLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rUtils\",\"type\":\"address\"},{\"name\":\"_cokeAdmin\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_toTeam\",\"type\":\"uint256\"},{\"name\":\"_unlockAllBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_toBounty\",\"type\":\"uint256\"},{\"name\":\"_stagePercent\",\"type\":\"uint256\"},{\"name\":\"_unlockNumerator\",\"type\":\"uint256\"},{\"name\":\"_unlockDenominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawReward\",\"type\":\"uint256\"}],\"name\":\"UnlockToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Coke","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002ad53d3d719ef728530c799ec690edeba57d417400000000000000000000000078caac9bfa4f3a2866898016bf1fc4a2fb77ff42000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000001cd8fbaf9279d2dc0ecc0d99fd01275421a3d04c0000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000b15e600000000000000000000000002a0a9592120c9c7b95f9b7531db36804890acf6600000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://78b84fbc066e10385d10fd5e46eb8832df1bd84c8011eb3d4f422f9606a61dc3"}]}