{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns(uint256);\r\n  function transfer(address to, uint256 value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns(uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n  function approve(address spender, uint256 value) public returns(bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Lockupable is Pausable {\r\n  function _unlockIfPosible(address who) internal;\r\n  function unlockAll() onlyOwner public returns(bool);\r\n  function lockupOf(address who) public constant returns(uint256[5]);\r\n  function distribute(address _to, uint256 _value, uint256 _amount1, uint256 _amount2, uint256 _amount3, uint256 _amount4) onlyOwner public returns(bool);\r\n}\r\n\r\n/**\r\n * @title ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Token is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns(bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _holder The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _holder) public constant returns(uint256 balance) {\r\n    return balances[_holder];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns(bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Lockupable token\r\n *\r\n * @dev ERC20Token modified with lockupable.\r\n **/\r\n\r\ncontract LockupableToken is ERC20Token, Lockupable {\r\n\r\n  uint64[] RELEASE = new uint64[](4);\r\n  mapping(address => uint256[4]) lockups;\r\n  mapping(uint => address) private holders;\r\n  uint _lockupHolders;\r\n  bool unlocked;\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns(bool) {\r\n    _unlockIfPosible(_to);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {\r\n    _unlockIfPosible(_from);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns(bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n  function balanceOf(address _holder) public constant returns(uint256 balance) {\r\n    uint256[5] memory amount = lockupOf(_holder);\r\n    return amount[0];\r\n  }\r\n  /**\r\n    * @dev Gets the lockup of the specified address.\r\n    * @param who address The address to query the the balance of.\r\n    * @return An lockupOf representing the amount owned by the passed address.\r\n   */\r\n  function lockupOf(address who) public constant  returns(uint256[5]){\r\n    uint256[5] memory amount;\r\n    amount[0] = balances[who];\r\n    for (uint i = 0; i < RELEASE.length; i++) {\r\n      amount[i + 1] = lockups[who][i];\r\n      if (now >= RELEASE[i]) {\r\n        amount[0] = amount[0].add(lockups[who][i]);\r\n        amount[i + 1] = 0;\r\n      }\r\n    }\r\n\r\n    return amount;\r\n  }\r\n  /**\r\n    * @dev update balance lockUpAmount\r\n    * @param who address The address updated the balances of.\r\n    */\r\n  function _unlockIfPosible(address who) internal{\r\n    if (now <= RELEASE[3] || !unlocked) {\r\n      uint256[5] memory amount = lockupOf(who);\r\n      balances[who] = amount[0];\r\n      for (uint i = 0; i < 4; i++) {\r\n        lockups[who][i] = amount[i + 1];\r\n      }\r\n    }\r\n  }\r\n  /**\r\n     * @dev unlock all after August 31 , 2019 GMT+9.\r\n     * \r\n     */\r\n  function unlockAll() onlyOwner public returns(bool){\r\n    if (now > RELEASE[3]) {\r\n      for (uint i = 0; i < _lockupHolders; i++) {\r\n        balances[holders[i]] = balances[holders[i]].add(lockups[holders[i]][0]);\r\n        balances[holders[i]] = balances[holders[i]].add(lockups[holders[i]][1]);\r\n        balances[holders[i]] = balances[holders[i]].add(lockups[holders[i]][2]);\r\n        balances[holders[i]] = balances[holders[i]].add(lockups[holders[i]][3]);\r\n        lockups[holders[i]][0] = 0;\r\n        lockups[holders[i]][1] = 0;\r\n        lockups[holders[i]][2] = 0;\r\n        lockups[holders[i]][3] = 0;\r\n      }\r\n      unlocked = true;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  /**\r\n    * @dev Distribute tokens from owner address to another , distribute for ICO and bounty campaign\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of  Amount1-type-tokens to be transferred\r\n    * ...\r\n    * @param _amount4 uint256 the amount of Amount1-type-tokens to be transferred\r\n    */\r\n  function distribute(address _to, uint256 _value, uint256 _amount1, uint256 _amount2, uint256 _amount3, uint256 _amount4) onlyOwner public returns(bool) {\r\n    require(_to != address(0));\r\n    _unlockIfPosible(msg.sender);\r\n    uint256 __total = 0;\r\n    __total = __total.add(_amount1);\r\n    __total = __total.add(_amount2);\r\n    __total = __total.add(_amount3);\r\n    __total = __total.add(_amount4);\r\n    __total = __total.add(_value);\r\n    balances[msg.sender] = balances[msg.sender].sub(__total);\r\n    balances[_to] = balances[_to].add(_value);\r\n    lockups[_to][0] = lockups[_to][0].add(_amount1);\r\n    lockups[_to][1] = lockups[_to][1].add(_amount2);\r\n    lockups[_to][2] = lockups[_to][2].add(_amount3);\r\n    lockups[_to][3] = lockups[_to][3].add(_amount4);\r\n\r\n    holders[_lockupHolders] = _to;\r\n    _lockupHolders++;\r\n\r\n    Transfer(msg.sender, _to, __total);\r\n    return true;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title BBXC Token\r\n *\r\n * @dev Implementation of BBXC Token based on the ERC20Token token.\r\n */\r\ncontract BBXCToken is LockupableToken {\r\n\r\n  function () {\r\n    //if ether is sent to this address, send it back.\r\n    revert();\r\n  }\r\n\r\n  /**\r\n  * Public variables of the token\r\n  */\r\n  string public constant name = 'Bluebelt Exchange Coin';\r\n  string public constant symbol = 'BBXC';\r\n  uint8 public constant decimals = 18;\r\n\r\n\r\n  /**\r\n   * @dev Constructor \r\n   */\r\n  function BBXCToken() {\r\n    _lockupHolders = 0;\r\n    RELEASE[0] = 1553958000; // March 30, 2019, GMT+9\r\n    RELEASE[1] = 1556550000; // April 29, 2019, GMT+9.\r\n    RELEASE[2] = 1559228400; //\tMay 30, 2019, GMT+9.\r\n    RELEASE[3] = 1567263600; // August 31 , 2019 GMT+9.\r\n  \r\n    totalSupply = 200000000 * (uint256(10) ** decimals);\r\n    unlocked = false;\r\n    balances[msg.sender] = totalSupply;\r\n    Transfer(address(0x0), msg.sender, totalSupply);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_amount1\",\"type\":\"uint256\"},{\"name\":\"_amount2\",\"type\":\"uint256\"},{\"name\":\"_amount3\",\"type\":\"uint256\"},{\"name\":\"_amount4\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockupOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BBXCToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://878cdfe88dee13de40cca39d68ffe7c458608f5df9b846823cf25d11fee832ce"}]}