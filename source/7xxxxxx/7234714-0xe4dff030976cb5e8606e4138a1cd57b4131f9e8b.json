{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n// we use solidity solidity 0.4.20 to work with oraclize (http://www.oraclize.it)\r\n// solidity versions > 0.4.20 are not supported by oraclize\r\n\r\n/*\r\nLucky Strike smart contracts version: 2.1\r\n*/\r\n\r\n/*\r\nThis smart contract is intended for entertainment purposes only. Cryptocurrency gambling is illegal in many jurisdictions and users should consult their legal counsel regarding the legal status of cryptocurrency gambling in their jurisdictions.\r\nSince developers of this smart contract are unable to determine which jurisdiction you reside in, you must check current laws including your local and state laws to find out if cryptocurrency gambling is legal in your area.\r\nIf you reside in a location where cryptocurrency gambling is illegal, please do not interact with this smart contract in any way and leave it  immediately.\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ORACLIZE_API\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\n//pragma solidity >=0.4.1 <=0.4.20;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n\r\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\r\n\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\r\n\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n\r\n    function useCoupon(string _coupon);\r\n\r\n    function setProofType(byte _proofType);\r\n\r\n    function setConfig(bytes32 _config);\r\n\r\n    function setCustomGasPrice(uint _gasPrice);\r\n\r\n    function randomDS_getSessionPubKeyHash() returns (bytes32);\r\n}\r\n\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\n\r\n/*\r\nBegin solidity-cborutils\r\n\r\nhttps://github.com/smartcontractkit/solidity-cborutils\r\n\r\nMIT License\r\n\r\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nlibrary Buffer {\r\n    struct buffer {\r\n        bytes buf;\r\n        uint capacity;\r\n    }\r\n\r\n    function init(buffer memory buf, uint capacity) internal constant {\r\n        if (capacity % 32 != 0) capacity += 32 - (capacity % 32);\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(0x40, add(ptr, capacity))\r\n        }\r\n    }\r\n\r\n    function resize(buffer memory buf, uint capacity) private constant {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(uint a, uint b) private constant returns (uint) {\r\n        if (a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte array to the end of the buffer. Reverts if doing so\r\n     *      would exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function append(buffer memory buf, bytes data) internal constant returns (buffer memory) {\r\n        if (data.length + buf.buf.length > buf.capacity) {\r\n            resize(buf, max(buf.capacity, data.length) * 2);\r\n        }\r\n\r\n        uint dest;\r\n        uint src;\r\n        uint len = data.length;\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Start address = buffer address + buffer length + sizeof(buffer length)\r\n            dest := add(add(bufptr, buflen), 32)\r\n        // Update buffer length\r\n            mstore(bufptr, add(buflen, mload(data)))\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Reverts if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function append(buffer memory buf, uint8 data) internal constant {\r\n        if (buf.buf.length + 1 > buf.capacity) {\r\n            resize(buf, buf.capacity * 2);\r\n        }\r\n\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Address = buffer address + buffer length + sizeof(buffer length)\r\n            let dest := add(add(bufptr, buflen), 32)\r\n            mstore8(dest, data)\r\n        // Update buffer length\r\n            mstore(bufptr, add(buflen, 1))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Reverts if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function appendInt(buffer memory buf, uint data, uint len) internal constant returns (buffer memory) {\r\n        if (len + buf.buf.length > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len) * 2);\r\n        }\r\n\r\n        uint mask = 256 ** len - 1;\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Address = buffer address + buffer length + sizeof(buffer length) + len\r\n            let dest := add(add(bufptr, buflen), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n        // Update buffer length\r\n            mstore(bufptr, add(buflen, len))\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\nlibrary CBOR {\r\n    using Buffer for Buffer.buffer;\r\n\r\n    uint8 private constant MAJOR_TYPE_INT = 0;\r\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n    uint8 private constant MAJOR_TYPE_STRING = 3;\r\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n    uint8 private constant MAJOR_TYPE_MAP = 5;\r\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n    function shl8(uint8 x, uint8 y) private constant returns (uint8) {\r\n        return x * (2 ** y);\r\n    }\r\n\r\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private constant {\r\n        if (value <= 23) {\r\n            buf.append(uint8(shl8(major, 5) | value));\r\n        } else if (value <= 0xFF) {\r\n            buf.append(uint8(shl8(major, 5) | 24));\r\n            buf.appendInt(value, 1);\r\n        } else if (value <= 0xFFFF) {\r\n            buf.append(uint8(shl8(major, 5) | 25));\r\n            buf.appendInt(value, 2);\r\n        } else if (value <= 0xFFFFFFFF) {\r\n            buf.append(uint8(shl8(major, 5) | 26));\r\n            buf.appendInt(value, 4);\r\n        } else if (value <= 0xFFFFFFFFFFFFFFFF) {\r\n            buf.append(uint8(shl8(major, 5) | 27));\r\n            buf.appendInt(value, 8);\r\n        }\r\n    }\r\n\r\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private constant {\r\n        buf.append(uint8(shl8(major, 5) | 31));\r\n    }\r\n\r\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal constant {\r\n        encodeType(buf, MAJOR_TYPE_INT, value);\r\n    }\r\n\r\n    function encodeInt(Buffer.buffer memory buf, int value) internal constant {\r\n        if (value >= 0) {\r\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\r\n        } else {\r\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(- 1 - value));\r\n        }\r\n    }\r\n\r\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal constant {\r\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\r\n        buf.append(value);\r\n    }\r\n\r\n    function encodeString(Buffer.buffer memory buf, string value) internal constant {\r\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\r\n        buf.append(bytes(value));\r\n    }\r\n\r\n    function startArray(Buffer.buffer memory buf) internal constant {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n    }\r\n\r\n    function startMap(Buffer.buffer memory buf) internal constant {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n    }\r\n\r\n    function endSequence(Buffer.buffer memory buf) internal constant {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n    }\r\n}\r\n\r\n/*\r\nEnd solidity-cborutils\r\n */\r\n\r\ncontract usingOraclize {\r\n    uint constant day = 60 * 60 * 24;\r\n    uint constant week = 60 * 60 * 24 * 7;\r\n    uint constant month = 60 * 60 * 24 * 30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofType_Android = 0x20;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if ((address(OAR) == 0) || (getCodeSize(address(OAR)) == 0))\r\n            oraclize_setNetwork(networkID_auto);\r\n\r\n        if (address(oraclize) != OAR.getAddress())\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns (bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) {//mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) {//ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) {//kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) {//rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) {//ethereum-bridge\r\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) {//ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) {//browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n\r\n    function oraclize_useCoupon(string code) oraclizeAPI internal {\r\n        oraclize.useCoupon(code);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns (uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i + 1]);\r\n            if ((b1 >= 97) && (b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 65) && (b1 <= 70)) b1 -= 55;\r\n            else if ((b1 >= 48) && (b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97) && (b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 65) && (b2 <= 70)) b2 -= 55;\r\n            else if ((b2 >= 48) && (b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1 * 16 + b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return - 1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return - 1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int) {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if (h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return - 1;\r\n        else if (h.length > (2 ** 128 - 1))\r\n            return - 1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while (subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if (subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return - 1;\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10 ** _b;\r\n        return mint;\r\n    }\r\n\r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    using CBOR for Buffer.buffer;\r\n    function stra2cbor(string[] arr) internal constant returns (bytes) {\r\n        Buffer.buffer memory buf;\r\n        Buffer.init(buf, 1024);\r\n        buf.startArray();\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            buf.encodeString(arr[i]);\r\n        }\r\n        buf.endSequence();\r\n        return buf.buf;\r\n    }\r\n\r\n    function ba2cbor(bytes[] arr) internal constant returns (bytes) {\r\n        Buffer.buffer memory buf;\r\n        Buffer.init(buf, 1024);\r\n        buf.startArray();\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            buf.encodeBytes(arr[i]);\r\n        }\r\n        buf.endSequence();\r\n        return buf.buf;\r\n    }\r\n\r\n    string oraclize_network_name;\r\n\r\n    function oraclize_setNetworkName(string _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal returns (string) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\r\n        if ((_nbytes == 0) || (_nbytes > 32)) throw;\r\n        // Convert from seconds to ledger timer ticks\r\n        _delay *= 10;\r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(_nbytes);\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes memory delay = new bytes(32);\r\n        assembly {\r\n            mstore(add(delay, 0x20), _delay)\r\n        }\r\n\r\n        bytes memory delay_bytes8 = new bytes(8);\r\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\r\n\r\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\r\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\r\n\r\n        bytes memory delay_bytes8_left = new bytes(8);\r\n\r\n        assembly {\r\n            let x := mload(add(delay_bytes8, 0x20))\r\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\r\n\r\n        }\r\n\r\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n        return queryId;\r\n    }\r\n\r\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\r\n        oraclize_randomDS_args[queryId] = commitment;\r\n    }\r\n\r\n    mapping(bytes32 => bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\r\n        bool sigok;\r\n        address signer;\r\n\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4 + (uint(dersig[3]) - 0x20);\r\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(dersig, offset + (uint(dersig[offset - 1]) - 0x20), 32, sigs_, 0);\r\n\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n\r\n\r\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\r\n        if (address(sha3(pubkey)) == signer) return true;\r\n        else {\r\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\r\n            return (address(sha3(pubkey)) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\r\n        bool sigok;\r\n\r\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(proof[sig2offset + 1]) + 2);\r\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\r\n\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(proof, 3 + 1, 64, appkey1_pubkey, 0);\r\n\r\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\r\n        tosign2[0] = 1;\r\n        //role\r\n        copyBytes(proof, sig2offset - 65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n\r\n        if (sigok == false) return false;\r\n\r\n\r\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n\r\n        bytes memory tosign3 = new bytes(1 + 65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(proof, 3, 65, tosign3, 1);\r\n\r\n        bytes memory sig3 = new bytes(uint(proof[3 + 65 + 1]) + 2);\r\n        copyBytes(proof, 3 + 65, sig3.length, sig3, 0);\r\n\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n\r\n        return sigok;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (_proof[2] != 1)) throw;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) throw;\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (_proof[2] != 1)) return 1;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) return 2;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal returns (bool){\r\n        bool match_ = true;\r\n\r\n        if (prefix.length != n_random_bytes) throw;\r\n\r\n        for (uint256 i = 0; i < n_random_bytes; i++) {\r\n            if (content[i] != prefix[i]) match_ = false;\r\n        }\r\n\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\r\n\r\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\r\n        uint ledgerProofLength = 3 + 65 + (uint(proof[3 + 65 + 1]) + 2) + 32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\r\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n\r\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2);\r\n        copyBytes(proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\r\n\r\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\r\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength + 32 + 8]))) return false;\r\n\r\n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\r\n        copyBytes(proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\r\n\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\r\n        copyBytes(proof, sig2offset - 64, 64, sessionPubkey, 0);\r\n\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)) {//unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[queryId];\r\n        } else return false;\r\n\r\n\r\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\r\n        copyBytes(proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\r\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\r\n\r\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false) {\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\r\n        }\r\n\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\r\n        uint minLength = length + toOffset;\r\n\r\n        if (to.length < minLength) {\r\n            // Buffer too small\r\n            throw;\r\n            // Should be a better way?\r\n        }\r\n\r\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint i = 32 + fromOffset;\r\n        uint j = 32 + toOffset;\r\n\r\n        while (i < (32 + fromOffset + length)) {\r\n            assembly {\r\n                let tmp := mload(add(from, i))\r\n                mstore(add(to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\r\n        // We do our own memory management here. Solidity uses memory offset\r\n        // 0x40 to store the current end of memory. We write past it (as\r\n        // writes are memory extensions), but don't update the offset so\r\n        // Solidity will reuse it. The memory used here is only needed for\r\n        // this context.\r\n\r\n        // FIXME: inline assembly can't access return values\r\n        bool ret;\r\n        address addr;\r\n\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, hash)\r\n            mstore(add(size, 32), v)\r\n            mstore(add(size, 64), r)\r\n            mstore(add(size, 96), s)\r\n\r\n        // NOTE: we can reuse the request memory because we deal with\r\n        //       the return code\r\n            ret := call(3000, 1, 0, size, 128, size, 32)\r\n            addr := mload(size)\r\n        }\r\n\r\n        return (ret, addr);\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (sig.length != 65)\r\n            return (false, 0);\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n\r\n        // Here we are loading the last 32 bytes. We exploit the fact that\r\n        // 'mload' will pad with zeroes if we overread.\r\n        // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n        // Alternative solution:\r\n        // 'byte' is not working due to the Solidity parser, so lets\r\n        // use the second best option, 'and'\r\n        // v := and(mload(add(sig, 65)), 255)\r\n        }\r\n\r\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\r\n        // to match the YP range of [27, 28]\r\n        //\r\n        // geth uses [0, 1] and some clients have followed. This might change, see:\r\n        //  https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27)\r\n            v += 27;\r\n\r\n        if (v != 27 && v != 28)\r\n            return (false, 0);\r\n\r\n        return safer_ecrecover(hash, v, r, s);\r\n    }\r\n\r\n}\r\n// end of ORACLIZE_API\r\n\r\n// =============== Lucky Strike ========================================================================================\r\n\r\ncontract LuckyStrikeTokens {\r\n\r\n    function totalSupply() constant returns (uint256);\r\n\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    function mint(address to, uint256 value, uint256 _invest) public returns (bool);\r\n\r\n    function tokenSaleIsRunning() public returns (bool);\r\n\r\n    function transferDividends() public payable;\r\n}\r\n\r\ncontract LuckyStrike is usingOraclize {\r\n\r\n    /* --- see: https://github.com/oraclize/ethereum-examples/blob/master/solidity/random-datasource/randomExample.sol */\r\n\r\n    // see: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n\r\n    address public owner;\r\n    address admin;\r\n    //\r\n    uint256 public ticketPriceInWei = 20000000000000000; // 0.02 ETH\r\n    uint256 public tokenPriceInWei = 150000000000000; // 0.00015 ETH\r\n    uint16 public maxTicketsToBuyInOneTransaction = 333; //\r\n    //\r\n    uint256 public eventsCounter;\r\n    //\r\n    mapping(uint256 => address) public theLotteryTicket;\r\n    uint256 public ticketsTotal;\r\n    //\r\n    address public kingOfTheHill;\r\n    uint256 public kingOfTheHillTicketsNumber;\r\n\r\n    mapping(address => uint256) public reward;\r\n\r\n    event rewardPaid(uint256 indexed eventsCounter, address indexed to, uint256 sum); //\r\n    function getReward() public {\r\n        require(reward[msg.sender] > 0);\r\n        msg.sender.transfer(reward[msg.sender]);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        rewardPaid(eventsCounter, msg.sender, reward[msg.sender]);\r\n        sum[affiliateRewards] = sum[affiliateRewards].sub(reward[msg.sender]);\r\n        reward[msg.sender] = 0;\r\n    }\r\n\r\n    // gas for oraclize_query:\r\n    uint256 public oraclizeCallbackGas = 230000; // amount of gas we want Oraclize to set for the callback function\r\n\r\n    // > to be able to read it from browser after updating\r\n    uint256 public currentOraclizeGasPrice; //\r\n    function oraclizeGetPrice() public returns (uint256){\r\n        currentOraclizeGasPrice = oraclize_getPrice(\"random\", oraclizeCallbackGas);\r\n        return currentOraclizeGasPrice;\r\n    }\r\n\r\n    function getContractsWeiBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    // mapping to keep sums on accounts (including 'income'):\r\n    mapping(uint8 => uint256) public sum;\r\n    uint8 public instantGame = 0;\r\n    uint8 public dailyJackpot = 1;\r\n    uint8 public weeklyJackpot = 2;\r\n    uint8 public monthlyJackpot = 3;\r\n    uint8 public yearlyJackpot = 4;\r\n    uint8 public income = 5;\r\n    uint8 public marketingFund = 6;\r\n    uint8 public affiliateRewards = 7; //\r\n    uint8 public playersBets = 8;\r\n\r\n    mapping(uint8 => uint256) public period; // in seconds\r\n\r\n    event withdrawalFromMarketingFund(uint256 indexed eventsCounter, uint256 sum); //\r\n    function withdrawFromMarketingFund() public {\r\n        require(msg.sender == owner);\r\n        owner.transfer(sum[marketingFund]);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        withdrawalFromMarketingFund(eventsCounter, sum[marketingFund]);\r\n\r\n        sum[marketingFund] = 0;\r\n    }\r\n\r\n    mapping(uint8 => bool) public jackpotPlayIsRunning; //\r\n\r\n    // allocation:\r\n    mapping(uint8 => uint16) public rate;\r\n\r\n    // JackpotCounters (starts with 0):\r\n    mapping(uint8 => uint256) jackpotCounter;\r\n    mapping(uint8 => uint256) public lastJackpotTime;  // unix time\r\n\r\n    // uint256 public lastDividendsPaymentTime; // unix time, for 'income' only\r\n\r\n    address public luckyStrikeTokensContractAddress;\r\n\r\n    LuckyStrikeTokens public luckyStrikeTokens;\r\n\r\n    /* --- constructor */\r\n\r\n    // (!) requires acces to Oraclize contract\r\n    // will fail on JavaScript VM\r\n    function LuckyStrike() public {\r\n\r\n        admin = msg.sender;\r\n\r\n        // sets the Ledger authenticity proof in the constructor\r\n        oraclize_setProof(proofType_Ledger);\r\n\r\n    }\r\n\r\n    function init(address _luckyStrikeTokensContractAddress) public payable {\r\n\r\n        require(ticketsTotal == 0);\r\n        require(msg.sender == admin);\r\n\r\n        owner = 0x0bBAb60c495413c870F8cABF09436BeE9fe3542F;\r\n\r\n        require(msg.value / ticketPriceInWei >= 1);\r\n\r\n        luckyStrikeTokensContractAddress = _luckyStrikeTokensContractAddress;\r\n\r\n        // should be updated every time we use it\r\n        // now we just get value to show in webapp\r\n        oraclizeGetPrice();\r\n\r\n        kingOfTheHill = msg.sender;\r\n        ticketsTotal = kingOfTheHillTicketsNumber = 1;\r\n        theLotteryTicket[1] = kingOfTheHill;\r\n\r\n        // initialize jackpot periods\r\n        // see: https://solidity.readthedocs.io/en/v0.4.20/units-and-global-variables.html#time-units\r\n        period[dailyJackpot] = 1 days;\r\n        period[weeklyJackpot] = 1 weeks;\r\n        period[monthlyJackpot] = 30 days;\r\n        period[yearlyJackpot] = 1 years;\r\n        // for testing:\r\n        //        period[dailyJackpot] = 60 * 1;\r\n        //        period[weeklyJackpot] = 60 * 3;\r\n        //        period[monthlyJackpot] = 60 * 5;\r\n        //        period[yearlyJackpot] = 60 * 7;\r\n\r\n        // set last block numbers and timestamps for jackpots:\r\n        for (uint8 i = dailyJackpot; i <= yearlyJackpot; i++) {\r\n            lastJackpotTime[i] = block.timestamp;\r\n        }\r\n\r\n        rate[instantGame] = 8500;\r\n        rate[dailyJackpot] = 500;\r\n        rate[weeklyJackpot] = 300;\r\n        rate[monthlyJackpot] = 100;\r\n        rate[yearlyJackpot] = 100;\r\n        rate[income] = 500;\r\n\r\n        luckyStrikeTokens = LuckyStrikeTokens(luckyStrikeTokensContractAddress);\r\n\r\n    }\r\n\r\n    /* --- Tokens contract information   */\r\n    function tokensTotalSupply() public view returns (uint256) {\r\n        return luckyStrikeTokens.totalSupply();\r\n    }\r\n\r\n    function tokensBalanceOf(address acc) public view returns (uint256){\r\n        return luckyStrikeTokens.balanceOf(acc);\r\n    }\r\n\r\n    function weiInTokensContract() public view returns (uint256){\r\n        return luckyStrikeTokens.balance;\r\n    }\r\n\r\n    function tokenSaleIsRunning() public view returns (bool) {\r\n        return luckyStrikeTokens.tokenSaleIsRunning();\r\n    }\r\n\r\n    event AllocationAdjusted(\r\n        uint256 indexed eventsCounter,\r\n        address by,\r\n        uint16 instantGame,\r\n        uint16 dailyJackpot,\r\n        uint16 weeklyJackpot,\r\n        uint16 monthlyJackpot,\r\n        uint16 yearlyJackpot,\r\n        uint16 income);\r\n\r\n    function adjustAllocation(\r\n        uint16 _instantGame,\r\n        uint16 _dailyJackpot,\r\n        uint16 _weeklyJackpot,\r\n        uint16 _monthlyJackpot,\r\n        uint16 _yearlyJackpot,\r\n        uint16 _income) public {\r\n\r\n        // only owner !!!\r\n        require(msg.sender == owner);\r\n\r\n        rate[instantGame] = _instantGame;\r\n        rate[dailyJackpot] = _dailyJackpot;\r\n        rate[weeklyJackpot] = _weeklyJackpot;\r\n        rate[monthlyJackpot] = _monthlyJackpot;\r\n        rate[yearlyJackpot] = _yearlyJackpot;\r\n        rate[income] = _income;\r\n\r\n        // check if provided %% amount to 10,000\r\n        uint16 _sum = 0;\r\n        for (uint8 i = instantGame; i <= income; i++) {\r\n            _sum = _sum + rate[i];\r\n        }\r\n\r\n        require(_sum == 10000);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        AllocationAdjusted(\r\n            eventsCounter,\r\n            msg.sender,\r\n            rate[instantGame],\r\n            rate[dailyJackpot],\r\n            rate[weeklyJackpot],\r\n            rate[monthlyJackpot],\r\n            rate[yearlyJackpot],\r\n            rate[income]\r\n        );\r\n\r\n    } // end of adjustAllocation\r\n\r\n    // this function calculates jackpots/income allocation and returns prize for the instant game\r\n    uint256 sumAllocatedInWeiCounter;\r\n\r\n    event SumAllocatedInWei(\r\n        uint256 indexed eventsCounter,\r\n        uint256 indexed sumAllocatedInWeiCounter,\r\n        address betOf,\r\n        uint256 bet, // 0\r\n        uint256 dailyJackpot, // 1\r\n        uint256 weeklyJackpot, // 2;\r\n        uint256 monthlyJackpot, // 3;\r\n        uint256 yearlyJackpot, // 4;\r\n        uint256 income,\r\n        uint256 affiliateRewards,\r\n        uint256 payToWinner\r\n    );\r\n\r\n    function allocateSum(uint256 _sum, address loser) private returns (uint256) {\r\n\r\n        // for event\r\n        // https://solidity.readthedocs.io/en/v0.4.24/types.html#allocating-memory-arrays\r\n        uint256[] memory jackpotsSumAllocation = new uint256[](5);\r\n\r\n        // jackpots:\r\n        for (uint8 i = dailyJackpot; i <= yearlyJackpot; i++) {\r\n            uint256 sumToAdd = _sum * rate[i] / 10000;\r\n            sum[i] = sum[i].add(sumToAdd);\r\n            // for event:\r\n            jackpotsSumAllocation[i] = sumToAdd;\r\n        }\r\n\r\n        // income before affiliate reward subtraction:\r\n        uint256 incomeSum = (_sum * rate[income]) / 10000;\r\n        // referrer reward:\r\n        uint256 refSum = 0;\r\n        if (referrer[loser] != address(0)) {\r\n\r\n            address referrerAddress = referrer[loser];\r\n\r\n            refSum = incomeSum / 2;\r\n            incomeSum = incomeSum.sub(refSum);\r\n\r\n            reward[referrerAddress] = reward[referrerAddress].add(refSum);\r\n\r\n            sum[affiliateRewards] = sum[affiliateRewards].add(refSum);\r\n        }\r\n\r\n        sum[income] = sum[income].add(incomeSum);\r\n\r\n        uint256 payToWinner = _sum * rate[instantGame] / 10000;\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        sumAllocatedInWeiCounter = sumAllocatedInWeiCounter + 1;\r\n        SumAllocatedInWei(\r\n            eventsCounter,\r\n            sumAllocatedInWeiCounter,\r\n            loser,\r\n            _sum,\r\n            jackpotsSumAllocation[1], //  dailyJackpot\r\n            jackpotsSumAllocation[2], // weeklyJackpot\r\n            jackpotsSumAllocation[3], // monthlyJackpot\r\n            jackpotsSumAllocation[4], //  yearlyJackpot\r\n            incomeSum,\r\n            refSum,\r\n            payToWinner\r\n        );\r\n\r\n        return payToWinner;\r\n    }\r\n\r\n    /* -------------- GAME: --------------*/\r\n\r\n    /* --- Instant Game ------- */\r\n    uint256 public instantGameCounter; // id's of the instant games\r\n    //\r\n    // to allow only one game for the given address simultaneously:\r\n    mapping(address => bool) public instantGameIsRunning;\r\n    //\r\n    mapping(address => uint256) public lastInstantGameBlockNumber; // for address\r\n    mapping(address => uint256) public lastInstantGameTicketsNumber; // for address\r\n\r\n    // first step for player is to make a bet:\r\n    uint256 public betCounter;\r\n\r\n    event BetPlaced(\r\n        uint256 indexed eventsCounter,\r\n        uint256 indexed betCounter,\r\n        address indexed player,\r\n        uint256 betInWei,\r\n        uint256 ticketsBefore,\r\n        uint256 newTickets\r\n    );\r\n\r\n    function placeABetInternal(uint value) private {\r\n\r\n        require(msg.sender != kingOfTheHill);\r\n\r\n        // only one game allowed for the address at the given moment:\r\n        require(!instantGameIsRunning[msg.sender]);\r\n\r\n        // number of new tickets to create;\r\n        uint256 newTickets = value / ticketPriceInWei;\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        betCounter = betCounter + 1;\r\n        BetPlaced(eventsCounter, betCounter, msg.sender, value, ticketsTotal, newTickets);\r\n\r\n        uint256 playerBetToPlace = newTickets.mul(ticketPriceInWei);\r\n\r\n        sum[playersBets] = sum[playersBets].add(playerBetToPlace);\r\n\r\n        require(newTickets > 0 && newTickets <= maxTicketsToBuyInOneTransaction);\r\n\r\n        uint256 newTicketsTotal = ticketsTotal.add(newTickets);\r\n        // new tickets included in jackpot games instantly:\r\n        for (uint256 i = ticketsTotal + 1; i <= newTicketsTotal; i++) {\r\n            theLotteryTicket[i] = msg.sender;\r\n        }\r\n\r\n        ticketsTotal = newTicketsTotal;\r\n\r\n        lastInstantGameTicketsNumber[msg.sender] = newTickets;\r\n        instantGameIsRunning[msg.sender] = true;\r\n        lastInstantGameBlockNumber[msg.sender] = block.number;\r\n    }\r\n\r\n    function placeABet() public payable {\r\n        placeABetInternal(msg.value);\r\n    }\r\n\r\n    mapping(address => address) public referrer;\r\n\r\n    function placeABetWithReferrer(address _referrer) public payable {\r\n        /* referrer: */\r\n        if (referrer[msg.sender] == 0x0000000000000000000000000000000000000000) {\r\n            referrer[msg.sender] = _referrer;\r\n        }\r\n        placeABetInternal(msg.value);\r\n    }\r\n\r\n    event Investment(\r\n        uint256 indexed eventsCounter, //.1\r\n        address indexed by, //............2\r\n        uint256 sum, //...................3\r\n        uint256 sumToMarketingFund, //....4\r\n        uint256 bet, //...................5\r\n        uint256 tokens //.................6\r\n    ); //\r\n    function investAndPlay() public payable {\r\n\r\n        // require( luckyStrikeTokens.tokenSaleIsRunning());\r\n        // < we will check this in luckyStrikeTokens.mint method\r\n\r\n        uint256 sumToMarketingFund = msg.value / 5;\r\n\r\n        sum[marketingFund] = sum[marketingFund].add(sumToMarketingFund);\r\n\r\n        uint256 bet = msg.value.sub(sumToMarketingFund);\r\n\r\n        placeABetInternal(bet);\r\n\r\n        // uint256 tokensToMint = msg.value / ticketPriceInWei;\r\n        // uint256 tokensToMint = bet / tokenPriceInWei;\r\n        uint256 tokensToMint = sumToMarketingFund / tokenPriceInWei;\r\n\r\n        // require(bet / ticketPriceInWei > 0); // > makes more complicated\r\n        luckyStrikeTokens.mint(msg.sender, tokensToMint, sumToMarketingFund);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        Investment(\r\n            eventsCounter, //......1\r\n            msg.sender, //.........2\r\n            msg.value, //..........3\r\n            sumToMarketingFund, //.4\r\n            bet, //................5\r\n            tokensToMint //........6\r\n        );\r\n    }\r\n\r\n    function investAndPlayWithReferrer(address _referrer) public payable {\r\n        if (referrer[msg.sender] == 0x0000000000000000000000000000000000000000) {\r\n            referrer[msg.sender] = _referrer;\r\n        }\r\n        investAndPlay();\r\n    }\r\n\r\n    /*\r\n        function invest() public payable {\r\n            //  require(luckyStrikeTokens.tokenSaleIsRunning());\r\n            // < we will check this in luckyStrikeTokens.mint method\r\n\r\n            sum[marketingFund] = sum[marketingFund].add(msg.value);\r\n\r\n            uint256 tokensToMint = msg.value / ticketPriceInWei;\r\n\r\n            // uint256 bonus = (tokensToMint / 100).mul(75);\r\n            uint256 bonus1part = tokensToMint / 2;\r\n            uint256 bonus2part = tokensToMint / 4;\r\n            uint256 bonus = bonus1part.add(bonus2part);\r\n\r\n            tokensToMint = tokensToMint.add(bonus);\r\n\r\n            // require(bet / ticketPriceInWei > 0); // > makes more complicated\r\n            luckyStrikeTokens.mint(\r\n                msg.sender,\r\n                tokensToMint,\r\n                msg.value // all sum > investment\r\n            );\r\n\r\n            eventsCounter = eventsCounter + 1;\r\n            Investment(\r\n                eventsCounter, //..1\r\n                msg.sender, //.....2\r\n                msg.value, //......3\r\n                msg.value, //......4\r\n                0, //..............5 (bet)\r\n                tokensToMint //....6\r\n            );\r\n        }\r\n\r\n        function investWithReferrer(address _referrer) public payable {\r\n            if (referrer[msg.sender] == 0x0000000000000000000000000000000000000000) {\r\n                referrer[msg.sender] = _referrer;\r\n            }\r\n            invest();\r\n        }\r\n    */\r\n\r\n    // second step in instant game:\r\n    event InstantGameResult (\r\n        uint256 indexed eventsCounter, //...0\r\n        uint256 gameId, // .................1\r\n        bool theBetPlayed, //...............2\r\n        address indexed challenger, //......3\r\n        address indexed king, //............4\r\n        uint256 kingsTicketsNumber, //......5\r\n        address winner, //..................6\r\n        uint256 prize, //...................7\r\n        uint256 ticketsInTheInstantGame, //.8\r\n        uint256 randomNumber, //............9\r\n        address triggeredBy //..............10\r\n    );\r\n\r\n    function play(address player) public {\r\n\r\n        require(instantGameIsRunning[player]);\r\n        require(lastInstantGameBlockNumber[player] < block.number);\r\n        // block number with the bet must be no more than 255 blocks before the current block\r\n        // or we get 0 as blockhash\r\n\r\n        instantGameCounter = instantGameCounter + 1;\r\n\r\n        uint256 playerBet = lastInstantGameTicketsNumber[player].mul(ticketPriceInWei);\r\n        // in any case playerBet should be subtracted sum[playerBets]\r\n        sum[playersBets] = sum[playersBets].sub(playerBet);\r\n\r\n        // TODO: recheck this >\r\n        if (block.number - lastInstantGameBlockNumber[player] > 250) {\r\n            eventsCounter = eventsCounter + 1;\r\n            InstantGameResult(\r\n                eventsCounter,\r\n                instantGameCounter,\r\n                false,\r\n                player,\r\n                address(0), // kingOfTheHill, // oldKingOfTheHill,\r\n                0,\r\n                address(0), // winner,\r\n                0, // prize,\r\n                0, // lastInstantGameTicketsNumber[player], // ticketsInTheInstantGame,\r\n                0, // randomNumber,\r\n                msg.sender // triggeredBy\r\n            );\r\n\r\n            // player.transfer(playerBet);\r\n            sum[income] = sum[income].add(playerBet);\r\n\r\n            lastInstantGameTicketsNumber[player] = 0;\r\n            instantGameIsRunning[player] = false;\r\n            return;\r\n        }\r\n\r\n        address oldKingOfTheHill = kingOfTheHill;\r\n        uint256 oldKingOfTheHillTicketsNumber = kingOfTheHillTicketsNumber;\r\n        uint256 ticketsInTheInstantGame = kingOfTheHillTicketsNumber.add(lastInstantGameTicketsNumber[player]);\r\n\r\n        // TODO: recheck this\r\n        bytes32 seed = keccak256(\r\n            block.blockhash(lastInstantGameBlockNumber[player]) // bytes32\r\n        );\r\n\r\n        uint256 seedToNumber = uint256(seed);\r\n\r\n        uint256 randomNumber = seedToNumber % ticketsInTheInstantGame;\r\n\r\n        // 0 never plays, and ticketsInTheInstantGame can not be returned by the function above\r\n        if (randomNumber == 0) {\r\n            randomNumber = ticketsInTheInstantGame;\r\n        }\r\n\r\n        uint256 prize;\r\n        address winner;\r\n        address loser;\r\n\r\n        if (randomNumber > kingOfTheHillTicketsNumber) {// challenger ('player') wins\r\n            winner = player;\r\n            loser = kingOfTheHill;\r\n\r\n            // new kingOfTheHill:\r\n            kingOfTheHill = player;\r\n            kingOfTheHillTicketsNumber = lastInstantGameTicketsNumber[player];\r\n        } else {// kingOfTheHill wins\r\n            winner = kingOfTheHill;\r\n            loser = player;\r\n        }\r\n\r\n        // prize = allocateSum(playerBet, loser, winner);\r\n        prize = allocateSum(playerBet, loser);\r\n\r\n        instantGameIsRunning[player] = false;\r\n\r\n        // pay prize to the winner\r\n        winner.transfer(prize);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        InstantGameResult(\r\n            eventsCounter,\r\n            instantGameCounter,\r\n            true,\r\n            player,\r\n            oldKingOfTheHill,\r\n            oldKingOfTheHillTicketsNumber,\r\n            winner,\r\n        // playerBet,\r\n            prize,\r\n            ticketsInTheInstantGame,\r\n            randomNumber,\r\n            msg.sender\r\n        );\r\n\r\n    }\r\n\r\n    // convenience function;\r\n    function playMyInstantGame() public {\r\n        play(msg.sender);\r\n    }\r\n\r\n    /* ----------- Jackpots: ------------ */\r\n\r\n    function requestRandomFromOraclize() private returns (bytes32 oraclizeQueryId)  {\r\n\r\n        require(msg.value >= oraclizeGetPrice());\r\n        // < to pay to oraclize\r\n\r\n        // call Oraclize\r\n        // uint N :\r\n        // number nRandomBytes between 1 and 32, which is the number of random bytes to be returned to the application.\r\n        // see: http://www.oraclize.it/papers/random_datasource-rev1.pdf\r\n        uint256 N = 32;\r\n        // number of seconds to wait before the execution takes place\r\n        uint delay = 0;\r\n        // this function internally generates the correct oraclize_query and returns its queryId\r\n        oraclizeQueryId = oraclize_newRandomDSQuery(delay, N, oraclizeCallbackGas);\r\n\r\n        // playJackpotEvent(msg.sender, msg.value, tx.gasprice, oraclizeQueryId);\r\n        return oraclizeQueryId;\r\n\r\n    }\r\n\r\n    // reminder (this defined above):\r\n    // mapping(uint8 => uint256) public period; // in seconds\r\n    // mapping(uint8 => uint256) public lastJackpotTime;  // unix time\r\n\r\n    mapping(bytes32 => uint8) public jackpot;\r\n\r\n    event JackpotPlayStarted(\r\n        uint256 indexed eventsCounter,\r\n        uint8 indexed jackpotType,\r\n        address startedBy,\r\n        bytes32 oraclizeQueryId\r\n    );//\r\n    // uint8 jackpotType\r\n    function startJackpotPlay(uint8 jackpotType) public payable {\r\n\r\n        require(msg.value >= oraclizeGetPrice());\r\n\r\n        require(jackpotType >= 1 && jackpotType <= 4);\r\n        require(!jackpotPlayIsRunning[jackpotType]);\r\n        require(\r\n        // block.timestamp (uint): current block timestamp as seconds since unix epoch\r\n            block.timestamp >= lastJackpotTime[jackpotType].add(period[jackpotType])\r\n        );\r\n\r\n        bytes32 oraclizeQueryId = requestRandomFromOraclize();\r\n        jackpot[oraclizeQueryId] = jackpotType;\r\n\r\n        jackpotPlayIsRunning[jackpotType] = true;\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        JackpotPlayStarted(eventsCounter, jackpotType, msg.sender, oraclizeQueryId);\r\n    }\r\n\r\n    uint256 public allJackpotsCounter;\r\n\r\n    event JackpotResult(\r\n        uint256 indexed eventsCounter,\r\n        uint256 allJackpotsCounter,\r\n        uint8 indexed jackpotType,\r\n        uint256 jackpotIdNumber,\r\n        uint256 prize,\r\n        address indexed winner,\r\n        uint256 randomNumberSeed,\r\n        uint256 randomNumber,\r\n        uint256 ticketsTotal\r\n    );\r\n\r\n    // the callback function is called by Oraclize when the result is ready\r\n    // the oraclize_randomDS_proofVerify modifier prevents an invalid proof to execute this function code:\r\n    // the proof validity is fully verified on-chain\r\n    function __callback(bytes32 _queryId, string _result, bytes _proof) public {\r\n\r\n        require(msg.sender == oraclize_cbAddress());\r\n\r\n        if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {\r\n            // the proof verification has failed, do we need to take any action here? (depends on the use case)\r\n            revert();\r\n        } else {\r\n\r\n            // find jackpot for this _queryId:\r\n\r\n            uint8 jackpotType = jackpot[_queryId];\r\n\r\n            require(jackpotPlayIsRunning[jackpotType]);\r\n\r\n            jackpotCounter[jackpotType] = jackpotCounter[jackpotType] + 1;\r\n\r\n            // select jackpot winner:\r\n\r\n            bytes32 hashOfTheRandomString = keccak256(_result);\r\n\r\n            uint256 randomNumberSeed = uint256(hashOfTheRandomString);\r\n\r\n            uint256 randomNumber = randomNumberSeed % ticketsTotal;\r\n\r\n            // there is no ticket # 0, and above function can not return number equivalent to 'ticketsTotal'\r\n            if (randomNumber == 0) {\r\n                randomNumber = ticketsTotal;\r\n            }\r\n\r\n            address winner = theLotteryTicket[randomNumber];\r\n\r\n            // transfer jackpot sum to the winner\r\n\r\n            winner.transfer(sum[jackpotType]);\r\n\r\n            // emit event:\r\n            eventsCounter = eventsCounter + 1;\r\n            allJackpotsCounter = allJackpotsCounter + 1;\r\n            JackpotResult(\r\n                eventsCounter,\r\n                allJackpotsCounter,\r\n                jackpotType,\r\n                jackpotCounter[jackpotType],\r\n                sum[jackpotType],\r\n                winner,\r\n                randomNumberSeed,\r\n                randomNumber,\r\n                ticketsTotal\r\n            );\r\n\r\n            // update information for this jackpot:\r\n\r\n            sum[jackpotType] = 0;\r\n\r\n            lastJackpotTime[jackpotType] = block.timestamp;\r\n\r\n            jackpotPlayIsRunning[jackpotType] = false;\r\n\r\n        }\r\n    } // end of function __callback\r\n\r\n    event DividendsSentToTokensContract(uint256 indexed eventsCounter, uint256 sum, address indexed triggeredBy);\r\n    // can be called by any address:\r\n    function payDividends() public returns (bool success){\r\n\r\n        // luckyStrikeTokensContractAddress.transfer(sum[income]);\r\n        luckyStrikeTokens.transferDividends.value(sum[income]);\r\n\r\n        eventsCounter = eventsCounter + 1;\r\n        DividendsSentToTokensContract(eventsCounter, sum[income], msg.sender);\r\n\r\n        sum[income] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getContractsWeiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInstantGameBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"investAndPlayWithReferrer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingOfTheHill\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_luckyStrikeTokensContractAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allJackpotsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"tokensBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiInTokensContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyStrikeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instantGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instantGame\",\"type\":\"uint16\"},{\"name\":\"_dailyJackpot\",\"type\":\"uint16\"},{\"name\":\"_weeklyJackpot\",\"type\":\"uint16\"},{\"name\":\"_monthlyJackpot\",\"type\":\"uint16\"},{\"name\":\"_yearlyJackpot\",\"type\":\"uint16\"},{\"name\":\"_income\",\"type\":\"uint16\"}],\"name\":\"adjustAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclizeCallbackGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFromMarketingFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theLotteryTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weeklyJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investAndPlay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyStrikeTokensContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"oraclizeGetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"income\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleIsRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"sum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"instantGameIsRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instantGameCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"jackpotType\",\"type\":\"uint8\"}],\"name\":\"startJackpotPlay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInstantGameTicketsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"placeABetWithReferrer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearlyJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playMyInstantGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastJackpotTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingOfTheHillTicketsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentOraclizeGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"jackpotPlayIsRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTicketsToBuyInOneTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playersBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeABet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"rewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"withdrawalFromMarketingFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instantGame\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"dailyJackpot\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"weeklyJackpot\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"monthlyJackpot\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"yearlyJackpot\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"income\",\"type\":\"uint16\"}],\"name\":\"AllocationAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sumAllocatedInWeiCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betOf\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dailyJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weeklyJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monthlyJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yearlyJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"income\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToWinner\",\"type\":\"uint256\"}],\"name\":\"SumAllocatedInWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"betCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketsBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTickets\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sumToMarketingFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Investment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"theBetPlayed\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"king\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kingsTicketsNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketsInTheInstantGame\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"InstantGameResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"jackpotType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"}],\"name\":\"JackpotPlayStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allJackpotsCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"jackpotType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"jackpotIdNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"randomNumberSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketsTotal\",\"type\":\"uint256\"}],\"name\":\"JackpotResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"DividendsSentToTokensContract\",\"type\":\"event\"}]","ContractName":"LuckyStrike","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e91c9de47ca60c3930b5cdc5fd6a4949da696d586b2b2e43dd9f14f579159fad"}]}