{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (_a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t\tuint256 c = _a * _b;\r\n\t\trequire(c / _a == _b);\r\n\r\n\r\n\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\trequire(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n\t\tuint256 c = _a / _b;\r\n\t\t// assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\trequire(_b <= _a);\r\n\t\tuint256 c = _a - _b;\r\n\r\n\r\n\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\tuint256 c = _a + _b;\r\n\t\trequire(c >= _a);\r\n\r\n\r\n\r\n\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n\taddress internal _owner;\r\n\r\n\r\n\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n\r\n\t/*\r\n\t* @dev The Ownable constructor sets the original `owner` o the contract to the sender account\r\n\t*/\r\n\tconstructor() public {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) onlyOwner() public {\r\n\t\trequire(newOwner != _owner);\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Transfers control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction getOwner() public constant returns(address) {\r\n\t\treturn (_owner);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n*/\r\ncontract Pausable is Ownable {\r\n\tevent Paused();\r\n\tevent Unpaused();\r\n\r\n\r\n\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is not paused.\r\n\t*/\r\n\tmodifier whenNotPaused() {\r\n\t\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is paused.\r\n\t*/\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev called by the owner to pause, triggers stopped state\r\n\t*/\r\n\tfunction pause() public onlyOwner whenNotPaused {\r\n\t\tpaused = true;\r\n\t\temit Paused();\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev called by the owner to unpause, returns to normal state\r\n\t*/\r\n\tfunction unpause() public onlyOwner whenPaused {\r\n\t\tpaused = false;\r\n\t\temit Unpaused();\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ninterface IERC20 {\r\n\tfunction totalSupply()\r\n\t\texternal view returns (uint256);\r\n\r\n\r\n\r\n\r\n\tfunction balanceOf(address _who)\r\n\t\texternal view returns (uint256);\r\n\r\n\r\n\r\n\r\n\tfunction allowance(address _owner, address _spender)\r\n\t\texternal view returns (uint256);\r\n\r\n\r\n\r\n\r\n\tfunction transfer(address _to, uint256 _value)\r\n\t\texternal returns (bool);\r\n\r\n\r\n\r\n\r\n\tfunction approve(address _spender, uint256 _value)\r\n\t\texternal returns (bool);\r\n\r\n\r\n\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)\r\n\t\texternal returns (bool);\r\n\r\n\r\n\r\n\r\n\tevent Transfer(\r\n\t\taddress indexed from,\r\n\t\taddress indexed to,\r\n\t\tuint256 value\r\n\t);\r\n\r\n\r\n\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n* Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\r\n\r\n\r\n\tmapping (address => uint256) internal balances_;\r\n\r\n\r\n\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed_;\r\n\r\n\r\n\r\n\r\n\tuint256 internal totalSupply_;\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn balances_[_owner];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param _owner address The address which owns the funds.\r\n\t* @param _spender address The address which will spend the funds.\r\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t*/\r\n\tfunction allowance(\r\n\t\taddress _owner,\r\n\t\taddress _spender\r\n\t )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn allowed_[_owner][_spender];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_value <= balances_[msg.sender]);\r\n\t\trequire(_to != address(0));\r\n\r\n\r\n\r\n\r\n\t\tbalances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n\t\tbalances_[_to] = balances_[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed_[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(_value <= balances_[_from]);\r\n\t\trequire(_value <= allowed_[_from][msg.sender]);\r\n\t\trequire(_to != address(0));\r\n\r\n\r\n\r\n\r\n\t\tbalances_[_from] = balances_[_from].sub(_value);\r\n\t\tbalances_[_to] = balances_[_to].add(_value);\r\n\t\tallowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Internal function that mints an amount of the token and assigns it to\r\n\t* an account. This encapsulates the modification of balances such that the\r\n\t* proper events are emitted.\r\n\t* @param _account The account that will receive the created tokens.\r\n\t* @param _amount The amount that will be created.\r\n\t*/\r\n\tfunction _mint(address _account, uint256 _amount) internal {\r\n\t\trequire(_account != 0);\r\n\t\ttotalSupply_ = totalSupply_.add(_amount);\r\n\t\tbalances_[_account] = balances_[_account].add(_amount);\r\n\t\temit Transfer(address(0), _account, _amount);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Pausable token\r\n* @dev ERC20 modified with pausable transfers.\r\n**/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n\r\n\r\n\r\n\tfunction transfer(\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t)\r\n\t\tpublic\r\n\t\twhenNotPaused\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t)\r\n\t\tpublic\r\n\t\twhenNotPaused\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction approve(\r\n\t\taddress _spender,\r\n\t\tuint256 _value\r\n\t)\r\n\t\tpublic\r\n\t\twhenNotPaused\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.approve(_spender, _value);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BetMatchToken is ERC20Pausable {\r\n\tstring public constant name = \"XBM\";\r\n\tstring public constant symbol = \"XBM\";\r\n\tuint8 public constant decimals = 18;\r\n\r\n\r\n\r\n\r\n\tuint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n\r\n\r\n\r\n\r\n\tconstructor () public {\r\n\t\ttotalSupply_ = INITIAL_SUPPLY;\r\n\t\tbalances_[msg.sender] = INITIAL_SUPPLY;\r\n\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BetMatchToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56cda195836f008caafe91d10b1bbf7425607e36de43475f9954df4a16f477b4"}]}