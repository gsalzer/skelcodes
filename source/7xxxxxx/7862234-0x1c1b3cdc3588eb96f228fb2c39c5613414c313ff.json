{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title PriceReceiver interface\r\n * @dev Inherit from PriceReceiver to use the PriceProvider contract.\r\n */\r\ncontract PriceReceiver {\r\n\r\n    address public ethPriceProvider;\r\n\r\n    modifier onlyEthPriceProvider() {\r\n        require(msg.sender == ethPriceProvider);\r\n        _;\r\n    }\r\n\r\n    function receiveEthPrice(uint256 newPrice) external;\r\n\r\n    function setEthPriceProvider(address provider) external;\r\n\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale contract\r\n * @author https://grox.solutions\r\n */\r\ncontract Crowdsale is ReentrancyGuard, PriceReceiver, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    // Price of 1 ether in USD Cents\r\n    uint256 private _currentETHPrice;\r\n\r\n    // How many token units a buyer gets per 1 USD Cent\r\n    uint256 private _rate;\r\n\r\n    // Minimum amount of wei to invest\r\n    uint256 private _minimum = 0.5 ether;\r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event NewETHPrice(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n     * @param rate Number of token units a buyer gets per wei\r\n     * @param initialETHPrice Price of Ether in USD Cents\r\n     * @param wallet Address where collected funds will be forwarded to\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor (uint256 rate, uint256 initialETHPrice, address payable wallet, IERC20 token, address initialOwner) public Ownable(initialOwner) {\r\n        require(rate != 0, \"Rate is 0\");\r\n        require(initialETHPrice != 0, \"Initial ETH price is 0\");\r\n        require(wallet != address(0), \"Wallet is the zero address\");\r\n        require(address(token) != address(0), \"Token is the zero address\");\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase\r\n     * This function has a non-reentrancy guard\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        require(beneficiary != address(0), \"Beneficiary is the zero address\");\r\n        require(msg.value >= _minimum, \"Wei amount is less than 0.5 ether\");\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _wallet.transfer(weiAmount);\r\n\r\n        _token.transfer(beneficiary, tokens);\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens to recieve for a given amount of wei\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n        return weiAmount.mul(_currentETHPrice).div(1 ether).mul(_rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the rate.\r\n     * Available only to the owner.\r\n     * @param newRate new value.\r\n     */\r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        require(newRate != 0, \"New rate is 0\");\r\n\r\n        _rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the PriceProvider address.\r\n     * Available only to the owner.\r\n     * @param provider new address.\r\n     */\r\n    function setEthPriceProvider(address provider) external onlyOwner {\r\n        require(provider != address(0), \"Provider is the zero address\");\r\n\r\n        ethPriceProvider = provider;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the address to receive ether.\r\n     * Available only to the owner.\r\n     * @param newWallet new address.\r\n     */\r\n    function setWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"New wallet is the zero address\");\r\n\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the ETH Price.\r\n     * Available only to the owner and to the PriceProvider.\r\n     * @param newPrice amount of USD Cents for 1 ether.\r\n     */\r\n    function receiveEthPrice(uint256 newPrice) external {\r\n        require(newPrice != 0, \"New price is 0\");\r\n        require(msg.sender == ethPriceProvider || msg.sender == _owner, \"Sender has no permission\");\r\n\r\n        emit NewETHPrice(_currentETHPrice, newPrice);\r\n        _currentETHPrice = newPrice;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the price of 1 ether in USD Cents.\r\n     */\r\n    function currentETHPrice() public view returns (uint256) {\r\n        return _currentETHPrice;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to invest.\r\n     */\r\n    function minimum() public view returns (uint256) {\r\n        return _minimum;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"receiveEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setEthPriceProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentETHPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"initialETHPrice\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NewETHPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000697800000000000000000000000092b420b99b7ab359e54651ff61fd3a016ab21bd60000000000000000000000004c43d60e14085c4ac30f1e6ee826d214a743f3a3000000000000000000000000b7084b977a5cea475648cf42cf4ba8d22f04b841","Library":"","SwarmSource":"bzzr://7fab6795e15dd0683bbd009a0ec8ed9c6d2891bdc1af682a03f475a592f5f2ec"}]}