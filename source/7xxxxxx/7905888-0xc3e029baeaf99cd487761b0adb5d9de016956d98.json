{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract User is Ownable {\r\n\r\n    event UserRegistered(address internal_wallet_address, address external_wallet_address, address referrer, bytes32 nick_name, bytes32 geo_location);\r\n\r\n    event UserNickNameUpdated(address external_wallet_address, bytes32 old_nick_name, bytes32 new_nick_name);\r\n\r\n    event UserGeoLocationUpdated(address external_wallet_address, bytes32 old_geo_location, bytes32 new_geo_location);\r\n\r\n    struct UserDetails {\r\n        bytes32 nick_name;\r\n        address payable referrer;\r\n        bytes32 geo_location;\r\n    }\r\n\r\n    // address details\r\n    mapping(address => UserDetails) public users;\r\n\r\n    // mapping of internal wallet to external wallet\r\n    mapping(address => address) public internal_to_external;\r\n\r\n    // mapping of external wallet to internal wallet\r\n    mapping(address => address) public external_to_internal;\r\n\r\n    // all referees for an address\r\n    mapping(address => address[]) public referees;\r\n\r\n    constructor() public {\r\n        UserDetails memory root = UserDetails({\r\n            nick_name : \"new\",\r\n            referrer : address(0),\r\n            geo_location : \"51.507351,-0.127758\" // London\r\n            });\r\n        users[msg.sender] = root;\r\n        internal_to_external[msg.sender] = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev method to register users, can be called by admin only\r\n     * @param _internal_wallet_addresses internal wallet addresses array\r\n     * @param _external_wallet_addresses external wallet addresses array\r\n     * @param _referrers referrers array\r\n     * @param _nick_names nick names array\r\n     * @param _geo_locations geo locations array\r\n     */\r\n    function registerUsers(\r\n        address payable[] calldata _internal_wallet_addresses,\r\n        address payable[] calldata _external_wallet_addresses,\r\n        address payable[] calldata _referrers,\r\n        bytes32[] calldata _nick_names,\r\n        bytes32[] calldata _geo_locations) external onlyOwner() {\r\n        for (uint256 i; i < _internal_wallet_addresses.length; i++) {\r\n            UserDetails memory ud = UserDetails({\r\n                nick_name : _nick_names[i],\r\n                referrer : _referrers[i],\r\n                geo_location : _geo_locations[i]\r\n                });\r\n            users[_external_wallet_addresses[i]] = ud;\r\n            referees[_referrers[i]].push(_external_wallet_addresses[i]);\r\n            internal_to_external[_internal_wallet_addresses[i]] = _external_wallet_addresses[i];\r\n            external_to_internal[_external_wallet_addresses[i]] = _internal_wallet_addresses[i];\r\n            emit UserRegistered(_internal_wallet_addresses[i], _external_wallet_addresses[i], _referrers[i], _nick_names[i], _geo_locations[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev method to register user, can be called by admin only\r\n     * @param _internal_wallet_address internal wallet address\r\n     * @param _external_wallet_address external wallet address\r\n     * @param _referrer referrer\r\n     * @param _nick_name nick name\r\n     * @param _geo_location geo location\r\n     */\r\n    function registerUser(\r\n        address payable _internal_wallet_address,\r\n        address payable _external_wallet_address,\r\n        address payable _referrer,\r\n        bytes32 _nick_name,\r\n        bytes32 _geo_location) external onlyOwner() {\r\n        UserDetails memory ud = UserDetails({\r\n            nick_name : _nick_name,\r\n            referrer : _referrer,\r\n            geo_location : _geo_location\r\n            });\r\n        users[_external_wallet_address] = ud;\r\n        referees[_referrer].push(_external_wallet_address);\r\n        internal_to_external[_internal_wallet_address] = _external_wallet_address;\r\n        external_to_internal[_external_wallet_address] = _internal_wallet_address;\r\n        emit UserRegistered(_internal_wallet_address, _external_wallet_address, _referrer, _nick_name, _geo_location);\r\n    }\r\n\r\n    /**\r\n     * @dev method to update users nick name, can be called external address only\r\n     * @param _nick_name new nick name\r\n     */\r\n    function updateNickname(bytes32 _nick_name) external {\r\n        require(external_to_internal[msg.sender] != address(0));\r\n        UserDetails memory ud = users[msg.sender];\r\n        require(ud.nick_name != bytes32(0), \"user does not esist!\");\r\n        bytes32 old_nick_name = ud.nick_name;\r\n        ud.nick_name = _nick_name;\r\n        users[msg.sender] = ud;\r\n        emit UserNickNameUpdated(msg.sender, old_nick_name, _nick_name);\r\n    }\r\n\r\n    /**\r\n     * @dev method to update users geo location, can be called external address only\r\n     * @param _geo_location new geo location\r\n     */\r\n    function updateGeoLocation(bytes32 _geo_location) external {\r\n        require(external_to_internal[msg.sender] != address(0));\r\n        UserDetails memory ud = users[msg.sender];\r\n        require(ud.nick_name != bytes32(0), \"user does not esist!\");\r\n        bytes32 old_geo_location = ud.geo_location;\r\n        ud.geo_location = _geo_location;\r\n        users[msg.sender] = ud;\r\n        emit UserGeoLocationUpdated(msg.sender, old_geo_location, _geo_location);\r\n    }\r\n\r\n    /**\r\n       * @dev Throws if called by any account other than the internal wallet.\r\n       */\r\n    modifier onlyInternalWallets() {\r\n        require(internal_to_external[msg.sender] != address(0));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SuperOneNetwork is User {\r\n\r\n    event Withdrawal(address wallet, uint256 weiAmount);\r\n    event CommissionSent(address indexed from, address to, uint256 amount);\r\n\r\n    // coordinates to Spot index first is level(x) then mapping of y to owner address\r\n    mapping(uint256 => mapping(uint256 => address)) public coordinates;\r\n\r\n    // mapping to return what to add according to x index\r\n    mapping(uint256 => uint256) public x_addition;\r\n\r\n    // mapping to return what to add according to y index\r\n    mapping(uint256 => uint256) public y_addition;\r\n\r\n    // Constructor to bootstartp the contract\r\n    constructor() public {\r\n        // initial coordinates belongs to owner\r\n        coordinates[0][0] = msg.sender;\r\n        uint256 x_factor = 1;\r\n        uint256 y_factor;\r\n        //pre fill x_addition for level calculation in the tree\r\n        for (uint256 i; i < 128; i++) {\r\n            // for x_addition\r\n            if ((i + 2) >= (2 * (2 ** x_factor))) {\r\n                x_factor += 1;\r\n                y_factor = 1;\r\n            } else {\r\n                y_factor += 1;\r\n            }\r\n            x_addition[i] = x_factor;\r\n            y_addition[i] = y_factor - 1;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev method to assign spots, can be called by admin only\r\n     * @param coord_x coordinate x of the tree to start\r\n     * @param coord_y coordinate y of the tree to start\r\n     * @param _count count of spots to be assigned\r\n     */\r\n    function assignSpotsByAdmin(uint256 coord_x, uint256 coord_y, uint _count, address external_wallet_address) external onlyOwner() {\r\n        require(_count < 128);\r\n        coordinates[coord_x][coord_y] = external_wallet_address;\r\n        for (uint256 i; i < _count - 1; i++) {\r\n            coordinates[coord_x + x_addition[i]][coord_y * (2 * (2 ** (x_addition[i] - 1))) + y_addition[i]] = external_wallet_address;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev method to assign spots, can be called by internal wallets only\r\n     * @param coord_x coordinate x of the tree to start\r\n     * @param coord_y coordinate y of the tree to start\r\n     * @param _count count of spots to be assigned\r\n     */\r\n    function assignSpots(uint256 coord_x, uint256 coord_y, uint _count) external onlyInternalWallets() {\r\n        require(_count < 128);\r\n        address wallet = internal_to_external[msg.sender];\r\n        coordinates[coord_x][coord_y] = wallet;\r\n        for (uint256 i; i < _count - 1; i++) {\r\n            coordinates[coord_x + x_addition[i]][coord_y * (2 * (2 ** (x_addition[i] - 1))) + y_addition[i]] = wallet;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev method to distribute Comission, can be called by internal wallets only\r\n     * @param beneficiaries address to which funds will be transferred\r\n     * @param amounts the amount of index wise benificiaries\r\n     */\r\n    function distributeCommission(address payable[] calldata beneficiaries, uint256[] calldata amounts) external payable onlyInternalWallets() {\r\n        require(beneficiaries.length == amounts.length);\r\n        for (uint256 i; i < beneficiaries.length; i++) {\r\n            beneficiaries[i].transfer(amounts[i]);\r\n            emit CommissionSent(internal_to_external[msg.sender], beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev method to withdraw funds only by owner\r\n     * @param _wallet address to which funds will be transferred\r\n     */\r\n    function withdraw(address payable _wallet) onlyOwner() public {\r\n        uint256 weiAmount = address(this).balance;\r\n        require(weiAmount > 0);\r\n        _wallet.transfer(weiAmount);\r\n        emit Withdrawal(_wallet, weiAmount);\r\n    }\r\n\r\n    function checkSpots(uint256[] calldata x, uint256[] calldata y) external view returns (address[] memory){\r\n        address[] memory addresses;\r\n        for (uint256 i; i < x.length; i++) {\r\n            addresses[i] = coordinates[x[i]][y[i]];\r\n        }\r\n        return addresses;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256[]\"},{\"name\":\"y\",\"type\":\"uint256[]\"}],\"name\":\"checkSpots\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"external_to_internal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"internal_to_external\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coord_x\",\"type\":\"uint256\"},{\"name\":\"coord_y\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"assignSpots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nick_name\",\"type\":\"bytes32\"}],\"name\":\"updateNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_internal_wallet_address\",\"type\":\"address\"},{\"name\":\"_external_wallet_address\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_nick_name\",\"type\":\"bytes32\"},{\"name\":\"_geo_location\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"y_addition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x_addition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coord_x\",\"type\":\"uint256\"},{\"name\":\"coord_y\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"external_wallet_address\",\"type\":\"address\"}],\"name\":\"assignSpotsByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"nick_name\",\"type\":\"bytes32\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"geo_location\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_internal_wallet_addresses\",\"type\":\"address[]\"},{\"name\":\"_external_wallet_addresses\",\"type\":\"address[]\"},{\"name\":\"_referrers\",\"type\":\"address[]\"},{\"name\":\"_nick_names\",\"type\":\"bytes32[]\"},{\"name\":\"_geo_locations\",\"type\":\"bytes32[]\"}],\"name\":\"registerUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_geo_location\",\"type\":\"bytes32\"}],\"name\":\"updateGeoLocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"internal_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"external_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nick_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"geo_location\",\"type\":\"bytes32\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"external_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_nick_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"new_nick_name\",\"type\":\"bytes32\"}],\"name\":\"UserNickNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"external_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_geo_location\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"new_geo_location\",\"type\":\"bytes32\"}],\"name\":\"UserGeoLocationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SuperOneNetwork","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://632f9664daa0f2d5b08406f18da4ea01a4a250abad7a4ba143e932d70f970f31"}]}