{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Validator\r\n * @dev The Validator contract has a validator address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Validator {\r\n    address public validator;\r\n\r\n    event NewValidatorSet(address indexed previousOwner, address indexed newValidator);\r\n\r\n    /**\r\n    * @dev The Validator constructor sets the original `validator` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        validator = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the validator.\r\n    */\r\n    modifier onlyValidator() {\r\n        require(msg.sender == validator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current validator to transfer control of the contract to a newValidator.\r\n    * @param newValidator The address to become next validator.\r\n    */\r\n    function setNewValidator(address newValidator) public onlyValidator {\r\n        require(newValidator != address(0));\r\n        emit NewValidatorSet(validator, newValidator);\r\n        validator = newValidator;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract DetailedERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract ReMintableToken is Validator, StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event MintStarted();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier cannotMint() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier isAuthorized() {\r\n        require(msg.sender == owner || msg.sender == validator);\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) \r\n        public \r\n        Ownable(_owner) \r\n    {\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() isAuthorized canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to start minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function startMinting() onlyValidator cannotMint public returns (bool) {\r\n        mintingFinished = false;\r\n        emit MintStarted();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) internal investorMap;\r\n\r\n    /**\r\n    * event for investor approval logging\r\n    * @param investor approved investor\r\n    */\r\n    event Approved(address indexed investor);\r\n\r\n    /**\r\n    * event for investor disapproval logging\r\n    * @param investor disapproved investor\r\n    */\r\n    event Disapproved(address indexed investor);\r\n\r\n    constructor(address _owner) \r\n        public \r\n        Ownable(_owner) \r\n    {\r\n        \r\n    }\r\n\r\n    /** @param _investor the address of investor to be checked\r\n      * @return true if investor is approved\r\n      */\r\n    function isInvestorApproved(address _investor) external view returns (bool) {\r\n        require(_investor != address(0));\r\n        return investorMap[_investor];\r\n    }\r\n\r\n    /** @dev approve an investor\r\n      * @param toApprove investor to be approved\r\n      */\r\n    function approveInvestor(address toApprove) external onlyOwner {\r\n        investorMap[toApprove] = true;\r\n        emit Approved(toApprove);\r\n    }\r\n\r\n    /** @dev approve investors in bulk\r\n      * @param toApprove array of investors to be approved\r\n      */\r\n    function approveInvestorsInBulk(address[] toApprove) external onlyOwner {\r\n        for (uint i = 0; i < toApprove.length; i++) {\r\n            investorMap[toApprove[i]] = true;\r\n            emit Approved(toApprove[i]);\r\n        }\r\n    }\r\n\r\n    /** @dev disapprove an investor\r\n      * @param toDisapprove investor to be disapproved\r\n      */\r\n    function disapproveInvestor(address toDisapprove) external onlyOwner {\r\n        delete investorMap[toDisapprove];\r\n        emit Disapproved(toDisapprove);\r\n    }\r\n\r\n    /** @dev disapprove investors in bulk\r\n      * @param toDisapprove array of investors to be disapproved\r\n      */\r\n    function disapproveInvestorsInBulk(address[] toDisapprove) external onlyOwner {\r\n        for (uint i = 0; i < toDisapprove.length; i++) {\r\n            delete investorMap[toDisapprove[i]];\r\n            emit Disapproved(toDisapprove[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** @title Compliant Token */\r\ncontract CompliantTokenSwitchRemintable is Validator, DetailedERC20, ReMintableToken {\r\n    Whitelist public whiteListingContract;\r\n\r\n    struct TransactionStruct {\r\n        address from;\r\n        address to;\r\n        uint256 value;\r\n        uint256 fee;\r\n        address spender;\r\n    }\r\n\r\n    mapping (uint => TransactionStruct) public pendingTransactions;\r\n    mapping (address => mapping (address => uint256)) public pendingApprovalAmount;\r\n    uint256 public currentNonce = 0;\r\n    uint256 public transferFee;\r\n    address public feeRecipient;\r\n    bool public tokenSwitch;\r\n\r\n    modifier checkIsInvestorApproved(address _account) {\r\n        require(whiteListingContract.isInvestorApproved(_account));\r\n        _;\r\n    }\r\n\r\n    modifier checkIsAddressValid(address _account) {\r\n        require(_account != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier checkIsValueValid(uint256 _value) {\r\n        require(_value > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * event for rejected transfer logging\r\n    * @param from address from which tokens have to be transferred\r\n    * @param to address to tokens have to be transferred\r\n    * @param value number of tokens\r\n    * @param nonce request recorded at this particular nonce\r\n    * @param reason reason for rejection\r\n    */\r\n    event TransferRejected(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        uint256 indexed nonce,\r\n        uint256 reason\r\n    );\r\n\r\n    /**\r\n    * event for transfer tokens logging\r\n    * @param from address from which tokens have to be transferred\r\n    * @param to address to tokens have to be transferred\r\n    * @param value number of tokens\r\n    * @param fee fee in tokens\r\n    */\r\n    event TransferWithFee(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        uint256 fee\r\n    );\r\n\r\n    /**\r\n    * event for transfer/transferFrom request logging\r\n    * @param from address from which tokens have to be transferred\r\n    * @param to address to tokens have to be transferred\r\n    * @param value number of tokens\r\n    * @param fee fee in tokens\r\n    * @param spender The address which will spend the tokens\r\n    * @param nonce request recorded at this particular nonce\r\n    */\r\n    event RecordedPendingTransaction(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        uint256 fee,\r\n        address indexed spender,\r\n        uint256 nonce\r\n    );\r\n\r\n    /**\r\n    * event for token switch activate logging\r\n    */\r\n    event TokenSwitchActivated();\r\n\r\n    /**\r\n    * event for token switch deactivate logging\r\n    */\r\n    event TokenSwitchDeactivated();\r\n\r\n    /**\r\n    * event for whitelist contract update logging\r\n    * @param _whiteListingContract address of the new whitelist contract\r\n    */\r\n    event WhiteListingContractSet(address indexed _whiteListingContract);\r\n\r\n    /**\r\n    * event for fee update logging\r\n    * @param previousFee previous fee\r\n    * @param newFee new fee\r\n    */\r\n    event FeeSet(uint256 indexed previousFee, uint256 indexed newFee);\r\n\r\n    /**\r\n    * event for fee recipient update logging\r\n    * @param previousRecipient address of the old fee recipient\r\n    * @param newRecipient address of the new fee recipient\r\n    */\r\n    event FeeRecipientSet(address indexed previousRecipient, address indexed newRecipient);\r\n\r\n    /** @dev Constructor\r\n      * @param _owner Token contract owner\r\n      * @param _name Token name\r\n      * @param _symbol Token symbol\r\n      * @param _decimals number of decimals in the token(usually 18)\r\n      * @param whitelistAddress Ethereum address of the whitelist contract\r\n      * @param recipient Ethereum address of the fee recipient\r\n      * @param fee token fee for approving a transfer\r\n      */\r\n    constructor(\r\n        address _owner,\r\n        string _name, \r\n        string _symbol, \r\n        uint8 _decimals,\r\n        address whitelistAddress,\r\n        address recipient,\r\n        uint256 fee\r\n    )\r\n        public\r\n        ReMintableToken(_owner)\r\n        DetailedERC20(_name, _symbol, _decimals)\r\n        Validator()\r\n    {\r\n        setWhitelistContract(whitelistAddress);\r\n        setFeeRecipient(recipient);\r\n        setFee(fee);\r\n    }\r\n\r\n    /** @dev Updates whitelist contract address\r\n      * @param whitelistAddress New whitelist contract address\r\n      */\r\n    function setWhitelistContract(address whitelistAddress)\r\n        public\r\n        onlyValidator\r\n        checkIsAddressValid(whitelistAddress)\r\n    {\r\n        whiteListingContract = Whitelist(whitelistAddress);\r\n        emit WhiteListingContractSet(whiteListingContract);\r\n    }\r\n\r\n    /** @dev Updates token fee for approving a transfer\r\n      * @param fee New token fee\r\n      */\r\n    function setFee(uint256 fee)\r\n        public\r\n        onlyValidator\r\n    {\r\n        emit FeeSet(transferFee, fee);\r\n        transferFee = fee;\r\n    }\r\n\r\n    /** @dev Updates fee recipient address\r\n      * @param recipient New whitelist contract address\r\n      */\r\n    function setFeeRecipient(address recipient)\r\n        public\r\n        onlyValidator\r\n        checkIsAddressValid(recipient)\r\n    {\r\n        emit FeeRecipientSet(feeRecipient, recipient);\r\n        feeRecipient = recipient;\r\n    }\r\n\r\n    /** @dev activates token switch after which no validator approval is required for transfer */\r\n    function activateTokenSwitch() public onlyValidator {\r\n        tokenSwitch = true;\r\n        emit TokenSwitchActivated();\r\n    }\r\n\r\n    /** @dev deactivates token switch after which validator approval is required for transfer */ \r\n    function deactivateTokenSwitch() public onlyValidator {\r\n        tokenSwitch = false;\r\n        emit TokenSwitchDeactivated();\r\n    }\r\n\r\n    /** @dev Updates token name\r\n      * @param _name New token name\r\n      */\r\n    function updateName(string _name) public onlyOwner {\r\n        require(bytes(_name).length != 0);\r\n        name = _name;\r\n    }\r\n\r\n    /** @dev Updates token symbol\r\n      * @param _symbol New token name\r\n      */\r\n    function updateSymbol(string _symbol) public onlyOwner {\r\n        require(bytes(_symbol).length != 0);\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /** @dev transfer\r\n      * @param _to address to which the tokens have to be transferred\r\n      * @param _value amount of tokens to be transferred\r\n      */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        checkIsInvestorApproved(msg.sender)\r\n        checkIsInvestorApproved(_to)\r\n        checkIsValueValid(_value)\r\n        returns (bool)\r\n    {\r\n        if (tokenSwitch) {\r\n            super.transfer(_to, _value);\r\n        } else {\r\n            uint256 pendingAmount = pendingApprovalAmount[msg.sender][address(0)];\r\n            uint256 fee = 0;\r\n\r\n            if (msg.sender == feeRecipient) {\r\n                require(_value.add(pendingAmount) <= balances[msg.sender]);\r\n                pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value);\r\n            } else {\r\n                fee = transferFee;\r\n                require(_value.add(pendingAmount).add(transferFee) <= balances[msg.sender]);\r\n                pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value).add(transferFee);\r\n            }\r\n\r\n            pendingTransactions[currentNonce] = TransactionStruct(\r\n                msg.sender,\r\n                _to,\r\n                _value,\r\n                fee,\r\n                address(0)\r\n            );\r\n\r\n            emit RecordedPendingTransaction(msg.sender, _to, _value, fee, address(0), currentNonce);\r\n            currentNonce++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @dev transferFrom\r\n      * @param _from address from which the tokens have to be transferred\r\n      * @param _to address to which the tokens have to be transferred\r\n      * @param _value amount of tokens to be transferred\r\n      */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public \r\n        checkIsInvestorApproved(_from)\r\n        checkIsInvestorApproved(_to)\r\n        checkIsValueValid(_value)\r\n        returns (bool)\r\n    {\r\n        if (tokenSwitch) {\r\n            super.transferFrom(_from, _to, _value);\r\n        } else {\r\n            uint256 allowedTransferAmount = allowed[_from][msg.sender];\r\n            uint256 pendingAmount = pendingApprovalAmount[_from][msg.sender];\r\n            uint256 fee = 0;\r\n            \r\n            if (_from == feeRecipient) {\r\n                require(_value.add(pendingAmount) <= balances[_from]);\r\n                require(_value.add(pendingAmount) <= allowedTransferAmount);\r\n                pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value);\r\n            } else {\r\n                fee = transferFee;\r\n                require(_value.add(pendingAmount).add(transferFee) <= balances[_from]);\r\n                require(_value.add(pendingAmount).add(transferFee) <= allowedTransferAmount);\r\n                pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value).add(transferFee);\r\n            }\r\n\r\n            pendingTransactions[currentNonce] = TransactionStruct(\r\n                _from,\r\n                _to,\r\n                _value,\r\n                fee,\r\n                msg.sender\r\n            );\r\n\r\n            emit RecordedPendingTransaction(_from, _to, _value, fee, msg.sender, currentNonce);\r\n            currentNonce++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @dev approve transfer/transferFrom request\r\n      * @param nonce request recorded at this particular nonce\r\n      */\r\n    function approveTransfer(uint256 nonce)\r\n        external \r\n        onlyValidator\r\n    {   \r\n        require(_approveTransfer(nonce));\r\n    }    \r\n\r\n    /** @dev reject transfer/transferFrom request\r\n      * @param nonce request recorded at this particular nonce\r\n      * @param reason reason for rejection\r\n      */\r\n    function rejectTransfer(uint256 nonce, uint256 reason)\r\n        external \r\n        onlyValidator\r\n    {        \r\n        _rejectTransfer(nonce, reason);\r\n    }\r\n\r\n    /** @dev approve transfer/transferFrom requests\r\n      * @param nonces request recorded at these nonces\r\n      */\r\n    function bulkApproveTransfers(uint256[] nonces)\r\n        external \r\n        onlyValidator\r\n        returns (bool)\r\n    {\r\n        for (uint i = 0; i < nonces.length; i++) {\r\n            require(_approveTransfer(nonces[i]));\r\n        }\r\n    }\r\n\r\n    /** @dev reject transfer/transferFrom request\r\n      * @param nonces requests recorded at these nonces\r\n      * @param reasons reasons for rejection\r\n      */\r\n    function bulkRejectTransfers(uint256[] nonces, uint256[] reasons)\r\n        external \r\n        onlyValidator\r\n    {\r\n        require(nonces.length == reasons.length);\r\n        for (uint i = 0; i < nonces.length; i++) {\r\n            _rejectTransfer(nonces[i], reasons[i]);\r\n        }\r\n    }\r\n\r\n    /** @dev approve transfer/transferFrom request called internally in the approveTransfer and bulkApproveTransfers functions\r\n      * @param nonce request recorded at this particular nonce\r\n      */\r\n    function _approveTransfer(uint256 nonce)\r\n        private\r\n        checkIsInvestorApproved(pendingTransactions[nonce].from)\r\n        checkIsInvestorApproved(pendingTransactions[nonce].to)\r\n        returns (bool)\r\n    {   \r\n        address from = pendingTransactions[nonce].from;\r\n        address to = pendingTransactions[nonce].to;\r\n        address spender = pendingTransactions[nonce].spender;\r\n        uint256 value = pendingTransactions[nonce].value;\r\n        uint256 fee = pendingTransactions[nonce].fee;\r\n\r\n        delete pendingTransactions[nonce];\r\n\r\n        if (fee == 0) {\r\n\r\n            balances[from] = balances[from].sub(value);\r\n            balances[to] = balances[to].add(value);\r\n\r\n            if (spender != address(0)) {\r\n                allowed[from][spender] = allowed[from][spender].sub(value);\r\n            }\r\n\r\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender].sub(value);\r\n\r\n            emit Transfer(\r\n                from,\r\n                to,\r\n                value\r\n            );\r\n\r\n        } else {\r\n\r\n            balances[from] = balances[from].sub(value.add(fee));\r\n            balances[to] = balances[to].add(value);\r\n            balances[feeRecipient] = balances[feeRecipient].add(fee);\r\n\r\n            if (spender != address(0)) {\r\n                allowed[from][spender] = allowed[from][spender].sub(value).sub(fee);\r\n            }\r\n\r\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender].sub(value).sub(fee);\r\n            \r\n            emit TransferWithFee(\r\n                from,\r\n                to,\r\n                value,\r\n                fee\r\n            );\r\n\r\n        }\r\n\r\n        return true;\r\n    }    \r\n\r\n    /** @dev reject transfer/transferFrom request called internally in the rejectTransfer and bulkRejectTransfers functions\r\n      * @param nonce request recorded at this particular nonce\r\n      * @param reason reason for rejection\r\n      */\r\n    function _rejectTransfer(uint256 nonce, uint256 reason)\r\n        private\r\n        checkIsAddressValid(pendingTransactions[nonce].from)\r\n    {        \r\n        address from = pendingTransactions[nonce].from;\r\n        address spender = pendingTransactions[nonce].spender;\r\n        uint256 value = pendingTransactions[nonce].value;\r\n\r\n        if (pendingTransactions[nonce].fee == 0) {\r\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\r\n                .sub(value);\r\n        } else {\r\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\r\n                .sub(value).sub(pendingTransactions[nonce].fee);\r\n        }\r\n        \r\n        emit TransferRejected(\r\n            from,\r\n            pendingTransactions[nonce].to,\r\n            value,\r\n            nonce,\r\n            reason\r\n        );\r\n        \r\n        delete pendingTransactions[nonce];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"setNewValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingApprovalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"name\":\"reasons\",\"type\":\"uint256[]\"}],\"name\":\"bulkRejectTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTransactions\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"spender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateTokenSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateTokenSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"rejectTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"bulkApproveTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"TransferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferWithFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RecordedPendingTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSwitchActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSwitchDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_whiteListingContract\",\"type\":\"address\"}],\"name\":\"WhiteListingContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousFee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRecipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"NewValidatorSet\",\"type\":\"event\"}]","ContractName":"CompliantTokenSwitchRemintable","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ffec646ae8b61add96da9cc6e013d5b4cc74f93600000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000643e5ad239b2de1a005a8babb5cedd5831a3d3ab000000000000000000000000643e5ad239b2de1a005a8babb5cedd5831a3d3ab00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028417564697465645f436f6d706c69616e74546f6b656e5f7377697463685f72656d696e7461626c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a417564697465645f436f00000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://524e6c87b084db109cf4ef09ab6401baeb05000cd2330c39fa35fcac0483aa52"}]}