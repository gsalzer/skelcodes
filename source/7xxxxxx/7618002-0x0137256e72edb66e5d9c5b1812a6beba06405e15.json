{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n /**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender == owner)\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy {\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"www.invault.io.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0xbe2c1a60709d4c60c413b72a0999dd04a683092d060b4c9def249fa6bc842b2d;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"www.invault.io.proxy.implementation\"));\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev 设置proxy的Impl地址\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title IVTProxy\r\n * @dev Contract for Proxy applications.\r\n */\r\ncontract IVTProxy is UpgradeabilityProxy, Pausable {\r\n\r\n  /**\r\n   * @dev Storage slot with the perm of the contract.\r\n   * This is the keccak-256 hash of \"www.invault.io.proxy.permission\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant PERM_SLOT = 0x9f2b05956adf3f5dc678f8c50dd9693f2163f4bec0d0b84a13327b894102a4e5;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the Permission.\r\n   * If it is, it will run the function.\r\n   */\r\n  modifier OnlyPermission() {\r\n    require(msg.sender == _perm());\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * Contract constructor.\r\n   * @param _implementation address of the initial implementation.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _implementation, address _permission) UpgradeabilityProxy(_implementation) public {\r\n    assert(PERM_SLOT == keccak256(\"www.invault.io.proxy.permission\"));\r\n    _setPermission(_permission);\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function getPermAddress() external view whenNotPaused returns (address) {\r\n    return _perm();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function getImplAddress() external view whenNotPaused returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev 升级proxy中的implementation，只有Permission可以调用\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeImpl(address newImplementation) external OnlyPermission whenNotPaused returns(bool) {\r\n    _upgradeTo(newImplementation);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev 升级proxy中的permission，只有Permission可以调用\r\n   * @param newPermission Address.\r\n   */\r\n  function upgradePerm(address newPermission) external OnlyPermission whenNotPaused returns(bool)  {\r\n    _setPermission(newPermission);\r\n    return true;\r\n  }\r\n\r\n\r\n/**\r\n * @dev 请求升级\r\n * @param _data call\r\n * @return {[type]}\r\n */\r\n  function requestUpgrade(bytes calldata _data) external onlyOwner whenNotPaused {\r\n     address permission = _perm();\r\n     permission.call(_data);\r\n\r\n  }\r\n\r\n  /**\r\n   * @return The permission slot.\r\n   */\r\n  function _perm() internal view returns (address adm) {\r\n    bytes32 slot = PERM_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy permission.\r\n   * @param newPerm Address of the new proxy permission.\r\n   */\r\n  function _setPermission(address newPerm) internal {\r\n\r\n    require(AddressUtils.isContract(newPerm), \"Cannot set a proxy permission to a non-contract address\");\r\n\r\n    bytes32 slot = PERM_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newPerm)\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeImpl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPermission\",\"type\":\"address\"}],\"name\":\"upgradePerm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImplAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPermAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_permission\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"IVTProxy","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e8a6a0dac1a082479c8c9d227306e70a13a0f4b1000000000000000000000000b7ff5cf7bd9ac0b162ed34a54fd4235d32844742","Library":"","SwarmSource":"bzzr://bc7f9d7fcb7ae672db9ca223ef4b2e870934a9a822e7e778e4ab9560706e01af"}]}