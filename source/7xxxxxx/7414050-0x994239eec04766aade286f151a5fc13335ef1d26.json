{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n *  Provable Connector v1.3.0\r\n *\r\n *  Copyright (c) 2015-2016 Oraclize SRL\r\n *  Copyright (c) 2016-2019 Oraclize LTD\r\n *  Copyright (c) 2019 Provable Things LTD\r\n *\r\n */\r\npragma solidity 0.4.24;\r\n\r\ninterface ERC20Interface {\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n}\r\n\r\ncontract Oraclize {\r\n\r\n    mapping (address => uint256) requestCounter;\r\n    mapping (address => byte) public callbackAddresses;\r\n    mapping (address => bool) public offchainPayment;\r\n    address admin;\r\n    address paymentFlagger;\r\n    uint256 gasPrice = 20e9;\r\n    mapping (address => byte) addressProofType;\r\n    mapping (address => uint256) addressCustomGasPrice;\r\n    uint256 public basePrice;\r\n    mapping (bytes32 => uint256) public price;\r\n    mapping (bytes32 => uint256) priceMultiplier;\r\n    bytes32[] datasources;\r\n    bytes32[] public randomDS_sessionPublicKeyHash;\r\n    uint256 constant BASE_TX_COST = 21e3;\r\n    uint256 constant DEFAULT_GAS_LIMIT = 2e5;\r\n    mapping (address => uint256) public amplifiedTokenPrices;\r\n    mapping (address => address) public addressCustomPaymentToken;\r\n\r\n    event Log1(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        string datasource,\r\n        string arg,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event Log1_byte(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        byte datasource,\r\n        string arg,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event Log2(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        string datasource,\r\n        string arg1,\r\n        string arg2,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event Log2_byte(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        byte datasource,\r\n        string arg1,\r\n        string arg2,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event LogN(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        string datasource,\r\n        bytes args,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event LogN_byte(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 timestamp,\r\n        byte datasource,\r\n        bytes args,\r\n        uint256 gaslimit,\r\n        byte proofType,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event Emit_OffchainPaymentFlag(\r\n        address indexed idx_sender,\r\n        address sender,\r\n        bool indexed idx_flag,\r\n        bool flag\r\n    );\r\n\r\n    event CallbackRebroadcastRequest(\r\n      bytes32 indexed queryId,\r\n      uint256 gasLimit,\r\n      uint256 gasPrice\r\n    );\r\n\r\n    event LogTokenWhitelistRemoval(\r\n        address tokenAddress\r\n    );\r\n\r\n    event LogTokenWhitelisting(\r\n        string tokenTicker,\r\n        address tokenAddress\r\n    );\r\n\r\n    event EnableCache(\r\n        address indexed sender,\r\n        bytes32 cid\r\n    );\r\n\r\n    event LogCached(\r\n        address sender,\r\n        bytes32 cid,\r\n        uint256 value\r\n    );\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function onlyAdmin()\r\n        view\r\n        private\r\n    {\r\n        require(msg.sender == admin);\r\n    }\r\n\r\n    function onlyManagers()\r\n        view\r\n        private\r\n    {\r\n        require(msg.sender == admin || msg.sender == paymentFlagger);\r\n    }\r\n\r\n    /**\r\n     * @notice  The price amplification allows representation of lower-priced\r\n     *          tokens by the connector, & maintains higher precision during the\r\n     *          the conversion of a query price in ETH to it's token equivalent.\r\n     *\r\n     * @dev     Token price amplified via: tokenUSDPrice * 1e3.\r\n     */\r\n    function whitelistToken(\r\n        string _tokenTicker,\r\n        address _tokenAddress,\r\n        uint256 _amplifiedTokenPrice\r\n    )\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        amplifiedTokenPrices[_tokenAddress] = _amplifiedTokenPrice;\r\n        emit LogTokenWhitelisting(_tokenTicker, _tokenAddress);\r\n    }\r\n\r\n    function updateTokenAmplifiedPrice(\r\n        address _tokenAddress,\r\n        uint256 _newAmplifiedTokenPrice\r\n    )\r\n        external\r\n    {\r\n        onlyManagers();\r\n        amplifiedTokenPrices[_tokenAddress] = _newAmplifiedTokenPrice;\r\n    }\r\n\r\n    function revokeTokenWhitelisting(address _tokenAddress)\r\n        external\r\n    {\r\n        onlyManagers();\r\n        delete amplifiedTokenPrices[_tokenAddress];\r\n        emit LogTokenWhitelistRemoval(_tokenAddress);\r\n    }\r\n\r\n    function setCustomTokenPayment(address _tokenAddress)\r\n        external\r\n    {\r\n        require(amplifiedTokenPrices[_tokenAddress] > 0);\r\n        addressCustomPaymentToken[msg.sender] = _tokenAddress;\r\n    }\r\n\r\n    function unsetCustomTokenPayment()\r\n        external\r\n    {\r\n        delete addressCustomPaymentToken[msg.sender];\r\n    }\r\n\r\n    function getTokenBalance(address _tokenAddress)\r\n    view\r\n        public\r\n        returns (uint256 _tokenBalance)\r\n    {\r\n        return ERC20Interface(_tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawTokens(address _tokenAddress)\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        withdrawTokens(\r\n            _tokenAddress,\r\n            msg.sender,\r\n            getTokenBalance(_tokenAddress)\r\n        );\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _tokenAddress,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        require(_recipient != address(0));\r\n        ERC20Interface(_tokenAddress).transfer(_recipient, _amount);\r\n    }\r\n\r\n    function migrateRequestCounter(\r\n        address _address,\r\n        uint256 _requestCounter\r\n    )\r\n        private\r\n    {\r\n        require(requestCounter[_address] == 0);\r\n        requestCounter[_address] = _requestCounter;\r\n    }\r\n\r\n    function batchMigrateRequestCounters(\r\n        address[] _addresses,\r\n        uint256[] _requestCounters\r\n    )\r\n        public\r\n    {\r\n        onlyManagers();\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            migrateRequestCounter(\r\n                _addresses[i],\r\n                _requestCounters[i]\r\n            );\r\n        }\r\n    }\r\n    function migrateCustomSettings(\r\n        address _address,\r\n        byte _proofType,\r\n        uint256 _gasPrice,\r\n        bool _offchainPayer,\r\n        uint256 _requestCounter\r\n    )\r\n        private\r\n    {\r\n        require(requestCounter[_address] == 0);\r\n        addressProofType[_address] = _proofType;\r\n        requestCounter[_address] = _requestCounter;\r\n        offchainPayment[_address] = _offchainPayer;\r\n        addressCustomGasPrice[_address] = _gasPrice;\r\n    }\r\n\r\n    function batchMigrateCustomSettings(\r\n        address[] _addresses,\r\n        byte[] _proofTypes,\r\n        uint256[] _gasPrices,\r\n        bool[] _offchainPayers,\r\n        uint256[] _requestCounters\r\n    )\r\n        public\r\n    {\r\n        onlyManagers();\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            migrateCustomSettings(\r\n                _addresses[i],\r\n                _proofTypes[i],\r\n                _gasPrices[i],\r\n                _offchainPayers[i],\r\n                _requestCounters[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function costs(\r\n        string _datasource,\r\n        uint256 _gasLimit\r\n    )\r\n        private\r\n    {\r\n        settlePayment(getPrice(_datasource, _gasLimit, msg.sender));\r\n    }\r\n\r\n    function costs(\r\n        byte _datasource,\r\n        uint256 _gasLimit\r\n    )\r\n        private\r\n    {\r\n        settlePayment(getPrice(_datasource, _gasLimit, msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @dev Any ETH sent over and above a query price is refunded. Please note\r\n     *      that the same is NOT true for any queries paid for by ERC20 tokens.\r\n     *      In such cases, please ensure no ETH is sent along with query\r\n     *      function calls.\r\n     */\r\n    function settlePayment(uint256 _price)\r\n        private\r\n    {\r\n        if (msg.value == _price) {\r\n            return;\r\n        }\r\n        else if (msg.value > _price) {\r\n            msg.sender.transfer(msg.value - _price);\r\n            return;\r\n        }\r\n        address tokenAddress = addressCustomPaymentToken[msg.sender];\r\n        if (tokenAddress != address(0)) {\r\n            makeERC20Payment(\r\n                msg.sender,\r\n                convertToERC20Price(_price, tokenAddress)\r\n            );\r\n            return;\r\n        }\r\n        else {\r\n            revert('Error settling query payment');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  The amplified token price here allows higher precision when\r\n     *          converting the query price in wei to its token equivalent.\r\n     */\r\n    function convertToERC20Price(\r\n        uint256 _queryPriceInWei,\r\n        address _tokenAddress\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _price)\r\n    {\r\n        uint256 erc20Price = (_queryPriceInWei * 1 ether) / (amplifiedTokenPrices[_tokenAddress] * basePrice);\r\n        require(erc20Price > 0);\r\n        return erc20Price;\r\n    }\r\n\r\n    function makeERC20Payment(\r\n        address _address,\r\n        uint256 _amount\r\n    )\r\n        private\r\n    {\r\n        ERC20Interface(addressCustomPaymentToken[_address])\r\n            .transferFrom(\r\n                _address,\r\n                address(this),\r\n                _amount\r\n            );\r\n    }\r\n\r\n    function changeAdmin(address _newAdmin)\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function changePaymentFlagger(address _newFlagger)\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        paymentFlagger = _newFlagger;\r\n    }\r\n\r\n    function addCallbackAddress(\r\n        address _newCallbackAddress,\r\n        byte _addressType\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        addCallbackAddress(\r\n            _newCallbackAddress,\r\n            _addressType,\r\n            hex''\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev \"proof\" is currently a placeholder for when associated proof\r\n     *      for _addressType is added.\r\n     */\r\n    function addCallbackAddress(\r\n        address _newCallbackAddress,\r\n        byte _addressType,\r\n        bytes _proof\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        callbackAddresses[_newCallbackAddress] = _addressType;\r\n    }\r\n\r\n    function removeCallbackAddress(address _callbackAddress)\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        delete callbackAddresses[_callbackAddress];\r\n    }\r\n\r\n    function isOriginCallbackAddress()\r\n        public\r\n        view\r\n        returns (bool _isCallback)\r\n    {\r\n        if (callbackAddresses[tx.origin] != 0)\r\n            return true;\r\n    }\r\n\r\n    function addDatasource(\r\n        string _datasourceName,\r\n        uint256 _multiplier\r\n    )\r\n        public\r\n    {\r\n        addDatasource(_datasourceName, 0x00, _multiplier);\r\n    }\r\n\r\n    function addDatasource(\r\n        byte _datasourceName,\r\n        uint256 _multiplier\r\n    )\r\n        external\r\n    {\r\n        addDatasource(_datasourceName, 0x00, _multiplier);\r\n    }\r\n\r\n    function addDatasource(\r\n        string _datasourceName,\r\n        byte _proofType,\r\n        uint256 _multiplier\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        bytes32 dsname_hash = keccak256(\r\n            _datasourceName,\r\n            _proofType\r\n        );\r\n        datasources[datasources.length++] = dsname_hash;\r\n        priceMultiplier[dsname_hash] = _multiplier;\r\n    }\r\n\r\n    function addDatasource(\r\n        byte _datasourceName,\r\n        byte _proofType,\r\n        uint256 _multiplier\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        bytes32 dsname_hash = keccak256(\r\n            _datasourceName,\r\n            _proofType\r\n        );\r\n        datasources[datasources.length++] = dsname_hash;\r\n        priceMultiplier[dsname_hash] = _multiplier;\r\n    }\r\n\r\n    /**\r\n     * @notice  Used by the \"ethereum-bridge\"\r\n     *\r\n     * @dev     Calculate dsHash via:\r\n     *          bytes32 hash = keccak256(DATASOURCE_NAME, PROOF_TYPE);\r\n     */\r\n    function multiAddDatasources(\r\n        bytes32[] _datasourceHash,\r\n        uint256[] _multiplier\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        for (uint256 i = 0; i < _datasourceHash.length; i++) {\r\n            datasources[datasources.length++] = _datasourceHash[i];\r\n            priceMultiplier[_datasourceHash[i]] = _multiplier[i];\r\n        }\r\n    }\r\n\r\n    function multiSetProofTypes(\r\n        uint256[] _proofType,\r\n        address[] _address\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        for (uint256 i = 0; i < _address.length; i++) {\r\n            addressProofType[_address[i]] = byte(_proofType[i]);\r\n        }\r\n    }\r\n\r\n    function multiSetCustomGasPrices(\r\n        uint256[] _gasPrice,\r\n        address[] _address\r\n    )\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        for (uint256 i = 0; i < _address.length; i++) {\r\n            addressCustomGasPrice[_address[i]] = _gasPrice[i];\r\n        }\r\n    }\r\n\r\n    function setGasPrice(uint256 _newGasPrice)\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        gasPrice = _newGasPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice  Base price is maintained @ 0.001 USD in ether. Notice too that\r\n     *          any datasources need to be added before setting the base price\r\n     *          in order for datasource prices to be correctly persisted.\r\n     *\r\n     * @dev     To calculate base price:\r\n     *          uint256 basePrice = 1 * 10 ** _tokenDecimals / _USDPrice * 1000;\r\n     *\r\n     */\r\n    function setBasePrice(uint256 _newBasePrice)\r\n        external\r\n    {\r\n        onlyManagers();\r\n        basePrice = _newBasePrice;\r\n        for (uint256 i = 0; i < datasources.length; i++) {\r\n            price[datasources[i]] = _newBasePrice * priceMultiplier[datasources[i]];\r\n        }\r\n    }\r\n\r\n\r\n    function setOffchainPayment(\r\n        address _address,\r\n        bool _flag\r\n    )\r\n        external\r\n    {\r\n        onlyManagers();\r\n        offchainPayment[_address] = _flag;\r\n        emit Emit_OffchainPaymentFlag(_address, _address, _flag, _flag);\r\n    }\r\n\r\n    function withdrawFunds(address _address)\r\n        external\r\n    {\r\n        onlyAdmin();\r\n        _address.transfer(address(this).balance);\r\n    }\r\n\r\n    function randomDS_updateSessionPublicKeyHash(bytes32[] _newSessionPublicKeyHash)\r\n        public\r\n    {\r\n        onlyAdmin();\r\n        randomDS_sessionPublicKeyHash.length = 0;\r\n        for (uint256 i = 0; i < _newSessionPublicKeyHash.length; i++) {\r\n            randomDS_sessionPublicKeyHash.push(_newSessionPublicKeyHash[i]);\r\n        }\r\n    }\r\n\r\n    function randomDS_getSessionPublicKeyHash()\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        uint256 i = uint256(keccak256(requestCounter[msg.sender])) % randomDS_sessionPublicKeyHash.length;\r\n        return randomDS_sessionPublicKeyHash[i];\r\n    }\r\n\r\n    function setCustomProofType(byte _proofType)\r\n        public\r\n    {\r\n        addressProofType[msg.sender] = _proofType;\r\n    }\r\n\r\n    function setCustomGasPrice(uint256 _gasPrice)\r\n        external\r\n    {\r\n        addressCustomGasPrice[msg.sender] = _gasPrice;\r\n    }\r\n\r\n    function getPrice(string _datasource)\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, msg.sender);\r\n    }\r\n\r\n    function getPrice(byte _datasource)\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, msg.sender);\r\n    }\r\n\r\n    function getPrice(\r\n        string _datasource,\r\n        uint256 _gasLimit\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, _gasLimit, msg.sender);\r\n    }\r\n\r\n    function getPrice(\r\n        byte _datasource,\r\n        uint256 _gasLimit\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, _gasLimit, msg.sender);\r\n    }\r\n\r\n    function getPrice(\r\n        string _datasource,\r\n        address _address\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, DEFAULT_GAS_LIMIT, _address);\r\n    }\r\n\r\n\r\n    function getPrice(\r\n        byte _datasource,\r\n        address _address\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        return getPrice(_datasource, DEFAULT_GAS_LIMIT, _address);\r\n    }\r\n\r\n    /**\r\n     * @dev The ordering of the comparatives in the third `if` statement\r\n     *      provide the greatest efficiency with respect to gas prices.\r\n     */\r\n    function getPrice(\r\n        string _datasource,\r\n        uint256 _gasLimit,\r\n        address _address\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n        if (offchainPayment[_address]) return 0;\r\n        uint256 customGasPrice = addressCustomGasPrice[_address];\r\n        if (requestCounter[_address] == 0 &&\r\n            _gasLimit <= DEFAULT_GAS_LIMIT &&\r\n            customGasPrice <= gasPrice &&\r\n            !isOriginCallbackAddress()) return 0;\r\n        if (customGasPrice == 0) customGasPrice = gasPrice;\r\n       _datasourcePrice = price[keccak256(\r\n            _datasource,\r\n            addressProofType[_address]\r\n        )];\r\n        _datasourcePrice += _gasLimit * customGasPrice;\r\n        return _datasourcePrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Ibid.\r\n    */\r\n    function getPrice(\r\n        byte _datasource,\r\n        uint256 _gasLimit,\r\n        address _address\r\n    )\r\n        view\r\n        public\r\n        returns (uint256 _datasourcePrice)\r\n    {\r\n\r\n        if (offchainPayment[_address]) return 0;\r\n        uint256 customGasPrice = addressCustomGasPrice[_address];\r\n        if (requestCounter[_address] == 0 &&\r\n            _gasLimit <= DEFAULT_GAS_LIMIT &&\r\n            customGasPrice <= gasPrice &&\r\n            !isOriginCallbackAddress()) return 0;\r\n        if (customGasPrice == 0) customGasPrice = gasPrice;\r\n       _datasourcePrice = price[keccak256(\r\n            _datasource,\r\n            addressProofType[_address]\r\n        )];\r\n        _datasourcePrice += _gasLimit * customGasPrice;\r\n        return _datasourcePrice;\r\n    }\r\n\r\n    function query(\r\n        string _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query(\r\n        byte _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query1(\r\n        string _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query1(\r\n        byte _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n   function query2(\r\n        string _datasource,\r\n        string _arg1,\r\n        string _arg2\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(0, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query2(\r\n        byte _datasource,\r\n        string _arg1,\r\n        string _arg2\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(0, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function queryN(\r\n        string _datasource,\r\n        bytes _args\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(0, _datasource, _args, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function queryN(\r\n        byte _datasource,\r\n        bytes _args\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(0, _datasource, _args, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query1(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query1(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query2(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg1,\r\n        string _arg2\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function query2(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg1,\r\n        string _arg2\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function queryN(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        bytes _args\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function queryN(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        bytes _args\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function queryWithGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\r\n    }\r\n\r\n    function queryWithGasLimit(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\r\n    }\r\n\r\n    function query1WithGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\r\n    }\r\n\r\n    function query1WithGasLimit(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\r\n    }\r\n\r\n    function query2WithGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg1,\r\n        string _arg2,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\r\n    }\r\n\r\n    function query2WithGasLimit(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg1,\r\n        string _arg2,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\r\n    }\r\n\r\n    function queryNWithGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        bytes _args,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, _gasLimit);\r\n    }\r\n\r\n    function queryNWithGasLimit(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        bytes _args,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, _gasLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev In the following `query` functions, any timestamps that pertain\r\n     *      to a delay greater than 60 days are invalid. This is enforced\r\n     *      off-chain and thus no check appears here.\r\n     *\r\n     *      Also enforced off-chain and so not checked herein is that the\r\n     *      provided `_gasLimit` is less than or equal to the current block\r\n     *      gas limit.\r\n     */\r\n    function query1(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit Log1(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _arg,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function query1(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit Log1_byte(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _arg,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function query2(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg1,\r\n        string _arg2,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit Log2(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _arg1,\r\n            _arg2,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function query2(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        string _arg1,\r\n        string _arg2,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit Log2_byte(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _arg1,\r\n            _arg2,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function queryN(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        bytes _args,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit LogN(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _args,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function queryN(\r\n        uint256 _timestamp,\r\n        byte _datasource,\r\n        bytes _args,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        public\r\n        returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gasLimit);\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n        emit LogN_byte(\r\n            msg.sender,\r\n            _id,\r\n            _timestamp,\r\n            _datasource,\r\n            _args,\r\n            _gasLimit,\r\n            addressProofType[msg.sender],\r\n            addressCustomGasPrice[msg.sender]\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function getRebroadcastCost(\r\n        uint256 _gasLimit,\r\n        uint256 _gasPrice\r\n    )\r\n        pure\r\n        public\r\n        returns (uint256 _rebroadcastCost)\r\n    {\r\n        _rebroadcastCost = _gasPrice * _gasLimit;\r\n        /**\r\n         * @dev gas limit sanity check and overflow test\r\n         */\r\n        require(\r\n            _gasLimit >= BASE_TX_COST &&\r\n            _rebroadcastCost / _gasPrice == _gasLimit\r\n        );\r\n\r\n        return _rebroadcastCost;\r\n    }\r\n\r\n    /**\r\n     * @dev     Allows a user to increase the gas price of a query to aid in\r\n     *          ensuring prompt service during unexpected network traffic spikes.\r\n     *\r\n     * @notice  This function foregoes validation of the parameters provided\r\n     *          and retains any passing value sent to it. Parameters provided\r\n     *          are validated in the off-chain context, and irregular or\r\n     *          impossible parameters will simply be ignored (e.g. gas limit\r\n     *          above the current block gas limit).\r\n     */\r\n    function requestCallbackRebroadcast(\r\n        bytes32 _queryId,\r\n        uint256 _gasLimit,\r\n        uint256 _gasPrice\r\n    )\r\n        payable\r\n        external\r\n    {\r\n        uint256 ethCost = getRebroadcastCost(\r\n            _gasLimit,\r\n            _gasPrice\r\n        );\r\n\r\n        require (msg.value >= ethCost);\r\n\r\n        if (msg.value > ethCost) {\r\n            msg.sender.transfer(msg.value - ethCost);\r\n        }\r\n\r\n        emit CallbackRebroadcastRequest(\r\n            _queryId,\r\n            _gasLimit,\r\n            _gasPrice\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Fires an event the engine watches for, to notify it to cache the\r\n     *      specified query's parameters. ALL parameters for that specific\r\n     *      query are cached, including timestamps & gas prices. When calling\r\n     *      this function, a queryID needs to be explicitly sent in order to\r\n     *      specify the exact query whose parameters the caller wants cached.\r\n     */\r\n    function requestQueryCaching(\r\n        bytes32 _queryId\r\n    )\r\n        external\r\n    {\r\n        require(requestCounter[msg.sender] > 0);\r\n\r\n        emit EnableCache(\r\n            msg.sender,\r\n            _queryId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev     Function which requests the calling contract's cached query\r\n     *          be processed.\r\n     *\r\n     * @notice  A query must be cached by the sender first. Correct funding\r\n     *          must be provided, or will be ignored by the Provable service.\r\n     *          In order to make query-caching as efficient as possible there\r\n     *          are NO on-chain checks regarding sufficient payment. Thus any\r\n     *          queries found to be under-funded will be dropped by Provable.\r\n     */\r\n    function queryCached()\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        _id = keccak256(\r\n            this,\r\n            msg.sender,\r\n            requestCounter[msg.sender]++\r\n        );\r\n\r\n        emit LogCached(\r\n            msg.sender,\r\n            _id,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice  The following functions provide backwards-compatibility\r\n     *          with previous Provable connectors.\r\n     *\r\n     */\r\n    function setProofType(byte _proofType)\r\n        external\r\n    {\r\n        setCustomProofType(_proofType);\r\n    }\r\n\r\n    function removeCbAddress(address _callbackAddress)\r\n        external\r\n    {\r\n        removeCallbackAddress(_callbackAddress);\r\n    }\r\n\r\n    function cbAddresses(address _address)\r\n        external\r\n        view\r\n        returns (byte)\r\n    {\r\n        return callbackAddresses[_address];\r\n    }\r\n\r\n\r\n    function cbAddress()\r\n        public\r\n        view\r\n        returns (address _callbackAddress)\r\n    {\r\n        if (callbackAddresses[tx.origin] != 0)\r\n            _callbackAddress = tx.origin;\r\n    }\r\n\r\n    function addCbAddress(\r\n        address _newCallbackAddress,\r\n        byte _addressType\r\n    )\r\n        external\r\n    {\r\n        addCallbackAddress(\r\n            _newCallbackAddress,\r\n            _addressType\r\n        );\r\n    }\r\n\r\n    function addCbAddress(\r\n        address _newCallbackAddress,\r\n        byte _addressType,\r\n        bytes _proof\r\n    )\r\n        external\r\n    {\r\n        addCallbackAddress(\r\n            _newCallbackAddress,\r\n            _addressType,\r\n            _proof\r\n        );\r\n    }\r\n\r\n    function addDSource(\r\n        string _datasourceName,\r\n        uint256 _multiplier\r\n    )\r\n        external\r\n    {\r\n        addDatasource(\r\n            _datasourceName,\r\n            _multiplier\r\n        );\r\n    }\r\n\r\n    function multiAddDSource(\r\n        bytes32[] _datasourceHashes,\r\n        uint256[] _multipliers\r\n    )\r\n        external\r\n    {\r\n        multiAddDatasources(\r\n            _datasourceHashes,\r\n            _multipliers\r\n        );\r\n    }\r\n\r\n    function multisetProofType(\r\n        uint256[] _proofTypes,\r\n        address[] _addresses\r\n    )\r\n        external\r\n    {\r\n        multiSetProofTypes(\r\n            _proofTypes,\r\n            _addresses\r\n        );\r\n    }\r\n\r\n    function multisetCustomGasPrice(\r\n        uint256[] _gasPrice,\r\n        address[] _addr\r\n    )\r\n        external\r\n    {\r\n        multiSetCustomGasPrices(\r\n            _gasPrice,\r\n            _addr\r\n        );\r\n    }\r\n\r\n    function randomDS_getSessionPubKeyHash()\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return randomDS_getSessionPublicKeyHash();\r\n    }\r\n\r\n\r\n    function randomDS_updateSessionPubKeysHash(\r\n        bytes32[] _newSessionPublicKeyHash\r\n    )\r\n        external\r\n    {\r\n        randomDS_updateSessionPublicKeyHash(_newSessionPublicKeyHash);\r\n    }\r\n\r\n    function query_withGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(\r\n            _timestamp,\r\n            _datasource,\r\n            _arg,\r\n            _gasLimit\r\n        );\r\n    }\r\n\r\n    function query1_withGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query1(\r\n            _timestamp,\r\n            _datasource,\r\n            _arg,\r\n            _gasLimit\r\n        );\r\n    }\r\n\r\n    function query2_withGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        string _arg1,\r\n        string _arg2,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return query2(\r\n            _timestamp,\r\n            _datasource,\r\n            _arg1,\r\n            _arg2,\r\n            _gasLimit\r\n        );\r\n    }\r\n\r\n    function queryN_withGasLimit(\r\n        uint256 _timestamp,\r\n        string _datasource,\r\n        bytes _args,\r\n        uint256 _gasLimit\r\n    )\r\n        payable\r\n        external\r\n        returns (bytes32 _id)\r\n    {\r\n        return queryN(\r\n            _timestamp,\r\n            _datasource,\r\n            _args,\r\n            _gasLimit\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"revokeTokenWhitelisting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceHash\",\"type\":\"bytes32[]\"},{\"name\":\"_multiplier\",\"type\":\"uint256[]\"}],\"name\":\"multiAddDatasources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"requestQueryCaching\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOriginCallbackAddress\",\"outputs\":[{\"name\":\"_isCallback\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSessionPublicKeyHash\",\"type\":\"bytes32[]\"}],\"name\":\"randomDS_updateSessionPublicKeyHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"amplifiedTokenPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryNWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"queryCached\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"getRebroadcastCost\",\"outputs\":[{\"name\":\"_rebroadcastCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_proofTypes\",\"type\":\"bytes1[]\"},{\"name\":\"_gasPrices\",\"type\":\"uint256[]\"},{\"name\":\"_offchainPayers\",\"type\":\"bool[]\"},{\"name\":\"_requestCounters\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrateCustomSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"_tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callbackAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_callbackAddress\",\"type\":\"address\"}],\"name\":\"removeCbAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_newAmplifiedTokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenAmplifiedPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"requestCallbackRebroadcast\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSessionPublicKeyHash\",\"type\":\"bytes32[]\"}],\"name\":\"randomDS_updateSessionPubKeysHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceName\",\"type\":\"bytes1\"},{\"name\":\"_proofType\",\"type\":\"bytes1\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addDatasource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCallbackAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"bytes1\"}],\"name\":\"addCbAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDS_sessionPublicKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query1WithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"setProofType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_multipliers\",\"type\":\"uint256[]\"}],\"name\":\"multiAddDSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_callbackAddress\",\"type\":\"address\"}],\"name\":\"removeCallbackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCallbackAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"bytes1\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"addCallbackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryNWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query1_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCallbackAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"bytes1\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"addCbAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"offchainPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFlagger\",\"type\":\"address\"}],\"name\":\"changePaymentFlagger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query2_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenTicker\",\"type\":\"string\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amplifiedTokenPrice\",\"type\":\"uint256\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"uint256[]\"},{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"multiSetProofTypes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceName\",\"type\":\"string\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addDSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query1WithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCallbackAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"bytes1\"}],\"name\":\"addCallbackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetCustomTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_datasourcePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceName\",\"type\":\"string\"},{\"name\":\"_proofType\",\"type\":\"bytes1\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addDatasource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomDS_getSessionPubKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_requestCounters\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrateRequestCounters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomDS_getSessionPublicKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setCustomTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cbAddress\",\"outputs\":[{\"name\":\"_callbackAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryN_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryPriceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"convertToERC20Price\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceName\",\"type\":\"string\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addDatasource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasourceName\",\"type\":\"bytes1\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addDatasource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query2WithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256[]\"},{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"multisetCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256[]\"},{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"multiSetCustomGasPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"cbAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofTypes\",\"type\":\"uint256[]\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"multisetProofType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBasePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setOffchainPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressCustomPaymentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"setCustomProofType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"queryWithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"bytes1\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"query2WithGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"arg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log1_byte\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"arg1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log2_byte\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"LogN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"LogN_byte\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idx_flag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"Emit_OffchainPaymentFlag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"CallbackRebroadcastRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LogTokenWhitelistRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenTicker\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LogTokenWhitelisting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"}],\"name\":\"EnableCache\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogCached\",\"type\":\"event\"}]","ContractName":"Oraclize","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"1333337","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8518ec9b3704fe18800d2c265f69d029b97ac9bf43adc9f10df2e72fafe44d55"}]}