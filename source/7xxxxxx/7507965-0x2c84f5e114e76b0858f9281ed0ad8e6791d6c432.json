{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract LockRequestable {\r\n\r\n        // MEMBERS\r\n        /// @notice  the count of all invocations of `generateLockId`.\r\n        uint256 public lockRequestCount;\r\n\r\n        constructor() public {\r\n                lockRequestCount = 0;\r\n        }\r\n\r\n        // FUNCTIONS\r\n        /** @notice  Returns a fresh unique identifier.\r\n            *\r\n            * @dev the generation scheme uses three components.\r\n            * First, the blockhash of the previous block.\r\n            * Second, the deployed address.\r\n            * Third, the next value of the counter.\r\n            * This ensure that identifiers are unique across all contracts\r\n            * following this scheme, and that future identifiers are\r\n            * unpredictable.\r\n            *\r\n            * @return a 32-byte unique identifier.\r\n            */\r\n        function generateLockId() internal returns (bytes32 lockId) {\r\n                return keccak256(\r\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\r\n                );\r\n        }\r\n}\r\n\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n        // TYPES\r\n        /// @dev  The struct type for pending custodian changes.\r\n        struct CustodianChangeRequest {\r\n                address proposedNew;\r\n        }\r\n\r\n        // MEMBERS\r\n        /// @dev  The address of the account or contract that acts as the custodian.\r\n        address public custodian;\r\n\r\n        /// @dev  The map of lock ids to pending custodian changes.\r\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n        constructor(address _custodian) public LockRequestable() {\r\n                custodian = _custodian;\r\n        }\r\n\r\n        // MODIFIERS\r\n        modifier onlyCustodian {\r\n                require(msg.sender == custodian);\r\n                _;\r\n        }\r\n\r\n        /** @notice  Requests a change of the custodian associated with this contract.\r\n            *\r\n            * @dev  Returns a unique lock id associated with the request.\r\n            * Anyone can call this function, but confirming the request is authorized\r\n            * by the custodian.\r\n            *\r\n            * @param  _proposedCustodian  The address of the new custodian.\r\n            * @return  lockId  A unique identifier for this request.\r\n            */\r\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n                require(_proposedCustodian != address(0));\r\n\r\n                lockId = generateLockId();\r\n\r\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n                        proposedNew: _proposedCustodian\r\n                });\r\n\r\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n        }\r\n\r\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\r\n            *\r\n            * @dev  When called by the current custodian with a lock id associated with a\r\n            * pending custodian change, the `address custodian` member will be updated with the\r\n            * requested address.\r\n            *\r\n            * @param  _lockId  The identifier of a pending change request.\r\n            */\r\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n                custodian = getCustodianChangeReq(_lockId);\r\n\r\n                delete custodianChangeReqs[_lockId];\r\n\r\n                emit CustodianChangeConfirmed(_lockId, custodian);\r\n        }\r\n\r\n        // PRIVATE FUNCTIONS\r\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n\r\n                // reject ‘null’ results from the map lookup\r\n                // this can only be the case if an unknown `_lockId` is received\r\n                require(changeRequest.proposedNew != address(0));\r\n\r\n                return changeRequest.proposedNew;\r\n        }\r\n\r\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\r\n        event CustodianChangeRequested(\r\n                bytes32 _lockId,\r\n                address _msgSender,\r\n                address _proposedCustodian\r\n        );\r\n\r\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\r\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\ninterface ServiceRegistry {\r\n    function getService(string calldata _name) external view returns (address);\r\n}\r\n\r\ncontract ServiceDiscovery {\r\n    ServiceRegistry internal services;\r\n\r\n    constructor(ServiceRegistry _services) public {\r\n        services = ServiceRegistry(_services);\r\n    }\r\n}\r\n\r\ncontract KnowYourCustomer is CustodianUpgradeable {\r\n\r\n    enum Status {\r\n        none,\r\n        passed,\r\n        suspended\r\n    }\r\n\r\n    struct Customer {\r\n        Status status;\r\n        mapping(string => string) fields;\r\n    }\r\n    \r\n    event ProviderAuthorized(address indexed _provider, string _name);\r\n    event ProviderRemoved(address indexed _provider, string _name);\r\n    event CustomerApproved(address indexed _customer, address indexed _provider);\r\n    event CustomerSuspended(address indexed _customer, address indexed _provider);\r\n    event CustomerFieldSet(address indexed _customer, address indexed _field, string _name);\r\n\r\n    mapping(address => bool) private providers;\r\n    mapping(address => Customer) private customers;\r\n\r\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\r\n        customers[_custodian].status = Status.passed;\r\n        customers[_custodian].fields[\"type\"] = \"custodian\";\r\n        emit CustomerApproved(_custodian, msg.sender);\r\n        emit CustomerFieldSet(_custodian, msg.sender, \"type\");\r\n    }\r\n\r\n    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {\r\n        require(providers[_provider] == false, \"provider must not exist\");\r\n        providers[_provider] = true;\r\n        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;\r\n        emit ProviderAuthorized(_provider, name);\r\n    }\r\n\r\n    function providerRemove(address _provider, string calldata name) external onlyCustodian {\r\n        require(providers[_provider] == true, \"provider must exist\");\r\n        delete providers[_provider];\r\n        emit ProviderRemoved(_provider, name);\r\n    }\r\n\r\n    function hasWritePermissions(address _provider) external view returns (bool) {\r\n        return _provider == custodian || providers[_provider] == true;\r\n    }\r\n\r\n    function getCustomerStatus(address _customer) external view returns (Status) {\r\n        return customers[_customer].status;\r\n    }\r\n\r\n    function getCustomerField(address _customer, string calldata _field) external view returns (string memory) {\r\n        return customers[_customer].fields[_field];\r\n    }\r\n\r\n    function approveCustomer(address _customer) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.passed, \"customer must not be approved before\");\r\n        customers[_customer].status = Status.passed;\r\n        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;\r\n        emit CustomerApproved(_customer, msg.sender);\r\n    }\r\n\r\n    function setCustomerField(address _customer, string calldata _field, string calldata _value) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.none, \"customer must have a set status\");\r\n        customers[_customer].fields[_field] = _value;\r\n        emit CustomerFieldSet(_customer, msg.sender, _field);\r\n    }\r\n\r\n    function suspendCustomer(address _customer) external onlyAuthorized {\r\n        Status status = customers[_customer].status;\r\n        require(status != Status.suspended, \"customer must be not suspended\");\r\n        customers[_customer].status = Status.suspended;\r\n        emit CustomerSuspended(_customer, msg.sender);\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == custodian || providers[msg.sender] == true);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TokenSettingsInterface {\r\n\r\n    // METHODS\r\n    function getTradeAllowed() public view returns (bool);\r\n    function getMintAllowed() public view returns (bool);\r\n    function getBurnAllowed() public view returns (bool);\r\n    \r\n    // EVENTS\r\n    event TradeAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event TradeAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n    event MintAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event MintAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n    event BurnAllowedLocked(bytes32 _lockId, bool _newValue);\r\n    event BurnAllowedConfirmed(bytes32 _lockId, bool _newValue);\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract _BurnAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:IV. BurnAllowed Setting#2;Burn Allowed Switch;1;\r\n    //\r\n    // SETTING: Burn Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables token minting ability globally (even for custodian).\r\n    //\r\n    bool private burnAllowed = false;\r\n\r\n    function getBurnAllowed() public view returns (bool) {\r\n        return burnAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingBurnAllowed {\r\n        bool burnAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingBurnAllowed) public pendingBurnAllowedMap;\r\n\r\n    function requestBurnAllowedChange(bool _burnAllowed) public returns (bytes32 lockId) {\r\n       require(_burnAllowed != burnAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({\r\n           burnAllowed: _burnAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit BurnAllowedLocked(lockId, _burnAllowed);\r\n    }\r\n\r\n    function confirmBurnAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        burnAllowed = value.burnAllowed;\r\n        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);\r\n        delete pendingBurnAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\n\r\ncontract _MintAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:III. MintAllowed Setting#2;Mint Allowed Switch;1;\r\n    //\r\n    // SETTING: Mint Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables token minting ability globally (even for custodian).\r\n    //\r\n    bool private mintAllowed = false;\r\n\r\n    function getMintAllowed() public view returns (bool) {\r\n        return mintAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingMintAllowed {\r\n        bool mintAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingMintAllowed) public pendingMintAllowedMap;\r\n\r\n    function requestMintAllowedChange(bool _mintAllowed) public returns (bytes32 lockId) {\r\n       require(_mintAllowed != mintAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingMintAllowedMap[lockId] = PendingMintAllowed({\r\n           mintAllowed: _mintAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit MintAllowedLocked(lockId, _mintAllowed);\r\n    }\r\n\r\n    function confirmMintAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        mintAllowed = value.mintAllowed;\r\n        emit MintAllowedConfirmed(_lockId, value.mintAllowed);\r\n        delete pendingMintAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\n\r\ncontract _TradeAllowed is TokenSettingsInterface, LockRequestable {\r\n    // cc:II. TradeAllowed Setting#2;Trade Allowed Switch;1;\r\n    //\r\n    // SETTING: Trade Allowed Switch (bool)\r\n    // Boundary: true or false\r\n    //\r\n    // Enables or disables all token transfers, between any recipients, except mint and burn operations.\r\n    //\r\n    bool private tradeAllowed = false;\r\n\r\n    function getTradeAllowed() public view returns (bool) {\r\n        return tradeAllowed;\r\n    }\r\n\r\n    // SETTING MANAGEMENT\r\n\r\n    struct PendingTradeAllowed {\r\n        bool tradeAllowed;\r\n        bool set;\r\n    }\r\n\r\n    mapping (bytes32 => PendingTradeAllowed) public pendingTradeAllowedMap;\r\n\r\n    function requestTradeAllowedChange(bool _tradeAllowed) public returns (bytes32 lockId) {\r\n       require(_tradeAllowed != tradeAllowed);\r\n       \r\n       lockId = generateLockId();\r\n       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({\r\n           tradeAllowed: _tradeAllowed,\r\n           set: true\r\n       });\r\n\r\n       emit TradeAllowedLocked(lockId, _tradeAllowed);\r\n    }\r\n\r\n    function confirmTradeAllowedChange(bytes32 _lockId) public onlyCustodian {\r\n        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];\r\n        require(value.set == true);\r\n        tradeAllowed = value.tradeAllowed;\r\n        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);\r\n        delete pendingTradeAllowedMap[_lockId];\r\n    }\r\n}\r\n\r\ncontract TokenSettings is TokenSettingsInterface, CustodianUpgradeable,\r\n_TradeAllowed,\r\n_MintAllowed,\r\n_BurnAllowed\r\n    {\r\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenController implements restriction logic for BaseSecurityToken.\r\n * @dev see https://eips.ethereum.org/EIPS/eip-1462\r\n */\r\ncontract TokenController is CustodianUpgradeable, ServiceDiscovery {\r\n    constructor(address _custodian, ServiceRegistry _services) public\r\n    CustodianUpgradeable(_custodian) ServiceDiscovery(_services) {\r\n    }\r\n\r\n    // Use status codes from:\r\n    // https://eips.ethereum.org/EIPS/eip-1066\r\n    byte private constant STATUS_ALLOWED = 0x11;\r\n\r\n    function checkTransferAllowed(address _from, address _to, uint256) public view returns (byte) {\r\n        require(_settings().getTradeAllowed(), \"global trade must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\r\n        require(_kyc().getCustomerStatus(_to) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\r\n\r\n        // TODO:\r\n        // Check user's region\r\n        // Check amount for transfer limits\r\n\r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkTransferFromAllowed(address _from, address _to, uint256 _amount) external view returns (byte) {\r\n        return checkTransferAllowed(_from, _to, _amount);\r\n    }\r\n   \r\n    function checkMintAllowed(address _from, uint256) external view returns (byte) {\r\n        require(_settings().getMintAllowed(), \"global mint must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"recipient does not have valid KYC status\");\r\n        \r\n        return STATUS_ALLOWED;\r\n    }\r\n   \r\n    function checkBurnAllowed(address _from, uint256) external view returns (byte) {\r\n        require(_settings().getBurnAllowed(), \"global burn must be allowed\");\r\n        require(_kyc().getCustomerStatus(_from) == KnowYourCustomer.Status.passed, \"sender does not have valid KYC status\");\r\n\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n    function _settings() private view returns (TokenSettings) {\r\n        return TokenSettings(services.getService(\"token/settings\"));\r\n    }\r\n\r\n    function _kyc() private view returns (KnowYourCustomer) {\r\n        return KnowYourCustomer(services.getService(\"validators/kyc\"));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkBurnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_services\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]","ContractName":"TokenController","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f000000000000000000000000673b6f0c00a4700b7616808adb380ac2ac91ebda","Library":"","SwarmSource":"bzzr://2771c18cd2b8d30129d89e8b5b0bf9de19d6cc893c9f7a29ea629a3ff7694e66"}]}