{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Trickle {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event AgreementCreated(uint256 indexed agreementId, address token, address indexed recipient, address indexed sender, uint256 start, uint256 duration, uint256 totalAmount, uint256 createdAt);\r\n    event AgreementCancelled(uint256 indexed agreementId, address token, address indexed recipient, address indexed sender, uint256 start, uint256 amountReleased, uint256 amountCancelled, uint256 endedAt);\r\n    event Withdraw(uint256 indexed agreementId, address token, address indexed recipient, address indexed sender, uint256 amountReleased, uint256 releasedAt);\r\n    \r\n    uint256 private lastAgreementId;\r\n    \r\n    struct Agreement {\r\n        IERC20 token;\r\n        address recipient;\r\n        address sender;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n        bool cancelled;\r\n    }\r\n    \r\n    mapping (uint256 => Agreement) private agreements;\r\n    \r\n    modifier senderOnly(uint256 agreementId) {\r\n        require (msg.sender == agreements[agreementId].sender);\r\n        _;\r\n    }\r\n    \r\n    function createAgreement(IERC20 token, address recipient, uint256 totalAmount, uint256 duration, uint256 start) external {\r\n        require(duration > 0);\r\n        require(totalAmount > 0);\r\n        require(start > 0);\r\n        require(token != IERC20(0x0));\r\n        require(recipient != address(0x0));\r\n        \r\n        uint256 agreementId = ++lastAgreementId;\r\n        \r\n        agreements[agreementId] = Agreement({\r\n            token: token,\r\n            recipient: recipient,\r\n            start: start,\r\n            duration: duration,\r\n            totalAmount: totalAmount,\r\n            sender: msg.sender,\r\n            releasedAmount: 0,\r\n            cancelled: false\r\n        });\r\n        \r\n        token.transferFrom(agreements[agreementId].sender, address(this), agreements[agreementId].totalAmount);\r\n        \r\n        Agreement memory record = agreements[agreementId];\r\n        emit AgreementCreated(\r\n            agreementId,\r\n            address(record.token),\r\n            record.recipient,\r\n            record.sender,\r\n            record.start,\r\n            record.duration,\r\n            record.totalAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function getAgreement(uint256 agreementId) external view returns (\r\n        IERC20 token, \r\n        address recipient, \r\n        address sender, \r\n        uint256 start, \r\n        uint256 duration,\r\n        uint256 totalAmount,\r\n        uint256 releasedAmount,\r\n        bool cancelled\r\n    ) {\r\n        Agreement memory record = agreements[agreementId];\r\n        \r\n        return (record.token, record.recipient, record.sender, record.start, record.duration, record.totalAmount, record.releasedAmount, record.cancelled);\r\n    }\r\n    \r\n    function withdrawTokens(uint256 agreementId) public {\r\n        require(agreementId <= lastAgreementId && agreementId != 0, \"Invalid agreement specified\");\r\n\r\n        Agreement storage record = agreements[agreementId];\r\n        \r\n        require(!record.cancelled);\r\n\r\n        uint256 unreleased = withdrawAmount(agreementId);\r\n        require(unreleased > 0);\r\n\r\n        record.releasedAmount = record.releasedAmount.add(unreleased);\r\n        record.token.transfer(record.recipient, unreleased);\r\n        \r\n        emit Withdraw(\r\n            agreementId,\r\n            address(record.token),\r\n            record.recipient,\r\n            record.sender,\r\n            unreleased,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function cancelAgreement(uint256 agreementId) senderOnly(agreementId) external {\r\n        Agreement storage record = agreements[agreementId];\r\n\r\n        require(!record.cancelled);\r\n\r\n        if (withdrawAmount(agreementId) > 0) {\r\n            withdrawTokens(agreementId);\r\n        }\r\n        \r\n        uint256 releasedAmount = record.releasedAmount;\r\n        uint256 cancelledAmount = record.totalAmount.sub(releasedAmount); \r\n        \r\n        record.token.transfer(record.sender, cancelledAmount);\r\n        record.cancelled = true;\r\n        \r\n        emit AgreementCancelled(\r\n            agreementId,\r\n            address(record.token),\r\n            record.recipient,\r\n            record.sender,\r\n            record.start,\r\n            releasedAmount,\r\n            cancelledAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function withdrawAmount (uint256 agreementId) private view returns (uint256) {\r\n        return availableAmount(agreementId).sub(agreements[agreementId].releasedAmount);\r\n    }\r\n    \r\n    function availableAmount(uint256 agreementId) private view returns (uint256) {\r\n        if (block.timestamp >= agreements[agreementId].start.add(agreements[agreementId].duration)) {\r\n            return agreements[agreementId].totalAmount;\r\n        } else if (block.timestamp <= agreements[agreementId].start) {\r\n            return 0;\r\n        } else {\r\n            return agreements[agreementId].totalAmount.mul(\r\n                block.timestamp.sub(agreements[agreementId].start)\r\n            ).div(agreements[agreementId].duration);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"getAgreement\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"cancelled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"cancelAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"createAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountCancelled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"AgreementCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasedAt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"Trickle","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07e7e041252592badc8582fecb149aa2f821e734636b23f3e8646dd158a83589"}]}