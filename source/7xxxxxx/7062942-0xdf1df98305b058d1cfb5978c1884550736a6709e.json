{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TeamInterface {\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function isAdmin(address _sender) external view returns (bool);\r\n\r\n    function isDev(address _sender) external view returns (bool);\r\n\r\n}\r\n\r\ninterface WorksInterface {\r\n\r\n    function addWorks(\r\n        bytes32 _worksID,\r\n        bytes32 _artistID, \r\n        uint8 _debrisNum, \r\n        uint256 _price, \r\n        uint256 _beginTime\r\n    ) \r\n        external;\r\n\r\n    function configRule(\r\n        bytes32 _worksID,\r\n        uint8 _firstBuyLimit, \r\n        uint256 _freezeGap, \r\n        uint256 _protectGap, \r\n        uint256 _increaseRatio,\r\n        uint256 _discountGap, \r\n        uint256 _discountRatio, \r\n\r\n        uint8[3] calldata _firstAllot, \r\n        uint8[3] calldata _againAllot, \r\n        uint8[3] calldata _lastAllot \r\n    ) \r\n        external;\r\n\r\n    function publish(bytes32 _worksID, uint256 _beginTime) external;\r\n\r\n    function close(bytes32 _worksID) external;\r\n\r\n    function getWorks(bytes32 _worksID) external view returns (uint8, uint256, uint256, uint256, bool);\r\n\r\n    function getDebris(bytes32 _worksID, uint8 _debrisID) external view \r\n        returns (uint256, address, address, bytes32, bytes32, uint256);\r\n\r\n    function getRule(bytes32 _worksID) external view \r\n        returns (uint8, uint256, uint256, uint256, uint256, uint256, uint8[3] memory, uint8[3] memory, uint8[3] memory);\r\n\r\n    function hasWorks(bytes32 _worksID) external view returns (bool);\r\n\r\n    function hasDebris(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\r\n\r\n    function isPublish(bytes32 _worksID) external view returns (bool);\r\n\r\n    function isStart(bytes32 _worksID) external view returns (bool);\r\n\r\n    function isProtect(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\r\n\r\n    function isSecond(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\r\n\r\n    function isGameOver(bytes32 _worksID) external view returns (bool);\r\n    \r\n    function isFinish(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\r\n\r\n    function hasFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\r\n\r\n    function hasSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\r\n\r\n    function getFirstUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\r\n\r\n    function getSecondUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\r\n\r\n    function getPrice(bytes32 _worksID) external view returns (uint256);\r\n\r\n    function getDebrisPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\r\n\r\n    function getDebrisStatus(bytes32 _worksID, uint8 _debrisID) external view returns (uint256[4] memory, uint256, bytes32);\r\n\r\n    function getInitPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\r\n\r\n    function getLastPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\r\n\r\n    function getLastBuyer(bytes32 _worksID, uint8 _debrisID) external view returns (address payable);\r\n\r\n    function getLastUnionId(bytes32 _worksID, uint8 _debrisID) external view returns (bytes32);\r\n\r\n    function getFreezeGap(bytes32 _worksID) external view returns (uint256);\r\n\r\n    function getFirstBuyLimit(bytes32 _worksID) external view returns (uint256);\r\n\r\n    function getArtistId(bytes32 _worksID) external view returns (bytes32);\r\n\r\n    function getDebrisNum(bytes32 _worksID) external view returns (uint8);\r\n\r\n    function getAllot(bytes32 _worksID, uint8 _flag) external view returns (uint8[3] memory);\r\n\r\n    function getAllot(bytes32 _worksID, uint8 _flag, uint8 _element) external view returns (uint8);\r\n\r\n    function getPools(bytes32 _worksID) external view returns (uint256);\r\n\r\n    function getPoolsAllot(bytes32 _worksID) external view returns (uint256, uint256[3] memory, uint8[3] memory);\r\n\r\n    function getStartHourglass(bytes32 _worksID) external view returns (uint256);\r\n\r\n    function getWorksStatus(bytes32 _worksID) external view returns (uint256, uint256, uint256, bytes32);\r\n\r\n    function getProtectHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\r\n\r\n    function getDiscountHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\r\n\r\n    function updateDebris(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\r\n\r\n    function updateFirstBuyer(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\r\n\r\n    function updateBuyNum(bytes32 _worksID, uint8 _debrisID) external;\r\n\r\n    function finish(bytes32 _worksID, bytes32 _unionID) external;\r\n\r\n    function updatePools(bytes32 _worksID, uint256 _value) external;\r\n\r\n    function updateFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external;\r\n\r\n    function updateSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external;\r\n\r\n }\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n\r\n} \r\n\r\nlibrary Datasets {\r\n\r\n    struct Player {\r\n        address[] ethAddress; \r\n        bytes32 referrer; \r\n        address payable lastAddress; \r\n        uint256 time;\r\n    }\r\n\r\n    struct MyWorks { \r\n        address ethAddress; \r\n        bytes32 worksID; \r\n        uint256 totalInput; \r\n        uint256 totalOutput; \r\n        uint256 time; \r\n    }\r\n\r\n\r\n    struct Works {\r\n        bytes32 worksID; \r\n        bytes32 artistID; \r\n        uint8 debrisNum; \r\n        uint256 price; \r\n        uint256 beginTime; \r\n        uint256 endTime;\r\n        bool isPublish; \r\n        bytes32 lastUnionID;\r\n    }\r\n\r\n    struct Debris {\r\n        uint8 debrisID; \r\n        bytes32 worksID; \r\n        uint256 initPrice; \r\n        uint256 lastPrice; \r\n        uint256 buyNum; \r\n        address payable firstBuyer; \r\n        address payable lastBuyer; \r\n        bytes32 firstUnionID; \r\n        bytes32 lastUnionID; \r\n        uint256 lastTime; \r\n    }\r\n    \r\n    struct Rule {       \r\n        uint8 firstBuyLimit; \r\n        uint256 freezeGap; \r\n        uint256 protectGap; \r\n        uint256 increaseRatio;\r\n        uint256 discountGap; \r\n        uint256 discountRatio; \r\n\r\n        uint8[3] firstAllot; \r\n        uint8[3] againAllot;\r\n        uint8[3] lastAllot; \r\n    }\r\n\r\n    struct PlayerCount {\r\n        uint256 lastTime; \r\n        uint256 firstBuyNum; \r\n        uint256 firstAmount; \r\n        uint256 secondAmount; \r\n        uint256 rewardAmount;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Player Contract\r\n * @dev http://www.puzzlebid.com/\r\n * @author PuzzleBID Game Team \r\n * @dev Simon<vsiryxm@163.com>\r\n */\r\ncontract Player {\r\n\r\n    using SafeMath for *;\r\n\r\n    TeamInterface private team; \r\n    WorksInterface private works; \r\n    \r\n    constructor(address _teamAddress, address _worksAddress) public {\r\n        require(_teamAddress != address(0) && _worksAddress != address(0));\r\n        team = TeamInterface(_teamAddress);\r\n        works = WorksInterface(_worksAddress);\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    event OnUpgrade(address indexed _teamAddress, address indexed _worksAddress);\r\n    event OnRegister(\r\n        address indexed _address, \r\n        bytes32 _unionID, \r\n        bytes32 _referrer, \r\n        uint256 time\r\n    );\r\n    event OnUpdateLastAddress(bytes32 _unionID, address indexed _sender);\r\n    event OnUpdateLastTime(bytes32 _unionID, bytes32 _worksID, uint256 _time);\r\n    event OnUpdateFirstBuyNum(bytes32 _unionID, bytes32 _worksID, uint256 _firstBuyNum);\r\n    event OnUpdateSecondAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\r\n    event OnUpdateFirstAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\r\n    event OnUpdateReinvest(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\r\n    event OnUpdateRewardAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\r\n    event OnUpdateMyWorks(\r\n        bytes32 _unionID, \r\n        address indexed _address, \r\n        bytes32 _worksID, \r\n        uint256 _totalInput, \r\n        uint256 _totalOutput,\r\n        uint256 _time\r\n    );\r\n\r\n    mapping(bytes32 => Datasets.Player) private playersByUnionId; \r\n    mapping(address => bytes32) private playersByAddress; \r\n    address[] private playerAddressSets; \r\n    bytes32[] private playersUnionIdSets; \r\n\r\n    mapping(bytes32 => mapping(bytes32 => Datasets.PlayerCount)) playerCount;\r\n\r\n   mapping(bytes32 => mapping(bytes32 => Datasets.MyWorks)) myworks; \r\n    \r\n    modifier onlyAdmin() {\r\n        require(team.isAdmin(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDev() {\r\n        require(team.isDev(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function upgrade(address _teamAddress, address _worksAddress) external onlyAdmin() {\r\n        require(_teamAddress != address(0) && _worksAddress != address(0));\r\n        team = TeamInterface(_teamAddress);\r\n        works = WorksInterface(_worksAddress);\r\n        emit OnUpgrade(_teamAddress, _worksAddress);\r\n    }\r\n\r\n\r\n    function hasAddress(address _address) external view returns (bool) {\r\n        bool has = false;\r\n        for(uint256 i=0; i<playerAddressSets.length; i++) {\r\n            if(playerAddressSets[i] == _address) {\r\n                has = true;\r\n                break;\r\n            }\r\n        }\r\n        return has;\r\n    }\r\n\r\n    function hasUnionId(bytes32 _unionID) external view returns (bool) {\r\n        bool has = false;\r\n        for(uint256 i=0; i<playersUnionIdSets.length; i++) {\r\n            if(playersUnionIdSets[i] == _unionID) {\r\n                has = true;\r\n                break;\r\n            }\r\n        }\r\n        return has;\r\n    }\r\n\r\n    function getInfoByUnionId(bytes32 _unionID) external view returns (address payable, bytes32, uint256) {\r\n        return (\r\n            playersByUnionId[_unionID].lastAddress,\r\n            playersByUnionId[_unionID].referrer, \r\n            playersByUnionId[_unionID].time\r\n        );\r\n    }\r\n\r\n    function getUnionIdByAddress(address _address) external view returns (bytes32) {\r\n        return playersByAddress[_address];\r\n    }\r\n\r\n    function isFreeze(bytes32 _unionID, bytes32 _worksID) external view returns (bool) {\r\n        uint256 freezeGap = works.getFreezeGap(_worksID);\r\n        return playerCount[_unionID][_worksID].lastTime.add(freezeGap) < now ? false : true;\r\n    }\r\n\r\n    function getFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\r\n        return playerCount[_unionID][_worksID].firstBuyNum;\r\n    }\r\n\r\n    function getSecondAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\r\n        return playerCount[_unionID][_worksID].secondAmount;\r\n    }\r\n\r\n    function getFirstAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\r\n        return playerCount[_unionID][_worksID].firstAmount;\r\n    }\r\n\r\n    function getLastAddress(bytes32 _unionID) external view returns (address payable) {\r\n        return playersByUnionId[_unionID].lastAddress;\r\n    }\r\n\r\n    function getRewardAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\r\n        return playerCount[_unionID][_worksID].rewardAmount;\r\n    }\r\n\r\n    function getFreezeHourglass(bytes32 _unionID, bytes32 _worksID) external view returns(uint256) {\r\n        uint256 freezeGap = works.getFreezeGap(_worksID);\r\n        if(playerCount[_unionID][_worksID].lastTime.add(freezeGap) > now) {\r\n            return playerCount[_unionID][_worksID].lastTime.add(freezeGap).sub(now);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getMyReport(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256) {\r\n        uint256 currInput = 0; \r\n        uint256 currOutput = 0;      \r\n        uint256 currFinishReward = 0; \r\n        uint8 lastAllot = works.getAllot(_worksID, 2, 0); \r\n\r\n        currInput = this.getFirstAmount(_unionID, _worksID).add(this.getSecondAmount(_unionID, _worksID));\r\n        currOutput = this.getRewardAmount(_unionID, _worksID);         \r\n        currFinishReward = this.getRewardAmount(_unionID, _worksID).add(works.getPools(_worksID).mul(lastAllot) / 100);\r\n        return (currInput, currOutput, currFinishReward);\r\n    }\r\n\r\n    function getMyStatus(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return (\r\n            playerCount[_unionID][_worksID].lastTime, \r\n            works.getFreezeGap(_worksID), \r\n            now, \r\n            playerCount[_unionID][_worksID].firstBuyNum,\r\n            works.getFirstBuyLimit(_worksID)\r\n        );\r\n    }\r\n\r\n    function getMyWorks(bytes32 _unionID, bytes32 _worksID) external view returns (address, bytes32, uint256, uint256, uint256) {\r\n        return (\r\n            myworks[_unionID][_worksID].ethAddress,\r\n            myworks[_unionID][_worksID].worksID,\r\n            myworks[_unionID][_worksID].totalInput,\r\n            myworks[_unionID][_worksID].totalOutput,\r\n            myworks[_unionID][_worksID].time\r\n        );\r\n    }\r\n\r\n    function isLegalPlayer(bytes32 _unionID, address _address) external view returns (bool) {\r\n        return (this.hasUnionId(_unionID) || this.hasAddress(_address)) && playersByAddress[_address] == _unionID;\r\n    }\r\n\r\n    function register(bytes32 _unionID, address payable _address, bytes32 _worksID, bytes32 _referrer) external onlyDev() returns (bool) {\r\n        require(_unionID != bytes32(0) && _address != address(0) && _worksID != bytes32(0));\r\n\r\n        if(this.hasAddress(_address)) {\r\n            if(playersByAddress[_address] != _unionID) {\r\n                revert();\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n         \r\n        playersByUnionId[_unionID].ethAddress.push(_address);\r\n        if(_referrer != bytes32(0)) {\r\n            playersByUnionId[_unionID].referrer = _referrer;\r\n        }\r\n        playersByUnionId[_unionID].lastAddress = _address;\r\n        playersByUnionId[_unionID].time = now;\r\n\r\n        playersByAddress[_address] = _unionID;\r\n\r\n        playerAddressSets.push(_address);\r\n        if(this.hasUnionId(_unionID) == false) {\r\n            playersUnionIdSets.push(_unionID);\r\n            playerCount[_unionID][_worksID] = Datasets.PlayerCount(0, 0, 0, 0, 0);\r\n        }\r\n\r\n        emit OnRegister(_address, _unionID, _referrer, now);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateLastAddress(bytes32 _unionID, address payable _sender) external onlyDev() {\r\n        if(playersByUnionId[_unionID].lastAddress != _sender) {\r\n            playersByUnionId[_unionID].lastAddress = _sender;\r\n            emit OnUpdateLastAddress(_unionID, _sender);\r\n        }\r\n    }\r\n\r\n    function updateLastTime(bytes32 _unionID, bytes32 _worksID) external onlyDev() {\r\n        playerCount[_unionID][_worksID].lastTime = now;\r\n        emit OnUpdateLastTime(_unionID, _worksID, now);\r\n    }\r\n\r\n    function updateFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external onlyDev() {\r\n        playerCount[_unionID][_worksID].firstBuyNum = playerCount[_unionID][_worksID].firstBuyNum.add(1);\r\n        emit OnUpdateFirstBuyNum(_unionID, _worksID, playerCount[_unionID][_worksID].firstBuyNum);\r\n    }\r\n\r\n    function updateSecondAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\r\n        playerCount[_unionID][_worksID].secondAmount = playerCount[_unionID][_worksID].secondAmount.add(_amount);\r\n        emit OnUpdateSecondAmount(_unionID, _worksID, _amount);\r\n    }\r\n\r\n    function updateFirstAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\r\n        playerCount[_unionID][_worksID].firstAmount = playerCount[_unionID][_worksID].firstAmount.add(_amount);\r\n        emit OnUpdateFirstAmount(_unionID, _worksID, _amount);\r\n    }\r\n\r\n    function updateRewardAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\r\n        playerCount[_unionID][_worksID].rewardAmount = playerCount[_unionID][_worksID].rewardAmount.add(_amount);\r\n        emit OnUpdateRewardAmount(_unionID, _worksID, _amount);\r\n    }    \r\n\r\n    function updateMyWorks(\r\n        bytes32 _unionID, \r\n        address _address, \r\n        bytes32 _worksID, \r\n        uint256 _totalInput, \r\n        uint256 _totalOutput\r\n    ) external onlyDev() {\r\n        myworks[_unionID][_worksID] = Datasets.MyWorks(_address, _worksID, _totalInput, _totalOutput, now);\r\n        emit OnUpdateMyWorks(_unionID, _address, _worksID, _totalInput, _totalOutput, now);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"updateFirstBuyNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUnionIdByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateFirstAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getMyReport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getMyStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"hasUnionId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"updateLastAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLegalPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"getLastAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFirstAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFreezeHourglass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateSecondAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"isFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_worksAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFirstBuyNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"getInfoByUnionId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getSecondAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"updateLastTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_referrer\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getMyWorks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_totalInput\",\"type\":\"uint256\"},{\"name\":\"_totalOutput\",\"type\":\"uint256\"}],\"name\":\"updateMyWorks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_worksAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_teamAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_worksAddress\",\"type\":\"address\"}],\"name\":\"OnUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnUpdateLastAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnUpdateLastTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_firstBuyNum\",\"type\":\"uint256\"}],\"name\":\"OnUpdateFirstBuyNum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateSecondAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateFirstAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_totalInput\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnUpdateMyWorks\",\"type\":\"event\"}]","ContractName":"Player","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000092b3be4b8ca3b4faaaf9d08ab9a8329465c1bdcc000000000000000000000000c8e5cf09be2483b5486a9b30bca40e00bff685ba","Library":"","SwarmSource":"bzzr://6caccce196f952db14c2924812b485adb9185d06b901b52fcede31890224fcea"}]}