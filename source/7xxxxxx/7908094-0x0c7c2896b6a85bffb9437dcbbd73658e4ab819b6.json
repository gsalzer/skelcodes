{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/SignerRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract SignerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n\r\n    Roles.Role private _signers;\r\n\r\n    constructor () internal {\r\n        _addSigner(msg.sender);\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        require(isSigner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n\r\n    function addSigner(address account) public onlySigner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    function renounceSigner() public {\r\n        _removeSigner(msg.sender);\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract Secondary {\r\n    address private _primary;\r\n\r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n     */\r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called from any account other than the primary.\r\n     */\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the primary.\r\n     */\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers contract to a new primary.\r\n     * @param recipient The address of new primary.\r\n     */\r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0));\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n}\r\n\r\n// File: contracts/CharityVault.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title CharityVault\r\n * @dev Vault which holds the assets until the community leader(s) decide to transfer\r\n * them to the actual charity destination.\r\n * Deposit and withdrawal calls come only from the actual community contract\r\n */\r\ncontract CharityVault is Secondary {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private deposits;\r\n    uint256 public sumStats;\r\n\r\n    event LogEthReceived(\r\n        uint256 amount,\r\n        address indexed account\r\n    );\r\n    event LogEthSent(\r\n        uint256 amount,\r\n        address indexed account\r\n    );\r\n\r\n    /**\r\n    * @dev fallback, 'anonymous' donation\r\n    **/\r\n    function() external payable {\r\n        sumStats.add(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Stores the sent amount as credit to be withdrawn.\r\n     * @param _payee The destination address of the funds.\r\n     */\r\n    function deposit(address _payee) public onlyPrimary payable {\r\n        uint256 _amount = msg.value;\r\n        deposits[_payee] = deposits[_payee].add(_amount);\r\n        sumStats = sumStats.add(_amount);\r\n        emit LogEthReceived(_amount, _payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw some of accumulated balance for a _payee.\r\n     */\r\n    function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {\r\n        require(_payment > 0 && address(this).balance >= _payment, \"Insufficient funds in the charity fund\");\r\n        _payee.transfer(_payment);\r\n        emit LogEthSent(_payment, _payee);\r\n    }\r\n\r\n    function depositsOf(address payee) public view returns (uint256) {\r\n        return deposits[payee];\r\n    }\r\n}\r\n\r\n// File: contracts/DonationCommunity.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DonationCommunity\r\n * @dev Main contract for a charity donation community.\r\n * Creates a corresponding vault for charity and expects a 'smart' bonding vault to be provided\r\n */\r\ncontract DonationCommunity is SignerRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant CHARITY_DISTRIBUTION = 90; //%, the rest funds bonding curve\r\n\r\n    CharityVault public charityVault;\r\n    BondingVaultInterface public bondingVault;\r\n\r\n    event LogDonationReceived\r\n    (\r\n        address from,\r\n        uint256 amount\r\n    );\r\n    event LogTokensSold\r\n    (\r\n        address from,\r\n        uint256 amount\r\n    );\r\n    event LogPassToCharity\r\n    (\r\n        address by,\r\n        address intermediary,\r\n        uint256 amount,\r\n        string ipfsHash\r\n    );\r\n\r\n    /**\r\n    * @dev Default fallback function, just deposits funds to the charity\r\n    */\r\n    function() external payable {\r\n        address(charityVault).transfer(msg.value);\r\n    }\r\n\r\n    constructor (address _bondingVaultAddress) public {\r\n        require(_bondingVaultAddress != address(0));\r\n        charityVault = new CharityVault();\r\n        bondingVault = BondingVaultInterface(_bondingVaultAddress);\r\n    }\r\n\r\n    function donate() public payable {\r\n        require(msg.value > 0, \"Must include some ETH to donate\");\r\n\r\n        uint256 _multiplier = 100;\r\n        uint256 _charityAllocation = (msg.value).mul(CHARITY_DISTRIBUTION).div(_multiplier);\r\n        uint256 _bondingAllocation = msg.value.sub(_charityAllocation);\r\n        charityVault.deposit.value(_charityAllocation)(msg.sender);\r\n\r\n        bondingVault.fundWithAward.value(_bondingAllocation)(msg.sender);\r\n\r\n        emit LogDonationReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function myBuy(uint256 _ethAmount) public view returns (uint256 finalPrice, uint256 tokenAmount) {\r\n        return bondingVault.myBuyPrice(_ethAmount, msg.sender);\r\n    }\r\n\r\n    function myReturn(uint256 _sellAmount) public view returns (uint256 price, uint256 amountOfEth) {\r\n        return returnForAddress(_sellAmount, msg.sender);\r\n    }\r\n\r\n    function returnForAddress(uint256 _sellAmount, address payable _requestedAddress) public view returns (uint256 price, uint256 amountOfEth) {\r\n        return bondingVault.mySellPrice(_sellAmount, _requestedAddress);\r\n    }\r\n\r\n    function sell(uint256 _amount) public {\r\n        bondingVault.sell(_amount, msg.sender);\r\n        emit LogTokensSold(msg.sender, _amount);\r\n    }\r\n\r\n    function sweepBondingVault() public onlySigner {\r\n        bondingVault.sweepVault(msg.sender);\r\n    }\r\n\r\n    function passToCharity(uint256 _amount, address payable _intermediary, string memory _ipfsHash) public onlySigner {\r\n        require(_intermediary != address(0));\r\n        charityVault.withdraw(_intermediary, _amount);\r\n        emit LogPassToCharity(msg.sender, _intermediary, _amount, _ipfsHash);\r\n    }\r\n\r\n    function getCommunityToken() public view returns (address) {\r\n        return bondingVault.getCommunityToken();\r\n    }\r\n\r\n    //Migrations\r\n\r\n    function replaceBuyFormula(address _newBuyFormula) public onlySigner {\r\n        bondingVault.setBuyFormula(_newBuyFormula);\r\n    }\r\n\r\n    function replaceSellFormula(address _newSellFormula) public onlySigner {\r\n        bondingVault.setSellFormula(_newSellFormula);\r\n    }\r\n\r\n    function replaceBondingVault(address _newBondingVault) public onlySigner {\r\n        bondingVault = BondingVaultInterface(_newBondingVault);\r\n    }\r\n\r\n    function replaceCharityVault() public onlySigner {\r\n        charityVault = new CharityVault();\r\n    }\r\n\r\n\r\n}\r\n\r\ninterface BondingVaultInterface {\r\n\r\n    function fundWithAward(address payable _donator) external payable;\r\n\r\n    function sell(uint256 _amount, address payable _donator) external;\r\n\r\n    function getCommunityToken() external view returns (address);\r\n\r\n    function myBuyPrice(uint256 _ethAmount, address payable _donator) external view returns (uint256 _finalPrice, uint256 _tokenAmount);\r\n\r\n    function mySellPrice(uint256 _tokenAmount, address payable _donator) external view returns (uint256 _finalPrice, uint256 _redeemableEth);\r\n\r\n    function sweepVault(address payable _operator) external;\r\n\r\n    function setBuyFormula(address _newBuyFormula) external;\r\n\r\n    function setSellFormula(address _newSellFormula) external;\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"charityVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"replaceCharityVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweepBondingVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_intermediary\",\"type\":\"address\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"passToCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBondingVault\",\"type\":\"address\"}],\"name\":\"replaceBondingVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBuyFormula\",\"type\":\"address\"}],\"name\":\"replaceBuyFormula\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_requestedAddress\",\"type\":\"address\"}],\"name\":\"returnForAddress\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amountOfEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommunityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"myBuy\",\"outputs\":[{\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondingVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHARITY_DISTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellAmount\",\"type\":\"uint256\"}],\"name\":\"myReturn\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amountOfEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSellFormula\",\"type\":\"address\"}],\"name\":\"replaceSellFormula\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bondingVaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"intermediary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"LogPassToCharity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"}]","ContractName":"DonationCommunity","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008f540e6d91ce3296824a4e469ff5f01abf5d700c","Library":"","LicenseType":"None","SwarmSource":"bzzr://1930c5aae58a4b556cd1d5256094265cb9a607e666eb2bc979a78e6f1b148e30"}]}