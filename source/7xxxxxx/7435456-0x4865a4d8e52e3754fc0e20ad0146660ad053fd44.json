{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Sopow {\r\n\r\n    event NewStake(address source, uint256 hash, uint256 value, uint256 target, uint payment);\r\n    event NewMiner(address miner, uint256 hash, uint payment);\r\n    event Status(uint min, uint256 target, uint block);\r\n    event PaidOut(address miner, uint amount);\r\n\r\n    address payable service = 0x935F545C5aA388B6846FB7A4c51ED1b180A4eFFF;\r\n\r\n    //Set initial values\r\n    uint min = 1 wei;\r\n    uint finalBlock = 100000000;\r\n    uint lastBlock = 7000000;\r\n    address payable miner = 0x0000000000000000000000000000000000000000;\r\n    uint256 target = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 total = 0;\r\n\r\n    function getTargetAmount() public view returns(uint) {\r\n        return min;\r\n    }\r\n\r\n    function getPayment() public view returns(uint) {\r\n        uint _total = getPreviousBalance();\r\n        return (_total / 2) + (_total / 4);\r\n    }\r\n\r\n    function getTarget() public view returns(uint) {\r\n        return target;\r\n    }\r\n\r\n    function getMiner() public view returns(address) {\r\n        return miner;\r\n    }\r\n\r\n    function getFinalBlock() public view returns(uint) {\r\n        return finalBlock;\r\n    }\r\n\r\n\r\n    function getTotal() public view returns(uint) {\r\n        return total;\r\n    }\r\n\r\n    // ---\r\n\r\n    function getPreviousBalance() private view returns(uint) {\r\n        return address(this).balance - msg.value;\r\n    }\r\n\r\n    function isFinished() private view returns(bool) {\r\n        return block.number >= getFinalBlock();\r\n    }\r\n\r\n    function tooLate() private view returns(bool) {\r\n        return block.number >= getFinalBlock() + 11000;\r\n    }\r\n\r\n    function work(uint _target, uint _total, uint _miner, uint _value) private pure returns(uint) {\r\n        return uint256(keccak256(abi.encodePacked(_target, _total, _miner, _value))) - _value;\r\n    }\r\n\r\n    function getNextPayment() private view returns(uint) {\r\n        uint _total = address(this).balance;\r\n        return (_total / 2) + (_total / 4);\r\n    }\r\n\r\n\r\n    // ---\r\n\r\n    function () external payable {\r\n        if (msg.sender != tx.origin) {\r\n            return;\r\n        }\r\n        payout();\r\n        uint _nextMinerPayment = getNextPayment();\r\n        uint _stake = msg.value;\r\n        uint _hash = work(target, total, uint256(miner), _stake);\r\n        emit NewStake(msg.sender, _hash, _stake, target, _nextMinerPayment);\r\n        if (_stake < min) {\r\n            return;\r\n        }\r\n        if (_hash < target) {\r\n            target = _hash;\r\n            miner = msg.sender;\r\n            min = _stake;\r\n            finalBlock = block.number + (block.number - lastBlock) + 42;\r\n            if (finalBlock > (block.number + 11000)) {\r\n                finalBlock =  block.number + 11000;\r\n            }\r\n            lastBlock = block.number;\r\n            total += _stake;\r\n            emit NewMiner(miner, target, _nextMinerPayment);\r\n            emit Status(min, target, finalBlock);\r\n        }\r\n    }\r\n\r\n    function payout() public {\r\n        if (!isFinished()) {\r\n            return;\r\n        }\r\n        // if nobody requested payout for more than 11000 blocks\r\n        if (tooLate()) {\r\n            service.transfer(getPreviousBalance() / 2);\r\n            min = min / 2;\r\n            target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n            lastBlock  = block.number - 11000;\r\n            finalBlock = block.number + 11000;\r\n            return;\r\n        }\r\n        uint _total = getPreviousBalance();\r\n        uint _payment = getPayment();\r\n        uint _fee = _total / 8;\r\n        miner.transfer(_payment);\r\n        service.transfer(_fee);\r\n        emit PaidOut(miner, _payment);\r\n        min = _total / 64;\r\n        target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        lastBlock  = block.number - 11000;\r\n        finalBlock = block.number + 11000;\r\n        total = 0;\r\n        emit Status(min, target, finalBlock);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"NewMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"}]","ContractName":"Sopow","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://76a3e6b8c141e3ad543399991fd4828fdff06148d41766c8dcbd2589f77890dc"}]}