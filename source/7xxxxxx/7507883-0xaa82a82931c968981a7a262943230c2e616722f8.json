{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Sender not authorised.\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n    @title ItMap, a solidity iterable map\r\n    @dev Credit to: https://gist.github.com/ethers/7e6d443818cbc9ad2c38efa7c0f363d1\r\n */\r\nlibrary itmap {\r\n    struct entry {\r\n        // Equal to the index of the key of this item in keys, plus 1.\r\n        uint keyIndex;\r\n        uint value;\r\n    }\r\n\r\n    struct itmap {\r\n        mapping(uint => entry) data;\r\n        uint[] keys;\r\n    }\r\n    \r\n    function insert(itmap storage self, uint key, uint value) internal returns (bool replaced) {\r\n        entry storage e = self.data[key];\r\n        e.value = value;\r\n        if (e.keyIndex > 0) {\r\n            return true;\r\n        } else {\r\n            e.keyIndex = ++self.keys.length;\r\n            self.keys[e.keyIndex - 1] = key;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function remove(itmap storage self, uint key) internal returns (bool success) {\r\n        entry storage e = self.data[key];\r\n\r\n        if (e.keyIndex == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (e.keyIndex < self.keys.length) {\r\n            // Move an existing element into the vacated key slot.\r\n            self.data[self.keys[self.keys.length - 1]].keyIndex = e.keyIndex;\r\n            self.keys[e.keyIndex - 1] = self.keys[self.keys.length - 1];\r\n        }\r\n\r\n        self.keys.length -= 1;\r\n        delete self.data[key];\r\n        return true;\r\n    }\r\n    \r\n    function contains(itmap storage self, uint key) internal constant returns (bool exists) {\r\n        return self.data[key].keyIndex > 0;\r\n    }\r\n    \r\n    function size(itmap storage self) internal constant returns (uint) {\r\n        return self.keys.length;\r\n    }\r\n    \r\n    function get(itmap storage self, uint key) internal constant returns (uint) {\r\n        return self.data[key].value;\r\n    }\r\n    \r\n    function getKey(itmap storage self, uint idx) internal constant returns (uint) {\r\n        return self.keys[idx];\r\n    }\r\n}\r\n\r\n/**\r\n    @title OwnersReceiver\r\n    @dev PoolOwners supporting receiving contract\r\n */\r\ncontract OwnersReceiver {\r\n    function onOwnershipTransfer(address _sender, uint _value, bytes _data) public;\r\n    function onOwnershipStake(address _sender, uint _value, bytes _data) public;\r\n    function onOwnershipStakeRemoval(address _sender, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n    @title PoolOwners\r\n    @dev ERC20 token distribution to holders based on share ownership\r\n */\r\ncontract PoolOwners is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using itmap for itmap.itmap;\r\n\r\n    itmap.itmap private ownerMap;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => mapping(address => uint256)) public stakes;\r\n    mapping(address => uint256) public stakeTotals;\r\n    mapping(address => bool) public tokenWhitelist;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) public distributionMinimum;\r\n    \r\n    uint256 public totalContributed = 0;\r\n    uint256 public precisionMinimum = 0.04 ether;\r\n    uint256 private valuation = 4000 ether;\r\n    uint256 private hardCap = 1000 ether;\r\n    uint256 private distribution = 1;\r\n    \r\n    bool public distributionActive = false;\r\n    bool public locked = false;\r\n    bool private contributionStarted = false;\r\n\r\n    address public wallet;\r\n    address private dToken = address(0);\r\n    \r\n    uint   public constant totalSupply = 4000 ether;\r\n    string public constant name = \"LinkPool Owners\";\r\n    uint8  public constant decimals = 18;\r\n    string public constant symbol = \"LP\";\r\n\r\n    event Contribution(address indexed sender, uint256 share, uint256 amount);\r\n    event TokenDistributionActive(address indexed token, uint256 amount, uint256 amountOfOwners);\r\n    event TokenWithdrawal(address indexed token, address indexed owner, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner, uint256 amount);\r\n    event TokenDistributionComplete(address indexed token, uint amount, uint256 amountOfOwners);\r\n    event OwnershipStaked(address indexed owner, address indexed receiver, uint256 amount);\r\n    event OwnershipStakeRemoved(address indexed owner, address indexed receiver, uint256 amount);\r\n\r\n    modifier onlyPoolOwner() {\r\n        require(ownerMap.get(uint(msg.sender)) != 0, \"You are not authorised to call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier withinPrecision(uint256 _amount) {\r\n        require(_amount > 0, \"Cannot use zero\");\r\n        require(_amount % precisionMinimum == 0, \"Your amount isn't divisible by the minimum precision amount\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev Constructor set set the wallet initally\r\n        @param _wallet Address of the ETH wallet\r\n     */\r\n    constructor(address _wallet) public {\r\n        require(_wallet != address(0), \"The ETH wallet address needs to be set\");\r\n        wallet = _wallet;\r\n        tokenWhitelist[address(0)] = true; // 0x0 treated as ETH\r\n    }\r\n\r\n    /**\r\n        @dev Fallback function, redirects to contribution\r\n        @dev Transfers tokens to the wallet address\r\n     */\r\n    function() public payable {\r\n        if (!locked) {\r\n            require(contributionStarted, \"Contribution is not active\");\r\n            require(whitelist[msg.sender], \"You are not whitelisted\");\r\n            contribute(msg.sender, msg.value); \r\n            wallet.transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Manually set a contribution, used by owners to increase owners amounts\r\n        @param _sender The address of the sender to set the contribution for you\r\n        @param _value The amount that the owner has sent\r\n     */\r\n    function addContribution(address _sender, uint256 _value) public onlyOwner() { contribute(_sender, _value); }\r\n\r\n    /**\r\n        @dev Registers a new contribution, sets their share\r\n        @param _sender The address of the wallet contributing\r\n        @param _value The amount that the owner has sent\r\n     */\r\n    function contribute(address _sender, uint256 _value) private withinPrecision(_value) {\r\n        require(_is128Bit(_value), \"Contribution amount isn't 128bit or smaller\");\r\n        require(!locked, \"Crowdsale period over, contribution is locked\");\r\n        require(!distributionActive, \"Cannot contribute when distribution is active\");\r\n        require(_value >= precisionMinimum, \"Amount needs to be above the minimum contribution\");\r\n        require(hardCap >= _value, \"Your contribution is greater than the hard cap\");\r\n        require(hardCap >= totalContributed.add(_value), \"Your contribution would cause the total to exceed the hardcap\");\r\n\r\n        totalContributed = totalContributed.add(_value);\r\n        uint256 share = percent(_value, valuation, 5);\r\n\r\n        uint owner = ownerMap.get(uint(_sender));\r\n        if (owner != 0) { // Existing owner\r\n            share += owner >> 128;\r\n            uint value = (owner << 128 >> 128).add(_value);\r\n            require(ownerMap.insert(uint(_sender), share << 128 | value), \"Sender does not exist in the map\");\r\n        } else { // New owner\r\n            require(!ownerMap.insert(uint(_sender), share << 128 | _value), \"Map replacement detected\");\r\n        }\r\n\r\n        emit Contribution(_sender, share, _value);\r\n    }\r\n\r\n    /**\r\n        @dev Whitelist a wallet address\r\n        @param _owner Wallet of the owner\r\n     */\r\n    function whitelistWallet(address _owner) external onlyOwner() {\r\n        require(!locked, \"Can't whitelist when the contract is locked\");\r\n        require(_owner != address(0), \"Blackhole address\");\r\n        whitelist[_owner] = true;\r\n    }\r\n\r\n    /**\r\n        @dev Start the distribution phase\r\n     */\r\n    function startContribution() external onlyOwner() {\r\n        require(!contributionStarted, \"Contribution has started\");\r\n        contributionStarted = true;\r\n    }\r\n\r\n    /**\r\n        @dev Manually set a share directly, used to set the LinkPool members as owners\r\n        @param _owner Wallet address of the owner\r\n        @param _value The equivalent contribution value\r\n     */\r\n    function setOwnerShare(address _owner, uint256 _value) public onlyOwner() withinPrecision(_value) {\r\n        require(!locked, \"Can't manually set shares, it's locked\");\r\n        require(!distributionActive, \"Cannot set owners share when distribution is active\");\r\n        require(_is128Bit(_value), \"Contribution value isn't 128bit or smaller\");\r\n\r\n        uint owner = ownerMap.get(uint(_owner));\r\n        uint share;\r\n        if (owner == 0) {\r\n            share = percent(_value, valuation, 5);\r\n            require(!ownerMap.insert(uint(_owner), share << 128 | _value), \"Map replacement detected\");\r\n        } else {\r\n            share = (owner >> 128).add(percent(_value, valuation, 5));\r\n            uint value = (owner << 128 >> 128).add(_value);\r\n            require(ownerMap.insert(uint(_owner), share << 128 | value), \"Sender does not exist in the map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Transfer part or all of your ownership to another address\r\n        @param _receiver The address that you're sending to\r\n        @param _amount The amount of ownership to send, for your balance refer to `ownerShareTokens`\r\n     */\r\n    function sendOwnership(address _receiver, uint256 _amount) public onlyPoolOwner() {\r\n        _sendOwnership(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Transfer part or all of your ownership to another address and call the receiving contract\r\n        @param _receiver The address that you're sending to\r\n        @param _amount The amount of ownership to send, for your balance refer to `ownerShareTokens`\r\n     */\r\n    function sendOwnershipAndCall(address _receiver, uint256 _amount, bytes _data) public onlyPoolOwner() {\r\n        _sendOwnership(msg.sender, _receiver, _amount);\r\n        if (_isContract(_receiver)) {\r\n            OwnersReceiver(_receiver).onOwnershipTransfer(msg.sender, _amount, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Transfer part or all of your ownership to another address on behalf of an owner\r\n        @dev Same principle as approval in ERC20, to be used mostly by external contracts, eg DEX's\r\n        @param _owner The address of the owner who's having tokens sent on behalf of\r\n        @param _receiver The address that you're sending to\r\n        @param _amount The amount of ownership to send, for your balance refer to `ownerShareTokens`\r\n     */\r\n    function sendOwnershipFrom(address _owner, address _receiver, uint256 _amount) public {\r\n        require(allowance[_owner][msg.sender] >= _amount, \"Sender is not approved to send ownership of that amount\");\r\n        allowance[_owner][msg.sender] = allowance[_owner][msg.sender].sub(_amount);\r\n        if (allowance[_owner][msg.sender] == 0) {\r\n            delete allowance[_owner][msg.sender];\r\n        }\r\n        _sendOwnership(_owner, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Increase the allowance of a sender\r\n        @param _sender The address of the sender on behalf of the owner\r\n        @param _amount The amount to increase approval by\r\n     */\r\n    function increaseAllowance(address _sender, uint256 _amount) public withinPrecision(_amount) {\r\n        uint o = ownerMap.get(uint(msg.sender));\r\n        require(o << 128 >> 128 >= _amount, \"The amount to increase allowance by is higher than your balance\");\r\n        allowance[msg.sender][_sender] = allowance[msg.sender][_sender].add(_amount);\r\n    }\r\n\r\n    /**\r\n        @dev Decrease the allowance of a sender\r\n        @param _sender The address of the sender on behalf of the owner\r\n        @param _amount The amount to decrease approval by\r\n     */\r\n    function decreaseAllowance(address _sender, uint256 _amount) public withinPrecision(_amount) {\r\n        require(allowance[msg.sender][_sender] >= _amount, \"The amount to decrease allowance by is higher than the current allowance\");\r\n        allowance[msg.sender][_sender] = allowance[msg.sender][_sender].sub(_amount);\r\n        if (allowance[msg.sender][_sender] == 0) {\r\n            delete allowance[msg.sender][_sender];\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Stakes ownership with a contract, locking it from being transferred\r\n        @dev Calls the `onOwnershipStake` implementation on the receiver\r\n        @param _receiver The contract address to receive the stake\r\n        @param _amount The amount to be staked\r\n        @param _data Subsequent data to be sent with the stake\r\n     */\r\n    function stakeOwnership(address _receiver, uint256 _amount, bytes _data) public withinPrecision(_amount) {\r\n        uint o = ownerMap.get(uint(msg.sender));\r\n        require((o << 128 >> 128).sub(stakeTotals[msg.sender]) >= _amount, \"The amount to be staked is higher than your balance\");\r\n        stakeTotals[msg.sender] = stakeTotals[msg.sender].add(_amount);\r\n        stakes[msg.sender][_receiver] = stakes[msg.sender][_receiver].add(_amount);\r\n        OwnersReceiver(_receiver).onOwnershipStake(msg.sender, _amount, _data);\r\n        emit OwnershipStaked(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Removes an ownership stake\r\n        @dev Calls the `onOwnershipStakeRemoval` implementation on the receiver\r\n        @param _receiver The contract address to remove the stake\r\n        @param _amount The amount of the stake to be removed\r\n        @param _data Subsequent data to be sent with the stake\r\n     */\r\n    function removeOwnershipStake(address _receiver, uint256 _amount, bytes _data) public withinPrecision(_amount) {\r\n        require(stakeTotals[msg.sender] >= _amount, \"The stake amount to remove is higher than what's staked\");\r\n        require(stakes[msg.sender][_receiver] >= _amount, \"The stake amount to remove is greater than what's staked with the receiver\");\r\n        stakeTotals[msg.sender] = stakeTotals[msg.sender].sub(_amount);\r\n        stakes[msg.sender][_receiver] = stakes[msg.sender][_receiver].sub(_amount);\r\n        if (stakes[msg.sender][_receiver] == 0) {\r\n            delete stakes[msg.sender][_receiver];\r\n        }\r\n        if (stakeTotals[msg.sender] == 0) {\r\n            delete stakeTotals[msg.sender];\r\n        }\r\n        OwnersReceiver(_receiver).onOwnershipStakeRemoval(msg.sender, _amount, _data);\r\n        emit OwnershipStakeRemoved(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Lock the contribution/shares methods\r\n     */\r\n    function finishContribution() public onlyOwner() {\r\n        require(!locked, \"Shares already locked\");\r\n        locked = true;\r\n    }\r\n\r\n    /**\r\n        @dev Start the distribution phase in the contract so owners can claim their tokens\r\n        @param _token The token address to start the distribution of\r\n     */\r\n    function distributeTokens(address _token) public onlyPoolOwner() {\r\n        require(tokenWhitelist[_token], \"Token is not whitelisted to be distributed\");\r\n        require(!distributionActive, \"Distribution is already active\");\r\n        distributionActive = true;\r\n\r\n        uint256 currentBalance;\r\n        if (_token == address(0)) {\r\n            currentBalance = address(this).balance;\r\n        } else {\r\n            currentBalance = ERC20(_token).balanceOf(this);\r\n        }\r\n        if (!_is128Bit(currentBalance)) {\r\n            currentBalance = 1 << 128;\r\n        }\r\n        require(currentBalance > distributionMinimum[_token], \"Amount in the contract isn't above the minimum distribution limit\");\r\n\r\n        distribution = currentBalance << 128;\r\n        dToken = _token;\r\n\r\n        emit TokenDistributionActive(_token, currentBalance, ownerMap.size());\r\n    }\r\n\r\n    /**\r\n        @dev Batch claiming of tokens for owners\r\n        @param _count The amount of owners to claim tokens for\r\n     */\r\n    function batchClaim(uint256 _count) public onlyPoolOwner() {\r\n        require(distributionActive, \"Distribution isn't active\");\r\n        uint claimed = distribution << 128 >> 128;\r\n        uint to = _count.add(claimed);\r\n        distribution = distribution >> 128 << 128 | to;\r\n        require(_count.add(claimed) <= ownerMap.size(), \"To value is greater than the amount of owners\");\r\n\r\n        if (to == ownerMap.size()) {\r\n            distributionActive = false;\r\n            emit TokenDistributionComplete(dToken, distribution >> 128, ownerMap.size());\r\n        }\r\n        for (uint256 i = claimed; i < to; i++) {\r\n            _claimTokens(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Whitelist a token so it can be distributed\r\n        @dev Token whitelist is due to the potential of minting tokens and constantly lock this contract in distribution\r\n     */\r\n    function whitelistToken(address _token, uint256 _minimum) public onlyOwner() {\r\n        require(!tokenWhitelist[_token], \"Token is already whitelisted\");\r\n        tokenWhitelist[_token] = true;\r\n        distributionMinimum[_token] = _minimum;\r\n    }\r\n\r\n    /**\r\n        @dev Set the minimum amount to be of transfered in this contract to start distribution\r\n        @param _minimum The minimum amount\r\n     */\r\n    function setDistributionMinimum(address _token, uint256 _minimum) public onlyOwner() {\r\n        distributionMinimum[_token] = _minimum;\r\n    }\r\n\r\n    /**\r\n        @dev ERC20 implementation of balances to allow for viewing in supported wallets\r\n        @param _owner The address of the owner\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return ownerMap.get(uint(_owner)) << 128 >> 128;\r\n    }\r\n\r\n    /**\r\n        @dev Get the amount of unclaimed owners in a distribution cycle\r\n     */\r\n    function getClaimedOwners() public view returns (uint) {\r\n        return distribution << 128 >> 128;\r\n    }\r\n\r\n    /**\r\n        @dev Return an owners percentage\r\n        @param _owner The address of the owner\r\n     */\r\n    function getOwnerPercentage(address _owner) public view returns (uint) {\r\n        return ownerMap.get(uint(_owner)) >> 128;\r\n    }\r\n\r\n    /**\r\n        @dev Return an owners share token amount\r\n        @param _owner The address of the owner\r\n     */\r\n    function getOwnerTokens(address _owner) public view returns (uint) {\r\n        return ownerMap.get(uint(_owner)) << 128 >> 128;\r\n    }\r\n\r\n    /**\r\n        @dev Returns the current amount of active owners, ie share above 0\r\n     */\r\n    function getCurrentOwners() public view returns (uint) {\r\n        return ownerMap.size();\r\n    }\r\n\r\n    /**\r\n        @dev Returns owner address based on the key\r\n        @param _i The index of the owner in the map\r\n     */\r\n    function getOwnerAddress(uint _i) public view returns (address) {\r\n        require(_i < ownerMap.size(), \"Index is greater than the map size\");\r\n        return address(ownerMap.getKey(_i));\r\n    }\r\n\r\n    /**\r\n        @dev Returns the allowance amount for a sender address\r\n        @param _owner The address of the owner\r\n        @param _sender The address of the sender on an owners behalf\r\n     */\r\n    function getAllowance(address _owner, address _sender) public view returns (uint256) {\r\n        return allowance[_owner][_sender];\r\n    }\r\n\r\n    /**\r\n        @dev Credit to Rob Hitchens: https://stackoverflow.com/a/42739843\r\n     */\r\n    function percent(uint numerator, uint denominator, uint precision) private pure returns (uint quotient) {\r\n        uint _numerator = numerator * 10 ** (precision+1);\r\n        uint _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return ( _quotient);\r\n    }\r\n\r\n    // Private Methods\r\n\r\n    /**\r\n        @dev Claim the tokens for the next owner in the map\r\n     */\r\n    function _claimTokens(uint _i) private {\r\n        address owner = address(ownerMap.getKey(_i));\r\n        uint o = ownerMap.get(uint(owner));\r\n        uint256 tokenAmount = (distribution >> 128).mul(o >> 128).div(100000);\r\n        if (dToken == address(0) && !_isContract(owner)) {\r\n            owner.transfer(tokenAmount);\r\n        } else {\r\n            require(ERC20(dToken).transfer(owner, tokenAmount), \"ERC20 transfer failed\");\r\n        }\r\n    }  \r\n\r\n    /**\r\n        @dev Transfers tokens to a different address\r\n        @dev Shared by all transfer implementations\r\n     */\r\n    function _sendOwnership(address _owner, address _receiver, uint256 _amount) private withinPrecision(_amount) {\r\n        uint o = ownerMap.get(uint(_owner));\r\n        uint r = ownerMap.get(uint(_receiver));\r\n\r\n        uint oTokens = o << 128 >> 128;\r\n        uint rTokens = r << 128 >> 128;\r\n\r\n        require(_is128Bit(_amount), \"Amount isn't 128bit or smaller\");\r\n        require(_owner != _receiver, \"You can't send to yourself\");\r\n        require(_receiver != address(0), \"Ownership cannot be blackholed\");\r\n        require(oTokens > 0, \"You don't have any ownership\");\r\n        require(oTokens.sub(stakeTotals[_owner]) >= _amount, \"The amount to send exceeds the addresses balance\");\r\n        require(!distributionActive, \"Distribution cannot be active when sending ownership\");\r\n        require(_amount % precisionMinimum == 0, \"Your amount isn't divisible by the minimum precision amount\");\r\n\r\n        oTokens = oTokens.sub(_amount);\r\n\r\n        if (oTokens == 0) {\r\n            require(ownerMap.remove(uint(_owner)), \"Address doesn't exist in the map\");\r\n        } else {\r\n            uint oPercentage = percent(oTokens, valuation, 5);\r\n            require(ownerMap.insert(uint(_owner), oPercentage << 128 | oTokens), \"Sender does not exist in the map\");\r\n        }\r\n        \r\n        uint rTNew = rTokens.add(_amount);\r\n        uint rPercentage = percent(rTNew, valuation, 5);\r\n        if (rTokens == 0) {\r\n            require(!ownerMap.insert(uint(_receiver), rPercentage << 128 | rTNew), \"Map replacement detected\");\r\n        } else {\r\n            require(ownerMap.insert(uint(_receiver), rPercentage << 128 | rTNew), \"Sender does not exist in the map\");\r\n        }\r\n\r\n        emit OwnershipTransferred(_owner, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Check whether an address given is a contract\r\n     */\r\n    function _isContract(address _addr) private view returns (bool hasCode) {\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        return length > 0;\r\n    }\r\n\r\n    /**\r\n        @dev Strict type check for data packing\r\n        @param _val The value for checking\r\n     */\r\n    function _is128Bit(uint _val) private pure returns (bool) {\r\n        return _val < 1 << 128;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setDistributionMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"batchClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"removeOwnershipStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stakeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"sendOwnershipAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precisionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setOwnerShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendOwnershipFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimedOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountOfOwners\",\"type\":\"uint256\"}],\"name\":\"TokenDistributionActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountOfOwners\",\"type\":\"uint256\"}],\"name\":\"TokenDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnershipStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnershipStakeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PoolOwners","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e2d06414b011d6dfff2d7181feb37e68e8322d61","Library":"","SwarmSource":"bzzr://4310192d216119dbc4cb74c26842d75e53e99ae911f9a746e0d516ef9ce81476"}]}