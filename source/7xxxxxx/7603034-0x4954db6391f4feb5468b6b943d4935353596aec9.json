{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Multiownable {\r\n\r\n    bool public paused = false;\r\n    uint256 public howManyOwnersDecide;\r\n    address[] public owners;\r\n    bytes32[] public allOperations;\r\n    address internal insideCallSender;\r\n    uint256 internal insideCallCount;\r\n\r\n    mapping(address => uint) public ownersIndices; // Starts from 1\r\n    mapping(bytes32 => uint) public allOperationsIndicies;\r\n\r\n    mapping(bytes32 => uint256) public votesMaskByOperation;\r\n    mapping(bytes32 => uint256) public votesCountByOperation;\r\n\r\n    event OperationCreated(bytes32 operation, uint howMany, uint ownersCount, address proposer);\r\n    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint ownersCount, address upvoter);\r\n    event OperationPerformed(bytes32 operation, uint howMany, uint ownersCount, address performer);\r\n    event OperationDownvoted(bytes32 operation, uint votes, uint ownersCount,  address downvoter);\r\n    event OperationCancelled(bytes32 operation, address lastCanceller);\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    function isOwner(address wallet) public constant returns(bool) {\r\n        return ownersIndices[wallet] > 0;\r\n    }\r\n\r\n    function ownersCount() public view returns(uint) {\r\n        return owners.length;\r\n    }\r\n\r\n    function allOperationsCount() public  view returns(uint) {\r\n        return allOperations.length;\r\n    }\r\n\r\n    modifier onlyAnyOwner {\r\n        if (checkHowManyOwners(1)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = 1;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyManyOwners {\r\n        if (checkHowManyOwners(howManyOwnersDecide)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = howManyOwnersDecide;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor() public {  }\r\n\r\n    function checkHowManyOwners(uint howMany) internal returns(bool) {\r\n        if (insideCallSender == msg.sender) {\r\n            require(howMany <= insideCallCount, \"checkHowManyOwners: nested owners modifier check require more owners\");\r\n            return true;\r\n        }\r\n\r\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\r\n        require(ownerIndex < owners.length, \"checkHowManyOwners: msg.sender is not an owner\");\r\n        bytes32 operation = keccak256(abi.encodePacked(msg.data));\r\n\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0, \"checkHowManyOwners: owner already voted for the operation\");\r\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation] + 1;\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n        if (operationVotesCount == 1) {\r\n            allOperationsIndicies[operation] = allOperations.length;\r\n            allOperations.push(operation);\r\n            emit OperationCreated(operation, howMany, owners.length, msg.sender);\r\n        }\r\n        emit OperationUpvoted(operation, operationVotesCount, howMany, owners.length, msg.sender);\r\n\r\n        // If enough owners confirmed the same operation\r\n        if (votesCountByOperation[operation] == howMany) {\r\n            deleteOperation(operation);\r\n            emit OperationPerformed(operation, howMany, owners.length, msg.sender);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint index = allOperationsIndicies[operation];\r\n        if (index < allOperations.length - 1) { // Not last\r\n            allOperations[index] = allOperations[allOperations.length - 1];\r\n            allOperationsIndicies[allOperations[index]] = index;\r\n        }\r\n        allOperations.length--;\r\n\r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n    }\r\n\r\n    function cancelPending(bytes32 operation) public onlyAnyOwner {\r\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) != 0, \"cancelPending: operation not found for this user\");\r\n        votesMaskByOperation[operation] &= ~(2 ** ownerIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation] - 1;\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n        emit OperationDownvoted(operation, operationVotesCount, owners.length, msg.sender);\r\n        if (operationVotesCount == 0) {\r\n            deleteOperation(operation);\r\n            emit OperationCancelled(operation, msg.sender);\r\n        }\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner, address _oldOwner) public onlyManyOwners {\r\n        _transferOwnership(_newOwner, _oldOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner, address _oldOwner) internal {\r\n        require(_newOwner != address(0));\r\n\r\n        for(uint256 i = 0; i < owners.length; i++) {\r\n            if (_oldOwner == owners[i]) {\r\n                owners[i] = _newOwner;\r\n                ownersIndices[_newOwner] = ownersIndices[_oldOwner];\r\n                ownersIndices[_oldOwner] = 0;\r\n                break;\r\n            }\r\n        }\r\n        emit OwnershipTransferred(_oldOwner, _newOwner);\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyManyOwners whenNotPaused {\r\n\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyManyOwners whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract GovernanceMigratable is Multiownable {\r\n    mapping(address => bool) public governanceContracts;\r\n\r\n    event GovernanceContractAdded(address addr);\r\n    event GovernanceContractRemoved(address addr);\r\n\r\n    modifier onlyGovernanceContracts() {\r\n        require(governanceContracts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addAddressToGovernanceContract(address addr) onlyManyOwners public returns(bool success) {\r\n        if (!governanceContracts[addr]) {\r\n            governanceContracts[addr] = true;\r\n            emit GovernanceContractAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeAddressFromGovernanceContract(address addr) onlyManyOwners public returns(bool success) {\r\n        if (governanceContracts[addr]) {\r\n            governanceContracts[addr] = false;\r\n            emit GovernanceContractRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract BlacklistMigratable is GovernanceMigratable {\r\n    mapping(address => bool) public blacklist;\r\n\r\n    event BlacklistedAddressAdded(address addr);\r\n    event BlacklistedAddressRemoved(address addr);\r\n\r\n    function addAddressToBlacklist(address addr) onlyGovernanceContracts() public returns(bool success) {\r\n        if (!blacklist[addr]) {\r\n            blacklist[addr] = true;\r\n            emit BlacklistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeAddressFromBlacklist(address addr) onlyGovernanceContracts() public returns(bool success) {\r\n        if (blacklist[addr]) {\r\n            blacklist[addr] = false;\r\n            emit BlacklistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TruePausableToken is StandardToken, BlacklistMigratable {\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(!blacklist[msg.sender]);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(!blacklist[_from]);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\ncontract TrueBurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract USDQToken is StandardToken, TrueBurnableToken, DetailedERC20, TruePausableToken {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    uint8 constant DECIMALS = 18;\r\n\r\n    constructor(address _firstOwner,\r\n                address _secondOwner,\r\n                address _thirdOwner,\r\n                address _fourthOwner,\r\n                address _fifthOwner) DetailedERC20(\"USDQ Stablecoin by Q DAO v1.0\", \"USDQ\", DECIMALS)  public {\r\n\r\n        owners.push(_firstOwner);\r\n        owners.push(_secondOwner);\r\n        owners.push(_thirdOwner);\r\n        owners.push(_fourthOwner);\r\n        owners.push(_fifthOwner);\r\n        owners.push(msg.sender);\r\n\r\n        ownersIndices[_firstOwner] = 1;\r\n        ownersIndices[_secondOwner] = 2;\r\n        ownersIndices[_thirdOwner] = 3;\r\n        ownersIndices[_fourthOwner] = 4;\r\n        ownersIndices[_fifthOwner] = 5;\r\n        ownersIndices[msg.sender] = 6;\r\n\r\n        howManyOwnersDecide = 4;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyGovernanceContracts() returns (bool){\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approveForOtherContracts(address _sender, address _spender, uint256 _value) external onlyGovernanceContracts() {\r\n        allowed[_sender][_spender] = _value;\r\n        emit Approval(_sender, _spender, _value);\r\n    }\r\n\r\n    function burnFrom(address _to, uint256 _amount) external onlyGovernanceContracts() returns (bool) {\r\n        allowed[_to][msg.sender] = _amount;\r\n        transferFrom(_to, msg.sender, _amount);\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveForOtherContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyOwnersDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"governanceContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToGovernanceContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allOperationsIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromGovernanceContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_firstOwner\",\"type\":\"address\"},{\"name\":\"_secondOwner\",\"type\":\"address\"},{\"name\":\"_thirdOwner\",\"type\":\"address\"},{\"name\":\"_fourthOwner\",\"type\":\"address\"},{\"name\":\"_fifthOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"BlacklistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"BlacklistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GovernanceContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GovernanceContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"OperationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upvoter\",\"type\":\"address\"}],\"name\":\"OperationUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"performer\",\"type\":\"address\"}],\"name\":\"OperationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"downvoter\",\"type\":\"address\"}],\"name\":\"OperationDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lastCanceller\",\"type\":\"address\"}],\"name\":\"OperationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"USDQToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000071e0d074bb70fdc5345f986e3435117f52afcebb00000000000000000000000098111289e72f43e528f9c0fe879f56805b57efe500000000000000000000000092fc9c2575d6c54d2dc9e52586e43d0708d58c5c0000000000000000000000006d6935900d17c42135760aa8035864c7115522110000000000000000000000007a71e3216d0909376a1b1ac1cda416ae42a24a5f","Library":"","SwarmSource":"bzzr://261e1ce8cfd0f81777fe00a7f77c7da3fbe28c6d34ccd1ec6524495c642833be"}]}