{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ARXExchange\r\n */\r\ncontract ARXExchange {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    address private _owner;\r\n\r\n    uint256 private _priceETH;\r\n\r\n    event Exchanged(address indexed addr, uint256 tokens, uint256 value);\r\n    event ChangePriceETH(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor sets the original `owner` of the contract to the sender\r\n     * account, address of the token contract and initial price of the token in WEI\r\n     */\r\n    constructor(uint256 priceETH, address ARXToken) public {\r\n        _owner = msg.sender;\r\n        token = IERC20(ARXToken);\r\n        setPriceETH(priceETH);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to change current price of the token in WEI\r\n     * @param newPriceETH New price of 1 token in WEI\r\n     */\r\n    function setPriceETH(uint256 newPriceETH) public onlyOwner {\r\n        require(newPriceETH != 0);\r\n        emit ChangePriceETH(_priceETH, newPriceETH);\r\n        _priceETH = newPriceETH;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to withdraw current token balance of the contract\r\n     * @param recipient Address to recieve tokens\r\n     */\r\n    function withdrawCoinBalance(address recipient) external onlyOwner {\r\n        uint256 balanceARX = token.balanceOf(address(this));\r\n        token.transfer(recipient, balanceARX);\r\n    }\r\n\r\n    /**\r\n     * @return \r\n     * 1) Current price of 1 token in WEI\r\n     * 2) ERC20 balance of the contract\r\n     * 3) ERC20 allowance from given address to this contract\r\n     * 4) Calculated WEI amount for approved tokens\r\n     * @param addr needed address\r\n     */\r\n    function getInfo(address addr) external view returns(uint256, uint256, uint256, uint256) {\r\n        return(_priceETH, token.balanceOf(addr), token.allowance(addr, address(this)), token.allowance(addr, address(this)) * _priceETH);\r\n    }\r\n\r\n    /**\r\n     * @return true if given address has approved any amount of tokens to this contract\r\n     * @param addr needed address\r\n     */\r\n    function amIReadyToExchange(address addr) public view returns(bool) {\r\n        uint256 approved = token.allowance(addr, address(this));\r\n        if (approved > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Payable fallback function to recieve Ether (even 0), it also calls toETH function if sender has some approved tokens\r\n     */\r\n    function() external payable {\r\n        if (amIReadyToExchange(msg.sender)) {\r\n            toETH();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Exchanges approved tokens to ethereum\r\n     */\r\n    function toETH() public {\r\n        uint256 amount = token.allowance(msg.sender, address(this));\r\n        require(amount > 0);\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        msg.sender.transfer(amount.mul(_priceETH));\r\n        emit Exchanged(msg.sender, amount, amount.mul(_priceETH));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"amIReadyToExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCoinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"priceETH\",\"type\":\"uint256\"},{\"name\":\"ARXToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChangePriceETH\",\"type\":\"event\"}]","ContractName":"ARXExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e6135d1ae9f6ff5152285b9bc9e20e6aeb2ccdc8","Library":"","SwarmSource":"bzzr://c972058a556cc3346c6a01a89333eb69bf9bbfaf3c09e0a0ad2b696177286d47"}]}