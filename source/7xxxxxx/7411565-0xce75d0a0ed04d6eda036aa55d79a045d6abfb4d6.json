{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.6;\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"\");\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Developer @gogol\r\n// Design @chechenets\r\n// Architect @tugush\r\n\r\ncontract Manageable is Ownable {\r\n    mapping(address => bool) public listOfManagers;\r\n\r\n    modifier onlyManager() {\r\n        require(listOfManagers[msg.sender], \"\");\r\n        _;\r\n    }\r\n\r\n    function addManager(address _manager) public onlyOwner returns (bool success) {\r\n        if (!listOfManagers[_manager]) {\r\n            require(_manager != address(0), \"\");\r\n            listOfManagers[_manager] = true;\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeManager(address _manager) public onlyOwner returns (bool success) {\r\n        if (listOfManagers[_manager]) {\r\n            listOfManagers[_manager] = false;\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function getInfo(address _manager) public view returns (bool) {\r\n        return listOfManagers[_manager];\r\n    }\r\n}\r\n\r\n// Developer @gogol\r\n// Design @chechenets\r\n// Architect @tugush\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Developer @gogol\r\n// Design @chechenets\r\n// Architect @tugush\r\n\r\ncontract iRNG {\r\n    function update(uint roundNumber, uint additionalNonce, uint period) public payable;\r\n}\r\n\r\n\r\ncontract BaseGame is Manageable {\r\n    using SafeMath for uint;\r\n\r\n    enum RoundState {NOT_STARTED, ACCEPT_FUNDS, WAIT_RESULT, SUCCESS, REFUND}\r\n\r\n    struct Round {\r\n        RoundState state;\r\n        uint ticketsCount;\r\n        uint participantCount;\r\n        TicketsInterval[] tickets;\r\n        address[] participants;\r\n        uint random;\r\n        uint nonce; //xored participants addresses\r\n        uint startRoundTime;\r\n        uint[] winningTickets;\r\n        address[] winners;\r\n        uint roundFunds;\r\n        mapping(address => uint) winnersFunds;\r\n        mapping(address => uint) participantFunds;\r\n        mapping(address => bool) sendGain;\r\n    }\r\n\r\n    struct TicketsInterval {\r\n        address participant;\r\n        uint firstTicket;\r\n        uint lastTicket;\r\n    }\r\n\r\n    uint constant public NUMBER_OF_WINNERS = 10;\r\n    uint constant public SHARE_DENOMINATOR = 10000;\r\n    uint constant public ORACLIZE_TIMEOUT = 86400;  // one day\r\n    uint[] public shareOfWinners = [5000, 2500, 1250, 620, 320, 160, 80, 40, 20, 10];\r\n    address payable public organiser;\r\n    uint constant public ORGANISER_PERCENT = 20;\r\n    uint constant public ROUND_FUND_PERCENT = 80;\r\n\r\n    uint public period;\r\n    address public hourlyGame;\r\n    address public management;\r\n    address payable public rng;\r\n\r\n    mapping (uint => Round) public rounds;\r\n\r\n    uint public ticketPrice;\r\n    uint public currentRound;\r\n\r\n    event GameStarted(uint start);\r\n    event RoundStateChanged(uint currentRound, RoundState state);\r\n    event ParticipantAdded(uint round, address participant, uint ticketsCount, uint funds);\r\n    event RoundProcecced(uint round, address[] winners, uint[] winningTickets, uint roundFunds);\r\n    event RefundIsSuccess(uint round, address participant, uint funds);\r\n    event RefundIsFailed(uint round, address participant);\r\n    event Withdraw(address participant, uint funds, uint fromRound, uint toRound);\r\n    event TicketPriceChanged(uint price);\r\n\r\n    modifier onlyRng {\r\n        require(msg.sender == address(rng), \"\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGameContract {\r\n        require(msg.sender == address(hourlyGame) || msg.sender == management, \"\");\r\n        _;\r\n    }\r\n\r\n    constructor (address payable _rng, uint _period) public {\r\n        require(_rng != address(0), \"\");\r\n        require(_period >= 60, \"\");\r\n\r\n        rng = _rng;\r\n        period = _period;\r\n    }\r\n\r\n    function setContracts(address payable _rng, address _hourlyGame, address _management) public onlyOwner {\r\n        require(_rng != address(0), \"\");\r\n        require(_hourlyGame != address(0), \"\");\r\n        require(_management != address(0), \"\");\r\n\r\n        rng = _rng;\r\n        hourlyGame = _hourlyGame;\r\n        management = _management;\r\n    }\r\n\r\n    function startGame(uint _startPeriod) public payable onlyGameContract {\r\n        currentRound = 1;\r\n        uint time = getCurrentTime().add(_startPeriod).sub(period);\r\n        rounds[currentRound].startRoundTime = time;\r\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\r\n\r\n        iRNG(rng).update.value(msg.value)(currentRound, 0, _startPeriod);\r\n\r\n        emit GameStarted(time);\r\n    }\r\n\r\n    function buyTickets(address _participant) public payable onlyGameContract {\r\n        uint funds = msg.value;\r\n\r\n        updateRoundTimeAndState();\r\n        addParticipant(_participant, funds.div(ticketPrice));\r\n        updateRoundFundsAndParticipants(_participant, funds);\r\n\r\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period) &&\r\n            rounds[currentRound].participantCount >= 10\r\n        ) {\r\n            _restartGame();\r\n        }\r\n    }\r\n\r\n    function buyBonusTickets(address _participant, uint _ticketsCount) public payable onlyGameContract {\r\n        updateRoundTimeAndState();\r\n        addParticipant(_participant, _ticketsCount);\r\n        updateRoundFundsAndParticipants(_participant, uint(0));\r\n\r\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period) &&\r\n            rounds[currentRound].participantCount >= 10\r\n        ) {\r\n            _restartGame();\r\n        }\r\n    }\r\n\r\n    function processRound(uint _round, uint _randomNumber) public payable onlyRng returns (bool) {\r\n        if (rounds[_round].winners.length != 0) {\r\n            return true;\r\n        }\r\n\r\n        if (checkRoundState(_round) == RoundState.REFUND) {\r\n            return true;\r\n        }\r\n\r\n        if (rounds[_round].participantCount < 10) {\r\n            rounds[_round].state = RoundState.ACCEPT_FUNDS;\r\n            emit RoundStateChanged(_round, rounds[_round].state);\r\n            return true;\r\n        }\r\n\r\n        rounds[_round].random = _randomNumber;\r\n        findWinTickets(_round);\r\n        findWinners(_round);\r\n        rounds[_round].state = RoundState.SUCCESS;\r\n        emit RoundStateChanged(_round, rounds[_round].state);\r\n\r\n        if (rounds[_round.add(1)].state == RoundState.NOT_STARTED) {\r\n            currentRound = _round.add(1);\r\n            rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\r\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\r\n        }\r\n\r\n        emit RoundProcecced(_round, rounds[_round].winners, rounds[_round].winningTickets, rounds[_round].roundFunds);\r\n        getRandomNumber(_round + 1, rounds[_round].nonce);\r\n        return true;\r\n    }\r\n\r\n    function restartGame() public payable onlyOwner {\r\n        _restartGame();\r\n    }\r\n\r\n    function getRandomNumber(uint _round, uint _nonce) public payable onlyRng {\r\n        iRNG(rng).update(_round, _nonce, period);\r\n    }\r\n\r\n    function setTicketPrice(uint _ticketPrice) public onlyGameContract {\r\n        require(_ticketPrice > 0, \"\");\r\n\r\n        emit TicketPriceChanged(_ticketPrice);\r\n        ticketPrice = _ticketPrice;\r\n    }\r\n\r\n    function findWinTickets(uint _round) public {\r\n        uint[10] memory winners = _findWinTickets(rounds[_round].random, rounds[_round].ticketsCount);\r\n\r\n        for (uint i = 0; i < 10; i++) {\r\n            rounds[_round].winningTickets.push(winners[i]);\r\n        }\r\n    }\r\n\r\n    function _findWinTickets(uint _random, uint _ticketsNum) public pure returns (uint[10] memory) {\r\n        uint random = _random;//uint(keccak256(abi.encodePacked(_random)));\r\n        uint winnersNum = 10;\r\n\r\n        uint[10] memory winTickets;\r\n        uint shift = uint(256).div(winnersNum);\r\n\r\n        for (uint i = 0; i < 10; i++) {\r\n            winTickets[i] =\r\n            uint(keccak256(abi.encodePacked(((random << (i.mul(shift))) >> (shift.mul(winnersNum.sub(1)).add(6)))))).mod(_ticketsNum);\r\n        }\r\n\r\n        return winTickets;\r\n    }\r\n\r\n    function refund(uint _round) public {\r\n        if (checkRoundState(_round) == RoundState.REFUND\r\n        && rounds[_round].participantFunds[msg.sender] > 0\r\n        ) {\r\n            uint amount = rounds[_round].participantFunds[msg.sender];\r\n            rounds[_round].participantFunds[msg.sender] = 0;\r\n            address(msg.sender).transfer(amount);\r\n            emit RefundIsSuccess(_round, msg.sender, amount);\r\n        } else {\r\n            emit RefundIsFailed(_round, msg.sender);\r\n        }\r\n    }\r\n\r\n    function checkRoundState(uint _round) public returns (RoundState) {\r\n        if (rounds[_round].state == RoundState.WAIT_RESULT\r\n        && getCurrentTime() > rounds[_round].startRoundTime.add(ORACLIZE_TIMEOUT)\r\n        ) {\r\n            rounds[_round].state = RoundState.REFUND;\r\n            emit RoundStateChanged(_round, rounds[_round].state);\r\n        }\r\n        return rounds[_round].state;\r\n    }\r\n\r\n    function setOrganiser(address payable _organiser) public onlyOwner {\r\n        require(_organiser != address(0), \"\");\r\n\r\n        organiser = _organiser;\r\n    }\r\n\r\n   function getGain(uint _fromRound, uint _toRound) public {\r\n        _transferGain(msg.sender, _fromRound, _toRound);\r\n    }\r\n\r\n    function sendGain(address payable _participant, uint _fromRound, uint _toRound) public onlyManager {\r\n        _transferGain(_participant, _fromRound, _toRound);\r\n    }\r\n\r\n    function getTicketsCount(uint _round) public view returns (uint) {\r\n        return rounds[_round].ticketsCount;\r\n    }\r\n\r\n    function getTicketPrice() public view returns (uint) {\r\n        return ticketPrice;\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function getPeriod() public view returns (uint) {\r\n        return period;\r\n    }\r\n\r\n    function getRoundWinners(uint _round) public view returns (address[] memory) {\r\n        return rounds[_round].winners;\r\n    }\r\n\r\n    function getRoundWinningTickets(uint _round) public view returns (uint[] memory) {\r\n        return rounds[_round].winningTickets;\r\n    }\r\n\r\n    function getRoundParticipants(uint _round) public view returns (address[] memory) {\r\n        return rounds[_round].participants;\r\n    }\r\n\r\n    function getWinningFunds(uint _round, address _winner) public view returns  (uint) {\r\n        return rounds[_round].winnersFunds[_winner];\r\n    }\r\n\r\n    function getRoundFunds(uint _round) public view returns (uint) {\r\n        return rounds[_round].roundFunds;\r\n    }\r\n\r\n    function getParticipantFunds(uint _round, address _participant) public view returns (uint) {\r\n        return rounds[_round].participantFunds[_participant];\r\n    }\r\n\r\n    function getCurrentRound() public view returns (uint) {\r\n        return currentRound;\r\n    }\r\n\r\n    function getRoundStartTime(uint _round) public view returns (uint) {\r\n        return rounds[_round].startRoundTime;\r\n    }\r\n\r\n    function _restartGame() internal {\r\n        uint _now = getCurrentTime().sub(rounds[1].startRoundTime);\r\n        rounds[currentRound].startRoundTime = getCurrentTime().sub(_now.mod(period));\r\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\r\n        emit RoundStateChanged(currentRound, rounds[currentRound].state);\r\n        iRNG(rng).update(currentRound, 0, period.sub(_now.mod(period)));\r\n    }\r\n\r\n    function _transferGain(address payable _participant, uint _fromRound, uint _toRound) internal {\r\n        require(_fromRound <= _toRound, \"\");\r\n        require(_participant != address(0), \"\");\r\n\r\n        uint funds;\r\n\r\n        for (uint i = _fromRound; i <= _toRound; i++) {\r\n\r\n            if (rounds[i].state == RoundState.SUCCESS\r\n            && rounds[i].sendGain[_participant] == false) {\r\n\r\n                rounds[i].sendGain[_participant] = true;\r\n                funds = funds.add(getWinningFunds(i, _participant));\r\n            }\r\n        }\r\n\r\n        require(funds > 0, \"\");\r\n        _participant.transfer(funds);\r\n        emit Withdraw(_participant, funds, _fromRound, _toRound);\r\n\r\n    }\r\n\r\n    // find participant who has winning ticket\r\n    // to start: _begin is 0, _end is last index in ticketsInterval array\r\n    function getWinner(\r\n        uint _round,\r\n        uint _beginInterval,\r\n        uint _endInterval,\r\n        uint _winningTicket\r\n    )\r\n        internal\r\n        returns (address)\r\n    {\r\n        if (_beginInterval == _endInterval) {\r\n            return rounds[_round].tickets[_beginInterval].participant;\r\n        }\r\n\r\n        uint len = _endInterval.add(1).sub(_beginInterval);\r\n        uint mid = _beginInterval.add((len.div(2))).sub(1);\r\n        TicketsInterval memory interval = rounds[_round].tickets[mid];\r\n\r\n        if (_winningTicket < interval.firstTicket) {\r\n            return getWinner(_round, _beginInterval, mid, _winningTicket);\r\n        } else if (_winningTicket > interval.lastTicket) {\r\n            return getWinner(_round, mid.add(1), _endInterval, _winningTicket);\r\n        } else {\r\n            return interval.participant;\r\n        }\r\n    }\r\n\r\n    function addParticipant(address _participant, uint _ticketsCount) internal {\r\n        rounds[currentRound].participants.push(_participant);\r\n        uint currTicketsCount = rounds[currentRound].ticketsCount;\r\n        rounds[currentRound].ticketsCount = currTicketsCount.add(_ticketsCount);\r\n        rounds[currentRound].tickets.push(TicketsInterval(\r\n                _participant,\r\n                currTicketsCount,\r\n                rounds[currentRound].ticketsCount.sub(1))\r\n        );\r\n        rounds[currentRound].nonce = rounds[currentRound].nonce + uint(keccak256(abi.encodePacked(_participant)));\r\n        emit ParticipantAdded(currentRound, _participant, _ticketsCount, _ticketsCount.mul(ticketPrice));\r\n    }\r\n\r\n    function updateRoundTimeAndState() internal {\r\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period)\r\n            && rounds[currentRound].participantCount >= 10\r\n        ) {\r\n            rounds[currentRound].state = RoundState.WAIT_RESULT;\r\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\r\n            currentRound = currentRound.add(1);\r\n            rounds[currentRound].startRoundTime = rounds[currentRound-1].startRoundTime.add(period);\r\n            rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\r\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\r\n        }\r\n    }\r\n\r\n    function updateRoundFundsAndParticipants(address _participant, uint _funds) internal {\r\n\r\n        if (rounds[currentRound].participantFunds[_participant] == 0) {\r\n            rounds[currentRound].participantCount = rounds[currentRound].participantCount.add(1);\r\n        }\r\n\r\n        rounds[currentRound].participantFunds[_participant] =\r\n        rounds[currentRound].participantFunds[_participant].add(_funds);\r\n\r\n        rounds[currentRound].roundFunds =\r\n        rounds[currentRound].roundFunds.add(_funds);\r\n    }\r\n\r\n    function findWinners(uint _round) internal {\r\n        address winner;\r\n        uint fundsToWinner;\r\n        for (uint i = 0; i < NUMBER_OF_WINNERS; i++) {\r\n            winner = getWinner(\r\n                _round,\r\n                0,\r\n                (rounds[_round].tickets.length).sub(1),\r\n                rounds[_round].winningTickets[i]\r\n            );\r\n\r\n            rounds[_round].winners.push(winner);\r\n            fundsToWinner = rounds[_round].roundFunds.mul(shareOfWinners[i]).div(SHARE_DENOMINATOR);\r\n            rounds[_round].winnersFunds[winner] = rounds[_round].winnersFunds[winner].add(fundsToWinner);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// Developer @gogol\r\n// Design @chechenets\r\n// Architect @tugush\r\n\r\n\r\ncontract iBaseGame {\r\n    function getPeriod() public view returns (uint);\r\n    function buyTickets(address _participant) public payable;\r\n    function startGame(uint _startPeriod) public payable;\r\n    function setTicketPrice(uint _ticketPrice) public;\r\n    function buyBonusTickets(address _participant, uint _ticketsCount) public;\r\n}\r\n\r\ncontract iJackPotChecker {\r\n    function getPrice() public view returns (uint);\r\n}\r\n\r\n\r\ncontract HourlyGame is BaseGame {\r\n    address payable public checker;\r\n    uint public serviceMinBalance = 1 ether;\r\n\r\n    uint public BET_PRICE;\r\n\r\n    uint constant public HOURLY_GAME_SHARE = 30;                       //30% to hourly game\r\n    uint constant public DAILY_GAME_SHARE = 10;                        //10% to daily game\r\n    uint constant public WEEKLY_GAME_SHARE = 5;                        //5% to weekly game\r\n    uint constant public MONTHLY_GAME_SHARE = 5;                       //5% to monthly game\r\n    uint constant public YEARLY_GAME_SHARE = 5;                        //5% to yearly game\r\n    uint constant public JACKPOT_GAME_SHARE = 10;                 //10% to jackpot game\r\n    uint constant public SUPER_JACKPOT_GAME_SHARE = 15;                 //15% to superJackpot game\r\n    uint constant public GAME_ORGANISER_SHARE = 20;                    //20% to game organiser\r\n    uint constant public SHARE_DENOMINATOR = 100;                        //denominator for share\r\n\r\n    bool public paused;\r\n\r\n    address public dailyGame;\r\n    address public weeklyGame;\r\n    address public monthlyGame;\r\n    address public yearlyGame;\r\n    address public jackPot;\r\n    address public superJackPot;\r\n\r\n    event TransferFunds(address to, uint funds);\r\n\r\n    constructor (\r\n        address payable _rng,\r\n        uint _period,\r\n        address _dailyGame,\r\n        address _weeklyGame,\r\n        address _monthlyGame,\r\n        address _yearlyGame,\r\n        address _jackPot,\r\n        address _superJackPot\r\n    )\r\n        public\r\n        BaseGame(_rng, _period)\r\n    {\r\n        require(_dailyGame != address(0), \"\");\r\n        require(_weeklyGame != address(0), \"\");\r\n        require(_monthlyGame != address(0), \"\");\r\n        require(_yearlyGame != address(0), \"\");\r\n        require(_jackPot != address(0), \"\");\r\n        require(_superJackPot != address(0), \"\");\r\n\r\n        dailyGame = _dailyGame;\r\n        weeklyGame = _weeklyGame;\r\n        monthlyGame = _monthlyGame;\r\n        yearlyGame = _yearlyGame;\r\n        jackPot = _jackPot;\r\n        superJackPot = _superJackPot;\r\n    }\r\n\r\n    function () external payable {\r\n        buyTickets(msg.sender);\r\n    }\r\n\r\n    function buyTickets(address _participant) public payable {\r\n        require(!paused, \"\");\r\n        require(msg.value > 0, \"\");\r\n\r\n        uint ETHinUSD = iJackPotChecker(checker).getPrice();\r\n        BET_PRICE = uint(100).mul(10**18).div(ETHinUSD);    // BET_PRICE is $1 in wei\r\n\r\n        uint funds = msg.value;\r\n        uint extraFunds = funds.mod(BET_PRICE);\r\n\r\n        if (extraFunds > 0) {\r\n            organiser.transfer(extraFunds);\r\n            emit TransferFunds(organiser, extraFunds);\r\n            funds = funds.sub(extraFunds);\r\n        }\r\n\r\n        uint fundsToOrginiser = funds.mul(GAME_ORGANISER_SHARE).div(SHARE_DENOMINATOR);\r\n\r\n        fundsToOrginiser = transferToServices(rng, fundsToOrginiser, serviceMinBalance);\r\n        fundsToOrginiser = transferToServices(checker, fundsToOrginiser, serviceMinBalance);\r\n\r\n        if (fundsToOrginiser > 0) {\r\n            organiser.transfer(fundsToOrginiser);\r\n            emit TransferFunds(organiser, fundsToOrginiser);\r\n        }\r\n\r\n        updateRoundTimeAndState();\r\n        addParticipant(_participant, funds.div(BET_PRICE));\r\n        updateRoundFundsAndParticipants(_participant, funds.mul(HOURLY_GAME_SHARE).div(SHARE_DENOMINATOR));\r\n\r\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period)\r\n            && rounds[currentRound].participantCount >= 10\r\n        ) {\r\n            _restartGame();\r\n        }\r\n\r\n        iBaseGame(dailyGame).buyTickets.value(funds.mul(DAILY_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n        iBaseGame(weeklyGame).buyTickets.value(funds.mul(WEEKLY_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n        iBaseGame(monthlyGame).buyTickets.value(funds.mul(MONTHLY_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n        iBaseGame(yearlyGame).buyTickets.value(funds.mul(YEARLY_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n        iBaseGame(jackPot).buyTickets.value(funds.mul(JACKPOT_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n        iBaseGame(superJackPot).buyTickets.value(funds.mul(SUPER_JACKPOT_GAME_SHARE).div(SHARE_DENOMINATOR))(_participant);\r\n\r\n    }\r\n\r\n    function buyBonusTickets(\r\n        address _participant,\r\n        uint _hourlyTicketsCount,\r\n        uint _dailyTicketsCount,\r\n        uint _weeklyTicketsCount,\r\n        uint _monthlyTicketsCount,\r\n        uint _yearlyTicketsCount,\r\n        uint _jackPotTicketsCount,\r\n        uint _superJackPotTicketsCount\r\n    )\r\n        public\r\n        payable\r\n        onlyManager\r\n    {\r\n        require(!paused, \"\");\r\n\r\n        updateRoundTimeAndState();\r\n        addParticipant(_participant, _hourlyTicketsCount);\r\n        updateRoundFundsAndParticipants(_participant, uint(0));\r\n\r\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period)\r\n            && rounds[currentRound].participantCount >= 10\r\n        ) {\r\n            _restartGame();\r\n        }\r\n\r\n        iBaseGame(dailyGame).buyBonusTickets(_participant, _dailyTicketsCount);\r\n        iBaseGame(weeklyGame).buyBonusTickets(_participant, _weeklyTicketsCount);\r\n        iBaseGame(monthlyGame).buyBonusTickets(_participant, _monthlyTicketsCount);\r\n        iBaseGame(yearlyGame).buyBonusTickets(_participant, _yearlyTicketsCount);\r\n        iBaseGame(jackPot).buyBonusTickets(_participant, _jackPotTicketsCount);\r\n        iBaseGame(superJackPot).buyBonusTickets(_participant, _superJackPotTicketsCount);\r\n    }\r\n\r\n    function setChecker(address payable _checker) public onlyOwner {\r\n        require(_checker != address(0), \"\");\r\n\r\n        checker = _checker;\r\n    }\r\n\r\n    function setMinBalance(uint _minBalance) public onlyOwner {\r\n        require(_minBalance >= 1 ether, \"\");\r\n\r\n        serviceMinBalance = _minBalance;\r\n    }\r\n\r\n    function pause(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    function transferToServices(address payable _service, uint _funds, uint _minBalance) internal returns (uint) {\r\n        uint result = _funds;\r\n        if (_service.balance < _minBalance) {\r\n            uint lack = _minBalance.sub(_service.balance);\r\n            if (_funds > lack) {\r\n                _service.transfer(lack);\r\n                emit TransferFunds(_service, lack);\r\n                result = result.sub(lack);\r\n            } else {\r\n                _service.transfer(_funds);\r\n                emit TransferFunds(_service, _funds);\r\n                result = uint(0);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// Developer @gogol\r\n// Design @chechenets\r\n// Architect @tugush","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getTicketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundWinningTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourlyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_ticketsCount\",\"type\":\"uint256\"}],\"name\":\"buyBonusTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromRound\",\"type\":\"uint256\"},{\"name\":\"_toRound\",\"type\":\"uint256\"}],\"name\":\"getGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BET_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_ORGANISER_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getParticipantFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareOfWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLIZE_TIMEOUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"findWinTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAILY_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEKLY_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_hourlyTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_dailyTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_weeklyTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_monthlyTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_yearlyTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_jackPotTicketsCount\",\"type\":\"uint256\"},{\"name\":\"_superJackPotTicketsCount\",\"type\":\"uint256\"}],\"name\":\"buyBonusTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_fromRound\",\"type\":\"uint256\"},{\"name\":\"_toRound\",\"type\":\"uint256\"}],\"name\":\"sendGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superJackPot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearlyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUMBER_OF_WINNERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"getWinningFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"checkRoundState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORGANISER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"organiser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SHARE_DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceMinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"listOfManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"processRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_organiser\",\"type\":\"address\"}],\"name\":\"setOrganiser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"name\":\"participantCount\",\"type\":\"uint256\"},{\"name\":\"random\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"startRoundTime\",\"type\":\"uint256\"},{\"name\":\"roundFunds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPER_JACKPOT_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTHLY_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rng\",\"type\":\"address\"},{\"name\":\"_hourlyGame\",\"type\":\"address\"},{\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOURLY_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weeklyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_random\",\"type\":\"uint256\"},{\"name\":\"_ticketsNum\",\"type\":\"uint256\"}],\"name\":\"_findWinTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"setChecker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rng\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startPeriod\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_FUND_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEARLY_GAME_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rng\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_dailyGame\",\"type\":\"address\"},{\"name\":\"_weeklyGame\",\"type\":\"address\"},{\"name\":\"_monthlyGame\",\"type\":\"address\"},{\"name\":\"_yearlyGame\",\"type\":\"address\"},{\"name\":\"_jackPot\",\"type\":\"address\"},{\"name\":\"_superJackPot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"TransferFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"RoundStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"ParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"winningTickets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"roundFunds\",\"type\":\"uint256\"}],\"name\":\"RoundProcecced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"RefundIsSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RefundIsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toRound\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TicketPriceChanged\",\"type\":\"event\"}]","ContractName":"HourlyGame","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bf43a3f0777bf04f9820380b6e4df6e692f7ddb70000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000089f3cb45248484282c2827fbde89813af41b9582000000000000000000000000339a8a6af716f1d4808036d7e5d283a6e0a0b5e1000000000000000000000000b83ab74561657505823460ec365f172567c37d83000000000000000000000000de44f7ce2f0042d1d7cf34c89a87dc27f2fe86a10000000000000000000000007528c1e72b2ccd0660a3f70d700f8880a44e7963000000000000000000000000be2d9c289038d32c3d82bd99f464b48bf4696e52","Library":"","SwarmSource":"bzzr://a3486461d55851a63b48651f1c2f6653b05a49d9a2b53c2524e0a6b2aba28eaf"}]}