{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n \r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n \r\ncontract CheckinContract {\r\n \r\n    struct Checkin {\r\n        string id;\r\n        string userId;\r\n        uint likeCount;\r\n        uint likeValue;\r\n        uint reportCount;\r\n        string businessId;\r\n        address[] likers;\r\n        address[] reporters;\r\n        string businessName;\r\n        string username;\r\n        string comment;\r\n        uint timestamp;\r\n        bool confirmed;\r\n    }\r\n    \r\n    mapping (address => mapping(bytes32 => Checkin)) public checkins;\r\n    \r\n      \r\n   \r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 tokens,\r\n        address token,\r\n        bytes memory data\r\n        ) public;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract YoutopinToken is ERC20Interface, Owned,CheckinContract {\r\n    using SafeMath for uint;\r\n    function convert(string memory key) public returns (bytes32 ret) {\r\n        if (bytes(key).length > 32) {\r\n        revert();\r\n        }\r\n\r\n        assembly {\r\n        ret := mload(add(key, 32))\r\n        }\r\n    }\r\n    \r\n    function addUser(address add) public onlyOwner{\r\n        balances[msg.sender]=balances[msg.sender].sub(1e18);\r\n        balances[add]=balances[add].add(1e18);\r\n        emit Transfer(owner, add, 1e18);\r\n         \r\n        \r\n    }\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    \r\n    \r\n    event transaction(address from,address to,uint value,string _type,string checkinId);\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n \r\n    constructor() public {\r\n        symbol = \"YP\";\r\n        name = \"Youtopin Token\";\r\n        decimals = 18;\r\n        _totalSupply = 5000000000 * 10**uint(decimals);\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n \r\n    function balanceOf(\r\n        address tokenOwner\r\n        ) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(\r\n        address to, \r\n        uint tokens\r\n        ) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        emit transaction(msg.sender,to,tokens,\"transfer\",\"0\");\r\n        return true;\r\n    }\r\n \r\n    function approve(\r\n        address spender, \r\n        uint tokens\r\n        ) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address from, \r\n        address to, \r\n        uint tokens\r\n        ) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    function allowance(\r\n        address tokenOwner, \r\n        address spender\r\n        ) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n \r\n    function approveAndCall(\r\n        address spender, \r\n        uint tokens, \r\n        bytes memory data\r\n        ) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n \r\n    function () external payable {\r\n        revert();\r\n    }\r\n \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n     \r\n    function like(\r\n        address checkinOwner,\r\n        string memory checkinId,\r\n        uint likeValue\r\n        ) public {\r\n        checkins[checkinOwner][convert(checkinId)].likers.push(msg.sender);\r\n        checkins[checkinOwner][convert(checkinId)].likeCount = checkins[checkinOwner][convert(checkinId)].likeCount.add(1);\r\n        checkins[checkinOwner][convert(checkinId)].likeValue = checkins[checkinOwner][convert(checkinId)].likeValue.add(likeValue);\r\n    \r\n        balances[msg.sender] = balances[msg.sender].sub(5e15);\r\n        balances[owner] = balances[owner].add(5e15);\r\n        emit Transfer(msg.sender,owner,5e15);\r\n        \r\n         if(checkins[checkinOwner][convert(checkinId)].reportCount.add(checkins[checkinOwner][convert(checkinId)].likeCount)>9){\r\n            confirmValidation(checkinOwner,checkinId);\r\n        }\r\n        \r\n        emit transaction(msg.sender,owner,5e15,\"like\",checkinId);\r\n\r\n     }\r\n\r\n    function report(\r\n        address checkinOwner,\r\n        string memory checkinId,\r\n        uint reportValue\r\n        )public {\r\n        checkins[checkinOwner][convert(checkinId)].reporters.push(msg.sender);\r\n        checkins[checkinOwner][convert(checkinId)].reportCount = checkins[checkinOwner][convert(checkinId)].reportCount.add(1);\r\n        balances[owner] = balances[owner].add(5e15);\r\n        balances[msg.sender] = balances[msg.sender].sub(5e15);\r\n        emit Transfer(msg.sender,owner,5e15);\r\n        if(checkins[checkinOwner][convert(checkinId)].reportCount.add(checkins[checkinOwner][convert(checkinId)].likeCount)>9){\r\n            confirmValidation(checkinOwner,checkinId);\r\n        }\r\n         emit transaction(msg.sender,owner,5e15,\"report\",checkinId);\r\n\r\n    }\r\n    \r\n    function addCheckin(\r\n        string memory id,\r\n        string memory userId,\r\n        string memory businessId,\r\n        string memory businessName,\r\n        string memory username,\r\n        string memory comment\r\n        ) public {\r\n\r\n        Checkin storage checkin = checkins[msg.sender][convert(id)];\r\n        checkin.id = id;\r\n        checkin.userId = userId;\r\n        checkin.likeCount = 0;\r\n        checkin.likeValue = 0;\r\n        checkin.reportCount = 0;\r\n        checkin.businessId = businessId;\r\n        checkin.businessName = businessName;\r\n        checkin.username = username;\r\n        checkin.comment = comment;\r\n        checkin.timestamp = now;\r\n \r\n        balances[owner] = balances[owner].add(5e16);\r\n        balances[msg.sender] = balances[msg.sender].sub(5e16);\r\n        emit Transfer(msg.sender,owner,5e16);\r\n        emit transaction(msg.sender,owner,5e16,\"checkin\",id);\r\n\r\n    }\r\n    \r\n    function confirmValidation(\r\n        address checkinOwner,\r\n        string memory checkinId\r\n        ) public {\r\n        Checkin memory checkin = checkins[checkinOwner][convert(checkinId)];\r\n        assert(!checkin.confirmed);\r\n        assert(checkin.reportCount.add(checkin.likeCount)>9);\r\n        if( checkin.reportCount*100 / checkin.likeCount >20){\r\n            \r\n            uint total = checkin.reportCount.add(checkin.likeCount).mul(5e15).add(5e16);\r\n            uint share = total.div(checkin.reportCount);\r\n            for(uint8 index = 0 ; index < checkin.reporters.length ; index++){\r\n                balances[checkin.reporters[index]] =balances[checkin.reporters[index]].add(share);\r\n                emit Transfer(owner,checkin.reporters[index],share);\r\n                 emit transaction(owner,checkin.reporters[index],share,\"confirm\",checkinId);\r\n\r\n            }\r\n            balances[owner] = balances[owner].sub(total);\r\n        }else{\r\n            uint total = checkin.reportCount.add(checkin.likeCount).mul(5e15).add(10e16);\r\n            uint checkinerShare = total.mul(6).div(10);\r\n            uint likersShare = total.sub(checkinerShare);\r\n            uint share = likersShare.div(checkin.likeCount);\r\n            balances[checkinOwner] = balances[checkinOwner].add(checkinerShare);\r\n            emit transaction(owner,checkinOwner,checkinerShare,\"confirm\",checkinId);\r\n            emit Transfer(owner,checkinOwner,checkinerShare);\r\n            for(uint8 i = 0;i<checkin.likers.length;i++){\r\n                balances[checkin.likers[i]] = balances[checkin.likers[i]].add(share);\r\n                emit Transfer(owner,checkin.likers[i],share);\r\n                 emit transaction(owner,checkin.likers[i],share,\"confirm\",checkinId);\r\n\r\n            }\r\n            balances[owner] = balances[owner].sub(total);\r\n        }\r\n        checkins[checkinOwner][convert(checkinId)].confirmed = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkinOwner\",\"type\":\"address\"},{\"name\":\"checkinId\",\"type\":\"string\"},{\"name\":\"reportValue\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"businessId\",\"type\":\"string\"},{\"name\":\"businessName\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"addCheckin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkinOwner\",\"type\":\"address\"},{\"name\":\"checkinId\",\"type\":\"string\"}],\"name\":\"confirmValidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkinOwner\",\"type\":\"address\"},{\"name\":\"checkinId\",\"type\":\"string\"},{\"name\":\"likeValue\",\"type\":\"uint256\"}],\"name\":\"like\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"checkins\",\"outputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"likeCount\",\"type\":\"uint256\"},{\"name\":\"likeValue\",\"type\":\"uint256\"},{\"name\":\"reportCount\",\"type\":\"uint256\"},{\"name\":\"businessId\",\"type\":\"string\"},{\"name\":\"businessName\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"confirmed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"checkinId\",\"type\":\"string\"}],\"name\":\"transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"YoutopinToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://16e86604598d8e952ebc71f5a43e30f8e106141589f5db71d2373d71ebd6f699"}]}