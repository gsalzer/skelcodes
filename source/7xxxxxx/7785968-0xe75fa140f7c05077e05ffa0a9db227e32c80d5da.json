{"status":"1","message":"OK","result":[{"SourceCode":"# Author: SÃ¶ren Steiger, github.com/ssteiger\r\n# License: MIT\r\n\r\n# EVENTS:\r\nNewSolutionFound: event({_addressOfWinner: indexed(address), _solution: uint256})\r\nBountyTransferred: event({_to: indexed(address), _amount: wei_value})\r\nBountyIncreased: event({_amount: wei_value})\r\nCompetitionTimeExtended: event({_to: uint256})\r\n\r\n\r\n# STATE VARIABLES:\r\nowner: public(address)\r\n\r\nx1: public(uint256)\r\nx2: public(uint256)\r\nx3: public(uint256)\r\nx4: public(uint256)\r\n\r\nbestSolution: public(uint256)\r\naddressOfWinner: public(address)\r\n\r\ndurationInBlocks: public(uint256)\r\ncompetitionEnd: public(uint256)\r\nclaimPeriodeLength: public(uint256)\r\n\r\n\r\n# METHODS:\r\n@public\r\ndef __init__(_durationInBlocks: uint256):\r\n    self.owner = msg.sender\r\n    self.bestSolution = 0\r\n    self.durationInBlocks = _durationInBlocks\r\n    self.competitionEnd = block.number + _durationInBlocks\r\n    self.addressOfWinner = ZERO_ADDRESS\r\n    # set claim periode to three days\r\n    # assuming an average blocktime of 14 seconds -> 86400/14\r\n    self.claimPeriodeLength = 6172\r\n\r\n\r\n@public\r\n@payable\r\ndef __default__():\r\n    # return any funds sent to the contract address directly\r\n    send(msg.sender, msg.value)\r\n\r\n\r\n@private\r\ndef _calculateNewSolution(_x1: uint256, _x2: uint256, _x3: uint256, _x4: uint256) -> uint256:\r\n    # check new parameters against constraints\r\n    assert _x1 >= 40\r\n    assert _x2 <= 615\r\n    assert _x3 < 200 and _x3 < 400\r\n    assert (3 * _x1) + (2 * _x3) >= 200\r\n    assert (3 * _x2) - (2 * _x3 * _x4) <= 400\r\n    assert _x1 + _x2 >= 120\r\n    assert _x1 > 0 and _x2 > 0 and _x3 > 0\r\n    assert _x4 == 0 or _x4 == 1\r\n    assert _x1 + _x2 * _x3 <= 200000\r\n    assert _x1 + _x2 * _x3 <= 4000\r\n    # calculate and return new solution\r\n    return (4 * _x1) + (3 * _x2) - (1000 * _x4)\r\n\r\n\r\n@public\r\ndef submitSolution(_x1: uint256, _x2: uint256, _x3: uint256, _x4: uint256) -> uint256:\r\n    newSolution: uint256\r\n    newSolution = self._calculateNewSolution(_x1, _x2, _x3, _x4)\r\n    assert newSolution > self.bestSolution\r\n    # save the solution and it's values\r\n    self.x1 = _x1\r\n    self.x2 = _x2\r\n    self.x3 = _x3\r\n    self.x4 = _x4\r\n    self.bestSolution = newSolution\r\n    self.addressOfWinner = msg.sender\r\n    log.NewSolutionFound(msg.sender, newSolution)\r\n    return newSolution\r\n\r\n\r\n@public\r\ndef claimBounty():\r\n    assert block.number > self.competitionEnd\r\n    if (self.addressOfWinner == ZERO_ADDRESS):\r\n        # no solution was found -> extend duration of competition\r\n        self.competitionEnd = block.number + self.durationInBlocks\r\n    else:\r\n        assert block.number < (self.competitionEnd + self.claimPeriodeLength)\r\n        assert msg.sender == self.addressOfWinner\r\n        send(self.addressOfWinner, self.balance)\r\n        # extend duration of competition\r\n        self.competitionEnd = block.number + self.durationInBlocks\r\n        log.BountyTransferred(self.addressOfWinner, self.balance)\r\n\r\n\r\n@public\r\n@payable\r\ndef topUpBounty():\r\n    log.BountyIncreased(msg.value)\r\n\r\n\r\n@public\r\ndef extendCompetition():\r\n    # only if no valid solution has been submitted\r\n    assert self.addressOfWinner == ZERO_ADDRESS\r\n    assert block.number > (self.competitionEnd + self.claimPeriodeLength)\r\n    # extend duration of competition\r\n    self.competitionEnd = block.number + self.durationInBlocks\r\n    # reset winner address\r\n    self.addressOfWinner = ZERO_ADDRESS\r\n    log.CompetitionTimeExtended(self.competitionEnd)","ABI":"[{\"name\":\"NewSolutionFound\",\"inputs\":[{\"type\":\"address\",\"name\":\"_addressOfWinner\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_solution\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"BountyTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_amount\",\"indexed\":false,\"unit\":\"wei\"}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"BountyIncreased\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\",\"indexed\":false,\"unit\":\"wei\"}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CompetitionTimeExtended\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_to\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_durationInBlocks\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"constant\":false,\"payable\":true,\"type\":\"fallback\"},{\"name\":\"submitSolution\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_x1\"},{\"type\":\"uint256\",\"name\":\"_x2\"},{\"type\":\"uint256\",\"name\":\"_x3\"},{\"type\":\"uint256\",\"name\":\"_x4\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":222213},{\"name\":\"claimBounty\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":75666},{\"name\":\"topUpBounty\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":1614},{\"name\":\"extendCompetition\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":59014},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":633},{\"name\":\"x1\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":663},{\"name\":\"x2\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":693},{\"name\":\"x3\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":723},{\"name\":\"x4\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":753},{\"name\":\"bestSolution\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":783},{\"name\":\"addressOfWinner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":813},{\"name\":\"durationInBlocks\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":843},{\"name\":\"competitionEnd\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":873},{\"name\":\"claimPeriodeLength\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":903}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000181c","Library":"","SwarmSource":""}]}