{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n    mapping (address => bool) public owners;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        owners[msg.sender] = true;\r\n    }\r\n    \r\n    modifier zeus {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier athena {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addOwner(address _newOwner) zeus public {\r\n        owners[_newOwner] = true;\r\n    }\r\n    \r\n    function removeOwner(address _oldOwner) zeus public {\r\n        owners[_oldOwner] = false;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public zeus {\r\n        owner = newOwner;\r\n        owners[newOwner] = true;\r\n        owners[owner] = false;\r\n    }\r\n}\r\n\r\ncontract ContractConn {\r\n    function transfer(address _to, uint _value) public;\r\n}\r\n\r\ncontract POC is owned{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;  \r\n    uint256 public totalSupply;\r\n\r\n    uint256 private constant DAY30 = 2592000;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => uint256) private lockType;\r\n    mapping (address => uint256) private freezeTotal;\r\n    mapping (address => uint256) private freezeBalance;\r\n    mapping (address => uint256) private startReleaseTime;\r\n    mapping (address => uint256) private endLockTime;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    \r\n    constructor() public {\r\n        totalSupply = 200000000 * 10 ** uint256(decimals);  \r\n        balanceOf[msg.sender] = totalSupply;                \r\n        name = \"Pacific Ocean Coin\";                                   \r\n        symbol = \"POC\";                               \r\n    }\r\n\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n\t\tif(freezeBalance[_from] > 0){\r\n\t\t\tif(now >= endLockTime[_from]){\r\n\t\t\t\tdelete freezeBalance[_from];\r\n\t\t\t}else if(now >= startReleaseTime[_from]){\r\n\t\t\t\tuint256 locks;\r\n\t\t\t\tif(lockType[_from] == 1){\r\n\t\t\t\t\tlocks = (now - startReleaseTime[_from]) / DAY30 * 1;\r\n\t\t\t\t\tfreezeBalance[_from] = freezeTotal[_from] * (10 - locks) / 10;\r\n\t\t\t\t}else if(lockType[_from] == 2){\r\n\t\t\t\t\tlocks = (now - startReleaseTime[_from]) / DAY30 * 20;\r\n\t\t\t\t\tfreezeBalance[_from] = freezeTotal[_from] * (100 - locks) / 100;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trequire(_value <= balanceOf[_from] - freezeBalance[_from]);\r\n\t\t}\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowance[_from][msg.sender]);     \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender,_spender,_value);\r\n        return true;\r\n    }\r\n    \r\n    function lock (uint256 _type, address _to, uint256 _value) public athena {\r\n        require(lockType[_to] == 0, \"Each address can only be locked once and only accepts one lock mode.\");\r\n        lockType[_to] = _type;\r\n        freezeTotal[_to] = _value;\r\n        if (_type == 1) {\r\n            startReleaseTime[_to] = DAY30 * 5 + now;\r\n            freezeBalance[_to] = freezeTotal[_to].mul(10).div(10);\r\n            endLockTime[_to] =  DAY30 * 10 + startReleaseTime[_to];\r\n        } else if (_type == 2) {\r\n            startReleaseTime[_to] = DAY30 * 11 + now;\r\n            freezeBalance[_to] = freezeTotal[_to].mul(100).div(100);\r\n            endLockTime[_to] =  DAY30 * 5 + startReleaseTime[_to];\r\n        }\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function extract(address _tokenAddr,address _to,uint256 _value) public athena{\r\n       ContractConn conn = ContractConn(_tokenAddr);\r\n       conn.transfer(_to,_value);\r\n    }\r\n  \r\n    function extractEth(uint256 _value) athena public{\r\n       msg.sender.transfer(_value);\r\n    }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extractEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"POC","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80d95a39956aa02d8c79a18593a7a6a2be50281bba544d3ea6b2c808e6df2c52"}]}