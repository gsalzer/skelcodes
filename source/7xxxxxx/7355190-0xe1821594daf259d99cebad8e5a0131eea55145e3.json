{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      uint i =0;\r\n      for (i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string memory) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(uint8(48 + i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\ncontract AccessControl {\r\n    address payable public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n      \r\n      require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    constructor() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n//Seraphims are contracts or addresses that have write access\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n     function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) {\r\n        uint256 genNum = uint256(blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes4 _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\ncontract OwnableDelegateProxy { }\r\n\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\ncontract iABToken is AccessControl{\r\n \r\n \r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function totalSupply() external view returns (uint256) ;\r\n    function ownerOf(uint256 tokenId) public view returns (address) ;\r\n    function setMaxAngels() external;\r\n    function setMaxAccessories() external;\r\n    function setMaxMedals()  external ;\r\n    function initAngelPrices() external;\r\n    function initAccessoryPrices() external ;\r\n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) ;\r\n    function tokenURI(uint256 _tokenId) public pure returns (string memory) ;\r\n    function baseTokenURI() public pure returns (string memory) ;\r\n    function name() external pure returns (string memory _name) ;\r\n    function symbol() external pure returns (string memory _symbol) ;\r\n    function getApproved(uint256 tokenId) public view returns (address) ;\r\n    function setApprovalForAll(address to, bool approved) public ;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public ;\r\n    function _exists(uint256 tokenId) internal view returns (bool) ;\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) ;\r\n    function _mint(address to, uint256 tokenId) internal ;\r\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public;\r\n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private ;\r\n    function getPrice(uint8 _cardSeriesId) public view returns (uint);\r\n    function buyAngel(uint8 _angelSeriesId) public payable ;\r\n    function buyAccessory(uint8 _accessorySeriesId) public payable ;\r\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) ;\r\n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) ;\r\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId);\r\n    function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external;\r\n    function setName(uint256 tokenId,string memory namechange) public ;\r\n    function setExperience(uint256 tokenId, uint16 _experience) external;\r\n    function setLastBattleResult(uint256 tokenId, uint16 _result) external ;\r\n    function setLastBattleTime(uint256 tokenId) external;\r\n    function setLastBreedingTime(uint256 tokenId) external ;\r\n    function setoldId(uint256 tokenId, uint16 _oldId) external;\r\n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) ;\r\n    function _burn(address owner, uint256 tokenId) internal ;\r\n    function _burn(uint256 tokenId) internal ;\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal ;\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool);\r\n    function _clearApproval(uint256 tokenId) private ;\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ABToken is IERC721, iABToken, ERC165 {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    using Address for address;\r\n    uint256 public totalTokens;\r\n    \r\n    //Mapping or which IDs each address owns\r\n    mapping(address => uint256[]) public ownerABTokenCollection;\r\n    \r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    /*\r\n     * 0x80ac58cd ===\r\n     *     bytes4(keccak256('balanceOf(address)')) ^\r\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\r\n     *     bytes4(keccak256('approve(address,uint256)')) ^\r\n     *     bytes4(keccak256('getApproved(uint256)')) ^\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n     */\r\n     \r\n     \r\n       //current and max numbers of issued tokens for each series \r\n    uint32[100] public currentTokenNumbers;\r\n    uint32[100] public maxTokenNumbers;\r\n    \r\n    //current price of each angel and accessory series\r\n    uint[24] public angelPrice;\r\n    uint[18] public accessoryPrice;\r\n \r\n     address proxyRegistryAddress; \r\n     \r\n   //  Main data structure for each token \r\nstruct ABCard {\r\n    uint256 tokenId;       \r\n        uint8 cardSeriesId;\r\n        //This is 0 to 23 for angels, 24 to 42 for pets, 43 to 60 for accessories, 61 to 72 for medals\r\n        //address owner; \r\n        //already accounted in mapping. \r\n        uint16 power;\r\n        //This number is luck for pets and battlepower for angels\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        string name;\r\n        uint16 experience;\r\n        uint64 lastBattleTime;\r\n        uint64 lastBreedingTime;\r\n        uint16 lastBattleResult;\r\n        uint16 oldId; //for cards transfered from the first version of the game. \r\n    }\r\n     //Main mapping storing an ABCard for each token ID\r\n      mapping(uint256 => ABCard) public ABTokenCollection;\r\n  \r\n    constructor() public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n function totalSupply() external view returns (uint256) {\r\n     return totalTokens;\r\n }\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n    \r\n    //Initial function to set the maximum numbers of each angel card\r\n\r\nfunction setMaxAngels() external onlyCREATOR {\r\n    uint i =0;\r\n   \r\n     //Angels 0 and 1 have no max\r\n     //Lucifer and Michael have max numbers 250\r\n     maxTokenNumbers[2] = 250;\r\n     maxTokenNumbers[3] = 250;\r\n     maxTokenNumbers[4] = 45;\r\n     maxTokenNumbers[5] = 50;\r\n     \r\n    for (i=6; i<15; i++) {\r\n        maxTokenNumbers[i]= 45;\r\n    }\r\n     for (i=15; i<24; i++) {\r\n        maxTokenNumbers[i]= 65;\r\n    }\r\n   \r\n    \r\n}\r\n\r\n//Initial function to set the maximum number of accessories\r\nfunction setMaxAccessories() external onlyCREATOR {\r\n     uint i = 0;\r\n     for (i=43; i<60; i++) {\r\n        maxTokenNumbers[i]= 200;\r\n    }\r\n}\r\n\r\n//Initial function to set the max number of medals\r\n  function setMaxMedals() onlyCREATOR external  {\r\n      maxTokenNumbers[61] = 5000;\r\n      maxTokenNumbers[62] = 5000;\r\n      maxTokenNumbers[63] = 5000;\r\n      maxTokenNumbers[64] = 5000;\r\n      maxTokenNumbers[65] = 500;\r\n      maxTokenNumbers[66] = 500;\r\n      maxTokenNumbers[67] = 200;\r\n      maxTokenNumbers[68] = 200;\r\n      maxTokenNumbers[69] = 200;\r\n      maxTokenNumbers[70] = 100;\r\n      maxTokenNumbers[71] = 100;\r\n      maxTokenNumbers[72] = 50;\r\n  }\r\n    //Function called once at the beginning to set the prices of all the angel cards. \r\n    function initAngelPrices() external onlyCREATOR {\r\n       angelPrice[0] = 0;\r\n       angelPrice[1] = 30000000000000000;\r\n       angelPrice[2] = 666000000000000000;\r\n       angelPrice[3] = 800000000000000000;\r\n       angelPrice[4] = 10000000000000000;\r\n       angelPrice[5] = 10000000000000000;\r\n       angelPrice[6] = 20000000000000000;\r\n       angelPrice[7] = 25000000000000000;\r\n       angelPrice[8] = 16000000000000000;\r\n       angelPrice[9] = 18000000000000000;\r\n       angelPrice[10] = 14000000000000000;\r\n       angelPrice[11] = 20000000000000000;\r\n       angelPrice[12] = 24000000000000000;\r\n       angelPrice[13] = 28000000000000000;\r\n       angelPrice[14] = 40000000000000000;\r\n       angelPrice[15] = 50000000000000000;\r\n       angelPrice[16] = 53000000000000000;\r\n       angelPrice[17] = 60000000000000000;\r\n       angelPrice[18] = 65000000000000000;\r\n       angelPrice[19] = 70000000000000000;\r\n       angelPrice[20] = 75000000000000000;\r\n       angelPrice[21] = 80000000000000000;\r\n       angelPrice[22] = 85000000000000000;\r\n       angelPrice[23] = 90000000000000000;\r\n      \r\n    }\r\n    \r\n        //Function called once at the beginning to set the prices of all the accessory cards. \r\n    function initAccessoryPrices() external onlyCREATOR {\r\n       accessoryPrice[0] = 20000000000000000;\r\n       accessoryPrice[1] = 60000000000000000;\r\n       accessoryPrice[2] = 40000000000000000;\r\n       accessoryPrice[3] = 90000000000000000;\r\n       accessoryPrice[4] = 80000000000000000;\r\n       accessoryPrice[5] = 160000000000000000;\r\n       accessoryPrice[6] = 60000000000000000;\r\n       accessoryPrice[7] = 120000000000000000;\r\n       accessoryPrice[8] = 60000000000000000;\r\n       accessoryPrice[9] = 120000000000000000;\r\n       accessoryPrice[10] = 60000000000000000;\r\n       accessoryPrice[11] = 120000000000000000;\r\n       accessoryPrice[12] = 200000000000000000;\r\n       accessoryPrice[13] = 200000000000000000;\r\n       accessoryPrice[14] = 200000000000000000;\r\n       accessoryPrice[15] = 200000000000000000;\r\n       accessoryPrice[16] = 500000000000000000;\r\n       accessoryPrice[17] = 600000000000000000;\r\n    }\r\n   \r\n    \r\n    // Developer function to change the price (in wei) for a card series. \r\n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external onlyCREATOR {\r\n        if (_cardSeriesId <24) {angelPrice[_cardSeriesId] = _newPrice;} else {\r\n        if ((_cardSeriesId >42) && (_cardSeriesId < 61)) {accessoryPrice[(_cardSeriesId-43)] = _newPrice;}\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n   function withdrawEther() external onlyCREATOR {\r\n    creatorAddress.transfer(address(this).balance);\r\n}\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    \r\n        function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) {\r\n        uint256 genNum = uint256(blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n\r\n   /**\r\n   * @dev Returns an URI for a given token ID\r\n   */\r\n  function tokenURI(uint256 _tokenId) public pure returns (string memory) {\r\n    return Strings.strConcat(\r\n        baseTokenURI(),\r\n        Strings.uint2str(_tokenId)\r\n    );\r\n  }\r\n  \r\n  function baseTokenURI() public pure returns (string memory) {\r\n    return \"https://www.angelbattles.com/URI/\";\r\n  }\r\n  \r\n   /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string memory _name) {\r\n        return \"Angel Battle Token\";\r\n    }\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string memory _symbol) {\r\n        return \"ABT\";\r\n    }\r\n  \r\n  \r\n    \r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    \r\n    /**\r\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\r\n   */\r\n \r\n\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *    is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        require(!_exists(tokenId));\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n        addABTokenIdMapping(to, tokenId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public onlySERAPHIM {\r\n        require((currentTokenNumbers[_cardSeriesId] < maxTokenNumbers[_cardSeriesId] || maxTokenNumbers[_cardSeriesId] == 0));\r\n        require(_cardSeriesId <100);\r\n           ABCard storage abcard = ABTokenCollection[totalTokens];\r\n           abcard.power = _power;\r\n           abcard.cardSeriesId= _cardSeriesId;\r\n           abcard.auraRed = _auraRed;\r\n           abcard.auraYellow= _auraYellow;\r\n           abcard.auraBlue= _auraBlue;\r\n           abcard.name = _name;\r\n           abcard.experience = _experience;\r\n           abcard.tokenId = totalTokens;\r\n           abcard.lastBattleTime = uint64(now);\r\n           abcard.lastBreedingTime = uint64(now);\r\n           abcard.lastBattleResult = 0;\r\n           abcard.oldId = _oldId;\r\n           _mint(owner, totalTokens);\r\n           totalTokens = totalTokens +1;\r\n           currentTokenNumbers[_cardSeriesId] ++;\r\n    }\r\n    \r\n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private {\r\n            uint256[] storage owners = ownerABTokenCollection[_owner];\r\n            owners.push(_tokenId);\r\n    }\r\n    \r\n\r\n    \r\n    function getPrice(uint8 _cardSeriesId) public view returns (uint) {\r\n        if (_cardSeriesId <24) {return angelPrice[_cardSeriesId];}\r\n        if ((_cardSeriesId >42) && (_cardSeriesId < 61)) {return accessoryPrice[(_cardSeriesId-43)];}\r\n        return 0;\r\n    }\r\n    \r\n    function buyAngel(uint8 _angelSeriesId) public payable {\r\n        //don't create another card if we are already at the max\r\n        if ((maxTokenNumbers[_angelSeriesId] <= currentTokenNumbers[_angelSeriesId]) && (_angelSeriesId >1 )) {revert();}\r\n        //don't create another card if they haven't sent enough money. \r\n        if (msg.value < angelPrice[_angelSeriesId]) {revert();} \r\n        //don't create an angel card if they are trying to create a different type of card. \r\n         if ((_angelSeriesId<0) || (_angelSeriesId > 23)) {revert();}\r\n        uint8 auraRed;\r\n        uint8 auraYellow;\r\n        uint8 auraBlue;\r\n        uint16 power;\r\n        (auraRed, auraYellow, auraBlue) = getAura(_angelSeriesId);\r\n        (power) = getAngelPower(_angelSeriesId);\r\n    \r\n       mintABToken(msg.sender, _angelSeriesId, power, auraRed, auraYellow, auraBlue,\"\", 0, 0);\r\n       \r\n    }\r\n    \r\n    \r\n    function buyAccessory(uint8 _accessorySeriesId) public payable {\r\n        //don't create another card if we are already at the max\r\n        if (maxTokenNumbers[_accessorySeriesId] <= currentTokenNumbers[_accessorySeriesId]) {revert();}\r\n        //don't create another card if they haven't sent enough money. \r\n        if (msg.value < accessoryPrice[_accessorySeriesId-43]) {revert();} \r\n        //don't create a card if they are trying to create a different type of card. \r\n        if ((_accessorySeriesId<43) || (_accessorySeriesId > 60)) {revert();}\r\n        mintABToken(msg.sender,_accessorySeriesId, 0, 0, 0, 0, \"\",0, 0);\r\n       \r\n     \r\n       \r\n    }\r\n    \r\n    //Returns the Aura color of each angel\r\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) {\r\n        if (_angelSeriesId == 0) {return(0,0,1);}\r\n        if (_angelSeriesId == 1) {return(0,1,0);}\r\n        if (_angelSeriesId == 2) {return(1,0,1);}\r\n        if (_angelSeriesId == 3) {return(1,1,0);}\r\n        if (_angelSeriesId == 4) {return(1,0,0);}\r\n        if (_angelSeriesId == 5) {return(0,1,0);}\r\n        if (_angelSeriesId == 6) {return(1,0,1);}\r\n        if (_angelSeriesId == 7) {return(0,1,1);}\r\n        if (_angelSeriesId == 8) {return(1,1,0);}\r\n        if (_angelSeriesId == 9) {return(0,0,1);}\r\n        if (_angelSeriesId == 10)  {return(1,0,0);}\r\n        if (_angelSeriesId == 11) {return(0,1,0);}\r\n        if (_angelSeriesId == 12) {return(1,0,1);}\r\n        if (_angelSeriesId == 13) {return(0,1,1);}\r\n        if (_angelSeriesId == 14) {return(1,1,0);}\r\n        if (_angelSeriesId == 15) {return(0,0,1);}\r\n        if (_angelSeriesId == 16)  {return(1,0,0);}\r\n        if (_angelSeriesId == 17) {return(0,1,0);}\r\n        if (_angelSeriesId == 18) {return(1,0,1);}\r\n        if (_angelSeriesId == 19) {return(0,1,1);}\r\n        if (_angelSeriesId == 20) {return(1,1,0);}\r\n        if (_angelSeriesId == 21) {return(0,0,1);}\r\n        if (_angelSeriesId == 22)  {return(1,0,0);}\r\n        if (_angelSeriesId == 23) {return(0,1,1);}\r\n    }\r\n   \r\n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) {\r\n        uint8 randomPower = getRandomNumber(10,0,msg.sender);\r\n        if (_angelSeriesId >=4) {\r\n        return (100 + 10 * ((_angelSeriesId - 4) + randomPower));\r\n        }\r\n        if (_angelSeriesId == 0 ) {\r\n        return (50 + randomPower);\r\n        }\r\n         if (_angelSeriesId == 1) {\r\n        return (120 + randomPower);\r\n        }\r\n         if (_angelSeriesId == 2) {\r\n        return (250 + randomPower);\r\n        }\r\n        if (_angelSeriesId == 3) {\r\n        return (300 + randomPower);\r\n        }\r\n        \r\n    }\r\n    \r\n    function getCurrentTokenNumbers(uint8 _cardSeriesId) view public returns (uint32) {\r\n        return currentTokenNumbers[_cardSeriesId];\r\n}\r\n       function getMaxTokenNumbers(uint8 _cardSeriesId) view public returns (uint32) {\r\n        return maxTokenNumbers[_cardSeriesId];\r\n}\r\n\r\n\r\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId) {\r\n        ABCard memory abcard = ABTokenCollection[tokenId];\r\n        cardSeriesId = abcard.cardSeriesId;\r\n        power = abcard.power;\r\n        experience = abcard.experience;\r\n        auraRed = abcard.auraRed;\r\n        auraBlue = abcard.auraBlue;\r\n        auraYellow = abcard.auraYellow;\r\n        name = abcard.name;\r\n        lastBattleTime = abcard.lastBattleTime;\r\n        lastBattleResult = abcard.lastBattleResult;\r\n        oldId = abcard.oldId;\r\n        owner = ownerOf(tokenId);\r\n    }\r\n    \r\n    \r\n     function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.auraRed = _red;\r\n            abcard.auraYellow = _yellow;\r\n            abcard.auraBlue = _blue;\r\n    }\r\n    }\r\n    \r\n     function setName(uint256 tokenId,string memory namechange) public {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (msg.sender != ownerOf(tokenId)) {revert();}\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.name = namechange;\r\n    }\r\n    }\r\n    \r\n    function setExperience(uint256 tokenId, uint16 _experience) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.experience = _experience;\r\n    }\r\n    }\r\n    \r\n    function setLastBattleResult(uint256 tokenId, uint16 _result) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.lastBattleResult = _result;\r\n    }\r\n    }\r\n    \r\n     function setLastBattleTime(uint256 tokenId) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.lastBattleTime = uint64(now);\r\n    }\r\n    }\r\n    \r\n       function setLastBreedingTime(uint256 tokenId) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.lastBreedingTime = uint64(now);\r\n    }\r\n    }\r\n    \r\n      function setoldId(uint256 tokenId, uint16 _oldId) external onlySERAPHIM {\r\n        ABCard storage abcard = ABTokenCollection[tokenId];\r\n        if (abcard.tokenId == tokenId) {\r\n            abcard.oldId = _oldId;\r\n    }\r\n    }\r\n    \r\n    \r\n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) {\r\n        if (_index >= ownerABTokenCollection[_owner].length) {\r\n            return 0; }\r\n        return ownerABTokenCollection[_owner][_index];\r\n    }\r\n\r\n   /**\r\n     * @dev external function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned\r\n     * Only the owner can burn their token. \r\n     */\r\n    function burn(uint256 tokenId) external {\r\n        require(ownerOf(tokenId) == msg.sender);\r\n        _clearApproval(tokenId);\r\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n        emit Transfer(msg.sender, address(0), tokenId);\r\n    }\r\n    \r\n     /**\r\n     * @dev external function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned\r\n     * Only the owner can burn their token. \r\n     * This function allows a new token type to be reissued. This preserves rarity, while the burn functio increases rarity\r\n     */\r\n    function burnAndRecycle(uint256 tokenId) external {\r\n        require(ownerOf(tokenId) == msg.sender);\r\n        uint8 cardSeriesId;\r\n        _clearApproval(tokenId);\r\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n        (cardSeriesId,,,,,,,,,,) = getABToken (tokenId);\r\n        if (currentTokenNumbers[cardSeriesId] >= 1) {\r\n            currentTokenNumbers[cardSeriesId] = currentTokenNumbers[cardSeriesId] - 1;\r\n        }\r\n        emit Transfer(msg.sender, address(0), tokenId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * Deprecated, use _burn(uint256) instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner);\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        require(to != address(0));\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        addABTokenIdMapping(to, tokenId);\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_angelSeriesId\",\"type\":\"uint8\"}],\"name\":\"getAura\",\"outputs\":[{\"name\":\"auraRed\",\"type\":\"uint8\"},{\"name\":\"auraYellow\",\"type\":\"uint8\"},{\"name\":\"auraBlue\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setLastBreedingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_experience\",\"type\":\"uint16\"}],\"name\":\"setExperience\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accessorySeriesId\",\"type\":\"uint8\"}],\"name\":\"buyAccessory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardSeriesId\",\"type\":\"uint8\"}],\"name\":\"getMaxTokenNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMaxMedals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnAndRecycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initAngelPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardSeriesId\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_oldId\",\"type\":\"uint16\"}],\"name\":\"setoldId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelSeriesId\",\"type\":\"uint8\"}],\"name\":\"buyAngel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getABToken\",\"outputs\":[{\"name\":\"cardSeriesId\",\"type\":\"uint8\"},{\"name\":\"power\",\"type\":\"uint16\"},{\"name\":\"auraRed\",\"type\":\"uint16\"},{\"name\":\"auraYellow\",\"type\":\"uint16\"},{\"name\":\"auraBlue\",\"type\":\"uint16\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"experience\",\"type\":\"uint16\"},{\"name\":\"lastBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleResult\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"oldId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTokenNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"getABTokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_red\",\"type\":\"uint16\"},{\"name\":\"_blue\",\"type\":\"uint16\"},{\"name\":\"_yellow\",\"type\":\"uint16\"}],\"name\":\"setAuras\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMaxAngels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardSeriesId\",\"type\":\"uint8\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setCardSeriesPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxTokenNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"_cardSeriesId\",\"type\":\"uint8\"},{\"name\":\"_power\",\"type\":\"uint16\"},{\"name\":\"_auraRed\",\"type\":\"uint16\"},{\"name\":\"_auraYellow\",\"type\":\"uint16\"},{\"name\":\"_auraBlue\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_experience\",\"type\":\"uint16\"},{\"name\":\"_oldId\",\"type\":\"uint16\"}],\"name\":\"mintABToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"uint16\"}],\"name\":\"setLastBattleResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessoryPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initAccessoryPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setLastBattleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMaxAccessories\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"angelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ABTokenCollection\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"cardSeriesId\",\"type\":\"uint8\"},{\"name\":\"power\",\"type\":\"uint16\"},{\"name\":\"auraRed\",\"type\":\"uint16\"},{\"name\":\"auraYellow\",\"type\":\"uint16\"},{\"name\":\"auraBlue\",\"type\":\"uint16\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"experience\",\"type\":\"uint16\"},{\"name\":\"lastBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastBreedingTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleResult\",\"type\":\"uint16\"},{\"name\":\"oldId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerABTokenCollection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardSeriesId\",\"type\":\"uint8\"}],\"name\":\"getCurrentTokenNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"namechange\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"ABToken","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2f0b683afc34efa6fa419607fd647714d8f654adccad912e54c8fcbe7e62fa9"}]}