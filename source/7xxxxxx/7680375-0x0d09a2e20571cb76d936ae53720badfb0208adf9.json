{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ------------------------------------------------------------------------\r\n// TokenTraderFactory\r\n//\r\n// Decentralised trustless ERC20-compliant token to ETH exchange contract\r\n// on the Ethereum blockchain.\r\n//\r\n// Note that this TokenTrader cannot be used with the Golem Network Token\r\n// directly as the token does not implement the ERC20\r\n// transferFrom(...), approve(...) and allowance(...) methods\r\n//\r\n// History:\r\n//   Jan 25 2017 - BPB Added makerTransferAsset(...) and\r\n//                     makerTransferEther(...)\r\n//   Feb 05 2017 - BPB Bug fix in the change calculation for the Unicorn\r\n//                     token with natural number 1\r\n//   Feb 08 2017 - BPB/JL Renamed etherValueOfTokensToSell to\r\n//                     amountOfTokensToSell in takerSellAsset(...) to\r\n//                     better describe the parameter\r\n//                     Added check in createTradeContract(...) to prevent\r\n//                     GNTs from being used with this contract. The asset\r\n//                     token will need to have an allowance(...) function.\r\n//\r\n// Enjoy. (c) JonnyLatte & BokkyPooBah 2017. The MIT licence.\r\n// ------------------------------------------------------------------------\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint supply);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrTokenTraderWithSameOwner {\r\n        if (msg.sender != owner && TokenTrader(msg.sender).owner() != owner) revert();\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// contract can buy or sell tokens for ETH\r\n// prices are in amount of wei per batch of token units\r\n\r\ncontract TokenTrader is Owned {\r\n\r\n    address public asset;       // address of token\r\n    uint256 public buyPrice;    // contract buys lots of token at this price\r\n    uint256 public sellPrice;   // contract sells lots at this price\r\n    uint256 public units;       // lot size (token-wei)\r\n\r\n    bool public buysTokens;     // is contract buying\r\n    bool public sellsTokens;    // is contract selling\r\n\r\n    event ActivatedEvent(bool buys, bool sells);\r\n    event MakerDepositedEther(uint256 amount);\r\n    event MakerWithdrewAsset(uint256 tokens);\r\n    event MakerTransferredAsset(address toTokenTrader, uint256 tokens);\r\n    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\r\n    event MakerWithdrewEther(uint256 ethers);\r\n    event MakerTransferredEther(address toTokenTrader, uint256 ethers);\r\n    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\r\n        uint256 ethersReturned, uint256 tokensBought);\r\n    event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell,\r\n        uint256 tokensSold, uint256 etherValueOfTokensSold);\r\n\r\n    // Constructor - only to be called by the TokenTraderFactory contract\r\n    constructor (\r\n        address _asset,\r\n        uint256 _buyPrice,\r\n        uint256 _sellPrice,\r\n        uint256 _units,\r\n        bool    _buysTokens,\r\n        bool    _sellsTokens\r\n    ) public {\r\n        asset       = _asset;\r\n        buyPrice    = _buyPrice;\r\n        sellPrice   = _sellPrice;\r\n        units       = _units;\r\n        buysTokens  = _buysTokens;\r\n        sellsTokens = _sellsTokens;\r\n        emit ActivatedEvent(buysTokens, sellsTokens);\r\n    }\r\n\r\n    // Maker can activate or deactivate this contract's buying and\r\n    // selling status\r\n    //\r\n    // The ActivatedEvent() event is logged with the following\r\n    // parameter:\r\n    //   buysTokens   this contract can buy asset tokens\r\n    //   sellsTokens  this contract can sell asset tokens\r\n    //\r\n    function activate (\r\n        bool _buysTokens,\r\n        bool _sellsTokens\r\n    ) public onlyOwner {\r\n        buysTokens  = _buysTokens;\r\n        sellsTokens = _sellsTokens;\r\n        emit ActivatedEvent(buysTokens, sellsTokens);\r\n    }\r\n\r\n    // Maker can deposit ethers to this contract so this contract\r\n    // can buy asset tokens.\r\n    //\r\n    // Maker deposits asset tokens to this contract by calling the\r\n    // asset's transfer() method with the following parameters\r\n    //   _to     is the address of THIS contract\r\n    //   _value  is the number of asset tokens to be transferred\r\n    //\r\n    // Taker MUST NOT send tokens directly to this contract. Takers\r\n    // MUST use the takerSellAsset() method to sell asset tokens\r\n    // to this contract\r\n    //\r\n    // Maker can also transfer ethers from one TokenTrader contract\r\n    // to another TokenTrader contract, both owned by the Maker\r\n    //\r\n    // The MakerDepositedEther() event is logged with the following\r\n    // parameter:\r\n    //   ethers  is the number of ethers deposited by the maker\r\n    //\r\n    // This method was called deposit() in the old version\r\n    //\r\n    function makerDepositEther() public payable onlyOwnerOrTokenTraderWithSameOwner {\r\n        emit MakerDepositedEther(msg.value);\r\n    }\r\n\r\n    // Maker can withdraw asset tokens from this contract, with the\r\n    // following parameter:\r\n    //   tokens  is the number of asset tokens to be withdrawn\r\n    //\r\n    // The MakerWithdrewAsset() event is logged with the following\r\n    // parameter:\r\n    //   tokens  is the number of tokens withdrawn by the maker\r\n    //\r\n    // This method was called withdrawAsset() in the old version\r\n    //\r\n    function makerWithdrawAsset(uint256 tokens) public onlyOwner returns (bool) {\r\n        emit MakerWithdrewAsset(tokens);\r\n        return ERC20(asset).transfer(owner, tokens);\r\n    }\r\n\r\n    // Maker can transfer asset tokens from this contract to another\r\n    // TokenTrader contract, with the following parameter:\r\n    //   toTokenTrader  Another TokenTrader contract owned by the\r\n    //                  same owner and with the same asset\r\n    //   tokens         is the number of asset tokens to be moved\r\n    //\r\n    // The MakerTransferredAsset() event is logged with the following\r\n    // parameters:\r\n    //   toTokenTrader  The other TokenTrader contract owned by\r\n    //                  the same owner and with the same asset\r\n    //   tokens         is the number of tokens transferred\r\n    //\r\n    // The asset Transfer() event is also logged from this contract\r\n    // to the other contract\r\n    //\r\n    function makerTransferAsset(\r\n        TokenTrader toTokenTrader,\r\n        uint256 tokens\r\n    ) public onlyOwner returns (bool) {\r\n        if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) {\r\n            revert();\r\n        }\r\n        emit MakerTransferredAsset(toTokenTrader, tokens);\r\n        return ERC20(asset).transfer(toTokenTrader, tokens);\r\n    }\r\n\r\n    // Maker can withdraw any ERC20 asset tokens from this contract\r\n    //\r\n    // This method is included in the case where this contract receives\r\n    // the wrong tokens\r\n    //\r\n    // The MakerWithdrewERC20Token() event is logged with the following\r\n    // parameter:\r\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\r\n    //   tokens        is the number of tokens withdrawn by the maker\r\n    //\r\n    // This method was called withdrawToken() in the old version\r\n    //\r\n    function makerWithdrawERC20Token(\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    ) public onlyOwner returns (bool) {\r\n        emit MakerWithdrewERC20Token(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // Maker can withdraw ethers from this contract\r\n    //\r\n    // The MakerWithdrewEther() event is logged with the following parameter\r\n    //   ethers  is the number of ethers withdrawn by the maker\r\n    //\r\n    // This method was called withdraw() in the old version\r\n    //\r\n    function makerWithdrawEther(uint256 ethers) public onlyOwner returns (bool) {\r\n        address addr = this;\r\n        if (addr.balance >= ethers) {\r\n            emit MakerWithdrewEther(ethers);\r\n            return owner.send(ethers);\r\n        }\r\n    }\r\n\r\n    // Maker can transfer ethers from this contract to another TokenTrader\r\n    // contract, with the following parameters:\r\n    //   toTokenTrader  Another TokenTrader contract owned by the\r\n    //                  same owner and with the same asset\r\n    //   ethers         is the number of ethers to be moved\r\n    //\r\n    // The MakerTransferredEther() event is logged with the following parameter\r\n    //   toTokenTrader  The other TokenTrader contract owned by the\r\n    //                  same owner and with the same asset\r\n    //   ethers         is the number of ethers transferred\r\n    //\r\n    // The MakerDepositedEther() event is logged on the other\r\n    // contract with the following parameter:\r\n    //   ethers  is the number of ethers deposited by the maker\r\n    //\r\n    function makerTransferEther(\r\n        TokenTrader toTokenTrader,\r\n        uint256 ethers\r\n    ) public onlyOwner returns (bool) {\r\n        if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) {\r\n            revert();\r\n        }\r\n        address addr = this;\r\n        if (addr.balance >= ethers) {\r\n            emit MakerTransferredEther(toTokenTrader, ethers);\r\n            toTokenTrader.makerDepositEther.value(ethers)();\r\n        }\r\n    }\r\n\r\n    // Taker buys asset tokens by sending ethers\r\n    //\r\n    // The TakerBoughtAsset() event is logged with the following parameters\r\n    //   buyer           is the buyer's address\r\n    //   ethersSent      is the number of ethers sent by the buyer\r\n    //   ethersReturned  is the number of ethers sent back to the buyer as\r\n    //                   change\r\n    //   tokensBought    is the number of asset tokens sent to the buyer\r\n    //\r\n    // This method was called buy() in the old version\r\n    //\r\n    function takerBuyAsset() public payable {\r\n        if (sellsTokens || msg.sender == owner) {\r\n            // Note that sellPrice has already been validated as > 0\r\n            uint order    = msg.value / sellPrice;\r\n            // Note that units has already been validated as > 0\r\n            uint can_sell = ERC20(asset).balanceOf(address(this)) / units;\r\n            uint256 change = 0;\r\n            if (msg.value > (can_sell * sellPrice)) {\r\n                change  = msg.value - (can_sell * sellPrice);\r\n                order = can_sell;\r\n            }\r\n            if (change > 0) {\r\n                if (!msg.sender.send(change)) revert();\r\n            }\r\n            if (order > 0) {\r\n                if (!ERC20(asset).transfer(msg.sender, order * units)) revert();\r\n            }\r\n            emit TakerBoughtAsset(msg.sender, msg.value, change, order * units);\r\n        }\r\n        // Return user funds if the contract is not selling\r\n        else if (!msg.sender.send(msg.value)) revert();\r\n    }\r\n\r\n    // Taker sells asset tokens for ethers by:\r\n    // 1. Calling the asset's approve() method with the following parameters\r\n    //    _spender            is the address of this contract\r\n    //    _value              is the number of tokens to be sold\r\n    // 2. Calling this takerSellAsset() method with the following parameter\r\n    //    etherValueOfTokens  is the ether value of the asset tokens to be sold\r\n    //                        by the taker\r\n    //\r\n    // The TakerSoldAsset() event is logged with the following parameters\r\n    //   seller                  is the seller's address\r\n    //   amountOfTokensToSell    is the amount of the asset tokens being\r\n    //                           sold by the taker\r\n    //   tokensSold              is the number of the asset tokens sold\r\n    //   etherValueOfTokensSold  is the ether value of the asset tokens sold\r\n    //\r\n    // This method was called sell() in the old version\r\n    //\r\n    function takerSellAsset(uint256 amountOfTokensToSell) public {\r\n        if (buysTokens || msg.sender == owner) {\r\n            // Maximum number of token the contract can buy\r\n            // Note that buyPrice has already been validated as > 0\r\n            address addr = this;\r\n            uint256 can_buy = addr.balance / buyPrice;\r\n            // Token lots available\r\n            // Note that units has already been validated as > 0\r\n            uint256 order = amountOfTokensToSell / units;\r\n            // Adjust order for funds available\r\n            if (order > can_buy) order = can_buy;\r\n            if (order > 0) {\r\n                // Extract user tokens\r\n                if (!ERC20(asset).transferFrom(msg.sender, address(this), order * units)) revert();\r\n                // Pay user\r\n                if (!msg.sender.send(order * buyPrice)) revert();\r\n            }\r\n            emit TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);\r\n        }\r\n    }\r\n\r\n    // Taker buys tokens by sending ethers\r\n    function () public payable {\r\n        takerBuyAsset();\r\n    }\r\n}\r\n\r\n// This contract deploys TokenTrader contracts and logs the event\r\ncontract TokenTraderFactory is Owned {\r\n\r\n    event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress,\r\n        address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units,\r\n        bool buysTokens, bool sellsTokens);\r\n    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\r\n\r\n    mapping(address => bool) _verify;\r\n\r\n    uint256 internal accountCount = 0;\r\n    mapping(address => address) internal addressLinkedList;\r\n\r\n    /**\r\n     * @notice Return a list of addresses and their tokens\r\n     * @return Two arrays, the first a list of addresses, the second a list of\r\n     *   token amounts. Each index matches the other.\r\n     */\r\n    function list() public view returns (address[]) {\r\n        address[] memory addrs = new address[](accountCount);\r\n\r\n        uint256 i = 0;\r\n        address current = addressLinkedList[0];\r\n        while (current != 0) {\r\n            addrs[i] = current;\r\n            current = addressLinkedList[current];\r\n            i++;\r\n        }\r\n\r\n        return addrs;\r\n    }\r\n\r\n    // Anyone can call this method to verify the settings of a\r\n    // TokenTrader contract. The parameters are:\r\n    //   tradeContract  is the address of a TokenTrader contract\r\n    //\r\n    // Return values:\r\n    //   valid        did this TokenTraderFactory create the TokenTrader contract?\r\n    //   owner        is the owner of the TokenTrader contract\r\n    //   asset        is the ERC20 asset address\r\n    //   buyPrice     is the buy price in ethers per `units` of asset tokens\r\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\r\n    //   units        is the number of units of asset tokens\r\n    //   buysTokens   is the TokenTrader contract buying tokens?\r\n    //   sellsTokens  is the TokenTrader contract selling tokens?\r\n    //\r\n    function verify(address tradeContract) public constant returns (\r\n        bool    valid,\r\n        address owner,\r\n        address asset,\r\n        uint256 buyPrice,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    buysTokens,\r\n        bool    sellsTokens\r\n    ) {\r\n        valid = _verify[tradeContract];\r\n        if (valid) {\r\n            TokenTrader t = TokenTrader(tradeContract);\r\n            owner         = t.owner();\r\n            asset         = t.asset();\r\n            buyPrice      = t.buyPrice();\r\n            sellPrice     = t.sellPrice();\r\n            units         = t.units();\r\n            buysTokens    = t.buysTokens();\r\n            sellsTokens   = t.sellsTokens();\r\n        }\r\n    }\r\n\r\n    // Maker can call this method to create a new TokenTrader contract\r\n    // with the maker being the owner of this new contract\r\n    //\r\n    // Parameters:\r\n    //   asset        is the ERC20 asset address\r\n    //   buyPrice     is the buy price in ethers per `units` of asset tokens\r\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\r\n    //   units        is the number of units of asset tokens\r\n    //   buysTokens   is the TokenTrader contract buying tokens?\r\n    //   sellsTokens  is the TokenTrader contract selling tokens?\r\n    //\r\n    // For example, listing a TokenTrader contract on the REP Augur token where\r\n    // the contract will buy REP tokens at a rate of 39000/100000 = 0.39 ETH\r\n    // per REP token and sell REP tokens at a rate of 41000/100000 = 0.41 ETH\r\n    // per REP token:\r\n    //   asset        0x48c80f1f4d53d5951e5d5438b54cba84f29f32a5\r\n    //   buyPrice     39000\r\n    //   sellPrice    41000\r\n    //   units        100000\r\n    //   buysTokens   true\r\n    //   sellsTokens  true\r\n    //\r\n    // The TradeListing() event is logged with the following parameters\r\n    //   ownerAddress        is the Maker's address\r\n    //   tokenTraderAddress  is the address of the newly created TokenTrader contract\r\n    //   asset               is the ERC20 asset address\r\n    //   buyPrice            is the buy price in ethers per `units` of asset tokens\r\n    //   sellPrice           is the sell price in ethers per `units` of asset tokens\r\n    //   unit                is the number of units of asset tokens\r\n    //   buysTokens          is the TokenTrader contract buying tokens?\r\n    //   sellsTokens         is the TokenTrader contract selling tokens?\r\n    //\r\n    function createTradeContract(\r\n        address asset,\r\n        uint256 buyPrice,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    buysTokens,\r\n        bool    sellsTokens\r\n    ) public returns (address trader) {\r\n        // Cannot have invalid asset\r\n        if (asset == 0x0) revert();\r\n        // Check for ERC20 allowance function\r\n        // This will revert() an error if the allowance function\r\n        // is undefined to prevent GNTs from being used\r\n        // with this factory\r\n        ERC20(asset).allowance(msg.sender, this);\r\n        // Cannot set zero or negative price\r\n        if (buyPrice <= 0 || sellPrice <= 0) revert();\r\n        // Must make profit on spread\r\n        if (buyPrice >= sellPrice) revert();\r\n        // Cannot buy or sell zero or negative units\r\n        if (units <= 0) revert();\r\n\r\n        trader = new TokenTrader(\r\n            asset,\r\n            buyPrice,\r\n            sellPrice,\r\n            units,\r\n            buysTokens,\r\n            sellsTokens);\r\n        // Record that this factory created the trader\r\n        _verify[trader] = true;\r\n        addToList(trader);\r\n        // Set the owner to whoever called the function\r\n        TokenTrader(trader).transferOwnership(msg.sender);\r\n        emit TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens);\r\n    }\r\n\r\n    // Factory owner can withdraw any ERC20 asset tokens from this contract\r\n    //\r\n    // This method is included in the case where this contract receives\r\n    // the wrong tokens\r\n    //\r\n    // The OwnerWithdrewERC20Token() event is logged with the following\r\n    // parameter:\r\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\r\n    //   tokens        is the number of tokens withdrawn by the maker\r\n    //\r\n    function ownerWithdrawERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool) {\r\n        emit OwnerWithdrewERC20Token(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // Prevents accidental sending of ether to the factory\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @notice Add an account to a linked list\r\n     * @param addr address of the account to add to the linked list\r\n     * @dev This is necessary to iterate over for listing purposes\r\n     */\r\n    function addToList(address addr) internal {\r\n        addressLinkedList[addr] = addressLinkedList[0x0];\r\n        addressLinkedList[0x0] = addr;\r\n        accountCount++;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove an account from a linked list\r\n     * @param addr address of the account to remove from the linked list\r\n     * @dev This is necessary to iterate over for listing purposes\r\n     */\r\n    function removeFromList(address addr) internal {\r\n        uint16 i = 0;\r\n        bool found = false;\r\n        address parent;\r\n        address current = addressLinkedList[0];\r\n        while (true) {\r\n            if (addressLinkedList[current] == addr) {\r\n                parent = current;\r\n                found = true;\r\n                break;\r\n            }\r\n            current = addressLinkedList[current];\r\n\r\n            if (i++ > accountCount) break;\r\n        }\r\n\r\n        require(found, \"Account was not found to remove.\");\r\n\r\n        addressLinkedList[parent] = addressLinkedList[addressLinkedList[parent]];\r\n        delete addressLinkedList[addr];\r\n\r\n        accountCount--;\r\n    }\r\n\r\n    /**\r\n     * @notice Make sure that this address exists in our linked list\r\n     * @param addr address of the account to test\r\n     * @dev This is necessary to iterate over for listing purposes\r\n     */\r\n    function ensureInList(address addr) internal {\r\n        bool found = false;\r\n        address current = addressLinkedList[0];\r\n        while (current != 0) {\r\n            if (current == addr) {\r\n                found = true;\r\n                break;\r\n            }\r\n            current = addressLinkedList[current];\r\n        }\r\n        if (!found) {\r\n            addToList(addr);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"buysTokens\",\"type\":\"bool\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"createTradeContract\",\"outputs\":[{\"name\":\"trader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeContract\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"buysTokens\",\"type\":\"bool\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenTraderAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buysTokens\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"TradeListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrewERC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenTraderFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://af6e552dd334a25a8d0e29241594dceb3a81e405ffcdc12ad3d7a062f4b94e81"}]}