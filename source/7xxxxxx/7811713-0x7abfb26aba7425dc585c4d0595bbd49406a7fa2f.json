{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() public {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n\r\n/// @title Main contract for WrappedCK. This contract converts Cryptokitties between the ERC721 standard and the \r\n///  ERC20 standard by locking cryptokitties into the contract and minting 1:1 backed ERC20 tokens, that\r\n///  can then be redeemed for cryptokitties when desired.\r\n/// @notice When wrapping a cryptokitty, you get a generic WCK token. Since the WCK token is generic, it has no\r\n///  no information about what cryptokitty you submitted, so you will most likely not receive the same kitty\r\n///  back when redeeming the token. The token only entitles you to receive *a* cryptokitty in return, not \r\n///  necessarily the *same* cryptokitty in return. This is due to the very nature of the ERC20 standard being\r\n///  fungible, and the ERC721 standard being nonfungible.\r\ncontract WrappedCK is ERC20, ReentrancyGuard {\r\n\r\n    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\r\n    using SafeMath for uint256;\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    /// @dev This event is fired when a user deposits cryptokitties into the contract in exchange\r\n    ///  for an equal number of WCK ERC20 tokens.\r\n    /// @param kittyId  The cryptokitty id of the kitty that was deposited into the contract.\r\n    /// @param tokensMinted  The number of WCK ERC20 tokens that were minted (measured in 10^18 times\r\n    ///  the number of tokens minted, due to 18 decimal places).\r\n    event DepositKittyAndMintToken(\r\n        uint256 kittyId,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    /// @dev This event is fired when a user deposits WCK ERC20 tokens into the contract in exchange\r\n    ///  for an equal number of locked cryptokitties.\r\n    /// @param kittyId  The cryptokitty id of the kitty that was withdrawn from the contract.\r\n    /// @param tokensBurned  The number of WCK ERC20 tokens that were burned (measured in 10^18 times\r\n    ///  the number of tokens minted, due to 18 decimal places).\r\n    event BurnTokenAndWithdrawKitty(\r\n        uint256 kittyId,\r\n        uint256 tokensBurned\r\n    );\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    /// @dev A queue containing all of the cryptokitties that are locked in the contract, backing\r\n    ///  WCK ERC20 tokens 1:1\r\n    /// @notice We use a queue rather than a stack since many users in the community requested the\r\n    ///  ability to deposit and withdraw a kitty in order to \"reroll\" its appearance.\r\n    uint256[] private depositedKittiesQueue;\r\n    uint256 private queueStartIndex;\r\n    uint256 private queueEndIndex;\r\n    \r\n    /* ********* */\r\n    /* CONSTANTS */\r\n    /* ********* */\r\n\r\n    /// @dev The metadata details about the \"Wrapped CryptoKitties\" WCK ERC20 token.\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"Wrapped CryptoKitties\";\r\n    string constant public symbol = \"WCK\";\r\n\r\n    /// @dev The address of official CryptoKitties contract that stores the metadata about each cat.\r\n    /// @notice The owner is not capable of changing the address of the CryptoKitties Core contract \r\n    ///  once the contract has been deployed.\r\n    address public kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    KittyCore kittyCore;\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    /// @notice Allows a user to lock one cryptokitty in the contract in exchange for one WCK ERC20 \r\n    ///  token.\r\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\r\n    /// @notice The user must first call approve() in the Cryptokitties Core contract before calling \r\n    ///  depositAndMint(). There is no danger of this contract overreaching its approval, since the \r\n    ///  CryptoKitties Core contract's approve() function only approves this contract for a single \r\n    ///  Cryptokitty. Calling approve() allows this contract to transfer the specified kitty in the \r\n    ///  depositAndMint() function.\r\n    function depositKittyAndMintToken(uint256 _kittyId) external nonReentrant {\r\n        require(msg.sender == kittyCore.ownerOf(_kittyId), 'you do not own this cat');\r\n        require(kittyCore.kittyIndexToApproved(_kittyId) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\r\n        kittyCore.transferFrom(msg.sender, address(this), _kittyId);\r\n        _enqueueKitty(_kittyId);\r\n        _mint(msg.sender, 10**18);\r\n        emit DepositKittyAndMintToken(_kittyId, 10**18);\r\n    }\r\n\r\n    /// @notice Convenience function for calling depositAndMint() multiple times in a single transaction.\r\n    /// @param _kittyIds  The ids of the cryptokitties that will be locked into the contract.\r\n    function multiDepositKittyAndMintToken(uint256[] calldata _kittyIds) external nonReentrant {\r\n        for(uint i = 0; i < _kittyIds.length; i++){\r\n            uint256 kittyToDeposit = _kittyIds[i];\r\n            require(msg.sender == kittyCore.ownerOf(kittyToDeposit), 'you do not own this cat');\r\n            require(kittyCore.kittyIndexToApproved(kittyToDeposit) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\r\n            kittyCore.transferFrom(msg.sender, address(this), kittyToDeposit);\r\n            _enqueueKitty(kittyToDeposit);\r\n            emit DepositKittyAndMintToken(kittyToDeposit, 10**18);\r\n        }\r\n        _mint(msg.sender, (_kittyIds.length).mul(10**18));\r\n    }\r\n\r\n    /// @notice Allows a user to burn one WCK ERC20 token in exchange for one locked cryptokitty.\r\n    /// @notice Due to the nature of WCK ERC20 being fungible and interchangeable, the contract is\r\n    ///  not able to coordinate that you receive the same crypokitty that you originally locked into\r\n    ///  the contract.\r\n    function burnTokenAndWithdrawKitty() external nonReentrant {\r\n        require(balanceOf(msg.sender) >= 10**18, 'you do not own enough tokens to withdraw an ERC721 cat');\r\n        uint256 kittyId = _dequeueKitty();\r\n        _burn(msg.sender, 10**18);\r\n        kittyCore.transferFrom(address(this), msg.sender, kittyId);\r\n        emit BurnTokenAndWithdrawKitty(kittyId, 10**18);\r\n    }\r\n\r\n    /// @notice Convenience function for calling burnAndWithdraw() multiple times in a single transaction.\r\n    /// @param _numTokens  The number of WCK ERC20 tokens that will be burned in exchange for cryptokitties.\r\n    function multiBurnTokenAndWithdrawKitty(uint256 _numTokens) external nonReentrant {\r\n        require(balanceOf(msg.sender) >= _numTokens.mul(10**18), 'you do not own enough tokens to withdraw this many ERC721 cats');\r\n        _burn(msg.sender, _numTokens.mul(10**18));\r\n        for(uint i = 0; i < _numTokens; i++){\r\n            uint256 kittyToWithdraw = _dequeueKitty();\r\n            kittyCore.transfer(msg.sender, kittyToWithdraw);\r\n            emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\r\n        }\r\n    }\r\n\r\n    /// @notice Allows a user to lock one cryptokitty in the contract in exchange for unlocking a \r\n    ///  different cryptokitty that was previously locked in the contract.\r\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\r\n    /// @notice The user must first call approve() in the Cryptokitties Core contract before calling \r\n    ///  depositAndMint(). There is no danger of this contract overreaching its approval, since the \r\n    ///  CryptoKitties Core contract's approve() function only approves this contract for a single \r\n    ///  Cryptokitty. Calling approve() allows this contract to transfer the specified kitty in the \r\n    ///  depositAndMint() function.\r\n    /// @notice This is a convenience function so that users do not need to call both depositAndMint()\r\n    ///  and burnAndWithdraw() in succession. Many users in the community requested the ability to \r\n    ///  deposit and withdraw a kitty in order to \"reroll\" its appearance, which this function \r\n    ///  accomplishes.\r\n    function depositKittyAndWithdrawDifferentKitty(uint256 _kittyId) external nonReentrant {\r\n        require(msg.sender == kittyCore.ownerOf(_kittyId), 'you do not own this cat');\r\n        require(kittyCore.kittyIndexToApproved(_kittyId) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\r\n        kittyCore.transferFrom(msg.sender, address(this), _kittyId);\r\n        _enqueueKitty(_kittyId);\r\n        uint256 kittyToWithdraw = _dequeueKitty();\r\n        kittyCore.transferFrom(address(this), msg.sender, kittyToWithdraw);\r\n        emit DepositKittyAndMintToken(_kittyId, 10**18);\r\n        emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\r\n    }\r\n\r\n    /// @notice Convenience function for calling depositAndWithdraw() multiple times in a single transaction.\r\n    /// @param _kittyIds  The ids of the cryptokitties that will be locked into the contract.\r\n    function multiDepositKittyAndWithdrawDifferentKitty(uint256[] calldata _kittyIds) external nonReentrant {\r\n        for(uint i = 0; i < _kittyIds.length; i++){\r\n            uint256 kittyToDeposit = _kittyIds[i];\r\n            require(msg.sender == kittyCore.ownerOf(kittyToDeposit), 'you do not own this cat');\r\n            require(kittyCore.kittyIndexToApproved(kittyToDeposit) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\r\n            kittyCore.transferFrom(msg.sender, address(this), kittyToDeposit);\r\n            _enqueueKitty(kittyToDeposit);\r\n            uint256 kittyToWithdraw = _dequeueKitty();\r\n            kittyCore.transferFrom(address(this), msg.sender, kittyToWithdraw);\r\n            emit DepositKittyAndMintToken(kittyToDeposit, 10**18);\r\n            emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\r\n        }\r\n    }\r\n    \r\n    /// @notice Adds a locked cryptokitty to the end of the queue\r\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\r\n    function _enqueueKitty(uint256 _kittyId) internal {\r\n        depositedKittiesQueue.push(_kittyId);\r\n        queueEndIndex = queueEndIndex.add(1);\r\n    }\r\n\r\n    /// @notice Adds a locked cryptokitty to the end of the queue\r\n    /// @return  The id of the cryptokitty that will be unlocked from the contract.\r\n    function _dequeueKitty() internal returns(uint256){\r\n        require(queueStartIndex < queueEndIndex, 'there are no cats in the queue');\r\n        uint256 kittyId = depositedKittiesQueue[queueStartIndex];\r\n        queueStartIndex = queueStartIndex.add(1);\r\n        return kittyId;\r\n    }\r\n\r\n    /// @return The number of cryptokitties locked in the contract that back outstanding\r\n    ///  WCK tokens.\r\n    function totalCatsLockedInContract() public view returns(uint256){\r\n        return queueEndIndex.sub(queueStartIndex);\r\n    }\r\n\r\n    /// @notice The owner is not capable of changing the address of the CryptoKitties Core \r\n    ///  contract once the contract has been deployed.\r\n    constructor() public {\r\n        kittyCore = KittyCore(kittyCoreAddress);\r\n    }\r\n\r\n    /// @dev We leave the fallback function payable in case the current State Rent proposals require\r\n    ///  us to send funds to this contract to keep it alive on mainnet.\r\n    /// @notice There is no function that allows the contract creator to withdraw any funds sent\r\n    ///  to this contract, so any funds sent directly to the fallback fucntion that are not used for \r\n    ///  State Rent are lost forever.\r\n    function() external payable {}\r\n}\r\n\r\n/// @title Interface for interacting with the CryptoKitties Core contract created by Dapper Labs Inc.\r\ncontract KittyCore {\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    mapping (uint256 => address) public kittyIndexToApproved;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"depositKittyAndMintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCatsLockedInContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokenAndWithdrawKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"depositKittyAndWithdrawDifferentKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyIds\",\"type\":\"uint256[]\"}],\"name\":\"multiDepositKittyAndWithdrawDifferentKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"multiBurnTokenAndWithdrawKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyIds\",\"type\":\"uint256[]\"}],\"name\":\"multiDepositKittyAndMintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"DepositKittyAndMintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"BurnTokenAndWithdrawKitty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WrappedCK","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf3a293b52c9afc07e50fed9073304e199f5c14a3bd296abb70d434a9175ff26"}]}