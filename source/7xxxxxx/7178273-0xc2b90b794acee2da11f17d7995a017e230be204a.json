{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address payable public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable otherOwner) onlyOwner public {\r\n        require(otherOwner != address(0));\r\n        newOwner = otherOwner;\r\n    }\r\n\r\n    function approveOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address payable to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address payable from, address payable to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SunRichConfig is Ownable {\r\n    mapping(string => uint256) private data;\r\n\r\n    function set(string memory _key, uint256 _value) onlyOwner public {\r\n        data[_key] = _value;\r\n    }\r\n\r\n    function get(string memory _key) public view returns (uint256 _value){\r\n        return data[_key];\r\n    }\r\n\r\n    constructor() public {\r\n        // Fees (in percent x100)\r\n        set('fee.a2a_sender',   200); // 2.00\r\n        set('fee.a2a_receiver', 0);\r\n        set('fee.a2b_sender',   0);\r\n        set('fee.a2b_receiver', 200); // 2.00\r\n        set('fee.b2a_sender',   200); // 2.00\r\n        set('fee.b2a_receiver', 0);\r\n        set('fee.b2b_sender',   200); // 2.00\r\n        set('fee.b2b_receiver', 200); // 2.00\r\n\r\n        // Address for fee collection\r\n        set('fee.collector', uint256(msg.sender));\r\n\r\n        // Address for token issuer\r\n        set('eth.issuer', uint256(msg.sender));\r\n\r\n        // ETH topup enabled\r\n        set('eth.topup', 1);\r\n        // Minimum balance in finney for auto topup\r\n        set('eth.minBalance', 5);\r\n    }\r\n}\r\n\r\ncontract SunRichAccounts is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) systemAccounts;\r\n    mapping(address => bool) businessAccounts;\r\n    mapping(address => uint256) premiumAccounts;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => bool) frozen;\r\n\r\n    SunRichController ctrl;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == address(ctrl));\r\n        _;\r\n    }\r\n \r\n    function setController(address payable _ctrl) public onlyOwner {\r\n        ctrl = SunRichController(_ctrl);\r\n    }\r\n\r\n    function getBalance(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function addTo(address _to, uint256 _value) public onlyController returns (uint256) {\r\n        require(_to != address(0));\r\n        balances[_to] = balances[_to].add(_value);\r\n        return balances[_to];\r\n    }\r\n\r\n    function subFrom(address _from, uint256 _value) public onlyController returns (uint256) {\r\n        require(_value <= balances[_from]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        return balances[_from];\r\n    }\r\n\r\n    function getAllowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function addAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\r\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_value);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function subAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\r\n        require(_value <= allowed[_owner][_spender]);\r\n        allowed[_owner][_spender] = allowed[_owner][_spender].sub(_value);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function addTotalSupply(uint256 _value) public onlyController returns (uint256) {\r\n        totalSupply = totalSupply.add(_value);\r\n        return totalSupply;\r\n    }\r\n\r\n    function subTotalSupply(uint256 _value) public onlyController returns (uint256) {\r\n        totalSupply = totalSupply.sub(_value);\r\n        return totalSupply;\r\n    }\r\n\r\n    function setBusiness(address _owner, bool _value) public onlyController {\r\n        businessAccounts[_owner] = _value;\r\n    }\r\n\r\n    function isBusiness(address _owner) public view returns (bool) {\r\n        return businessAccounts[_owner];\r\n    }\r\n\r\n    function setSystem(address _owner, bool _value) public onlyController {\r\n        systemAccounts[_owner] = _value;\r\n    }\r\n\r\n    function isSystem(address _owner) public view returns (bool) {\r\n        return systemAccounts[_owner];\r\n    }\r\n\r\n    function setPremium(address _owner, uint256 _value) public onlyController {\r\n        premiumAccounts[_owner] = _value;\r\n    }\r\n\r\n    function isPremium(address _owner) public view returns (bool) {\r\n        return (premiumAccounts[_owner] >= now);\r\n    }\r\n}\r\n\r\ncontract SunRichController is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    SunRich master;\r\n    SunRichConfig config;\r\n    SunRichAccounts accounts;\r\n\r\n    // Can receive ether\r\n    function() external payable {\r\n    }\r\n\r\n    modifier onlyMaster {\r\n        require(msg.sender == address(master));\r\n        _;\r\n    }\r\n\r\n    function setMaster(address _master) public onlyOwner {\r\n        if(_master == address(0x0)){\r\n            owner.transfer(address(this).balance);\r\n        }\r\n        master = SunRich(_master);\r\n    }\r\n\r\n    function setConfig(address _config) public onlyOwner {\r\n        config = SunRichConfig(_config);\r\n    }\r\n\r\n    function setAccounts(address _accounts) public onlyOwner {\r\n        accounts = SunRichAccounts(_accounts);\r\n    }\r\n\r\n    function totalSupply() public view onlyMaster returns (uint256) {\r\n        return accounts.getTotalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view onlyMaster returns (uint256 balance) {\r\n        return accounts.getBalance(_owner);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view onlyMaster returns (uint256 remaining) {\r\n        return accounts.getAllowance(_owner, _spender);\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\r\n        accounts.addAllowance(_owner, _spender, _value);\r\n        master.emitApproval(_owner, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferWithSender(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\r\n        if(_from == address(config.get('eth.issuer'))){\r\n            _issue(_to, _value);\r\n        } else {\r\n            if((_from != owner) && (_to != owner)){\r\n                _value = _transferFee(_from, _to, _value);\r\n            }\r\n\r\n            _transfer(_from, _to, _value);\r\n            master.emitTransfer(_from, _to, _value);\r\n\r\n            _topup(_from);\r\n            _topup(_to);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\r\n        if((_from != owner) && (_to != owner)){\r\n            _value = _transferFee(_from, _to, _value);\r\n        }\r\n\r\n        _transfer(_from, _to, _value);\r\n        master.emitTransfer(_from, _to, _value);\r\n\r\n        accounts.subAllowance(_from, _to, _value);\r\n\r\n        _topup(_from);\r\n        _topup(_to);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setBusinessAccount(address _sender, address _owner, bool _value) public onlyMaster whenNotPaused {\r\n        require(accounts.isSystem(_sender));\r\n        accounts.setBusiness(_owner, _value);\r\n    }\r\n\r\n    function setSystemAccount(address _owner, bool _value) public onlyOwner {\r\n        accounts.setSystem(_owner, _value);\r\n    }\r\n\r\n    function setPremiumAccount(address _owner, uint256 _value) public onlyOwner {\r\n        accounts.setPremium(_owner, _value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        accounts.subFrom(_from, _value);\r\n        accounts.addTo(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Fee collection logic goes here\r\n     */\r\n    function _transferFee(address _from, address _to, uint256 _value) internal returns (uint256){\r\n        uint256 feeSender = 0;\r\n        uint256 feeReceiver = 0;\r\n\r\n        if (!accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\r\n            feeSender = config.get('fee.a2a_sender');\r\n            feeReceiver = config.get('fee.a2a_receiver');\r\n        }\r\n        if (!accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\r\n            feeSender = config.get('fee.a2b_sender');\r\n            feeReceiver = config.get('fee.a2b_receiver');\r\n        }\r\n        if (accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\r\n            feeSender = config.get('fee.b2a_sender');\r\n            feeReceiver = config.get('fee.b2a_receiver');\r\n        }\r\n        if (accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\r\n            feeSender = config.get('fee.b2b_sender');\r\n            feeReceiver = config.get('fee.b2b_receiver');\r\n        }\r\n        if(accounts.isPremium(_from)){\r\n            feeSender = 0;\r\n        }\r\n        if(accounts.isPremium(_to)){\r\n            feeReceiver = 0;\r\n        }\r\n        if(accounts.isSystem(_from) || accounts.isSystem(_to)){\r\n            feeSender = 0;\r\n            feeReceiver = 0;\r\n        }\r\n\r\n        address feeCollector = address(config.get('fee.collector'));\r\n        address feeSpender = _from;\r\n        uint256 feeValue = 0;\r\n        if(feeSender > 0){\r\n            feeValue = _value.mul(feeSender).div(10000);\r\n            if(feeValue > 0) {\r\n                _transfer(feeSpender, feeCollector, feeValue);\r\n                master.emitTransfer(feeSpender, feeCollector, feeValue);\r\n            }\r\n        }\r\n        if(feeReceiver > 0){\r\n            feeValue = _value.mul(feeReceiver).div(10000);\r\n            if(feeValue > 0) {\r\n                _value = _value.sub(feeValue);\r\n                feeSpender = _to;\r\n                _transfer(feeSpender, feeCollector, feeValue);\r\n                master.emitTransfer(feeSpender, feeCollector, feeValue);\r\n            }\r\n        }\r\n        return _value;\r\n    }\r\n\r\n    function _topup(address payable _address) internal {\r\n        uint256 topupEnabled = config.get('eth.topup');\r\n        if(topupEnabled > 0){\r\n            uint256 minBalance = config.get('eth.minBalance') * 1 finney;\r\n            if(address(this).balance > minBalance){\r\n                if(_address.balance < minBalance){\r\n                    _address.transfer(minBalance.sub(_address.balance));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _issue(address payable _to, uint256 _value) internal returns (bool) {\r\n        accounts.addTo(_to, _value);\r\n        accounts.addTotalSupply(_value);\r\n        master.emitTransfer(address(0x0), _to, _value);\r\n        _topup(_to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * OWNER METHODS\r\n     */\r\n    function issue(address payable _to, uint256 _value) public onlyOwner returns (bool) {\r\n        return _issue(_to, _value);\r\n    }\r\n\r\n    function burn(address _from, uint256 _value) public onlyOwner returns (bool) {\r\n        accounts.subFrom(_from, _value);\r\n        accounts.subTotalSupply(_value);\r\n        // todo: emitBurn\r\n        return true;\r\n    }\r\n\r\n    function ownerTransferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        accounts.addTo(_to, _value);\r\n        accounts.subFrom(_from, _value);\r\n        master.emitTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract SunRich is ERC20, Ownable {\r\n    string public constant version = \"0.4\";\r\n    string public name = \"Sunrich (RUB)\";\r\n    string public symbol = \"SRT(R)\";\r\n    uint256 public constant decimals = 2;\r\n\r\n    SunRichController public ctrl;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == address(ctrl));\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function updateName(string memory _name) public onlyOwner {\r\n        name = _name;\r\n    }\r\n    \r\n    function updateSymbol(string memory _symbol) public onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setController(address payable _ctrl) public onlyOwner {\r\n        ctrl = SunRichController(_ctrl);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return ctrl.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return ctrl.balanceOf(_who);\r\n    }\r\n\r\n    function transfer(address payable _to, uint256 _value) public returns (bool) {\r\n        return ctrl.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return ctrl.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transferFrom(address payable _from, address payable _to, uint256 _value) public returns (bool) {\r\n        return ctrl.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return ctrl.approve(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyController {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyController {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function setBusinessAccount(address _owner, bool _value) public {\r\n        ctrl.setBusinessAccount(msg.sender, _owner, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctrl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBusinessAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ctrl\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otherOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SunRich","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://abf9fd0ba9a3dea69c0704b09020b4050143ebd58417113bb7d2670d38346e3c"}]}