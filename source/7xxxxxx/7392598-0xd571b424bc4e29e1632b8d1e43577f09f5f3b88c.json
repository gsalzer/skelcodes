{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint totalSupply_);\r\n  function balanceOf(address _owner) external view returns (uint balance_);\r\n  function transfer(address _to, uint _value) external returns (bool success_);\r\n  function transferFrom(address _from, address _to, uint _value) external returns (bool success_);\r\n  function approve(address _spender, uint _value) external returns (bool success_);\r\n  function allowance(address _owner, address _spender) external view returns (uint remaining_);\r\n  // Triggered when tokens are transferred\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  // Triggered whenever approve(address _spender, uint _value) is called\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract StaffAVTScheme {\r\n  address public owner;\r\n  IERC20 public avt;\r\n  uint public schemeStartTimestamp;\r\n  uint8 public numDaysBetweenPayments;\r\n  uint8 public numPayments;\r\n\r\n  mapping(address => uint) public AmountPerPayment;\r\n  mapping(address => uint) public NextPaymentDueTimestamp;\r\n  mapping(address => uint) public NumPaymentsLeft;\r\n\r\n  modifier onlyOwner {\r\n    require(owner == msg.sender, \"Sender must be owner\");\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @param _avt address of AVT ERC20 contract\r\n   * @param _schemeStartTimestamp no accounts can be added that start before this time\r\n   * @param _numDaysBetweenPayments number of days between each payment for accounts\r\n   * @param _numPayments number of payments for each account\r\n   */\r\n  constructor(IERC20 _avt, uint _schemeStartTimestamp, uint8 _numDaysBetweenPayments, uint8 _numPayments)\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n    avt = _avt;\r\n    schemeStartTimestamp = _schemeStartTimestamp;\r\n    numDaysBetweenPayments = _numDaysBetweenPayments;\r\n    numPayments = _numPayments;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner)\r\n    public\r\n    onlyOwner\r\n  {\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * NOTE: This method can only be called ONCE per address.\r\n   * @param _account address of the AVT claimant\r\n   * @param _firstPaymentTimestamp timestamp for the claimant's first payment\r\n   * @param _amountPerPayment amount of AVT (to 18 decimal places, aka NAT) to pay the claimant on each payment\r\n   */\r\n  function addAccount(address _account, uint _firstPaymentTimestamp, uint _amountPerPayment)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(AmountPerPayment[_account] == 0, \"Already registered\");\r\n    require(_firstPaymentTimestamp >= schemeStartTimestamp, \"First payment timestamp is invalid\");\r\n    require(_amountPerPayment != 0, \"Amount is zero\");\r\n    AmountPerPayment[_account] = _amountPerPayment;\r\n    NumPaymentsLeft[_account] = numPayments;\r\n    NextPaymentDueTimestamp[_account] = _firstPaymentTimestamp;\r\n  }\r\n\r\n  /**\r\n   * Clear an account from the scheme. ONLY Use this if a staff member leaves the scheme.\r\n   */\r\n  function removeAccount(address _account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    AmountPerPayment[_account] = 0;\r\n    NumPaymentsLeft[_account] = 0;\r\n    NextPaymentDueTimestamp[_account] = 0;\r\n  }\r\n\r\n  /**\r\n   * Transfers AVT to the caller if they are in the scheme and have a valid claim. Reverts if not.\r\n   */\r\n  function claimAVT()\r\n    public\r\n  {\r\n    transferAVT(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Transfers AVT to the specified account if they are in the scheme and have a valid claim. Reverts if not.\r\n   * @param _account the account to send AVT to\r\n   */\r\n  function sendAVT(address _account)\r\n    public\r\n  {\r\n    transferAVT(_account);\r\n  }\r\n\r\n  function transferAVT(address _account)\r\n    private\r\n  {\r\n    uint paymentDueTimestamp = NextPaymentDueTimestamp[_account];\r\n    require(paymentDueTimestamp != 0, \"Address is not registered on the scheme\");\r\n\r\n    uint numPaymentsLeft = NumPaymentsLeft[_account];\r\n    require(numPaymentsLeft != 0, \"Address has claimed all their AVT\");\r\n\r\n    require(paymentDueTimestamp <= now, \"Address is not eligible for a payment yet\");\r\n\r\n    uint numWholeDaysSincePaymentDueTimestamp = (now - paymentDueTimestamp)/1 days;\r\n\r\n    uint numPaymentsToMake = 1 + numWholeDaysSincePaymentDueTimestamp/numDaysBetweenPayments;\r\n    if (numPaymentsToMake > numPaymentsLeft) {\r\n      numPaymentsToMake = numPaymentsLeft;\r\n    }\r\n    NumPaymentsLeft[_account] = numPaymentsLeft - numPaymentsToMake;\r\n    uint totalPayment = numPaymentsToMake * AmountPerPayment[_account];\r\n\r\n    NextPaymentDueTimestamp[_account] = paymentDueTimestamp + (1 days * numDaysBetweenPayments * numPaymentsToMake);\r\n\r\n    require(avt.balanceOf(address(this)) >= totalPayment, \"Insufficient funds!\");\r\n    assert(avt.transfer(_account, totalPayment));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numDaysBetweenPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAVT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AmountPerPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"NumPaymentsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schemeStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sendAVT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"NextPaymentDueTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_firstPaymentTimestamp\",\"type\":\"uint256\"},{\"name\":\"_amountPerPayment\",\"type\":\"uint256\"}],\"name\":\"addAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_avt\",\"type\":\"address\"},{\"name\":\"_schemeStartTimestamp\",\"type\":\"uint256\"},{\"name\":\"_numDaysBetweenPayments\",\"type\":\"uint8\"},{\"name\":\"_numPayments\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"StaffAVTScheme","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000d88ed6e74bbfd96b831231638b66c05571e824f000000000000000000000000000000000000000000000000000000005c012640000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000018","Library":"","SwarmSource":"bzzr://e19e2d2e8ae2c62e1081b738cc299873412839d4a1a5f7415c56b83f2534927c"}]}