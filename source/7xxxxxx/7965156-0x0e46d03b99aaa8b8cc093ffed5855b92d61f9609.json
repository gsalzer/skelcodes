{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract Registry {\r\n    struct Entry {\r\n        uint64 lenData;\r\n        mapping (uint32=>address) data;\r\n        address owner;\r\n        bool uploaded;\r\n    }\r\n    mapping(uint256=>Entry) public entries;\r\n    uint256 public numEntries = 0;\r\n\r\n    function addEntry(uint64 lenData) public returns(uint256) {\r\n        entries[numEntries] = Entry(lenData, msg.sender, false);\r\n        numEntries += 1;\r\n        return numEntries - 1;\r\n    }\r\n\r\n    function finalize(uint256 entryId) public {\r\n        require(entries[entryId].owner == msg.sender);\r\n        entries[entryId].uploaded = true;\r\n    }\r\n    \r\n    function storeDataAsContract(bytes memory data) internal returns (address) {\r\n        address result;\r\n        assembly {\r\n            let length := mload(data)\r\n            mstore(data, 0x58600c8038038082843982f3)\r\n            result := create(0, add(data, 20), add(12, length))\r\n        }\r\n        require(result != address(0x0));\r\n        return result;\r\n    }\r\n    \r\n    function addChunk(uint256 entryId, uint32 chunkIndex, bytes memory chunkData) public {\r\n        require(entries[entryId].owner == msg.sender);\r\n        entries[entryId].data[chunkIndex] = storeDataAsContract(chunkData);\r\n    }\r\n\r\n    function get(uint256 entryId, uint32 chunkIndex) public view returns(bytes memory result) {\r\n        require(entries[entryId].uploaded);\r\n        address _addr = entries[entryId].data[chunkIndex];\r\n        assembly {\r\n            // retrieve the size of the code, this needs assembly\r\n            let size := extcodesize(_addr)\r\n            // allocate output byte array - this could also be done without assembly\r\n            // by using o_code = new bytes(size)\r\n            result := mload(0x40)\r\n            // new \"memory end\" including padding\r\n            mstore(0x40, add(result, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            // store length in memory\r\n            mstore(result, size)\r\n            // actually retrieve the code, this needs assembly\r\n            extcodecopy(_addr, add(result, 0x20), 0, size)            \r\n        }\r\n    }\r\n\r\n    function getLen(uint256 entry) public view returns(uint64 length) {\r\n        return entries[entry].lenData;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"entryId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entryId\",\"type\":\"uint256\"},{\"name\":\"chunkIndex\",\"type\":\"uint32\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lenData\",\"type\":\"uint64\"}],\"name\":\"addEntry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entryId\",\"type\":\"uint256\"},{\"name\":\"chunkIndex\",\"type\":\"uint32\"},{\"name\":\"chunkData\",\"type\":\"bytes\"}],\"name\":\"addChunk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entry\",\"type\":\"uint256\"}],\"name\":\"getLen\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entries\",\"outputs\":[{\"name\":\"lenData\",\"type\":\"uint64\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"uploaded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numEntries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cc301329893543cae6adf6050e924c7d9b0ed1f509189238c40aedf0b2615876"}]}