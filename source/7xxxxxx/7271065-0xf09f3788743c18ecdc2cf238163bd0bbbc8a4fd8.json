{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract ReturnVestingRegistry is Ownable {\r\n\r\n  mapping (address => address) public returnAddress;\r\n\r\n  function record(address from, address to) onlyOwner public {\r\n    require(from != 0);\r\n\r\n    returnAddress[from] = to;\r\n  }\r\n}\r\n\r\ncontract TerraformReserve is Ownable {\r\n\r\n  /* Storing a balance for each user */\r\n  mapping (address => uint256) public lockedBalance;\r\n\r\n  /* Store the total sum locked */\r\n  uint public totalLocked;\r\n\r\n  /* Reference to the token */\r\n  ERC20 public manaToken;\r\n\r\n  /* Contract that will assign the LAND and burn/return tokens */\r\n  address public landClaim;\r\n\r\n  /* Prevent the token from accepting deposits */\r\n  bool public acceptingDeposits;\r\n\r\n  event LockedBalance(address user, uint mana);\r\n  event LandClaimContractSet(address target);\r\n  event LandClaimExecuted(address user, uint value, bytes data);\r\n  event AcceptingDepositsChanged(bool _acceptingDeposits);\r\n\r\n  function TerraformReserve(address _token) {\r\n    require(_token != 0);\r\n    manaToken = ERC20(_token);\r\n    acceptingDeposits = true;\r\n  }\r\n\r\n  /**\r\n   * Lock MANA into the contract.\r\n   * This contract does not have another way to take the tokens out other than\r\n   * through the target contract.\r\n   */\r\n  function lockMana(address _from, uint256 mana) public {\r\n    require(acceptingDeposits);\r\n    require(mana >= 1000 * 1e18);\r\n    require(manaToken.transferFrom(_from, this, mana));\r\n\r\n    lockedBalance[_from] += mana;\r\n    totalLocked += mana;\r\n    LockedBalance(_from, mana);\r\n  }\r\n\r\n  /**\r\n   * Allows the owner of the contract to pause acceptingDeposits\r\n   */\r\n  function changeContractState(bool _acceptingDeposits) public onlyOwner {\r\n    acceptingDeposits = _acceptingDeposits;\r\n    AcceptingDepositsChanged(acceptingDeposits);\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can move the staked MANA.\r\n   * Calls the `approve` function of the ERC20 token with the total amount.\r\n   */\r\n  function setTargetContract(address target) public onlyOwner {\r\n    landClaim = target;\r\n    manaToken.approve(landClaim, totalLocked);\r\n    LandClaimContractSet(target);\r\n  }\r\n\r\n  /**\r\n   * Prevent payments to the contract\r\n   */\r\n  function () public payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n  bool public revoked;\r\n\r\n  uint256 public released;\r\n\r\n  ERC20 public token;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   * @param _token address of the ERC20 token contract\r\n   */\r\n  function TokenVesting(\r\n    address _beneficiary,\r\n    uint256 _start,\r\n    uint256 _cliff,\r\n    uint256 _duration,\r\n    bool    _revocable,\r\n    address _token\r\n  ) {\r\n    require(_beneficiary != 0x0);\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    start       = _start;\r\n    cliff       = _start.add(_cliff);\r\n    duration    = _duration;\r\n    revocable   = _revocable;\r\n    token       = ERC20(_token);\r\n  }\r\n\r\n  /**\r\n   * @notice Only allow calls from the beneficiary of the vesting contract\r\n   */\r\n  modifier onlyBeneficiary() {\r\n    require(msg.sender == beneficiary);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Allow the beneficiary to change its address\r\n   * @param target the address to transfer the right to\r\n   */\r\n  function changeBeneficiary(address target) onlyBeneficiary public {\r\n    require(target != 0);\r\n    beneficiary = target;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= cliff);\r\n    _releaseTo(beneficiary);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to a target address.\r\n   * @param target the address to send the tokens to\r\n   */\r\n  function releaseTo(address target) onlyBeneficiary public {\r\n    require(now >= cliff);\r\n    _releaseTo(target);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   */\r\n  function _releaseTo(address target) internal {\r\n    uint256 unreleased = releasableAmount();\r\n\r\n    released = released.add(unreleased);\r\n\r\n    token.safeTransfer(target, unreleased);\r\n\r\n    Released(released);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\r\n   */\r\n  function revoke() onlyOwner public {\r\n    require(revocable);\r\n    require(!revoked);\r\n\r\n    // Release all vested tokens\r\n    _releaseTo(beneficiary);\r\n\r\n    // Send the remainder to the owner\r\n    token.safeTransfer(owner, token.balanceOf(this));\r\n\r\n    revoked = true;\r\n\r\n    Revoked();\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   */\r\n  function releasableAmount() public constant returns (uint256) {\r\n    return vestedAmount().sub(released);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   */\r\n  function vestedAmount() public constant returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allow withdrawing any token other than the relevant one\r\n   */\r\n  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\r\n    require(_token != token);\r\n    _token.transfer(owner, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revocable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseForeignToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"releaseTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009789b30ff03065a84ee893dbc056c0937fee065d000000000000000000000000000000000000000000000000000000005a934e000000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000000000000000000000000000000000000784ce0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942","Library":"","SwarmSource":"bzzr://df0b56fe19f134f932ec473cd4c04694e892ddb5a895e65e55fc4778dd4a0ba2"}]}