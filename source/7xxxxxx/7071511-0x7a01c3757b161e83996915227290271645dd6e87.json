{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Blockchain-based strategy game\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoEngineerOldInterface {\r\n    address public gameSponsor;\r\n    uint256 public gameSponsorPrice;\r\n    \r\n    function getBoosterData(uint256 /*idx*/) public view returns (address /*_owner*/,uint256 /*_boostRate*/, uint256 /*_basePrice*/) {}\r\n    function calculateCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/) {}\r\n    function getPlayerData(address /*_addr*/) external view returns(uint256 /*_engineerRoundNumber*/, uint256 /*_virusNumber*/, uint256 /*_virusDefence*/, uint256 /*_research*/, uint256 /*_researchPerDay*/, uint256 /*_lastUpdateTime*/, uint256[8] /*_engineersCount*/, uint256 /*_nextTimeAtk*/, uint256 /*_endTimeUnequalledDef*/) {}\r\n}\r\ninterface CryptoArenaOldInterface {\r\n    function getData(address _addr) \r\n    external\r\n    view\r\n    returns(\r\n        uint256 /*_virusDef*/,\r\n        uint256 /*_nextTimeAtk*/,\r\n        uint256 /*_endTimeUnequalledDef*/,\r\n        bool    /*_canAtk*/,\r\n        // engineer\r\n        uint256 /*_currentVirus*/, \r\n        // mingin war\r\n        uint256 /*_currentCrystals*/\r\n    );\r\n}\r\n\r\ncontract CryptoEngineerNewInterface {\r\n    mapping(uint256 => EngineerData) public engineers;\r\n     struct EngineerData {\r\n            uint256 basePrice;\r\n            uint256 baseETH;\r\n            uint256 baseResearch;\r\n            uint256 limit;\r\n     }\r\n\r\n    function setBoostData(uint256 /*idx*/, address /*owner*/, uint256 /*boostRate*/, uint256 /*basePrice*/ ) external pure {}\r\n    function setPlayerEngineersCount( address /*_addr*/, uint256 /*idx*/, uint256 /*_value*/ ) external pure {}\r\n    function setGameSponsorInfo( address /*_addr*/, uint256 /*_value*/ ) external pure {}\r\n    function setPlayerResearch( address /*_addr*/, uint256 /*_value*/ ) external pure {}\r\n    function setPlayerVirusNumber( address /*_addr*/, uint256 /*_value*/ ) external pure {}\r\n    function setPlayerLastUpdateTime( address /*_addr*/) external pure {}\r\n}\r\ninterface CryptoArenaNewInterface {\r\n    function setPlayerVirusDef(address /*_addr*/, uint256 /*_value*/) external pure; \r\n}\r\ncontract CryptoLoadEngineerOldData {\r\n    // engineer info\r\n\taddress public administrator;\r\n    bool public loaded;\r\n\r\n    mapping(address => bool) public playersLoadOldData;\r\n   \r\n    CryptoEngineerNewInterface public EngineerNew;\r\n    CryptoEngineerOldInterface public EngineerOld;    \r\n    CryptoArenaNewInterface    public ArenaNew;\r\n    CryptoArenaOldInterface    public ArenaOld;\r\n\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    // INIT CONTRACT \r\n    //--------------------------------------------------------------------------\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface main contract\r\n       EngineerNew = CryptoEngineerNewInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\r\n       EngineerOld = CryptoEngineerOldInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\r\n       ArenaNew    = CryptoArenaNewInterface(0x77c9acc811e4cf4b51dc3a3e05dc5d62fa887767);\r\n       ArenaOld    = CryptoArenaOldInterface(0xce6c5ef2ed8f6171331830c018900171dcbd65ac);\r\n\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n    }\r\n    /**\r\n        * @dev MainContract used this function to verify game's contract\r\n        */\r\n        function isContractMiniGame() public pure returns(bool _isContractMiniGame)\r\n        {\r\n        \t_isContractMiniGame = true;\r\n        }\r\n    //@dev use this function in case of bug\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    function loadEngineerOldData() public isAdministrator \r\n    {\r\n        require(loaded == false);\r\n        loaded = true;\r\n        address gameSponsor      = EngineerOld.gameSponsor();\r\n        uint256 gameSponsorPrice = EngineerOld.gameSponsorPrice();\r\n        EngineerNew.setGameSponsorInfo(gameSponsor, gameSponsorPrice);\r\n        for(uint256 idx = 0; idx < 5; idx++) {\r\n            mergeBoostData(idx);\r\n        }\r\n    }\r\n    function mergeBoostData(uint256 idx) private\r\n    {\r\n        address owner;\r\n        uint256 boostRate;\r\n        uint256 basePrice;\r\n        (owner, boostRate, basePrice) = EngineerOld.getBoosterData(idx);\r\n\r\n        if (owner != 0x0) EngineerNew.setBoostData(idx, owner, boostRate, basePrice);\r\n    }\r\n    function loadOldData() public \r\n    {\r\n        require(tx.origin == msg.sender);\r\n        require(playersLoadOldData[msg.sender] == false);\r\n\r\n        playersLoadOldData[msg.sender] = true;\r\n\r\n        uint256[8] memory engineersCount; \r\n        uint256 virusDef;\r\n        uint256 researchPerDay;\r\n        \r\n        uint256 virusNumber = EngineerOld.calculateCurrentVirus(msg.sender);\r\n        // /function getPlayerData(address /*_addr*/) external view returns(uint256 /*_engineerRoundNumber*/, uint256 /*_virusNumber*/, uint256 /*_virusDefence*/, uint256 /*_research*/, uint256 /*_researchPerDay*/, uint256 /*_lastUpdateTime*/, uint256[8] /*_engineersCount*/, uint256 /*_nextTimeAtk*/, uint256 /*_endTimeUnequalledDef*/) \r\n        (, , , , researchPerDay, , engineersCount, , ) = EngineerOld.getPlayerData(msg.sender);\r\n\r\n        (virusDef, , , , , ) = ArenaOld.getData(msg.sender);\r\n\r\n        virusNumber = SafeMath.sub(virusNumber, SafeMath.mul(researchPerDay, 432000));\r\n        uint256 research = 0;\r\n        uint256 baseResearch = 0;\r\n\r\n        for (uint256 idx = 0; idx < 8; idx++) {\r\n            if (engineersCount[idx] > 0) {\r\n                (, , baseResearch, ) = EngineerNew.engineers(idx);\r\n                EngineerNew.setPlayerEngineersCount(msg.sender, idx, engineersCount[idx]);\r\n                research = SafeMath.add(research, SafeMath.mul(engineersCount[idx], baseResearch));\r\n            }    \r\n        }\r\n        EngineerNew.setPlayerLastUpdateTime(msg.sender);\r\n        if (research > 0)    EngineerNew.setPlayerResearch(msg.sender, research);\r\n        \r\n        if (virusNumber > 0) EngineerNew.setPlayerVirusNumber(msg.sender, virusNumber);\r\n\r\n        if (virusDef > 0)    ArenaNew.setPlayerVirusDef(msg.sender, virusDef);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersLoadOldData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadEngineerOldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loaded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ArenaNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EngineerOld\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ArenaOld\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadOldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EngineerNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CryptoLoadEngineerOldData","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1dfc7391df77a007a4d0f977f7a018609d9058ade5e55ea535efaf83d5e74e35"}]}