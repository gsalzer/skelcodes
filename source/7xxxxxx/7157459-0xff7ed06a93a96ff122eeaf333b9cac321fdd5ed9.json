{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n/* import \"./oraclizeAPI_0.5.sol\"; */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  // Optional token name\r\n  string  public  name = \"zeosX\";\r\n  string  public  symbol;\r\n  uint256  public  decimals = 18; // standard token precision. override to customize\r\n    \r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract KYCVerification is Owned{\r\n    \r\n    mapping(address => bool) public kycAddress;\r\n    \r\n    event LogKYCVerification(address _kycAddress,bool _status);\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        for(uint tmpIndex = 0; tmpIndex < _kycAddress.length; tmpIndex++)\r\n        {\r\n            kycAddress[_kycAddress[tmpIndex]] = _status;\r\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        kycAddress[_kycAddress] = _status;\r\n        \r\n        emit LogKYCVerification(_kycAddress,_status);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function isVerified(address _user) view public returns(bool)\r\n    {\r\n        return kycAddress[_user] == true; \r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract ST20Token is Owned, BurnableToken {\r\n\r\n    string public name = \"SUREBANQA PERSONAL e-SHARE\";\r\n    string public symbol = \"ST20\";\r\n    uint8 public decimals = 2;\r\n    \r\n    uint256 public initialSupply = 1000000 * (10 ** uint256(decimals));\r\n    uint256 public totalSupply = 1000000 * (10 ** uint256(decimals));\r\n    uint256 public externalAuthorizePurchase = 0;\r\n\r\n    \r\n    /* in timestamp  */\r\n    mapping (address => uint) public userLockinPeriod;\r\n\r\n    /* type 1 => 2 years , 2 => 10 years   */\r\n    mapping (address => uint) public userLockinPeriodType;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping(address => uint8) authorizedCaller;\r\n    \r\n    bool public kycEnabled = true;\r\n    bool public authorizedTransferOnly = true; /* to Enable authorized user for transfer*/\r\n    \r\n    \r\n    mapping(address => mapping(bytes32 => bool)) private transferRequestStatus;\r\n    \r\n    struct fundReceiver{\r\n        address _to;\r\n        uint _value;\r\n    }\r\n    \r\n    mapping(address => mapping(bytes32 => fundReceiver)) private transferRequestReceiver;\r\n\r\n    KYCVerification public kycVerification;\r\n\r\n    event KYCMandateUpdate(bool _kycEnabled);\r\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    /* Events */\r\n    event AuthorizedCaller(address caller);\r\n    event DeAuthorizedCaller(address caller);\r\n\r\n    event LockinPeriodUpdated(address _guy,uint _userLockinPeriodType, uint _userLockinPeriod);\r\n    \r\n    event TransferAuthorizationOverride(bool _authorize);\r\n    event TransferRequested(address _from, address _to, uint _value,bytes32 _signature);\r\n    event TransferRequestFulfilled(address _from, address _to, uint _value,bytes32 _signature);\r\n    \r\n    \r\n    modifier onlyAuthCaller(){\r\n        require(authorizedCaller[msg.sender] == 1 || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier kycVerified(address _guy) {\r\n      if(kycEnabled == true){\r\n          if(kycVerification.isVerified(_guy) == false)\r\n          {\r\n              revert(\"KYC Not Verified\");\r\n          }\r\n      }\r\n      _;\r\n    }\r\n    \r\n    modifier frozenVerified(address _guy) {\r\n        if(frozenAccount[_guy] == true)\r\n        {\r\n            revert(\"Account is freeze\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier transferAuthorized(address _guy) {\r\n        \r\n        if(authorizedTransferOnly == true)\r\n        {\r\n            if(authorizedCaller[msg.sender] == 0 || msg.sender != owner)\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\r\n        \r\n        authorizedCaller[msg.sender] = 1;\r\n        emit AuthorizedCaller(msg.sender);\r\n    }\r\n     \r\n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\r\n    {\r\n      kycVerification = _kycAddress;\r\n\r\n      emit KYCContractAddressUpdate(_kycAddress);\r\n\r\n      return true;\r\n    }\r\n\r\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller returns(bool)\r\n    {\r\n        kycEnabled = _kycEnabled;\r\n        emit KYCMandateUpdate(_kycEnabled);\r\n\r\n        return true;\r\n    }\r\n\r\n    function overrideUserLockinPeriod(address _guy,uint _userLockinPeriodType, uint _userLockinPeriod) public onlyAuthCaller\r\n    {\r\n        userLockinPeriodType[_guy] = _userLockinPeriodType;\r\n        userLockinPeriod[_guy] = _userLockinPeriod;\r\n\r\n        emit LockinPeriodUpdated(_guy,_userLockinPeriodType, _userLockinPeriod);\r\n    }\r\n    \r\n    function overrideTransferAuthorization(bool _authorize) public onlyAuthCaller\r\n    {\r\n        authorizedTransferOnly = _authorize;\r\n        emit TransferAuthorizationOverride(_authorize);\r\n    }\r\n        \r\n    /* authorize caller */\r\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 1;\r\n        emit AuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    /* deauthorize caller */\r\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 0;\r\n        emit DeAuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    function () payable public {\r\n        revert();\r\n    }\r\n    \r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal transferAuthorized(msg.sender) {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balances[_from] > _value);                // Check if the sender has enough\r\n        require (balances[_to].add(_value) > balances[_to]); // Check for overflow\r\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balances[target] = balances[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n    function purchaseToken(address _receiver, uint _tokens, uint _userLockinPeriod, uint _userLockinPeriodType) onlyAuthCaller public  {\r\n        require(_tokens > 0);\r\n        require(initialSupply > _tokens);\r\n        \r\n        initialSupply = initialSupply.sub(_tokens);\r\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\r\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\r\n\r\n        /*  Check if lockin period and lockin period type is to be set  */\r\n        if(_userLockinPeriod != 0 && _userLockinPeriodType != 0)\r\n        {\r\n            userLockinPeriod[_receiver] = _userLockinPeriod;\r\n            userLockinPeriodType[_receiver] = _userLockinPeriodType;\r\n\r\n            emit LockinPeriodUpdated(_receiver,_userLockinPeriodType, _userLockinPeriod);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev transfer token for a specified address sender and receiver must be KYC verified \r\n      * @param _to The address to transfer to.\r\n      * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\r\n\r\n        /*  KYC Update Check  */\r\n        if(kycEnabled == true){\r\n            /*  KYC For Receiver   */\r\n            if(kycVerification.isVerified(_to) == false)\r\n            {\r\n                revert(\"KYC Not Verified for Receiver\");\r\n            }\r\n        }\r\n\r\n        _transfer(msg.sender,_to,_value);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n        Please make sure before calling this function from UI, Sender has sufficient balance for \r\n        All transfers and receiver qty max 25 and KYC verified\r\n    */\r\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\r\n        require(_to.length == _value.length, \"Length of Destination should be equal to value\");\r\n        require(_to.length <= 25, \"Max 25 Senders allowed\" );        \r\n\r\n        for(uint _interator = 0;_interator < _to.length; _interator++ )\r\n        {\r\n            /*  KYC Update Check  */\r\n            if(kycEnabled == true){\r\n                /*  KYC For Receiver   */\r\n                if(kycVerification.isVerified(_to[_interator]) == false)\r\n                {\r\n                    revert(\"KYC Not Verified for Receiver\");\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for(_interator = 0;_interator < _to.length; _interator++ )\r\n        {\r\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\r\n        }\r\n        \r\n        return true;    \r\n    }\r\n    \r\n    function requestTransfer(address _to, uint _value, bytes32 _signature) public returns(bool)\r\n    {\r\n        require(transferRequestStatus[msg.sender][_signature] == false,\"Signature already processed\");\r\n        require (balances[msg.sender] > _value,\"Insufficient Sender Balance\");\r\n        \r\n        transferRequestReceiver[msg.sender][_signature] = fundReceiver(_to,_value);\r\n        \r\n        emit TransferRequested(msg.sender, _to, _value,_signature);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function batchRequestTransfer(address[] _to, uint[] _value, bytes32[] _signature) public returns(bool)\r\n    {\r\n        require(_to.length == _value.length ,\"Length for to, value should be equal\");\r\n        require(_to.length == _signature.length ,\"Length for to, signature should be equal\");\r\n        \r\n\r\n        for(uint _interator = 0; _interator < _to.length ; _interator++)\r\n        {\r\n            require(transferRequestStatus[msg.sender][_signature[_interator]] == false,\"Signature already processed\");\r\n            \r\n            transferRequestReceiver[msg.sender][_signature[_interator]] = fundReceiver(_to[_interator],_value[_interator]);\r\n            \r\n            emit TransferRequested(msg.sender, _to[_interator], _value[_interator],_signature[_interator]);\r\n        }\r\n\r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function fullTransferRequest(address _from, bytes32 _signature) public onlyAuthCaller returns(bool) \r\n    {\r\n        require(transferRequestStatus[_from][_signature] == false);\r\n        \r\n        fundReceiver memory _tmpHolder = transferRequestReceiver[_from][_signature];\r\n\r\n        _transfer(_from,_tmpHolder._to,_tmpHolder._value);\r\n        \r\n        transferRequestStatus[_from][_signature] == true;\r\n        \r\n        emit TransferRequestFulfilled(_from, _tmpHolder._to, _tmpHolder._value,_signature);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function batchFullTransferRequest(address[] _from, bytes32[] _signature) public onlyAuthCaller returns(bool) \r\n    {\r\n\r\n        /* Check if Any Signature is previously used */\r\n        for(uint _interator = 0; _interator < _from.length ; _interator++)\r\n        {\r\n            require(transferRequestStatus[_from[_interator]][_signature[_interator]] == false);\r\n            \r\n            fundReceiver memory _tmpHolder = transferRequestReceiver[_from[_interator]][_signature[_interator]];\r\n        \r\n            /* Check Balance */\r\n            require (_tmpHolder._value < balances[_from[_interator]],\"Insufficient Sender Balance\");\r\n            \r\n            _transfer(_from[_interator],_tmpHolder._to,_tmpHolder._value);\r\n            \r\n            transferRequestStatus[_from[_interator]][_signature[_interator]] == true;\r\n            \r\n            emit TransferRequestFulfilled(_from[_interator], _tmpHolder._to, _tmpHolder._value,_signature[_interator]);\r\n        }\r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function getTransferRequestStatus(address _from, bytes32 _signature) public view returns(bool _status)\r\n    {\r\n        return  transferRequestStatus[_from][_signature];\r\n        \r\n    }\r\n    \r\n    function getTransferRequestReceiver(address _from, bytes32 _signature) public view returns(address _to, uint _value)\r\n    {\r\n        fundReceiver memory _tmpHolder = transferRequestReceiver[_from][_signature];\r\n        \r\n        return (_tmpHolder._to, _tmpHolder._value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"getTransferRequestReceiver\",\"outputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockinPeriodType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_signature\",\"type\":\"bytes32[]\"}],\"name\":\"batchFullTransferRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"fullTransferRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_signature\",\"type\":\"bytes32[]\"}],\"name\":\"batchRequestTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"getTransferRequestStatus\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"overrideTransferAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guy\",\"type\":\"address\"},{\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"}],\"name\":\"overrideUserLockinPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"requestTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedTransferOnly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"TransferAuthorizationOverride\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"TransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"TransferRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ST20Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48a142614d97b80f3a1db1c317fc0ccf572b7897601eb667fdfefead1861ab01"}]}