{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/// @title Ownable\r\n/// @dev Provide a modifier that permits only a single user to call the function\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @dev Set the original `owner` of the contract to the sender account.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Require that the modified function is only called by `owner`\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allow `owner` to transfer control of the contract to `newOwner`.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n    /// @dev Multiply two numbers, throw on overflow.\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /// @dev Substract two numbers, throw on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Add two numbers, throw on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Whitelist\r\n/// @dev Handle whitelisting, maximum purchase limits, and bonus calculation for PLGCrowdsale\r\ncontract Whitelist is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// A participant in the crowdsale\r\n    struct Participant {\r\n        /// Percent of bonus tokens awarded to this participant\r\n        uint256 bonusPercent;\r\n        /// Maximum amount the participant can contribute in wei\r\n        uint256 maxPurchaseAmount;\r\n        /// Wei contributed to the crowdsale so far\r\n        uint256 weiContributed;\r\n    }\r\n\r\n    /// Crowdsale address, used to authorize purchase records\r\n    address public crowdsaleAddress;\r\n\r\n    /// Bonus/Vesting for specific accounts\r\n    /// If Participant.maxPurchaseAmount is zero, the address is not whitelisted\r\n    mapping(address => Participant) private participants;\r\n\r\n    /// @notice Set the crowdsale address. Only one crowdsale at a time may use this whitelist\r\n    /// @param crowdsale The address of the crowdsale\r\n    function setCrowdsale(address crowdsale) public onlyOwner {\r\n        require(crowdsale != address(0));\r\n        crowdsaleAddress = crowdsale;\r\n    }\r\n\r\n    /// @notice Get the bonus token percentage for `user`\r\n    /// @param user The address of a crowdsale participant\r\n    /// @return The percentage of bonus tokens `user` qualifies for\r\n    function getBonusPercent(address user) public view returns(uint256) {\r\n        return participants[user].bonusPercent;\r\n    }\r\n\r\n    /// @notice Check if an address is whitelisted\r\n    /// @param user Potential participant\r\n    /// @return Whether `user` may participate in the crowdsale\r\n    function isValidPurchase(address user, uint256 weiAmount) public view returns(bool) {\r\n        require(user != address(0));\r\n        Participant storage participant = participants[user];\r\n        if(participant.maxPurchaseAmount == 0) {\r\n            return false;\r\n        }\r\n        return participant.weiContributed.add(weiAmount) <= participant.maxPurchaseAmount;\r\n    }\r\n\r\n    /// @notice Whitelist a crowdsale participant\r\n    /// @notice Do not override weiContributed if the user has previously been whitelisted\r\n    /// @param user The participant to add\r\n    /// @param bonusPercent The user's bonus percentage\r\n    /// @param maxPurchaseAmount The maximum the participant is allowed to contribute in wei\r\n    ///     If zero, the user is de-whitelisted\r\n    function addParticipant(address user, uint256 bonusPercent, uint256 maxPurchaseAmount) external onlyOwner {\r\n        require(user != address(0));\r\n        participants[user].bonusPercent = bonusPercent;\r\n        participants[user].maxPurchaseAmount = maxPurchaseAmount;\r\n    }\r\n\r\n    /// @notice Whitelist multiple crowdsale participants at once with the same bonus/purchase amount\r\n    /// @param users The participants to add\r\n    /// @param bonusPercent The bonus percentage shared among users\r\n    /// @param maxPurchaseAmount The maximum each participant is allowed to contribute in wei\r\n    function addParticipants(address[] users, uint256 bonusPercent, uint256 maxPurchaseAmount) external onlyOwner {\r\n        \r\n        for(uint i=0; i<users.length; i+=1) {\r\n            require(users[i] != address(0));\r\n            participants[users[i]].bonusPercent = bonusPercent;\r\n            participants[users[i]].maxPurchaseAmount = maxPurchaseAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice De-whitelist a crowdsale participant\r\n    /// @param user The participant to revoke\r\n    function revokeParticipant(address user) external onlyOwner {\r\n        require(user != address(0));\r\n        participants[user].maxPurchaseAmount = 0;\r\n    }\r\n\r\n    /// @notice De-whitelist multiple crowdsale participants at once\r\n    /// @param users The participants to revoke\r\n    function revokeParticipants(address[] users) external onlyOwner {\r\n        \r\n        for(uint i=0; i<users.length; i+=1) {\r\n            require(users[i] != address(0));\r\n            participants[users[i]].maxPurchaseAmount = 0;\r\n        }\r\n    }\r\n\r\n    function recordPurchase(address beneficiary, uint256 weiAmount) public {\r\n\r\n        require(msg.sender == crowdsaleAddress);\r\n\r\n        Participant storage participant = participants[beneficiary];\r\n        participant.weiContributed = participant.weiContributed.add(weiAmount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"name\":\"maxPurchaseAmount\",\"type\":\"uint256\"}],\"name\":\"addParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"revokeParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokeParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"isValidPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"recordPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"name\":\"maxPurchaseAmount\",\"type\":\"uint256\"}],\"name\":\"addParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://462af7ab428f9e304b7565cdc467fe4c7159e31f3a0735a619938963ce75ca6f"}]}