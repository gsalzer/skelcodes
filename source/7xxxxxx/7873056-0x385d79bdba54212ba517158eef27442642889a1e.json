{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.4.25 \\u003c0.6.0;\\n\\ncontract ERC20 {\\n    uint256 public totalSupply;\\n    function balanceOf(address who) public view returns (uint256);\\n    function transfer(address to, uint256 value) public returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\"},\"HolderLockStrategy.sol\":{\"content\":\"pragma solidity \\u003e=0.4.25 \\u003c0.6.0;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./ERC20.sol\\u0027;\\n\\ncontract HolderLockStrategy {\\n    using SafeMath for uint256;\\n    string public name;\\n    uint256 private _lockedBalance;\\n    address private _lockedAddress;\\n    address private _admin;\\n    uint[] private _unlockDates;\\n    uint[] private _unlockPercents;\\n    bool private _initialized;\\n    address private _token;\\n    uint private _withdrawed;\\n\\n    // unlockPercent_: 0 - 100的整数\\n    function init(string memory title, uint[] memory unlockDates,\\n                uint[] memory unlockPercents, address lockedAddress, uint lockedBalance, address token) internal {\\n        require(!_initialized);\\n        _initialized = true;\\n        name = title;\\n        require(unlockDates.length == unlockPercents.length);\\n        \\n        for (uint i = 0; i \\u003c unlockPercents.length; ++i) {\\n            _unlockDates.push(unlockDates[i]);\\n            _unlockPercents.push(unlockPercents[i]);\\n        }\\n        \\n        _lockedAddress = lockedAddress;\\n        _lockedBalance = lockedBalance;\\n        _token = token;\\n\\n        _admin = msg.sender;\\n    }\\n\\n    function getDate() private\\n        view\\n        returns (uint256) {\\n        return now;\\n    }\\n\\n    function calculatePhase() public view returns (uint256) {\\n        uint idx = 0;\\n        uint today = getDate();\\n        for (; idx \\u003c _unlockDates.length; ++idx) {\\n            if (today \\u003c _unlockDates[idx])  break;\\n        } \\n\\n        return idx;\\n    }\\n\\n    function calculateUnlockedAmount() public view returns (uint256) {\\n        uint idx = calculatePhase();\\n\\n        if (idx == 0) {\\n            return 0;\\n        } else if (idx \\u003e= _unlockDates.length) {\\n            return _lockedBalance;\\n        } else {\\n            uint unlock = _unlockPercents[idx - 1];\\n            if (unlock \\u003e 100) \\n                unlock = 100;\\n            return _lockedBalance.mul(unlock).div(100);\\n        }\\n    }\\n\\n    function withdraw(address _to) public returns (bool) {\\n        require(msg.sender == _admin);\\n        uint256 available = availableBalance();\\n        if (available \\u003e 0) {\\n            ERC20 token = ERC20(_token);\\n            require(token.transfer(_to, available));\\n            _withdrawed = _withdrawed.add(available);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function availableBalance() public\\n        view \\n        returns (uint256) {\\n        uint unlockable = calculateUnlockedAmount();\\n        return unlockable.sub(_withdrawed);\\n    }\\n\\n    function checkBalance(address _holder) public view returns (uint256) {\\n        ERC20 token = ERC20(_token);\\n        return token.balanceOf(_holder);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.25 \\u003c0.6.0;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b \\u003c= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c \\u003e= a);\\n        return c;\\n    }\\n}\\n\"},\"SwapTeamMemberLockContract.sol\":{\"content\":\"pragma solidity \\u003e=0.4.25 \\u003c0.6.0;\\n\\nimport \\u0027./ERC20.sol\\u0027;\\nimport \\u0027./HolderLockStrategy.sol\\u0027;\\n\\ncontract SwapTeamMemberLockContract is HolderLockStrategy {\\n    constructor() public {\\n        uint[] memory unlockDate = new uint[](6);\\n        unlockDate[0] = uint(1558828800);     // 2019-5-26 08:00:00 AM 北京时间\\n        unlockDate[1] = uint(1588262400);     // 2020-5-1 12:00:00 AM 北京时间\\n        unlockDate[2] = uint(1604160000);     // 2020-11-1 12:00:00 AM 北京时间\\n        unlockDate[3] = uint(1619798400);     // 2021-5-1 12:00:00 AM 北京时间\\n        unlockDate[4] = uint(1635696000);     // 2021-11-1 12:00:00 AM 北京时间\\n        unlockDate[5] = uint(1651334400);     // 2022-5-1 12:00:00 AM 北京时间\\n\\n        uint[] memory unlockPercents = new uint[](6);\\n        for (uint i = 1; i \\u003c unlockPercents.length; ++i) {\\n            unlockPercents[i] = 20 * i;\\n        }\\n        \\n        init(\\n            \\u0027Team\\u0027,             // 团队\\n            unlockDate,\\n            unlockPercents,\\n            0x622F7546Ea541d56d9781160b2ffde89832a9DB4,\\n            310000000 * 10 ** 18,\\n            0x9603f8Ca8Ff73493676946cf6eF26B4C4c1Fa198);\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateUnlockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SwapTeamMemberLockContract","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2430bbe5a97552723f4767f99b1f8daf8b38c56b754f3cbfb8835673c066c0e2"}]}