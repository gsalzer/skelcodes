{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        c = a - b;\r\n        assert(c <= a);\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed _from, address indexed _to, uint _tokens);\r\n    event Approval(address indexed _tokenOwner, address indexed _spender, uint _tokens);\r\n    \r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function decimals() external view returns (uint8 _decimal);\r\n    function totalSupply() external view returns (uint _totalSupply);\r\n    function balanceOf(address _tokenOwner) external view returns (uint _balance);\r\n    function allowance(address _tokenOwner, address _spender) external view returns (uint _remaining);\r\n    function transfer(address _to, uint _tokens) public returns (bool _success);\r\n    function approve(address _spender, uint _tokens) public returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint _tokens) public returns (bool _success);\r\n}\r\n\r\n// abstract contract\r\ninterface tokenRecipient {\r\n    function recieveApproval(address _from, uint _tokens, address _token, bytes _data) external;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract WhiteXToken is ERC20Interface, Owned, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    \r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n    mapping(address => bool) public frozenAccount;\r\n    \r\n    event FrozenFunds(address _target, bool _frozen);\r\n\r\n    constructor() public {\r\n        name = \"White X Chain\";\r\n        symbol = \"XPS\";\r\n        decimals = 18;\r\n        totalSupply = 1000000000 * 10 ** 18;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n    \r\n    // destroy contract\r\n    function kill() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // transfer contract administrator\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit Transfer(owner, _newOwner, balances[owner]);\r\n        balances[_newOwner] = safeAdd(balances[_newOwner], balances[owner]);\r\n        balances[owner] = 0;\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    // reissuing token\r\n    function mintToken(uint _mintedAmount) external onlyOwner {\r\n        balances[owner] = safeAdd(balances[owner], _mintedAmount);\r\n        totalSupply = safeAdd(totalSupply, _mintedAmount);\r\n        emit Transfer(address(0), owner, _mintedAmount);\r\n    }\r\n    \r\n    // freeze account\r\n    function freezeAccount(address _target, bool _freeze) external onlyOwner {\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n    \r\n    function name() external view returns (string _name) {\r\n        _name = name;\r\n    }\r\n    \r\n    function symbol() external view returns (string _symbol) {\r\n        _symbol = symbol;\r\n    }\r\n    \r\n    function decimals() external view returns (uint8 _decimals) {\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint _totalSupply) {\r\n        _totalSupply =  totalSupply - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address _tokenOwner) external view returns (uint _balance) {\r\n        _balance = balances[_tokenOwner];\r\n    }\r\n\r\n    function transfer(address _to, uint _tokens) public returns (bool _success) {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(_tokens > 0);\r\n        require(balances[msg.sender] >= _tokens);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\r\n        balances[_to] = safeAdd(balances[_to], _tokens);\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        _success = true;\r\n    }\r\n\r\n    function approve(address _spender, uint _tokens) public returns (bool _success) {\r\n        allowed[msg.sender][_spender] = _tokens;\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n        _success = true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _tokens) public returns (bool _success) {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(_tokens > 0);\r\n        require(allowed[_from][msg.sender] >= _tokens);\r\n        require(balances[msg.sender] >= _tokens);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _tokens);\r\n        balances[_from] = safeSub(balances[_from], _tokens);\r\n        balances[_to] = safeAdd(balances[_to], _tokens);\r\n        emit Transfer(_from, _to, _tokens);\r\n        _success = true;\r\n    }\r\n\r\n    function allowance(address _tokenOwner, address _spender) external view returns (uint _remaining) {\r\n        _remaining = allowed[_tokenOwner][_spender];\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint _tokens, bytes _data) external returns (bool _success) {\r\n        require(approve(_spender, _tokens));\r\n        tokenRecipient(_spender).recieveApproval(msg.sender, _tokens, this, _data);\r\n        _success = true;\r\n    }\r\n\r\n    // Don't accept ETH\r\n    function () external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WhiteXToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8b754e790163ca09bf68ed6f188e832778cfa24514d4bf195b4ba573b8b5238"}]}