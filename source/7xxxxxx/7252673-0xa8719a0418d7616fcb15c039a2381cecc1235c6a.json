{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n * Contract that exposes the needed erc20 token functions\r\n */\r\n\r\ncontract ERC20Interface {\r\n  // Send _value amount of tokens to address _to\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  // Get the account balance of another account with address _owner\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n/**\r\n * Contract that will forward any incoming Ether to the creator of the contract\r\n */\r\ncontract Forwarder {\r\n  // Address to which any funds sent to this contract will be forwarded\r\n  address public parentAddress;\r\n  event ForwarderDeposited(address from, uint value, bytes data);\r\n\r\n  /**\r\n   * Create the contract, and sets the destination address to that of the creator\r\n   */\r\n  function Forwarder(address pool) public {\r\n    parentAddress = pool;\r\n  }\r\n\r\n  /**\r\n   * Modifier that will execute internal code block only if the sender is the parent address\r\n   */\r\n  modifier onlyParent {\r\n    if (msg.sender != parentAddress) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\r\n   */\r\n  function() public payable {\r\n    // throws on failure\r\n    parentAddress.transfer(msg.value);\r\n    // Fire off the deposited event if we can forward it\r\n    ForwarderDeposited(msg.sender, msg.value, msg.data);\r\n  }\r\n\r\n  /**\r\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\r\n   * @param tokenContractAddress the address of the erc20 token contract\r\n   */\r\n  function flushTokens(address tokenContractAddress) public {\r\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n    var forwarderAddress = address(this);\r\n    var forwarderBalance = instance.balanceOf(forwarderAddress);\r\n    if (forwarderBalance == 0) {\r\n      return;\r\n    }\r\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * It is possible that funds were sent to this address before the contract was deployed.\r\n   * We can flush those funds to the parent address.\r\n   */\r\n  function flush() public {\r\n    // throws on failure\r\n    parentAddress.transfer(this.balance);\r\n  }\r\n}\r\n\r\n// This is a test target for a Forwarder.\r\n// It contains a public function with a side-effect.\r\ncontract ForwarderTarget {\r\n  uint public data;\r\n\r\n  function ForwarderTarget() public {\r\n  }\r\n\r\n  function createForwarder() public returns (address) {\r\n    return new Forwarder(0xb4dCB6c25E028EB3a1c97Cb659A4123Ef04719E6);\r\n  }\r\n\r\n  function() public payable {\r\n    // accept unspendable balance\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"ForwarderTarget","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://86a93384ddd2961cf4a17d997d74a2f7c0c6705ff058940a3d5f63f35c1fc395"}]}