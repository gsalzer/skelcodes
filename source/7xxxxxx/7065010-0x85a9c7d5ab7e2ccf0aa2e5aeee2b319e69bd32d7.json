{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * VNET Token Pre-Sale Contract\r\n * \r\n * Send ETH here, and you will receive the VNET Tokens immediately.\r\n * \r\n * https://vision.network/\r\n */\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20Basic Token\r\n     *\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function rescueTokens(ERC20Basic _token, address _receiver) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        assert(_token.transfer(_receiver, balance));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VNET Token Pre-Sale\r\n */\r\ncontract VNETTokenPreSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public description = \"VNET Token Pre-Sale Contract\";\r\n    \r\n    ERC20Basic public vnetToken;\r\n    address wallet;\r\n    uint256 public ratioNext; // with 6 decimals\r\n    uint256 public ethPrice; // with 8 decimals\r\n    uint256 public vnetSold; // with 8 decimals\r\n    uint256 public vnetSupply = 30 * (10 ** 8) * (10 ** 6); // 30 billion supply\r\n    uint256 public vnetPriceStart = 0.0013 * (10 ** 8); // 0.0013 USD\r\n    uint256 public vnetPriceTarget = 0.0035 * (10 ** 8); // 0.0035 USD\r\n    uint256 public weiMinimum = 1 * (10 ** 18); // 1 Ether\r\n    uint256 public weiMaximum = 100 * (10 ** 18); // 100 Ether\r\n    uint256 public weiWelfare = 10 * (10 ** 18); // 10 Ether\r\n\r\n    mapping(address => bool) public welfare;\r\n\r\n    event Welfare(address indexed _buyer);\r\n    event BuyVNET(address indexed _buyer, uint256 _ratio, uint256 _vnetAmount, uint256 _weiAmount);\r\n    event EthPrice(uint256 _ethPrice);\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(ERC20Basic _vnetToken, uint256 _ethPrice) public {\r\n        vnetToken = _vnetToken;\r\n        wallet = owner;\r\n        calcRatioNext();\r\n        updateEthPrice(_ethPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev receive ETH and send tokens\r\n     */\r\n    function () public payable {\r\n        // Make sure token balance > 0\r\n        uint256 vnetBalance = vnetToken.balanceOf(address(this));\r\n        require(vnetBalance > 0);\r\n        require(vnetSold < vnetSupply);\r\n        \r\n        // Minimum & Maximum Limit\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount >= weiMinimum);\r\n        require(weiAmount <= weiMaximum);\r\n\r\n        // VNET Token Amount to be transfer\r\n        uint256 vnetAmount = weiAmount.mul(ratioNext).div(10 ** 18);\r\n\r\n        // Transfer VNET\r\n        if (vnetBalance >= vnetAmount) {\r\n            assert(vnetToken.transfer(msg.sender, vnetAmount));\r\n            emit BuyVNET(msg.sender, ratioNext, vnetAmount, weiAmount);\r\n            vnetSold = vnetSold.add(vnetAmount);\r\n            if (weiAmount >= weiWelfare) {\r\n                welfare[msg.sender] = true;\r\n                emit Welfare(msg.sender);\r\n            }\r\n        } else {\r\n            uint256 weiExpend = vnetBalance.mul(10 ** 18).div(ratioNext);\r\n            assert(vnetToken.transfer(msg.sender, vnetBalance));\r\n            emit BuyVNET(msg.sender, ratioNext, vnetBalance, weiExpend);\r\n            vnetSold = vnetSold.add(vnetBalance);\r\n            msg.sender.transfer(weiAmount.sub(weiExpend));\r\n            if (weiExpend >= weiWelfare) {\r\n                welfare[msg.sender] = true;\r\n                emit Welfare(msg.sender);\r\n            }\r\n        }\r\n\r\n        // Calculate: ratioNext\r\n        calcRatioNext();\r\n\r\n        // transfer Ether\r\n        uint256 etherBalance = address(this).balance;\r\n        wallet.transfer(etherBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev calculate ration next\r\n     */\r\n    function calcRatioNext() private {\r\n        ratioNext = ethPrice.mul(10 ** 6).div(vnetPriceStart.add(vnetPriceTarget.sub(vnetPriceStart).mul(vnetSold).div(vnetSupply)));\r\n    }\r\n\r\n    /**\r\n     * @dev update wallet\r\n     */\r\n    function updateWallet(address _wallet) onlyOwner public {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n     * @dev update ETH Price\r\n     */\r\n    function updateEthPrice(uint256 _ethPrice) onlyOwner public {\r\n        ethPrice = _ethPrice;\r\n        emit EthPrice(_ethPrice);\r\n        calcRatioNext();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"welfare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiWelfare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetPriceTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"updateEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMaximum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetPriceStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vnetToken\",\"type\":\"address\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"Welfare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ratio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vnetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"BuyVNET\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"EthPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VNETTokenPreSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f13a8039d33fbf19467183e3b4249e7a4c212f50000000000000000000000000000000000000000000000000000000306dc4200","Library":"","SwarmSource":"bzzr://52d732d384740e4e8e40409aab13a6cec5477522555cd9f50a1add86d1634330"}]}