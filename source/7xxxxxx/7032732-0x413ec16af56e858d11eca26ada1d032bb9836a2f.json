{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract EternalStorageInterface {\r\n    function getShipById(uint256 _shipId) public view returns(uint256, string, uint256, uint256, uint256);\r\n    function buyItem(uint256 _itemId, address _newOwner, string _itemTitle, string _itemTypeTitle) public returns(uint256);\r\n    function getItemPriceById(string _itemType, uint256 _itemId) public view returns(uint256);\r\n    function getOwnerByItemTypeAndId(string _itemType, uint256 _itemId) public view returns(address);\r\n    function getItemTypeIdByTypeAndId(string _itemType, uint256 _itemId) public view returns(uint256);\r\n    function setNewPriceToItem(string _itemType, uint256 _itemTypeId, uint256 _newPrice) public;\r\n    function addReferrer(address _referrerWalletAddress, uint256 referrerPrize) public;\r\n    function widthdrawRefunds(address _referrerWalletAddress) public returns(uint256);\r\n    function checkRefundExistanceByOwner(address _ownerAddress) public view returns(uint256);\r\n}\r\n\r\n\r\ncontract ItemsStorageInterface {\r\n    function getShipsIds() public view returns(uint256[]);\r\n    function getRadarsIds() public view returns(uint256[]);\r\n    function getScannersIds() public view returns(uint256[]);\r\n    function getDroidsIds() public view returns(uint256[]);\r\n    function getFuelsIds() public view returns(uint256[]);\r\n    function getGeneratorsIds() public view returns(uint256[]);\r\n    function getEnginesIds() public view returns(uint256[]);\r\n    function getGunsIds() public view returns(uint256[]);\r\n    function getMicroModulesIds() public view returns(uint256[]);\r\n    function getArtefactsIds() public view returns(uint256[]);\r\n\r\n    function getUsersShipsIds() public view returns(uint256[]);\r\n    function getUsersRadarsIds() public view returns(uint256[]);\r\n    function getUsersScannersIds() public view returns(uint256[]);\r\n    function getUsersDroidsIds() public view returns(uint256[]);\r\n    function getUsersEnginesIds() public view returns(uint256[]);\r\n    function getUsersFuelsIds() public view returns(uint256[]);\r\n    function getUsersGeneratorsIds() public view returns(uint256[]);\r\n    function getUsersGunsIds() public view returns(uint256[]);\r\n    function getUsersMicroModulesIds() public view returns(uint256[]);\r\n    function getUsersArtefactsIds() public view returns(uint256[]);\r\n}\r\n\r\ncontract LogicContract is Ownable {\r\n\r\n    /* ------ EVENTS ------ */\r\n\r\n    event ShipWasBought(uint256 shipId);\r\n\r\n    EternalStorageInterface private eternalStorageContract;\r\n    ItemsStorageInterface private itemsStorageContract;\r\n\r\n    constructor() public {\r\n        eternalStorageContract = EternalStorageInterface(0x5E415bD4946679C083A22F7369dD20317A2881A1);\r\n        itemsStorageContract = ItemsStorageInterface(0x504c53cBd44B68001Ec8A2728679c07BB78283f0);\r\n    }\r\n\r\n    /* ------ MODIFIERS ------ */\r\n\r\n    modifier addressIsNotNull(address _newOwner) {\r\n\t\trequire(_newOwner != address(0));\r\n\t\t_;\r\n\t}\r\n\r\n    /* ------ FUNCTIONALITY FUNCTIONS ------ */\r\n\r\n    function destroyLogicContract() public onlyOwner {\r\n        selfdestruct(0xd135377eB20666725D518c967F23e168045Ee11F);\r\n    }\r\n\r\n    // Buying new ship\r\n\tfunction buyShip(uint256 _shipId, address _referrerWalletAddress) public payable addressIsNotNull(msg.sender)  {\r\n        uint256 referrerPrize = 0;\r\n\r\n        uint256 price = eternalStorageContract.getItemPriceById(\"ships\", _shipId);\r\n        require(msg.value == price);\r\n\r\n        if (_referrerWalletAddress != address(0) && _referrerWalletAddress != msg.sender && price > 0) {\r\n            referrerPrize = SafeMath.div(price, 10);\r\n            if (referrerPrize < price) {\r\n                eternalStorageContract.addReferrer(_referrerWalletAddress, referrerPrize);\r\n            }\r\n        }\r\n\r\n        _buyShip(_shipId, msg.sender);\r\n\t}\r\n\r\n    function _buyShip(uint256 _shipId, address _newOwner) private {\r\n        uint256 myShipId = eternalStorageContract.buyItem(_shipId, _newOwner, \"ship\", \"ship_types\");\r\n        emit ShipWasBought(myShipId);\r\n    }\r\n\r\n    function withdrawRefund() external addressIsNotNull(msg.sender) {\r\n        uint256 curRefVal = eternalStorageContract.checkRefundExistanceByOwner(msg.sender);\r\n        if (curRefVal > 0 && address(this).balance > curRefVal && SafeMath.sub(address(this).balance, curRefVal) > 0) {\r\n            uint256 refund = eternalStorageContract.widthdrawRefunds(msg.sender);\r\n            msg.sender.transfer(refund);\r\n        }\r\n    }\r\n\r\n    function checkRefundExistanceByOwner() external addressIsNotNull(msg.sender) view returns(uint256) {\r\n        return eternalStorageContract.checkRefundExistanceByOwner(msg.sender);\r\n    }\r\n\r\n    /* ------ READING METHODS FOR USERS ITEMS ------ */\r\n\r\n    function getOwnerByShipId(uint256 _shipId) public view returns(address) {\r\n        return eternalStorageContract.getOwnerByItemTypeAndId(\"ship\", _shipId);\r\n    }\r\n\r\n    function getShipType(uint256 _shipId) public view returns(uint256) {\r\n        return eternalStorageContract.getItemTypeIdByTypeAndId(\"ship_types\", _shipId);\r\n    }\r\n\r\n    /* ------ READING METHODS FOR ALL USERS ITEMS ------ */\r\n\r\n    // Ships\r\n    function getUsersShipsIds() public view returns(uint256[]) {\r\n        return itemsStorageContract.getUsersShipsIds();\r\n    }\r\n\r\n    /* ------ READING METHODS FOR ALL ITEMS ------ */\r\n\r\n    // Get item price\r\n    function getShipPriceById(uint256 _shipId) public view returns(uint256) {\r\n        return eternalStorageContract.getItemPriceById(\"ships\", _shipId);\r\n    }\r\n\r\n    // Ships\r\n    function getShipsIds() public view returns(uint256[]) {\r\n        return itemsStorageContract.getShipsIds();\r\n    }\r\n\r\n    function getShipById(uint256 _shipId) public view returns(\r\n        uint256,\r\n        string,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) {\r\n        return eternalStorageContract.getShipById(_shipId);\r\n    }\r\n\r\n    /* ------ DEV FUNCTIONS ------ */\r\n\r\n    function getBalanceOfLogicContract() public onlyOwner view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPayOut() public onlyOwner returns(uint256) {\r\n\t\t_getPayOut();\r\n\t}\r\n\r\n\tfunction _getPayOut() private returns(uint256){\r\n\t\tif (msg.sender != address(0)) {\r\n\t\t\tmsg.sender.transfer(address(this).balance);\r\n            return address(this).balance;\r\n\t\t}\r\n\t}\r\n\r\n    function setNewPriceToItem(string _itemType, uint256 _itemTypeId, uint256 _newPrice) public onlyOwner {\r\n        eternalStorageContract.setNewPriceToItem(_itemType, _itemTypeId, _newPrice);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceOfLogicContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyLogicContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shipId\",\"type\":\"uint256\"}],\"name\":\"getShipPriceById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShipsIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemType\",\"type\":\"string\"},{\"name\":\"_itemTypeId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setNewPriceToItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shipId\",\"type\":\"uint256\"}],\"name\":\"getShipType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shipId\",\"type\":\"uint256\"}],\"name\":\"getOwnerByShipId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shipId\",\"type\":\"uint256\"},{\"name\":\"_referrerWalletAddress\",\"type\":\"address\"}],\"name\":\"buyShip\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPayOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkRefundExistanceByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shipId\",\"type\":\"uint256\"}],\"name\":\"getShipById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersShipsIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shipId\",\"type\":\"uint256\"}],\"name\":\"ShipWasBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LogicContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17aa064fef20ca359208ab74b106a590abba7d58cf4b1c0ce968a3cfa12c3d9e"}]}