{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Enum {\r\n    enum Operation {\r\n        Call,\r\n        DelegateCall,\r\n        Create\r\n    }\r\n}\r\n\r\ncontract EtherPaymentFallback {\r\n\r\n    /// @dev Fallback function accepts Ether transactions.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n\r\n    }\r\n}\r\n\r\ncontract Executor is EtherPaymentFallback {\r\n\r\n    event ContractCreation(address newContract);\r\n\r\n    function execute(address to, uint256 value, bytes memory data, Enum.Operation operation, uint256 txGas)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (operation == Enum.Operation.Call)\r\n            success = executeCall(to, value, data, txGas);\r\n        else if (operation == Enum.Operation.DelegateCall)\r\n            success = executeDelegateCall(to, data, txGas);\r\n        else {\r\n            address newContract = executeCreate(data);\r\n            success = newContract != address(0);\r\n            emit ContractCreation(newContract);\r\n        }\r\n    }\r\n\r\n    function executeCall(address to, uint256 value, bytes memory data, uint256 txGas)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n\r\n    function executeDelegateCall(address to, bytes memory data, uint256 txGas)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n\r\n    function executeCreate(bytes memory data)\r\n        internal\r\n        returns (address newContract)\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            newContract := create(0, add(data, 0x20), mload(data))\r\n        }\r\n    }\r\n}\r\n\r\ncontract SecuredTokenTransfer {\r\n\r\n    /// @dev Transfers a token and returns if it was a success\r\n    /// @param token Token that should be transferred\r\n    /// @param receiver Receiver to whom the token should be transferred\r\n    /// @param amount The amount of tokens that should be transferred\r\n    function transferToken (\r\n        address token, \r\n        address receiver,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        returns (bool transferred)\r\n    {\r\n        bytes memory data = abi.encodeWithSignature(\"transfer(address,uint256)\", receiver, amount);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let success := call(sub(gas, 10000), token, 0, add(data, 0x20), mload(data), 0, 0)\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize)\r\n            switch returndatasize \r\n            case 0 { transferred := success }\r\n            case 0x20 { transferred := iszero(or(iszero(success), iszero(mload(ptr)))) }\r\n            default { transferred := 0 }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SelfAuthorized {\r\n    modifier authorized() {\r\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ModuleManager is SelfAuthorized, Executor {\r\n\r\n    event EnabledModule(Module module);\r\n    event DisabledModule(Module module);\r\n\r\n    address public constant SENTINEL_MODULES = address(0x1);\r\n\r\n    mapping (address => address) internal modules;\r\n    \r\n    function setupModules(address to, bytes memory data)\r\n        internal\r\n    {\r\n        require(modules[SENTINEL_MODULES] == address(0), \"Modules have already been initialized\");\r\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n        if (to != address(0))\r\n            // Setup has to complete successfully or transaction fails.\r\n            require(executeDelegateCall(to, data, gasleft()), \"Could not finish initialization\");\r\n    }\r\n\r\n    /// @dev Allows to add a module to the whitelist.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param module Module to be whitelisted.\r\n    function enableModule(Module module)\r\n        public\r\n        authorized\r\n    {\r\n        // Module address cannot be null or sentinel.\r\n        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, \"Invalid module address provided\");\r\n        // Module cannot be added twice.\r\n        require(modules[address(module)] == address(0), \"Module has already been added\");\r\n        modules[address(module)] = modules[SENTINEL_MODULES];\r\n        modules[SENTINEL_MODULES] = address(module);\r\n        emit EnabledModule(module);\r\n    }\r\n\r\n    /// @dev Allows to remove a module from the whitelist.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\r\n    /// @param module Module to be removed.\r\n    function disableModule(Module prevModule, Module module)\r\n        public\r\n        authorized\r\n    {\r\n        // Validate module address and check that it corresponds to module index.\r\n        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, \"Invalid module address provided\");\r\n        require(modules[address(prevModule)] == address(module), \"Invalid prevModule, module pair provided\");\r\n        modules[address(prevModule)] = modules[address(module)];\r\n        modules[address(module)] = address(0);\r\n        emit DisabledModule(module);\r\n    }\r\n\r\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\r\n    /// @param to Destination address of module transaction.\r\n    /// @param value Ether value of module transaction.\r\n    /// @param data Data payload of module transaction.\r\n    /// @param operation Operation type of module transaction.\r\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        // Only whitelisted modules are allowed.\r\n        require(modules[msg.sender] != address(0), \"Method can only be called from an enabled module\");\r\n        // Execute transaction without further confirmations.\r\n        success = execute(to, value, data, operation, gasleft());\r\n    }\r\n\r\n    /// @dev Returns array of modules.\r\n    /// @return Array of modules.\r\n    function getModules()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        // Calculate module count\r\n        uint256 moduleCount = 0;\r\n        address currentModule = modules[SENTINEL_MODULES];\r\n        while(currentModule != SENTINEL_MODULES) {\r\n            currentModule = modules[currentModule];\r\n            moduleCount ++;\r\n        }\r\n        address[] memory array = new address[](moduleCount);\r\n\r\n        // populate return array\r\n        moduleCount = 0;\r\n        currentModule = modules[SENTINEL_MODULES];\r\n        while(currentModule != SENTINEL_MODULES) {\r\n            array[moduleCount] = currentModule;\r\n            currentModule = modules[currentModule];\r\n            moduleCount ++;\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\r\ncontract OwnerManager is SelfAuthorized {\r\n\r\n    event AddedOwner(address owner);\r\n    event RemovedOwner(address owner);\r\n    event ChangedThreshold(uint256 threshold);\r\n\r\n    address public constant SENTINEL_OWNERS = address(0x1);\r\n\r\n    mapping(address => address) internal owners;\r\n    uint256 ownerCount;\r\n    uint256 internal threshold;\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param _owners List of Safe owners.\r\n    /// @param _threshold Number of required confirmations for a Safe transaction.\r\n    function setupOwners(address[] memory _owners, uint256 _threshold)\r\n        internal\r\n    {\r\n        // Threshold can only be 0 at initialization.\r\n        // Check ensures that setup function can only be called once.\r\n        require(threshold == 0, \"Owners have already been setup\");\r\n        // Validate that threshold is smaller than number of added owners.\r\n        require(_threshold <= _owners.length, \"Threshold cannot exceed owner count\");\r\n        // There has to be at least one Safe owner.\r\n        require(_threshold >= 1, \"Threshold needs to be greater than 0\");\r\n        // Initializing Safe owners.\r\n        address currentOwner = SENTINEL_OWNERS;\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            // Owner address cannot be null.\r\n            address owner = _owners[i];\r\n            require(owner != address(0) && owner != SENTINEL_OWNERS, \"Invalid owner address provided\");\r\n            // No duplicate owners allowed.\r\n            require(owners[owner] == address(0), \"Duplicate owner address provided\");\r\n            owners[currentOwner] = owner;\r\n            currentOwner = owner;\r\n        }\r\n        owners[currentOwner] = SENTINEL_OWNERS;\r\n        ownerCount = _owners.length;\r\n        threshold = _threshold;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param owner New owner address.\r\n    /// @param _threshold New threshold.\r\n    function addOwnerWithThreshold(address owner, uint256 _threshold)\r\n        public\r\n        authorized\r\n    {\r\n        // Owner address cannot be null.\r\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"Invalid owner address provided\");\r\n        // No duplicate owners allowed.\r\n        require(owners[owner] == address(0), \"Address is already an owner\");\r\n        owners[owner] = owners[SENTINEL_OWNERS];\r\n        owners[SENTINEL_OWNERS] = owner;\r\n        ownerCount++;\r\n        emit AddedOwner(owner);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold)\r\n            changeThreshold(_threshold);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\r\n    /// @param owner Owner address to be removed.\r\n    /// @param _threshold New threshold.\r\n    function removeOwner(address prevOwner, address owner, uint256 _threshold)\r\n        public\r\n        authorized\r\n    {\r\n        // Only allow to remove an owner, if threshold can still be reached.\r\n        require(ownerCount - 1 >= _threshold, \"New owner count needs to be larger than new threshold\");\r\n        // Validate owner address and check that it corresponds to owner index.\r\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"Invalid owner address provided\");\r\n        require(owners[prevOwner] == owner, \"Invalid prevOwner, owner pair provided\");\r\n        owners[prevOwner] = owners[owner];\r\n        owners[owner] = address(0);\r\n        ownerCount--;\r\n        emit RemovedOwner(owner);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold)\r\n            changeThreshold(_threshold);\r\n    }\r\n\r\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\r\n    /// @param oldOwner Owner address to be replaced.\r\n    /// @param newOwner New owner address.\r\n    function swapOwner(address prevOwner, address oldOwner, address newOwner)\r\n        public\r\n        authorized\r\n    {\r\n        // Owner address cannot be null.\r\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS, \"Invalid owner address provided\");\r\n        // No duplicate owners allowed.\r\n        require(owners[newOwner] == address(0), \"Address is already an owner\");\r\n        // Validate oldOwner address and check that it corresponds to owner index.\r\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"Invalid owner address provided\");\r\n        require(owners[prevOwner] == oldOwner, \"Invalid prevOwner, owner pair provided\");\r\n        owners[newOwner] = owners[oldOwner];\r\n        owners[prevOwner] = newOwner;\r\n        owners[oldOwner] = address(0);\r\n        emit RemovedOwner(oldOwner);\r\n        emit AddedOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to update the number of required confirmations by Safe owners.\r\n    ///      This can only be done via a Safe transaction.\r\n    /// @param _threshold New threshold.\r\n    function changeThreshold(uint256 _threshold)\r\n        public\r\n        authorized\r\n    {\r\n        // Validate that threshold is smaller than number of owners.\r\n        require(_threshold <= ownerCount, \"Threshold cannot exceed owner count\");\r\n        // There has to be at least one Safe owner.\r\n        require(_threshold >= 1, \"Threshold needs to be greater than 0\");\r\n        threshold = _threshold;\r\n        emit ChangedThreshold(threshold);\r\n    }\r\n\r\n    function getThreshold()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return threshold;\r\n    }\r\n\r\n    function isOwner(address owner)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return owners[owner] != address(0);\r\n    }\r\n\r\n    /// @dev Returns array of owners.\r\n    /// @return Array of Safe owners.\r\n    function getOwners()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory array = new address[](ownerCount);\r\n\r\n        // populate return array\r\n        uint256 index = 0;\r\n        address currentOwner = owners[SENTINEL_OWNERS];\r\n        while(currentOwner != SENTINEL_OWNERS) {\r\n            array[index] = currentOwner;\r\n            currentOwner = owners[currentOwner];\r\n            index ++;\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\r\ncontract BaseSafe is ModuleManager, OwnerManager {\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param _owners List of Safe owners.\r\n    /// @param _threshold Number of required confirmations for a Safe transaction.\r\n    /// @param to Contract address for optional delegate call.\r\n    /// @param data Data payload for optional delegate call.\r\n    function setupSafe(address[] memory _owners, uint256 _threshold, address to, bytes memory data)\r\n        internal\r\n    {\r\n        setupOwners(_owners, _threshold);\r\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\r\n        setupModules(to, data);\r\n    }\r\n}\r\n\r\ncontract MasterCopy is SelfAuthorized {\r\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\r\n  // It should also always be ensured that the address is stored alone (uses a full word)\r\n    address masterCopy;\r\n\r\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\r\n  /// @param _masterCopy New contract address.\r\n    function changeMasterCopy(address _masterCopy)\r\n        public\r\n        authorized\r\n    {\r\n        // Master copy address cannot be null.\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n}\r\n\r\ncontract Module is MasterCopy {\r\n\r\n    ModuleManager public manager;\r\n\r\n    modifier authorized() {\r\n        require(msg.sender == address(manager), \"Method can only be called from manager\");\r\n        _;\r\n    }\r\n\r\n    function setManager()\r\n        internal\r\n    {\r\n        // manager can only be 0 at initalization of contract.\r\n        // Check ensures that setup function can only be called once.\r\n        require(address(manager) == address(0), \"Manager has already been set\");\r\n        manager = ModuleManager(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SignatureDecoder {\r\n    \r\n    /// @dev Recovers address who signed the message \r\n    /// @param messageHash operation ethereum signed message hash\r\n    /// @param messageSignature message `txHash` signature\r\n    /// @param pos which signature to read\r\n    function recoverKey (\r\n        bytes32 messageHash, \r\n        bytes memory messageSignature,\r\n        uint256 pos\r\n    )\r\n        internal\r\n        pure\r\n        returns (address) \r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        (v, r, s) = signatureSplit(messageSignature, pos);\r\n        return ecrecover(messageHash, v, r, s);\r\n    }\r\n\r\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`\r\n    /// @param pos which signature to read\r\n    /// @param signatures concatenated rsv signatures\r\n    function signatureSplit(bytes memory signatures, uint256 pos)\r\n        internal\r\n        pure\r\n        returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let signaturePos := mul(0x41, pos)\r\n            r := mload(add(signatures, add(signaturePos, 0x20)))\r\n            s := mload(add(signatures, add(signaturePos, 0x40)))\r\n            // Here we are loading the last 32 bytes, including 31 bytes\r\n            // of 's'. There is no 'mload8' to do this.\r\n            //\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ISignatureValidator {\r\n    /**\r\n    * @dev Should return whether the signature provided is valid for the provided data\r\n    * @param _data Arbitrary length data signed on the behalf of address(this)\r\n    * @param _signature Signature byte array associated with _data\r\n    *\r\n    * MUST return a bool upon valid or invalid signature with corresponding _data\r\n    * MUST take (bytes, bytes) as arguments\r\n    */ \r\n    function isValidSignature(\r\n        bytes calldata _data, \r\n        bytes calldata _signature)\r\n        external\r\n        returns (bool isValid) {}\r\n}\r\n\r\ncontract GnosisSafe is MasterCopy, BaseSafe, SignatureDecoder, SecuredTokenTransfer, ISignatureValidator {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant NAME = \"Gnosis Safe\";\r\n    string public constant VERSION = \"0.1.0\";\r\n\r\n    //keccak256(\r\n    //    \"EIP712Domain(address verifyingContract)\"\r\n    //);\r\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH = 0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\r\n\r\n    //keccak256(\r\n    //    \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 dataGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\r\n    //);\r\n    bytes32 public constant SAFE_TX_TYPEHASH = 0x14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b20;\r\n\r\n    //keccak256(\r\n    //    \"SafeMessage(bytes message)\"\r\n    //);\r\n    bytes32 public constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\r\n\r\n    event ExecutionFailed(bytes32 txHash);\r\n\r\n    uint256 public nonce;\r\n    bytes32 public domainSeparator;\r\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\r\n    mapping(bytes32 => uint256) public signedMessages;\r\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\r\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param _owners List of Safe owners.\r\n    /// @param _threshold Number of required confirmations for a Safe transaction.\r\n    /// @param to Contract address for optional delegate call.\r\n    /// @param data Data payload for optional delegate call.\r\n    function setup(address[] calldata _owners, uint256 _threshold, address to, bytes calldata data)\r\n        external\r\n    {\r\n        require(domainSeparator == 0, \"Domain Separator already set!\");\r\n        domainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));\r\n        setupSafe(_owners, _threshold, to, data);\r\n    }\r\n\r\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\r\n    ///      Note: The fees are always transfered, even if the user transaction fails.\r\n    /// @param to Destination address of Safe transaction.\r\n    /// @param value Ether value of Safe transaction.\r\n    /// @param data Data payload of Safe transaction.\r\n    /// @param operation Operation type of Safe transaction.\r\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\r\n    /// @param dataGas Gas costs for data used to trigger the safe transaction and to pay the payment transfer\r\n    /// @param gasPrice Gas price that should be used for the payment calculation.\r\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\r\n    function execTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 dataGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes calldata signatures\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint256 startGas = gasleft();\r\n        bytes memory txHashData = encodeTransactionData(\r\n            to, value, data, operation, // Transaction info\r\n            safeTxGas, dataGas, gasPrice, gasToken, refundReceiver, // Payment info\r\n            nonce\r\n        );\r\n        require(checkSignatures(keccak256(txHashData), txHashData, signatures, true), \"Invalid signatures provided\");\r\n        // Increase nonce and execute transaction.\r\n        nonce++;\r\n        require(gasleft() >= safeTxGas, \"Not enough gas to execute safe transaction\");\r\n        // If no safeTxGas has been set and the gasPrice is 0 we assume that all available gas can be used\r\n        success = execute(to, value, data, operation, safeTxGas == 0 && gasPrice == 0 ? gasleft() : safeTxGas);\r\n        if (!success) {\r\n            emit ExecutionFailed(keccak256(txHashData));\r\n        }\r\n\r\n        // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\r\n        if (gasPrice > 0) {\r\n            handlePayment(startGas, dataGas, gasPrice, gasToken, refundReceiver);\r\n        }\r\n    }\r\n\r\n    function handlePayment(\r\n        uint256 startGas,\r\n        uint256 dataGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    )\r\n        private\r\n    {\r\n        uint256 amount = startGas.sub(gasleft()).add(dataGas).mul(gasPrice);\r\n        // solium-disable-next-line security/no-tx-origin\r\n        address payable receiver = refundReceiver == address(0) ? tx.origin : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // solium-disable-next-line security/no-send\r\n            require(receiver.send(amount), \"Could not pay gas costs with ether\");\r\n        } else {\r\n            require(transferToken(gasToken, receiver, amount), \"Could not pay gas costs with token\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Should return whether the signature provided is valid for the provided data, hash\r\n    * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n    * @param data That should be signed (this is passed to an external validator contract)\r\n    * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\r\n    * @param consumeHash Indicates that in case of an approved hash the storage can be freed to save gas\r\n    * @return a bool upon valid or invalid signature with corresponding _data\r\n    */\r\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, bool consumeHash)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // Check that the provided signature data is not too short\r\n        if (signatures.length < threshold * 65) {\r\n            return false;\r\n        }\r\n        // There cannot be an owner with address 0.\r\n        address lastOwner = address(0);\r\n        address currentOwner;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 i;\r\n        for (i = 0; i < threshold; i++) {\r\n            (v, r, s) = signatureSplit(signatures, i);\r\n            // If v is 0 then it is a contract signature\r\n            if (v == 0) {\r\n                // When handling contract signatures the address of the contract is encoded into r\r\n                currentOwner = address(uint256(r));\r\n                bytes memory contractSignature;\r\n                // solium-disable-next-line security/no-inline-assembly\r\n                assembly {\r\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\r\n                    contractSignature := add(add(signatures, s), 0x20)\r\n                }\r\n                if (!ISignatureValidator(currentOwner).isValidSignature(data, contractSignature)) {\r\n                    return false;\r\n                }\r\n            // If v is 1 then it is an approved hash\r\n            } else if (v == 1) {\r\n                // When handling approved hashes the address of the approver is encoded into r\r\n                currentOwner = address(uint256(r));\r\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\r\n                if (msg.sender != currentOwner && approvedHashes[currentOwner][dataHash] == 0) {\r\n                    return false;\r\n                }\r\n                // Hash has been marked for consumption. If this hash was pre-approved free storage\r\n                if (consumeHash && msg.sender != currentOwner) {\r\n                    approvedHashes[currentOwner][dataHash] = 0;\r\n                }\r\n            } else {\r\n                // Use ecrecover with the messageHash for EOA signatures\r\n                currentOwner = ecrecover(dataHash, v, r, s);\r\n            }\r\n            if (currentOwner <= lastOwner || owners[currentOwner] == address(0)) {\r\n                return false;\r\n            }\r\n            lastOwner = currentOwner;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows to estimate a Safe transaction.\r\n    ///      This method is only meant for estimation purpose, therfore two different protection mechanism against execution in a transaction have been made:\r\n    ///      1.) The method can only be called from the safe itself\r\n    ///      2.) The response is returned with a revert\r\n    ///      When estimating set `from` to the address of the safe.\r\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\r\n    /// @param to Destination address of Safe transaction.\r\n    /// @param value Ether value of Safe transaction.\r\n    /// @param data Data payload of Safe transaction.\r\n    /// @param operation Operation type of Safe transaction.\r\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\r\n    function requiredTxGas(address to, uint256 value, bytes calldata data, Enum.Operation operation)\r\n        external\r\n        authorized\r\n        returns (uint256)\r\n    {\r\n        uint256 startGas = gasleft();\r\n        // We don't provide an error message here, as we use it to return the estimate\r\n        // solium-disable-next-line error-reason\r\n        require(execute(to, value, data, operation, gasleft()));\r\n        uint256 requiredGas = startGas - gasleft();\r\n        // Convert response to string and return via error message\r\n        revert(string(abi.encodePacked(requiredGas)));\r\n    }\r\n\r\n    /**\r\n    * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\r\n    * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\r\n    */\r\n    function approveHash(bytes32 hashToApprove)\r\n        external\r\n    {\r\n        require(owners[msg.sender] != address(0), \"Only owners can approve a hash\");\r\n        approvedHashes[msg.sender][hashToApprove] = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Marks a message as signed\r\n    * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)\r\n    */ \r\n    function signMessage(bytes calldata _data) \r\n        external\r\n        authorized\r\n    {\r\n        signedMessages[getMessageHash(_data)] = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Should return whether the signature provided is valid for the provided data\r\n    * @param _data Arbitrary length data signed on the behalf of address(this)\r\n    * @param _signature Signature byte array associated with _data\r\n    * @return a bool upon valid or invalid signature with corresponding _data\r\n    */ \r\n    function isValidSignature(bytes calldata _data, bytes calldata _signature)\r\n        external\r\n        returns (bool isValid)\r\n    {\r\n        bytes32 messageHash = getMessageHash(_data);\r\n        if (_signature.length == 0) {\r\n            isValid = signedMessages[messageHash] != 0;\r\n        } else {\r\n            // consumeHash needs to be false, as the state should not be changed\r\n            isValid = checkSignatures(messageHash, _data, _signature, false);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns hash of a message that can be signed by owners.\r\n    /// @param message Message that should be hashed\r\n    /// @return Message hash.\r\n    function getMessageHash(\r\n        bytes memory message\r\n    )\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        bytes32 safeMessageHash = keccak256(\r\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\r\n        );\r\n        return keccak256(\r\n            abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeMessageHash)\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the bytes that are hashed to be signed by owners.\r\n    /// @param to Destination address.\r\n    /// @param value Ether value.\r\n    /// @param data Data payload.\r\n    /// @param operation Operation type.\r\n    /// @param safeTxGas Fas that should be used for the safe transaction.\r\n    /// @param dataGas Gas costs for data used to trigger the safe transaction.\r\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\r\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n    /// @param _nonce Transaction nonce.\r\n    /// @return Transaction hash bytes.\r\n    function encodeTransactionData(\r\n        address to, \r\n        uint256 value, \r\n        bytes memory data, \r\n        Enum.Operation operation, \r\n        uint256 safeTxGas, \r\n        uint256 dataGas, \r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        bytes32 safeTxHash = keccak256(\r\n            abi.encode(SAFE_TX_TYPEHASH, to, value, keccak256(data), operation, safeTxGas, dataGas, gasPrice, gasToken, refundReceiver, _nonce)\r\n        );\r\n        return abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeTxHash);\r\n    }\r\n\r\n    /// @dev Returns hash to be signed by owners.\r\n    /// @param to Destination address.\r\n    /// @param value Ether value.\r\n    /// @param data Data payload.\r\n    /// @param operation Operation type.\r\n    /// @param safeTxGas Fas that should be used for the safe transaction.\r\n    /// @param dataGas Gas costs for data used to trigger the safe transaction.\r\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\r\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n    /// @param _nonce Transaction nonce.\r\n    /// @return Transaction hash.\r\n    function getTransactionHash(\r\n        address to, \r\n        uint256 value, \r\n        bytes memory data, \r\n        Enum.Operation operation, \r\n        uint256 safeTxGas, \r\n        uint256 dataGas, \r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, dataGas, gasPrice, gasToken, refundReceiver, _nonce));\r\n    }\r\n}\r\n\r\n/// @title DutchX Base Module - Expose a set of methods to enable a Safe to interact with a DX\r\n/// @author Denis Granha - <denis@gnosis.pm>\r\ncontract DutchXBaseModule is Module {\r\n\r\n    address public dutchXAddress;\r\n    // isWhitelistedToken mapping maps destination address to boolean.\r\n    mapping (address => bool) public isWhitelistedToken;\r\n    mapping (address => bool) public isOperator;\r\n\r\n    // helper variables used by the CLI\r\n    address[] public whitelistedTokens; \r\n    address[] public whitelistedOperators;\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param dx DutchX Proxy Address.\r\n    /// @param tokens List of whitelisted tokens.\r\n    /// @param operators List of addresses that can operate the module.\r\n    /// @param _manager Address of the manager, the safe contract.\r\n    function setup(address dx, address[] memory tokens, address[] memory operators, address payable _manager)\r\n        public\r\n    {\r\n        require(address(manager) == address(0), \"Manager has already been set\");\r\n        if (_manager == address(0)){\r\n            manager = ModuleManager(msg.sender);\r\n        }\r\n        else{\r\n            manager = ModuleManager(_manager);\r\n        }\r\n\r\n        dutchXAddress = dx;\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n            require(token != address(0), \"Invalid token provided\");\r\n            isWhitelistedToken[token] = true;\r\n        }\r\n\r\n        whitelistedTokens = tokens;\r\n\r\n        for (uint256 i = 0; i < operators.length; i++) {\r\n            address operator = operators[i];\r\n            require(operator != address(0), \"Invalid operator address provided\");\r\n            isOperator[operator] = true;\r\n        }\r\n\r\n        whitelistedOperators = operators;\r\n    }\r\n\r\n    /// @dev Allows to add token to whitelist. This can only be done via a Safe transaction.\r\n    /// @param token ERC20 token address.\r\n    function addToWhitelist(address token)\r\n        public\r\n        authorized\r\n    {\r\n        require(token != address(0), \"Invalid token provided\");\r\n        require(!isWhitelistedToken[token], \"Token is already whitelisted\");\r\n        isWhitelistedToken[token] = true;\r\n        whitelistedTokens.push(token);\r\n    }\r\n\r\n    /// @dev Allows to remove token from whitelist. This can only be done via a Safe transaction.\r\n    /// @param token ERC20 token address.\r\n    function removeFromWhitelist(address token)\r\n        public\r\n        authorized\r\n    {\r\n        require(isWhitelistedToken[token], \"Token is not whitelisted\");\r\n        isWhitelistedToken[token] = false;\r\n\r\n        for (uint i = 0; i<whitelistedTokens.length - 1; i++)\r\n            if(whitelistedTokens[i] == token){\r\n                whitelistedTokens[i] = whitelistedTokens[whitelistedTokens.length-1];\r\n                break;\r\n            }\r\n        whitelistedTokens.length -= 1;\r\n    }\r\n\r\n    /// @dev Allows to add operator to whitelist. This can only be done via a Safe transaction.\r\n    /// @param operator ethereum address.\r\n    function addOperator(address operator)\r\n        public\r\n        authorized\r\n    {\r\n        require(operator != address(0), \"Invalid address provided\");\r\n        require(!isOperator[operator], \"Operator is already whitelisted\");\r\n        isOperator[operator] = true;\r\n        whitelistedOperators.push(operator);\r\n    }\r\n\r\n    /// @dev Allows to remove operator from whitelist. This can only be done via a Safe transaction.\r\n    /// @param operator ethereum address.\r\n    function removeOperator(address operator)\r\n        public\r\n        authorized\r\n    {\r\n        require(isOperator[operator], \"Operator is not whitelisted\");\r\n        isOperator[operator] = false;\r\n\r\n        for (uint i = 0; i<whitelistedOperators.length - 1; i++)\r\n            if(whitelistedOperators[i] == operator){\r\n                whitelistedOperators[i] = whitelistedOperators[whitelistedOperators.length-1];\r\n                break;\r\n            }\r\n        whitelistedOperators.length -= 1;\r\n\r\n    }\r\n\r\n    /// @dev Allows to change DutchX Proxy contract address. This can only be done via a Safe transaction.\r\n    /// @param dx New proxy contract address for DutchX.\r\n    function changeDXProxy(address dx)\r\n        public\r\n        authorized\r\n    {\r\n        require(dx != address(0), \"Invalid address provided\");\r\n        dutchXAddress = dx;\r\n    }\r\n\r\n    /// @dev Abstract method. Returns if Safe transaction is to DutchX contract and with whitelisted tokens.\r\n    /// @param to Dutch X address or Whitelisted token (only for approve operations for DX).\r\n    /// @param value Not checked.\r\n    /// @param data Allowed operations\r\n    /// @return Returns if transaction can be executed.\r\n    function executeWhitelisted(address to, uint256 value, bytes memory data)\r\n        public\r\n        returns (bool);\r\n\r\n\r\n    /// @dev Returns list of whitelisted tokens.\r\n    /// @return List of whitelisted tokens addresses.\r\n    function getWhitelistedTokens()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return whitelistedTokens;\r\n    }\r\n\r\n    /// @dev Returns list of whitelisted operators.\r\n    /// @return List of whitelisted operators addresses.\r\n    function getWhitelistedOperators()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return whitelistedOperators;\r\n    }\r\n}\r\n\r\n// @title DutchX Token Interface - Represents the allowed methods of ERC20 token contracts to be executed from the safe module DutchXModule\r\n/// @author Denis Granha - <denis@gnosis.pm>\r\ninterface DutchXTokenInterface {\r\n\tfunction transfer(address to, uint value) external;\r\n    function approve(address spender, uint amount) external;\r\n    function deposit() external payable;\r\n    function withdraw() external;\r\n}\r\n\r\n// @title DutchX Interface - Represents the allowed methods to be executed from the safe module DutchXModule\r\n/// @author Denis Granha - <denis@gnosis.pm>\r\ninterface DutchXInterface {\r\n\tfunction deposit(address token, uint256 amount) external;\r\n    function postSellOrder(address sellToken, address buyToken, uint256 auctionIndex, uint256 amount) external;\r\n    function postBuyOrder(address sellToken, address buyToken, uint256 auctionIndex, uint256 amount) external;\r\n\r\n    function claimTokensFromSeveralAuctionsAsBuyer(\r\n        address[] calldata auctionSellTokens, \r\n        address[] calldata auctionBuyTokens,\r\n        uint[] calldata auctionIndices, \r\n        address user\r\n    ) external;\r\n\r\n    function claimTokensFromSeveralAuctionsAsSeller(\r\n        address[] calldata auctionSellTokens,\r\n        address[] calldata auctionBuyTokens,\r\n        uint[] calldata auctionIndices,\r\n        address user\r\n    ) external;\r\n\r\n    function withdraw() external;\r\n}\r\n\r\n/// @title DutchX Module - Allows to execute transactions to DutchX contract for whitelisted token pairs without confirmations and deposit tokens in the DutchX.\r\n//  differs from the Complete module in the allowed functions, it doesn't allow to perform buy operations.\r\n/// @author Denis Granha - <denis@gnosis.pm>\r\ncontract DutchXSellerModule is DutchXBaseModule {\r\n\r\n    string public constant NAME = \"DutchX Seller Module\";\r\n    string public constant VERSION = \"0.0.2\";\r\n\r\n    /// @dev Returns if Safe transaction is to DutchX contract and with whitelisted tokens.\r\n    /// @param to Dutch X address or Whitelisted token (only for approve operations for DX).\r\n    /// @param value Not checked.\r\n    /// @param data Allowed operations (postSellOrder, postBuyOrder, claimTokensFromSeveralAuctionsAsBuyer, claimTokensFromSeveralAuctionsAsSeller, deposit).\r\n    /// @return Returns if transaction can be executed.\r\n    function executeWhitelisted(address to, uint256 value, bytes memory data)\r\n        public\r\n        returns (bool)\r\n    {\r\n\r\n        // Load allowed method interfaces\r\n        DutchXTokenInterface tokenInterface;\r\n        DutchXInterface dxInterface;\r\n\r\n        // Only Safe owners are allowed to execute transactions to whitelisted accounts.\r\n        require(isOperator[msg.sender], \"Method can only be called by an operator\");\r\n\r\n        // Only DutchX Proxy and Whitelisted tokens are allowed as destination\r\n        require(to == dutchXAddress || isWhitelistedToken[to], \"Destination address is not allowed\");\r\n\r\n        // Decode data\r\n        bytes4 functionIdentifier;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            functionIdentifier := mload(add(data, 0x20))\r\n        }\r\n\r\n        // Only approve tokens function and deposit (in the case of WETH) is allowed against token contracts, and DutchX proxy must be the spender (for approve)\r\n        if (functionIdentifier != tokenInterface.deposit.selector){\r\n            require(value == 0, \"Eth transactions only allowed for wrapping ETH\");\r\n        }\r\n\r\n        // Only these functions:\r\n        // PostSellOrder, claimTokensFromSeveralAuctionsAsBuyer, claimTokensFromSeveralAuctionsAsSeller, deposit\r\n        // Are allowed for the Dutch X contract\r\n        if (functionIdentifier == tokenInterface.approve.selector) {\r\n            uint spender;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                spender := mload(add(data, 0x24))\r\n            }\r\n\r\n            // TODO we need abi.decodeWithSelector\r\n            // approve(address spender, uint256 amount) we skip the amount\r\n            // (address spender) = abi.decode(dataParams, (address));\r\n\r\n            require(address(spender) == dutchXAddress, \"Spender must be the DutchX Contract\");\r\n        } else if (functionIdentifier == dxInterface.deposit.selector) {\r\n            // TODO we need abi.decodeWithSelector\r\n            // deposit(address token, uint256 amount) we skip the amount\r\n            // (address token) = abi.decode(data, (address));\r\n\r\n            uint depositToken;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                depositToken := mload(add(data, 0x24))\r\n            }\r\n            require (isWhitelistedToken[address(depositToken)], \"Only whitelisted tokens can be deposit on the DutchX\");\r\n        } else if (functionIdentifier == dxInterface.postSellOrder.selector) {\r\n            // TODO we need abi.decodeWithSelector\r\n            // postSellOrder(address sellToken, address buyToken, uint256 auctionIndex, uint256 amount) we skip auctionIndex and amount\r\n            // (address sellToken, address buyToken) = abi.decode(data, (address, address));\r\n\r\n            uint sellToken;\r\n            uint buyToken;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                sellToken := mload(add(data, 0x24))\r\n                buyToken := mload(add(data, 0x44))\r\n            }\r\n            require (isWhitelistedToken[address(sellToken)] && isWhitelistedToken[address(buyToken)], \"Only whitelisted tokens can be sold\");\r\n        } else {\r\n            // Other functions different than claim and deposit are not allowed\r\n            require(functionIdentifier == dxInterface.claimTokensFromSeveralAuctionsAsSeller.selector || functionIdentifier == dxInterface.claimTokensFromSeveralAuctionsAsBuyer.selector || functionIdentifier == tokenInterface.deposit.selector, \"Function not allowed\");\r\n        }\r\n\r\n        require(manager.execTransactionFromModule(to, value, data, Enum.Operation.Call), \"Could not execute transaction\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dutchXAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistedOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"changeMasterCopy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dx\",\"type\":\"address\"}],\"name\":\"changeDXProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dx\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"operators\",\"type\":\"address[]\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DutchXSellerModule","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c418f801ec21d23ed10dc26886c3c7754ba3506c3540aee1982513f87a9eca9b"}]}