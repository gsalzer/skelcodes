{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface BBTxInterface {\r\n    function snapshot() external returns(uint256);\r\n    function circulationAt(uint256 _snapshotId) external view returns(uint256);\r\n    function balanceOfAt(address _account, uint256 _snapshotId) external view returns (uint256);\r\n}\r\n\r\ncontract Dividend is Pausable {\r\n    using SafeMath for *;\r\n\r\n    struct RoundInfo {\r\n        uint256 bbtSnapshotId;\r\n        uint256 dividend;\r\n    }\r\n\r\n    struct CurrentRoundInfo {\r\n        uint256 roundId;\r\n        uint256 dividend;\r\n        bool isEnded;   // default is false\r\n    }\r\n\r\n    BBTxInterface private BBT;   // BBT contract\r\n    mapping (uint256 => CurrentRoundInfo) public currentRound_;  // (gameId => current round information)\r\n    mapping (uint256 => mapping(address => uint256)) public playersWithdrew_;    // (gameId => plyAddr => withdrewEth)\r\n    mapping (uint256 => mapping(uint256 => RoundInfo)) public roundsInfo_;  // gameId => roundId => RoundInfo\r\n    mapping (uint256 => uint256[]) public roundIds_;    //gameId => roundIds\r\n    mapping (uint256 => uint256) public cumulativeDividend;  // gameId => cumulative total dividend;\r\n    address[] public games;    //registered games (gameID => gameContractAddress)\r\n    mapping (address => uint256) public gameIdxAddress;  //address => gameId\r\n\r\n    event Deposited(uint256 indexed _gameId, address indexed _from, uint256 indexed _round, uint256 _value);\r\n    event Distributed(uint256 indexed _gameId, uint256 indexed _roundId, uint256 bbtSnapshotId, uint256 dividend);\r\n    event Withdrew(uint256 indexed _gameId, address indexed _from, uint256 _value);\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistered(address _gameAddress) {\r\n        bool ifRegistered = hasRegistered(_gameAddress);\r\n        require(ifRegistered == true, 'not registered.');\r\n        _;\r\n    }\r\n\r\n    modifier validGameId(uint256 _gameId) {\r\n        require(_gameId <= getGameCount(), 'invalid gameId.');\r\n        _;\r\n    }\r\n\r\n    constructor(address _bbtAddress) public {\r\n        BBT = BBTxInterface(_bbtAddress);\r\n        games.push(address(0)); //map gameId 0 to address 0x0\r\n    }\r\n\r\n    /**\r\n    * @dev fetch gameId by gameAddress.\r\n    * @param _gameAddress game contract address.\r\n    * @return return registered game id, or 0 if not registered.\r\n    */\r\n    function getGameId(address _gameAddress) public view returns(uint256) {\r\n        return gameIdxAddress[_gameAddress];\r\n    }\r\n\r\n    /**\r\n    * @dev get total registered game count.\r\n    */\r\n    function getGameCount() public view returns(uint256) {\r\n        return games.length - 1;    //exclude gameId 0\r\n    }\r\n\r\n    /**\r\n    * @dev register game.\r\n    * @param _gameAddress game contract address.\r\n    * @return return registered game id.\r\n    */\r\n    function register(address _gameAddress)\r\n        onlyOwner\r\n        whenNotPaused\r\n        public\r\n        returns(uint256)\r\n    {\r\n        bool ifRegistered = hasRegistered(_gameAddress);\r\n        require(ifRegistered == false, 'already registered.');\r\n        uint256 gameId = (games.push(_gameAddress)).sub(1);\r\n        gameIdxAddress[_gameAddress] = gameId;\r\n        return gameId;\r\n    }\r\n\r\n    /**\r\n    * @dev unregister game.\r\n    * @param _gameAddress game contract address.\r\n    * @return return bool.\r\n    */\r\n    function unRegister(address _gameAddress)\r\n        onlyOwner\r\n        whenNotPaused\r\n        onlyRegistered(_gameAddress)\r\n        public\r\n        returns(bool)\r\n    {\r\n        uint256 gameId = getGameId(_gameAddress);\r\n        games[gameId] = address(0);\r\n        gameIdxAddress[_gameAddress] = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev check if the given address already register.\r\n    * @return return true if registered.\r\n    */\r\n    function hasRegistered(address _gameAddress) public view returns(bool) {\r\n        uint256 gameId = getGameId(_gameAddress);\r\n        if (gameId == 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get count of game rounds\r\n     */\r\n    function getRoundsCount(uint256 _gameId)\r\n        validGameId(_gameId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return roundIds_[_gameId].length;\r\n    }\r\n\r\n    /**\r\n     * @dev deposit dividend eth in.\r\n     * @param _round which round the dividend for.\r\n     * @return deposit success.\r\n     */\r\n    function deposit(uint256 _round)\r\n        onlyRegistered(msg.sender)\r\n        whenNotPaused\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        uint256 gameId = getGameId(msg.sender);\r\n        require(msg.value > 0, \"deposit amount should not be empty.\");\r\n        require(_round > 0 && _round >= currentRound_[gameId].roundId, \"can not deposit dividend for past round.\");\r\n\r\n        if (_round == currentRound_[gameId].roundId) {\r\n            require(currentRound_[gameId].isEnded == false, \"this round has ended. can not deposit.\");\r\n            currentRound_[gameId].dividend = (currentRound_[gameId].dividend).add(msg.value);\r\n        } else {    // new round\r\n            if (currentRound_[gameId].roundId > 0)  //when first deposit come in, don't check isEnded.\r\n                require(currentRound_[gameId].isEnded == true, \"last round not end. can not deposit new round.\");\r\n            currentRound_[gameId].roundId = _round;\r\n            currentRound_[gameId].isEnded = false;\r\n            currentRound_[gameId].dividend = msg.value;\r\n        }\r\n\r\n        cumulativeDividend[gameId] = cumulativeDividend[gameId].add(msg.value);\r\n\r\n        emit Deposited(gameId, msg.sender, _round, msg.value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev distribute dividend to BBT holder.\r\n     * @param _round which round the distribution for.\r\n     * @return distributed success.\r\n     */\r\n    function distribute(uint256 _round)\r\n        onlyRegistered(msg.sender)\r\n        whenNotPaused\r\n        public\r\n        returns(bool)\r\n    {\r\n        uint256 gameId = getGameId(msg.sender);\r\n        require(_round > 0 && _round >= currentRound_[gameId].roundId, \"can not distribute dividend for past round.\");\r\n\r\n        if (_round == currentRound_[gameId].roundId) {\r\n            require(currentRound_[gameId].isEnded == false, \"this round has ended. can not distribute again.\");\r\n        } else {    //when this round has no deposit\r\n            require(currentRound_[gameId].isEnded == true, \"last round not end. can not distribute new round.\");\r\n            currentRound_[gameId].roundId = _round;\r\n            currentRound_[gameId].dividend = 0;\r\n        }\r\n\r\n        RoundInfo memory roundInfo;\r\n        roundInfo.bbtSnapshotId = BBT.snapshot();\r\n        roundInfo.dividend = currentRound_[gameId].dividend;\r\n        roundsInfo_[gameId][currentRound_[gameId].roundId] = roundInfo;\r\n        roundIds_[gameId].push(currentRound_[gameId].roundId);\r\n\r\n        currentRound_[gameId].isEnded = true;   //mark this round is ended\r\n\r\n        emit Distributed(gameId, currentRound_[gameId].roundId, roundInfo.bbtSnapshotId, roundInfo.dividend);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev player withdraw dividend out.\r\n     */\r\n    function withdraw(uint256 _gameId)\r\n        validGameId(_gameId)\r\n        whenNotPaused\r\n        isHuman\r\n        public\r\n    {\r\n        uint256 plyLeftDividend = getPlayerLeftDividend(_gameId, msg.sender);\r\n        if (plyLeftDividend > 0) {\r\n            (msg.sender).transfer(plyLeftDividend);\r\n            playersWithdrew_[_gameId][msg.sender] = (playersWithdrew_[_gameId][msg.sender]).add(plyLeftDividend);\r\n        }\r\n        emit Withdrew(_gameId, msg.sender, plyLeftDividend);\r\n    }\r\n\r\n    /**\r\n     * @dev player withdraw dividend out.\r\n     */\r\n    function withdrawAll()\r\n        whenNotPaused\r\n        isHuman\r\n        public\r\n    {\r\n        uint256 gameCount_ = getGameCount();\r\n        for (uint256 i = 1; i <= gameCount_; i++) {\r\n            withdraw(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev get player dividend by round id and game id.\r\n     */\r\n    function getPlayerRoundDividend(uint256 _gameId, address _plyAddr, uint256 _roundId)\r\n        validGameId(_gameId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        RoundInfo storage roundInfo = roundsInfo_[_gameId][_roundId];\r\n        // cause circulation divided by token decimal, so the balance should divide by it too.\r\n        uint256 plyRoundBBT = (BBT.balanceOfAt(_plyAddr, roundInfo.bbtSnapshotId)).div(1e18);\r\n        return plyRoundBBT.mul(getRoundDividendPerBBTHelper(_gameId, _roundId));\r\n    }\r\n\r\n    /**\r\n     * @dev get player dividend by round id and game address.\r\n     */\r\n    function getPlayerRoundDividendByAddr(address _gameAddr, address _plyAddr, uint256 _roundId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = getGameId(_gameAddr);\r\n        return getPlayerRoundDividend(gameId, _plyAddr, _roundId);\r\n    }\r\n\r\n    /**\r\n     * @dev get player total dividend by game id.\r\n     */\r\n    function getPlayerTotalDividend(uint256 _gameId, address _plyAddr)\r\n        validGameId(_gameId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 plyTotalDividend;\r\n        for (uint256 i = 0; i < roundIds_[_gameId].length; i++) {\r\n            uint256 roundId = roundIds_[_gameId][i];\r\n            plyTotalDividend = plyTotalDividend.add(getPlayerRoundDividend(_gameId, _plyAddr, roundId));\r\n        }\r\n        return plyTotalDividend;\r\n    }\r\n\r\n    /**\r\n     * @dev get player total dividend by game addr.\r\n     */\r\n    function getPlayerTotalDividendByAddr(address _gameAddr, address _plyAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = getGameId(_gameAddr);\r\n        return getPlayerTotalDividend(gameId, _plyAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev get player left dividend(total - withdrew) by game id\r\n     */\r\n    function getPlayerLeftDividend(uint256 _gameId, address _plyAddr)\r\n        validGameId(_gameId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (getPlayerTotalDividend(_gameId, _plyAddr)).sub(playersWithdrew_[_gameId][_plyAddr]);\r\n    }\r\n\r\n    /**\r\n     * @dev get player left dividend(total - withdrew) by game address\r\n     */\r\n    function getPlayerLeftDividendByAddr(address _gameAddr, address _plyAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = getGameId(_gameAddr);\r\n        return getPlayerLeftDividend(gameId, _plyAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev calculate dividend per BBT by round id.\r\n     */\r\n    function getRoundDividendPerBBTHelper(uint256 _gameId, uint256 _roundId)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        RoundInfo storage roundInfo = roundsInfo_[_gameId][_roundId];\r\n\r\n        if (roundInfo.dividend == 0)\r\n            return 0;\r\n\r\n        // must divide by token decimal, or circulation is greater than dividend,\r\n        // the result will be 0, not 0.xxx(cause solidity not support float.)\r\n        // and the func which rely on this helper will get the result 0 too.\r\n        uint256 circulationAtSnapshot = (BBT.circulationAt(roundInfo.bbtSnapshotId)).div(1e18);\r\n        if (circulationAtSnapshot == 0)\r\n            return 0;\r\n        return (roundInfo.dividend).div(circulationAtSnapshot);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRound_\",\"outputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"isEnded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"unRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_plyAddr\",\"type\":\"address\"},{\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersWithdrew_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerTotalDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameIdxAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"hasRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerLeftDividendByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerTotalDividendByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"getGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundsInfo_\",\"outputs\":[{\"name\":\"bbtSnapshotId\",\"type\":\"uint256\"},{\"name\":\"dividend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getRoundsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_plyAddr\",\"type\":\"address\"},{\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundDividendByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerLeftDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bbtAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bbtSnapshotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Dividend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d311ac05ede4e4955ebb08116300ee2834d03362","Library":"","SwarmSource":"bzzr://76c17495df49213e52d1c788e08fd02fae98d67ba2c955d5df35425e8390141b"}]}