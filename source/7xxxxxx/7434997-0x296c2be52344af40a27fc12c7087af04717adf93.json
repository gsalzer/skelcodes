{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n//p3Dank.io\r\n//send 0.25 ETH to contract to purchase 3 plants. \r\n//you can only rebuy when you have ZERO plants\r\n//contract will take all ether sent and add it to the pot >>>NO REFUNDS<<<\r\n//only send 0.25 ether, no more, no less\r\n//Block plant, Chain plant, Fork plant\r\n//BLOCK smashes fork\r\n//FORK forks the chain\r\n//CHAIN adds the block\r\n//plants automatically grow over time \r\n//the older the plants get a bigger % bonus for selling\r\n//choose to sell 1 plant or attack at random every 7 hours \r\n//if your random attack wins the rock paper scissors, you sell the targets house for 50% its base value(no bonus)\r\n//sucessful attacks raise the value of every other plant, >>DONT MISS ATTACKS<<\r\n//sold plants have a bonus and reduce the value of every other plant. \r\n//Sell bonus is 2x after 42000 blocks, Max bonus of 4x after 69420 blocks\r\n//sell price = (total eth in contract) * (growth of plant being sold) / (total growth in game) + (big plant bonus)\r\n//1.2% dev cut 2% buys p3d. 96.8% back to players. p3d divs go to pot\r\n//tron version of the game soon with mechanics more suited for that chain\r\n//A 1 eth entry cost version after we see how the economics play out\r\n//If this works as intended the game expands and contracts to any amount of players and never ends\r\n//thanks to Team Just and Spielley for the code I used\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n        }\r\n    }\r\n\r\ninterface HourglassInterface  {\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function withdraw() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n}\r\n\r\n//import \"browser/safemath.sol\";\r\n//import \"browser/hourglassinterface.sol\";\r\n\r\ncontract p3Dank  {\r\n    using SafeMath for uint;\r\n    uint256 public _totalhouses; // total number of houses in the game, used to calc divs\r\n    uint256 public blocksbeforeaction = 1680;// blocks between player action. 7 hours / 420 minutes / 3 moves per day\r\n    uint256 public nextFormation;// next spot in formation\r\n    mapping(address => uint256)public _playerhouses; // number of houses owned by player\r\n    mapping(address => uint256)public lastmove;//blocknumber lastMove\r\n    mapping(address => uint256) buyblock;// block that houses were purchased by a player\r\n    address payable happydev = 0xDC6dfe8040fc162Ab318De99c63Ec2cd0e203010; // dev cut\r\n    address payable feeder; //address of p3d feeder contract\r\n    address p3dref;\r\n\r\n   struct house { //houses for the battlefield\r\n       address owner; //who owns the house\r\n       uint8 rpstype; //what type of house is it 1=roc 2=pap 3=sis\r\n   }\r\n\r\n    mapping(uint256 => house)public formation;// the playing field\r\n\r\n    modifier ishuman() {//\"real\" players only\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier canmove() {\r\n          address sender = msg.sender;\r\n          require(_playerhouses[sender] > 0);\r\n          require(canimoveyet());\r\n          _;\r\n    }\r\n\r\n    function buyp3d4me(uint256 value) public payable {//\r\n        P3Dcontract_.buy.value(value)(p3dref);//buy p3d\r\n    }\r\n\r\n    bool feedset;\r\n\r\n    function setfeedaddress(address payable feedadd) public {\r\n        require (feedset == false);\r\n        feeder = feedadd;\r\n        feedset = true;\r\n    }\r\n\r\n    function () external payable{}\r\n\r\n    function buyhouses() ishuman() public payable { // houses... plants... tulips ... its all good\r\n        uint256 value = msg.value;\r\n        if(value == 250 finney){// buying 3 houses costs 0.25 eth\r\n            address sender = msg.sender;\r\n            if(_playerhouses[sender] == 0 ){ // check that user has no houses\r\n                _playerhouses[sender] = 3; // add houses to players count\r\n                uint256 next = nextFormation;\r\n                formation[next++] = house(sender, 1);// add houses to playing field\r\n                formation[next++] = house(sender, 2);// roc = 1, pap =2, sis = 3.\r\n                formation[next++] = house(sender, 3);\r\n                nextFormation = next;\r\n                lastmove[sender] = block.number; // reset lastMove to prevent people from attacking right away\r\n                buyblock[sender] = block.number; // log the buy block of the sender\r\n                _totalhouses += 3;// update totalSupply\r\n                feeder.transfer(5 finney);\r\n                happydev.transfer(3 finney);\r\n                } } }\r\n\r\n    bool gameon;\r\n\r\n    function startgame() public payable {\r\n        uint256 value = msg.value;\r\n        require(value == 250 finney);// buying 3 houses costs 0.25 eth\r\n        require (gameon == false);\r\n        address sender = msg.sender;\r\n        _playerhouses[sender] = _playerhouses[sender]+3;// add houses to players count\r\n        formation[nextFormation] = house(sender, 1);// add houses to playing field\r\n        nextFormation++;\r\n        formation[nextFormation] = house(sender, 2);// roc = 1, pap =2, sis = 3.\r\n        nextFormation++;\r\n        formation[nextFormation] = house(sender, 3);\r\n        nextFormation++;\r\n        lastmove[sender] = block.number; // reset lastMove to prevent people from attacking right away\r\n        buyblock[sender] = block.number; // log the buy block of the sender\r\n        _totalhouses = _totalhouses+3;// update totalSupply\r\n         feeder.transfer(5 finney);\r\n        happydev.transfer(3 finney);\r\n        lastupdateblock = block.number;\r\n        gameon = true;\r\n    }\r\n\r\n    //divsection\r\n    uint256 lastupdateblock;\r\n    uint256 totaldivpts;\r\n\r\n    function updateglobal() internal {                       \r\n        totaldivpts = gametotaldivs();\r\n        lastupdateblock = block.number;//updated\r\n        lastmove[msg.sender] = block.number; // reset lastmove of attacker\r\n    }\r\n\r\n    function rekt(uint8 typeToKill) internal {\r\n        updateglobal();\r\n        uint256 attacked = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin))) % nextFormation;\r\n        if(formation[attacked].rpstype == typeToKill) {\r\n            address payable sender = msg.sender;\r\n            address killed = formation[attacked].owner;//set address of attacked player\r\n            formation[attacked] = formation[--nextFormation];//reform playing field\r\n            delete formation[nextFormation];  //delete unused formation\r\n            uint256 playerdivpts = block.number.sub(buyblock[killed]);//figure out how big robbed plant is\r\n            uint256 robbed = (address(this).balance).mul(playerdivpts).div(totaldivpts).div(2); //figure out how much was robbed\r\n            totaldivpts = totaldivpts.sub(playerdivpts); //adjust total div points\r\n            _totalhouses--;//update total houses in game\r\n            _playerhouses[killed]--;//update attacked players houses\r\n            sender.transfer(robbed);//pay the robber\r\n        } }\r\n\r\n    function rockattack() canmove() public { //rock attack function\r\n        rekt(3);\r\n        }\r\n\r\n    function sisattack() canmove() public { //sicssor attack function\r\n        rekt(1);\r\n        }\r\n\r\n    function papattack() canmove() public {//paper attack function\r\n        rekt(2);\r\n        }\r\n\r\n    function sellhouse (uint256 selling) canmove() public {// house sell function\r\n        address payable sender = msg.sender;\r\n        address beingsold = formation[selling].owner;\r\n        if (beingsold == sender){ // how to comfirm sender is owner\r\n            updateglobal();\r\n            uint256 next = --nextFormation;\r\n            formation[selling] = formation[next];\r\n            delete formation[next];\r\n            _totalhouses--;//update total houses in game\r\n            _playerhouses[sender]--;//update selling players houses\r\n            uint256 maxbuyblock = 69420;\r\n            uint256 playerdivpts = block.number.sub(buyblock[sender]);\r\n            uint256 sold;\r\n            if (playerdivpts >= maxbuyblock) {\r\n                sold = (address(this).balance).mul(maxbuyblock * 4).div(totaldivpts);\r\n                }\r\n            else {\r\n                uint256 payoutmultiplier = playerdivpts.mul(playerdivpts).mul(10000).div(1953640000).add(10000);\r\n                sold = (address(this).balance).mul(playerdivpts).mul(payoutmultiplier).div(totaldivpts).div(10000);\r\n            }\r\n            totaldivpts = totaldivpts.sub(playerdivpts); //adjust total div points\r\n            sender.transfer(sold);//payout\r\n            } } \r\n\r\n    //p3d section\r\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n        function P3DDivstocontract() public{\r\n            address newref = msg.sender;\r\n            p3dref = newref;\r\n            P3Dcontract_.withdraw(); //withdraw p3d divs into contract \r\n        }\r\n        function amountofp3d() external view returns(uint256){//balanceof = Retrieve the tokens owned by the caller.\r\n            return ( P3Dcontract_.balanceOf(address(this)))  ;\r\n        }\r\n        function harvestabledivs() view  public returns(uint256){//dividendsof = Retrieve the dividend balance of any single address.\r\n            return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n        }\r\n        \r\n\r\n    //view functions\r\n    function singleplantdivs ()public view returns(uint256){ //how many blocks old are my plants?\r\n        return(block.number.sub(buyblock[msg.sender]));\r\n    }\r\n    function howmanyplants ()public view returns(uint256){ //how many plants do I have?\r\n        return(_playerhouses[msg.sender]);\r\n    }\r\n    function whatblockmove ()public view returns(uint256){  // what block # can I make my next move at\r\n        return(lastmove[msg.sender]).add(blocksbeforeaction);\r\n    }\r\n    function canimoveyet ()public view returns(bool){ //can i move\r\n        if (blocksbeforeaction <= (block.number).sub(lastmove[msg.sender])) return true;\r\n    }\r\n    function howmucheth ()public view returns(uint256){//how much eth is in the contract\r\n        return address(this).balance;\r\n    }\r\n    function gametotaldivs ()public view returns(uint256){//how many div points are in the game right now\r\n        return (block.number).sub(lastupdateblock).mul(_totalhouses).add(totaldivpts);\r\n    }\r\n    function singleplantpayout ()public view returns(uint256){\r\n        uint256 playerdivpts = block.number.sub(buyblock[msg.sender]);\r\n        uint256 maxbuyblock = 69420;\r\n        if (playerdivpts >= maxbuyblock) {\r\n            return (address(this).balance).mul(maxbuyblock * 4).div(totaldivpts);\r\n        }\r\n        else {\r\n            uint256 payoutmultiplier = playerdivpts.mul(playerdivpts).mul(10000).div(1953640000).add(10000);\r\n            return (address(this).balance).mul(playerdivpts).mul(payoutmultiplier).div(totaldivpts).div(10000);\r\n        }\r\n    }\r\n\r\n//thanks for playing\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"rockattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buyp3d4me\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"papattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalhouses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"P3DDivstocontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleplantpayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastmove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFormation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleplantdivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gametotaldivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howmucheth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howmanyplants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whatblockmove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountofp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"formation\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"rpstype\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyhouses\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startgame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feedadd\",\"type\":\"address\"}],\"name\":\"setfeedaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksbeforeaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sisattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_playerhouses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canimoveyet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"selling\",\"type\":\"uint256\"}],\"name\":\"sellhouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"p3Dank","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c4d0eb8f5561581d9ac26ddecae7a504fb87f69d25e73d06231db3e163f477e2"}]}