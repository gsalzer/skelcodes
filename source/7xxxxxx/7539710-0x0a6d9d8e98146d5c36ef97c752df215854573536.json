{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RelayRegistry is Ownable {\r\n    \r\n    event AddedRelay(address relay);\r\n    event RemovedRelay(address relay);\r\n    \r\n    mapping (address => bool) public relays;\r\n    \r\n    constructor(address initialRelay) public {\r\n        relays[initialRelay] = true;\r\n    }\r\n    \r\n    function triggerRelay(address relay, bool value) onlyOwner public returns (bool) {\r\n        relays[relay] = value;\r\n        if(value) {\r\n            emit AddedRelay(relay);\r\n        } else {\r\n            emit RemovedRelay(relay);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// All functions of SmartWallet Implementations should be called using delegatecall\r\ncontract SmartWallet {\r\n\r\n    event Upgrade(address indexed newImplementation);\r\n\r\n    // Shared key value store. Data should be encoded and decoded using abi.encode()/abi.decode() by different implementations\r\n    mapping (bytes32 => bytes) public store;\r\n    \r\n    modifier onlyRelay {\r\n        RelayRegistry registry = RelayRegistry(0xd23e2F482005a90FC2b8dcDd58affc05D5776cb7); // relay registry address\r\n        require(registry.relays(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == abi.decode(store[\"owner\"], (address)) || msg.sender == abi.decode(store[\"factory\"], (address)));\r\n        _;\r\n    }\r\n    \r\n    function initiate(address owner) public returns (bool) {\r\n        // this function can only be called by the factory\r\n        if(msg.sender != abi.decode(store[\"factory\"], (address))) return false;\r\n        // store current owner in key store\r\n        store[\"owner\"] = abi.encode(owner);\r\n        store[\"nonce\"] = abi.encode(0);\r\n        return true;\r\n    }\r\n    \r\n    // Called by factory to initiate state if deployment was relayed\r\n    function initiate(address owner, address relay, uint fee, address token) public returns (bool) {\r\n        require(initiate(owner), \"internal initiate failed\");\r\n        // Access ERC20 token\r\n        IERC20 tokenContract = IERC20(token);\r\n        // Send fee to relay\r\n        require(tokenContract.transfer(relay, fee), \"fee transfer failed\");\r\n        return true;\r\n    }\r\n    \r\n    function pay(address to, uint value, uint fee, address tokenContract, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (bool) {\r\n        uint currentNonce = abi.decode(store[\"nonce\"], (uint));\r\n        require(abi.decode(store[\"owner\"], (address)) == recover(keccak256(abi.encodePacked(msg.sender, to, tokenContract, abi.decode(store[\"factory\"], (address)), value, fee, tx.gasprice, currentNonce)), v, r, s));\r\n        IERC20 token = IERC20(tokenContract);\r\n        store[\"nonce\"] = abi.encode(currentNonce+1);\r\n        require(token.transfer(to, value));\r\n        require(token.transfer(msg.sender, fee));\r\n        return true;\r\n    }\r\n    \r\n    function pay(address to, uint value, address tokenContract) onlyOwner public returns (bool) {\r\n        IERC20 token = IERC20(tokenContract);\r\n        require(token.transfer(to, value));\r\n        return true;\r\n    }\r\n    \r\n    function pay(address[] memory to, uint[] memory value, address[] memory tokenContract) onlyOwner public returns (bool) {\r\n        for (uint i; i < to.length; i++) {\r\n            IERC20 token = IERC20(tokenContract[i]);\r\n            require(token.transfer(to[i], value[i]));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function upgrade(address implementation, uint fee, address feeContract, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (bool) {\r\n        uint currentNonce = abi.decode(store[\"nonce\"], (uint));\r\n        address owner = abi.decode(store[\"owner\"], (address));\r\n        address factory = abi.decode(store[\"factory\"], (address));\r\n        require(owner == recover(keccak256(abi.encodePacked(msg.sender, implementation, feeContract, factory, fee, tx.gasprice, currentNonce)), v, r, s));\r\n        store[\"nonce\"] = abi.encode(currentNonce+1);\r\n        store[\"fallback\"] = abi.encode(implementation);\r\n        IERC20 feeToken = IERC20(feeContract);\r\n        require(feeToken.transfer(msg.sender, fee));\r\n        emit Upgrade(implementation);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function upgrade(address implementation) onlyOwner public returns (bool) {\r\n        store[\"fallback\"] = abi.encode(implementation);\r\n        emit Upgrade(implementation);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function recover(bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedMessageHash = keccak256(abi.encodePacked(prefix, messageHash));\r\n        return ecrecover(prefixedMessageHash, v, r, s);\r\n    }\r\n    \r\n}\r\n\r\ncontract Proxy {\r\n    \r\n    // Shared key value store. Data should be encoded and decoded using abi.encode()/abi.decode() by different implementations\r\n    mapping (bytes32 => bytes) public store;\r\n    \r\n    constructor() public {\r\n        // set implementation address in storage\r\n        store[\"fallback\"] = abi.encode(0x09892527914356473380b3Aebe1F96ce0DC6982C); // SmartWallet address\r\n        // set factory address in storage\r\n        store[\"factory\"] = abi.encode(msg.sender);\r\n    }\r\n    \r\n    // forwards everything as a delegatecall to appropriate address\r\n    function() external {\r\n        address impl = abi.decode(store[\"fallback\"], (address));\r\n        assembly {\r\n          let ptr := mload(0x40)\r\n        \r\n          // (1) copy incoming call data\r\n          calldatacopy(ptr, 0, calldatasize)\r\n        \r\n          // (2) forward call to logic contract\r\n          let result := delegatecall(gas, impl, ptr, calldatasize, 0, 0)\r\n          let size := returndatasize\r\n        \r\n          // (3) retrieve return data\r\n          returndatacopy(ptr, 0, size)\r\n\r\n          // (4) forward return data back to caller\r\n          switch result\r\n          case 0 { revert(ptr, size) }\r\n          default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Factory {\r\n    \r\n    event Deployed(address indexed addr, address indexed owner);\r\n\r\n    modifier onlyRelay {\r\n        RelayRegistry registry = RelayRegistry(0xd23e2F482005a90FC2b8dcDd58affc05D5776cb7); // Relay Registry address\r\n        require(registry.relays(msg.sender));\r\n        _;\r\n    }\r\n\r\n    // internal create2 deployer\r\n    function deployCreate2(address owner) internal returns (address) {\r\n        bytes memory code = type(Proxy).creationCode;\r\n        address addr;\r\n        assembly {\r\n            // create2\r\n            addr := create2(0, add(code, 0x20), mload(code), owner)\r\n            // revert if contract was not created\r\n            if iszero(extcodesize(addr)) {revert(0, 0)}\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    // create2 with a relayer\r\n    function deployWallet(uint fee, address token, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (address) {\r\n        address signer = recover(keccak256(abi.encodePacked(address(this), msg.sender, token, tx.gasprice, fee)), v, r, s);\r\n        address addr = deployCreate2(signer);\r\n        SmartWallet wallet = SmartWallet(uint160(addr));\r\n        require(wallet.initiate(signer, msg.sender, fee, token));\r\n        emit Deployed(addr, signer);\r\n        return addr;\r\n    }\r\n    \r\n    function deployWallet(uint fee, address token, address to, uint value, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (address addr) {\r\n        address signer = recover(keccak256(abi.encodePacked(address(this), msg.sender, token, to, tx.gasprice, fee, value)), v, r, s);\r\n        addr = deployCreate2(signer);\r\n        SmartWallet wallet = SmartWallet(uint160(addr));\r\n        require(wallet.initiate(signer, msg.sender, fee, token));\r\n        require(wallet.pay(to, value, token));\r\n        emit Deployed(addr, signer);\r\n    }\r\n    \r\n    // create2 directly from owner\r\n    function deployWallet() public returns (address) {\r\n        address addr = deployCreate2(msg.sender);\r\n        SmartWallet wallet = SmartWallet(uint160(addr));\r\n        require(wallet.initiate(msg.sender));\r\n        emit Deployed(addr, msg.sender);\r\n        return addr;\r\n        \r\n    }\r\n\r\n    // get create2\r\n    function getCreate2Address(address owner) public view returns (address) {\r\n        bytes32 temp = keccak256(abi.encodePacked(bytes1(0xff), address(this), uint(owner), bytes32(keccak256(type(Proxy).creationCode))));\r\n        address ret;\r\n        uint mask = 2 ** 160 - 1;\r\n        assembly {\r\n            ret := and(temp, mask)\r\n        }\r\n        return ret;\r\n    }\r\n    \r\n    function getCreate2Address() public view returns (address) {\r\n        return getCreate2Address(msg.sender);\r\n    }\r\n    \r\n    function canDeploy(address owner) public view returns (bool inexistent) {\r\n        address wallet = getCreate2Address(owner);\r\n        assembly {\r\n            inexistent := eq(extcodesize(wallet), 0)\r\n        }\r\n    }\r\n    \r\n    function canDeploy() public view returns (bool) {\r\n        return canDeploy(msg.sender);\r\n    }\r\n    \r\n    function recover(bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedMessageHash = keccak256(abi.encodePacked(prefix, messageHash));\r\n        return ecrecover(prefixedMessageHash, v, r, s);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"canDeploy\",\"outputs\":[{\"name\":\"inexistent\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCreate2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreate2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14ba335a4005d5e128242d50fd605d3bf991a4161c9085529c33b38981025cb9"}]}