{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n    contract DAO {\r\n        function balanceOf(address addr) public returns (uint);\r\n    }\r\n    \r\n    interface RegisterInterface {\r\n        function register(string);\r\n    }\r\n    \r\n// auth\r\ncontract Auth {\r\n    address      public  owner;\r\n    constructor () public {\r\n         owner = msg.sender;\r\n    }\r\n    \r\n    modifier auth {\r\n        require(isAuthorized(msg.sender) == true);\r\n        _;\r\n    }\r\n    \r\n    function isAuthorized(address src) internal view returns (bool) {\r\n        if(src == owner){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenTimelock is Auth{\r\n    \r\n    constructor() public {\r\n        benificiary = msg.sender;\r\n    }\r\n    \r\n    uint constant public days_of_month = 30;\r\n    \r\n    uint[] public dateArray;\r\n    uint public release_percent = 0;\r\n    \r\n    mapping (uint => bool) public release_map;\r\n    uint256 public totalFutureRelease = 0;\r\n    \r\n    // cosToken address, \r\n    address constant public contract_addr = 0x589891a198195061cb8ad1a75357a3b7dbadd7bc;\r\n    address public benificiary;\r\n    uint     public  startTime; \r\n    bool public lockStart = false;\r\n    \r\n    // set total cos to lock\r\n    function set_total(uint256 total) auth public {\r\n        require(lockStart == false);\r\n        totalFutureRelease = total;\r\n    }\r\n    \r\n    // set month to release\r\n    function set_lock_info(int startMonth,int periods,int percent,int gap) auth public {\r\n        require(lockStart == false);\r\n        require(startMonth > 0);\r\n        require(periods > 0);\r\n        require(percent > 0);\r\n        require(gap > 0);\r\n        require(periods * percent == 100);\r\n        release_percent = uint(percent);\r\n        uint tmp = uint(startMonth);\r\n        delete dateArray;\r\n        for (int i = 0; i < periods; i++) {\r\n             dateArray.push(tmp * days_of_month);\r\n             tmp += uint(gap);\r\n        }\r\n    }\r\n\r\n    // when transfer certain balance to this contract address, we can call lock\r\n    function lock(int offsetMinutes) auth public returns(bool) {\r\n        require(lockStart == false);\r\n        require(offsetMinutes >= 0);\r\n        for(uint i = 0; i < dateArray.length; i++) {\r\n            require(dateArray[i] != 0);\r\n        }\r\n        require(release_percent != 0);\r\n        require(totalFutureRelease != 0);\r\n        \r\n        DAO cosTokenApi = DAO(contract_addr);\r\n        uint256 balance = cosTokenApi.balanceOf(address(this));\r\n        require(balance == totalFutureRelease);\r\n        \r\n        startTime = block.timestamp + uint(offsetMinutes) * 1 minutes;\r\n        lockStart = true;\r\n    }\r\n    \r\n    function set_benificiary(address b) auth public {\r\n        benificiary = b;\r\n    }\r\n    \r\n    function release_specific(uint i) private {\r\n        if (release_map[i] == true) {\r\n            emit mapCheck(true,i);\r\n            return;\r\n        }\r\n        emit mapCheck(false,i);\r\n        \r\n        DAO cosTokenApi = DAO(contract_addr);\r\n        uint256 balance = cosTokenApi.balanceOf(address(this));\r\n        uint256 eachRelease = 0;\r\n        eachRelease = (totalFutureRelease / 100) * release_percent;\r\n        \r\n        bool ok = balance >= eachRelease; \r\n        emit balanceCheck(ok,balance);\r\n        require(balance >= eachRelease);\r\n  \r\n        bool success = contract_addr.call(bytes4(keccak256(\"transfer(address,uint256)\")),benificiary,eachRelease);\r\n        emit tokenTransfer(success);\r\n        require(success);\r\n        release_map[i] = true;\r\n    }\r\n    \r\n    event mapCheck(bool ok,uint window);\r\n    event balanceCheck(bool ok,uint256 balance);\r\n    event tokenTransfer(bool success);\r\n\r\n    function release() auth public {\r\n        require(lockStart == true);\r\n        require(release_map[dateArray[dateArray.length-1]] == false);\r\n        uint theDay = dayFor();\r\n        \r\n        for (uint i=0; i<dateArray.length;i++) {\r\n            if(theDay > dateArray[i]) {\r\n                release_specific(dateArray[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n        // days after lock\r\n    function dayFor() view public returns (uint) {\r\n        uint timestamp = block.timestamp;\r\n        return timestamp < startTime ? 0 : (timestamp - startTime) / 1 days + 1;\r\n    }\r\n    \r\n    function regist(string key) auth public {\r\n        RegisterInterface(contract_addr).register(key);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"release_percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benificiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"release_map\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offsetMinutes\",\"type\":\"int256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"address\"}],\"name\":\"set_benificiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dateArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"days_of_month\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"set_total\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"regist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startMonth\",\"type\":\"int256\"},{\"name\":\"periods\",\"type\":\"int256\"},{\"name\":\"percent\",\"type\":\"int256\"},{\"name\":\"gap\",\"type\":\"int256\"}],\"name\":\"set_lock_info\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFutureRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"mapCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"balanceCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"tokenTransfer\",\"type\":\"event\"}]","ContractName":"TokenTimelock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://25a4b52717fb004f23a265db55b236e028347ac041d7600412ac6b828ffc5553"}]}