{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract FYC is ERC20,Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\t//the base info of the token\r\n\tstring public constant name=\"frenzy coin\";\r\n\tstring public constant symbol=\"FYC\";\r\n\tstring public constant version = \"1.0\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\tuint256 public constant MAX_SUPPLY=1000000000000*10**decimals;\r\n\tuint256 public constant INIT_SUPPLY=500000000000*10**decimals;\r\n\r\n\tuint256 public constant autoAirdropAmount=1000*10**decimals;\r\n    uint256 public constant MAX_AUTO_AIRDROP_AMOUNT=1000000*10**decimals;\r\n\r\n    uint256 public constant MAX_FUNDING_SUPPLY=499999000000*10**decimals;\r\n\r\n\tuint256 public totalFundingSupply;\r\n    //rate\r\n    uint256 public rate=1;\r\n\r\n\r\n\tuint256 public alreadyAutoAirdropAmount;\r\n\r\n\tmapping(address => bool) touched;\r\n\r\n\r\n    struct epoch  {\r\n        uint256 endTime;\r\n        uint256 amount;\r\n    }\r\n\r\n\tmapping(address=>epoch[]) public lockEpochsMap;\r\n\r\n\r\n\r\n\tfunction FYC() public{\r\n        totalFundingSupply=0;\r\n        alreadyAutoAirdropAmount=0;\r\n\t\ttotalSupply = INIT_SUPPLY;\r\n\t\tbalances[msg.sender] = INIT_SUPPLY;\r\n\t\temit Transfer(0x0, msg.sender, INIT_SUPPLY);\r\n\t}\r\n\r\n\tmodifier totalSupplyNotReached(uint256 _ethContribution,uint _rate){\r\n\t\tassert(totalSupply.add(_ethContribution.mul(rate)) <= MAX_SUPPLY);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachFundingSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_FUNDING_SUPPLY>=totalFundingSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\t epoch[] storage epochs = lockEpochsMap[user];\r\n\t\t epochs.push(epoch(endTime,amount));\r\n\t}\r\n\r\n\tfunction () payable external\r\n        notReachFundingSupply(msg.value,rate)\r\n\t{\r\n\t\tprocessFunding(msg.sender,msg.value,rate);\r\n\t\tuint256 amount=msg.value.mul(rate);\r\n\t\ttotalFundingSupply = totalFundingSupply.add(amount);\r\n\t}\r\n\r\n    function withdrawCoin(uint256 _value)external\r\n        onlyOwner\r\n        notReachFundingSupply(_value,1)\r\n    {\r\n        processFunding(msg.sender,_value,1);\r\n\t\tuint256 amount=_value;\r\n\t\ttotalFundingSupply = totalFundingSupply.add(amount);\r\n    }\r\n\r\n\tfunction etherProceeds() external\r\n\t\tonlyOwner\r\n\r\n\t{\r\n\t\tif(!msg.sender.send(this.balance)) revert();\r\n\t}\r\n\r\n\tfunction processFunding(address receiver,uint256 _value,uint256 fundingRate) internal\r\n\t\ttotalSupplyNotReached(_value,fundingRate)\r\n\r\n\t{\r\n\t\tuint256 tokenAmount = _value.mul(fundingRate);\r\n\t\ttotalSupply=totalSupply.add(tokenAmount);\r\n\t\tbalances[receiver] += tokenAmount;  // safeAdd not needed; bad semantics to use here\r\n\t\temit Transfer(0x0, receiver, tokenAmount);\r\n\t}\r\n\r\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\r\n \t{\r\n\t\trequire(_to != address(0));\r\n\r\n        if( !touched[msg.sender] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\r\n            touched[msg.sender] = true;\r\n            balances[msg.sender] = balances[msg.sender].add( autoAirdropAmount );\r\n            totalSupply = totalSupply.add( autoAirdropAmount );\r\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\r\n\r\n        }\r\n        \r\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\tif( now < epochs[i].endTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\r\n\r\n        require(_value <= balances[msg.sender]);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n  \t{\r\n        if( totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\r\n            if( touched[_owner] ){\r\n                return balances[_owner];\r\n            }\r\n            else{\r\n                return balances[_owner].add(autoAirdropAmount);\r\n            }\r\n        } else {\r\n            return balances[_owner];\r\n        }\r\n  \t}\r\n\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\trequire(_to != address(0));\r\n        \r\n        if( !touched[_from] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\r\n            touched[_from] = true;\r\n            balances[_from] = balances[_from].add( autoAirdropAmount );\r\n            totalSupply = totalSupply.add( autoAirdropAmount );\r\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\r\n        }\r\n\r\n\t\tepoch[] epochs = lockEpochsMap[_from];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\tif( now < epochs[i].endTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);  \r\n\r\n        require(_value <= balances[_from]);\r\n\r\n\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n  \t{\r\n\t\treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n    function setRate(uint256 _rate) external \r\n        onlyOwner\r\n      {\r\n          rate=_rate;\r\n      }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alreadyAutoAirdropAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AUTO_AIRDROP_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockEpochsMap\",\"outputs\":[{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoAirdropAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FYC","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8da53589bae0db51023bfef6a0f272009cf70d890733768b606797469b7d07e"}]}