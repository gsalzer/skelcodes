{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * Simple Public Voting/Poll Demo\r\n *\r\n * This is a DEMO contract. Please carefully inspect the source code and\r\n * understand what it is doing before using any of this in production.\r\n *\r\n *\r\n * Disclaimer of Warranty:\r\n * THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\r\n * EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\r\n * PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\r\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\r\n * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\r\n * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\r\n * NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n *\r\n */\r\n\r\n\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n *\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor()\r\n    public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner()\r\n    public\r\n    view\r\n    returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only the owner can do this.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner()\r\n    public\r\n    view\r\n    returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership()\r\n    public\r\n    onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner)\r\n    internal {\r\n        require(newOwner != address(0), \"New owner cannot be 0x0.\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/lifecycle/Destructible.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    /**\r\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\r\n     *     to the owner.\r\n     *\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy()\r\n    public\r\n    onlyOwner {\r\n        selfdestruct(owner());\r\n    }\r\n\r\n    /**\r\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\r\n     *     to the specified recipient address.\r\n     *\r\n     * @dev Transfers the current balance to the specified recipient and terminates the contract.\r\n     */\r\n    function destroyAndSend(address _recipient)\r\n    public\r\n    onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n *\r\n * @notice Used to call methods in ERC-20 contracts.\r\n *\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    returns (bool);\r\n\r\n    function balanceOf(address who)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/tokenutils/CanRescueERC20.sol\r\n\r\n/**\r\n * @title CanRescueERC20\r\n *\r\n * Provides a function to recover ERC-20 tokens which are accidentally sent\r\n * to the address of this contract (the owner can rescue ERC-20 tokens sent\r\n * to this contract back to himself).\r\n */\r\ncontract CanRescueERC20 is Ownable {\r\n\r\n    /**\r\n     * Enable the owner to rescue ERC20 tokens, which are sent accidentally\r\n     * to this contract.\r\n     *\r\n     * @dev This will be invoked by the owner, when owner wants to rescue tokens\r\n     * @notice Recover tokens accidentally sent to this contract. They will be sent to the\r\n     *     contract owner. Can only be called by the owner.\r\n     * @param token Token which will we rescue to the owner from the contract\r\n     */\r\n    function recoverTokens(IERC20 token)\r\n    public\r\n    onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        // Caution: ERC-20 standard doesn't require to throw exception on failures\r\n        // (although most ERC-20 tokens do so), but instead returns a bool value.\r\n        // Therefore let's check if it really returned true, and throw otherwise.\r\n        require(token.transfer(owner(), balance), \"Token transfer failed, transfer() returned false.\");\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Voting.sol\r\n\r\ncontract Voting is Ownable, Destructible, CanRescueERC20 {\r\n\r\n    /**\r\n     * @dev number of possible choices. Constant set at compile time.\r\n     */\r\n    uint8 internal constant NUMBER_OF_CHOICES = 4;\r\n\r\n    /**\r\n     * @notice Number of total cast votes (uint40 is enough as at most\r\n     *     we support 4 choices and 2^32 votes per choice).\r\n     */\r\n    uint40 public voteCountTotal;\r\n\r\n    /**\r\n     * @notice Number of votes, summarized per choice.\r\n     *\r\n     * @dev uint32 allows 4,294,967,296 possible votes per choice, should be enough,\r\n     *     and still allows 8 entries to be packed in a single storage slot\r\n     *     (EVM wordsize is 256 bit). And of course we check for overflows.\r\n     */\r\n    uint32[NUMBER_OF_CHOICES] internal currentVoteResults;\r\n\r\n    /**\r\n     * @notice Mapping of address to vote details\r\n     */\r\n    mapping(address => Voter) public votersInfo;\r\n\r\n    /**\r\n     * @notice Event gets emitted every time when a new vote is cast.\r\n     *\r\n     * @param addedVote choice in the vote\r\n     * @param allVotes array containing updated intermediate result\r\n     */\r\n    event NewVote(uint8 indexed addedVote, uint32[NUMBER_OF_CHOICES] allVotes);\r\n\r\n    /**\r\n     * @dev Represent info about a single voter.\r\n     */\r\n    struct Voter {\r\n        bool exists;\r\n        uint8 choice;\r\n        string name;\r\n    }\r\n\r\n    /**\r\n     * @notice Fallback function. Will be called whenever the contract receives ether, or\r\n     *     when is called without data or with unknown function signature.\r\n     */\r\n    function()\r\n    public {\r\n    }\r\n\r\n    /**\r\n     * @notice Cast your note. In a real world scenario, you might want to have address\r\n     *     voting only once. In this DEMO we allow unlimited number of votes per address.\r\n     * @param voterName Name of the voter, will be publicly visible on the blockchain\r\n     * @param givenVote choice the caller has voted for\r\n     */\r\n    function castVote(string voterName, uint8 givenVote)\r\n    external {\r\n        // answer must be given\r\n        require(givenVote < numberOfChoices(), \"Choice must be less than contract configured numberOfChoices.\");\r\n\r\n        // DEMO MODE: FOR EASIER TESTING, WE ALLOW UNLIMITED VOTES PER ADDRESS.\r\n        // check if already voted\r\n        //require(!votersInfo[msg.sender].exists, \"This address has already voted. Vote denied.\");\r\n\r\n        //  voter name has to have at least 3 bytes (note: with utf8 some chars have\r\n        // more than 1 byte, so this check is not fully accurate but ok here)\r\n        require(bytes(voterName).length > 2, \"Name of voter is too short.\");\r\n\r\n        // everything ok, add voter\r\n        votersInfo[msg.sender] = Voter(true, givenVote, voterName);\r\n        voteCountTotal = safeAdd40(voteCountTotal, 1);\r\n        currentVoteResults[givenVote] = safeAdd32(currentVoteResults[givenVote], 1);\r\n\r\n        // emit a NewVote event at this point in time, so that a web3 Dapp\r\n        // can react it to it immediately. Emit full current vote state, as\r\n        // events are cheaper for light clients than querying the state.\r\n        emit NewVote(givenVote, currentVoteResults);\r\n    }\r\n\r\n    /**\r\n    * @notice checks if this address has already cast a vote\r\n    *  this is required to find out if it is safe to call the other \"thisVoters...\" views.\r\n    */\r\n    function thisVoterExists()\r\n    external\r\n    view\r\n    returns (bool) {\r\n        return votersInfo[msg.sender].exists;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vote details of calling address or throws\r\n     *    if address has not voted yet.\r\n     */\r\n    function thisVotersChoice()\r\n    external\r\n    view\r\n    returns (uint8) {\r\n        // check if msg sender exists in voter mapping\r\n        require(votersInfo[msg.sender].exists, \"No vote so far.\");\r\n        return votersInfo[msg.sender].choice;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the entered voter name of the calling address or throws\r\n     *    if address has not voted yet.\r\n     */\r\n    function thisVotersName()\r\n    external\r\n    view\r\n    returns (string) {\r\n        // check if msg sender exists in voter mapping\r\n        require(votersInfo[msg.sender].exists, \"No vote so far.\");\r\n        return votersInfo[msg.sender].name;\r\n    }\r\n\r\n    /**\r\n     * @notice Return array with sums of votes per choice.\r\n     *\r\n     * @dev Note that this only will work for external callers, and not\r\n     *      for other contracts (as of solidity 0.4.24 returning of dynamically\r\n     *      sized data is still not in stable, it's only available with the\r\n     *      experimental \"ABIEncoderV2\" pragma). Also some block-explorers,\r\n     *      like etherscan, will have problems to display this correctly.\r\n     */\r\n    function currentResult()\r\n    external\r\n    view\r\n    returns (uint32[NUMBER_OF_CHOICES]) {\r\n        return currentVoteResults;\r\n    }\r\n\r\n    /**\r\n     * @notice Return number of votes for one of the options.\r\n     */\r\n    function votesPerChoice(uint8 option)\r\n    external\r\n    view\r\n    returns (uint32) {\r\n        require(option < numberOfChoices(), \"Choice must be less than contract configured numberOfChoices.\");\r\n        return currentVoteResults[option];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of possible choices, which can be voted for.\r\n     */\r\n    function numberOfChoices()\r\n    public\r\n    view\r\n    returns (uint8) {\r\n        // save as we only initialize array length in constructor\r\n        // and there we check it's never larger than uint8.\r\n        return uint8(currentVoteResults.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two uint40 numbers, throws on overflow.\r\n     */\r\n    function safeAdd40(uint40 _a, uint40 _b)\r\n    internal\r\n    pure\r\n    returns (uint40 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two uint32 numbers, throws on overflow.\r\n     */\r\n    function safeAdd32(uint32 _a, uint32 _b)\r\n    internal\r\n    pure\r\n    returns (uint32 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votersInfo\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"choice\",\"type\":\"uint8\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterName\",\"type\":\"string\"},{\"name\":\"givenVote\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisVotersName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfChoices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteCountTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisVoterExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisVotersChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"votesPerChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedVote\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"allVotes\",\"type\":\"uint32[4]\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Voting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6fffb76da1119106c36e499b29b2073f20c663fd3181c4bd610ac45b29f8c04"}]}