{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\npragma solidity ^0.5.3;\r\n\r\n/**\r\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.5.3;\r\n\r\n/**\r\n * Interface for the standard token.\r\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract EIP20Token {\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\npragma solidity ^0.5.3;\r\n\r\n/**\r\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal pure returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\npragma solidity ^0.5.3;\r\n\r\n// Interface for burning tokens\r\ncontract Burnable {\r\n  // @dev Destroys tokens for an account\r\n  // @param account Account whose tokens are destroyed\r\n  // @param value Amount of tokens to destroy\r\n  function burnTokens(address account, uint value) internal;\r\n  event Burned(address account, uint value);\r\n}\r\n\r\npragma solidity ^0.5.3;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n/**\r\n * Internal interface for the minting of tokens.\r\n */\r\ncontract Mintable {\r\n\r\n  /**\r\n   * @dev Mints tokens for an account\r\n   * This function should emit the Minted event.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal;\r\n\r\n  /** Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard token\r\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\r\n */\r\ncontract StandardToken is EIP20Token, Burnable, Mintable {\r\n  using SafeMath for uint;\r\n\r\n  uint private total_supply;\r\n  mapping(address => uint) private balances;\r\n  mapping(address => mapping (address => uint)) private allowed;\r\n\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    return total_supply;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint value) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param account The address whose balance is to be queried.\r\n   * @return An uint representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address account) public view returns (uint balance) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\r\n    uint allowance = allowed[from][msg.sender];\r\n\r\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\r\n    // require(value <= allowance);\r\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    allowed[from][msg.sender] = allowance.sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require (value == 0 || allowed[msg.sender][spender] == 0);\r\n\r\n    allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param account address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address account, address spender) public view returns (uint remaining) {\r\n    return allowed[account][spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][spender];\r\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\r\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][spender];\r\n\r\n      if (subtractedValue > oldVal) {\r\n          allowed[msg.sender][spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\r\n   */\r\n  function burnTokens(address account, uint value) internal {\r\n    balances[account] = balances[account].sub(value);\r\n    total_supply = total_supply.sub(value);\r\n    emit Transfer(account, address(0), value);\r\n    emit Burned(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal minting function.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal {\r\n    total_supply = total_supply.add(amount);\r\n    balances[receiver] = balances[receiver].add(amount);\r\n    emit Minted(receiver, amount);\r\n\r\n    // Beware: Address zero may be used for special transactions in a future fork.\r\n    // This will make the mint transaction appear in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    emit Transfer(address(0), receiver, amount);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title LeaxToken\r\n * @dev ERC20 Token implementation with burning capabilities\r\n */\r\ncontract LeaxToken is StandardToken {\r\n\r\n    string public constant name = \"LEAXEX\";\r\n    string public constant symbol = \"LXX\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant initial_supply = 21000000000 * (10 ** 18);\r\n    address public constant initial_holder = 0xDc29D066d85650887B5d2B860e2413B54c5f39B1;\r\n\r\n    constructor() public {\r\n        // Mint the entire supply for the initial holder\r\n        mintInternal(initial_holder, initial_supply);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows users to burn their own tokens\r\n     */\r\n    function burn(uint256 amount) public {\r\n        burnTokens(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_holder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LeaxToken","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b0795f70033bafbd6523a4219bc69678d2a72dd5af97c919801c53a625c161c1"}]}