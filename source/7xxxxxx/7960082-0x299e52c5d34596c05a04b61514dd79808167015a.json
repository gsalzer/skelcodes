{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TreasureHunt {\r\n  bool public isActive;\r\n  bytes32 hashedSecret;\r\n  address DGX_TOKEN_ADDRESS;\r\n\r\n  // this function runs when the contract is deployed\r\n  // it initializes the contract storage\r\n  constructor(bytes32 _hashedSecret, address _dgx_token_address) public {\r\n    // set the hashed secret\r\n    hashedSecret = _hashedSecret;\r\n\r\n    // set the DGX contract address\r\n    DGX_TOKEN_ADDRESS = _dgx_token_address;\r\n\r\n    // set the treasure hunt as active\r\n    isActive = true;\r\n  }\r\n\r\n  function unlockTreasure(bytes32 _secret) public {\r\n    // only if this treasure hunt is active\r\n    require(isActive, \"treasure inactive\");\r\n\r\n    // make sure the keccak256 hash of the _secret\r\n    // matches the hashedSecret\r\n    require(keccak256(abi.encodePacked(_secret)) == hashedSecret, \"incorrect secret\");\r\n\r\n    // transfer the DGX to the address\r\n    // that called this function\r\n    uint256 _dgxBalance = IERC20(DGX_TOKEN_ADDRESS).balanceOf(address(this));\r\n    require(IERC20(DGX_TOKEN_ADDRESS).transfer(msg.sender, _dgxBalance), \"could not transfer DGX\");\r\n\r\n    // set the treasure hunt to be inactive\r\n    isActive = false;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"unlockTreasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hashedSecret\",\"type\":\"bytes32\"},{\"name\":\"_dgx_token_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TreasureHunt","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"dacefb58ba5e4f7149b9762938ec46dea4ae9f48c8b62976715cc59afbde323c0000000000000000000000004f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf","Library":"","SwarmSource":"bzzr://c852a1a1ac46f78b9680656dc90347f93363e62b4a3630ba97fa6acae1b2a6a8"}]}