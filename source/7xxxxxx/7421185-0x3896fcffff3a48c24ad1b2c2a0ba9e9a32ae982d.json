{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n                                                           \r\n                                                           \r\nDDDDDDDDDDDDD                            AAA               \r\nD::::::::::::DDD                        A:::A              \r\nD:::::::::::::::DD                     A:::::A             \r\nDDD:::::DDDDD:::::D                   A:::::::A            \r\n  D:::::D    D:::::D                 A:::::::::A           \r\n  D:::::D     D:::::D               A:::::A:::::A          \r\n  D:::::D     D:::::D              A:::::A A:::::A         \r\n  D:::::D     D:::::D             A:::::A   A:::::A        \r\n  D:::::D     D:::::D            A:::::A     A:::::A       \r\n  D:::::D     D:::::D           A:::::AAAAAAAAA:::::A      \r\n  D:::::D     D:::::D          A:::::::::::::::::::::A     \r\n  D:::::D    D:::::D          A:::::AAAAAAAAAAAAA:::::A    \r\nDDD:::::DDDDD:::::D          A:::::A             A:::::A   \r\nD:::::::::::::::DD          A:::::A               A:::::A  \r\nD::::::::::::DDD           A:::::A                 A:::::A \r\nDDDDDDDDDDDDD             AAAAAAA                   AAAAAAA\r\n                                                           \r\n                                                           \r\n                                                           \r\n// ----------------------------------------------------------------------------\r\n// 'Deposit Asset' Token contract with following functionalities:\r\n//      => Higher control of owner\r\n//      => SafeMath implementation \r\n//\r\n// Name             : Deposit Asset\r\n// Symbol           : DA\r\n// Decimals         : 15\r\n//\r\n// Copyright (c) 2018 FIRST DECENTRALIZED DEPOSIT PLATFORM ( https://fddp.io )\r\n// Contract designed by: EtherAuthority ( https://EtherAuthority.io ) \r\n// ----------------------------------------------------------------------------\r\n*/ \r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;  \r\n  mapping(address => uint256) public holdersWithdrows;\r\n  \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    uint256 _buffer = holdersWithdrows[msg.sender].mul(_value).div(balances[msg.sender]);\r\n    holdersWithdrows[_to] += _buffer;\r\n    holdersWithdrows[msg.sender] -= _buffer;\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n   \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    require(_value != 0);\r\n    uint256 _buffer = holdersWithdrows[msg.sender].mul(_value).div(balances[msg.sender]);\r\n    holdersWithdrows[_to] += _buffer;\r\n    holdersWithdrows[msg.sender] -= _buffer;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n/**\r\n * TheStocksTokens\r\n * \r\n */\r\ncontract DepositAsset is StandardToken {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public constant name = \"Deposit Asset\";\r\n  \r\n    string public constant symbol = \"DA\";\r\n  \r\n    uint32 public constant decimals = 6;\r\n\r\n    uint256 private _totalSupply = 200000000000000; // stocks\r\n    \r\n    uint public _totalWithdrow  = 0;\r\n    \r\n    uint public total_withdrows  = 0;\r\n    \r\n    constructor () public {\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n\tfunction totalSupply() public view returns(uint256 total) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    // get any ethers to contract\r\n    function () external payable {\r\n        if (msg.value == 1 wei) {\r\n            require(balances[msg.sender] > 0);\r\n        \r\n            uint256 _totalDevidends = devidendsOf(msg.sender);\r\n            holdersWithdrows[msg.sender] += _totalDevidends;\r\n            _totalWithdrow += _totalDevidends;\r\n            \r\n            msg.sender.transfer(_totalDevidends);\r\n        }\r\n    }\r\n    \r\n    /* TEST / function holdersWithdrowsOf(address _owner) public constant returns(uint256 hw) {\r\n        return holdersWithdrows[_owner];\r\n    }//*/\r\n    function getDevidends() public returns (bool success){\r\n        require(balances[msg.sender] > 0);\r\n        \r\n        uint256 _totalDevidends = devidendsOf(msg.sender);\r\n        holdersWithdrows[msg.sender] += _totalDevidends;\r\n        _totalWithdrow += _totalDevidends;\r\n        \r\n        msg.sender.transfer(_totalDevidends);\r\n        \r\n        return true;\r\n    }\r\n    function devidendsOf(address _owner) public view returns (uint256 devidends) {\r\n        address self = address(this);\r\n        // определить сумму всех начисленых средств, определить долю и отминусовать ранее снятые дивиденды\r\n        return self.balance\r\n            .add(_totalWithdrow)\r\n            .mul(balances[_owner])\r\n            .div(_totalSupply)\r\n            .sub(holdersWithdrows[_owner]);\r\n    }\r\n   \r\n    function fund() public payable returns(bool success) {\r\n        success = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"devidendsOf\",\"outputs\":[{\"name\":\"devidends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdersWithdrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalWithdrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDevidends\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DepositAsset","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a03d69d5f8a18c6225bde1ad11248d1c5bb13c221ba9daee6158c2c26cb83737"}]}