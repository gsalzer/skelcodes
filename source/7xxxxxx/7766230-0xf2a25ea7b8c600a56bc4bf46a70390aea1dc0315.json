{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CERC20NoBorrowInterface {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    address public underlying;\r\n}\r\n\r\ncontract CEtherNoBorrowInterface {\r\n    function mint() external payable;\r\n}\r\n\r\ncontract CTokenNoBorrowInterface {\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function exchangeRateStored() public view returns (uint);\r\n}\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\ncontract UniswapFactoryInterface {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\ncontract MyEIP20NonStandardInterface {\r\n    function transfer(address _to, uint256 _value) public;\r\n    function transferFrom(address _from, address _to, uint256 _value) public;\r\n}\r\n\r\ncontract MySafeToken {\r\n    function doTransferIn(address asset, address from, uint amount) internal {\r\n        MyEIP20NonStandardInterface token = MyEIP20NonStandardInterface(asset);\r\n        bool result;\r\n        token.transferFrom(from, address(this), amount);\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 {\r\n                result := not(0)\r\n            }\r\n            case 32 {\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(result);\r\n    }\r\n\r\n    function doTransferOut(address asset, address to, uint amount) internal {\r\n        MyEIP20NonStandardInterface token = MyEIP20NonStandardInterface(asset);\r\n        bool result;\r\n        token.transfer(to, amount);\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 {\r\n                result := not(0)\r\n            }\r\n            case 32 {\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(result);\r\n    }\r\n}\r\n\r\ncontract ProxyData {\r\n    address internal proxied;\r\n}\r\n\r\ncontract FundHeader {\r\n    address constant internal cEth = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    UniswapFactoryInterface constant internal uniswapFactory = UniswapFactoryInterface(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n}\r\n\r\ncontract FundData is ProxyData, FundHeader {\r\n    address public collateralOwner;\r\n    address public interestWithdrawer;\r\n    mapping(address => uint) public initialDepositCollateral;\r\n    address[] public markets;\r\n}\r\n\r\ncontract InterestOnlyWithdrawingSafe is FundData, MySafeToken {\r\n\r\n    // deposits\r\n    function depositEth() external payable {\r\n        require(msg.sender == collateralOwner && msg.value > 0);\r\n        CEtherNoBorrowInterface(cEth).mint.value(msg.value)();\r\n        initialDepositCollateral[cEth] = initialDepositCollateral[cEth] + msg.value;\r\n    }\r\n    function depositToken(CERC20NoBorrowInterface cErc20Depositing, uint amount) external payable {\r\n        require(msg.sender == collateralOwner && amount > 0);\r\n        doTransferIn(cErc20Depositing.underlying(), msg.sender, amount);\r\n        cErc20Depositing.mint(amount);\r\n        initialDepositCollateral[address(cErc20Depositing)] = initialDepositCollateral[address(cErc20Depositing)] + amount;\r\n    }\r\n\r\n    // interest receiver\r\n    // withdraw interest from each collateral type, sends each individually\r\n    function withdrawInterestEach() external {\r\n        require(msg.sender == interestWithdrawer);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\r\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\r\n                if (cTokenAddress != cEth) {\r\n                    doTransferOut(CERC20NoBorrowInterface(cTokenAddress).underlying(), msg.sender, balanceInterestAvailable);\r\n                } else {\r\n                    address(msg.sender).send(balanceInterestAvailable);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // uniswap each token interest to eth, withdraw eth\r\n    function withdrawInterestAsEth() external {\r\n        require(msg.sender == interestWithdrawer);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\r\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\r\n                if (cTokenAddress != cEth) {\r\n                    UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).tokenToEthSwapInput(balanceInterestAvailable, 1, block.timestamp+1);\r\n                }\r\n            }\r\n        }\r\n        address(msg.sender).send(address(this).balance);\r\n    }\r\n    // uniswap each token interest to eth, uniswap sum eth to withdraw-token\r\n    function withdrawInterestAsToken(address withdrawTokenAddress) external {\r\n        require(msg.sender == interestWithdrawer);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\r\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\r\n                if (cTokenAddress != cEth) {\r\n                    UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).tokenToEthSwapInput(balanceInterestAvailable, 1, block.timestamp+1);\r\n                }\r\n            }\r\n        }\r\n        UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).ethToTokenTransferInput.value(address(this).balance)(1, block.timestamp+1, msg.sender);\r\n    }\r\n\r\n    // owner\r\n    function withdrawAll() external {\r\n        require(msg.sender == collateralOwner);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                initialDepositCollateral[cTokenAddress] = 0;\r\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\r\n                if (markets[i] != cEth) {\r\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\r\n                    doTransferOut(underlying, msg.sender, IERC20(underlying).balanceOf(address(this)));\r\n                } else {\r\n                    address(msg.sender).send(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function withdrawAllAsEth() external {\r\n        require(msg.sender == collateralOwner);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                initialDepositCollateral[cTokenAddress] = 0;\r\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\r\n                if (markets[i] != cEth) {\r\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\r\n                    UniswapExchangeInterface(uniswapFactory.getExchange(underlying)).tokenToEthSwapInput(IERC20(underlying).balanceOf(address(this)), 1, block.timestamp+1);\r\n                }\r\n            }\r\n        }\r\n        address(msg.sender).send(address(this).balance);\r\n    }\r\n    function withdrawAllAsToken(address withdrawTokenAddress) external {\r\n        require(msg.sender == collateralOwner);\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            if (initialDepositCollateral[cTokenAddress] > 0) {\r\n                initialDepositCollateral[cTokenAddress] = 0;\r\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\r\n                if (markets[i] != cEth) {\r\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\r\n                    UniswapExchangeInterface(uniswapFactory.getExchange(underlying)).tokenToEthSwapInput(IERC20(underlying).balanceOf(address(this)), 1, block.timestamp+1);\r\n                }\r\n            }\r\n        }\r\n        UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).ethToTokenTransferInput.value(address(this).balance)(1, block.timestamp+1, msg.sender);\r\n    }\r\n\r\n    // views\r\n    function interestAvailableFromSingleToken(address cTokenAddress) public returns (uint) {\r\n        uint ethCanWithdraw = 0;\r\n        if (initialDepositCollateral[cTokenAddress] > 0) {\r\n            uint underlyingBalance = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this));\r\n            if (underlyingBalance < initialDepositCollateral[cTokenAddress]) {\r\n                return 0;\r\n            } else {\r\n                return underlyingBalance - initialDepositCollateral[cTokenAddress];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function interestAvailableAllTokensAsEth() public returns (uint) {\r\n        uint ethCanWithdraw = 0;\r\n        for (uint i=0; i < markets.length; i++) {\r\n            address cTokenAddress = markets[i];\r\n            uint interestAvailable = interestAvailableFromSingleToken(cTokenAddress);\r\n            if (interestAvailable == 0) {\r\n                continue;\r\n            }\r\n            if (cTokenAddress == cEth) {\r\n                ethCanWithdraw = ethCanWithdraw + interestAvailable;\r\n            } else {\r\n                ethCanWithdraw = ethCanWithdraw + UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).getTokenToEthInputPrice(interestAvailable);\r\n            }\r\n        }\r\n        return ethCanWithdraw;\r\n    }\r\n    function interestAvailableAsToken(address withdrawTokenAddress) external returns (uint) {\r\n        uint ethCanWithdraw = interestAvailableAllTokensAsEth();\r\n        if (ethCanWithdraw == 0) {\r\n            return 0;\r\n        } else {\r\n            return UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).getEthToTokenInputPrice(ethCanWithdraw);\r\n        }\r\n    }\r\n    function marketCount() external view returns (uint) {\r\n        return markets.length;\r\n    }\r\n\r\n    // owner backup/safty functions.\r\n    // TODO: dont allow duplicate markets.\r\n    // TODO: adding invalid markets can break recipient withdraw loop.\r\n    function enterNewMarkets(address[] calldata cTokens) external {\r\n        require(msg.sender == collateralOwner);\r\n        for (uint i=0; i < cTokens.length; i++) {\r\n            markets.push(cTokens[i]);\r\n            address underlying = CERC20NoBorrowInterface(cTokens[i]).underlying();\r\n            tokenAllowAll(underlying, cTokens[i]);\r\n            tokenAllowAll(underlying, uniswapFactory.getExchange(underlying));\r\n        }\r\n    }\r\n    function withdrawEth() external {\r\n        require(msg.sender == collateralOwner);\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    function returnTokenAmount(address asset, uint amount) external {\r\n        require(msg.sender == collateralOwner);\r\n        doTransferOut(asset, msg.sender, amount);\r\n    }\r\n    function transferCollateralOwner(address newOwner) external {\r\n        require(msg.sender == collateralOwner);\r\n        require(newOwner != address(0));\r\n        collateralOwner = newOwner;\r\n    }\r\n    function transferInterestWithdrawer(address newOwner) external {\r\n        require(msg.sender == interestWithdrawer || msg.sender == collateralOwner);\r\n        require(newOwner != address(0));\r\n        interestWithdrawer = newOwner;\r\n    }\r\n\r\n    // allow receive eth\r\n    function() external payable { }\r\n\r\n    // internal\r\n    function tokenAllowAll(address asset, address allowee) internal {\r\n        require(IERC20(asset).approve(allowee, uint(-1)));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"interestWithdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cErc20Depositing\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawTokenAddress\",\"type\":\"address\"}],\"name\":\"interestAvailableAsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferCollateralOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInterestAsEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllAsEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"interestAvailableAllTokensAsEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawInterestAsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawAllAsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterNewMarkets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferInterestWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialDepositCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInterestEach\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"interestAvailableFromSingleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"InterestOnlyWithdrawingSafe","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61d7a4bce370515faecbb632a4f54c3f19a36903eb601a3848e63f0967724f3c"}]}