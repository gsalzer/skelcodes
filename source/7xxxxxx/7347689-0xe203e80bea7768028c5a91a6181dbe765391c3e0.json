{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Permissions/RootPlatformAdministratorRole.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title RootPlatformAdministratorRole root user role mainly to manage other roles. */\r\ncontract RootPlatformAdministratorRole {\r\n    using Roles for Roles.Role;\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event RootPlatformAdministratorAdded(address indexed account);\r\n    event RootPlatformAdministratorRemoved(address indexed account);\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    Roles.Role private rootPlatformAdministrators;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor() internal {\r\n        _addRootPlatformAdministrator(msg.sender);\r\n    }\r\n\r\n///////////////////\r\n// Modifiers\r\n///////////////////\r\n\r\n    modifier onlyRootPlatformAdministrator() {\r\n        require(isRootPlatformAdministrator(msg.sender), \"no root PFadmin\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function isRootPlatformAdministrator(address account) public view returns (bool) {\r\n        return rootPlatformAdministrators.has(account);\r\n    }\r\n\r\n    function addRootPlatformAdministrator(address account) public onlyRootPlatformAdministrator {\r\n        _addRootPlatformAdministrator(account);\r\n    }\r\n\r\n    function renounceRootPlatformAdministrator() public {\r\n        _removeRootPlatformAdministrator(msg.sender);\r\n    }\r\n\r\n    function _addRootPlatformAdministrator(address account) internal {\r\n        rootPlatformAdministrators.add(account);\r\n        emit RootPlatformAdministratorAdded(account);\r\n    }\r\n\r\n    function _removeRootPlatformAdministrator(address account) internal {\r\n        rootPlatformAdministrators.remove(account);\r\n        emit RootPlatformAdministratorRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Permissions/AssetTokenAdministratorRole.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title AssetTokenAdministratorRole of AssetToken administrators. */\r\ncontract AssetTokenAdministratorRole is RootPlatformAdministratorRole {\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event AssetTokenAdministratorAdded(address indexed account);\r\n    event AssetTokenAdministratorRemoved(address indexed account);\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    Roles.Role private assetTokenAdministrators;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor() internal {\r\n        _addAssetTokenAdministrator(msg.sender);\r\n    }\r\n\r\n///////////////////\r\n// Modifiers\r\n///////////////////\r\n\r\n    modifier onlyAssetTokenAdministrator() {\r\n        require(isAssetTokenAdministrator(msg.sender), \"no ATadmin\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function isAssetTokenAdministrator(address _account) public view returns (bool) {\r\n        return assetTokenAdministrators.has(_account);\r\n    }\r\n\r\n    function addAssetTokenAdministrator(address _account) public onlyRootPlatformAdministrator {\r\n        _addAssetTokenAdministrator(_account);\r\n    }\r\n\r\n    function renounceAssetTokenAdministrator() public {\r\n        _removeAssetTokenAdministrator(msg.sender);\r\n    }\r\n\r\n    function _addAssetTokenAdministrator(address _account) internal {\r\n        assetTokenAdministrators.add(_account);\r\n        emit AssetTokenAdministratorAdded(_account);\r\n    }\r\n\r\n    function removeAssetTokenAdministrator(address _account) public onlyRootPlatformAdministrator {\r\n        _removeAssetTokenAdministrator(_account);\r\n    }\r\n\r\n    function _removeAssetTokenAdministrator(address _account) internal {\r\n        assetTokenAdministrators.remove(_account);\r\n        emit AssetTokenAdministratorRemoved(_account);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Permissions/At2CsConnectorRole.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title At2CsConnectorRole AssetToken to Crowdsale connector role. */\r\ncontract At2CsConnectorRole is RootPlatformAdministratorRole {\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event At2CsConnectorAdded(address indexed account);\r\n    event At2CsConnectorRemoved(address indexed account);\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    Roles.Role private at2csConnectors;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor() internal {\r\n        _addAt2CsConnector(msg.sender);\r\n    }\r\n\r\n///////////////////\r\n// Modifiers\r\n///////////////////\r\n\r\n    modifier onlyAt2CsConnector() {\r\n        require(isAt2CsConnector(msg.sender), \"no at2csAdmin\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function isAt2CsConnector(address _account) public view returns (bool) {\r\n        return at2csConnectors.has(_account);\r\n    }\r\n\r\n    function addAt2CsConnector(address _account) public onlyRootPlatformAdministrator {\r\n        _addAt2CsConnector(_account);\r\n    }\r\n\r\n    function renounceAt2CsConnector() public {\r\n        _removeAt2CsConnector(msg.sender);\r\n    }\r\n\r\n    function _addAt2CsConnector(address _account) internal {\r\n        at2csConnectors.add(_account);\r\n        emit At2CsConnectorAdded(_account);\r\n    }\r\n\r\n    function removeAt2CsConnector(address _account) public onlyRootPlatformAdministrator {\r\n        _removeAt2CsConnector(_account);\r\n    }\r\n\r\n    function _removeAt2CsConnector(address _account) internal {\r\n        at2csConnectors.remove(_account);\r\n        emit At2CsConnectorRemoved(_account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/controller/0_library/DSMathL.sol\r\n\r\n// fork from ds-math specifically my librarization fork: https://raw.githubusercontent.com/JohannesMayerConda/ds-math/master/contracts/DSMathL.sol\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nlibrary DSMathL {\r\n    function ds_add(uint x, uint y) public pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function ds_sub(uint x, uint y) public pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function ds_mul(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function ds_min(uint x, uint y) public pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function ds_max(uint x, uint y) public pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function ds_imin(int x, int y) public pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function ds_imax(int x, int y) public pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function ds_wmul(uint x, uint y) public pure returns (uint z) {\r\n        z = ds_add(ds_mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function ds_rmul(uint x, uint y) public pure returns (uint z) {\r\n        z = ds_add(ds_mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function ds_wdiv(uint x, uint y) public pure returns (uint z) {\r\n        z = ds_add(ds_mul(x, WAD), y / 2) / y;\r\n    }\r\n    function ds_rdiv(uint x, uint y) public pure returns (uint z) {\r\n        z = ds_add(ds_mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function ds_rpow(uint x, uint n) public pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = ds_rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = ds_rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Permissions/YourOwnable.sol\r\n\r\n// 1:1 copy of https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.1/contracts/ownership/Ownable.sol\r\n// except constructor that can instantly transfer ownership\r\n\r\ncontract YourOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor (address newOwner) public {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/controller/FeeTable/StandardFeeTable.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n/** @title StandardFeeTable contract to store fees via name (fees per platform for certain name). */\r\ncontract StandardFeeTable  is YourOwnable {\r\n    using SafeMath for uint256;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor (address newOwner) YourOwnable(newOwner) public {}\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    uint256 public defaultFee;\r\n\r\n    mapping (bytes32 => uint256) public feeFor;\r\n    mapping (bytes32 => bool) public isFeeDisabled;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Set default fee (when nothing else applies).\r\n    /// @param _defaultFee default fee value. Unit is WAD so fee 1 means value=1e18.\r\n    function setDefaultFee(uint256 _defaultFee) public onlyOwner {\r\n        defaultFee = _defaultFee;\r\n    }\r\n\r\n    /// @notice Set fee by name.\r\n    /// @param _feeName fee name.\r\n    /// @param _feeValue fee value. Unit is WAD so fee 1 means value=1e18.\r\n    function setFee(bytes32 _feeName, uint256 _feeValue) public onlyOwner {\r\n        feeFor[_feeName] = _feeValue;\r\n    }\r\n\r\n    /// @notice Enable or disable fee by name.\r\n    /// @param _feeName fee name.\r\n    /// @param _feeDisabled true if fee should be disabled.\r\n    function setFeeMode(bytes32 _feeName, bool _feeDisabled) public onlyOwner {\r\n        isFeeDisabled[_feeName] = _feeDisabled;\r\n    }\r\n\r\n    /// @notice Get standard fee (not overriden by special fee for specific AssetToken).\r\n    /// @param _feeName fee name.\r\n    /// @return fee value. Unit is WAD so fee 1 means value=1e18.\r\n    function getStandardFee(bytes32 _feeName) public view returns (uint256 _feeValue) {\r\n        if (isFeeDisabled[_feeName]) {\r\n            return 0;\r\n        }\r\n\r\n        if(feeFor[_feeName] == 0) {\r\n            return defaultFee;\r\n        }\r\n\r\n        return feeFor[_feeName];\r\n    }\r\n\r\n    /// @notice Get standard fee for amount in base unit.\r\n    /// @param _feeName fee name.\r\n    /// @param _amountInFeeBaseUnit amount in fee base unit (currently in unit tokens).\r\n    /// @return fee value. Unit is WAD (converted it).\r\n    function getStandardFeeFor(bytes32 _feeName, uint256 _amountInFeeBaseUnit) public view returns (uint256) {\r\n        //1000000000000000 is 0,001 as WAD\r\n        //example fee 0.001 for amount 3: 3 tokens * 1000000000000000 fee = 3000000000000000 (0.003)\r\n        return _amountInFeeBaseUnit.mul(getStandardFee(_feeName));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/FeeTable/FeeTable.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title FeeTable contract to store fees via name (fees per platform per assettoken for certain name). */\r\ncontract FeeTable is StandardFeeTable {\r\n    \r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor (address newOwner) StandardFeeTable(newOwner) public {}\r\n\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    // specialfee mapping feeName -> token -> fee\r\n    mapping (bytes32 => mapping (address => uint256)) public specialFeeFor;\r\n\r\n    // specialfee mapping feeName -> token -> isSet\r\n    mapping (bytes32 => mapping (address => bool)) public isSpecialFeeEnabled;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Set a special fee specifically for an AssetToken (higher or lower than normal fee).\r\n    /// @param _feeName fee name.\r\n    /// @param _regardingAssetToken regarding AssetToken.\r\n    /// @param _feeValue fee value. Unit is WAD so fee 1 means value=1e18.\r\n    function setSpecialFee(bytes32 _feeName, address _regardingAssetToken, uint256 _feeValue) public onlyOwner {\r\n        specialFeeFor[_feeName][_regardingAssetToken] = _feeValue;\r\n    }\r\n\r\n    /// @notice Enable or disable special fee.\r\n    /// @param _feeName fee name.\r\n    /// @param _regardingAssetToken regarding AssetToken.\r\n    /// @param _feeEnabled true to enable fee.\r\n    function setSpecialFeeMode(bytes32 _feeName, address _regardingAssetToken, bool _feeEnabled) public onlyOwner {\r\n        isSpecialFeeEnabled[_feeName][_regardingAssetToken] = _feeEnabled;\r\n    }\r\n\r\n    /// @notice Get fee by name.\r\n    /// @param _feeName fee name.\r\n    /// @param _regardingAssetToken regarding AssetToken.\r\n    /// @return fee value. Unit is WAD so fee 11 means value=1e18.\r\n    function getFee(bytes32 _feeName, address _regardingAssetToken) public view returns (uint256) {\r\n        if (isFeeDisabled[_feeName]) {\r\n            return 0;\r\n        }\r\n\r\n        if (isSpecialFeeEnabled[_feeName][_regardingAssetToken]) {\r\n            return specialFeeFor[_feeName][_regardingAssetToken];\r\n        }\r\n\r\n        return super.getStandardFee(_feeName);\r\n    }\r\n\r\n    /// @notice Get fee for amount in base unit.\r\n    /// @param _feeName fee name.\r\n    /// @param _regardingAssetToken regarding AssetToken.\r\n    /// @param _amountInFeeBaseUnit amount in fee base unit (currently in unit tokens).\r\n    /// @return fee value. Unit is WAD (converted it).\r\n    function getFeeFor(bytes32 _feeName, address _regardingAssetToken, uint256 _amountInFeeBaseUnit, address /*oracle*/)\r\n        public view returns (uint256) \r\n    {   \r\n        uint256 fee = getFee(_feeName, _regardingAssetToken);\r\n        \r\n        //1000000000000000 is 0,001 as WAD\r\n        //example fee 0.001 for amount 3: 3 tokens * 1000000000000000 fee = 3000000000000000 (0.003)\r\n        return _amountInFeeBaseUnit.mul(fee);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Permissions/WhitelistControlRole.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title WhitelistControlRole role to administrate whitelist and KYC. */\r\ncontract WhitelistControlRole is RootPlatformAdministratorRole {\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event WhitelistControlAdded(address indexed account);\r\n    event WhitelistControlRemoved(address indexed account);\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    Roles.Role private whitelistControllers;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor() internal {\r\n        _addWhitelistControl(msg.sender);\r\n    }\r\n\r\n///////////////////\r\n// Modifiers\r\n///////////////////\r\n\r\n    modifier onlyWhitelistControl() {\r\n        require(isWhitelistControl(msg.sender), \"no WLcontrol\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function isWhitelistControl(address account) public view returns (bool) {\r\n        return whitelistControllers.has(account);\r\n    }\r\n\r\n    function addWhitelistControl(address account) public onlyRootPlatformAdministrator {\r\n        _addWhitelistControl(account);\r\n    }\r\n\r\n    function _addWhitelistControl(address account) internal {\r\n        whitelistControllers.add(account);\r\n        emit WhitelistControlAdded(account);\r\n    }\r\n\r\n    function removeWhitelistControl(address account) public onlyRootPlatformAdministrator {\r\n        whitelistControllers.remove(account);\r\n        emit WhitelistControlRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/interface/IWhitelistAutoExtendExpirationExecutor.sol\r\n\r\ninterface IWhitelistAutoExtendExpirationExecutor {\r\n    function recheckIdentity(address _wallet, address _investorKey, address _issuer) external;\r\n}\r\n\r\n// File: contracts/controller/interface/IWhitelistAutoExtendExpirationCallback.sol\r\n\r\ninterface IWhitelistAutoExtendExpirationCallback {\r\n    function updateIdentity(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) external;\r\n}\r\n\r\n// File: contracts/controller/Whitelist/Whitelist.sol\r\n\r\n/** @title Whitelist stores whitelist information of investors like if and when they were KYC checked. */\r\ncontract Whitelist is WhitelistControlRole, IWhitelistAutoExtendExpirationCallback {\r\n    using SafeMath for uint256;\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    uint256 public expirationBlocks;\r\n    bool public expirationEnabled;\r\n    bool public autoExtendExpiration;\r\n    address public autoExtendExpirationContract;\r\n\r\n    mapping (address => bool) whitelistedWallet;\r\n    mapping (address => uint256) lastIdentityVerificationDate;\r\n    mapping (address => address) whitelistedWalletIssuer;\r\n    mapping (address => address) walletToInvestorKey;\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event WhitelistChanged(address indexed wallet, bool whitelisted, address investorKey, address issuer);\r\n    event ExpirationBlocksChanged(address initiator, uint256 addedBlocksSinceWhitelisting);\r\n    event ExpirationEnabled(address initiator, bool expirationEnabled);\r\n    event UpdatedIdentity(address initiator, address indexed wallet, bool whitelisted, address investorKey, address issuer);\r\n    event SetAutoExtendExpirationContract(address initiator, address expirationContract);\r\n    event UpdatedAutoExtendExpiration(address initiator, bool autoExtendEnabled);\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function getIssuer(address _whitelistedWallet) public view returns (address) {\r\n        return whitelistedWalletIssuer[_whitelistedWallet];\r\n    }\r\n\r\n    function getInvestorKey(address _wallet) public view returns (address) {\r\n        return walletToInvestorKey[_wallet];\r\n    }\r\n\r\n    function setWhitelisted(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) public onlyWhitelistControl {\r\n        whitelistedWallet[_wallet] = _isWhitelisted;\r\n        lastIdentityVerificationDate[_wallet] = block.number;\r\n        whitelistedWalletIssuer[_wallet] = _issuer;\r\n        assignWalletToInvestorKey(_wallet, _investorKey);\r\n\r\n        emit WhitelistChanged(_wallet, _isWhitelisted, _investorKey, _issuer);\r\n    }\r\n\r\n    function assignWalletToInvestorKey(address _wallet, address _investorKey) public onlyWhitelistControl {\r\n        walletToInvestorKey[_wallet] = _investorKey;\r\n    }\r\n\r\n    //note: no view keyword here because IWhitelistAutoExtendExpirationExecutor could change state via callback\r\n    function checkWhitelistedWallet(address _wallet) public returns (bool) {\r\n        if(autoExtendExpiration && isExpired(_wallet)) {\r\n            address investorKey = walletToInvestorKey[_wallet];\r\n            address issuer = whitelistedWalletIssuer[_wallet];\r\n            require(investorKey != address(0), \"expired, unknown identity\");\r\n\r\n            //IMPORTANT: reentrance hook. make sure calling contract is safe\r\n            IWhitelistAutoExtendExpirationExecutor(autoExtendExpirationContract).recheckIdentity(_wallet, investorKey, issuer);\r\n        }\r\n\r\n        require(!isExpired(_wallet), \"whitelist expired\");\r\n        require(whitelistedWallet[_wallet], \"not whitelisted\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function isWhitelistedWallet(address _wallet) public view returns (bool) {\r\n        if(isExpired(_wallet)) {\r\n            return false;\r\n        }\r\n\r\n        return whitelistedWallet[_wallet];\r\n    }\r\n\r\n    function isExpired(address _wallet) private view returns (bool) {\r\n        return expirationEnabled && block.number > lastIdentityVerificationDate[_wallet].add(expirationBlocks);\r\n    }\r\n\r\n    function blocksLeftUntilExpired(address _wallet) public view returns (uint256) {\r\n        require(expirationEnabled, \"expiration disabled\");\r\n\r\n        return lastIdentityVerificationDate[_wallet].add(expirationBlocks).sub(block.number);\r\n    }\r\n\r\n    function setExpirationBlocks(uint256 _addedBlocksSinceWhitelisting) public onlyRootPlatformAdministrator {\r\n        expirationBlocks = _addedBlocksSinceWhitelisting;\r\n\r\n        emit ExpirationBlocksChanged(msg.sender, _addedBlocksSinceWhitelisting);\r\n    }\r\n\r\n    function setExpirationEnabled(bool _isEnabled) public onlyRootPlatformAdministrator {\r\n        expirationEnabled = _isEnabled;\r\n\r\n        emit ExpirationEnabled(msg.sender, expirationEnabled);\r\n    }\r\n\r\n    function setAutoExtendExpirationContract(address _autoExtendContract) public onlyRootPlatformAdministrator {\r\n        autoExtendExpirationContract = _autoExtendContract;\r\n\r\n        emit SetAutoExtendExpirationContract(msg.sender, _autoExtendContract);\r\n    }\r\n\r\n    function setAutoExtendExpiration(bool _autoExtendEnabled) public onlyRootPlatformAdministrator {\r\n        autoExtendExpiration = _autoExtendEnabled;\r\n\r\n        emit UpdatedAutoExtendExpiration(msg.sender, _autoExtendEnabled);\r\n    }\r\n\r\n    function updateIdentity(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) public onlyWhitelistControl {\r\n        setWhitelisted(_wallet, _isWhitelisted, _investorKey, _issuer);\r\n\r\n        emit UpdatedIdentity(msg.sender, _wallet, _isWhitelisted, _investorKey, _issuer);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/interface/IExchangeRateOracle.sol\r\n\r\ncontract IExchangeRateOracle {\r\n    function resetCurrencyPair(address _currencyA, address _currencyB) public;\r\n\r\n    function configureCurrencyPair(address _currencyA, address _currencyB, uint256 maxNextUpdateInBlocks) public;\r\n\r\n    function setExchangeRate(address _currencyA, address _currencyB, uint256 _rateFromTo, uint256 _rateToFrom) public;\r\n    function getExchangeRate(address _currencyA, address _currencyB) public view returns (uint256);\r\n\r\n    function convert(address _currencyA, address _currencyB, uint256 _amount) public view returns (uint256);\r\n    function convertTT(bytes32 _currencyAText, bytes32 _currencyBText, uint256 _amount) public view returns (uint256);\r\n    function convertTA(bytes32 _currencyAText, address _currencyB, uint256 _amount) public view returns (uint256);\r\n    function convertAT(address _currencyA, bytes32 _currencyBText, uint256 _amount) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/controller/interfaces/IBasicAssetToken.sol\r\n\r\ninterface IBasicAssetToken {\r\n    //AssetToken specific\r\n    function isTokenAlive() external view returns (bool);\r\n\r\n    //Mintable\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function finishMinting() external returns (bool);\r\n}\r\n\r\n// File: contracts/controller/Permissions/StorageAdministratorRole.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title StorageAdministratorRole role to administrate generic storage. */\r\ncontract StorageAdministratorRole is RootPlatformAdministratorRole {\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event StorageAdministratorAdded(address indexed account);\r\n    event StorageAdministratorRemoved(address indexed account);\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    Roles.Role private storageAdministrators;\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor() internal {\r\n        _addStorageAdministrator(msg.sender);\r\n    }\r\n\r\n///////////////////\r\n// Modifiers\r\n///////////////////\r\n\r\n    modifier onlyStorageAdministrator() {\r\n        require(isStorageAdministrator(msg.sender), \"no SAdmin\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function isStorageAdministrator(address account) public view returns (bool) {\r\n        return storageAdministrators.has(account);\r\n    }\r\n\r\n    function addStorageAdministrator(address account) public onlyRootPlatformAdministrator {\r\n        _addStorageAdministrator(account);\r\n    }\r\n\r\n    function _addStorageAdministrator(address account) internal {\r\n        storageAdministrators.add(account);\r\n        emit StorageAdministratorAdded(account);\r\n    }\r\n\r\n    function removeStorageAdministrator(address account) public onlyRootPlatformAdministrator {\r\n        storageAdministrators.remove(account);\r\n        emit StorageAdministratorRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/UintStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title UintStorage uint storage. */\r\ncontract UintStorage is StorageAdministratorRole\r\n{\r\n\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => uint256) private uintStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setUint(bytes32 _name, uint256 _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setUint(_name, _value);\r\n    }\r\n\r\n    function getUint(bytes32 _name) \r\n        public view \r\n        returns (uint256) \r\n    {\r\n        return _getUint(_name);\r\n    }\r\n\r\n    function _setUint(bytes32 _name, uint256 _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            uintStorage[_name] = _value;\r\n        }\r\n    }\r\n\r\n    function _getUint(bytes32 _name) \r\n        private view \r\n        returns (uint256) \r\n    {\r\n        return uintStorage[_name];\r\n    }\r\n\r\n    function get2Uint(\r\n        bytes32 _name1, \r\n        bytes32 _name2) \r\n        public view \r\n        returns (uint256, uint256) \r\n    {\r\n        return (_getUint(_name1), _getUint(_name2));\r\n    }\r\n    \r\n    function get3Uint(\r\n        bytes32 _name1, \r\n        bytes32 _name2, \r\n        bytes32 _name3) \r\n        public view \r\n        returns (uint256, uint256, uint256) \r\n    {\r\n        return (_getUint(_name1), _getUint(_name2), _getUint(_name3));\r\n    }\r\n\r\n    function get4Uint(\r\n        bytes32 _name1, \r\n        bytes32 _name2, \r\n        bytes32 _name3, \r\n        bytes32 _name4) \r\n        public view \r\n        returns (uint256, uint256, uint256, uint256) \r\n    {\r\n        return (_getUint(_name1), _getUint(_name2), _getUint(_name3), _getUint(_name4));\r\n    }\r\n\r\n    function get5Uint(\r\n        bytes32 _name1, \r\n        bytes32 _name2, \r\n        bytes32 _name3, \r\n        bytes32 _name4, \r\n        bytes32 _name5) \r\n        public view \r\n        returns (uint256, uint256, uint256, uint256, uint256) \r\n    {\r\n        return (_getUint(_name1), \r\n            _getUint(_name2), \r\n            _getUint(_name3), \r\n            _getUint(_name4), \r\n            _getUint(_name5));\r\n    }\r\n\r\n    function set2Uint(\r\n        bytes32 _name1, uint256 _value1, \r\n        bytes32 _name2, uint256 _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setUint(_name1, _value1);\r\n        _setUint(_name2, _value2);\r\n    }\r\n\r\n    function set3Uint(\r\n        bytes32 _name1, uint256 _value1, \r\n        bytes32 _name2, uint256 _value2,\r\n        bytes32 _name3, uint256 _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setUint(_name1, _value1);\r\n        _setUint(_name2, _value2);\r\n        _setUint(_name3, _value3);\r\n    }\r\n\r\n    function set4Uint(\r\n        bytes32 _name1, uint256 _value1, \r\n        bytes32 _name2, uint256 _value2,\r\n        bytes32 _name3, uint256 _value3,\r\n        bytes32 _name4, uint256 _value4)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setUint(_name1, _value1);\r\n        _setUint(_name2, _value2);\r\n        _setUint(_name3, _value3);\r\n        _setUint(_name4, _value4);\r\n    }\r\n\r\n    function set5Uint(\r\n        bytes32 _name1, uint256 _value1, \r\n        bytes32 _name2, uint256 _value2,\r\n        bytes32 _name3, uint256 _value3,\r\n        bytes32 _name4, uint256 _value4,\r\n        bytes32 _name5, uint256 _value5)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setUint(_name1, _value1);\r\n        _setUint(_name2, _value2);\r\n        _setUint(_name3, _value3);\r\n        _setUint(_name4, _value4);\r\n        _setUint(_name5, _value5);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/AddrStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title AddrStorage address storage. */\r\ncontract AddrStorage is StorageAdministratorRole\r\n{\r\n\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => address) private addrStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setAddr(bytes32 _name, address _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setAddr(_name, _value);\r\n    }\r\n\r\n    function getAddr(bytes32 _name) \r\n        public view \r\n        returns (address) \r\n    {\r\n        return _getAddr(_name);\r\n    }\r\n\r\n    function _setAddr(bytes32 _name, address _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            addrStorage[_name] = _value;\r\n        }\r\n    }\r\n\r\n    function _getAddr(bytes32 _name) \r\n        private view \r\n        returns (address) \r\n    {\r\n        return addrStorage[_name];\r\n    }\r\n\r\n    function get2Address(\r\n        bytes32 _name1, \r\n        bytes32 _name2) \r\n        public view \r\n        returns (address, address) \r\n    {\r\n        return (_getAddr(_name1), _getAddr(_name2));\r\n    }\r\n    \r\n    function get3Address(\r\n        bytes32 _name1, \r\n        bytes32 _name2, \r\n        bytes32 _name3) \r\n        public view \r\n        returns (address, address, address) \r\n    {\r\n        return (_getAddr(_name1), _getAddr(_name2), _getAddr(_name3));\r\n    }\r\n\r\n    function set2Address(\r\n        bytes32 _name1, address _value1, \r\n        bytes32 _name2, address _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr(_name1, _value1);\r\n        _setAddr(_name2, _value2);\r\n    }\r\n\r\n    function set3Address(\r\n        bytes32 _name1, address _value1, \r\n        bytes32 _name2, address _value2,\r\n        bytes32 _name3, address _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr(_name1, _value1);\r\n        _setAddr(_name2, _value2);\r\n        _setAddr(_name3, _value3);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/Addr2UintStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title Addr2UintStorage address to uint mapping storage. */\r\ncontract Addr2UintStorage is StorageAdministratorRole\r\n{\r\n    \r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => mapping (address => uint256)) private addr2UintStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setAddr2Uint(bytes32 _name, address _address, uint256 _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setAddr2Uint(_name, _address, _value);\r\n    }\r\n\r\n    function getAddr2Uint(bytes32 _name, address _address)\r\n        public view \r\n        returns (uint256) \r\n    {\r\n        return _getAddr2Uint(_name, _address);\r\n    }\r\n\r\n    function _setAddr2Uint(bytes32 _name, address _address, uint256 _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            addr2UintStorage[_name][_address] = _value;\r\n        }\r\n    }\r\n\r\n    function _getAddr2Uint(bytes32 _name, address _address)\r\n        private view \r\n        returns (uint256) \r\n    {\r\n        return addr2UintStorage[_name][_address];\r\n    }\r\n\r\n    function get2Addr2Uint(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2)\r\n        public view \r\n        returns (uint256, uint256) \r\n    {\r\n        return (_getAddr2Uint(_name1, _address1), \r\n            _getAddr2Uint(_name2, _address2));\r\n    }\r\n    \r\n    function get3Addr2Addr2Uint(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2,\r\n        bytes32 _name3, address _address3) \r\n        public view \r\n        returns (uint256, uint256, uint256) \r\n    {\r\n        return (_getAddr2Uint(_name1, _address1), \r\n            _getAddr2Uint(_name2, _address2), \r\n            _getAddr2Uint(_name3, _address3));\r\n    }\r\n\r\n    function set2Addr2Uint(\r\n        bytes32 _name1, address _address1, uint256 _value1, \r\n        bytes32 _name2, address _address2, uint256 _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Uint(_name1, _address1, _value1);\r\n        _setAddr2Uint(_name2, _address2, _value2);\r\n    }\r\n\r\n    function set3Addr2Uint(\r\n        bytes32 _name1, address _address1, uint256 _value1, \r\n        bytes32 _name2, address _address2, uint256 _value2,\r\n        bytes32 _name3, address _address3, uint256 _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Uint(_name1, _address1, _value1);\r\n        _setAddr2Uint(_name2, _address2, _value2);\r\n        _setAddr2Uint(_name3, _address3, _value3);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/Addr2AddrStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title Addr2AddrStorage address to address mapping storage. */\r\ncontract Addr2AddrStorage is StorageAdministratorRole\r\n{\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => mapping (address => address)) private addr2AddrStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setAddr2Addr(bytes32 _name, address _address, address _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setAddr2Addr(_name, _address, _value);\r\n    }\r\n\r\n    function getAddr2Addr(bytes32 _name, address _address)\r\n        public view \r\n        returns (address) \r\n    {\r\n        return _getAddr2Addr(_name, _address);\r\n    }\r\n\r\n    function _setAddr2Addr(bytes32 _name, address _address, address _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            addr2AddrStorage[_name][_address] = _value;\r\n        }\r\n    }\r\n\r\n    function _getAddr2Addr(bytes32 _name, address _address)\r\n        private view \r\n        returns (address) \r\n    {\r\n        return addr2AddrStorage[_name][_address];\r\n    }\r\n\r\n    function get2Addr2Addr(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2)\r\n        public view \r\n        returns (address, address) \r\n    {\r\n        return (_getAddr2Addr(_name1, _address1), \r\n            _getAddr2Addr(_name2, _address2));\r\n    }\r\n    \r\n    function get3Addr2Addr2Addr(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2,\r\n        bytes32 _name3, address _address3) \r\n        public view \r\n        returns (address, address, address) \r\n    {\r\n        return (_getAddr2Addr(_name1, _address1), \r\n            _getAddr2Addr(_name2, _address2), \r\n            _getAddr2Addr(_name3, _address3));\r\n    }\r\n\r\n    function set2Addr2Addr(\r\n        bytes32 _name1, address _address1, address _value1, \r\n        bytes32 _name2, address _address2, address _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Addr(_name1, _address1, _value1);\r\n        _setAddr2Addr(_name2, _address2, _value2);\r\n    }\r\n\r\n    function set3Addr2Addr(\r\n        bytes32 _name1, address _address1, address _value1, \r\n        bytes32 _name2, address _address2, address _value2,\r\n        bytes32 _name3, address _address3, address _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Addr(_name1, _address1, _value1);\r\n        _setAddr2Addr(_name2, _address2, _value2);\r\n        _setAddr2Addr(_name3, _address3, _value3);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/Addr2BoolStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title Addr2BoolStorage address to address mapping storage. */\r\ncontract Addr2BoolStorage is StorageAdministratorRole\r\n{\r\n    \r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => mapping (address => bool)) private addr2BoolStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setAddr2Bool(bytes32 _name, address _address, bool _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setAddr2Bool(_name, _address, _value);\r\n    }\r\n\r\n    function getAddr2Bool(bytes32 _name, address _address)\r\n        public view  \r\n        returns (bool) \r\n    {\r\n        return _getAddr2Bool(_name, _address);\r\n    }\r\n\r\n    function _setAddr2Bool(bytes32 _name, address _address, bool _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            addr2BoolStorage[_name][_address] = _value;\r\n        }\r\n    }\r\n\r\n    function _getAddr2Bool(bytes32 _name, address _address)\r\n        private view \r\n        returns (bool) \r\n    {\r\n        return addr2BoolStorage[_name][_address];\r\n    }\r\n\r\n    function get2Addr2Bool(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2)\r\n        public view \r\n        returns (bool, bool) \r\n    {\r\n        return (_getAddr2Bool(_name1, _address1), \r\n            _getAddr2Bool(_name2, _address2));\r\n    }\r\n    \r\n    function get3Address2Address2Bool(\r\n        bytes32 _name1, address _address1,\r\n        bytes32 _name2, address _address2,\r\n        bytes32 _name3, address _address3) \r\n        public view \r\n        returns (bool, bool, bool) \r\n    {\r\n        return (_getAddr2Bool(_name1, _address1), \r\n            _getAddr2Bool(_name2, _address2), \r\n            _getAddr2Bool(_name3, _address3));\r\n    }\r\n\r\n    function set2Address2Bool(\r\n        bytes32 _name1, address _address1, bool _value1, \r\n        bytes32 _name2, address _address2, bool _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Bool(_name1, _address1, _value1);\r\n        _setAddr2Bool(_name2, _address2, _value2);\r\n    }\r\n\r\n    function set3Address2Bool(\r\n        bytes32 _name1, address _address1, bool _value1, \r\n        bytes32 _name2, address _address2, bool _value2,\r\n        bytes32 _name3, address _address3, bool _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setAddr2Bool(_name1, _address1, _value1);\r\n        _setAddr2Bool(_name2, _address2, _value2);\r\n        _setAddr2Bool(_name3, _address3, _value3);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/BytesStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title BytesStorage bytes storage. */\r\ncontract BytesStorage is StorageAdministratorRole\r\n{\r\n\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => bytes32) private bytesStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function setBytes(bytes32 _name, bytes32 _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        return _setBytes(_name, _value);\r\n    }\r\n\r\n    function getBytes(bytes32 _name) \r\n        public view \r\n        returns (bytes32) \r\n    {\r\n        return _getBytes(_name);\r\n    }\r\n\r\n    function _setBytes(bytes32 _name, bytes32 _value)\r\n        private \r\n    {\r\n        if(_name != \"\") {\r\n            bytesStorage[_name] = _value;\r\n        }\r\n    }\r\n\r\n    function _getBytes(bytes32 _name) \r\n        private view \r\n        returns (bytes32) \r\n    {\r\n        return bytesStorage[_name];\r\n    }\r\n\r\n    function get2Bytes(\r\n        bytes32 _name1, \r\n        bytes32 _name2) \r\n        public view \r\n        returns (bytes32, bytes32) \r\n    {\r\n        return (_getBytes(_name1), _getBytes(_name2));\r\n    }\r\n    \r\n    function get3Bytes(\r\n        bytes32 _name1, \r\n        bytes32 _name2, \r\n        bytes32 _name3) \r\n        public view \r\n        returns (bytes32, bytes32, bytes32) \r\n    {\r\n        return (_getBytes(_name1), _getBytes(_name2), _getBytes(_name3));\r\n    }\r\n\r\n    function set2Bytes(\r\n        bytes32 _name1, bytes32 _value1, \r\n        bytes32 _name2, bytes32 _value2)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setBytes(_name1, _value1);\r\n        _setBytes(_name2, _value2);\r\n    }\r\n\r\n    function set3Bytes(\r\n        bytes32 _name1, bytes32 _value1, \r\n        bytes32 _name2, bytes32 _value2,\r\n        bytes32 _name3, bytes32 _value3)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        _setBytes(_name1, _value1);\r\n        _setBytes(_name2, _value2);\r\n        _setBytes(_name3, _value3);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/Addr2AddrArrStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title Addr2AddrArrStorage address to address array mapping storage. */\r\ncontract Addr2AddrArrStorage is StorageAdministratorRole\r\n{\r\n\r\n///////////////////\r\n// Mappings\r\n///////////////////\r\n\r\n    mapping (bytes32 => mapping (address => address[])) private addr2AddrArrStorage;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function addToAddr2AddrArr(bytes32 _name, address _address, address _value)\r\n        public \r\n        onlyStorageAdministrator \r\n    {\r\n        addr2AddrArrStorage[_name][_address].push(_value);\r\n    }\r\n\r\n    function getAddr2AddrArr(bytes32 _name, address _address)\r\n        public view \r\n        returns (address[] memory) \r\n    {\r\n        return addr2AddrArrStorage[_name][_address];\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/storagetypes/StorageHolder.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** @title StorageHolder holds the fine-grained generic storage functions. */\r\ncontract StorageHolder is \r\n    UintStorage,\r\n    BytesStorage,\r\n    AddrStorage,\r\n    Addr2UintStorage,\r\n    Addr2BoolStorage,\r\n    Addr2AddrStorage,\r\n    Addr2AddrArrStorage\r\n{\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function getMixedUBA(bytes32 _uintName, bytes32 _bytesName, bytes32 _addressName) \r\n        public view\r\n        returns (uint256, bytes32, address) \r\n    {\r\n        return (getUint(_uintName), getBytes(_bytesName), getAddr(_addressName));\r\n    }\r\n\r\n    function getMixedMapA2UA2BA2A(\r\n        bytes32 _a2uName, \r\n        address _a2uAddress, \r\n        bytes32 _a2bName, \r\n        address _a2bAddress, \r\n        bytes32 _a2aName, \r\n        address _a2aAddress)\r\n        public view\r\n        returns (uint256, bool, address) \r\n    {\r\n        return (getAddr2Uint(_a2uName, _a2uAddress), \r\n            getAddr2Bool(_a2bName, _a2bAddress), \r\n            getAddr2Addr(_a2aName, _a2aAddress));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Storage/AT2CSStorage.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/** @title AT2CSStorage AssetToken to Crowdsale storage (that is upgradeable). */\r\ncontract AT2CSStorage is StorageAdministratorRole {\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor(address controllerStorage) public {\r\n        storageHolder = StorageHolder(controllerStorage);\r\n    }\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    StorageHolder storageHolder;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    function getAssetTokenOfCrowdsale(address _crowdsale) public view returns (address) {\r\n        return storageHolder.getAddr2Addr(\"cs2at\", _crowdsale);\r\n    }\r\n\r\n    function getRateFromCrowdsale(address _crowdsale) public view returns (uint256) {\r\n        address assetToken = storageHolder.getAddr2Addr(\"cs2at\", _crowdsale);\r\n        return getRateFromAssetToken(assetToken);\r\n    }\r\n\r\n    function getRateFromAssetToken(address _assetToken) public view returns (uint256) {\r\n        require(_assetToken != address(0), \"rate assetTokenIs0\");\r\n        return storageHolder.getAddr2Uint(\"rate\", _assetToken);\r\n    }\r\n\r\n    function getAssetTokenOwnerWalletFromCrowdsale(address _crowdsale) public view returns (address) {\r\n        address assetToken = storageHolder.getAddr2Addr(\"cs2at\", _crowdsale);\r\n        return getAssetTokenOwnerWalletFromAssetToken(assetToken);\r\n    }\r\n\r\n    function getAssetTokenOwnerWalletFromAssetToken(address _assetToken) public view returns (address) {\r\n        return storageHolder.getAddr2Addr(\"at2wallet\", _assetToken);\r\n    }\r\n\r\n    function getAssetTokensOf(address _wallet) public view returns (address[] memory) {\r\n        return storageHolder.getAddr2AddrArr(\"wallet2AT\", _wallet);\r\n    }\r\n\r\n    function isAssignedCrowdsale(address _crowdsale) public view returns (bool) {\r\n        return storageHolder.getAddr2Bool(\"isCS\", _crowdsale);\r\n    }\r\n\r\n    function isTrustedAssetTokenRegistered(address _assetToken) public view returns (bool) {\r\n        return storageHolder.getAddr2Bool(\"trustedAT\", _assetToken);\r\n    }\r\n\r\n    function isTrustedAssetTokenActive(address _assetToken) public view returns (bool) {\r\n        return storageHolder.getAddr2Bool(\"ATactive\", _assetToken);\r\n    }\r\n\r\n    function checkTrustedAssetToken(address _assetToken) public view returns (bool) {\r\n        require(storageHolder.getAddr2Bool(\"ATactive\", _assetToken), \"not trusted AT\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function checkTrustedCrowdsaleInternal(address _crowdsale) public view returns (bool) {\r\n        address _assetTokenAddress = storageHolder.getAddr2Addr(\"cs2at\", _crowdsale);\r\n        require(storageHolder.getAddr2Bool(\"isCS\", _crowdsale), \"not registered CS\");\r\n        require(checkTrustedAssetToken(_assetTokenAddress), \"not trusted AT\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeActiveTrustedAssetToken(address _assetToken, bool _active) public onlyStorageAdministrator {\r\n        storageHolder.setAddr2Bool(\"ATactive\", _assetToken, _active);\r\n    }\r\n\r\n    function addTrustedAssetTokenInternal(address _ownerWallet, address _assetToken, uint256 _rate) public onlyStorageAdministrator {\r\n        require(!storageHolder.getAddr2Bool(\"trustedAT\", _assetToken), \"exists\");\r\n        require(ERC20Detailed(_assetToken).decimals() == 0, \"decimal not 0\");\r\n\r\n        storageHolder.setAddr2Bool(\"trustedAT\", _assetToken, true);\r\n        storageHolder.setAddr2Bool(\"ATactive\", _assetToken, true);\r\n        storageHolder.addToAddr2AddrArr(\"wallet2AT\", _ownerWallet, _assetToken);\r\n        storageHolder.setAddr2Addr(\"at2wallet\", _assetToken, _ownerWallet);\r\n        storageHolder.setAddr2Uint(\"rate\", _assetToken, _rate);\r\n    }\r\n\r\n    function assignCrowdsale(address _assetToken, address _crowdsale) public onlyStorageAdministrator {\r\n        require(storageHolder.getAddr2Bool(\"trustedAT\", _assetToken), \"no AT\");\r\n        require(!storageHolder.getAddr2Bool(\"isCS\", _crowdsale), \"is assigned\");\r\n        require(IBasicAssetToken(_assetToken).isTokenAlive(), \"not alive\");\r\n        require(ERC20Detailed(_assetToken).decimals() == 0, \"decimal not 0\");\r\n        \r\n        storageHolder.setAddr2Bool(\"isCS\", _crowdsale, true);\r\n        storageHolder.setAddr2Addr(\"cs2at\", _crowdsale, _assetToken);\r\n    }\r\n\r\n    function setAssetTokenRate(address _assetToken, uint256 _rate) public onlyStorageAdministrator {\r\n        storageHolder.setAddr2Uint(\"rate\", _assetToken, _rate);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/0_library/ControllerL.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** @title ControllerL library. */\r\nlibrary ControllerL {\r\n    using SafeMath for uint256;\r\n\r\n///////////////////\r\n// Structs\r\n///////////////////\r\n\r\n    struct Data {\r\n        // global flag fees enabled\r\n        bool feesEnabled;\r\n\r\n        // global flag whitelist enabled\r\n        bool whitelistEnabled;\r\n\r\n        // address of the crwd token (for fees etc.)\r\n        address crwdToken;\r\n\r\n        // root platform wallet (receives fees according to it's FeeTable)\r\n        address rootPlatformAddress;\r\n\r\n        // address of ExchangeRateOracle (converts e.g. ETH to EUR and vice versa)\r\n        address exchangeRateOracle;\r\n\r\n        // the address of the whitelist contract\r\n        address whitelist;\r\n\r\n        // the generic storage contract\r\n        AT2CSStorage store;\r\n\r\n        // global flag to prevent new AssetToken or crowdsales to be accepted (e.g. after upgrade).\r\n        bool blockNew;\r\n\r\n        // mapping of platform addresses that are trusted\r\n        mapping ( address => bool ) trustedPlatform; //note: not easily upgradeable\r\n\r\n        // mapping of platform addresses that are trusted\r\n        mapping ( address => bool ) onceTrustedPlatform; //note: not easily upgradeable\r\n\r\n        // mapping of crowdsale to platform wallet\r\n        mapping ( address => address ) crowdsaleToPlatform; //note: not easily upgradeable\r\n\r\n        // mapping from platform address to FeeTable\r\n        mapping ( address => address ) platformToFeeTable; //note: not easily upgradeable\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @dev Contant point multiplier because no decimals.\r\n    function pointMultiplier() private pure returns (uint256) {\r\n        return 1e18;\r\n    }\r\n\r\n    /// @notice Address of generic storage (for upgradability).\r\n    function getStorageAddress(Data storage _self) public view returns (address) {\r\n        return address(_self.store);\r\n    }\r\n\r\n    /// @notice Assign generic storage (for upgradability).\r\n    /// @param _storage storage address.\r\n    function assignStore(Data storage _self, address _storage) public {\r\n        _self.store = AT2CSStorage(_storage);\r\n    }\r\n\r\n    /// @notice Get FeeTable for platform.\r\n    /// @param _platform platform to find FeeTable for.\r\n    /// @return address of FeeTable of platform.\r\n    function getFeeTableAddressForPlatform(Data storage _self, address _platform) public view returns (address) {\r\n        return _self.platformToFeeTable[_platform];\r\n    }\r\n\r\n    /// @notice Get FeeTable for platform.\r\n    /// @param _platform platform to find FeeTable for.\r\n    /// @return address of FeeTable of platform.\r\n    function getFeeTableForPlatform(Data storage _self, address _platform) private view returns (FeeTable) {\r\n        return FeeTable(_self.platformToFeeTable[_platform]);\r\n    }\r\n\r\n    /// @notice Set exchange rate oracle address.\r\n    /// @param _oracleAddress the address of the ExchangeRateOracle.\r\n    function setExchangeRateOracle(Data storage _self, address _oracleAddress) public {\r\n        _self.exchangeRateOracle = _oracleAddress;\r\n\r\n        emit ExchangeRateOracleSet(msg.sender, _oracleAddress);\r\n    }\r\n\r\n    /// @notice Check if a wallet is whitelisted or fail. Also considers auto extend (if enabled).\r\n    /// @param _wallet the wallet to check.\r\n    function checkWhitelistedWallet(Data storage _self, address _wallet) public returns (bool) {\r\n        require(Whitelist(_self.whitelist).checkWhitelistedWallet(_wallet), \"not whitelist\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Check if a wallet is whitelisted.\r\n    /// @param _wallet the wallet to check.\r\n    /// @return true if whitelisted.\r\n    function isWhitelistedWallet(Data storage _self, address _wallet) public view returns (bool) {\r\n        return Whitelist(_self.whitelist).isWhitelistedWallet(_wallet);\r\n    }\r\n\r\n    /// @notice Convert eth amount into base currency (EUR), apply exchange rate via oracle, apply rate for AssetToken.\r\n    /// @param _crowdsale the crowdsale address.\r\n    /// @param _amountInWei the amount desired to be converted into tokens.\r\n    function convertEthToEurApplyRateGetTokenAmountFromCrowdsale(\r\n        Data storage _self, \r\n        address _crowdsale,\r\n        uint256 _amountInWei) \r\n        public view returns (uint256 _effectiveTokensNoDecimals, uint256 _overpaidEthWhenZeroDecimals)\r\n    {\r\n        uint256 amountInEur = convertEthToEur(_self, _amountInWei);\r\n        uint256 tokens = DSMathL.ds_wmul(amountInEur, _self.store.getRateFromCrowdsale(_crowdsale));\r\n\r\n        _effectiveTokensNoDecimals = tokens.div(pointMultiplier());\r\n        _overpaidEthWhenZeroDecimals = convertEurToEth(_self, DSMathL.ds_wdiv(tokens.sub(_effectiveTokensNoDecimals.mul(pointMultiplier())), _self.store.getRateFromCrowdsale(_crowdsale)));\r\n\r\n        return (_effectiveTokensNoDecimals, _overpaidEthWhenZeroDecimals);\r\n    }\r\n\r\n    /// @notice Checks if a crowdsale is trusted or fail.\r\n    /// @param _crowdsale the address of the crowdsale.\r\n    /// @return true if trusted.\r\n    function checkTrustedCrowdsale(Data storage _self, address _crowdsale) public view returns (bool) {\r\n        require(checkTrustedPlatform(_self, _self.crowdsaleToPlatform[_crowdsale]), \"not trusted PF0\");\r\n        require(_self.store.checkTrustedCrowdsaleInternal(_crowdsale), \"not trusted CS1\");\r\n\r\n        return true;   \r\n    }\r\n\r\n    /// @notice Checks if a AssetToken is trusted or fail.\r\n    /// @param _assetToken the address of the AssetToken.\r\n    /// @return true if trusted.\r\n    function checkTrustedAssetToken(Data storage _self, address _assetToken) public view returns (bool) {\r\n        //here just a minimal check for active (simple check on transfer).\r\n        require(_self.store.checkTrustedAssetToken(_assetToken), \"untrusted AT\");\r\n\r\n        return true;   \r\n    }\r\n\r\n    /// @notice Checks if a platform is certified or fail.\r\n    /// @param _platformWallet wallet of platform.\r\n    /// @return true if trusted.\r\n    function checkTrustedPlatform(Data storage _self, address _platformWallet) public view returns (bool) {\r\n        require(isTrustedPlatform(_self, _platformWallet), \"not trusted PF3\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Checks if a platform is certified.\r\n    /// @param _platformWallet wallet of platform.\r\n    /// @return true if certified.\r\n    function isTrustedPlatform(Data storage _self, address _platformWallet) public view returns (bool) {\r\n        return _self.trustedPlatform[_platformWallet];\r\n    }\r\n\r\n    /// @notice Add trusted AssetToken.\r\n    /// @param _ownerWallet requires CRWD for fees, receives ETH on successful campaign.\r\n    /// @param _rate the rate of tokens per basecurrency (currently EUR).\r\n    function addTrustedAssetToken(Data storage _self, address _ownerWallet, address _assetToken, uint256 _rate) public {\r\n        require(!_self.blockNew, \"blocked. newest version?\");\r\n\r\n        _self.store.addTrustedAssetTokenInternal(_ownerWallet, _assetToken, _rate);\r\n\r\n        emit AssetTokenAdded(msg.sender, _ownerWallet, _assetToken, _rate);\r\n    }\r\n\r\n    /// @notice assign a crowdsale to an AssetToken.\r\n    /// @param _assetToken the AssetToken being sold.\r\n    /// @param _crowdsale the crowdsale that takes ETH (if enabled) and triggers assignment of tokens.\r\n    /// @param _platformWallet the wallet of the platform. Fees are paid to this address.\r\n    function assignCrowdsale(Data storage _self, address _assetToken, address _crowdsale, address _platformWallet) public {\r\n        require(!_self.blockNew, \"blocked. newest version?\");\r\n        checkTrustedPlatform(_self, _platformWallet);\r\n        _self.store.assignCrowdsale(_assetToken, _crowdsale);\r\n        _self.crowdsaleToPlatform[_crowdsale] = _platformWallet;\r\n\r\n        emit CrowdsaleAssigned(msg.sender, _assetToken, _crowdsale, _platformWallet);\r\n    }\r\n\r\n    /// @notice Can change the state of an AssetToken (e.g. blacklist for legal reasons)\r\n    /// @param _assetToken the AssetToken to change state.\r\n    /// @param _active the state. True means active.\r\n    /// @return True if successful.\r\n    function changeActiveTrustedAssetToken(Data storage _self, address _assetToken, bool _active) public returns (bool) {\r\n        _self.store.changeActiveTrustedAssetToken(_assetToken, _active);\r\n        emit AssetTokenChangedActive(msg.sender, _assetToken, _active);\r\n    }\r\n\r\n    /// @notice Function to call on buy request.\r\n    /// @param _to beneficiary of tokens.\r\n    /// @param _amountInWei the invested ETH amount (unit WEI).\r\n    function buyFromCrowdsale(\r\n        Data storage _self, \r\n        address _to, \r\n        uint256 _amountInWei) \r\n        public returns (uint256 _tokensCreated, uint256 _overpaidRefund)\r\n    {\r\n        (uint256 effectiveTokensNoDecimals, uint256 overpaidEth) = convertEthToEurApplyRateGetTokenAmountFromCrowdsale(\r\n            _self, \r\n            msg.sender, \r\n            _amountInWei);\r\n\r\n        checkValidTokenAssignmentFromCrowdsale(_self, _to);\r\n        payFeeFromCrowdsale(_self, effectiveTokensNoDecimals);\r\n        _tokensCreated = doTokenAssignment(_self, _to, effectiveTokensNoDecimals, msg.sender);\r\n\r\n        return (_tokensCreated, overpaidEth);\r\n    }\r\n\r\n    /// @notice Assign tokens.\r\n    /// @dev Pure assignment without e.g. rate calculation.\r\n    /// @param _to beneficiary of tokens.\r\n    /// @param _tokensToMint amount of tokens beneficiary receives.\r\n    /// @return amount of tokens being created.\r\n    function assignFromCrowdsale(Data storage _self, address _to, uint256 _tokensToMint) public returns (uint256 _tokensCreated) {\r\n        checkValidTokenAssignmentFromCrowdsale(_self, _to);\r\n        payFeeFromCrowdsale(_self, _tokensToMint);\r\n\r\n        _tokensCreated = doTokenAssignment(_self, _to, _tokensToMint, msg.sender);\r\n\r\n        return _tokensCreated;\r\n    }\r\n\r\n    /// @dev Token assignment logic.\r\n    /// @param _to beneficiary of tokens.\r\n    /// @param _tokensToMint amount of tokens beneficiary receives.\r\n    /// @param _crowdsale being used.\r\n    /// @return amount of tokens being created.\r\n    function doTokenAssignment(\r\n        Data storage _self, \r\n        address _to, \r\n        uint256 _tokensToMint, \r\n        address _crowdsale) \r\n        private returns \r\n        (uint256 _tokensCreated)\r\n    {\r\n        address assetToken = _self.store.getAssetTokenOfCrowdsale(_crowdsale);\r\n    \r\n        require(assetToken != address(0), \"assetTokenIs0\");\r\n        ERC20Mintable(assetToken).mint(_to, _tokensToMint);\r\n\r\n        return _tokensToMint;\r\n    }\r\n\r\n    /// @notice Pay fee on calls from crowdsale.\r\n    /// @param _tokensToMint tokens being created.\r\n    function payFeeFromCrowdsale(Data storage _self, uint256 _tokensToMint) private {\r\n        if (_self.feesEnabled) {\r\n            address ownerAssetTokenWallet = _self.store.getAssetTokenOwnerWalletFromCrowdsale(msg.sender);\r\n            payFeeKnowingCrowdsale(_self, msg.sender, ownerAssetTokenWallet, _tokensToMint, \"investorInvests\");\r\n        }\r\n    }\r\n\r\n    /// @notice Check if token assignment is valid and e.g. crowdsale is trusted and investor KYC checked.\r\n    /// @param _to beneficiary.\r\n    function checkValidTokenAssignmentFromCrowdsale(Data storage _self, address _to) private {\r\n        require(checkTrustedCrowdsale(_self, msg.sender), \"untrusted source1\");\r\n\r\n        if (_self.whitelistEnabled) {\r\n            checkWhitelistedWallet(_self, _to);\r\n        }\r\n    }\r\n\r\n    /// @notice Pay fee on controller call from Crowdsale.\r\n    /// @param _crowdsale the calling Crowdsale contract.\r\n    /// @param _ownerAssetToken the AssetToken of the owner.\r\n    /// @param _tokensToMint the tokens being created.\r\n    /// @param _feeName the name of the fee (key in mapping).\r\n    function payFeeKnowingCrowdsale(\r\n        Data storage _self, \r\n        address _crowdsale, \r\n        address _ownerAssetToken, \r\n        uint256 _tokensToMint, //tokensToMint requires precalculations and is base for fees\r\n        bytes32 _feeName)\r\n        private\r\n    {\r\n        address platform = _self.crowdsaleToPlatform[_crowdsale];\r\n\r\n        uint256 feePromilleRootPlatform = getFeeKnowingCrowdsale(\r\n            _self, \r\n            _crowdsale, \r\n            getFeeTableAddressForPlatform(_self, _self.rootPlatformAddress),\r\n            _tokensToMint, \r\n            false, \r\n            _feeName);\r\n\r\n        payWithCrwd(_self, _ownerAssetToken, _self.rootPlatformAddress, feePromilleRootPlatform);\r\n\r\n        if(platform != _self.rootPlatformAddress) {\r\n            address feeTable = getFeeTableAddressForPlatform(_self, platform);\r\n            require(feeTable != address(0), \"FeeTbl 0 addr\");\r\n            uint256 feePromillePlatform = getFeeKnowingCrowdsale(_self, _crowdsale, feeTable, _tokensToMint, false, _feeName);\r\n            payWithCrwd(_self, _ownerAssetToken, platform, feePromillePlatform);\r\n        }\r\n    }\r\n\r\n    /// @notice Pay fee on controller call from AssetToken.\r\n    /// @param _assetToken the calling AssetToken contract.\r\n    /// @param _initiator the initiator passed through as parameter by AssetToken.\r\n    /// @param _tokensToMint the tokens being handled.\r\n    /// @param _feeName the name of the fee (key in mapping).\r\n    function payFeeKnowingAssetToken(\r\n        Data storage _self, \r\n        address _assetToken, \r\n        address _initiator, \r\n        uint256 _tokensToMint, //tokensToMint requires precalculations and is base for fees\r\n        bytes32 _feeName) \r\n        public \r\n    {\r\n        uint256 feePromille = getFeeKnowingAssetToken(\r\n            _self, \r\n            _assetToken, \r\n            _initiator, \r\n            _tokensToMint, \r\n            _feeName);\r\n\r\n        payWithCrwd(_self, _initiator, _self.rootPlatformAddress, feePromille);\r\n    }\r\n\r\n    /// @dev this function in the end does the fee payment in CRWD.\r\n    function payWithCrwd(Data storage _self, address _from, address _to, uint256 _value) private {\r\n        if(_value > 0 && _from != _to) {\r\n            ERC20Mintable(_self.crwdToken).transferFrom(_from, _to, _value);\r\n            emit FeesPaid(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    /// @notice Current conversion of ETH to EUR via oracle.\r\n    /// @param _weiAmount the ETH amount (uint WEI).\r\n    /// @return amount converted in euro.\r\n    function convertEthToEur(Data storage _self, uint256 _weiAmount) public view returns (uint256) {\r\n        require(_self.exchangeRateOracle != address(0), \"no oracle\");\r\n        return IExchangeRateOracle(_self.exchangeRateOracle).convertTT(\"ETH\", \"EUR\", _weiAmount);\r\n    }\r\n\r\n    /// @notice Current conversion of EUR to ETH via oracle.\r\n    /// @param _eurAmount the EUR amount\r\n    /// @return amount converted in eth (formatted like WEI)\r\n    function convertEurToEth(Data storage _self, uint256 _eurAmount) public view returns (uint256) {\r\n        require(_self.exchangeRateOracle != address(0), \"no oracle\");\r\n        return IExchangeRateOracle(_self.exchangeRateOracle).convertTT(\"EUR\", \"ETH\", _eurAmount);\r\n    }\r\n\r\n    /// @notice Get fee that needs to be paid for certain Crowdsale and FeeName.\r\n    /// @param _crowdsale the Crowdsale being used.\r\n    /// @param _feeTableAddr the address of the feetable.\r\n    /// @param _amountInTokensOrEth the amount in tokens or pure ETH when conversion parameter true.\r\n    /// @param _amountRequiresConversion when true amount parameter is converted from ETH into tokens.\r\n    /// @param _feeName the name of the fee being paid.\r\n    /// @return amount of fees that would/will be paid.\r\n    function getFeeKnowingCrowdsale(\r\n        Data storage _self,\r\n        address _crowdsale, \r\n        address _feeTableAddr, \r\n        uint256 _amountInTokensOrEth,\r\n        bool _amountRequiresConversion,\r\n        bytes32 _feeName) \r\n        public view returns (uint256) \r\n    {\r\n        uint256 tokens = _amountInTokensOrEth;\r\n\r\n        if(_amountRequiresConversion) {\r\n            (tokens, ) = convertEthToEurApplyRateGetTokenAmountFromCrowdsale(_self, _crowdsale, _amountInTokensOrEth);\r\n        }\r\n        \r\n        FeeTable feeTable = FeeTable(_feeTableAddr);\r\n        address assetTokenOfCrowdsale = _self.store.getAssetTokenOfCrowdsale(_crowdsale);\r\n\r\n        return feeTable.getFeeFor(_feeName, assetTokenOfCrowdsale, tokens, _self.exchangeRateOracle);\r\n    }\r\n\r\n    /// @notice Get fee that needs to be paid for certain AssetToken and FeeName.\r\n    /// @param _assetToken the AssetToken being used.\r\n    /// @param _tokenAmount the amount in tokens.\r\n    /// @param _feeName the name of the fee being paid.\r\n    /// @return amount of fees that would/will be paid.\r\n    function getFeeKnowingAssetToken(\r\n        Data storage _self, \r\n        address _assetToken, \r\n        address /*_from*/, \r\n        uint256 _tokenAmount, \r\n        bytes32 _feeName) \r\n        public view returns (uint256) \r\n    {\r\n        FeeTable feeTable = getFeeTableForPlatform(_self, _self.rootPlatformAddress);\r\n        return feeTable.getFeeFor(_feeName, _assetToken, _tokenAmount, _self.exchangeRateOracle);\r\n    }\r\n\r\n    /// @notice Set CRWD token address (e.g. for fees).\r\n    /// @param _crwdToken the CRWD token address.\r\n    function setCrwdTokenAddress(Data storage _self, address _crwdToken) public {\r\n        _self.crwdToken = _crwdToken;\r\n        emit CrwdTokenAddressChanged(_crwdToken);\r\n    }\r\n\r\n    /// @notice set platform address to trusted. A platform can receive fees.\r\n    /// @param _platformWallet the wallet that will receive fees.\r\n    /// @param _trusted true means trusted and false means not (=default).\r\n    function setTrustedPlatform(Data storage _self, address _platformWallet, bool _trusted) public {\r\n        setTrustedPlatformInternal(_self, _platformWallet, _trusted, false);\r\n    }\r\n\r\n    /// @dev set trusted platform logic\r\n    /// @param _platformWallet the wallet that will receive fees.\r\n    /// @param _trusted true means trusted and false means not (=default).\r\n    /// @param _isRootPlatform true means that the given address is the root platform (here mainly used to save info into event).\r\n    function setTrustedPlatformInternal(Data storage _self, address _platformWallet, bool _trusted, bool _isRootPlatform) private {\r\n        require(_self.rootPlatformAddress != address(0), \"no rootPF\");\r\n\r\n        _self.trustedPlatform[_platformWallet] = _trusted;\r\n        \r\n        if(_trusted && !_self.onceTrustedPlatform[msg.sender]) {\r\n            _self.onceTrustedPlatform[_platformWallet] = true;\r\n            FeeTable ft = new FeeTable(_self.rootPlatformAddress);\r\n            _self.platformToFeeTable[_platformWallet] = address(ft);\r\n        }\r\n\r\n        emit PlatformTrustChanged(_platformWallet, _trusted, _isRootPlatform);\r\n    }\r\n\r\n    /// @notice Set root platform address. Root platform address can receive fees (independent of which Crowdsale/AssetToken).\r\n    /// @param _rootPlatformWallet wallet of root platform.\r\n    function setRootPlatform(Data storage _self, address _rootPlatformWallet) public {\r\n        _self.rootPlatformAddress = _rootPlatformWallet;\r\n        emit RootPlatformChanged(_rootPlatformWallet);\r\n\r\n        setTrustedPlatformInternal(_self, _rootPlatformWallet, true, true);\r\n    }\r\n\r\n    /// @notice Set rate of AssetToken.\r\n    /// @dev Rate is from BaseCurrency (currently EUR). E.g. rate 2 means 2 tokens per 1 EUR.\r\n    /// @param _assetToken the regarding AssetToken the rate should be applied on.\r\n    /// @param _rate the rate.\r\n    function setAssetTokenRate(Data storage _self, address _assetToken, uint256 _rate) public {\r\n        _self.store.setAssetTokenRate(_assetToken, _rate);\r\n        emit AssetTokenRateChanged(_assetToken, _rate);\r\n    }\r\n\r\n    /// @notice If this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\r\n    /// @param _foreignTokenAddress token where contract has balance.\r\n    /// @param _to the beneficiary.\r\n    function rescueToken(Data storage /*_self*/, address _foreignTokenAddress, address _to) public\r\n    {\r\n        ERC20Mintable(_foreignTokenAddress).transfer(_to, ERC20(_foreignTokenAddress).balanceOf(address(this)));\r\n    }\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n    event AssetTokenAdded(address indexed initiator, address indexed wallet, address indexed assetToken, uint256 rate);\r\n    event AssetTokenChangedActive(address indexed initiator, address indexed assetToken, bool active);\r\n    event PlatformTrustChanged(address indexed platformWallet, bool trusted, bool isRootPlatform);\r\n    event CrwdTokenAddressChanged(address indexed crwdToken);\r\n    event AssetTokenRateChanged(address indexed assetToken, uint256 rate);\r\n    event RootPlatformChanged(address indexed _rootPlatformWalletAddress);\r\n    event CrowdsaleAssigned(address initiator, address indexed assetToken, address indexed crowdsale, address platformWallet);\r\n    event ExchangeRateOracleSet(address indexed initiator, address indexed oracleAddress);\r\n    event FeesPaid(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/controller/0_library/LibraryHolder.sol\r\n\r\n/** @title LibraryHolder holds libraries used in inheritance bellow. */\r\ncontract LibraryHolder {\r\n    using ControllerL for ControllerL.Data;\r\n\r\n///////////////////\r\n// Variables\r\n///////////////////\r\n\r\n    ControllerL.Data internal controllerData;\r\n}\r\n\r\n// File: contracts/controller/1_permissions/PermissionHolder.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n\r\n/** @title PermissionHolder role permissions used in inheritance bellow. */\r\ncontract PermissionHolder  is AssetTokenAdministratorRole, At2CsConnectorRole, LibraryHolder {\r\n\r\n}\r\n\r\n// File: contracts/controller/2_provider/MainInfoProvider.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title MainInfoProvider holding simple getters and setters and events without much logic. */\r\ncontract MainInfoProvider is PermissionHolder {\r\n    \r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event AssetTokenAdded(address indexed initiator, address indexed wallet, address indexed assetToken, uint256 rate);\r\n    event AssetTokenChangedActive(address indexed initiator, address indexed assetToken, bool active);\r\n    event CrwdTokenAddressChanged(address indexed crwdToken);\r\n    event ExchangeRateOracleSet(address indexed initiator, address indexed oracleAddress);\r\n    event AssetTokenRateChanged(address indexed assetToken, uint256 rate);\r\n    event RootPlatformChanged(address indexed _rootPlatformWalletAddress);\r\n    event PlatformTrustChanged(address indexed platformWallet, bool trusted, bool isRootPlatform);\r\n    event WhitelistSet(address indexed initiator, address indexed whitelistAddress);\r\n    event CrowdsaleAssigned(address initiator, address indexed assetToken, address indexed crowdsale, address platformWallet);\r\n    event FeesPaid(address indexed from, address indexed to, uint256 value);\r\n    event TokenAssignment(address indexed to, uint256 tokensToMint, address indexed crowdsale, bytes8 tag);\r\n\r\n///////////////////\r\n// Methods (simple getters/setters ONLY)\r\n///////////////////\r\n\r\n    /// @notice Set CRWD token address (e.g. for fees).\r\n    /// @param _crwdToken the CRWD token address.\r\n    function setCrwdTokenAddress(address _crwdToken) public onlyRootPlatformAdministrator {\r\n        controllerData.setCrwdTokenAddress(_crwdToken);\r\n    }\r\n\r\n    /// @notice Set exchange rate oracle address.\r\n    /// @param _oracleAddress the address of the ExchangeRateOracle.\r\n    function setOracle(address _oracleAddress) public onlyRootPlatformAdministrator {\r\n        controllerData.setExchangeRateOracle(_oracleAddress);\r\n    }\r\n\r\n    /// @notice Get FeeTable for platform.\r\n    /// @param _platform platform to find FeeTable for.\r\n    /// @return address of FeeTable of platform.\r\n    function getFeeTableAddressForPlatform(address _platform) public view returns (address) {\r\n        return controllerData.getFeeTableAddressForPlatform(_platform);\r\n    }   \r\n\r\n    /// @notice Set rate of AssetToken.\r\n    /// @dev Rate is from BaseCurrency (currently EUR). E.g. rate 2 means 2 tokens per 1 EUR.\r\n    /// @param _assetToken the regarding AssetToken the rate should be applied on.\r\n    /// @param _rate the rate. Unit is WAD (decimal number with 18 digits, so rate of x WAD is x*1e18).\r\n    function setAssetTokenRate(address _assetToken, uint256 _rate) public onlyRootPlatformAdministrator {\r\n        controllerData.setAssetTokenRate(_assetToken, _rate);\r\n    }\r\n\r\n    /// @notice Set root platform address. Root platform address can receive fees (independent of which Crowdsale/AssetToken).\r\n    /// @param _rootPlatformWallet wallet of root platform.\r\n    function setRootPlatform(address _rootPlatformWallet) public onlyRootPlatformAdministrator {\r\n        controllerData.setRootPlatform(_rootPlatformWallet);\r\n    }\r\n\r\n    /// @notice Root platform wallet (receives fees according to it's FeeTable regardless of which Crowdsale/AssetToken)\r\n    function getRootPlatform() public view returns (address) {\r\n        return controllerData.rootPlatformAddress;\r\n    }\r\n    \r\n    /// @notice Set platform address to trusted. A platform can receive fees.\r\n    /// @param _platformWallet the wallet that will receive fees.\r\n    /// @param _trusted true means trusted and false means not (=default).\r\n    function setTrustedPlatform(address _platformWallet, bool _trusted) public onlyRootPlatformAdministrator {\r\n        controllerData.setTrustedPlatform(_platformWallet, _trusted);\r\n    }\r\n\r\n    /// @notice Is trusted platform.\r\n    /// @param _platformWallet platform wallet that recieves fees.\r\n    /// @return true if trusted.\r\n    function isTrustedPlatform(address _platformWallet) public view returns (bool) {\r\n        return controllerData.trustedPlatform[_platformWallet];\r\n    }\r\n\r\n    /// @notice Get platform of crowdsale.\r\n    /// @param _crowdsale the crowdsale to get platfrom from.\r\n    /// @return address of owning platform.\r\n    function getPlatformOfCrowdsale(address _crowdsale) public view returns (address) {\r\n        return controllerData.crowdsaleToPlatform[_crowdsale];\r\n    }\r\n\r\n    /// @notice Set whitelist contrac address.\r\n    /// @param _whitelistAddress the whitelist address.\r\n    function setWhitelistContract(address _whitelistAddress) public onlyRootPlatformAdministrator {\r\n        controllerData.whitelist = _whitelistAddress;\r\n\r\n        emit WhitelistSet(msg.sender, _whitelistAddress);\r\n    }\r\n\r\n    /// @notice Get address of generic storage that survives an upgrade.\r\n    /// @return address of storage.\r\n    function getStorageAddress() public view returns (address) {\r\n        return controllerData.getStorageAddress();\r\n    }\r\n\r\n    /// @notice Block new connections between AssetToken and Crowdsale (e.g. on upgrade)\r\n    /// @param _isBlockNewActive true if no new AssetTokens or Crowdsales can be added to controller.\r\n    function setBlockNewState(bool _isBlockNewActive) public onlyRootPlatformAdministrator {\r\n        controllerData.blockNew = _isBlockNewActive;\r\n    }\r\n\r\n    /// @notice Gets state of block new.\r\n    /// @return true if no new AssetTokens or Crowdsales can be added to controller.\r\n    function getBlockNewState() public view returns (bool) {\r\n        return controllerData.blockNew;\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManageAssetToken.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n/** @title ManageAssetToken holds logic functions managing AssetTokens. */\r\ncontract ManageAssetToken  is MainInfoProvider {\r\n    using SafeMath for uint256;\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Add trusted AssetToken.\r\n    /// @param _ownerWallet requires CRWD for fees, receives ETH on successful campaign.\r\n    /// @param _rate the rate of tokens per basecurrency (currently EUR).\r\n    function addTrustedAssetToken(address _ownerWallet, address _assetToken, uint256 _rate) \r\n        public \r\n        onlyAssetTokenAdministrator \r\n    {\r\n        controllerData.addTrustedAssetToken(_ownerWallet, _assetToken, _rate);\r\n    }\r\n\r\n    /// @notice Checks if a AssetToken is trusted.\r\n    /// @param _assetToken the address of the AssetToken.\r\n    function checkTrustedAssetToken(address _assetToken) public view returns (bool) {\r\n        return controllerData.checkTrustedAssetToken(_assetToken);\r\n    }\r\n\r\n    /// @notice Can change the state of an AssetToken (e.g. blacklist for legal reasons)\r\n    /// @param _assetToken the AssetToken to change state.\r\n    /// @param _active the state. True means active.\r\n    /// @return True if successful.\r\n    function changeActiveTrustedAssetToken(address _assetToken, bool _active) public onlyRootPlatformAdministrator returns (bool) {\r\n        return controllerData.changeActiveTrustedAssetToken(_assetToken, _active);\r\n    }\r\n\r\n    /// @notice Get fee that needs to be paid for certain AssetToken and FeeName.\r\n    /// @param _assetToken the AssetToken being used.\r\n    /// @param _tokenAmount the amount in tokens.\r\n    /// @param _feeName the name of the fee being paid.\r\n    /// @return amount of fees that would/will be paid.\r\n    function getFeeKnowingAssetToken(\r\n        address _assetToken, \r\n        address _from, \r\n        uint256 _tokenAmount, \r\n        bytes32 _feeName) \r\n        public view returns (uint256)\r\n    {\r\n        return controllerData.getFeeKnowingAssetToken(_assetToken, _from, _tokenAmount, _feeName);\r\n    }\r\n\r\n    /// @notice Convert eth amount into base currency (EUR), apply exchange rate via oracle, apply rate for AssetToken.\r\n    /// @param _crowdsale the crowdsale address.\r\n    /// @param _amountInWei the amount desired to be converted into tokens.\r\n    function convertEthToTokenAmount(address _crowdsale, uint256 _amountInWei) public view returns (uint256 _tokens) {\r\n        (uint256 tokens, ) = controllerData.convertEthToEurApplyRateGetTokenAmountFromCrowdsale(_crowdsale, _amountInWei);\r\n        return tokens;\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManageFee.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title ManageAssetToken holds logic functions managing Fees. */\r\ncontract ManageFee is MainInfoProvider {\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Pay fee on controller call from AssetToken.\r\n    /// @param _assetToken the calling AssetToken contract.\r\n    /// @param _from the initiator passed through as parameter by AssetToken.\r\n    /// @param _amount the tokens being handled.\r\n    /// @param _feeName the name of the fee (key in mapping).\r\n    function payFeeKnowingAssetToken(address _assetToken, address _from, uint256 _amount, bytes32 _feeName) internal {\r\n        controllerData.payFeeKnowingAssetToken(_assetToken, _from, _amount, _feeName);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManageCrowdsale.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/** @title ManageAssetToken holds logic functions managing Crowdsales. */\r\ncontract ManageCrowdsale is MainInfoProvider {\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice assign a crowdsale to an AssetToken.\r\n    /// @param _assetToken the AssetToken being sold.\r\n    /// @param _crowdsale the crowdsale that takes ETH (if enabled) and triggers assignment of tokens.\r\n    /// @param _platformWallet the wallet of the platform. Fees are paid to this address.\r\n    function assignCrowdsale(address _assetToken, address _crowdsale, address _platformWallet) \r\n        public \r\n        onlyAt2CsConnector \r\n    {\r\n        controllerData.assignCrowdsale(_assetToken, _crowdsale, _platformWallet);\r\n    }\r\n\r\n    /// @notice Checks if a crowdsale is trusted.\r\n    /// @param _crowdsale the address of the crowdsale.\r\n    function checkTrustedCrowdsale(address _crowdsale) public view returns (bool) {\r\n        return controllerData.checkTrustedCrowdsale(_crowdsale);\r\n    }\r\n\r\n    /// @notice Get fee that needs to be paid for certain Crowdsale and FeeName.\r\n    /// @param _crowdsale the Crowdsale being used.\r\n    /// @param _feeTableAddr the address of the feetable.\r\n    /// @param _amountInTokensOrEth the amount in tokens or pure ETH when conversion parameter true.\r\n    /// @param _amountRequiresConversion when true amount parameter is converted from ETH into tokens.\r\n    /// @param _feeName the name of the fee being paid.\r\n    /// @return amount of fees that would/will be paid.\r\n    function getFeeKnowingCrowdsale(\r\n        address _crowdsale, \r\n        address _feeTableAddr, \r\n        uint256 _amountInTokensOrEth, \r\n        bool _amountRequiresConversion,\r\n        bytes32 _feeName) \r\n        public view returns (uint256) \r\n    {\r\n        return controllerData.getFeeKnowingCrowdsale(_crowdsale, _feeTableAddr, _amountInTokensOrEth, _amountRequiresConversion, _feeName);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManagePlatform.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n/** @title ManageAssetToken holds logic functions managing platforms. */\r\ncontract ManagePlatform  is MainInfoProvider {\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Checks if a crowdsale is trusted or fail.\r\n    /// @param _platformWallet the platform wallet.\r\n    /// @return true if trusted.\r\n    function checkTrustedPlatform(address _platformWallet) public view returns (bool) {\r\n        return controllerData.checkTrustedPlatform(_platformWallet);\r\n    }\r\n\r\n    /// @notice Is a platform wallet trusted.\r\n    /// @return true if trusted.\r\n    function isTrustedPlatform(address _platformWallet) public view returns (bool) {\r\n        return controllerData.trustedPlatform[_platformWallet];\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManageWhitelist.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n/** @title ManageAssetToken holds logic functions managing Whitelist and KYC. */\r\ncontract ManageWhitelist  is MainInfoProvider {\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice Check if a wallet is whitelisted or fail. Also considers auto extend (if enabled).\r\n    /// @param _wallet the wallet to check.\r\n    function checkWhitelistedWallet(address _wallet) public returns (bool) {\r\n        controllerData.checkWhitelistedWallet(_wallet);\r\n    }\r\n\r\n    /// @notice Check if a wallet is whitelisted.\r\n    /// @param _wallet the wallet to check.\r\n    /// @return true if whitelisted.\r\n    function isWhitelistedWallet(address _wallet) public view returns (bool) {\r\n        controllerData.isWhitelistedWallet(_wallet);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/3_manage/ManagerHolder.sol\r\n\r\n/*\r\n    Copyright 2018, CONDA\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** @title ManagerHolder combining all managers into single contract to be inherited. */\r\ncontract ManagerHolder is \r\n    ManageAssetToken, \r\n    ManageFee, \r\n    ManageCrowdsale,\r\n    ManagePlatform,\r\n    ManageWhitelist\r\n{\r\n}\r\n\r\n// File: contracts/controller/interface/ICRWDController.sol\r\n\r\ninterface ICRWDController {\r\n    function transferParticipantsVerification(address _underlyingCurrency, address _from, address _to, uint256 _tokenAmount) external returns (bool); //from AssetToken\r\n    function buyFromCrowdsale(address _to, uint256 _amountInWei) external returns (uint256 _tokensCreated, uint256 _overpaidRefund); //from Crowdsale\r\n    function assignFromCrowdsale(address _to, uint256 _tokenAmount, bytes8 _tag) external returns (uint256 _tokensCreated); //from Crowdsale\r\n    function calcTokensForEth(uint256 _amountInWei) external view returns (uint256 _tokensWouldBeCreated); //from Crowdsale\r\n}\r\n\r\n// File: contracts/controller/CRWDController.sol\r\n\r\n/** @title CRWDController main contract and n-th child of multi-level inheritance. */\r\ncontract CRWDController is ManagerHolder, ICRWDController {\r\n\r\n///////////////////\r\n// Events\r\n///////////////////\r\n\r\n    event GlobalConfigurationChanged(bool feesEnabled, bool whitelistEnabled);\r\n\r\n///////////////////\r\n// Constructor\r\n///////////////////\r\n\r\n    constructor(bool _feesEnabled, bool _whitelistEnabled, address _rootPlatformAddress, address _storage) public {\r\n        controllerData.assignStore(_storage);\r\n        \r\n        setRootPlatform(_rootPlatformAddress);\r\n\r\n        configure(_feesEnabled, _whitelistEnabled);\r\n    }\r\n\r\n///////////////////\r\n// Functions\r\n///////////////////\r\n\r\n    /// @notice configure global flags.\r\n    /// @param _feesEnabled global flag fees enabled.\r\n    /// @param _whitelistEnabled global flag whitelist check enabled.\r\n    function configure(bool _feesEnabled, bool _whitelistEnabled) public onlyRootPlatformAdministrator {\r\n        controllerData.feesEnabled = _feesEnabled;\r\n        controllerData.whitelistEnabled = _whitelistEnabled;\r\n\r\n        emit GlobalConfigurationChanged(_feesEnabled, _whitelistEnabled);\r\n    }\r\n\r\n    /// @notice Called from AssetToken on transfer for whitelist check.\r\n    /// @param _from the original initiator passed through.\r\n    /// @param _to the receiver of the tokens.\r\n    /// @param _tokenAmount the amount of tokens to be transfered.\r\n    function transferParticipantsVerification(address /*_underlyingCurrency*/, address _from, address _to, uint256 _tokenAmount) public returns (bool) {\r\n\r\n        if (controllerData.whitelistEnabled) {\r\n            checkWhitelistedWallet(_to); //receiver must be whitelisted\r\n        }\r\n\r\n        // Caller must be a trusted AssetToken. Otherwise anyone could make investor pay fees for no reason. \r\n        require(checkTrustedAssetToken(msg.sender), \"untrusted\");\r\n\r\n        if (controllerData.feesEnabled) {\r\n            payFeeKnowingAssetToken(msg.sender, _from, _tokenAmount, \"clearTransferFunds\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Called from Crowdsale on buy token action (paid via Ether).\r\n    /// @param _to the beneficiary of the tokens (passed through from Crowdsale).\r\n    /// @param _amountInWei the ETH amount (unit WEI).\r\n    function buyFromCrowdsale(address _to, uint256 _amountInWei) public returns (uint256 _tokensCreated, uint256 _overpaidRefund) {\r\n        return controllerData.buyFromCrowdsale(_to, _amountInWei);\r\n    }\r\n\r\n    /// @notice Calculate how many tokens will be received per Ether.\r\n    /// @param _amountInWei the ETH amount (unit WEI).\r\n    /// @return tokens that would be created.\r\n    function calcTokensForEth(uint256 _amountInWei) external view returns (uint256 _tokensWouldBeCreated) {\r\n        require(checkTrustedCrowdsale(msg.sender), \"untrusted source2\");\r\n\r\n        return convertEthToTokenAmount(msg.sender, _amountInWei);\r\n    }\r\n\r\n    /// @notice Called from Crowdsale via (semi-)automatic process on off-chain payment.\r\n    /// @param _to the beneficiary of the tokens.\r\n    /// @param _tokenAmount the amount of tokens to be minted/assigned.\r\n    /// @return tokens created.\r\n    function assignFromCrowdsale(address _to, uint256 _tokenAmount, bytes8 _tag) external returns (uint256 _tokensCreated) {\r\n        _tokensCreated = controllerData.assignFromCrowdsale(_to, _tokenAmount);\r\n\r\n        emit TokenAssignment(_to, _tokenAmount, msg.sender, _tag);\r\n\r\n        return _tokensCreated;\r\n    }\r\n\r\n////////////////\r\n// Rescue Tokens \r\n////////////////\r\n\r\n    /// @dev Can rescue tokens accidentally assigned to this contract\r\n    /// @param _foreignTokenAddress The address from which the balance will be retrieved\r\n    /// @param _to beneficiary\r\n    function rescueToken(address _foreignTokenAddress, address _to)\r\n    public\r\n    onlyRootPlatformAdministrator\r\n    {\r\n        controllerData.rescueToken(_foreignTokenAddress, _to);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_autoExtendContract\",\"type\":\"address\"}],\"name\":\"setAutoExtendExpirationContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isWhitelistedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getInvestorKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setExpirationEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autoExtendEnabled\",\"type\":\"bool\"}],\"name\":\"setAutoExtendExpiration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addRootPlatformAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkWhitelistedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"blocksLeftUntilExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoExtendExpirationContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"},{\"name\":\"_investorKey\",\"type\":\"address\"},{\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoExtendExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceRootPlatformAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_investorKey\",\"type\":\"address\"}],\"name\":\"assignWalletToInvestorKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addedBlocksSinceWhitelisting\",\"type\":\"uint256\"}],\"name\":\"setExpirationBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"},{\"name\":\"_investorKey\",\"type\":\"address\"},{\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistControl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRootPlatformAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_whitelistedWallet\",\"type\":\"address\"}],\"name\":\"getIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"investorKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"WhitelistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addedBlocksSinceWhitelisting\",\"type\":\"uint256\"}],\"name\":\"ExpirationBlocksChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expirationEnabled\",\"type\":\"bool\"}],\"name\":\"ExpirationEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"investorKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"UpdatedIdentity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expirationContract\",\"type\":\"address\"}],\"name\":\"SetAutoExtendExpirationContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"autoExtendEnabled\",\"type\":\"bool\"}],\"name\":\"UpdatedAutoExtendExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistControlAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistControlRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RootPlatformAdministratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RootPlatformAdministratorRemoved\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7e249001aedf0fb7536559268898c4c939661a172475d71d3ddd0d52fdca620"}]}