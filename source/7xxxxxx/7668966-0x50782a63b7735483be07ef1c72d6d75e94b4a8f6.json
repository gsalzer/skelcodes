{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/tools/SelfServiceAccessControls.sol\r\n\r\ncontract SelfServiceAccessControls is Ownable {\r\n\r\n  // Simple map to only allow certain artist create editions at first\r\n  mapping(address => bool) public allowedArtists;\r\n\r\n  // When true any existing KO artist can mint their own editions\r\n  bool public openToAllArtist = false;\r\n\r\n  /**\r\n   * @dev Controls is the contract is open to all\r\n   * @dev Only callable from owner\r\n   */\r\n  function setOpenToAllArtist(bool _openToAllArtist) onlyOwner public {\r\n    openToAllArtist = _openToAllArtist;\r\n  }\r\n\r\n  /**\r\n   * @dev Controls who can call this contract\r\n   * @dev Only callable from owner\r\n   */\r\n  function setAllowedArtist(address _artist, bool _allowed) onlyOwner public {\r\n    allowedArtists[_artist] = _allowed;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function isEnabledForAccount(address account) public view returns (bool) {\r\n    if (openToAllArtist) {\r\n      return true;\r\n    }\r\n    return allowedArtists[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract stuck ether\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    _withdrawalAccount.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n// File: contracts/v2/tools/SelfServiceEditionCurationV3.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ninterface IKODAV2SelfServiceEditionCuration {\r\n\r\n  function createActiveEdition(\r\n    uint256 _editionNumber,\r\n    bytes32 _editionData,\r\n    uint256 _editionType,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    address _artistAccount,\r\n    uint256 _artistCommission,\r\n    uint256 _priceInWei,\r\n    string _tokenUri,\r\n    uint256 _totalAvailable\r\n  ) external returns (bool);\r\n\r\n  function artistsEditions(address _artistsAccount) external returns (uint256[1] _editionNumbers);\r\n\r\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\r\n\r\n  function highestEditionNumber() external returns (uint256);\r\n}\r\n\r\ninterface IKODAAuction {\r\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) external;\r\n}\r\n\r\n// One invocation per time-period\r\ncontract SelfServiceEditionCurationV3 is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  event SelfServiceEditionCreated(\r\n    uint256 indexed _editionNumber,\r\n    address indexed _creator,\r\n    uint256 _priceInWei,\r\n    uint256 _totalAvailable,\r\n    bool _enableAuction\r\n  );\r\n\r\n  // Calling address\r\n  IKODAV2SelfServiceEditionCuration public kodaV2;\r\n  IKODAAuction public auction;\r\n  SelfServiceAccessControls public accessControls;\r\n\r\n  // Default artist commission\r\n  uint256 public artistCommission = 85;\r\n\r\n  // Config which enforces editions to not be over this size\r\n  uint256 public maxEditionSize = 100;\r\n\r\n  // Config the minimum price per edition\r\n  uint256 public minPricePerEdition = 0.01 ether;\r\n\r\n  // frozen out for..\r\n  uint256 public freezeWindow = 1 days;\r\n\r\n  // When the current time period started\r\n  mapping(address => uint256) public frozenTil;\r\n\r\n  /**\r\n   * @dev Construct a new instance of the contract\r\n   */\r\n  constructor(\r\n    IKODAV2SelfServiceEditionCuration _kodaV2,\r\n    IKODAAuction _auction,\r\n    SelfServiceAccessControls _accessControls\r\n  ) public {\r\n    kodaV2 = _kodaV2;\r\n    auction = _auction;\r\n    accessControls = _accessControls;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by artists, create new edition on the KODA platform\r\n   */\r\n  function createEdition(\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    string _tokenUri,\r\n    bool _enableAuction\r\n  )\r\n  public\r\n  whenNotPaused\r\n  returns (uint256 _editionNumber)\r\n  {\r\n    require(!_isFrozen(msg.sender), 'Sender currently frozen out of creation');\r\n\r\n    frozenTil[msg.sender] = block.timestamp.add(freezeWindow);\r\n\r\n    return _createEdition(msg.sender, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\r\n  }\r\n\r\n  /**\r\n   * @dev Caller by owner, can create editions for other artists\r\n   * @dev Only callable from owner regardless of pause state\r\n   */\r\n  function createEditionFor(\r\n    address _artist,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    string _tokenUri,\r\n    bool _enableAuction\r\n  )\r\n  public\r\n  onlyOwner\r\n  returns (uint256 _editionNumber)\r\n  {\r\n    return _createEdition(_artist, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for edition creation\r\n   */\r\n  function _createEdition(\r\n    address _artist,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    string _tokenUri,\r\n    bool _enableAuction\r\n  )\r\n  internal\r\n  returns (uint256 _editionNumber){\r\n\r\n    // Enforce edition size\r\n    require(_totalAvailable > 0, \"Must be at least one available in edition\");\r\n    require(_totalAvailable <= maxEditionSize, \"Must not exceed max edition size\");\r\n\r\n    // Enforce min price\r\n    require(_priceInWei >= minPricePerEdition, \"Price must be greater than minimum\");\r\n\r\n    // If we are the owner, skip this artists check\r\n    if (msg.sender != owner) {\r\n\r\n      // Enforce who can call this\r\n      if (!accessControls.openToAllArtist()) {\r\n        require(accessControls.allowedArtists(_artist), \"Only allowed artists can create editions for now\");\r\n      }\r\n    }\r\n\r\n    // Find the next edition number we can use\r\n    uint256 editionNumber = getNextAvailableEditionNumber();\r\n\r\n    // Attempt to create a new edition\r\n    require(\r\n      _createNewEdition(editionNumber, _artist, _totalAvailable, _priceInWei, _startDate, _tokenUri),\r\n      \"Failed to create new edition\"\r\n    );\r\n\r\n    // Enable the auction if desired\r\n    if (_enableAuction) {\r\n      auction.setArtistsControlAddressAndEnabledEdition(editionNumber, _artist);\r\n    }\r\n\r\n    // Trigger event\r\n    emit SelfServiceEditionCreated(editionNumber, _artist, _priceInWei, _totalAvailable, _enableAuction);\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for calling external create methods with some none configurable defaults\r\n   */\r\n  function _createNewEdition(\r\n    uint256 _editionNumber,\r\n    address _artist,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    string _tokenUri\r\n  )\r\n  internal\r\n  returns (bool) {\r\n    return kodaV2.createActiveEdition(\r\n      _editionNumber,\r\n      0x0, // _editionData - no edition data\r\n      1, // _editionType - KODA always type 1\r\n      _startDate,\r\n      0, // _endDate - 0 = MAX unit256\r\n      _artist,\r\n      artistCommission,\r\n      _priceInWei,\r\n      _tokenUri,\r\n      _totalAvailable\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for checking is an account is frozen out yet\r\n   */\r\n  function _isFrozen(address account) internal view returns (bool) {\r\n    return (block.timestamp < frozenTil[account]);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for dynamically generating the next KODA edition number\r\n   */\r\n  function getNextAvailableEditionNumber() internal returns (uint256 editionNumber) {\r\n\r\n    // Get current highest edition and total in the edition\r\n    uint256 highestEditionNumber = kodaV2.highestEditionNumber();\r\n    uint256 totalAvailableEdition = kodaV2.totalAvailableEdition(highestEditionNumber);\r\n\r\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\r\n    uint256 nextAvailableEditionNumber = highestEditionNumber.add(totalAvailableEdition).add(1);\r\n\r\n    // Round up to next 100, 1000 etc based on max allowed size\r\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKodavV2(IKODAV2SelfServiceEditionCuration _kodaV2) onlyOwner public {\r\n    kodaV2 = _kodaV2;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA auction\r\n   * @dev Only callable from owner\r\n   */\r\n  function setAuction(IKODAAuction _auction) onlyOwner public {\r\n    auction = _auction;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the default commission for each edition\r\n   * @dev Only callable from owner\r\n   */\r\n  function setArtistCommission(uint256 _artistCommission) onlyOwner public {\r\n    artistCommission = _artistCommission;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the max edition size\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyOwner public {\r\n    maxEditionSize = _maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets minimum price per edition\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMinPricePerEdition(uint256 _minPricePerEdition) onlyOwner public {\r\n    minPricePerEdition = _minPricePerEdition;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets freeze window\r\n   * @dev Only callable from owner\r\n   */\r\n  function setFreezeWindow(uint256 _freezeWindow) onlyOwner public {\r\n    freezeWindow = _freezeWindow;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account is currently frozen out\r\n   */\r\n  function isFrozen(address account) public view returns (bool) {\r\n    return _isFrozen(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function isEnabledForAccount(address account) public view returns (bool) {\r\n    return accessControls.isEnabledForAccount(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function canCreateAnotherEdition(address account) public view returns (bool) {\r\n    if (!isEnabledForAccount(account)) {\r\n      return false;\r\n    }\r\n    return !_isFrozen(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract stuck ether\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    _withdrawalAccount.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAccount\",\"type\":\"address\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnabledForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPricePerEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxEditionSize\",\"type\":\"uint256\"}],\"name\":\"setMaxEditionSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artistCommission\",\"type\":\"uint256\"}],\"name\":\"setArtistCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEditionSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artistCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"createEditionFor\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"createEdition\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canCreateAnotherEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPricePerEdition\",\"type\":\"uint256\"}],\"name\":\"setMinPricePerEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezeWindow\",\"type\":\"uint256\"}],\"name\":\"setFreezeWindow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_accessControls\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"SelfServiceEditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SelfServiceEditionCurationV3","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639000000000000000000000000ec133df5d806a9069aee513b8be01eeee2f03ff0","Library":"","SwarmSource":"bzzr://7d74a3ec04d1ba4ae6258414e5772c76b068dfff700494dca1efc823cfa43967"}]}