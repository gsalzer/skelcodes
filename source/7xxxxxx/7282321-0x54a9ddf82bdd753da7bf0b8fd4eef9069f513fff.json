{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: contracts/TermDeposit.sol\r\n\r\npragma solidity >=0.4.14 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @author QuarkChain Eng Team\r\n/// @title A term deposit contract for ERC20 tokens\r\ncontract TermDeposit is WhitelistAdminRole {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event DoDeposit(address indexed depositor, uint256 amount);\r\n    event Withdraw(address indexed depositor, uint256 amount);\r\n    event AddReferral(address indexed depositor, address indexed referrer, uint256 amount);\r\n    event GetReferralBonus(address indexed depositor, uint256 amount);\r\n    event Drain(address indexed admin);\r\n    event Goodbye(address indexed admin, uint256 amount);\r\n\r\n    uint256 public constant MIN_DEPOSIT = 100 * 1e18;  // => 100 QKC.\r\n    // Pre-defined terms.\r\n    bytes4 public constant TERM_3MO = \"3mo\";\r\n    bytes4 public constant TERM_6MO = \"6mo\";\r\n    bytes4 public constant TERM_9MO = \"9mo\";\r\n    bytes4 public constant TERM_12MO = \"12mo\";\r\n\r\n    struct FeatureFlag {\r\n        uint8 version;\r\n        bool enableInterest;\r\n        bool enableReferralBonus;\r\n        bool enableDepositLimit;\r\n    }\r\n\r\n    struct TermDepositInfo {\r\n        uint256 depositDeadline;\r\n        uint256 duration;\r\n        // Interest in basis points.\r\n        uint256 interestBp;\r\n        uint256 totalDepositAllowed;\r\n        uint256 totalReceived;\r\n        mapping (address => Deposit[]) deposits;\r\n        // Referral-related.\r\n        uint256 totalReferralAmount;\r\n        uint256 referralBonusRateBp;\r\n        mapping (address => Referral) referrals;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 depositAt;\r\n        uint256 withdrawAt;\r\n    }\r\n\r\n    struct Referral {\r\n        uint256 amount;\r\n        uint256 withdrawAt;\r\n    }\r\n\r\n    mapping (bytes4 => TermDepositInfo) private _termDeposits;\r\n    IERC20 private _token;\r\n    FeatureFlag private _featureFlags;\r\n\r\n    uint256 public referralBonusLockUntil;\r\n    bytes4[] public allTerms = [TERM_3MO, TERM_6MO, TERM_9MO, TERM_12MO];\r\n\r\n    /// Constructor for the term deposit contract.\r\n    /// @param depositDeadline latest timestamp for accepting deposits\r\n    /// @param token ERC20 token addresses for term deposit\r\n    /// @param version feature flag version\r\n    constructor(uint256 depositDeadline, IERC20 token, uint8 version) public {\r\n        require(depositDeadline > 0, \"should have sensible argument\");\r\n\r\n        processFeatureFlag(version);\r\n\r\n        uint256 monthInSec = 2635200;\r\n        _token = token;\r\n\r\n        _termDeposits[TERM_3MO] = TermDepositInfo({\r\n            depositDeadline: depositDeadline,\r\n            duration: 3 * monthInSec,\r\n            interestBp: 250,\r\n            // TODO: Use real number.\r\n            totalDepositAllowed: (10 ** 7) * 1e18,\r\n            totalReceived: 0,\r\n            referralBonusRateBp: 22,\r\n            totalReferralAmount: 0\r\n        });\r\n\r\n        _termDeposits[TERM_6MO] = TermDepositInfo({\r\n            depositDeadline: depositDeadline,\r\n            duration: 6 * monthInSec,\r\n            interestBp: 550,\r\n            // TODO: Use real number.\r\n            totalDepositAllowed: (10 ** 7) * 1e18,\r\n            totalReceived: 0,\r\n            referralBonusRateBp: 45,\r\n            totalReferralAmount: 0\r\n        });\r\n\r\n        _termDeposits[TERM_9MO] = TermDepositInfo({\r\n            depositDeadline: depositDeadline,\r\n            duration: 9 * monthInSec,\r\n            // TODO: Use real number.\r\n            interestBp: 1000,\r\n            // TODO: Use real number.\r\n            totalDepositAllowed: (10 ** 7) * 1e18,\r\n            totalReceived: 0,\r\n            // TODO: Use real number.\r\n            referralBonusRateBp: 80,\r\n            totalReferralAmount: 0\r\n        });\r\n\r\n        _termDeposits[TERM_12MO] = TermDepositInfo({\r\n            depositDeadline: depositDeadline,\r\n            duration: 12 * monthInSec,\r\n            interestBp: 1300,\r\n            // TODO: Use real number.\r\n            totalDepositAllowed: (10 ** 7) * 1e18,\r\n            totalReceived: 0,\r\n            referralBonusRateBp: 100,\r\n            totalReferralAmount: 0\r\n        });\r\n\r\n        // Same as deposit deadline.\r\n        referralBonusLockUntil = depositDeadline;\r\n    }\r\n\r\n    /// Helper function to parse version and set feature flags.\r\n    /// @param version feature flag version\r\n    function processFeatureFlag(uint8 version) private {\r\n        require(version <= 2, \"should only allow version <= 2\");\r\n        _featureFlags.version = version;\r\n        // Note all feature flags are false by default.\r\n        if (version > 0) {\r\n            _featureFlags.enableDepositLimit = true;\r\n        }\r\n        if (version > 1) {\r\n            _featureFlags.enableInterest = true;\r\n            _featureFlags.enableReferralBonus = true;\r\n        }\r\n    }\r\n\r\n    /// Getter for token address.\r\n    /// @return the token address\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /// Getter for feature flag version.\r\n    /// @return version of the feature flags\r\n    function featureFlagVersion() public view returns (uint8) {\r\n        return _featureFlags.version;\r\n    }\r\n\r\n    /// Return a term deposit's key properties.\r\n    /// @param term the byte representation of terms\r\n    /// @return a list of deposit overview info\r\n    function getTermDepositInfo(bytes4 term) public view returns (uint256[7] memory) {\r\n        TermDepositInfo memory info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        return [\r\n            info.depositDeadline,\r\n            info.duration,\r\n            info.interestBp,\r\n            info.totalDepositAllowed,\r\n            info.totalReceived,\r\n            info.referralBonusRateBp,\r\n            info.totalReferralAmount\r\n        ];\r\n    }\r\n\r\n    /// Deposit users tokens into this contract.\r\n    /// @param term the byte representation of terms\r\n    /// @param amount token amount in wei\r\n    /// @param referrer address of the referrer\r\n    function deposit(bytes4 term, uint256 amount, address referrer) public {\r\n        require(amount >= MIN_DEPOSIT, \"should have amount >= minimum\");\r\n        require(referrer != msg.sender, \"should not have self as the referrer\");\r\n        TermDepositInfo storage info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        require(now <= info.depositDeadline, \"should deposit before the deadline\");\r\n        if (_featureFlags.enableDepositLimit) {\r\n            require(\r\n                info.totalReceived.add(amount) <= info.totalDepositAllowed,\r\n                \"should not exceed deposit limit\"\r\n            );\r\n        }\r\n        if (!_featureFlags.enableReferralBonus) {\r\n            require(referrer == address(0), \"should not allow referrer per FF\");\r\n        }\r\n\r\n        Deposit[] storage deposits = info.deposits[msg.sender];\r\n        deposits.push(Deposit({\r\n            amount: amount,\r\n            depositAt: now,\r\n            withdrawAt: 0\r\n        }));\r\n        info.totalReceived = info.totalReceived.add(amount);\r\n        emit DoDeposit(msg.sender, amount);\r\n\r\n        if (referrer != address(0)) {\r\n            Referral storage referral = info.referrals[referrer];\r\n            referral.amount = referral.amount.add(amount);\r\n            info.totalReferralAmount = info.totalReferralAmount.add(amount);\r\n            emit AddReferral(msg.sender, referrer, amount);\r\n        }\r\n\r\n        _token.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /// Calculate amount of tokens a user has deposited.\r\n    /// @param depositor the address of the depositor\r\n    /// @param terms the list of byte representation of terms\r\n    /// @param withdrawable boolean flag for whether to require withdrawable\r\n    /// @param withInterests boolean flag for whether to include interests\r\n    /// @return amount of tokens available for withdrawal\r\n    function getDepositAmount(\r\n        address depositor,\r\n        bytes4[] memory terms,\r\n        bool withdrawable,\r\n        bool withInterests\r\n    ) public view returns (uint256[] memory)\r\n    {\r\n        if (!_featureFlags.enableInterest) {\r\n            require(!withInterests, \"should not allow querying interests per FF\");\r\n        }\r\n        uint256[] memory ret = new uint256[](terms.length);\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo storage info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            Deposit[] memory deposits = info.deposits[depositor];\r\n\r\n            uint256 total = 0;\r\n            for (uint256 j = 0; j < deposits.length; j++) {\r\n                uint256 lockUntil = deposits[j].depositAt.add(info.duration);\r\n                if (deposits[j].withdrawAt == 0) {\r\n                    if (!withdrawable || now >= lockUntil) {\r\n                        total = total.add(deposits[j].amount);\r\n                    }\r\n                }\r\n            }\r\n            if (withInterests) {\r\n                total = total.add(total.mul(info.interestBp).div(10000));\r\n            }\r\n            ret[i] = total;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// Get detailed deposit information of a user.\r\n    /// @param depositor the address of the depositor\r\n    /// @param term the byte representation of terms\r\n    /// @return 3 arrays of deposit amounts, deposit / withdrawal timestamps\r\n    function getDepositDetails(\r\n        address depositor,\r\n        bytes4 term\r\n    ) public view returns (uint256[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        TermDepositInfo storage info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        Deposit[] memory deposits = info.deposits[depositor];\r\n\r\n        uint256[] memory amounts = new uint256[](deposits.length);\r\n        uint256[] memory depositTs = new uint256[](deposits.length);\r\n        uint256[] memory withdrawTs = new uint256[](deposits.length);\r\n        for (uint256 i = 0; i < deposits.length; i++) {\r\n            amounts[i] = deposits[i].amount;\r\n            depositTs[i] = deposits[i].depositAt;\r\n            withdrawTs[i] = deposits[i].withdrawAt;\r\n        }\r\n        return (amounts, depositTs, withdrawTs);\r\n    }\r\n\r\n    /// Withdraw a user's tokens plus interest to his/her own address.\r\n    /// @param term the byte representation of terms\r\n    /// @return whether have withdrawn some tokens successfully\r\n    function withdraw(bytes4 term) public returns (bool) {\r\n        TermDepositInfo storage info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        Deposit[] storage deposits = info.deposits[msg.sender];\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < deposits.length; i++) {\r\n            uint256 lockUntil = deposits[i].depositAt.add(info.duration);\r\n            if (deposits[i].withdrawAt == 0 && now >= lockUntil) {\r\n                total = total.add(deposits[i].amount);\r\n                deposits[i].withdrawAt = now;\r\n            }\r\n        }\r\n\r\n        if (total == 0) {\r\n            return false;\r\n        }\r\n\r\n        info.totalReceived = info.totalReceived.sub(total);\r\n        if (_featureFlags.enableInterest) {\r\n            total = total.add(total.mul(info.interestBp).div(10000));\r\n        }\r\n        emit Withdraw(msg.sender, total);\r\n\r\n        _token.safeTransfer(msg.sender, total);\r\n        return true;\r\n    }\r\n\r\n    /// Calculate referral bonus.\r\n    /// @param depositor the address of the depositor\r\n    /// @param terms the list of byte representation of terms\r\n    /// @return amount of tokens affiliated with the depositor, and the actual amount of bonus\r\n    function calculateReferralBonus(\r\n        address depositor, bytes4[] memory terms\r\n    ) public view returns (uint256[] memory, uint256)\r\n    {\r\n        require(_featureFlags.enableReferralBonus, \"should only support querying referral per FF\");\r\n        uint256 bonus = 0;\r\n        uint256[] memory amounts = new uint256[](terms.length);\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo storage info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n\r\n            Referral memory r = info.referrals[depositor];\r\n            if (r.amount > 0 && r.withdrawAt == 0) {\r\n                bonus = bonus.add(r.amount.mul(info.referralBonusRateBp).div(10000));\r\n            }\r\n            amounts[i] = r.amount;\r\n        }\r\n        return (amounts, bonus);\r\n    }\r\n\r\n    /// Retrieve referral bonus for a user given the terms.\r\n    /// @param terms the list of byte representation of terms\r\n    function getReferralBonus(bytes4[] memory terms) public {\r\n        require(\r\n            _featureFlags.enableReferralBonus,\r\n            \"should only support retrieving referral bonus per FF\"\r\n        );\r\n        require(now >= referralBonusLockUntil, \"should only allow referral bonus after unlocked\");\r\n\r\n        uint256 bonus = 0;\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo storage info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n\r\n            Referral storage r = info.referrals[msg.sender];\r\n            if (r.amount > 0 && r.withdrawAt == 0) {\r\n                bonus = bonus.add(r.amount.mul(info.referralBonusRateBp).div(10000));\r\n                r.withdrawAt = now;\r\n                info.totalReferralAmount = info.totalReferralAmount.sub(r.amount);\r\n            }\r\n        }\r\n        emit GetReferralBonus(msg.sender, bonus);\r\n        _token.safeTransfer(msg.sender, bonus);\r\n    }\r\n\r\n    /// Admin function to update term deposits' deadlines.\r\n    /// @param term the byte representation of terms\r\n    /// @param newDepositDeadline new deposit deadline\r\n    function updateDepositDeadline(\r\n        bytes4 term,\r\n        uint256 newDepositDeadline\r\n    ) public onlyWhitelistAdmin\r\n    {\r\n        TermDepositInfo storage info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        info.depositDeadline = newDepositDeadline;\r\n    }\r\n\r\n    /// Admin function to update referral bonus lock.\r\n    /// @param newTime new referral bonus lock\r\n    function updateReferralBonusLockTime(uint256 newTime) public onlyWhitelistAdmin {\r\n        referralBonusLockUntil = newTime;\r\n    }\r\n\r\n    /// Return necessary amount of tokens to cover interests and referral bonuses.\r\n    /// @param terms the list of byte representation of terms\r\n    /// @return total deposit, total interests and total referral bonus\r\n    function calculateTotalPayout(bytes4[] memory terms) public view returns (uint256[3] memory) {\r\n        // [deposit, interest, bonus].\r\n        uint256[3] memory ret;\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo memory info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            ret[0] = ret[0].add(info.totalReceived);\r\n            if (_featureFlags.enableInterest) {\r\n                ret[1] = ret[1].add(info.totalReceived.mul(info.interestBp).div(10000));\r\n            }\r\n            if (_featureFlags.enableReferralBonus) {\r\n                ret[2] = ret[2].add(info.totalReferralAmount.mul(info.referralBonusRateBp).div(10000));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// Leave enough tokens for payout, and drain the surplus.\r\n    /// @dev only admins can call this function\r\n    function drainSurplusTokens() external onlyWhitelistAdmin {\r\n        for (uint256 i = 0; i < allTerms.length; i++) {\r\n            bytes4 term = allTerms[i];\r\n            TermDepositInfo memory info = _termDeposits[term];\r\n            require(now > info.depositDeadline, \"should pass the deposit deadline\");\r\n        }\r\n        emit Drain(msg.sender);\r\n\r\n        uint256[3] memory payouts = calculateTotalPayout(allTerms);\r\n        uint256 currentAmount = _token.balanceOf(address(this));\r\n        uint256 neededAmount = payouts[0].add(payouts[1]).add(payouts[2]);\r\n        if (currentAmount > neededAmount) {\r\n            uint256 surplus = currentAmount.sub(neededAmount);\r\n            _token.safeTransfer(msg.sender, surplus);\r\n        }\r\n    }\r\n\r\n    /// Drain remaining tokens and destroys the contract to save some space for the network.\r\n    /// @dev only admins can call this function\r\n    function goodbye() external onlyWhitelistAdmin {\r\n        // Make sure is after deposit deadline, and no received tokens.\r\n        for (uint256 i = 0; i < allTerms.length; i++) {\r\n            bytes4 term = allTerms[i];\r\n            TermDepositInfo memory info = _termDeposits[term];\r\n            require(now > info.depositDeadline, \"should pass the deposit deadline\");\r\n            require(info.totalReceived < 1000 * 1e18, \"should have small enough deposits\");\r\n        }\r\n        // Transfer remaining tokens.\r\n        uint256 tokenAmount = _token.balanceOf(address(this));\r\n        emit Goodbye(msg.sender, tokenAmount);\r\n        if (tokenAmount > 0) {\r\n            _token.safeTransfer(msg.sender, tokenAmount);\r\n        }\r\n        // Say goodbye.\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TERM_12MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"featureFlagVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"calculateReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateReferralBonusLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_9MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainSurplusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonusLockUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_6MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"}],\"name\":\"getTermDepositInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goodbye\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_3MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"},{\"name\":\"newDepositDeadline\",\"type\":\"uint256\"}],\"name\":\"updateDepositDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"calculateTotalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"getReferralBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"term\",\"type\":\"bytes4\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"terms\",\"type\":\"bytes4[]\"},{\"name\":\"withdrawable\",\"type\":\"bool\"},{\"name\":\"withInterests\",\"type\":\"bool\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"depositDeadline\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"version\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DoDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetReferralBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Drain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Goodbye\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"TermDeposit","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005cc943f0000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b6640000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://88fc243342dd210fbfabe9b1f9947e8d9a10d9b534624a68519dea47a908e244"}]}