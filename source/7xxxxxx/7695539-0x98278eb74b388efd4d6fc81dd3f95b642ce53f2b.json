{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ncontract Army {\r\n\r\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\r\n    Clans clans = Clans(0x0);\r\n\r\n    uint224 public totalArmyPower; // Global power of players (attack + defence)\r\n    uint224 public gooBankroll; // Goo dividends to be split over time between clans/players' army power\r\n    uint256 public nextSnapshotTime;\r\n    address public owner; // Minor management of game\r\n\r\n    mapping(address => mapping(uint256 => ArmyPower)) public armyPowerSnapshots; // Store player's army power for given day (snapshot)\r\n    mapping(address => mapping(uint256 => bool)) public armyPowerZeroedSnapshots; // Edgecase to determine difference between 0 army and an unused/inactive day.\r\n    mapping(address => uint256) public lastWarFundClaim; // Days (snapshot number)\r\n    mapping(address => uint256) public lastArmyPowerUpdate; // Days (last snapshot) player's army was updated\r\n    mapping(address => bool) operator;\r\n\r\n    uint224[] public totalArmyPowerSnapshots; // The total player army power for each prior day past\r\n    uint224[] public allocatedWarFundSnapshots; // Div pot (goo allocated to each prior day past)\r\n    \r\n    uint224 public playerDivPercent = 2;\r\n    uint224 public clanDivPercent = 2;\r\n\r\n    struct ArmyPower {\r\n        uint80 attack;\r\n        uint80 defense;\r\n        uint80 looting;\r\n    }\r\n\r\n    constructor(uint256 firstSnapshotTime) public {\r\n        nextSnapshotTime = firstSnapshotTime;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setClans(address clansContract) external {\r\n        require(msg.sender == owner);\r\n        clans = Clans(clansContract);\r\n    }\r\n\r\n    function setOperator(address gameContract, bool isOperator) external {\r\n        require(msg.sender == owner);\r\n        operator[gameContract] = isOperator;\r\n    }\r\n    \r\n    function updateDailyDivPercents(uint224 newPlayersPercent, uint224 newClansPercent) external {\r\n        require(msg.sender == owner);\r\n        require(newPlayersPercent > 0 && newPlayersPercent <= 10); // 1-10% daily\r\n        require(newClansPercent > 0 && newClansPercent <= 10); // 1-10% daily\r\n        playerDivPercent = newPlayersPercent;\r\n        clanDivPercent = newClansPercent;\r\n    }\r\n\r\n    function depositSpentGoo(uint224 gooSpent) external {\r\n        require(operator[msg.sender]);\r\n        gooBankroll += gooSpent;\r\n    }\r\n\r\n    function getArmyPower(address player) external view returns (uint80, uint80, uint80) {\r\n        ArmyPower memory armyPower = armyPowerSnapshots[player][lastArmyPowerUpdate[player]];\r\n        return (armyPower.attack, armyPower.defense, armyPower.looting);\r\n    }\r\n    \r\n    // Convenience function \r\n    function getArmiesPower(address player, address target) external view returns (uint80 playersAttack, uint80 playersLooting, uint80 targetsDefense) {\r\n        ArmyPower memory armyPower = armyPowerSnapshots[player][lastArmyPowerUpdate[player]];\r\n        playersAttack = armyPower.attack;\r\n        playersLooting = armyPower.looting;\r\n        targetsDefense = armyPowerSnapshots[target][lastArmyPowerUpdate[target]].defense;\r\n    }\r\n\r\n    function increasePlayersArmyPowerTrio(address player, uint80 attackGain, uint80 defenseGain, uint80 lootingGain) public {\r\n        require(operator[msg.sender]);\r\n\r\n        ArmyPower memory existingArmyPower = armyPowerSnapshots[player][lastArmyPowerUpdate[player]];\r\n        uint256 snapshotDay = allocatedWarFundSnapshots.length;\r\n\r\n        // Adjust army power (reusing struct)\r\n        existingArmyPower.attack += attackGain;\r\n        existingArmyPower.defense += defenseGain;\r\n        existingArmyPower.looting += lootingGain;\r\n        armyPowerSnapshots[player][snapshotDay] = existingArmyPower;\r\n\r\n        if (lastArmyPowerUpdate[player] != snapshotDay) {\r\n            lastArmyPowerUpdate[player] = snapshotDay;\r\n        }\r\n        \r\n        totalArmyPower += (attackGain + defenseGain);\r\n        clans.increaseClanPower(player, attackGain + defenseGain);\r\n    }\r\n\r\n    function decreasePlayersArmyPowerTrio(address player, uint80 attackLoss, uint80 defenseLoss, uint80 lootingLoss) public {\r\n        require(operator[msg.sender]);\r\n\r\n        ArmyPower memory existingArmyPower = armyPowerSnapshots[player][lastArmyPowerUpdate[player]];\r\n        uint256 snapshotDay = allocatedWarFundSnapshots.length;\r\n\r\n        // Adjust army power (reusing struct)\r\n        existingArmyPower.attack -= attackLoss;\r\n        existingArmyPower.defense -= defenseLoss;\r\n        existingArmyPower.looting -= lootingLoss;\r\n\r\n        if (existingArmyPower.attack == 0 && existingArmyPower.defense == 0) { // Special case which tangles with \"inactive day\" snapshots (claiming divs)\r\n            armyPowerZeroedSnapshots[player][snapshotDay] = true;\r\n            delete armyPowerSnapshots[player][snapshotDay]; // 0\r\n        } else {\r\n            armyPowerSnapshots[player][snapshotDay] = existingArmyPower;\r\n        }\r\n        \r\n        if (lastArmyPowerUpdate[player] != snapshotDay) {\r\n            lastArmyPowerUpdate[player] = snapshotDay;\r\n        }\r\n\r\n        totalArmyPower -= (attackLoss + defenseLoss);\r\n        clans.decreaseClanPower(player, attackLoss + defenseLoss);\r\n    }\r\n\r\n    function changePlayersArmyPowerTrio(address player, int attackChange, int defenseChange, int lootingChange) public {\r\n        require(operator[msg.sender]);\r\n\r\n        ArmyPower memory existingArmyPower = armyPowerSnapshots[player][lastArmyPowerUpdate[player]];\r\n        uint256 snapshotDay = allocatedWarFundSnapshots.length;\r\n\r\n        // Allow change to be positive or negative\r\n        existingArmyPower.attack = uint80(int(existingArmyPower.attack) + attackChange);\r\n        existingArmyPower.defense = uint80(int(existingArmyPower.defense) + defenseChange);\r\n        existingArmyPower.looting = uint80(int(existingArmyPower.looting) + lootingChange);\r\n\r\n        if (existingArmyPower.attack == 0 && existingArmyPower.defense == 0) { // Special case which tangles with \"inactive day\" snapshots (claiming divs)\r\n            armyPowerZeroedSnapshots[player][snapshotDay] = true;\r\n            delete armyPowerSnapshots[player][snapshotDay]; // 0\r\n        } else {\r\n            armyPowerSnapshots[player][snapshotDay] = existingArmyPower;\r\n        }\r\n\r\n        if (lastArmyPowerUpdate[player] != snapshotDay) {\r\n            lastArmyPowerUpdate[player] = snapshotDay;\r\n        }\r\n        changeTotalArmyPower(player, attackChange, defenseChange);\r\n    }\r\n\r\n    function changeTotalArmyPower(address player, int attackChange, int defenseChange) internal {\r\n        uint224 newTotal = uint224(int(totalArmyPower) + attackChange + defenseChange);\r\n\r\n        if (newTotal > totalArmyPower) {\r\n            clans.increaseClanPower(player, newTotal - totalArmyPower);\r\n        } else if (newTotal < totalArmyPower) {\r\n            clans.decreaseClanPower(player, totalArmyPower - newTotal);\r\n        }\r\n        totalArmyPower = newTotal;\r\n    }\r\n\r\n    // Allocate army power divs for the day (00:00 cron job)\r\n    function snapshotDailyWarFunding() external {\r\n        require(msg.sender == owner);\r\n        require(now + 6 hours > nextSnapshotTime);\r\n\r\n        totalArmyPowerSnapshots.push(totalArmyPower);\r\n        allocatedWarFundSnapshots.push((gooBankroll * playerDivPercent) / 100);\r\n        uint256 allocatedClanWarFund = (gooBankroll * clanDivPercent) / 100; // No daily snapshots needed for Clans (as below will also claim between the handful of clans)\r\n        gooBankroll -= (gooBankroll * (playerDivPercent + clanDivPercent)) / 100;  // % of pool daily\r\n\r\n        uint256 numClans = clans.totalSupply();\r\n        uint256[] memory clanArmyPower = new uint256[](numClans);\r\n\r\n        // Get total power from all clans\r\n        uint256 todaysTotalClanPower;\r\n        for (uint256 i = 1; i <= numClans; i++) {\r\n            clanArmyPower[i-1] = clans.clanTotalArmyPower(i);\r\n            todaysTotalClanPower += clanArmyPower[i-1];\r\n        }\r\n\r\n        // Distribute goo divs to clans based on their relative power\r\n        for (i = 1; i <= numClans; i++) {\r\n            clans.depositGoo((allocatedClanWarFund * clanArmyPower[i-1]) / todaysTotalClanPower, i);\r\n        }\r\n\r\n        nextSnapshotTime = now + 24 hours;\r\n    }\r\n\r\n    function claimWarFundDividends(uint256 startSnapshot, uint256 endSnapShot) external {\r\n        require(startSnapshot <= endSnapShot);\r\n        require(startSnapshot >= lastWarFundClaim[msg.sender]);\r\n        require(endSnapShot < allocatedWarFundSnapshots.length);\r\n\r\n        uint224 gooShare;\r\n        ArmyPower memory previousArmyPower = armyPowerSnapshots[msg.sender][lastWarFundClaim[msg.sender] - 1]; // Underflow won't be a problem as armyPowerSnapshots[][0xffffffff] = 0;\r\n        for (uint256 i = startSnapshot; i <= endSnapShot; i++) {\r\n\r\n            // Slightly complex things by accounting for days/snapshots when user made no tx's\r\n            ArmyPower memory armyPowerDuringSnapshot = armyPowerSnapshots[msg.sender][i];\r\n            bool soldAllArmy = armyPowerZeroedSnapshots[msg.sender][i];\r\n            if (!soldAllArmy && armyPowerDuringSnapshot.attack == 0 && armyPowerDuringSnapshot.defense == 0) {\r\n                armyPowerDuringSnapshot = previousArmyPower;\r\n            } else {\r\n               previousArmyPower = armyPowerDuringSnapshot;\r\n            }\r\n\r\n            gooShare += (allocatedWarFundSnapshots[i] * (armyPowerDuringSnapshot.attack + armyPowerDuringSnapshot.defense)) / totalArmyPowerSnapshots[i];\r\n        }\r\n\r\n\r\n        ArmyPower memory endSnapshotArmyPower = armyPowerSnapshots[msg.sender][endSnapShot];\r\n        if (endSnapshotArmyPower.attack == 0 && endSnapshotArmyPower.defense == 0 && !armyPowerZeroedSnapshots[msg.sender][endSnapShot] && (previousArmyPower.attack + previousArmyPower.defense) > 0) {\r\n            armyPowerSnapshots[msg.sender][endSnapShot] = previousArmyPower; // Checkpoint for next claim\r\n        }\r\n\r\n        lastWarFundClaim[msg.sender] = endSnapShot + 1;\r\n\r\n        (uint224 clanFee, uint224 leaderFee, address leader, uint224 referalFee, address referer) = clans.getPlayerFees(msg.sender);\r\n        if (clanFee > 0) {\r\n            clanFee = (gooShare * clanFee) / 100; // Convert from percent to goo\r\n            leaderFee = (gooShare * leaderFee) / 100; // Convert from percent to goo\r\n            clans.mintGoo(msg.sender, clanFee);\r\n            goo.mintGoo(leaderFee, leader);\r\n        }\r\n        if (referer == address(0)) {\r\n            referalFee = 0;\r\n        } else if (referalFee > 0) {\r\n            referalFee = (gooShare * referalFee) / 100; // Convert from percent to goo\r\n            goo.mintGoo(referalFee, referer);\r\n        }\r\n        \r\n        goo.mintGoo(gooShare - (clanFee + leaderFee + referalFee), msg.sender);\r\n    }\r\n\r\n    function getSnapshotDay() external view returns (uint256 snapshot) {\r\n        snapshot = allocatedWarFundSnapshots.length;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract GooToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool);\r\n    function increasePlayersGooProduction(address player, uint256 increase) external;\r\n    function decreasePlayersGooProduction(address player, uint256 decrease) external;\r\n    function updatePlayersGooFromPurchase(address player, uint224 purchaseCost) external;\r\n    function updatePlayersGoo(address player) external;\r\n    function mintGoo(uint224 amount, address player) external;\r\n}\r\n\r\ncontract Clans {\r\n    mapping(uint256 => uint256) public clanTotalArmyPower;\r\n    function totalSupply() external view returns (uint256);\r\n    function depositGoo(uint256 amount, uint256 clanId) external;\r\n    function getPlayerFees(address player) external view returns (uint224 clansFee, uint224 leadersFee, address leader, uint224 referalsFee, address referer);\r\n    function getPlayersClanUpgrade(address player, uint256 upgradeClass) external view returns (uint224 upgradeGain);\r\n    function mintGoo(address player, uint256 amount) external;\r\n    function increaseClanPower(address player, uint256 amount) external;\r\n    function decreaseClanPower(address player, uint256 amount) external;\r\n}\r\n\r\ncontract Factories {\r\n    uint256 public constant MAX_SIZE = 40;\r\n    function getFactories(address player) external returns (uint256[]);\r\n    function addFactory(address player, uint8 position, uint256 unitId) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint224 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath224 {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint224 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint224 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint224 a, uint224 b) internal pure returns (uint224) {\r\n    uint224 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"attackChange\",\"type\":\"int256\"},{\"name\":\"defenseChange\",\"type\":\"int256\"},{\"name\":\"lootingChange\",\"type\":\"int256\"}],\"name\":\"changePlayersArmyPowerTrio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gooSpent\",\"type\":\"uint224\"}],\"name\":\"depositSpentGoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSnapshotDay\",\"outputs\":[{\"name\":\"snapshot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocatedWarFundSnapshots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startSnapshot\",\"type\":\"uint256\"},{\"name\":\"endSnapShot\",\"type\":\"uint256\"}],\"name\":\"claimWarFundDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"armyPowerZeroedSnapshots\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"attackGain\",\"type\":\"uint80\"},{\"name\":\"defenseGain\",\"type\":\"uint80\"},{\"name\":\"lootingGain\",\"type\":\"uint80\"}],\"name\":\"increasePlayersArmyPowerTrio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameContract\",\"type\":\"address\"},{\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gooBankroll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"armyPowerSnapshots\",\"outputs\":[{\"name\":\"attack\",\"type\":\"uint80\"},{\"name\":\"defense\",\"type\":\"uint80\"},{\"name\":\"looting\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snapshotDailyWarFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalArmyPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPlayersPercent\",\"type\":\"uint224\"},{\"name\":\"newClansPercent\",\"type\":\"uint224\"}],\"name\":\"updateDailyDivPercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerDivPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSnapshotTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getArmiesPower\",\"outputs\":[{\"name\":\"playersAttack\",\"type\":\"uint80\"},{\"name\":\"playersLooting\",\"type\":\"uint80\"},{\"name\":\"targetsDefense\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastArmyPowerUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalArmyPowerSnapshots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clanDivPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getArmyPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint80\"},{\"name\":\"\",\"type\":\"uint80\"},{\"name\":\"\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWarFundClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clansContract\",\"type\":\"address\"}],\"name\":\"setClans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"attackLoss\",\"type\":\"uint80\"},{\"name\":\"defenseLoss\",\"type\":\"uint80\"},{\"name\":\"lootingLoss\",\"type\":\"uint80\"}],\"name\":\"decreasePlayersArmyPowerTrio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"firstSnapshotTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Army","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005cce2780","Library":"","SwarmSource":"bzzr://f80843ec46150aac0f4ce6539e4cbe259e44e99936b05dcc69ac1e69597cc9c7"}]}