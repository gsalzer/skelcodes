{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.25;\r\n\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n\r\ncontract tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n\r\n \r\n\r\n    function transfer(address to, uint value) returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n\r\n    function approve(address spender, uint value) returns(bool ok);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\n\r\ncontract XBV is ERC20  {\r\n\r\n    using SafeMath\r\n    for uint256;\r\n    /* Public variables of the token */\r\n    string public standard = 'XBV 4.0';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public initialSupply;\r\n    bool initialize;\r\n    address public owner;\r\n\r\n    mapping( address => uint256) public balanceOf;\r\n    mapping( address => mapping(address => uint256)) public allowance;\r\n    \r\n    mapping( address => bool ) public accountFrozen;\r\n    \r\n    mapping( uint256 => address ) public addressesFrozen;\r\n    uint256 public frozenAddresses;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function XBV() {\r\n\r\n        uint256 _initialSupply = 100000000000000000000000000; \r\n        uint8 decimalUnits = 18;\r\n        balanceOf[msg.sender] = _initialSupply; // Give the creator all initial tokens\r\n        totalSupply = _initialSupply; // Update total supply\r\n        initialSupply = _initialSupply;\r\n        name = \"XBV\"; // Set the name for display purposes\r\n        symbol = \"XBV\"; // Set the symbol for display purposes\r\n        decimals = decimalUnits; // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        \r\n    }\r\n\r\n   function changeOwner ( address _owner ) onlyOwner {\r\n       \r\n       owner = _owner;\r\n       \r\n   }\r\n   \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    function transfer( address _to, uint256 _value ) returns(bool ok) {\r\n        \r\n        require ( accountFrozen[ msg.sender ] == false );\r\n        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n        bytes memory empty;\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(  _value ); // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\r\n        \r\n         if(isContract( _to )) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        \r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n     function transfer( address _to, uint256 _value, bytes _data ) returns(bool ok) {\r\n         \r\n        require ( accountFrozen[ msg.sender ] == false );\r\n        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n        bytes memory empty;\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(  _value ); // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\r\n        \r\n         if(isContract( _to )) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        \r\n        Transfer(msg.sender, _to, _value, _data); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    function isContract( address _to ) internal returns ( bool ){\r\n        \r\n        \r\n        uint codeLength = 0;\r\n        \r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n         if(codeLength>0) {\r\n           \r\n           return true;\r\n           \r\n        }\r\n        \r\n        return false;\r\n        \r\n    }\r\n    \r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval( msg.sender ,_spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall( address _spender, uint256 _value, bytes _extraData )\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        \r\n        if (_from == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[_from] < _value) throw; // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\r\n        balanceOf[_from] = balanceOf[_from].sub( _value ); // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function burn(uint256 _value) returns(bool success) {\r\n        \r\n        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub( _value ); // Subtract from the sender\r\n        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n   function burnFrom(address _from, uint256 _value) returns(bool success) {\r\n        \r\n        if (_from == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[_from] < _value) throw; \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balanceOf[_from] = balanceOf[_from].sub( _value ); \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \r\n        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function mintXBV ( uint256 _amount ) onlyOwner {\r\n        \r\n         \r\n         assert ( _amount > 0 );\r\n         uint256 tokens = _amount *(10**18);\r\n         balanceOf[msg.sender] = balanceOf[msg.sender].add( tokens );\r\n    \r\n        \r\n    }\r\n    \r\n    function  freezeAccount ( address _address ) onlyOwner {\r\n        \r\n        frozenAddresses++;\r\n        accountFrozen [ _address ] = true;\r\n        addressesFrozen[ frozenAddresses ] = _address;\r\n        \r\n    }\r\n\r\n    function  unfreezeAccount ( address _address ) onlyOwner {\r\n        \r\n        accountFrozen [ _address ] = false;\r\n        \r\n    }\r\n\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintXBV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressesFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"XBV","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73e79749cd0c58d3ac0be82a5778172c2e5e3e3325f51df5443f0f44a34ff680"}]}