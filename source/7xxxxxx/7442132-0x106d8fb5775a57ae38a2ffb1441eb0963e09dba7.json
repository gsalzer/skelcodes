{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/TrueCoinReceiver.sol\r\n\r\ncontract TrueCoinReceiver {\r\n    function tokenFallback( address from, uint256 value ) external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: registry/contracts/Registry.sol\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an ERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(WRITE_PERMISSION ^ _attribute)));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/modularERC20/BalanceSheet.sol\r\n\r\n// A wrapper around the balanceOf mapping.\r\ncontract BalanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/modularERC20/AllowanceSheet.sol\r\n\r\n// A wrapper around the allowanceOf mapping.\r\ncontract AllowanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/ProxyStorage.sol\r\n\r\n/*\r\nDefines the storage layout of the token implementaiton contract. Any newly declared \r\nstate variables in future upgrades should be appened to the bottom. Never remove state variables\r\nfrom this list\r\n */\r\ncontract ProxyStorage {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    bool initialized;\r\n    \r\n    BalanceSheet balances_Deprecated;\r\n    AllowanceSheet allowances_Deprecated;\r\n\r\n    uint256 totalSupply_;\r\n    \r\n    bool private paused_Deprecated = false;\r\n    address private globalPause_Deprecated;\r\n\r\n    uint256 public burnMin = 0;\r\n    uint256 public burnMax = 0;\r\n\r\n    Registry public registry;\r\n\r\n    string name_Deprecated;\r\n    string symbol_Deprecated;\r\n\r\n    uint[] gasRefundPool_Deprecated;\r\n    uint256 private redemptionAddressCount_Deprecated;\r\n    uint256 public minimumGasPriceForFutureRefunds;\r\n}\r\n\r\n// File: contracts/HasOwner.sol\r\n\r\n/**\r\n * @title HasOwner\r\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin. \r\n and provides basic authorization control functions. Inherits storage layout of \r\n ProxyStorage.\r\n */\r\ncontract HasOwner is ProxyStorage {\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev sets the original `owner` of the contract to the sender\r\n    * at construction. Must then be reinitialized \r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/ReclaimerToken.sol\r\n\r\ncontract ReclaimerToken is HasOwner {\r\n    /**  \r\n    *@dev send all eth balance in the contract to another address\r\n    */\r\n    function reclaimEther(address _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**  \r\n    *@dev send all token balance of an arbitary erc20 token\r\n    in the contract to another address\r\n    */\r\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**  \r\n    *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns\r\n    */\r\n    function reclaimContract(Ownable _ownable) external onlyOwner {\r\n        _ownable.transferOwnership(owner);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/modularERC20/ModularBasicToken.sol\r\n\r\n// Fork of OpenZeppelin's BasicToken\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract ModularBasicToken is HasOwner {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return _getBalance(_who);\r\n    }\r\n    function _getBalance(address _who) internal view returns (uint256 outBalance) {\r\n        bytes32 storageLocation = keccak256(_who);\r\n        assembly {\r\n            outBalance := sload(storageLocation)\r\n        }\r\n    }\r\n    function _addBalance(address _who, uint256 _value) internal returns (uint256 priorBalance) {\r\n        bytes32 storageLocation = keccak256(_who);\r\n        assembly {\r\n            priorBalance := sload(storageLocation)\r\n        }\r\n        uint256 result = priorBalance.add(_value);\r\n        assembly {\r\n            sstore(storageLocation, result)\r\n        }\r\n    }\r\n    function _subBalance(address _who, uint256 _value) internal returns (uint256 result) {\r\n        bytes32 storageLocation = keccak256(_who);\r\n        uint256 priorBalance;\r\n        assembly {\r\n            priorBalance := sload(storageLocation)\r\n        }\r\n        result = priorBalance.sub(_value);\r\n        assembly {\r\n            sstore(storageLocation, result)\r\n        }\r\n    }\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        bytes32 storageLocation = keccak256(_who);\r\n        assembly {\r\n            sstore(storageLocation, _value)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modularERC20/ModularStandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ModularStandardToken is ModularBasicToken {\r\n    using SafeMath for uint256;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _approveAllArgs(_spender, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\r\n        _setAllowance(_tokenHolder, _spender, _value);\r\n        emit Approval(_tokenHolder, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        _increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _increaseApprovalAllArgs(address _spender, uint256 _addedValue, address _tokenHolder) internal {\r\n        _addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(_tokenHolder, _spender, _getAllowance(_tokenHolder, _spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        _decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _decreaseApprovalAllArgs(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\r\n        uint256 oldValue = _getAllowance(_tokenHolder, _spender);\r\n        uint256 newValue;\r\n        if (_subtractedValue > oldValue) {\r\n            newValue = 0;\r\n        } else {\r\n            newValue = oldValue - _subtractedValue;\r\n        }\r\n        _setAllowance(_tokenHolder, _spender, newValue);\r\n        emit Approval(_tokenHolder,_spender, newValue);\r\n    }\r\n\r\n    function allowance(address _who, address _spender) public view returns (uint256) {\r\n        return _getAllowance(_who, _spender);\r\n    }\r\n\r\n    function _getAllowance(address _who, address _spender) internal view returns (uint256 value) {\r\n        bytes32 storageLocation = keccak256(_who, _spender);\r\n        assembly {\r\n            value := sload(storageLocation)\r\n        }\r\n    }\r\n    function _addAllowance(address _who, address _spender, uint256 _value) internal {\r\n        bytes32 storageLocation = keccak256(_who, _spender);\r\n        uint256 value;\r\n        assembly {\r\n            value := sload(storageLocation)\r\n        }\r\n        value = value.add(_value);\r\n        assembly {\r\n            sstore(storageLocation, value)\r\n        }\r\n    }\r\n    function _subAllowance(address _who, address _spender, uint256 _value) internal returns (bool allowanceZero){\r\n        bytes32 storageLocation = keccak256(_who, _spender);\r\n        uint256 value;\r\n        assembly {\r\n            value := sload(storageLocation)\r\n        }\r\n        value = value.sub(_value);\r\n        assembly {\r\n            sstore(storageLocation, value)\r\n        }\r\n        allowanceZero = value == 0;\r\n    }\r\n    function _setAllowance(address _who, address _spender, uint256 _value) internal {\r\n        bytes32 storageLocation = keccak256(_who, _spender);\r\n        assembly {\r\n            sstore(storageLocation, _value)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modularERC20/ModularBurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ModularBurnableToken is ModularStandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Mint(address indexed to, uint256 value);\r\n    uint256 constant CENT = 10 ** 16;\r\n\r\n    function burn(uint256 _value) external {\r\n        _burnAllArgs(msg.sender, _value - _value % CENT);\r\n    }\r\n\r\n    function _burnAllArgs(address _from, uint256 _value) internal {\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        _subBalance(_from, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n}\r\n\r\n// File: contracts/BurnableTokenWithBounds.sol\r\n\r\n/**\r\n * @title Burnable Token WithBounds\r\n * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,\r\n * and will send them back the equivalent amount of money (rounded down to the nearest cent).\r\n */\r\ncontract BurnableTokenWithBounds is ModularBurnableToken {\r\n\r\n    event SetBurnBounds(uint256 newMin, uint256 newMax);\r\n\r\n    function _burnAllArgs(address _burner, uint256 _value) internal {\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        super._burnAllArgs(_burner, _value);\r\n    }\r\n\r\n    //Change the minimum and maximum amount that can be burned at once. Burning\r\n    //may be disabled by setting both to 0 (this will not be done under normal\r\n    //operation, but we can't add checks to disallow it without losing a lot of\r\n    //flexibility since burning could also be as good as disabled\r\n    //by setting the minimum extremely high, and we don't want to lock\r\n    //in any particular cap for the minimum)\r\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\r\n        require(_min <= _max, \"min > max\");\r\n        burnMin = _min;\r\n        burnMax = _max;\r\n        emit SetBurnBounds(_min, _max);\r\n    }\r\n}\r\n\r\n// File: contracts/GasRefundToken.sol\r\n\r\n/**  \r\n@title Gas Refund Token\r\nAllow any user to sponsor gas refunds for transfer and mints. Utilitzes the gas refund mechanism in EVM\r\nEach time an non-empty storage slot is set to 0, evm refund 15,000 (19,000 after Constantinople) to the sender\r\nof the transaction. \r\n*/\r\ncontract GasRefundToken is ProxyStorage {\r\n\r\n    function sponsorGas() external {\r\n        uint256 refundPrice = minimumGasPriceForFutureRefunds;\r\n        require(refundPrice > 0);\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let result := add(offset, 9)\r\n            sstore(0xfffff, result)\r\n            let position := add(offset, 0x100000)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n        }\r\n    }\r\n\r\n    function minimumGasPriceForRefund() public view returns (uint256 result) {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let location := add(offset, 0xfffff)\r\n            result := add(sload(location), 1)\r\n        }\r\n    }\r\n\r\n    /**  \r\n    @dev refund 45,000 gas for functions with gasRefund modifier.\r\n    @dev costs slightly more than 20,400 gas\r\n    */\r\n    function gasRefund45() internal {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            if gt(offset, 2) {\r\n                let location := add(offset, 0xfffff)\r\n                if gt(gasprice,sload(location)) {\r\n                    sstore(location, 0)\r\n                    location := sub(location, 1)\r\n                    sstore(location, 0)\r\n                    location := sub(location, 1)\r\n                    sstore(location, 0)\r\n                    sstore(0xfffff, sub(offset, 3))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**  \r\n    @dev refund 30,000 gas for functions with gasRefund modifier.\r\n    @dev costs slightly more than 15,400 gas\r\n    */\r\n    function gasRefund30() internal {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            if gt(offset, 1) {\r\n                let location := add(offset, 0xfffff)\r\n                if gt(gasprice,sload(location)) {\r\n                    sstore(location, 0)\r\n                    location := sub(location, 1)\r\n                    sstore(location, 0)\r\n                    sstore(0xfffff, sub(offset, 2))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**  \r\n    @dev refund 15,000 gas for functions with gasRefund modifier.\r\n    @dev costs slightly more than 10,200 gas\r\n    */\r\n    function gasRefund15() internal {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            if gt(offset, 1) {\r\n                let location := add(offset, 0xfffff)\r\n                if gt(gasprice,sload(location)) {\r\n                    sstore(location, 0)\r\n                    sstore(0xfffff, sub(offset, 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**  \r\n    *@dev Return the remaining sponsored gas slots\r\n    */\r\n    function remainingGasRefundPool() public view returns (uint length) {\r\n        assembly {\r\n            length := sload(0xfffff)\r\n        }\r\n    }\r\n\r\n    function gasRefundPool(uint256 _index) public view returns (uint256 gasPrice) {\r\n        assembly {\r\n            gasPrice := sload(add(0x100000, _index))\r\n        }\r\n    }\r\n\r\n    bytes32 constant CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE = \"canSetFutureRefundMinGasPrice\";\r\n\r\n    function setMinimumGasPriceForFutureRefunds(uint256 _minimumGasPriceForFutureRefunds) public {\r\n        require(registry.hasAttribute(msg.sender, CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE));\r\n        minimumGasPriceForFutureRefunds = _minimumGasPriceForFutureRefunds;\r\n    }\r\n}\r\n\r\n// File: contracts/CompliantDepositTokenWithHook.sol\r\n\r\ncontract CompliantDepositTokenWithHook is ReclaimerToken, RegistryClone, BurnableTokenWithBounds, GasRefundToken {\r\n\r\n    bytes32 constant IS_REGISTERED_CONTRACT = \"isRegisteredContract\";\r\n    bytes32 constant IS_DEPOSIT_ADDRESS = \"isDepositAddress\";\r\n    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\r\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\r\n\r\n    function canBurn() internal pure returns (bytes32);\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        address _from = msg.sender;\r\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\r\n            _value -= _value % CENT;\r\n            _burnFromAllArgs(_from, _to, _value);\r\n        } else {\r\n            _transferAllArgs(_from, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\r\n            _value -= _value % CENT;\r\n            _burnFromAllowanceAllArgs(_from, _to, _value);\r\n        } else {\r\n            _transferFromAllArgs(_from, _to, _value, msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _burnFromAllowanceAllArgs(address _from, address _to, uint256 _value) internal {\r\n        _requireCanTransferFrom(msg.sender, _from, _to);\r\n        _requireOnlyCanBurn(_to);\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        if (0 == _subBalance(_from, _value)) {\r\n            if (_subAllowance(_from, msg.sender, _value)) {\r\n                // no refund\r\n            } else {\r\n                gasRefund15();\r\n            }\r\n        } else {\r\n            if (_subAllowance(_from, msg.sender, _value)) {\r\n                gasRefund15();\r\n            } else {\r\n                gasRefund45();\r\n            }\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_to, _value);\r\n        emit Transfer(_to, address(0), _value);\r\n    }\r\n\r\n    function _burnFromAllArgs(address _from, address _to, uint256 _value) internal {\r\n        _requireCanTransfer(_from, _to);\r\n        _requireOnlyCanBurn(_to);\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        if (0 == _subBalance(_from, _value)) {\r\n            gasRefund15();\r\n        } else {\r\n            gasRefund30();\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_to, _value);\r\n        emit Transfer(_to, address(0), _value);\r\n    }\r\n\r\n    function _transferFromAllArgs(address _from, address _to, uint256 _value, address _sender) internal {\r\n        bool hasHook;\r\n        address originalTo = _to;\r\n        (_to, hasHook) = _requireCanTransferFrom(_sender, _from, _to);\r\n        if (0 == _addBalance(_to, _value)) {\r\n            if (_subAllowance(_from, _sender, _value)) {\r\n                if (0 == _subBalance(_from, _value)) {\r\n                    // do not refund\r\n                } else {\r\n                    gasRefund30();\r\n                }\r\n            } else {\r\n                if (0 == _subBalance(_from, _value)) {\r\n                    gasRefund30();\r\n                } else {\r\n                    gasRefund45();\r\n                }\r\n            }\r\n        } else {\r\n            if (_subAllowance(_from, _sender, _value)) {\r\n                if (0 == _subBalance(_from, _value)) {\r\n                    // do not refund\r\n                } else {\r\n                    gasRefund15();\r\n                }\r\n            } else {\r\n                if (0 == _subBalance(_from, _value)) {\r\n                    gasRefund15();\r\n                } else {\r\n                    gasRefund30();\r\n                }\r\n            }\r\n\r\n        }\r\n        emit Transfer(_from, originalTo, _value);\r\n        if (originalTo != _to) {\r\n            emit Transfer(originalTo, _to, _value);\r\n            if (hasHook) {\r\n                TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\r\n            }\r\n        } else {\r\n            if (hasHook) {\r\n                TrueCoinReceiver(_to).tokenFallback(_from, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal {\r\n        bool hasHook;\r\n        address finalTo;\r\n        (finalTo, hasHook) = _requireCanTransfer(_from, _to);\r\n        if (0 == _subBalance(_from, _value)) {\r\n            if (0 == _addBalance(finalTo, _value)) {\r\n                gasRefund30();\r\n            } else {\r\n                // do not refund\r\n            }\r\n        } else {\r\n            if (0 == _addBalance(finalTo, _value)) {\r\n                gasRefund45();\r\n            } else {\r\n                gasRefund30();\r\n            }\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        if (finalTo != _to) {\r\n            emit Transfer(_to, finalTo, _value);\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_to, _value);\r\n            }\r\n        } else {\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_from, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) public onlyOwner {\r\n        require(_to != address(0), \"to address cannot be zero\");\r\n        bool hasHook;\r\n        address originalTo = _to;\r\n        (_to, hasHook) = _requireCanMint(_to);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        emit Mint(originalTo, _value);\r\n        emit Transfer(address(0), originalTo, _value);\r\n        if (_to != originalTo) {\r\n            emit Transfer(originalTo, _to, _value);\r\n        }\r\n        _addBalance(_to, _value);\r\n        if (hasHook) {\r\n            if (_to != originalTo) {\r\n                TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\r\n            } else {\r\n                TrueCoinReceiver(_to).tokenFallback(address(0), _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\r\n    event SetRegistry(address indexed registry);\r\n\r\n    /**\r\n    * @dev Point to the registry that contains all compliance related data\r\n    @param _registry The address of the registry instance\r\n    */\r\n    function setRegistry(Registry _registry) public onlyOwner {\r\n        registry = _registry;\r\n        emit SetRegistry(registry);\r\n    }\r\n\r\n    modifier onlyRegistry {\r\n      require(msg.sender == address(registry));\r\n      _;\r\n    }\r\n\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\r\n        bytes32 storageLocation = keccak256(_who, _attribute);\r\n        assembly {\r\n            sstore(storageLocation, _value)\r\n        }\r\n    }\r\n\r\n    function _burnAllArgs(address _from, uint256 _value) internal {\r\n        _requireCanBurn(_from);\r\n        super._burnAllArgs(_from, _value);\r\n    }\r\n\r\n    // Destroy the tokens owned by a blacklisted account\r\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\r\n        require(_isBlacklisted(_account), \"_account is not blacklisted\");\r\n        uint256 oldValue = _getBalance(_account);\r\n        _setBalance(_account, 0);\r\n        totalSupply_ = totalSupply_.sub(oldValue);\r\n        emit WipeBlacklistedAccount(_account, oldValue);\r\n        emit Transfer(_account, address(0), oldValue);\r\n    }\r\n\r\n    function _isBlacklisted(address _account) internal view returns (bool blacklisted) {\r\n        bytes32 storageLocation = keccak256(_account, IS_BLACKLISTED);\r\n        assembly {\r\n            blacklisted := sload(storageLocation)\r\n        }\r\n    }\r\n\r\n    function _requireCanTransfer(address _from, address _to) internal view returns (address, bool) {\r\n        uint256 depositAddressValue;\r\n        bytes32 storageLocation = keccak256(address(uint256(_to) >> 20),IS_DEPOSIT_ADDRESS);\r\n        assembly {\r\n            depositAddressValue := sload(storageLocation)\r\n        }\r\n        if (depositAddressValue != 0) {\r\n            _to = address(depositAddressValue);\r\n        }\r\n        uint256 flag;\r\n        storageLocation = keccak256(_to, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(_from, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(_to, IS_REGISTERED_CONTRACT);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        return (_to, flag != 0);\r\n    }\r\n\r\n    function _requireCanTransferFrom(address _sender, address _from, address _to) internal view returns (address, bool) {\r\n        uint256 flag;\r\n        bytes32 storageLocation = keccak256(_sender, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(address(uint256(_to) >> 20),IS_DEPOSIT_ADDRESS);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        if (flag != 0) {\r\n            _to = address(flag);\r\n        }\r\n        storageLocation = keccak256(_to, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(_from, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(_to, IS_REGISTERED_CONTRACT);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        return (_to, flag != 0);\r\n    }\r\n\r\n    function _requireCanMint(address _to) internal view returns (address, bool) {\r\n        uint256 flag;\r\n        bytes32 storageLocation = keccak256(_to, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(address(uint256(_to) >> 20), IS_DEPOSIT_ADDRESS);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        if (flag != 0) {\r\n            _to = address(flag);\r\n        }\r\n        storageLocation = keccak256(_to, IS_REGISTERED_CONTRACT);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        return (_to, flag != 0);\r\n    }\r\n\r\n    function _requireOnlyCanBurn(address _from) internal view {\r\n        bytes32 storageLocation = keccak256(_from, canBurn());\r\n        uint256 flag;\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag != 0, \"cannot burn from this address\");\r\n    }\r\n\r\n    function _requireCanBurn(address _from) internal view {\r\n        uint256 flag;\r\n        bytes32 storageLocation = keccak256(_from, IS_BLACKLISTED);\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag == 0, \"blacklisted\");\r\n        storageLocation = keccak256(_from, canBurn());\r\n        assembly {\r\n            flag := sload(storageLocation)\r\n        }\r\n        require (flag != 0, \"cannot burn from this address\");\r\n    }\r\n\r\n    function paused() public pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueGBP.sol\r\n\r\n/** @title TrueGBP\r\n* @dev This is the top-level ERC20 contract, but most of the interesting functionality is\r\n* inherited - see the documentation on the corresponding contracts.\r\n*/\r\ncontract TrueGBP is \r\nCompliantDepositTokenWithHook {\r\n\r\n    uint8 constant DECIMALS = 18;\r\n    uint8 constant ROUNDING = 2;\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function rounding() public pure returns (uint8) {\r\n        return ROUNDING;\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return \"TrueGBP\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"TGBP\";\r\n    }\r\n\r\n    function canBurn() internal pure returns (bytes32) {\r\n        return \"canBurnGBP\";\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumGasPriceForFutureRefunds\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasPriceForFutureRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sponsorGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownable\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForFutureRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForRefund\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGasRefundPool\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"wipeBlacklistedAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"gasRefundPool\",\"outputs\":[{\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WipeBlacklistedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetBurnBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TrueGBP","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://310acc00cba0590e06ce0fc6ef6eab5de59e743739deb1521e5ed41c426a3b20"}]}