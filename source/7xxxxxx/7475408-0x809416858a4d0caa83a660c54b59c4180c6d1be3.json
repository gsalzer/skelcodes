{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @daostack/infra/contracts/Reputation.sol\n\npragma solidity ^0.5.4;\n\n\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\n\ncontract Reputation is Ownable {\n\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\n      ///  given value, the block number attached is the one that last changed the\n      ///  value\n    struct Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n          // `value` is the amount of reputation at a specific block number\n        uint128 value;\n    }\n\n      // `balances` is the map that tracks the balance of each address, in this\n      //  contract when the balance changes the block number that the change\n      //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n      // Tracks the history of the `totalSupply` of the reputation\n    Checkpoint[] totalSupplyHistory;\n\n    /// @notice Constructor to create a Reputation\n    constructor(\n    ) public\n    {\n    }\n\n    /// @dev This function makes it easy to get the total number of reputation\n    /// @return The total number of reputation\n    function totalSupply() public view returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n      /// @param _owner The address from which the balance will be retrieved\n      /// @param _blockNumber The block number when the balance is queried\n      /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint256 _blockNumber)\n    public view returns (uint256)\n    {\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\n      /// @param _blockNumber The block number when the totalSupply is queried\n      /// @return The total amount of reputation at `_blockNumber`\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\n      /// @param _user The address that will be assigned the new reputation\n      /// @param _amount The quantity of reputation generated\n      /// @return True if the reputation are generated correctly\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint256 previousBalanceTo = balanceOf(_user);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\n        emit Mint(_user, _amount);\n        return true;\n    }\n\n      /// @notice Burns `_amount` reputation from `_owner`\n      /// @param _user The address that will lose the reputation\n      /// @param _amount The quantity of reputation to burn\n      /// @return True if the reputation are burned correctly\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        uint256 amountBurned = _amount;\n        uint256 previousBalanceFrom = balanceOf(_user);\n        if (previousBalanceFrom < amountBurned) {\n            amountBurned = previousBalanceFrom;\n        }\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\n        emit Burn(_user, amountBurned);\n        return true;\n    }\n\n  ////////////////\n  // Internal helper functions to query and set a value in a snapshot array\n  ////////////////\n\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\n      /// @param checkpoints The history of values being queried\n      /// @param _block The block number to retrieve the value at\n      /// @return The number of reputation being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\n        if (checkpoints.length == 0) {\n            return 0;\n        }\n\n          // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\n            return checkpoints[checkpoints.length-1].value;\n        }\n        if (_block < checkpoints[0].fromBlock) {\n            return 0;\n        }\n\n          // Binary search of the value in the array\n        uint256 min = 0;\n        uint256 max = checkpoints.length-1;\n        while (max > min) {\n            uint256 mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\n      ///  `totalSupplyHistory`\n      /// @param checkpoints The history of data being updated\n      /// @param _value The new number of reputation\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/controller/DAOToken.sol\n\npragma solidity ^0.5.4;\n\n\n\n\n\n/**\n * @title DAOToken, base on zeppelin contract.\n * @dev ERC20 compatible token. It is a mintable, burnable token.\n */\n\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\n\n    string public name;\n    string public symbol;\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant decimals = 18;\n    uint256 public cap;\n\n    /**\n    * @dev Constructor\n    * @param _name - token name\n    * @param _symbol - token symbol\n    * @param _cap - token cap - 0 value means no cap\n    */\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\n    public {\n        name = _name;\n        symbol = _symbol;\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        if (cap > 0)\n            require(totalSupply().add(_amount) <= cap);\n        _mint(_to, _amount);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: contracts/libs/SafeERC20.sol\n\n/*\n\nSafeERC20 by daostack.\nThe code is based on a fix by SECBIT Team.\n\nUSE WITH CAUTION & NO WARRANTY\n\nREFERENCE & RELATED READING\n- https://github.com/ethereum/solidity/issues/4116\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\n\n*/\npragma solidity ^0.5.4;\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero.\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n}\n\n// File: contracts/controller/Avatar.sol\n\npragma solidity ^0.5.4;\n\n\n\n\n\n\n\n/**\n * @title An Avatar holds tokens, reputation and ether for a controller\n */\ncontract Avatar is Ownable {\n    using SafeERC20 for address;\n\n    string public orgName;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\n    event SendEther(uint256 _amountInWei, address indexed _to);\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\n    event ReceiveEther(address indexed _sender, uint256 _value);\n    event MetaData(string _metaData);\n\n    /**\n    * @dev the constructor takes organization name, native token and reputation system\n    and creates an avatar for a controller\n    */\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n        orgName = _orgName;\n        nativeToken = _nativeToken;\n        nativeReputation = _nativeReputation;\n    }\n\n    /**\n    * @dev enables an avatar to receive ethers\n    */\n    function() external payable {\n        emit ReceiveEther(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _value value (ETH) to transfer with the transaction\n    * @return bool    success or fail\n    *         bytes - the return bytes of the called contract's function.\n    */\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\n    public\n    onlyOwner\n    returns(bool success, bytes memory returnValue) {\n      // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }\n\n    /**\n    * @dev send ethers from the avatar's wallet\n    * @param _amountInWei amount to send in Wei units\n    * @param _to send the ethers to this address\n    * @return bool which represents success\n    */\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\n        _to.transfer(_amountInWei);\n        emit SendEther(_amountInWei, _to);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer\n    * @param _externalToken the token contract\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransfer(_to, _value);\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer from a specific account\n    * @param _externalToken the token contract\n    * @param _from the account to spend token from\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransferFrom(\n        IERC20 _externalToken,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeApprove(_spender, _value);\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\n    * @param _metaData a string representing a hash of the meta data\n    * @return bool which represents a success\n    */\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\n        emit MetaData(_metaData);\n        return true;\n    }\n\n\n}\n\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n\npragma solidity ^0.5.4;\n\n\ncontract GlobalConstraintInterface {\n\n    enum CallPhase { Pre, Post, PreAndPost }\n\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    /**\n     * @dev when return if this globalConstraints is pre, post or both.\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n     */\n    function when() public returns(CallPhase);\n}\n\n// File: contracts/controller/ControllerInterface.sol\n\npragma solidity ^0.5.4;\n\n\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens ,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ninterface ControllerInterface {\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n    */\n    function mintReputation(uint256 _amount, address _to, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\n    external\n    returns(bool);\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister a scheme\n     * @param _avatar address\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool);\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\n    external returns(bool);\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\n    external  returns(bool);\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @param _value value (ETH) to transfer with the transaction\n    * @return bool -success\n    *         bytes  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\n    external\n    returns(bool, bytes memory);\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(\n    IERC20 _externalToken,\n    address _from,\n    address _to,\n    uint256 _value,\n    Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\n    * @param _metaData a string representing a hash of the meta data\n    * @param _avatar Avatar\n    * @return bool which represents a success\n    */\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar)\n    external\n    view\n    returns(address);\n\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\n\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\n\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\n\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\n\n    /**\n     * @dev globalConstraintsCount return the global constraint pre and post count\n     * @return uint256 globalConstraintsPre count.\n     * @return uint256 globalConstraintsPost count.\n     */\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\n\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\n}\n\n// File: contracts/controller/UController.sol\n\npragma solidity ^0.5.4;\n\n\n\n\n\n/**\n * @title Universal Controller contract\n * @dev A universal controller hold organizations and controls their tokens ,reputations\n *       and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ncontract UController is ControllerInterface {\n\n    struct Scheme {\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\n        bytes4  permissions; // A bitwise flags of permissions,\n                            // All 0: Not registered,\n                            // 1st bit: Flag if the scheme is registered,\n                            // 2nd bit: Scheme can register other schemes\n                            // 3th bit: Scheme can add/remove global constraints\n                            // 4rd bit: Scheme can upgrade the controller\n                            // 5th bit: Scheme can call delegatecall\n    }\n\n    struct GlobalConstraint {\n        address gcAddress;\n        bytes32 params;\n    }\n\n    struct GlobalConstraintRegister {\n        bool isRegistered; //is registered\n        uint256 index;    //index at globalConstraints\n    }\n\n    struct Organization {\n        DAOToken                  nativeToken;\n        Reputation                nativeReputation;\n        mapping(address=>Scheme)  schemes;\n      // globalConstraintsPre that determine pre- conditions for all actions on the controller\n        GlobalConstraint[] globalConstraintsPre;\n        // globalConstraintsPost that determine post-conditions for all actions on the controller\n        GlobalConstraint[] globalConstraintsPost;\n      // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a Pre global constraint.\n        mapping(address=>GlobalConstraintRegister) globalConstraintsRegisterPre;\n      // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a Post global constraint.\n        mapping(address=>GlobalConstraintRegister) globalConstraintsRegisterPost;\n    }\n\n    //mapping between organization's avatar address to Organization\n    mapping(address=>Organization) public organizations;\n    // newController will point to the new controller after the present controller is upgraded\n    //  address external newController;\n    mapping(address=>address) public newControllers;//mapping between avatar address and newController address\n    //mapping for all reputation system and tokens addresses registered.\n    mapping(address=>bool) public actors;\n\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount, address indexed _avatar);\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount, address indexed _avatar);\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount, address indexed _avatar);\n    event RegisterScheme (address indexed _sender, address indexed _scheme, address indexed _avatar);\n    event UnregisterScheme (address indexed _sender, address indexed _scheme, address indexed _avatar);\n    event UpgradeController(address indexed _oldController, address _newController, address _avatar);\n\n    event AddGlobalConstraint(\n        address indexed _globalConstraint,\n        bytes32 _params,\n        GlobalConstraintInterface.CallPhase _when,\n        address indexed _avatar\n    );\n\n    event RemoveGlobalConstraint(\n        address indexed _globalConstraint,\n        uint256 _index,\n        bool _isPre,\n        address indexed _avatar\n    );\n\n   /**\n    * @dev newOrganization set up a new organization with default daoCreator.\n    * @param _avatar the organization avatar\n    */\n    function newOrganization(\n        Avatar _avatar\n    ) external\n    {\n        require(!actors[address(_avatar)]);\n        actors[address(_avatar)] = true;\n        require(_avatar.owner() == address(this));\n        DAOToken nativeToken = _avatar.nativeToken();\n        Reputation nativeReputation = _avatar.nativeReputation();\n        require(nativeToken.owner() == address(this));\n        require(nativeReputation.owner() == address(this));\n        //To guaranty uniqueness for the reputation systems.\n        require(!actors[address(nativeReputation)]);\n        actors[address(nativeReputation)] = true;\n        //To guaranty uniqueness for the nativeToken.\n        require(!actors[address(nativeToken)]);\n        actors[address(nativeToken)] = true;\n        organizations[address(_avatar)].nativeToken = nativeToken;\n        organizations[address(_avatar)].nativeReputation = nativeReputation;\n        organizations[address(_avatar)].schemes[msg.sender] =\n        Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001f)});\n        emit RegisterScheme(msg.sender, msg.sender, address(_avatar));\n    }\n\n  // Modifiers:\n    modifier onlyRegisteredScheme(address avatar) {\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\n        _;\n    }\n\n    modifier onlyRegisteringSchemes(address avatar) {\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\n        _;\n    }\n\n    modifier onlyGlobalConstraintsScheme(address avatar) {\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\n        _;\n    }\n\n    modifier onlyUpgradingScheme(address _avatar) {\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\n        _;\n    }\n\n    modifier onlyGenericCallScheme(address _avatar) {\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\n        _;\n    }\n\n    modifier onlyMetaDataScheme(address _avatar) {\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\n        _;\n    }\n\n    modifier onlySubjectToConstraint(bytes32 func, address _avatar) {\n        uint256 idx;\n        GlobalConstraint[] memory globalConstraintsPre = organizations[_avatar].globalConstraintsPre;\n        GlobalConstraint[] memory globalConstraintsPost = organizations[_avatar].globalConstraintsPost;\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\n            require(\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\n        }\n        _;\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\n            require(\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\n        }\n    }\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @param _avatar the address of the organization's avatar\n     * @return bool which represents a success\n     */\n    function mintReputation(uint256 _amount, address _to, address _avatar)\n    external\n    onlyRegisteredScheme(_avatar)\n    onlySubjectToConstraint(\"mintReputation\", _avatar)\n    returns(bool)\n    {\n        emit MintReputation(msg.sender, _to, _amount, _avatar);\n        return organizations[_avatar].nativeReputation.mint(_to, _amount);\n    }\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from, address _avatar)\n    external\n    onlyRegisteredScheme(_avatar)\n    onlySubjectToConstraint(\"burnReputation\", _avatar)\n    returns(bool)\n    {\n        emit BurnReputation(msg.sender, _from, _amount, _avatar);\n        return organizations[_avatar].nativeReputation.burn(_from, _amount);\n    }\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\n    external\n    onlyRegisteredScheme(_avatar)\n    onlySubjectToConstraint(\"mintTokens\", _avatar)\n    returns(bool)\n    {\n        emit MintTokens(msg.sender, _beneficiary, _amount, _avatar);\n        return organizations[_avatar].nativeToken.mint(_beneficiary, _amount);\n    }\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar the organization avatar.\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\n    external\n    onlyRegisteringSchemes(_avatar)\n    onlySubjectToConstraint(\"registerScheme\", _avatar)\n    returns(bool)\n    {\n        bytes4 schemePermission = organizations[_avatar].schemes[_scheme].permissions;\n        bytes4 senderPermission = organizations[_avatar].schemes[msg.sender].permissions;\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\n    // Implementation is a bit messy. One must recall logic-circuits ^^\n\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\n        require(bytes4(0x0000001f)&(_permissions^schemePermission)&(~senderPermission) == bytes4(0));\n\n    // produces non-zero if sender does not have all of the perms in the old scheme\n        require(bytes4(0x0000001f)&(schemePermission&(~senderPermission)) == bytes4(0));\n\n    // Add or change the scheme:\n        organizations[_avatar].schemes[_scheme] =\n        Scheme({paramsHash:_paramsHash, permissions:_permissions|bytes4(0x00000001)});\n        emit RegisterScheme(msg.sender, _scheme, _avatar);\n        return true;\n    }\n\n    /**\n     * @dev unregister a scheme\n     * @param _scheme the address of the scheme\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme, address _avatar)\n    external\n    onlyRegisteringSchemes(_avatar)\n    onlySubjectToConstraint(\"unregisterScheme\", _avatar)\n    returns(bool)\n    {\n        bytes4 schemePermission = organizations[_avatar].schemes[_scheme].permissions;\n    //check if the scheme is registered\n        if (schemePermission&bytes4(0x00000001) == bytes4(0)) {\n            return false;\n        }\n    // Check the unregistering scheme has enough permissions:\n        require(\n        bytes4(0x0000001f)&(schemePermission&(~organizations[_avatar].schemes[msg.sender].permissions)) == bytes4(0));\n\n    // Unregister:\n        emit UnregisterScheme(msg.sender, _scheme, _avatar);\n        delete organizations[_avatar].schemes[_scheme];\n        return true;\n    }\n\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool) {\n        if (_isSchemeRegistered(msg.sender, _avatar) == false) {\n            return false;\n        }\n        delete organizations[_avatar].schemes[msg.sender];\n        emit UnregisterScheme(msg.sender, msg.sender, _avatar);\n        return true;\n    }\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\n    external onlyGlobalConstraintsScheme(_avatar) returns(bool)\n    {\n        Organization storage organization = organizations[_avatar];\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            if (!organization.globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\n                organization.globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\n                organization.globalConstraintsRegisterPre[_globalConstraint] =\n                GlobalConstraintRegister(true, organization.globalConstraintsPre.length-1);\n            }else {\n                organization\n                .globalConstraintsPre[organization.globalConstraintsRegisterPre[_globalConstraint].index]\n                .params = _params;\n            }\n        }\n\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            if (!organization.globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\n                organization.globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\n                organization.globalConstraintsRegisterPost[_globalConstraint] =\n                GlobalConstraintRegister(true, organization.globalConstraintsPost.length-1);\n            } else {\n                organization\n                .globalConstraintsPost[organization.globalConstraintsRegisterPost[_globalConstraint].index]\n                .params = _params;\n            }\n        }\n        emit AddGlobalConstraint(_globalConstraint, _params, when, _avatar);\n        return true;\n    }\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\n    external onlyGlobalConstraintsScheme(_avatar) returns(bool)\n    {\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            removeGlobalConstraintPre(_globalConstraint, _avatar);\n        }\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            removeGlobalConstraintPost(_globalConstraint, _avatar);\n        }\n        return true;\n    }\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar the organization avatar.\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController, Avatar _avatar)\n    external onlyUpgradingScheme(address(_avatar)) returns(bool)\n    {\n        require(newControllers[address(_avatar)] == address(0));   // so the upgrade could be done once for a contract.\n        require(_newController != address(0));\n        newControllers[address(_avatar)] = _newController;\n        _avatar.transferOwnership(_newController);\n        require(_avatar.owner() == _newController);\n        if (organizations[address(_avatar)].nativeToken.owner() == address(this)) {\n            organizations[address(_avatar)].nativeToken.transferOwnership(_newController);\n            require(organizations[address(_avatar)].nativeToken.owner() == _newController);\n        }\n        if (organizations[address(_avatar)].nativeReputation.owner() == address(this)) {\n            organizations[address(_avatar)].nativeReputation.transferOwnership(_newController);\n            require(organizations[address(_avatar)].nativeReputation.owner() == _newController);\n        }\n        emit UpgradeController(address(this), _newController, address(_avatar));\n        return true;\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @param _value value (ETH) to transfer with the transaction\n    * @return bool -success\n    *         bytes  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\n    external\n    onlyGenericCallScheme(address(_avatar))\n    onlySubjectToConstraint(\"genericCall\", address(_avatar))\n    returns (bool, bytes memory)\n    {\n        return _avatar.genericCall(_contract, _data, _value);\n    }\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar the organization avatar.\n   * @return bool which represents a success\n   */\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\n    external\n    onlyRegisteredScheme(address(_avatar))\n    onlySubjectToConstraint(\"sendEther\", address(_avatar))\n    returns(bool)\n    {\n        return _avatar.sendEther(_amountInWei, _to);\n    }\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar the organization avatar.\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\n    external\n    onlyRegisteredScheme(address(_avatar))\n    onlySubjectToConstraint(\"externalTokenTransfer\", address(_avatar))\n    returns(bool)\n    {\n        return _avatar.externalTokenTransfer(_externalToken, _to, _value);\n    }\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar the organization avatar.\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(\n    IERC20 _externalToken,\n    address _from,\n    address _to,\n    uint256 _value,\n    Avatar _avatar)\n    external\n    onlyRegisteredScheme(address(_avatar))\n    onlySubjectToConstraint(\"externalTokenTransferFrom\", address(_avatar))\n    returns(bool)\n    {\n        return _avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\n    }\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\n    external\n    onlyRegisteredScheme(address(_avatar))\n    onlySubjectToConstraint(\"externalTokenApproval\", address(_avatar))\n    returns(bool)\n    {\n        return _avatar.externalTokenApproval(_externalToken, _spender, _value);\n    }\n\n    /**\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\n    * @param _metaData a string representing a hash of the meta data\n    * @param _avatar Avatar\n    * @return bool which represents a success\n    */\n    function metaData(string calldata _metaData, Avatar _avatar)\n        external\n        onlyMetaDataScheme(address(_avatar))\n        returns(bool)\n        {\n        return _avatar.metaData(_metaData);\n    }\n\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool) {\n        return _isSchemeRegistered(_scheme, _avatar);\n    }\n\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32) {\n        return organizations[_avatar].schemes[_scheme].paramsHash;\n    }\n\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4) {\n        return organizations[_avatar].schemes[_scheme].permissions;\n    }\n\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32) {\n\n        Organization storage organization = organizations[_avatar];\n\n        GlobalConstraintRegister memory register = organization.globalConstraintsRegisterPre[_globalConstraint];\n\n        if (register.isRegistered) {\n            return organization.globalConstraintsPre[register.index].params;\n        }\n\n        register = organization.globalConstraintsRegisterPost[_globalConstraint];\n\n        if (register.isRegistered) {\n            return organization.globalConstraintsPost[register.index].params;\n        }\n    }\n\n   /**\n   * @dev globalConstraintsCount return the global constraint pre and post count\n   * @return uint256 globalConstraintsPre count.\n   * @return uint256 globalConstraintsPost count.\n   */\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint) {\n        return (\n        organizations[_avatar].globalConstraintsPre.length,\n        organizations[_avatar].globalConstraintsPost.length\n        );\n    }\n\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool) {\n        return (organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\n        organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint].isRegistered);\n    }\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar) external view returns(address) {\n        return address(organizations[_avatar].nativeReputation);\n    }\n\n    /**\n     * @dev removeGlobalConstraintPre\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraintPre(address _globalConstraint, address _avatar)\n    private returns(bool)\n    {\n        GlobalConstraintRegister memory globalConstraintRegister =\n        organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint];\n        GlobalConstraint[] storage globalConstraints = organizations[_avatar].globalConstraintsPre;\n\n        if (globalConstraintRegister.isRegistered) {\n            if (globalConstraintRegister.index < globalConstraints.length-1) {\n                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];\n                globalConstraints[globalConstraintRegister.index] = globalConstraint;\n                organizations[_avatar].globalConstraintsRegisterPre[globalConstraint.gcAddress].index =\n                globalConstraintRegister.index;\n            }\n            globalConstraints.length--;\n            delete organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint];\n            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, true, _avatar);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev removeGlobalConstraintPost\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraintPost(address _globalConstraint, address _avatar)\n    private returns(bool)\n    {\n        GlobalConstraintRegister memory globalConstraintRegister =\n        organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint];\n        GlobalConstraint[] storage globalConstraints = organizations[_avatar].globalConstraintsPost;\n\n        if (globalConstraintRegister.isRegistered) {\n            if (globalConstraintRegister.index < globalConstraints.length-1) {\n                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];\n                globalConstraints[globalConstraintRegister.index] = globalConstraint;\n                organizations[_avatar].globalConstraintsRegisterPost[globalConstraint.gcAddress].index =\n                globalConstraintRegister.index;\n            }\n            globalConstraints.length--;\n            delete organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint];\n            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, false, _avatar);\n            return true;\n        }\n        return false;\n    }\n\n    function _isSchemeRegistered( address _scheme, address _avatar) private view returns(bool) {\n        return (organizations[_avatar].schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"unregisterScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getSchemeParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"upgradeController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"removeGlobalConstraint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"newControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"organizations\",\"outputs\":[{\"name\":\"nativeToken\",\"type\":\"address\"},{\"name\":\"nativeReputation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInWei\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"sendEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"unregisterSelf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"burnReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"globalConstraintsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getNativeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getSchemePermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"isSchemeRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"newOrganization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metaData\",\"type\":\"string\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"metaData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_avatar\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"genericCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getGlobalConstraintParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_params\",\"type\":\"bytes32\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"addGlobalConstraint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"name\":\"_permissions\",\"type\":\"bytes4\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"registerScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"actors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"mintReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"isGlobalConstraintRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"MintReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"BurnReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_scheme\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"RegisterScheme\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_scheme\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"UnregisterScheme\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"UpgradeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_params\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_when\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"AddGlobalConstraint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isPre\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"RemoveGlobalConstraint\",\"type\":\"event\"}]","ContractName":"UController","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://170200df9d77a9e4cdd6429e1f93280e118b7d0ee24b1e55c52767bd7e7b53ab"}]}