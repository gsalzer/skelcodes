{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary Config {\r\n    address constant internal BANK = 0x3F7199913BF60aD8653fa611e0A0fc8167C36D0D;\r\n    uint constant internal INITIAL_SUPPLY = 50000000000000000000000000;\r\n\r\n    function bank() internal pure returns (address) {\r\n      return BANK;\r\n    }\r\n    \r\n    function initial_supply() internal pure returns (uint) {\r\n      return INITIAL_SUPPLY;\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\ncontract SuperInvestorRole {\r\n  using Roles for Roles.Role;\r\n  using Config for Config;\r\n    \r\n  address internal BANK = Config.bank();\r\n\r\n  event SuperInvestorAdded(address indexed account);\r\n  event SuperInvestorRemoved(address indexed account);\r\n\r\n  Roles.Role private superInvestors;\r\n\r\n  constructor() internal {\r\n  }\r\n\r\n  modifier onlyBank() {\r\n    require(msg.sender == BANK);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyBankOrSuperInvestor() {\r\n    require(msg.sender == BANK || isSuperInvestor(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isSuperInvestor(address account) public view returns (bool) {\r\n    return superInvestors.has(account);\r\n  }\r\n\r\n  function addSuperInvestor(address account) public onlyBank {\r\n    _addSuperInvestor(account);\r\n  }\r\n\r\n  function renounceSuperInvestor() public onlyBankOrSuperInvestor {\r\n    _removeSuperInvestor(msg.sender);\r\n  }\r\n\r\n  function _addSuperInvestor(address account) internal {\r\n    superInvestors.add(account);\r\n    emit SuperInvestorAdded(account);\r\n  }\r\n\r\n  function _removeSuperInvestor(address account) internal {\r\n    superInvestors.remove(account);\r\n    emit SuperInvestorRemoved(account);\r\n  }\r\n}\r\n\r\ncontract InvestorRole is SuperInvestorRole {\r\n  using Roles for Roles.Role;\r\n  using Config for Config;\r\n    \r\n  address internal BANK = Config.bank();\r\n\r\n  event InvestorAdded(address indexed account);\r\n  event InvestorRemoved(address indexed account);\r\n\r\n  Roles.Role private investors;\r\n\r\n  constructor() internal {\r\n  }\r\n  \r\n  modifier onlyInvestor() {\r\n    require(isInvestor(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isInvestor(address account) public view returns (bool) {\r\n    return investors.has(account);\r\n  }\r\n\r\n  function addInvestor(address account) public onlyBankOrSuperInvestor {\r\n    _addInvestor(account);\r\n  }\r\n\r\n  function renounceInvestor() public onlyInvestor() {\r\n    _removeInvestor(msg.sender);\r\n  }\r\n\r\n  function _addInvestor(address account) internal {\r\n    investors.add(account);\r\n    emit InvestorAdded(account);\r\n  }\r\n\r\n  function _removeInvestor(address account) internal {\r\n    investors.remove(account);\r\n    emit InvestorRemoved(account);\r\n  }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  using Config for Config;\r\n  \r\n  address internal _bank = Config.bank();\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(_bank, value);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n}\r\n\r\ninterface IVest {\r\n  function totalVested() external view returns (uint256);\r\n\r\n  function vestedOf(address who) external view returns (uint256);\r\n  \r\n  event Vest(\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Vest is IVest {\r\n  using SafeMath for uint256;\r\n  \r\n  struct Beneficiary {\r\n    address _address;\r\n    uint256 startTime;\r\n    uint256 _amount;\r\n    uint256 _percent;\r\n    bool monthly;\r\n  }\r\n\r\n  mapping (address => Beneficiary) beneficiaries;\r\n\r\n  mapping (address => uint256) private _vestedBalances;\r\n\r\n  uint256 private _totalVested;\r\n  uint256 private beneficiariesCount;\r\n\r\n  function totalVested() public view returns (uint256) {\r\n    return _totalVested;\r\n  }\r\n\r\n  function vestedOf(address owner) public view returns (uint256) {\r\n    return _vestedBalances[owner];\r\n  }\r\n\r\n  function _vest(address to, uint256 value, uint256 percent, bool monthly) internal {\r\n    require(to != address(0));\r\n\r\n    _totalVested = _totalVested.add(value);\r\n    _vestedBalances[to] = _vestedBalances[to].add(value);\r\n\r\n    addBeneficiary(to, now, value, percent, monthly);\r\n    emit Vest(to, value);\r\n  }\r\n\r\n  function totalBeneficiaries() public view returns (uint256) {\r\n    return beneficiariesCount;\r\n  }\r\n\r\n  function addBeneficiary (address to, uint256, uint256 value, uint256 percent, bool monthly) internal {\r\n    beneficiariesCount ++;\r\n    beneficiaries[to] = Beneficiary(to, now, value, percent, monthly);\r\n  }\r\n  \r\n  function isBeneficiary (address _address) public view returns (bool) {\r\n    if (beneficiaries[_address]._address != 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function getBeneficiary (address _address) public view returns (address, uint256, uint256, uint256, bool) {\r\n    Beneficiary storage b = beneficiaries[_address];\r\n    return (b._address, b.startTime, b._amount, b._percent, b.monthly);\r\n  }\r\n  \r\n  function _getLockedAmount(address _address) public view returns (uint256) {\r\n    Beneficiary memory b = beneficiaries[_address];\r\n    uint256 amount = b._amount;\r\n    uint256 percent = b._percent;\r\n    uint256 timeValue = _getTimeValue(_address);\r\n    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\r\n\r\n    if (calcAmount >= amount) {\r\n        return 0;\r\n    } else {\r\n        return amount.sub(calcAmount);\r\n    }\r\n  }\r\n  \r\n  function _getTimeValue(address _address) internal view returns (uint256) {\r\n    Beneficiary memory b = beneficiaries[_address];\r\n    uint256 startTime = b.startTime;\r\n    uint256 presentTime = now;\r\n    uint256 timeValue = presentTime.sub(startTime);\r\n    bool monthly = b.monthly;\r\n\r\n    if (monthly) {\r\n      return timeValue.div(10 minutes);\r\n    } else {\r\n      return timeValue.div(120 minutes);  \r\n    }\r\n  }\r\n}\r\n\r\ncontract SuperInvestable is SuperInvestorRole, InvestorRole {\r\n  using SafeMath for uint256;\r\n  using Config for Config;\r\n\r\n  address internal BANK = Config.bank();\r\n  uint256 public percent;\r\n  \r\n  struct Investor {\r\n    address _address;\r\n    uint256 _amount;\r\n    uint256 _initialAmount;\r\n    uint256 startTime;\r\n  }\r\n  \r\n  mapping (address => Investor) investorList;\r\n  \r\n  modifier onlyBank() {\r\n    require(msg.sender == BANK);\r\n    _;\r\n  }\r\n  \r\n  function setPercent (uint256 _percent) external onlyBank returns (bool) {\r\n    percent = _percent;\r\n    return true;\r\n  }\r\n  \r\n  function addToInvestorList (address to, uint256 _amount, uint256 _initialAmount, uint256) internal {\r\n    _addInvestor(to);\r\n    investorList[to] = Investor(to, _amount, _initialAmount, now);\r\n  }\r\n      \r\n  function getInvestor (address _address) internal view returns (address, uint256, uint256, uint256) {\r\n    Investor storage i = investorList[_address];\r\n    return (i._address, i._amount, i._initialAmount, i.startTime);\r\n  }\r\n  \r\n  function _getInvestorLockedAmount (address _address) public view returns (uint256) {\r\n    Investor memory i = investorList[_address];\r\n    uint256 amount = i._amount;\r\n    uint256 timeValue = _getTimeValue(_address);\r\n    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\r\n\r\n    if (calcAmount >= amount) {\r\n        return 0;\r\n    } else {\r\n        return amount.sub(calcAmount);\r\n    }\r\n  }\r\n  \r\n  function _getTimeValue (address _address) internal view returns (uint256) {\r\n    Investor memory i = investorList[_address];\r\n    uint256 startTime = i.startTime;\r\n    uint256 presentTime = now;\r\n    uint256 timeValue = presentTime.sub(startTime);\r\n\r\n    return timeValue.div(1 minutes);\r\n  }\r\n}\r\n\r\ncontract ZipBit is ERC20Detailed, ERC20Mintable, ERC20Burnable, Vest, SuperInvestable {\r\n    using Config for Config;\r\n\r\n    uint internal INITIAL_SUPPLY = Config.initial_supply();\r\n    address internal BANK = Config.bank();\r\n\r\n    string internal _name = \"ZipBit\";\r\n    string internal _symbol = \"ZBT\";\r\n    uint8 internal _decimals = 18;\r\n\r\n    modifier onlyBank() {\r\n      require(msg.sender == BANK);\r\n      _;\r\n    }\r\n\r\n    constructor()\r\n      ERC20Detailed(_name, _symbol, _decimals)\r\n\r\n    public \r\n    {\r\n        _mint(BANK, INITIAL_SUPPLY);\r\n        _addMinter(BANK);\r\n        renounceMinter();\r\n    }\r\n\r\n    function vest(address _to, uint256 _amount, uint256 percent, bool monthly)\r\n      onlyBank external returns (bool) {\r\n      _vest(_to, _amount, percent, monthly);\r\n      transfer(_to, _amount);\r\n      return true;\r\n    }\r\n\r\n    /* Checks limit for the address \r\n    *  Checks if the address is a Beneficiary and checks the allowed transferrable first\r\n    *  Then checks if address is a Super Investor and converts the recipient into an Investor\r\n    *  Then checks if address is an Investor and checks the allowed transferrable\r\n    *  Then returns if remaining balance after the transfer is gte to value\r\n    */\r\n    function checkLimit(address _address, uint256 value) internal view returns (bool) {\r\n      uint256 remaining = balanceOf(_address).sub(value);\r\n      \r\n      if (isBeneficiary(_address) && isInvestor(_address)) {\r\n        uint256 ilocked = _getInvestorLockedAmount(_address);\r\n        uint256 locked = _getLockedAmount(_address);\r\n        return remaining >= locked.add(ilocked);\r\n      }\r\n      \r\n      if (isBeneficiary(_address)) {\r\n        return remaining >= _getLockedAmount(_address);\r\n      }\r\n      \r\n      if (isInvestor(_address)) {\r\n        return remaining >= _getInvestorLockedAmount(_address);\r\n      }\r\n    }\r\n\r\n    /* Checks if sender is a Beneficiary or an Investor then checks the limit\r\n    *  Then checks if the sender is a superInvestor then converts the recipient to an investor\r\n    *  Then proceeds to transfer the amount\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n      if (isBeneficiary(msg.sender) || isInvestor(msg.sender)) {\r\n        require(checkLimit(msg.sender, value));\r\n      }\r\n\r\n      if (isSuperInvestor(msg.sender)) {\r\n        addToInvestorList(to, value, value, now);\r\n      }\r\n\r\n      _transfer(msg.sender, to, value);\r\n      return true;\r\n    }\r\n    \r\n    function bankBurnFrom(address account, uint256 value) external onlyBank {\r\n      _burn(account, value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bankBurnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSuperInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_getLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"vestedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"monthly\",\"type\":\"bool\"}],\"name\":\"vest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_getInvestorLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBeneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuperInvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuperInvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ZipBit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ba33d1cef19cabb0df4049b66ab7f7ee67ba1d8ea0c57a923810ac41d1f7997"}]}