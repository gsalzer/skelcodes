{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add2(uint8 a, uint8 b)\r\n        internal\r\n        pure\r\n        returns (uint8 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      // uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n/* solhint-disable var-name-mixedcase */\r\n/* solhint-disable const-name-snakecase */\r\n/* solhint-disable code-complexity */\r\n/* solhint-disable max-line-length */\r\n/* solhint-disable func-name-mixedcase */\r\n/* solhint-disable use-forbidden-name */\r\n\r\n/*\r\n    .___           ___.                  .__\r\n  __| _/____   __ _\\_ |__   ___________  |__| ____\r\n / __ |\\__  \\ |  |  \\ __ \\_/ __ \\_  __ \\ |  |/  _ \\\r\n/ /_/ | / __ \\|  |  / \\_\\ \\  ___/|  | \\/ |  (  <_> )\r\n\\____ |(____  /____/|___  /\\___  >__| /\\ |__|\\____/\r\n     \\/     \\/          \\/     \\/     \\/\r\n\r\nB-I-N-G-O\r\n\r\nfor everyone....\r\n\r\n[x] Fair\r\n[x] Open Source\r\n[x] Better than grandma's bingo\r\n[x] made with <3.add(hate)\r\n\r\nPlay it!\r\n\r\nOr don't?\r\n\r\nNobody cares.\r\n*/\r\n\r\ncontract Bingo {\r\n    using SafeMath for uint;\r\n\r\n    MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F));\r\n    DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48));\r\n    uint256 constant public AGENT_END_BLOCK = 232;\r\n    uint256 constant public ICO_BLOCK = 200;\r\n    uint256 constant public ICO_TIME = 3600;\r\n\r\n    event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage);\r\n    event Payment(address indexed customerAddress, uint indexed stage);\r\n    event NumberCalled(uint indexed number, uint indexed stage, uint indexed total);\r\n    /* user withdraw event */\r\n    event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn);\r\n    event StageCreated(uint indexed stageNumber);\r\n\r\n    /* modifiers */\r\n    modifier hasBalance() {\r\n        require(bingoVault[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    struct Splits {\r\n        uint256 INCOMING_FIFTYFIVE_PERCENT;\r\n        uint256 INCOMING_EIGHTEEN_PERCENT;\r\n        uint256 INCOMING_TEN_PERCENT;\r\n        uint256 INCOMING_SIX_PERCENT;\r\n        uint256 INCOMING_FIVE_PERCENT;\r\n        uint256 INCOMING_ONE_PERCENT;\r\n        uint256 INCOMING_TWO_PERCENT;\r\n        uint256 INCOMING_DENOMINATION;\r\n    }\r\n\r\n    /*\r\n    fund allocation\r\n    */\r\n    uint256 public numberCallerPot = 0;\r\n    uint256 public mainBingoPot = 0;\r\n    uint256 public progressiveBingoPot = 0;\r\n    uint256 public paybackPot = 0;\r\n    uint256 public outboundToMegaball = 0;\r\n    uint256 public buyP3dFunds = 0;\r\n    uint256 public nextRoundSeed = 0;\r\n    uint256 public prevDrawBlock = 0;\r\n\r\n/* stages manage drawings, tickets, and peg round denominations */\r\n    struct Stage {\r\n        bool stageCompleted;\r\n        bool allowTicketPurchases;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 nextDrawBlock;\r\n        uint256 nextDrawTime;\r\n        Splits stageSplits;\r\n      //  address[] numberCallers;\r\n        mapping(uint8 => CallStatus) calledNumbers;\r\n        mapping(address => Card[]) playerCards;\r\n    }\r\n\r\n    struct CallStatus {\r\n        bool isCalled;\r\n        uint8 num;\r\n    }\r\n\r\n    struct Card {\r\n        Row B;\r\n        Row I;\r\n        Row N;\r\n        Row G;\r\n        Row O;\r\n        address owner;\r\n    }\r\n\r\n    struct Row {\r\n        uint8 N1;\r\n        uint8 N2;\r\n        uint8 N3;\r\n        uint8 N4;\r\n        uint8 N5;\r\n    }\r\n\r\n    mapping(uint256 => address[]) public numberCallers;\r\n    mapping(uint256 => Stage) public stages;\r\n    address public owner;\r\n    uint256 public numberOfStages = 0;\r\n    uint8 public numbersCalledThisStage = 0;\r\n    bool public resetDirty = false;\r\n    uint256 public numberOfCardsThisStage = 0;\r\n\r\n    mapping(uint256 => address[]) public entrants;\r\n\r\n    uint256 public DENOMINATION = 7000000000000000;\r\n\r\n    mapping (address => uint256) private bingoVault;\r\n\r\n    address[] public paybackQueue;\r\n    uint256 public paybackQueueCount = 0;\r\n    uint256 public nextPayback = 0;\r\n\r\n    address public lastCaller;\r\n    uint8 public lastNumber;\r\n\r\n    address public lastRef;\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        //initFirstStage();\r\n    }\r\n\r\n    function seedMain()\r\n    public\r\n    payable\r\n    {\r\n        require(msg.value >= 100000000000000000);\r\n        mainBingoPot = mainBingoPot.add(msg.value);\r\n    }\r\n\r\n\r\n    function seedProgressive()\r\n    public\r\n    payable\r\n    {\r\n        require(msg.value >= 100000000000000000);\r\n        progressiveBingoPot = progressiveBingoPot.add(msg.value);\r\n    }\r\n\r\n\r\n    function seedMegball()\r\n    internal\r\n    {\r\n        if (outboundToMegaball > 10000000000000000000) {\r\n            uint256 value = outboundToMegaball;\r\n            outboundToMegaball = 0;\r\n            megaballContract.seedJackpot.value(value)();\r\n        }\r\n    }\r\n\r\n    function withdrawFromMB()\r\n    internal\r\n    {\r\n        uint256 amount = megaballContract.getMoneyballBalance();\r\n        if (amount > 10000000000000000) {\r\n            mainBingoPot = mainBingoPot.add(amount);\r\n            megaballContract.withdraw();\r\n        }\r\n    }\r\n\r\n    function()\r\n    public\r\n    payable\r\n    {\r\n\r\n    }\r\n\r\n    function getMBbalance()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n      return megaballContract.getMoneyballBalance();\r\n    }\r\n\r\n    function withdraw()\r\n    external\r\n    hasBalance\r\n    {\r\n        uint256 amount = bingoVault[msg.sender];\r\n        bingoVault[msg.sender] = 0;\r\n\r\n        emit OnWithdraw(msg.sender, amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function initFirstStage()\r\n    public\r\n    {\r\n        require(numberOfStages == 0);\r\n        CreateStage();\r\n    }\r\n\r\n    function sendDivi()\r\n    private\r\n    {\r\n\r\n        uint256 lsend = buyP3dFunds;\r\n        if (lsend > 0) {\r\n            buyP3dFunds = 0;\r\n            Divies.deposit.value(lsend)();\r\n        }\r\n    }\r\n\r\n    function getStageDrawTime(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint256, uint256)\r\n    {\r\n        return (stages[_stage].nextDrawTime, stages[_stage].nextDrawBlock);\r\n    }\r\n\r\n    function isCallNumberAvailable(uint256 _stage)\r\n    public\r\n    view\r\n    returns (bool, uint256, uint256)\r\n    {\r\n        if (stages[_stage].nextDrawBlock < block.number && stages[_stage].nextDrawTime < now)\r\n        {\r\n            return (true, 0, 0);\r\n        }\r\n        uint256 blocks = stages[_stage].nextDrawBlock.sub(block.number);\r\n        uint256 time = stages[_stage].nextDrawTime.sub(now);\r\n        return (false, blocks, time);\r\n    }\r\n\r\n    function stageMoveDetail(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint, uint)\r\n    {\r\n        uint256 blocks = 0;\r\n        uint256 time = 0;\r\n\r\n        if (stages[_stage].nextDrawBlock > block.number)\r\n        {\r\n            blocks = stages[_stage].nextDrawBlock.sub(block.number);\r\n            blocks.add(1);\r\n        }\r\n\r\n        if (stages[_stage].nextDrawTime > now)\r\n        {\r\n            time = stages[_stage].nextDrawTime.sub(now);\r\n            time.add(1);\r\n        }\r\n\r\n        return ( blocks, time );\r\n    }\r\n\r\n    function getMegaballStatus()\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint256 _stage = megaballContract.numberOfStages();\r\n        _stage = _stage.sub(1);\r\n        (uint256 sm1, uint256 sm2) = megaballContract.stageMoveDetail(_stage);\r\n        if (sm1.add(sm2) == 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function updateMegaballStatus()\r\n    private\r\n    {\r\n        uint256 _stage = megaballContract.numberOfStages();\r\n        _stage = _stage.sub(1);\r\n        (bool b1, bool b2, bool b3, bool b4) = megaballContract.getStageStatus(_stage);\r\n        require(b1 == false);\r\n        require(b3 == false);\r\n        if (b4 == true) {\r\n            if (megaballContract.getPlayerRaffleTickets() >= 10 && megaballContract.getRafflePlayerCount(_stage) > 7)\r\n            {\r\n                megaballContract.addPlayerToRaffle(address(this));\r\n            }\r\n            megaballContract.setDrawBlocks(_stage);\r\n        }\r\n\r\n        if (b4 == false && b2 == true) {\r\n            if (megaballContract.isFinalizeValid(_stage)) {\r\n                megaballContract.finalizeStage(_stage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function callNumbers(uint256 _stage)\r\n    public\r\n    {\r\n        require(stages[_stage].nextDrawBlock < block.number);\r\n        require(stages[_stage].nextDrawTime <= now);\r\n        require(numberOfCardsThisStage >= 2);\r\n        require(stages[_stage].stageCompleted == false);\r\n\r\n        if (numbersCalledThisStage == 0) {\r\n            stages[_stage].allowTicketPurchases = false;\r\n            stages[_stage].startBlock = stages[_stage].startBlock.add(block.number);\r\n            stages[_stage].endBlock = block.number.add(AGENT_END_BLOCK);\r\n        }\r\n\r\n\r\n        if (getMegaballStatus()) {\r\n            updateMegaballStatus();\r\n            paybackQueue.push(msg.sender);\r\n        }\r\n\r\n\r\n        lastCaller = msg.sender;\r\n\r\n        numberCallers[_stage].push(msg.sender);\r\n\r\n        uint8 n1 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock)) % 74));\r\n\r\n        uint8 resetCounter = 0;\r\n        if (isNumberCalled(_stage, n1) == false) {\r\n            callNumber(_stage, n1);\r\n            resetCounter++;\r\n        }\r\n\r\n        uint8 n2 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock.sub(1))) % 74));\r\n        if (isNumberCalled(_stage, n2) == false && resetCounter == 0) {\r\n            callNumber(_stage, n2);\r\n            resetCounter++;\r\n        }\r\n\r\n        uint8 n3 = SafeMath.add2(1, (uint8(blockhash(stages[_stage].nextDrawBlock.sub(2))) % 74));\r\n        if (isNumberCalled(_stage, n3) == false && resetCounter == 0) {\r\n            callNumber(_stage, n3);\r\n            resetCounter++;\r\n        }\r\n\r\n        if (resetCounter == 0) {\r\n            resetDrawBlocks(_stage);\r\n            resetDirty = true;\r\n        }\r\n    }\r\n\r\n\r\n    function roundTimeout(uint256 _stage) public {\r\n        require(stages[_stage].endBlock < block.number);\r\n        require(stages[_stage].nextDrawTime < now);\r\n        require(stages[_stage].stageCompleted == false);\r\n        stages[_stage].stageCompleted = true;\r\n        CreateStage();\r\n    }\r\n\r\n    function resetDrawBlocks(uint256 _stage)\r\n    private\r\n    {\r\n        prevDrawBlock = stages[_stage].nextDrawBlock;\r\n        stages[_stage].nextDrawBlock = block.number.add(3);\r\n        stages[_stage].nextDrawTime = now.add(30);\r\n    }\r\n\r\n    function callNumber(uint256 _stage, uint8 num)\r\n    internal\r\n    {\r\n        require(num > 0);\r\n        require(num < 76);\r\n        stages[_stage].calledNumbers[num] = CallStatus(true, num);\r\n        numbersCalledThisStage = SafeMath.add2(numbersCalledThisStage, 1);\r\n        lastNumber = num;\r\n        resetDrawBlocks(_stage);\r\n        emit NumberCalled(num, numberOfStages.sub(1), numbersCalledThisStage);\r\n    }\r\n\r\n    function getCalledNumbers(uint256 _stage, uint8 _position)\r\n    public\r\n    view\r\n    returns (uint8)\r\n    {\r\n        return (stages[_stage].calledNumbers[_position].num);\r\n    }\r\n\r\n\r\n    function isNumberCalled(uint256 _stage, uint8 num)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return (stages[_stage].calledNumbers[num].isCalled);\r\n    }\r\n\r\n    function CreateStage()\r\n    private\r\n    {\r\n\r\n        if (numberOfStages > 20) {\r\n            DENOMINATION = megaballContract.DENOMINATION();\r\n        }\r\n\r\n        uint256 ONE_PERCENT = calculateOnePercentTicketCostSplit(DENOMINATION);\r\n        uint256 INCOMING_FIFTYFIVE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 55);\r\n        uint256 INCOMING_EIGHTEEN_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 18);\r\n        uint256 INCOMING_TEN_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 10);\r\n        uint256 INCOMING_SIX_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 6);\r\n        uint256 INCOMING_FIVE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 5);\r\n        uint256 INCOMING_TWO_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 2);\r\n        uint256 INCOMING_ONE_PERCENT = calculatePayoutDenomination(ONE_PERCENT, 1);\r\n\r\n        Splits memory stageSplits = Splits(\r\n        INCOMING_FIFTYFIVE_PERCENT,\r\n        INCOMING_EIGHTEEN_PERCENT,\r\n        INCOMING_TEN_PERCENT,\r\n        INCOMING_SIX_PERCENT,\r\n        INCOMING_FIVE_PERCENT,\r\n        INCOMING_TWO_PERCENT,\r\n        INCOMING_ONE_PERCENT,\r\n        DENOMINATION);\r\n\r\n\r\n        stages[numberOfStages] = Stage(\r\n        false,\r\n        true,\r\n        block.number.add(ICO_BLOCK),\r\n        block.number.add(AGENT_END_BLOCK),\r\n        block.number.add(ICO_BLOCK),\r\n        now.add(ICO_TIME),\r\n        stageSplits);\r\n\r\n        numbersCalledThisStage = 0;\r\n        numberOfCardsThisStage = 0;\r\n        prevDrawBlock = block.number.add(ICO_BLOCK);\r\n\r\n        if (numberOfStages > 0) {\r\n            uint256 value = nextRoundSeed;\r\n            nextRoundSeed = 0;\r\n            mainBingoPot = mainBingoPot.add(value);\r\n            processPaybackQueue(numberOfStages);\r\n       }\r\n\r\n        withdrawFromMB();\r\n        seedMegball();\r\n        sendDivi();\r\n        numberOfStages = numberOfStages.add(1);\r\n        resetDirty = false;\r\n        emit StageCreated(numberOfStages);\r\n    }\r\n\r\n    /* get stage blocks */\r\n    function getStageBlocks(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint, uint)\r\n    {\r\n        return (stages[_stage].startBlock, stages[_stage].endBlock);\r\n    }\r\n\r\n    /*\r\n     this function is used for other things name it better\r\n    */\r\n    function calculatePayoutDenomination(uint256 _denomination, uint256 _multiple)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return SafeMath.mul(_denomination, _multiple);\r\n    }\r\n\r\n    /* 1% split of denomination */\r\n    function calculateOnePercentTicketCostSplit(uint256 _denomination)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return SafeMath.div(_denomination, 100);\r\n    }\r\n\r\n    function sort_array(uint8[5] arr_) internal pure returns (uint8[5] )\r\n    {\r\n        uint8 l = 5;\r\n        uint8[5] memory arr;\r\n\r\n        for (uint8 i=0; i<l; i++)\r\n        {\r\n            arr[i] = arr_[i];\r\n        }\r\n\r\n        for (i = 0; i < l; i++)\r\n        {\r\n            for (uint8 j=i+1; j < l; j++)\r\n            {\r\n                if (arr[i] < arr[j])\r\n                {\r\n                    uint8 temp = arr[j];\r\n                    arr[j] = arr[i];\r\n                    arr[i] = temp;\r\n                }\r\n          }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    function random(uint8 startNumber, uint8 offset, uint256 _seed, uint8 blockOffset) private view returns (uint8) {\r\n        uint b = block.number.sub(blockOffset);\r\n        b = b.sub(offset);\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(blockhash(b))));\r\n        seed.add(_seed);\r\n\r\n        uint8 number = SafeMath.add2(startNumber, (uint8(uint256(keccak256(abi.encodePacked(seed))) % 14)));\r\n        return number;\r\n    }\r\n\r\n    function referralSpot(uint256 _stage)\r\n    public\r\n    view\r\n    returns(uint)\r\n    {\r\n        uint b = block.number.sub(1);\r\n\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n        )));\r\n\r\n        uint256 number = (uint256(keccak256(abi.encodePacked(blockhash(b), seed))) % entrants[_stage].length);\r\n        return number;\r\n\r\n    }\r\n\r\n\r\n    function randomArr(uint8 n1, uint256 _seed, uint8 blockOffset) private view returns (uint8[5]) {\r\n        uint8[5] memory arr = [0, 0, 0, 0, 0];\r\n\r\n        uint8 count = 0;\r\n        arr[0] = random(n1, count, _seed, blockOffset);\r\n\r\n        count = SafeMath.add2(count, 1);\r\n        while (arr[1] == 0) {\r\n            if (random(n1, count, _seed, blockOffset) != arr[0]) {\r\n                arr[1] = random(n1, count, _seed, blockOffset);\r\n            }\r\n            count = SafeMath.add2(count, 1);\r\n        }\r\n\r\n        while (arr[2] == 0) {\r\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\r\n                arr[2] = random(n1, count, _seed, blockOffset);\r\n            }\r\n            count = SafeMath.add2(count, 1);\r\n        }\r\n\r\n        while (arr[3] == 0) {\r\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\r\n                if (random(n1, count, _seed, blockOffset) != arr[2]) {\r\n                    arr[3] = random(n1, count, _seed, blockOffset);\r\n                }\r\n            }\r\n            count = SafeMath.add2(count, 1);\r\n        }\r\n\r\n        while (arr[4] == 0) {\r\n            if (random(n1, count, _seed, blockOffset) != arr[0] && random(n1, count, _seed, blockOffset) != arr[1]) {\r\n                if (random(n1, count, _seed, blockOffset) != arr[2] && random(n1, count, _seed, blockOffset) != arr[3]) {\r\n                    arr[4] = random(n1, count, _seed, blockOffset);\r\n                }\r\n              }\r\n            count = SafeMath.add2(count, 1);\r\n        }\r\n        require(count < 60);\r\n        /**/\r\n        return arr;\r\n    }\r\n\r\n\r\n    function makeRow(uint8 n1, uint256 _seed, uint8 blockOffset) private view returns (Row) {\r\n        uint8[5] memory mem = randomArr(n1, _seed, blockOffset);\r\n        uint8[5] memory mem2 = sort_array(mem);\r\n\r\n        return Row(mem2[4], mem2[3], mem2[2], mem2[1], mem2[0]);\r\n    }\r\n\r\n    function makeCard(uint256 _seed) private view returns (Card) {\r\n\r\n        return Card(\r\n        makeRow(1, _seed, 0),\r\n        makeRow(16, _seed, 15),\r\n        makeRow(31, _seed, 30),\r\n        makeRow(46, _seed, 45),\r\n        makeRow(61, _seed, 60),\r\n        msg.sender);\r\n    }\r\n\r\n\r\n    /* get stage denom */\r\n    function getStageDenomination(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return stages[_stage].stageSplits.INCOMING_DENOMINATION;\r\n    }\r\n\r\n    function getStageStatus(uint256 _stage)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return (stages[_stage].allowTicketPurchases);\r\n    }\r\n\r\n    function getEntrant(uint256 _stage, uint256 _pos)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return entrants[_stage][_pos];\r\n    }\r\n\r\n    //entrants[_stage][_pos]\r\n\r\n    function createCard(uint256 _stage, uint256 _seed, uint8 team)\r\n    external\r\n    payable\r\n    {\r\n        require(stages[_stage].allowTicketPurchases);\r\n        require(msg.value == stages[_stage].stageSplits.INCOMING_DENOMINATION);\r\n        require(_seed > 0);\r\n        require(team > 0);\r\n        require(team < 4);\r\n        numberOfCardsThisStage = numberOfCardsThisStage.add(1);\r\n\r\n        /* alpha */\r\n        if (team == 1) {\r\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\r\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\r\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\r\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\r\n            paybackPot = paybackPot.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\r\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\r\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\r\n        }\r\n\r\n        /* beta */\r\n        if (team == 2) {\r\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\r\n            paybackPot = paybackPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\r\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\r\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\r\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\r\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\r\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\r\n        }\r\n\r\n        /* omega */\r\n        if (team == 3) {\r\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_FIFTYFIVE_PERCENT);\r\n            mainBingoPot = mainBingoPot.add(stages[_stage].stageSplits.INCOMING_EIGHTEEN_PERCENT);\r\n            numberCallerPot = numberCallerPot.add(stages[_stage].stageSplits.INCOMING_TEN_PERCENT);\r\n            progressiveBingoPot = progressiveBingoPot.add(stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\r\n            outboundToMegaball = outboundToMegaball.add(stages[_stage].stageSplits.INCOMING_SIX_PERCENT);\r\n            buyP3dFunds = buyP3dFunds.add(stages[_stage].stageSplits.INCOMING_FIVE_PERCENT);\r\n            nextRoundSeed = nextRoundSeed.add(stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\r\n        }\r\n\r\n\r\n          //THERES A MYSTERY 3% we assume and done store cuz of stack depth problems w/ struct\r\n\r\n        if (entrants[_stage].length > 5) {\r\n        //    uint256 aa = 20;\r\n            address az = getEntrant(_stage, referralSpot(_stage));\r\n            lastRef = az;\r\n            payReferral(az, stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\r\n            payReferral(az, stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\r\n        }\r\n\r\n        if (entrants[_stage].length <= 5) {\r\n            payReferral(msg.sender, stages[_stage].stageSplits.INCOMING_TWO_PERCENT);\r\n            payReferral(msg.sender, stages[_stage].stageSplits.INCOMING_ONE_PERCENT);\r\n        }\r\n\r\n\r\n        /* push ticket into users stage def */\r\n        stages[_stage].playerCards[msg.sender].push(makeCard(_seed));\r\n        entrants[_stage].push(msg.sender);\r\n        stages[_stage].nextDrawTime = stages[_stage].nextDrawTime.add(1);\r\n        emit CardCreated(msg.sender, stages[_stage].playerCards[msg.sender].length, numberOfStages);\r\n\r\n    }\r\n\r\n\r\n    function payReferral(address _player, uint256 _amount)\r\n    private\r\n    {\r\n        bingoVault[_player] = bingoVault[_player].add(_amount);\r\n    }\r\n\r\n    /* contract balance */\r\n    function getContractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function claimBingo(uint256 _stage, uint256 _position)\r\n    external\r\n    {\r\n        require(stages[_stage].stageCompleted == false, \"stage must be incomplete\");\r\n        if (checkBingo(_stage, _position) == true) {\r\n            stages[_stage].stageCompleted = true;\r\n            stages[_stage].endBlock = block.number;\r\n            payTicket(_stage, msg.sender);\r\n            payProgressive(_stage, msg.sender);\r\n            payCaller(_stage);\r\n            repayment(_stage, msg.sender);\r\n            processPaybackQueue(_stage);\r\n            CreateStage();\r\n        }\r\n    }\r\n\r\n    function processPaybackQueue(uint256 _stage)\r\n    private\r\n    {\r\n        uint256 paybackLength = paybackQueue.length;\r\n        uint256 value = paybackPot;\r\n        if (paybackLength > nextPayback) {\r\n            if (value > DENOMINATION) {\r\n                paybackPot = paybackPot.sub(DENOMINATION);\r\n                address _player = paybackQueue[nextPayback];\r\n                nextPayback = nextPayback.add(1);\r\n                bingoVault[_player] = bingoVault[_player].add(DENOMINATION);\r\n                emit Payment(_player, _stage);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function payCaller(uint256 _stage)\r\n    private\r\n    {\r\n        if (numberCallerPot > 0) {\r\n            uint256 amount = numberCallerPot;\r\n            numberCallerPot = 0;\r\n            uint256 callerCount = numberCallers[_stage].length;\r\n            uint256 n1 = (uint256(blockhash(prevDrawBlock)) % callerCount);\r\n            address a1 = numberCallers[_stage][n1];\r\n            bingoVault[a1] = bingoVault[a1].add(amount);\r\n            emit Payment(a1, _stage);\r\n        }\r\n    }\r\n\r\n    function payProgressive(uint256 _stage, address _player)\r\n    private\r\n    {\r\n        if (numbersCalledThisStage <= 10 && resetDirty == false) {\r\n            uint256 progressiveLocal = progressiveBingoPot;\r\n            uint256 ONE_PERCENT = calculateOnePercentTicketCostSplit(progressiveLocal);\r\n            uint256 amount = calculatePayoutDenomination(ONE_PERCENT, 50);\r\n            if (numbersCalledThisStage == 5) {\r\n                amount = calculatePayoutDenomination(ONE_PERCENT, 100);\r\n            }\r\n            if (numbersCalledThisStage == 6) {\r\n                amount = calculatePayoutDenomination(ONE_PERCENT, 90);\r\n            }\r\n            if (numbersCalledThisStage == 7) {\r\n                amount = calculatePayoutDenomination(ONE_PERCENT, 80);\r\n            }\r\n            if (numbersCalledThisStage == 8) {\r\n                amount = calculatePayoutDenomination(ONE_PERCENT, 70);\r\n            }\r\n            progressiveBingoPot = progressiveBingoPot.sub(amount);\r\n            bingoVault[_player] = bingoVault[_player].add(amount);\r\n            emit Payment(_player, _stage);\r\n        }\r\n    }\r\n\r\n    function payTicket(uint256 _stage, address _player)\r\n    private\r\n    {\r\n        if (mainBingoPot > 0) {\r\n            uint256 amount = mainBingoPot;\r\n            mainBingoPot = 0;\r\n            bingoVault[_player] = bingoVault[_player].add(amount);\r\n            emit Payment(_player, _stage);\r\n        }\r\n    }\r\n\r\n    function repayment(uint256 _stage, address _player)\r\n    private\r\n    {\r\n        if (numberOfCardsThisStage == 2) {\r\n            addToPaybacks(_stage, _player, 2);\r\n        }\r\n\r\n        if (numberOfCardsThisStage == 3) {\r\n            addToPaybacks(_stage, _player, 3);\r\n        }\r\n\r\n        if (numberOfCardsThisStage == 4) {\r\n            addToPaybacks(_stage, _player, 4);\r\n        }\r\n\r\n        if (numberOfCardsThisStage == 5) {\r\n            addToPaybacks(_stage, _player, 5);\r\n        }\r\n\r\n        if (numberOfCardsThisStage > 5) {\r\n            uint256 playerCount = entrants[_stage].length;\r\n            uint256 n1 = (uint256(blockhash(prevDrawBlock)) % playerCount);\r\n            paybackQueue.push(entrants[_stage][n1]);\r\n        }\r\n\r\n    }\r\n\r\n    function addToPaybacks(uint256 _stage, address _player, uint8 _max)\r\n    private\r\n    {\r\n        for (uint8 x = 0; x < _max; x++) {\r\n            if (entrants[_stage][x] != _player && entrants[_stage][x] != lastCaller) {paybackQueue.push(entrants[_stage][x]);}\r\n        }\r\n\r\n    }\r\n\r\n    /* get number of players in raffle drawing */\r\n\r\n    function getNumberCallersCount(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return numberCallers[_stage].length;\r\n    }\r\n\r\n\r\n    /* get number of players in raffle drawing */\r\n    function getPaybackPlayerCount()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return paybackQueue.length;\r\n    }\r\n\r\n    /* get number of players in raffle drawing */\r\n    function getEntrantsPlayerCount(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return entrants[_stage].length;\r\n    }\r\n\r\n    /*\r\n    *  balance functions\r\n    *  players main game balance\r\n    */\r\n    function getBingoBalance() public view returns (uint) {\r\n        return bingoVault[msg.sender];\r\n    }\r\n\r\n\r\n    function checkBingo(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n\r\n        if (checkB(_stage, _position) == 5) { return true;}\r\n        if (checkI(_stage, _position) == 5) { return true;}\r\n        if (checkN(_stage, _position) == 5) { return true;}\r\n        if (checkG(_stage, _position) == 5) { return true;}\r\n        if (checkO(_stage, _position) == 5) { return true;}\r\n        if (checkH1(_stage, _position) == 5) { return true;}\r\n        if (checkH2(_stage, _position) == 5) { return true;}\r\n        if (checkH3(_stage, _position) == 5) { return true;}\r\n        if (checkH4(_stage, _position) == 5) { return true;}\r\n        if (checkH5(_stage, _position) == 5) { return true;}\r\n        if (checkD1(_stage, _position) == 5) { return true;}\r\n        if (checkD2(_stage, _position) == 5) { return true;}\r\n        return false;\r\n    }\r\n\r\n    function checkD1(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkD2(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkB(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkI(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkN(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8)  {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkG(uint256 _stage, uint256 _position) public view returns (uint8)  {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkO(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8)  {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkH1(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N1)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N1)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkH2(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N2)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N2)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkH3(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N3)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N3)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n\r\n    function checkH4(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N4)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N4)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function checkH5(uint256 _stage, uint256 _position)\r\n    internal\r\n    view\r\n    returns (uint8) {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        uint8 count = 0;\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].B.N5)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].I.N5)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].N.N5)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].G.N5)) {count = SafeMath.add2(count, 1);}\r\n        if (isNumberCalled(_stage, stages[_stage].playerCards[msg.sender][_position].O.N5)) {count = SafeMath.add2(count, 1);}\r\n        return count;\r\n    }\r\n\r\n    function isWithinBounds(uint8 num, uint8 min, uint8 max) internal pure returns (bool) {\r\n        if (num >= min && num <= max) {return true;}\r\n        return false;\r\n    }\r\n\r\n    function getPlayerCardsThisStage(uint256 _stage)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return (stages[_stage].playerCards[msg.sender].length);\r\n    }\r\n\r\n    function nextPaybacks(uint256 offset)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        require(offset.add(nextPayback) < paybackQueue.length);\r\n        return (paybackQueue[nextPayback.add(offset)]);\r\n    }\r\n\r\n    function getCardRowB(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (uint, uint, uint, uint, uint)\r\n    {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        address _player = msg.sender;\r\n        return (stages[_stage].playerCards[_player][_position].B.N1,\r\n        stages[_stage].playerCards[_player][_position].B.N2,\r\n        stages[_stage].playerCards[_player][_position].B.N3,\r\n        stages[_stage].playerCards[_player][_position].B.N4,\r\n        stages[_stage].playerCards[_player][_position].B.N5);\r\n    }\r\n\r\n    function getCardRowI(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (uint, uint, uint, uint, uint)\r\n    {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        address _player = msg.sender;\r\n        return (stages[_stage].playerCards[_player][_position].I.N1,\r\n        stages[_stage].playerCards[_player][_position].I.N2,\r\n        stages[_stage].playerCards[_player][_position].I.N3,\r\n        stages[_stage].playerCards[_player][_position].I.N4,\r\n        stages[_stage].playerCards[_player][_position].I.N5);\r\n    }\r\n\r\n    function getCardRowN(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (uint, uint, uint, uint, uint)\r\n    {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        address _player = msg.sender;\r\n        return (stages[_stage].playerCards[_player][_position].N.N1,\r\n        stages[_stage].playerCards[_player][_position].N.N2,\r\n        stages[_stage].playerCards[_player][_position].N.N3,\r\n        stages[_stage].playerCards[_player][_position].N.N4,\r\n        stages[_stage].playerCards[_player][_position].N.N5);\r\n    }\r\n\r\n    function getCardRowG(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (uint, uint, uint, uint, uint)\r\n    {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        address _player = msg.sender;\r\n        return (stages[_stage].playerCards[_player][_position].G.N1,\r\n        stages[_stage].playerCards[_player][_position].G.N2,\r\n        stages[_stage].playerCards[_player][_position].G.N3,\r\n        stages[_stage].playerCards[_player][_position].G.N4,\r\n        stages[_stage].playerCards[_player][_position].G.N5);\r\n    }\r\n\r\n    function getCardRowO(uint256 _stage, uint256 _position)\r\n    public\r\n    view\r\n    returns (uint, uint, uint, uint, uint)\r\n    {\r\n        require(_stage <= SafeMath.sub(numberOfStages, 1));\r\n        address _player = msg.sender;\r\n        return (stages[_stage].playerCards[_player][_position].O.N1,\r\n        stages[_stage].playerCards[_player][_position].O.N2,\r\n        stages[_stage].playerCards[_player][_position].O.N3,\r\n        stages[_stage].playerCards[_player][_position].O.N4,\r\n        stages[_stage].playerCards[_player][_position].O.N5);\r\n    }\r\n}\r\n\r\ninterface MegaballInterface {\r\n    function seedJackpot() external payable;\r\n    function getMoneyballBalance() external view returns (uint);\r\n    function withdraw() external;\r\n    function getRafflePlayerCount(uint256 _stage) external view returns (uint);\r\n    function setDrawBlocks(uint256 _stage) external;\r\n    function isFinalizeValid(uint256 _stage) external view returns (bool);\r\n    function finalizeStage(uint256 _stage) external;\r\n    function numberOfStages() external view returns (uint);\r\n    function stageMoveDetail(uint256 _stage) external view returns (uint, uint);\r\n    function getPlayerRaffleTickets() external view returns (uint);\r\n    function getStageStatus(uint256 _stage) external view returns (bool, bool, bool, bool);\r\n    function addPlayerToRaffle(address _player) external;\r\n    function DENOMINATION() external view returns(uint);\r\n}\r\n\r\ninterface DiviesInterface {\r\n    function deposit() external payable;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPaybackPlayerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"nextPaybacks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getStageBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"checkBingo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getCardRowG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getCardRowI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getCardRowB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"getCalledNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaballContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfCardsThisStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getCardRowN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resetDirty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getStageStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paybackQueueCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"roundTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevDrawBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"callNumbers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBingoBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberCallerPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMegaballStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressiveBingoPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"claimBingo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paybackPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getPlayerCardsThisStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"stageCompleted\",\"type\":\"bool\"},{\"name\":\"allowTicketPurchases\",\"type\":\"bool\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"nextDrawBlock\",\"type\":\"uint256\"},{\"name\":\"nextDrawTime\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"INCOMING_FIFTYFIVE_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_EIGHTEEN_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_TEN_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_SIX_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_FIVE_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_ONE_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_TWO_PERCENT\",\"type\":\"uint256\"},{\"name\":\"INCOMING_DENOMINATION\",\"type\":\"uint256\"}],\"name\":\"stageSplits\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outboundToMegaball\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_seed\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"createCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numbersCalledThisStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getEntrantsPlayerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayback\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AGENT_END_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getStageDenomination\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"getEntrant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyP3dFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMBbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getCardRowO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"checkG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"isCallNumberAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"isNumberCalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberCallers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"referralSpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initFirstStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paybackQueue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entrants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"stageMoveDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getNumberCallersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"getStageDrawTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedProgressive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainBingoPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ticketOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerTicket\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"CardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"NumberCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stageNumber\",\"type\":\"uint256\"}],\"name\":\"StageCreated\",\"type\":\"event\"}]","ContractName":"Bingo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b9d8e75e7fa26098d5afc04e125e60f3a5c2f66dff8f60b68de77814efbccce9"}]}