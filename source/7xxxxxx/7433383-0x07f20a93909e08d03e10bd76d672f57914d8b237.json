{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\r\n}\r\n\r\ncontract GQSTAND {\r\n    // Current version:0.5.2+commit.1df8f40c.Emscripten.clang\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    address payable public fundsWallet;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) public {\r\n        initialSupply = 1000000000;\r\n        tokenName = \"GQSTAND\";\r\n        tokenSymbol = \"GQSTAND\";\r\n        fundsWallet = msg.sender;\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    uint private productId;\r\n    function getProductID() private returns (uint256) {\r\n    return productId++;\r\n    }\r\n\r\n    uint private requestID;\r\n    function getRequestID() private returns (uint256) {\r\n    return requestID++;\r\n    }\r\n\r\n\r\n    struct productDetails {\r\n      uint time;\r\n      string headline;\r\n      string explain;\r\n      string imagelist;\r\n      string showdemo;\r\n      string category;\r\n      address senderaddress;\r\n      uint256 pid;\r\n      uint256 price;\r\n    }\r\n\r\n    mapping (string => productDetails) newProduct;\r\n    string[] public listofproducts;\r\n\r\n    function SharenewProduct(string memory uHeadline, string memory uExplain, string memory uImageList, string memory uShowDemo,string memory uCate, uint uPrice, string memory pname) public {\r\n\r\n        uint256 newpid = getProductID();\r\n        newProduct[pname].time = now;\r\n        newProduct[pname].senderaddress = msg.sender;\r\n        newProduct[pname].headline = uHeadline;\r\n        newProduct[pname].explain = uExplain;\r\n        newProduct[pname].imagelist = uImageList;\r\n        newProduct[pname].showdemo = uShowDemo;\r\n        newProduct[pname].category = uCate;\r\n        newProduct[pname].pid = newpid;\r\n        newProduct[pname].price = uPrice;\r\n        listofproducts.push(pname) -1;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function numberofProduct() view public returns (uint) {\r\n      return listofproducts.length;\r\n    }\r\n\r\n    function getpnamefromid(uint _pid) view public returns (string memory){\r\n        return listofproducts[_pid];\r\n    }\r\n\r\n\r\n    function getProductFromName(string memory pname) view public returns (string memory, string memory,string memory, string memory, string memory, string memory, string memory) {\r\n\r\n        if(newProduct[pname].time == 0){\r\n            return (\"0\", \"0\", \"0\",\"0\",\"0\",\"0\",\"0\");\r\n        } else {\r\n        return (uint2str(newProduct[pname].time), uint2str(newProduct[pname].price), newProduct[pname].headline, newProduct[pname].explain, newProduct[pname].imagelist, newProduct[pname].showdemo, newProduct[pname].category);\r\n        }\r\n    }\r\n\r\n\r\n    function checkProductExist(string memory pname) view public returns (bool) {\r\n\r\n        if(newProduct[pname].time == 0){\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  struct Requesters {\r\n      bool exists;\r\n      uint256 ptime;\r\n      string publicKey;\r\n      address rqaddress;\r\n  }\r\n\r\n  mapping(string => Requesters[]) rlist;\r\n  mapping (string => bool) private RWlist;\r\n  string[] public listofrequests;\r\n\r\n function checkWalletexist(string memory _wallet) view public returns (bool){\r\n        return RWlist[_wallet];\r\n }\r\n\r\n\r\n  function setNewRequest(string memory pname, string memory pubkey) public returns (uint)  {\r\n      bool checkProduct = checkProductExist(pname);\r\n      if(checkProduct){\r\n          string memory wid = appendString(WallettoString(msg.sender),pname);\r\n\r\n          bool cwallet = checkWalletexist(wid);\r\n\r\n          if(cwallet){\r\n              revert();\r\n          } else {\r\n            if(balanceOf[msg.sender] >= newProduct[pname].price) {\r\n              transfer(fundsWallet, newProduct[pname].price);\r\n              RWlist[wid]=true;\r\n              rlist[pname].push(Requesters(true,now, pubkey, msg.sender));\r\n              listofproducts.push(wid) -1;\r\n              return rlist[pname].length - 1;\r\n            } else {\r\n                revert();\r\n            }\r\n\r\n          }\r\n      } else {\r\n          revert();\r\n      }\r\n\r\n  }\r\n\r\n\r\n\r\n    function num_of_request() view public returns (uint) {\r\n      return listofproducts.length;\r\n    }\r\n\r\n    function get_product_from_pid(uint _listid) view public returns (string memory){\r\n        return listofproducts[_listid];\r\n    }\r\n\r\n\r\n   function num_of_product_requests(string memory key) public view returns (uint) {\r\n    return rlist[key].length;\r\n  }\r\n\r\n  function get_public_key(string memory key, uint index) public view returns (string memory) {\r\n    if (rlist[key][index].exists == false) {\r\n      assert(false);\r\n    }\r\n    return rlist[key][index].publicKey;\r\n  }\r\n\r\n\r\n   struct TransmitProduct {\r\n      bool exists;\r\n      bool status;\r\n      uint256 ptime;\r\n      string signedMessage;\r\n      address forwho;\r\n  }\r\n\r\n  mapping(string => TransmitProduct[]) responseList;\r\n  mapping (string => bool) private bwlist;\r\n  string[] public listoftransmits;\r\n\r\n\r\n  function checkBWalletexist(string memory _walletandid) view public returns (bool){\r\n        return bwlist[_walletandid];\r\n  }\r\n\r\n  function WallettoString(address x) public pure returns(string memory) {\r\n    bytes memory b = new bytes(20);\r\n    for (uint i = 0; i < 20; i++)\r\n        b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n    return string(b);\r\n }\r\n\r\n function appendString(string memory a, string memory b) internal pure returns (string memory) {\r\n    return string(abi.encodePacked(a, b));\r\n}\r\n\r\n\r\n\r\n   function setTransmitProduct(string memory pname, uint index, string memory smessage) payable public  {\r\n      bool checkProduct = checkProductExist(pname);\r\n      if(checkProduct){\r\n          address radress = rlist[pname][index].rqaddress;\r\n          string memory wid = appendString(WallettoString(radress),pname);\r\n          bool cwallet = checkBWalletexist(wid);\r\n\r\n          if(cwallet){\r\n              revert();\r\n          } else {\r\n\r\n              if(msg.sender == newProduct[pname].senderaddress){\r\n\r\n                require(balanceOf[fundsWallet] >= newProduct[pname].price);\r\n                _transfer(fundsWallet, msg.sender, newProduct[pname].price);\r\n\r\n                bwlist[wid]=true;\r\n                responseList[pname].push(TransmitProduct(true, true, now, smessage, radress));\r\n                listoftransmits.push(wid) -1;\r\n              } else {\r\n                  revert();\r\n              }\r\n          }\r\n      } else {\r\n          revert();\r\n      }\r\n\r\n  }\r\n\r\n\r\n\r\n  function cancelTransmitProduct(string memory pname, uint index) public  {\r\n      bool checkProduct = checkProductExist(pname);\r\n      if(checkProduct){\r\n          address radress = rlist[pname][index].rqaddress;\r\n          string memory wid = appendString(WallettoString(radress),pname);\r\n          bool cwallet = checkBWalletexist(wid);\r\n\r\n\r\n          if(cwallet){\r\n              revert();\r\n          } else {\r\n              if(msg.sender == rlist[pname][index].rqaddress){\r\n                 require(balanceOf[fundsWallet] >= newProduct[pname].price);\r\n                _transfer(fundsWallet,msg.sender,newProduct[pname].price);\r\n                bwlist[wid]=true;\r\n                responseList[pname].push(TransmitProduct(true, false, now, \"canceled\", radress));\r\n                listoftransmits.push(wid) -1;\r\n              } else {\r\n                  revert();\r\n              }\r\n          }\r\n      } else {\r\n          revert();\r\n      }\r\n\r\n  }\r\n\r\n\r\n    function num_of_transmit() view public returns (uint) {\r\n      return listoftransmits.length;\r\n    }\r\n\r\n    function get_transmits_from_pid(uint _listid) view public returns (string memory){\r\n        return listoftransmits[_listid];\r\n    }\r\n\r\n  function num_of_product_transmit(string memory _pid) public view returns (uint) {\r\n    return responseList[_pid].length;\r\n  }\r\n\r\n  function getTransmits(string memory _pid, uint index) public view returns (address) {\r\n    if (responseList[_pid][index].exists == false) {\r\n      assert(false);\r\n    }\r\n    return rlist[_pid][index].rqaddress;\r\n  }\r\n\r\n\r\n\r\n    function() payable external{\r\n      uint256 yirmimart = 1553040000;\r\n      uint256 onnisan = 1554854400;\r\n      uint256 birmayis = 1556668800;\r\n      uint256 yirmimayis = 1558310400;\r\n      uint256 onhaziran = 1560124800;\r\n\r\n      if(yirmimart > now) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 100);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 100);\r\n        fundsWallet.transfer(msg.value);\r\n      } else if(yirmimart < now && onnisan > now) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 15000);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 15000);\r\n        fundsWallet.transfer(msg.value);\r\n      } else if(onnisan < now && birmayis > now) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 12000);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 12000);\r\n        fundsWallet.transfer(msg.value);\r\n      }else if(birmayis < now && yirmimayis > now) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 10000);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 10000);\r\n        fundsWallet.transfer(msg.value);\r\n      }else if(yirmimayis < now && onhaziran > now) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 7500);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 7500);\r\n        fundsWallet.transfer(msg.value);\r\n      } else {\r\n        assert(false);\r\n      }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"num_of_transmit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"num_of_product_requests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getpnamefromid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"}],\"name\":\"checkProductExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTransmits\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"}],\"name\":\"getProductFromName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberofProduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"checkWalletexist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_listid\",\"type\":\"uint256\"}],\"name\":\"get_product_from_pid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"num_of_request\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelTransmitProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uHeadline\",\"type\":\"string\"},{\"name\":\"uExplain\",\"type\":\"string\"},{\"name\":\"uImageList\",\"type\":\"string\"},{\"name\":\"uShowDemo\",\"type\":\"string\"},{\"name\":\"uCate\",\"type\":\"string\"},{\"name\":\"uPrice\",\"type\":\"uint256\"},{\"name\":\"pname\",\"type\":\"string\"}],\"name\":\"SharenewProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"},{\"name\":\"pubkey\",\"type\":\"string\"}],\"name\":\"setNewRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_public_key\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"WallettoString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletandid\",\"type\":\"string\"}],\"name\":\"checkBWalletexist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"smessage\",\"type\":\"string\"}],\"name\":\"setTransmitProduct\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"string\"}],\"name\":\"num_of_product_transmit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofproducts\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listoftransmits\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofrequests\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_listid\",\"type\":\"uint256\"}],\"name\":\"get_transmits_from_pid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"GQSTAND","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d08fab9f5918756c86ecb47b7428a676b0bcd3d6ee1ded5f843be325580d168c"}]}