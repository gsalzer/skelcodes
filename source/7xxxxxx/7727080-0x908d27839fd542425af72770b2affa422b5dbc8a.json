{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC223ReceiverMixin {\r\n  function tokenFallback(address _from, uint256 _value, bytes memory _data) public;\r\n}\r\n\r\n/// @title Custom implementation of ERC223 \r\n/// @author Mai Abha <maiabha82@gmail.com>\r\ncontract ERC223Mixin is StandardToken {\r\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) public returns (bool) \r\n  {\r\n    bytes memory empty;\r\n    return transferFrom(\r\n      _from, \r\n      _to,\r\n      _value,\r\n      empty);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes memory _data\r\n  ) public returns (bool)\r\n  {\r\n    require(_value <= allowed[_from][msg.sender], \"Reached allowed value\");\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    if (isContract(_to)) {\r\n      return transferToContract(\r\n        _from, \r\n        _to, \r\n        _value, \r\n        _data);\r\n    } else {\r\n      return transferToAddress(\r\n        _from, \r\n        _to, \r\n        _value, \r\n        _data); \r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value, bytes memory _data) public returns (bool success) {\r\n    if (isContract(_to)) {\r\n      return transferToContract(\r\n        msg.sender,\r\n        _to,\r\n        _value,\r\n        _data); \r\n    } else {\r\n      return transferToAddress(\r\n        msg.sender,\r\n        _to,\r\n        _value,\r\n        _data);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    bytes memory empty;\r\n    return transfer(_to, _value, empty);\r\n  }\r\n\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 length;\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_addr)\r\n    }  \r\n    return (length>0);\r\n  }\r\n\r\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n    if (balanceOf(_from) < _value) {\r\n      revert();\r\n    }\r\n    balances[_from] = balanceOf(_from).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferToAddress(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes memory _data\r\n  ) internal returns (bool success) \r\n  {\r\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\r\n    emit Transfer(_from, _to, _value);\r\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes memory _data\r\n  ) internal returns (bool success) \r\n  {\r\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\r\n    ERC223ReceiverMixin(_to).tokenFallback(_from, _value, _data);\r\n    emit Transfer(_from, _to, _value);\r\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\r\n    return true;\r\n  }\r\n}\r\n\r\n/// @title Role based access control mixin for Vinci Platform\r\n/// @author Mai Abha <maiabha82@gmail.com>\r\n/// @dev Ignore DRY approach to achieve readability\r\ncontract RBACMixin {\r\n  /// @notice Constant string message to throw on lack of access\r\n  string constant FORBIDDEN = \"Doesn't have enough rights\";\r\n  string constant DUPLICATE = \"Requirement already satisfied\";\r\n\r\n  /// @notice Public owner\r\n  address public owner;\r\n\r\n  /// @notice Public map of minters\r\n  mapping (address => bool) public minters;\r\n\r\n  /// @notice The event indicates a set of a new owner\r\n  /// @param who is address of added owner\r\n  event SetOwner(address indexed who);\r\n\r\n  /// @notice The event indicates the addition of a new minter\r\n  /// @param who is address of added minter\r\n  event AddMinter(address indexed who);\r\n  /// @notice The event indicates the deletion of a minter\r\n  /// @param who is address of deleted minter\r\n  event DeleteMinter(address indexed who);\r\n\r\n  constructor () public {\r\n    _setOwner(msg.sender);\r\n  }\r\n\r\n  /// @notice The functional modifier rejects the interaction of sender who is not an owner\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Look up for the owner role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of owner role\r\n  function isOwner(address _who) public view returns (bool) {\r\n    return owner == _who;\r\n  }\r\n\r\n  /// @notice Look up for the minter role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of minter role\r\n  function isMinter(address _who) public view returns (bool) {\r\n    return minters[_who];\r\n  }\r\n\r\n  /// @notice Adds the owner role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function setOwner(address _who) public onlyOwner returns (bool) {\r\n    require(_who != address(0));\r\n    _setOwner(_who);\r\n  }\r\n\r\n  /// @notice Adds the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function addMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, true);\r\n  }\r\n\r\n  /// @notice Deletes the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to delete role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, false);\r\n  }\r\n\r\n  /// @notice Changes the owner role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setOwner(address _who) private returns (bool) {\r\n    require(owner != _who, DUPLICATE);\r\n    owner = _who;\r\n    emit SetOwner(_who);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Changes the minter role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setMinter(address _who, bool _flag) private returns (bool) {\r\n    require(minters[_who] != _flag, DUPLICATE);\r\n    minters[_who] = _flag;\r\n    if (_flag) {\r\n      emit AddMinter(_who);\r\n    } else {\r\n      emit DeleteMinter(_who);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract RBACMintableTokenMixin is StandardToken, RBACMixin {\r\n  /// @notice Total issued tokens\r\n  uint256 totalIssued_;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished, \"Minting is finished\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    onlyMinter\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalIssued_ = totalIssued_.add(_amount);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n/// @title Vinci token implementation\r\n/// @author Mai Abha <maiabha82@gmail.com>\r\n/// @dev Implements ERC20, ERC223 and MintableToken interfaces\r\ncontract VinciToken is StandardBurnableToken, RBACMintableTokenMixin, ERC223Mixin {\r\n  /// @notice Constant field with token full name\r\n  // solium-disable-next-line uppercase\r\n  string constant public name = \"Vinci\"; \r\n  /// @notice Constant field with token symbol\r\n  string constant public symbol = \"VINCI\"; // solium-disable-line uppercase\r\n  /// @notice Constant field with token precision depth\r\n  uint256 constant public decimals = 18; // solium-disable-line uppercase\r\n  /// @notice Constant field with token cap (total supply limit)\r\n  uint256 constant public cap = 1500 * (10 ** 6) * (10 ** decimals); // solium-disable-line uppercase\r\n\r\n  /// @notice Overrides original mint function from MintableToken to limit minting over cap\r\n  /// @param _to The address that will receive the minted tokens.\r\n  /// @param _amount The amount of tokens to mint.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool) \r\n  {\r\n    require(totalIssued_.add(_amount) <= cap, \"Cap is reached\");\r\n    return super.mint(_to, _amount);\r\n  }\r\n}\r\n\r\ncontract BasicMultisig {\r\n  string constant ALREADY_EXECUTED = \"Operation already executed\";\r\n\r\n  VinciToken public vinci_contract;  // address of the VinciToken contract\r\n\r\n  /// @notice Public map of owners\r\n  mapping (address => bool) public owners;\r\n  /// @notice Public map of admins\r\n  mapping (address => bool) public admins;\r\n\r\n  /// @notice multisig owners counters\r\n  mapping (uint => uint) public ownersConfirmations;\r\n  /// @notice multisig admins counters\r\n  mapping (uint => uint) public adminsConfirmations;\r\n\r\n  mapping (uint => mapping (address => bool)) public ownersSigns;\r\n  mapping (uint => mapping (address => bool)) public adminsSigns;\r\n\r\n  /// @notice executed tasks to prevent multiple execution\r\n  mapping (uint => bool) public executed;\r\n\r\n  modifier manageable() {\r\n    require(isOwner(msg.sender) || isAdmin(msg.sender), \"You're not admin or owner\");\r\n    _;\r\n  }\r\n\r\n  modifier shouldNotBeAlreadyExecuted(uint _operation) {\r\n    require(!executed[_operation], ALREADY_EXECUTED);\r\n    _;\r\n  }\r\n\r\n  modifier increasesConfirmationsCounter(uint _operation) {\r\n    increaseConfirmationsCounter(_operation);\r\n    _;\r\n  }\r\n\r\n  function isOwner(address who) public view returns (bool) {\r\n    return owners[who];\r\n  }\r\n\r\n  function isAdmin(address who) public view returns (bool) {\r\n    return admins[who];\r\n  }\r\n\r\n  uint public operation = 0;\r\n\r\n  /// @dev Fallback function: don't accept ETH\r\n  function() external payable {\r\n    revert();\r\n  }\r\n\r\n  // common method\r\n  modifier createsNewOperation() {\r\n    operation++;\r\n    if (isOwner(msg.sender)) {\r\n      ownersConfirmations[operation] = 1;\r\n      adminsConfirmations[operation] = 0;\r\n      ownersSigns[operation][msg.sender] = true;\r\n    } else {\r\n      if (isAdmin(msg.sender)) {\r\n        ownersConfirmations[operation] = 0;\r\n        adminsConfirmations[operation] = 1;\r\n        adminsSigns[operation][msg.sender] = true;\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  function increaseConfirmationsCounter(uint _operation) internal {\r\n    if (isOwner(msg.sender)) {\r\n      if (ownersSigns[_operation][msg.sender]) revert();\r\n      ownersConfirmations[_operation] += 1;\r\n    } else {\r\n      if (isAdmin(msg.sender)) {\r\n        if (adminsSigns[_operation][msg.sender]) revert();\r\n        adminsConfirmations[_operation] += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function enoughConfirmations(uint _operation) public view returns (bool) {\r\n    uint totalConfirmations = ownersConfirmations[_operation] + adminsConfirmations[_operation];\r\n    return ((ownersConfirmations[_operation] > 0) && (totalConfirmations > 2));\r\n  }\r\n  //\r\n}\r\n\r\ncontract SetOwnerMultisig is BasicMultisig {\r\n  struct SetOwnerParams { address who; }\r\n\r\n  mapping (uint => SetOwnerParams) public setOwnerOperations;\r\n\r\n\r\n  // EVENTS\r\n  event setOwnerAction(uint operation, address indexed who);\r\n  event setOwnerConfirmation(uint operation, address indexed who, uint ownersConfirmations, uint adminsConfirmations);\r\n\r\n\r\n  function setOwner(address who) public manageable\r\n                                 createsNewOperation\r\n                                 returns (uint) {\r\n\r\n    setOwnerOperations[operation] = SetOwnerParams(who);\r\n\r\n    emit setOwnerAction(operation, who);\r\n    return operation;\r\n  }\r\n\r\n  function setOwnerConfirm(uint _operation) public manageable\r\n                                            shouldNotBeAlreadyExecuted(_operation)\r\n                                            increasesConfirmationsCounter(_operation)\r\n                                            returns (bool) {\r\n    if (enoughConfirmations(_operation)){\r\n      vinci_contract.setOwner(setOwnerOperations[_operation].who);\r\n      executed[_operation] = true;\r\n    }\r\n\r\n    emit setOwnerConfirmation(_operation,\r\n                              setOwnerOperations[_operation].who,\r\n                              ownersConfirmations[_operation],\r\n                              adminsConfirmations[_operation]);\r\n  }\r\n}\r\n\r\ncontract DeleteMinterMultisig is BasicMultisig {\r\n  struct DeleteMinterParams { address who; }\r\n\r\n  mapping (uint => DeleteMinterParams) public deleteMinterOperations;\r\n\r\n\r\n  // EVENTS\r\n  event deleteMinterAction(uint operation, address indexed who);\r\n\r\n  event deleteMinterConfirmation(uint operation,\r\n                                 address indexed who,\r\n                                 uint ownersConfirmations,\r\n                                 uint adminsConfirmations);\r\n\r\n\r\n  function deleteMinter(address who) public manageable\r\n                                    createsNewOperation\r\n                                    returns (uint) {\r\n\r\n    deleteMinterOperations[operation] = DeleteMinterParams(who);\r\n\r\n    emit deleteMinterAction(operation, who);\r\n    return operation;\r\n  }\r\n\r\n  function deleteMinterConfirm(uint _operation) public manageable\r\n                                                shouldNotBeAlreadyExecuted(_operation)\r\n                                                increasesConfirmationsCounter(_operation)\r\n                                                returns (bool) {\r\n    if (enoughConfirmations(_operation)){\r\n      vinci_contract.deleteMinter(deleteMinterOperations[_operation].who);\r\n      executed[_operation] = true;\r\n    }\r\n\r\n    emit deleteMinterConfirmation(_operation,\r\n                                 deleteMinterOperations[_operation].who,\r\n                                 ownersConfirmations[_operation],\r\n                                 adminsConfirmations[_operation]);\r\n  }\r\n}\r\n\r\ncontract AddMinterMultisig is BasicMultisig {\r\n  struct AddMinterParams { address who; }\r\n\r\n  mapping (uint => AddMinterParams) public addMinterOperations;\r\n\r\n\r\n  // EVENTS\r\n  event addMinterAction(uint operation, address indexed who);\r\n\r\n  event addMinterConfirmation(uint operation,\r\n                              address indexed who,\r\n                              uint ownersConfirmations,\r\n                              uint adminsConfirmations);\r\n\r\n\r\n  function addMinter(address who) public manageable\r\n                                  createsNewOperation\r\n                                  returns (uint) {\r\n\r\n    addMinterOperations[operation] = AddMinterParams(who);\r\n\r\n    emit addMinterAction(operation, who);\r\n    return operation;\r\n  }\r\n\r\n  function addMinterConfirm(uint _operation) public manageable\r\n                                             shouldNotBeAlreadyExecuted(_operation)\r\n                                             increasesConfirmationsCounter(_operation)\r\n                                             returns (bool) {\r\n\r\n    if (enoughConfirmations(_operation)){\r\n      vinci_contract.addMinter(addMinterOperations[_operation].who);\r\n      executed[_operation] = true;\r\n    }\r\n\r\n    emit addMinterConfirmation(_operation,\r\n                               addMinterOperations[_operation].who,\r\n                               ownersConfirmations[_operation],\r\n                               adminsConfirmations[_operation]);\r\n  }\r\n}\r\n\r\ncontract MintMultisig is BasicMultisig {\r\n  struct MintParams { address to; uint256 amount; }\r\n\r\n  mapping (uint => MintParams) public mintOperations;\r\n\r\n\r\n  // EVENTS\r\n  event mintAction(uint operation,\r\n                   address indexed to,\r\n                   uint256 amount);\r\n\r\n  event mintConfirmation(uint operation,\r\n                         address indexed to,\r\n                         uint256 amount,\r\n                         uint ownersConfirmations,\r\n                         uint adminsConfirmations);\r\n\r\n\r\n  function mint(address to, uint256 amount) public manageable\r\n                             createsNewOperation\r\n                             returns (uint) {\r\n\r\n    mintOperations[operation] = MintParams(to, amount);\r\n\r\n    emit mintAction(operation, to, amount);\r\n    return operation;\r\n  }\r\n\r\n  function mintConfirm(uint _operation) public manageable\r\n                                        shouldNotBeAlreadyExecuted(_operation)\r\n                                        increasesConfirmationsCounter(_operation)\r\n                                        returns (bool) {\r\n    if (enoughConfirmations(_operation)){\r\n      vinci_contract.mint(mintOperations[_operation].to, mintOperations[_operation].amount);\r\n      executed[_operation] = true;\r\n    }\r\n\r\n    emit mintConfirmation(_operation,\r\n                          mintOperations[_operation].to,\r\n                          mintOperations[_operation].amount,\r\n                          ownersConfirmations[_operation],\r\n                          adminsConfirmations[_operation]);\r\n  }\r\n}\r\n\r\ncontract FinishMintingMultisig is BasicMultisig {\r\n  // EVENTS\r\n  event finishMintingAction(uint operation);\r\n\r\n  event finishMintingConfirmation(uint operation,\r\n                                  uint ownersConfirmations,\r\n                                  uint adminsConfirmations);\r\n\r\n\r\n  function finishMinting() public manageable\r\n                           createsNewOperation\r\n                           returns (uint) {\r\n\r\n    emit finishMintingAction(operation);\r\n    return operation;\r\n  }\r\n\r\n  function finishMintingConfirm(uint _operation) public manageable\r\n                                                 shouldNotBeAlreadyExecuted(_operation)\r\n                                                 increasesConfirmationsCounter(_operation)\r\n                                                 returns (bool) {\r\n    if (enoughConfirmations(_operation)){\r\n      vinci_contract.finishMinting();\r\n      executed[_operation] = true;\r\n    }\r\n\r\n    emit finishMintingConfirmation(_operation,\r\n                                   ownersConfirmations[_operation],\r\n                                   adminsConfirmations[_operation]);\r\n  }\r\n}\r\n\r\ncontract Multisig is SetOwnerMultisig,\r\n\r\n                     AddMinterMultisig,\r\n                     DeleteMinterMultisig,\r\n\r\n                     MintMultisig,\r\n                     FinishMintingMultisig {\r\n\r\n  constructor(VinciToken _vinci_contract) public {\r\n    vinci_contract = _vinci_contract;\r\n\r\n    owners[0x22e936f4a00ABc4120208D7E8EF9f76d3555Cb05] = true;\r\n    owners[0x95a06E0B6F94A6Cbae49317ED0c87056Eb8494e8] = true;\r\n\r\n    admins[0x020748bFeB4E877125ABa9A1D283d41A48f12584] = true;\r\n    admins[0xED182c9CE936C541599A049570DD7EEFE06387e9] = true;\r\n    admins[0x2ef7AC759F06509535750403663278cc22FDaEF1] = true;\r\n    admins[0x27481f1D81F8B6eff5860c43111acFEc6A8C5290] = true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminsConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"enoughConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersSigns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminsSigns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"addMinterConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deleteMinterOperations\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"setOwnerConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"finishMintingConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"mintConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"uint256\"}],\"name\":\"deleteMinterConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownersConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vinci_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addMinterOperations\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deleteMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintOperations\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setOwnerOperations\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vinci_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"finishMintingAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adminsConfirmations\",\"type\":\"uint256\"}],\"name\":\"finishMintingConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adminsConfirmations\",\"type\":\"uint256\"}],\"name\":\"mintConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deleteMinterAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownersConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adminsConfirmations\",\"type\":\"uint256\"}],\"name\":\"deleteMinterConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addMinterAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownersConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adminsConfirmations\",\"type\":\"uint256\"}],\"name\":\"addMinterConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwnerAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownersConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adminsConfirmations\",\"type\":\"uint256\"}],\"name\":\"setOwnerConfirmation\",\"type\":\"event\"}]","ContractName":"Multisig","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004cf514824f035cc9440f6316e327156c0da6c541","Library":"","SwarmSource":"bzzr://6c7f2f51045c83f70e32d33f71df7be9fec581eedaba5353ce2d53f0578120d1"}]}