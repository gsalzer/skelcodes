{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Eight Hour Token contract\r\n/// @notice defines standard ERC-20 functionality.\r\n//-----------------------------------------------------------------------------\r\ncontract EightHoursToken {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when ownership of EHrT changes by any mechanism. Also emits\r\n    ///  when tokens are destroyed ('to' == 0).\r\n    //-------------------------------------------------------------------------\r\n    event Transfer (address indexed _from, address indexed _to, uint _tokens);\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when an approved spender is changed or reaffirmed, or if\r\n    ///  the allowance amount changes. The zero address indicates there is no\r\n    ///  approved address.\r\n    //-------------------------------------------------------------------------\r\n    event Approval (\r\n        address indexed _tokenOwner, \r\n        address indexed _spender, \r\n        uint _tokens\r\n    );\r\n    \r\n    // total number of tokens in circulation.\r\n    //  Burning tokens reduces this amount\r\n    uint totalEHrT = (10 ** 10) * (10**18);    // ten billion\r\n    // the token balances of all token holders\r\n    mapping (address => uint) ehrtBalances;\r\n    // approved spenders and allowances of all token holders\r\n    mapping (address => mapping (address => uint)) allowances;\r\n\r\n    constructor() public {\r\n        ehrtBalances[msg.sender] = totalEHrT;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if tokenOwner has insufficient EHrT balance\r\n    //-------------------------------------------------------------------------\r\n    modifier sufficientFunds(address tokenOwner, uint tokens) {\r\n        require (ehrtBalances[tokenOwner] >= tokens, \"Insufficient balance\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Send `(tokens/1000000000000000000).fixed(0,18)` EHrT to `to`.\r\n    /// @dev Throws if `msg.sender` has insufficient balance for transfer.\r\n    /// @param _to The address to where EHrT is being sent.\r\n    /// @param _tokens The number of tokens to send.\r\n    /// @return True upon successful transfer. Will throw if unsuccessful.\r\n    //-------------------------------------------------------------------------\r\n    function transfer(address _to, uint _tokens) \r\n        public\r\n        sufficientFunds(msg.sender, _tokens)\r\n        returns(bool) \r\n    {\r\n        // subtract amount from sender\r\n        ehrtBalances[msg.sender] -= _tokens;\r\n\r\n        if (_to != address(0)) {\r\n            // add amount to token receiver\r\n            ehrtBalances[_to] += _tokens;\r\n        }\r\n        else {\r\n            // burn amount\r\n            totalEHrT -= _tokens;\r\n        }\r\n\r\n        // emit transfer event\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        \r\n        return true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Send `(tokens/1000000000000000000).fixed(0,18)` EHrT from\r\n    ///  `from` to `to`.\r\n    /// @dev Throws if `msg.sender` has insufficient allowance for transfer.\r\n    ///  Throws if `from` has insufficient balance for transfer.\r\n    /// @param _from The address from where EHrT is being sent. Sender must be\r\n    ///  an approved spender.\r\n    /// @param _to The token owner whose EHrT is being sent.\r\n    /// @param _tokens The number of tokens to send.\r\n    /// @return True upon successful transfer. Will throw if unsuccessful.\r\n    //-------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _tokens) \r\n        public\r\n        sufficientFunds(_from, _tokens)\r\n        returns(bool) \r\n    {\r\n        require (\r\n            allowances[_from][msg.sender] >= _tokens, \r\n            \"Insufficient allowance\"\r\n        );\r\n        // subtract amount from sender's allowance\r\n        allowances[_from][msg.sender] -= _tokens;\r\n        // subtract amount from token owner\r\n        ehrtBalances[_from] -= _tokens;\r\n\r\n        if (_to != address(0)) {\r\n            // add amount to token receiver\r\n            ehrtBalances[_to] += _tokens;\r\n        }\r\n        else {\r\n            // burn amount\r\n            totalEHrT -= _tokens;\r\n        }\r\n        // emit transfer event\r\n        emit Transfer(_from, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Allow `_spender` to withdraw from your account, multiple times,\r\n    ///  up to `(tokens/1000000000000000000).fixed(0,18)` EHrT. Calling this\r\n    ///  function overwrites the previous allowance of spender.\r\n    /// @dev Emits approval event\r\n    /// @param _spender The address to authorize as a spender\r\n    /// @param _tokens The new token allowance of spender (in pWei).\r\n    //-------------------------------------------------------------------------\r\n    function approve(address _spender, uint _tokens) external returns(bool) {\r\n        // set the spender's allowance to token amount\r\n        allowances[msg.sender][_spender] = _tokens;\r\n        // emit approval event\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the total number of tokens in circulation.\r\n    /// @return Total tokens tracked by this contract.\r\n    //-------------------------------------------------------------------------\r\n    function totalSupply() external view returns (uint) { return totalEHrT; }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the number of EHrT tokens owned by `_tokenOwner`.\r\n    /// @param _tokenOwner The EHrT token owner.\r\n    /// @return The number of EHrT tokens owned by `tokenOwner` (in pWei).\r\n    //-------------------------------------------------------------------------\r\n    function balanceOf(address _tokenOwner) public view returns(uint) {\r\n        return ehrtBalances[_tokenOwner];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the remaining allowance of spender for token owner.\r\n    /// @param _tokenOwner The EHrT token owner.\r\n    /// @param _spender The approved spender address.\r\n    /// @return The remaining allowance of spender for tokenOwner.\r\n    //-------------------------------------------------------------------------\r\n    function allowance(\r\n        address _tokenOwner, \r\n        address _spender\r\n    ) public view returns (uint) {\r\n        return allowances[_tokenOwner][_spender];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the token's name.\r\n    /// @return The token's name as a string\r\n    //-------------------------------------------------------------------------\r\n    function name() external pure returns (string memory) { \r\n        return \"Eight Hours Token\"; \r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the token's ticker symbol.\r\n    /// @return The token's ticker symbol as a string\r\n    //-------------------------------------------------------------------------\r\n    function symbol() external pure returns (string memory) { return \"EHrT\"; }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the number of allowed decimal places for the token.\r\n    /// @return The number of allowed decimal places for the token.\r\n    //-------------------------------------------------------------------------\r\n    function decimals() external pure returns (uint8) { return 18; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EightHoursToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9caf97b7f1557cc8382961a840c8c91ba85f66c67465bbac36ddcf408dae0b5a"}]}