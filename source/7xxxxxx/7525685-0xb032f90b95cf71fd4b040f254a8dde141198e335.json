{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract FiftyContract {\r\n\tmapping (address => mapping (uint => mapping (uint => mapping (uint => treeNode)))) public treeChildren;\r\n\tmapping (address => mapping (uint => bool)) public currentNodes;\r\n\tmapping (address => mapping (uint => uint)) public nodeIDIndex;\r\n\tmapping (address => uint) public membership;\r\n\tmapping(address => mapping(uint => uint)) public memberOrders;\r\n\tmapping (address => uint) public nodeReceivedETH;\r\n\tstruct treeNode {\r\n\t\t address payable ethAddress; \r\n\t\t uint nodeType; \r\n\t\t uint nodeID;\r\n\t}\r\n\tuint public spread;\r\n}\r\ncontract Adminstrator {\r\n  address public admin;\r\n  address payable public owner;\r\n\r\n  modifier onlyAdmin() { \r\n        require(msg.sender == admin || msg.sender == owner,\"Not authorized\"); \r\n        _;\r\n  } \r\n\r\n  constructor() public {\r\n    admin = msg.sender;\r\n\towner = msg.sender;\r\n  }\r\n\r\n  function transferAdmin(address newAdmin) public onlyAdmin {\r\n    admin = newAdmin; \r\n  }\r\n}\r\ncontract readFiftyContract is Adminstrator{\r\n\t\r\n\taddress public baseAddr = 0x7B15bd1B13ACa9127e5e3bfaF238aB51839f8Ea2;\r\n\tFiftyContract bcontract = FiftyContract(baseAddr);\r\n\t\r\n\tfunction setContract(address newAddr) public onlyAdmin {\r\n\t\tbaseAddr = newAddr;\r\n\t\tbcontract = FiftyContract(baseAddr);\r\n\t}\r\n\tfunction getReceivedETH(address r) public view returns (uint, uint, uint, uint, uint){\r\n\t\treturn ( bcontract.nodeReceivedETH(r) , bcontract.nodeIDIndex(r, 1 ether) \r\n\t\t, bcontract.nodeIDIndex(r, 2 ether) , bcontract.nodeIDIndex(r, 3 ether) \r\n\t\t, bcontract.nodeIDIndex(r, 5 ether) );\r\n\t}\r\n\tfunction getTree(address r, uint t, uint cc) public view returns(address[7] memory){\r\n\t\taddress[7] memory Adds;\r\n\t\tif(bcontract.nodeIDIndex(r,t) <= cc) return Adds;\r\n\t\t(,uint pp,) = bcontract.treeChildren(r,t,cc,0);\r\n\t\tif (pp!=0 || bcontract.nodeIDIndex(r,t) == (cc+1) ) Adds[0]=r;\r\n\t\telse return Adds;\r\n\t\tuint8 spread = uint8(bcontract.spread());\r\n\t\tfor (uint8 i=0; i < spread; i++) {\r\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\r\n\t\t\tif(p != 0){\r\n\t\t\t\tAdds[i+1]=k;\r\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\r\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \r\n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Adds;\r\n\t}\r\n\t/*function getHistory(address r, uint s) public view returns (bool,uint8, uint8,uint256){\r\n\t\tif(bcontract.nodeLatestAction(r) <= s) return (false,0,0,0);\r\n\t\t(FiftyContract.nodeActionType aT, uint8 nP, uint256 tT) = bcontract.nodeActionHistory(r,s);\r\n\t\tuint8 actType;\r\n\t\tif(aT == FiftyContract.nodeActionType.joinMember) actType=0;\r\n\t\tif(aT == FiftyContract.nodeActionType.startTree) actType=1;\r\n\t\tif(aT == FiftyContract.nodeActionType.addNode) actType=2;\r\n\t\tif(aT == FiftyContract.nodeActionType.completeTree) actType=3;\r\n\t\treturn (true,actType,nP,tT);\r\n\t}*/\r\n\tfunction getCurrentTree(address r, uint t) public view returns(address[7] memory){\r\n\t\taddress[7] memory Adds;\r\n\t\tif(bcontract.nodeIDIndex(r,t) > (2 ** 32) -2 || !bcontract.currentNodes(r,t)) \r\n\t\t    return Adds;\r\n\t\tuint cc=bcontract.nodeIDIndex(r,t) - 1;\r\n\t\tAdds[0]=r;\r\n\t\tuint8 spread = uint8(bcontract.spread());\r\n\t\tfor (uint8 i=0; i < spread; i++) {\r\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\r\n\t\t\tif(p != 0){\r\n\t\t\t\tAdds[i+1]=k;\r\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\r\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \r\n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Adds;\r\n\t}\r\n\tfunction getMemberShip(address r) public view returns(uint){\r\n\t\treturn bcontract.membership(r);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getCurrentTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getReceivedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"},{\"name\":\"cc\",\"type\":\"uint256\"}],\"name\":\"getTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getMemberShip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"readFiftyContract","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b5e2fbf60d8ce91da809cccb171db67920e03dee41ea4795ae2717cf7f4f397"}]}