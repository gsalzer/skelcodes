{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.25 <0.6.0;\n\n\n\n/*\n * Hubii Nahmii\n *\n * Compliant with the Hubii Nahmii specification v0.12.\n *\n * Copyright (C) 2017-2018 Hubii AS\n */\n\n\n\n\n/**\n * @title     MonetaryTypesLib\n * @dev       Monetary data types\n */\nlibrary MonetaryTypesLib {\n    //\n    // Structures\n    // -----------------------------------------------------------------------------------------------------------------\n    struct Currency {\n        address ct;\n        uint256 id;\n    }\n\n    struct Figure {\n        int256 amount;\n        Currency currency;\n    }\n\n    struct NoncedAmount {\n        uint256 nonce;\n        int256 amount;\n    }\n}\n\n/*\n * Hubii Nahmii\n *\n * Compliant with the Hubii Nahmii specification v0.12.\n *\n * Copyright (C) 2017-2018 Hubii AS\n */\n\n\n\n\n\n/**\n * @title     NahmiiTypesLib\n * @dev       Data types of general nahmii character\n */\nlibrary NahmiiTypesLib {\n    //\n    // Enums\n    // -----------------------------------------------------------------------------------------------------------------\n    enum ChallengePhase {Dispute, Closed}\n\n    //\n    // Structures\n    // -----------------------------------------------------------------------------------------------------------------\n    struct OriginFigure {\n        uint256 originId;\n        MonetaryTypesLib.Figure figure;\n    }\n\n    struct IntendedConjugateCurrency {\n        MonetaryTypesLib.Currency intended;\n        MonetaryTypesLib.Currency conjugate;\n    }\n\n    struct SingleFigureTotalOriginFigures {\n        MonetaryTypesLib.Figure single;\n        OriginFigure[] total;\n    }\n\n    struct TotalOriginFigures {\n        OriginFigure[] total;\n    }\n\n    struct CurrentPreviousInt256 {\n        int256 current;\n        int256 previous;\n    }\n\n    struct SingleTotalInt256 {\n        int256 single;\n        int256 total;\n    }\n\n    struct IntendedConjugateCurrentPreviousInt256 {\n        CurrentPreviousInt256 intended;\n        CurrentPreviousInt256 conjugate;\n    }\n\n    struct IntendedConjugateSingleTotalInt256 {\n        SingleTotalInt256 intended;\n        SingleTotalInt256 conjugate;\n    }\n\n    struct WalletOperatorHashes {\n        bytes32 wallet;\n        bytes32 operator;\n    }\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n    }\n\n    struct Seal {\n        bytes32 hash;\n        Signature signature;\n    }\n\n    struct WalletOperatorSeal {\n        Seal wallet;\n        Seal operator;\n    }\n}\n\n/*\n * Hubii Nahmii\n *\n * Compliant with the Hubii Nahmii specification v0.12.\n *\n * Copyright (C) 2017-2018 Hubii AS\n */\n\n\n\n\n\n\n/**\n * @title     PaymentTypesLib\n * @dev       Data types centered around payment\n */\nlibrary PaymentTypesLib {\n    //\n    // Enums\n    // -----------------------------------------------------------------------------------------------------------------\n    enum PaymentPartyRole {Sender, Recipient}\n\n    //\n    // Structures\n    // -----------------------------------------------------------------------------------------------------------------\n    struct PaymentSenderParty {\n        uint256 nonce;\n        address wallet;\n\n        NahmiiTypesLib.CurrentPreviousInt256 balances;\n\n        NahmiiTypesLib.SingleFigureTotalOriginFigures fees;\n\n        string data;\n    }\n\n    struct PaymentRecipientParty {\n        uint256 nonce;\n        address wallet;\n\n        NahmiiTypesLib.CurrentPreviousInt256 balances;\n\n        NahmiiTypesLib.TotalOriginFigures fees;\n    }\n\n    struct Operator {\n        uint256 id;\n        string data;\n    }\n\n    struct Payment {\n        int256 amount;\n        MonetaryTypesLib.Currency currency;\n\n        PaymentSenderParty sender;\n        PaymentRecipientParty recipient;\n\n        // Positive transfer is always in direction from sender to recipient\n        NahmiiTypesLib.SingleTotalInt256 transfers;\n\n        NahmiiTypesLib.WalletOperatorSeal seals;\n        uint256 blockNumber;\n\n        Operator operator;\n    }\n\n    //\n    // Functions\n    // -----------------------------------------------------------------------------------------------------------------\n    function PAYMENT_KIND()\n    public\n    pure\n    returns (string memory)\n    {\n        return \"payment\";\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PAYMENT_KIND\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PaymentTypesLib","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3317f60efc555dd9f1f2bc87779a009f71a6dc7a5993392d7f0364426a7de403"}]}