{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  address master;\r\n\r\n  bool public paused;\r\n\r\n\r\n  modifier isMaster {\r\n      require(msg.sender == master);\r\n      _;\r\n  }\r\n\r\n  modifier isPause {\r\n   require(paused == true);\r\n   _;\r\n }\r\n\r\n  modifier isNotPause {\r\n   require(paused == false);\r\n   _;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public isNotPause returns (bool) {\r\n    require(_spender != address(0));\r\n    require(balanceOf(msg.sender) >= _value);\r\n    require (balanceOf(_spender) + _value > balanceOf(_spender));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public isNotPause\r\n    returns (bool)\r\n  {\r\n    require(_spender != address(0));\r\n    require(balanceOf(msg.sender) >= _addedValue);\r\n    require (allowed[msg.sender][_spender] + _addedValue > allowed[msg.sender][_spender]);\r\n    allowed[msg.sender][_spender] = (\r\n    allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public isNotPause\r\n    returns (bool)\r\n  {\r\n    require(_spender != address(0));\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract NToken is StandardToken {\r\n\r\n  string public constant name = \"NToken\";\r\n  string public constant symbol = \"NT\";\r\n  uint8 public constant decimals = 8;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 660000000 * (10 ** uint256(decimals));\r\n  address coinbase;\r\n\r\n  address private constant project_foundation_address     = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\r\n  uint8   private constant project_foundation_percent     = 10;\r\n  uint256 private constant project_foundation_starttime   = 1558627200;\r\n  uint256 private constant project_foundation_interval    = 94608000;\r\n  uint256 private constant project_foundation_periods     = 1;\r\n\r\n\r\n\r\n  address private constant community_reward_address       = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\r\n  uint8   private constant community_reward_percent       = 90;\r\n\r\n\r\n\r\n\r\n\r\n  struct Vesting {\r\n    uint256 startTime;\r\n    uint256 initReleaseAmount;\r\n    uint256 amount;\r\n    uint256 interval;\r\n    uint256 periods;\r\n    uint256 withdrawed;\r\n  }\r\n\r\n  mapping (address => Vesting[]) vestings;\r\n\r\n  event AssetLock(address indexed to,uint256 startTime,uint256 initReleaseAmount,uint256 amount,uint256 interval,uint256 periods);\r\n  /**\r\n  * @dev Constructor that gives msg.sender all of existing tokens.\r\n  */\r\n  constructor(address _master) public {\r\n   require(_master != address(0));\r\n   totalSupply_ = INITIAL_SUPPLY;\r\n   master = _master;\r\n   paused = false;\r\n   coinbase = _master;\r\n   balances[coinbase] = INITIAL_SUPPLY;\r\n\r\n  \r\n   uint256 balance_project = INITIAL_SUPPLY * project_foundation_percent / 100;\r\n   assetLock(project_foundation_address,project_foundation_starttime,0,balance_project,project_foundation_interval,project_foundation_periods);\r\n\r\n   uint256 balance_community_reward = INITIAL_SUPPLY * community_reward_percent / 100;\r\n   balances[community_reward_address] = balance_community_reward;\r\n   balances[coinbase] =  balances[coinbase].sub(balance_community_reward);\r\n\r\n\r\n }\r\n\r\n\r\n  function assetLock(address _to,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) internal {\r\n      require(balances[coinbase] >= _amount);\r\n      require(_initReleaseAmount <= _amount);\r\n      vestings[_to].push(Vesting(_startTime, _initReleaseAmount, _amount, _interval, _periods, 0));\r\n      balances[coinbase] = balances[coinbase].sub(_amount);\r\n      emit AssetLock(_to,_startTime,_initReleaseAmount,_amount,_interval,_periods);\r\n }\r\n\r\n  function batchTransfer(address[] _to, uint256[] _amount) public isNotPause returns (bool) {\r\n     for (uint i = 0; i < _to.length; i++) {\r\n       getVesting(msg.sender);\r\n       transfer(_to[i] , _amount[i]);\r\n     }\r\n     return true;\r\n   }\r\n\r\n   /**\r\n   * @dev Transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n   function transfer(address _to, uint256 _value) public isNotPause returns (bool) {\r\n     require(_to != address(0));\r\n     uint256 remain = availableBalance(msg.sender);\r\n     require(_value <= remain);\r\n     getVesting(msg.sender);\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value);\r\n     return true;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n   function transferFrom(\r\n     address _from,\r\n     address _to,\r\n     uint256 _value\r\n   )\r\n     public isNotPause\r\n     returns (bool)\r\n   {\r\n     require(_to != address(0));\r\n     require(_from != address(0));\r\n     require(_value <= allowed[_from][msg.sender]);\r\n     uint256 remain = availableBalance(_from);\r\n     require(_value <= remain);\r\n     getVesting(_from);\r\n     balances[_from] = balances[_from].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     emit Transfer(_from, _to, _value);\r\n     return true;\r\n   }\r\n\r\n\r\n   function setPause() public isMaster isNotPause{\r\n     paused = true;\r\n   }\r\n\r\n   function setResume() public isMaster isPause{\r\n     paused = false;\r\n   }\r\n\r\n   function pauseStatus() public view isMaster returns (bool){\r\n     return paused;\r\n   }\r\n\r\n\r\n   function vestingBalance(address _owner) internal view returns (uint256) {\r\n     uint256 sum = 0;\r\n      for(uint i = 0 ;i < vestings[_owner].length;i++){\r\n        sum = sum.add(vestings[_owner][i].amount.sub(vestings[_owner][i].withdrawed));\r\n      }\r\n      return sum;\r\n   }\r\n\r\n  /*\r\n  Current available balance\r\n  */\r\n   function availableBalance(address _owner) public view returns (uint256) {\r\n     uint256 sum = 0;\r\n      for(uint i = 0 ;i < vestings[_owner].length;i++){\r\n        Vesting memory vs = vestings[_owner][i];\r\n        uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\r\n        uint256 keep = release.sub(vs.withdrawed);\r\n        if(keep >= 0){\r\n          sum = sum.add(keep);\r\n        }\r\n      }\r\n      return sum.add(balances[_owner]);\r\n   }\r\n\r\n   /*\r\n   Get all the assets of the user\r\n   */\r\n   function allBalance(address _owner)public view returns (uint256){\r\n     uint256 allbalance = vestingBalance(_owner);\r\n     return allbalance.add(balances[_owner]);\r\n   }\r\n    /*\r\n    Calculate the current time release\r\n    */\r\n   function vestingRelease(uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public view returns (uint256) {\r\n    return vestingReleaseFunc(now,_startTime,_initReleaseAmount,_amount,_interval,_periods);\r\n   }\r\n\r\n   /*\r\n   Calculate the current time release\r\n   */\r\n  function vestingReleaseFunc(uint256 _endTime,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public pure  returns (uint256) {\r\n    if (_endTime < _startTime) {\r\n      return 0;\r\n    }\r\n    uint256 last = _endTime.sub(_startTime);\r\n    uint256 allTime =  _periods.mul(_interval);\r\n    if (last >= allTime) {\r\n      return _amount;\r\n    }\r\n    uint256 eachPeriodAmount = _amount.sub(_initReleaseAmount).div(_periods);\r\n    uint256 lastTime = last.div(_interval);\r\n    uint256 vestingAmount = eachPeriodAmount.mul(lastTime).add(_initReleaseAmount);\r\n    return vestingAmount;\r\n  }\r\n\r\n\r\n\r\n   /*\r\n   Get vesting funds\r\n   */\r\n   function getVesting(address _to) internal {\r\n     uint256 sum = 0;\r\n     for(uint i=0;i< vestings[_to].length;i++){\r\n       if(vestings[_to][i].amount == vestings[_to][i].withdrawed){\r\n         continue;\r\n       }else{\r\n         Vesting  memory vs = vestings[_to][i];\r\n         uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\r\n         uint256 keep = release.sub(vs.withdrawed);\r\n         if(keep >= 0){\r\n           vestings[_to][i].withdrawed = release;\r\n           sum = sum.add(keep);\r\n         }\r\n       }\r\n     }\r\n     if(sum > 0 ){\r\n       balances[_to] = balances[_to].add(sum);\r\n     }\r\n   }\r\n\r\n   /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n   function balanceOf(address _owner) public view returns (uint256) {\r\n     return availableBalance(_owner);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_initReleaseAmount\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"vestingReleaseFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_initReleaseAmount\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"vestingRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setResume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initReleaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"AssetLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000044cf372a68585d3c814a3d59682694b821740b7f","Library":"","SwarmSource":"bzzr://f0aaba0f6f8b6df37a9b55313623123a5d84f68b21ea172c61e5949579ff2514"}]}