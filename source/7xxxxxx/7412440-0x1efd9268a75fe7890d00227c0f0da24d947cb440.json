{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BaseBridgeValidators.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseBridgeValidators is EternalStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant F_ADDR = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\r\n\r\n    event RequiredSignaturesChanged (uint256 requiredSignatures);\r\n\r\n    function setRequiredSignatures(uint256 _requiredSignatures)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(validatorCount() >= _requiredSignatures);\r\n        require(_requiredSignatures != 0);\r\n        uintStorage[keccak256(\"requiredSignatures\")] = _requiredSignatures;\r\n        RequiredSignaturesChanged(_requiredSignatures);\r\n    }\r\n\r\n    function getBridgeValidatorsInterfacesVersion()\r\n    public\r\n    pure\r\n    returns (uint64 major, uint64 minor, uint64 patch)\r\n    {\r\n        return (2, 1, 0);\r\n    }\r\n\r\n    function _addValidator(address _validator) internal {\r\n        require(_validator != address(0) && _validator != F_ADDR);\r\n        require(!isValidator(_validator));\r\n\r\n        address firstValidator = getNextValidator(F_ADDR);\r\n        require(firstValidator != address(0));\r\n        setNextValidator(_validator, firstValidator);\r\n        setNextValidator(F_ADDR, _validator);\r\n        setValidatorCount(validatorCount().add(1));\r\n    }\r\n\r\n    function _removeValidator(address _validator) internal {\r\n        require(validatorCount() > requiredSignatures());\r\n        require(isValidator(_validator));\r\n        address validatorsNext = getNextValidator(_validator);\r\n        address index = F_ADDR;\r\n        address next = getNextValidator(index);\r\n        require(next != address(0));\r\n\r\n        while (next != _validator) {\r\n            index = next;\r\n            next = getNextValidator(index);\r\n\r\n            if (next == F_ADDR || next == address(0) ) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        setNextValidator(index, validatorsNext);\r\n        deleteItemFromAddressStorage(\"validatorsList\", _validator);\r\n        setValidatorCount(validatorCount().sub(1));\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return uintStorage[keccak256(\"requiredSignatures\")];\r\n    }\r\n\r\n    function validatorCount() public view returns (uint256) {\r\n        return uintStorage[keccak256(\"validatorCount\")];\r\n    }\r\n\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return _validator != F_ADDR && getNextValidator(_validator) != address(0);\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[keccak256(\"isInitialized\")];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns (uint256) {\r\n        return uintStorage[keccak256(\"deployedAtBlock\")];\r\n    }\r\n\r\n    function getNextValidator(address _address) public view returns (address) {\r\n        return addressStorage[keccak256(\"validatorsList\", _address)];\r\n    }\r\n\r\n    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\r\n        delete addressStorage[keccak256(_mapName, _address)];\r\n    }\r\n\r\n    function setValidatorCount(uint256 _validatorCount) internal {\r\n        uintStorage[keccak256(\"validatorCount\")] = _validatorCount;\r\n    }\r\n\r\n    function setNextValidator(address _prevValidator, address _validator) internal {\r\n        addressStorage[keccak256(\"validatorsList\", _prevValidator)] = _validator;\r\n    }\r\n\r\n    function setInitialize(bool _status) internal {\r\n        boolStorage[keccak256(\"isInitialized\")] = _status;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/RewardableValidators.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n\r\ncontract RewardableValidators is BaseBridgeValidators {\r\n\r\n    event ValidatorAdded (address indexed validator, address reward);\r\n    event ValidatorRemoved (address indexed validator);\r\n\r\n    function initialize(\r\n        uint256 _requiredSignatures,\r\n        address[] _initialValidators,\r\n        address[] _initialRewards,\r\n        address _owner\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(!isInitialized());\r\n        require(_owner != address(0));\r\n        setOwner(_owner);\r\n        require(_requiredSignatures != 0);\r\n        require(_initialValidators.length >= _requiredSignatures);\r\n        require(_initialValidators.length == _initialRewards.length);\r\n\r\n        for (uint256 i = 0; i < _initialValidators.length; i++) {\r\n            require(_initialValidators[i] != address(0) && _initialValidators[i] != F_ADDR);\r\n            require(_initialRewards[i] != address(0));\r\n            require(!isValidator(_initialValidators[i]));\r\n\r\n            if (i == 0) {\r\n                setNextValidator(F_ADDR, _initialValidators[i]);\r\n                if (_initialValidators.length == 1) {\r\n                    setNextValidator(_initialValidators[i], F_ADDR);\r\n                }\r\n            } else if (i == _initialValidators.length - 1) {\r\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\r\n                setNextValidator(_initialValidators[i], F_ADDR);\r\n            } else {\r\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\r\n            }\r\n\r\n            setValidatorCount(validatorCount().add(1));\r\n            setValidatorRewardAddress(_initialValidators[i], _initialRewards[i]);\r\n            ValidatorAdded(_initialValidators[i], _initialRewards[i]);\r\n        }\r\n\r\n        uintStorage[keccak256(\"requiredSignatures\")] = _requiredSignatures;\r\n        uintStorage[keccak256(\"deployedAtBlock\")] = block.number;\r\n        setInitialize(true);\r\n        RequiredSignaturesChanged(_requiredSignatures);\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function addValidator(address _validator, address _reward) external onlyOwner {\r\n        require(_reward != address(0));\r\n        _addValidator(_validator);\r\n        setValidatorRewardAddress(_validator, _reward);\r\n        ValidatorAdded(_validator, _reward);\r\n    }\r\n\r\n    function removeValidator(address _validator) external onlyOwner {\r\n        _removeValidator(_validator);\r\n        deleteItemFromAddressStorage(\"validatorsRewards\", _validator);\r\n        ValidatorRemoved(_validator);\r\n    }\r\n\r\n    function validatorList() public view returns (address[]) {\r\n        address [] memory list = new address[](validatorCount());\r\n        uint256 counter = 0;\r\n        address nextValidator = getNextValidator(F_ADDR);\r\n        require(nextValidator != address(0));\r\n\r\n        while (nextValidator != F_ADDR) {\r\n            list[counter] = nextValidator;\r\n            nextValidator = getNextValidator(nextValidator);\r\n            counter++;\r\n\r\n            if (nextValidator == address(0) ) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function getValidatorRewardAddress(address _validator) public view returns (address) {\r\n        return addressStorage[keccak256(\"validatorsRewards\", _validator)];\r\n    }\r\n\r\n    function setValidatorRewardAddress(address _validator, address _reward) internal {\r\n        addressStorage[keccak256(\"validatorsRewards\", _validator)] = _reward;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeValidatorsInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"setRequiredSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorRewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNextValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"},{\"name\":\"_initialValidators\",\"type\":\"address[]\"},{\"name\":\"_initialRewards\",\"type\":\"address[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"F_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"RequiredSignaturesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RewardableValidators","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cf3d394edfb7cacfbcaf5619dcc79dc42648aaa4ab2719f9c46fe8a9cbd6bbe"}]}