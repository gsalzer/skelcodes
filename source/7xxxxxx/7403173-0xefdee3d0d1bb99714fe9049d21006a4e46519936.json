{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*Zenoshi Dividend Contract Token\r\n\r\nSymbol: ZDT\r\n\r\nVersion: 1.0\r\n\r\n*/\r\n\r\ncontract DSAuthority {\r\n\r\n    function canCall(\r\n\r\n        address src, address dst, bytes4 sig\r\n\r\n    ) public view returns (bool);\r\n\r\n}\r\ncontract DSAuthEvents {\r\n\r\n    event LogSetAuthority (address indexed authority);\r\n\r\n    event LogSetOwner     (address indexed owner);\r\n\r\n}\r\ncontract DSAuth is DSAuthEvents {\r\n\r\n    DSAuthority  public  authority;\r\n\r\n    address      public  owner;\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n\r\n        emit LogSetOwner(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setOwner(address owner_)\r\n\r\n        public\r\n\r\n        auth\r\n\r\n    {\r\n\r\n        owner = owner_;\r\n\r\n        emit LogSetOwner(owner);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n\r\n        public\r\n\r\n        auth\r\n\r\n    {\r\n\r\n        authority = authority_;\r\n\r\n        emit LogSetAuthority(authority);\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier auth {\r\n\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n\r\n        if (src == address(this)) {\r\n\r\n            return true;\r\n\r\n        } else if (src == owner) {\r\n\r\n            return true;\r\n\r\n        } else if (authority == DSAuthority(0)) {\r\n\r\n            return false;\r\n\r\n        } else {\r\n\r\n            return authority.canCall(src, this, sig);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x + y) >= x);\r\n\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x - y) <= x);\r\n\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require(y == 0 || (z = x * y) / y == x);\r\n\r\n    }\r\n\r\n\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    uint constant RAY = 10 ** 27;\r\n\r\n\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n\r\n    }\r\n\r\n\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n\r\n    //\r\n\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n\r\n    //\r\n\r\n    // These facts are why it works:\r\n\r\n    //\r\n\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n\r\n    //   and applying the equation for even x gives\r\n\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n\r\n    //\r\n\r\n    //  Also, EVM division is flooring and\r\n\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n    //\r\n\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n\r\n            x = rmul(x, x);\r\n\r\n\r\n\r\n            if (n % 2 != 0) {\r\n\r\n                z = rmul(z, x);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20Events {\r\n\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Events {\r\n\r\n    function totalSupply() public view returns (uint);\r\n\r\n    function balanceOf(address guy) public view returns (uint);\r\n\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n\r\n    function transferFrom(\r\n\r\n        address src, address dst, uint wad\r\n\r\n    ) public returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n\r\n    uint256                                            _supply;\r\n\r\n    mapping (address => uint256)                       _balances;\r\n\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n\r\n\r\n    constructor(uint supply) public {\r\n\r\n        _balances[msg.sender] = supply;\r\n\r\n        _supply = supply;\r\n\r\n    }\r\n\r\n\r\n\r\n /**\r\n\r\n  * @dev Total number of tokens in existence\r\n\r\n  */\r\n\r\n    function totalSupply() public view returns (uint) {\r\n\r\n        return _supply;\r\n\r\n    }\r\n\r\n\r\n\r\n /**\r\n\r\n  * @dev Gets the balance of the specified address.\r\n\r\n  * @param src The address to query the balance of.\r\n\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n\r\n  */\r\n\r\n\r\n\r\n    function balanceOf(address src) public view returns (uint) {\r\n\r\n        return _balances[src];\r\n\r\n    }\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\r\n   * @param src address The address which owns the funds.\r\n\r\n   * @param guy address The address which will spend the funds.\r\n\r\n   */\r\n\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n\r\n        return _approvals[src][guy];\r\n\r\n    }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Transfer token for a specified address\r\n\r\n   * @param dst The address to transfer to.\r\n\r\n   * @param wad The amount to be transferred.\r\n\r\n   */\r\n\r\n\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n\r\n        return transferFrom(msg.sender, dst, wad);\r\n\r\n    }\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Transfer tokens from one address to another\r\n\r\n   * @param src address The address which you want to send tokens from\r\n\r\n   * @param dst address The address which you want to transfer to\r\n\r\n   * @param wad uint256 the amount of tokens to be transferred\r\n\r\n   */\r\n\r\n\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n\r\n        public\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        if (src != msg.sender) {\r\n\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n\r\n        }\r\n\r\n\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n   * @param guy The address which will spend the funds.\r\n\r\n   * @param wad The amount of tokens to be spent.\r\n\r\n   */\r\n\r\n\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n\r\n\r\n        emit Approval(msg.sender, guy, wad);\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n   * the first transaction is mined)\r\n\r\n   * From MonolithDAO Token.sol\r\n\r\n   * @param src The address which will spend the funds.\r\n\r\n   * @param wad The amount of tokens to increase the allowance by.\r\n\r\n   */\r\n\r\n  function increaseAllowance(\r\n\r\n    address src,\r\n\r\n    uint256 wad\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(src != address(0));\r\n\r\n\r\n\r\n    _approvals[src][msg.sender] = add(_approvals[src][msg.sender], wad);\r\n\r\n    emit Approval(msg.sender, src, _approvals[msg.sender][src]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Decrese the amount of tokens that an owner allowed to a spender.\r\n\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n   * the first transaction is mined)\r\n\r\n   * From MonolithDAO Token.sol\r\n\r\n   * @param src The address which will spend the funds.\r\n\r\n   * @param wad The amount of tokens to increase the allowance by.\r\n\r\n   */\r\n\r\n  function decreaseAllowance(\r\n\r\n    address src,\r\n\r\n    uint256 wad\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(src != address(0));\r\n\r\n    _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n\r\n    emit Approval(msg.sender, src, _approvals[msg.sender][src]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract DSNote {\r\n\r\n    event LogNote(\r\n\r\n        bytes4   indexed  sig,\r\n\r\n        address  indexed  guy,\r\n\r\n        bytes32  indexed  foo,\r\n\r\n        bytes32  indexed  bar,\r\n\r\n        uint              wad,\r\n\r\n        bytes             fax\r\n\r\n    ) anonymous;\r\n\r\n\r\n\r\n    modifier note {\r\n\r\n        bytes32 foo;\r\n\r\n        bytes32 bar;\r\n\r\n\r\n\r\n        assembly {\r\n\r\n            foo := calldataload(4)\r\n\r\n            bar := calldataload(36)\r\n\r\n        }\r\n\r\n\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n\r\n\r\n        _;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n\r\n\r\n    bool public stopped;\r\n\r\n\r\n\r\n    modifier stoppable {\r\n\r\n        require(!stopped);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    function stop() public auth note {\r\n\r\n        stopped = true;\r\n\r\n    }\r\n\r\n    function start() public auth note {\r\n\r\n        stopped = false;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ZDTToken is DSTokenBase , DSStop {\r\n\r\n\r\n\r\n    string  public  symbol=\"ZDT\";\r\n\r\n    string  public  name=\"Zenoshi Dividend Token\";\r\n\r\n    uint256  public  decimals = 8; // Token Precision every token is 1.00000000\r\n\r\n    uint256 public initialSupply=90000000000000000;// 900000000+8 zeros for decimals\r\n\r\n    address public burnAdmin;\r\n\r\n    constructor() public\r\n\r\n    DSTokenBase(initialSupply)\r\n\r\n    {\r\n\r\n        burnAdmin=msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    event Burn(address indexed guy, uint wad);\r\n\r\n\r\n\r\n /**\r\n\r\n   * @dev Throws if called by any account other than the owner.\r\n\r\n   */\r\n\r\n  modifier onlyAdmin() {\r\n\r\n    require(isAdmin());\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n\r\n   */\r\n\r\n  function isAdmin() public view returns(bool) {\r\n\r\n    return msg.sender == burnAdmin;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n\r\n   * modifier anymore.\r\n\r\n   */\r\n\r\n  function renounceOwnership() public onlyAdmin {\r\n\r\n    burnAdmin = address(0);\r\n\r\n  }\r\n\r\n\r\n\r\n    function approve(address guy) public stoppable returns (bool) {\r\n\r\n        return super.approve(guy, uint(-1));\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n\r\n        return super.approve(guy, wad);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n\r\n        public\r\n\r\n        stoppable\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\r\n\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n\r\n        }\r\n\r\n\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n\r\n   * @dev Burns a specific amount of tokens from the target address\r\n\r\n   * @param guy address The address which you want to send tokens from\r\n\r\n   * @param wad uint256 The amount of token to be burned\r\n\r\n   */\r\n\r\n    function burnfromAdmin(address guy, uint wad) public onlyAdmin {\r\n\r\n        require(guy != address(0));\r\n\r\n\r\n\r\n\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n\r\n        _supply = sub(_supply, wad);\r\n\r\n\r\n\r\n        emit Burn(guy, wad);\r\n\r\n        emit Transfer(guy, address(0), wad);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burnfromAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ZDTToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://701f272bd3b46d47a8d90168b75fa5e2170afa2c1d22d49a97623dbaae4e9244"}]}