{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n/**\r\n * Cycle TOKEN Contract\r\n * ERC-20 Token Standard Compliant\r\n */\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 Token minimal interface\r\n */\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    //Since some tokens doesn't return a bool on transfer, this general interface\r\n    //doesn't include a return on the transfer fucntion to be widely compatible\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n}\r\n\r\n/**\r\n * Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n}\r\n\r\n/**\r\n * @title Token definition\r\n * @dev Define token paramters including ERC20 ones\r\n */\r\ncontract ERC20Token is ERC20TokenInterface { //Standard definition of a ERC20Token\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances; //A mapping of all balances per address\r\n    mapping(address => mapping(address => uint256)) allowed; //A mapping of all allowances\r\n\r\n    /**\r\n     * @dev Get the balance of an specified address.\r\n     * @param _owner The address to be query.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256 value) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token to a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token from an address to another specified address using allowance\r\n     * @param _from The address where token comes.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Assign allowance to an specified address to use the owner balance\r\n     * @param _spender The address to be allowed to spend.\r\n     * @param _value The amount to be allowed.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the allowance of an specified address to use another address balance.\r\n     * @param _owner The address of the owner of the tokens.\r\n     * @param _spender The address of the allowed spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Log Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Asset\r\n * @dev Initial supply creation\r\n */\r\ncontract Asset is ERC20Token {\r\n\r\n    string public name = 'Cycle';\r\n    uint8 public decimals = 8;\r\n    string public symbol = 'CYCLE';\r\n    string public version = '1';\r\n    address public owner; //owner address is public\r\n\r\n    constructor(uint initialSupply, address initialOwner) public {\r\n        owner = initialOwner;\r\n        totalSupply = initialSupply * (10 ** uint256(decimals)); //initial token creation\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(0), owner, balances[owner]);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to recover ANY token stuck on contract accidentally\r\n     * In case of recover of stuck tokens please contact contract owners\r\n     */\r\n    function recoverTokens(token _address, address _to) public {\r\n        require(msg.sender == owner);\r\n        require(_to != address(0));\r\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\r\n        _address.transfer(_to, remainder); //Transfer tokens to creator\r\n    }\r\n\r\n    function changeOwner(address newOwner) external {\r\n        require(msg.sender == owner);\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     *@dev Function to handle callback calls\r\n     */\r\n    function () external {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Asset","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000014c106363e77b9d2351679c621348dc13d1e631","Library":"","SwarmSource":"bzzr://70825363df25a990b5e5a4294e579b37224bd8fc7a77d3d4f5f79e7ef96aadd8"}]}