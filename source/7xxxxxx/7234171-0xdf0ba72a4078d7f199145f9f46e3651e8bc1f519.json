{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\nlibrary MatematicaSegura {\r\n    \r\n    function multiplicar (uint256 p, uint256 s) internal pure returns(uint256){\r\n        if(p == 0  || s == 0) return 0;\r\n        uint256 c = p*s;\r\n        require (c/p == s);\r\n        return c;\r\n    }\r\n    \r\n    function dividir (uint256 v, uint256 d) internal pure returns(uint256){\r\n        require(d>0);\r\n        uint256 r = v / d;\r\n        require(v == r*d + v % d);\r\n        return r;\r\n    }\r\n    \r\n    function sumar(uint256 s1, uint256 s2) internal pure returns(uint256){\r\n        uint256 r = s1 + s2;\r\n        require ( r >= s1);\r\n        return r;\r\n    }\r\n    \r\n    function restar (uint256 m, uint256 s) internal pure returns(uint256) {\r\n        require (m > s);\r\n        return m-s;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    //funciones basicas\r\n    function totalSupply() external returns(uint256);\r\n    function balanceOf(address sujeto) external returns(uint256);\r\n        \r\n    //funciones para transferencia\r\n    function transfer (address destinatario, uint256 value) external returns (bool);\r\n    function transferFrom(address enviador, address destinatario, uint256 value) external returns (bool);\r\n    \r\n    //funciones para exchange\r\n    function approve(address autorizado, uint256 cantidad) external returns (bool);\r\n    function allowance (address propietario, address autorizado) external view returns (uint256);\r\n    \r\n    //eventos\r\n    event Transfer (address remitente, address destinatario, uint256 cantidad);\r\n    event Approval (address indexed propietario, address indexed autorizado, uint256 cantidad);\r\n}\r\n\r\ncontract Payer is IERC20{\r\n    \r\n    using MatematicaSegura for uint256;\r\n    \r\n    // variables ERC20 tradicionales\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public autorizado;\r\n    address public propietario;    \r\n\r\n    //caracteristicas de la moneda\r\n    uint256 public decimals = 8;\r\n    string public name = \"Payer\";\r\n    string public symbol = \"Payer\";\r\n    uint256 public totalSupply;\r\n\r\n    // variables para contrato limitado\r\n    mapping (address => bool) public administradores;\r\n    mapping (address => bool) public notransferible;\r\n    mapping (address => uint256) public gastable;\r\n    uint256 public plimitacion;\r\n    bool public state;\r\n\r\n    constructor(uint256 _totalSupply) public {\r\n        state = false;\r\n        plimitacion = 100;\r\n        totalSupply = _totalSupply;\r\n        propietario = msg.sender;\r\n        balances[propietario] = totalSupply;\r\n        administradores[propietario] = true;\r\n    }\r\n    \r\n    modifier OnlyOwner(){\r\n        require(msg.sender == propietario, \"No es el propietario\");\r\n        _;\r\n    }\r\n   \r\n    //funciones propias\r\n    function isAdmin(address _direccion) public view OnlyOwner returns(bool){\r\n        return administradores[_direccion];\r\n    }\r\n    function setNewAdmin(address _postulante) public OnlyOwner returns(bool){\r\n        require(_postulante != address(0), \"Dirección No Válida\");\r\n        administradores[_postulante] = true;\r\n    }\r\n    \r\n    function setNoTransferible(address _admin, address _sujeto, bool _state) public returns (bool) {\r\n        require(administradores[_admin], \"Dirección no autorizada\");\r\n        notransferible[_sujeto] = _state;\r\n        return true;\r\n    }\r\n    \r\n    function setState (bool _state) public OnlyOwner{\r\n        state = _state;\r\n    }\r\n\r\n    // ========== FUNCIONES ESTANDAR ERC20    \r\n    function balanceOf(address _sujeto) public returns (uint256){\r\n        require(_sujeto != address(0),\"Dirección No Válida\");\r\n        return balances[_sujeto];\r\n    }\r\n\r\n    //funciones de transferencia\r\n    function transfer(address _destinatario, uint256 _cantidad) public returns(bool){\r\n\r\n        _transfer(msg.sender, _destinatario, _cantidad);\r\n        return true;\r\n    }\r\n    function transferFrom(address _remitente, address _destinatario, uint256 _cantidad) public returns(bool){\r\n        _transfer(_remitente, _destinatario, _cantidad);\r\n        return true;\r\n    }\r\n\r\n    function _transfer (address _remitente, address _destinatario, uint256 _cantidad) internal{\r\n        if(state){\r\n            if(administradores[_remitente]){\r\n                setNoTransferible(_remitente, _destinatario, state);\r\n            }\r\n        }\r\n        require(verificaTransferibilidad(_remitente, _cantidad), \"Saldo transferible insuficiente\");\r\n        balances[_remitente] = balances[_remitente].restar(_cantidad);\r\n        balances[_destinatario] = balances[_destinatario].sumar(_cantidad);\r\n        emit Transfer(_remitente, _destinatario, _cantidad);\r\n    }\r\n\r\n    function verificaTransferibilidad(address _sujeto, uint256 _montoSolicitado) internal returns(bool) {\r\n        if(notransferible[_sujeto]) {\r\n            require(gastable[_sujeto].sumar(_montoSolicitado) <= balances[_sujeto].multiplicar(plimitacion).dividir(100), \"Saldo gastable insuficiente\");\r\n            gastable[_sujeto] = gastable[_sujeto].sumar(_montoSolicitado);\r\n            return true;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function setGastable (uint256 _plimitacion) public OnlyOwner returns(bool){\r\n        require(_plimitacion != 0, \"Tasa no válida\");\r\n        plimitacion = _plimitacion;\r\n        return true;\r\n    }\r\n\r\n   //funciones para exchange\r\n    function allowance (address _propietario, address _autorizado) public view returns(uint256){\r\n        return autorizado[_propietario][_autorizado];\r\n    }\r\n\r\n    /** funcion que autoriza la nueva cantidad a transferir */\r\n    function approve( address _autorizado, uint256 _cantidad) public returns(bool) {\r\n        _approve(msg.sender, _autorizado, _cantidad);\r\n        return true;\r\n    }\r\n    \r\n    function _approve (address _propietario, address _autorizado, uint256 _cantidad) internal {\r\n        require (_propietario != address(0), \"Dirección No Válida\");\r\n        require (_autorizado != address(0), \"Dirección No Válida\");\r\n\r\n        autorizado[_propietario][_autorizado] = _cantidad;\r\n        emit Approval(_propietario, _autorizado, _cantidad);\r\n    }\r\n\r\n    function increaseAllowance (uint256 _adicional, address _autorizado) private OnlyOwner returns (bool){\r\n        require(_autorizado != address(0), \"Dirección No Válida\");\r\n        autorizado[msg.sender][_autorizado] = autorizado[msg.sender][_autorizado].sumar(_adicional);\r\n        emit Approval(msg.sender, _autorizado, _adicional);\r\n        return true;\r\n    }\r\n    function decreaseAllowance (uint256 _reduccion, address _autorizado) private OnlyOwner returns (bool){\r\n        require(_autorizado != address(0), \"Dirección No Válida\");\r\n        autorizado[msg.sender][_autorizado] = autorizado[msg.sender][_autorizado].restar(_reduccion);\r\n        emit Approval(msg.sender, _autorizado, _reduccion);\r\n        return true;\r\n    }\r\n\r\n    //funciones adicionales ERC20\r\n    function burn(address _cuenta, uint256 _cantidad) internal{\r\n        require(_cuenta != address(0), \"Dirección No Válida\");\r\n        require(balances[_cuenta] >= _cantidad, \"Saldo insuficiente para quemar\");\r\n        balances[_cuenta] = balances[_cuenta].restar(_cantidad);\r\n        totalSupply = totalSupply.restar(_cantidad);\r\n        emit Transfer(_cuenta, address(0), _cantidad);\r\n    }\r\n    function burnFrom(address _cuenta, uint256 _cantidad) internal{\r\n        require (_cuenta != address(0), \"Dirección No Valida\");\r\n        require (autorizado[_cuenta][msg.sender] >= _cantidad, \"Saldo insuficiente para quemar\");\r\n        autorizado[_cuenta][msg.sender] = autorizado[_cuenta][msg.sender].restar(_cantidad);\r\n        burn(_cuenta, _cantidad);\r\n    }\r\n\r\n    event Transfer(address enviante, address destinatario, uint256 cantidad);\r\n    event Approval(address propietario, address autorizado, uint256 cantidad);\r\n}\r\n\r\nlibrary SafePayer {\r\n\r\n    using MatematicaSegura for uint256;\r\n\r\n    function safeTransfer(\r\n        Payer token,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        Payer token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeSetNoTransferible(Payer token, address _admin, address _sujeto, bool _state) internal{\r\n        require(token.setNoTransferible(_admin, _sujeto, _state), \"Imposible ejecutar\");\r\n    }\r\n\r\n    function safeApprove(\r\n        Payer token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        Payer token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sumar(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        Payer token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).restar(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autorizado\",\"type\":\"address\"},{\"name\":\"_cantidad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remitente\",\"type\":\"address\"},{\"name\":\"_destinatario\",\"type\":\"address\"},{\"name\":\"_cantidad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_direccion\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_sujeto\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setNoTransferible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"propietario\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sujeto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plimitacion\",\"type\":\"uint256\"}],\"name\":\"setGastable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_postulante\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gastable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"autorizado\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destinatario\",\"type\":\"address\"},{\"name\":\"_cantidad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administradores\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plimitacion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propietario\",\"type\":\"address\"},{\"name\":\"_autorizado\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"notransferible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enviante\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destinatario\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propietario\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"autorizado\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Payer","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000011c37937e080000","Library":"","SwarmSource":"bzzr://1fc331d595c17bd434418b11dcf5fb2fbd80cc8e3db9fdfe0f7a67f080d2826e"}]}