{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @notice Declares a contract that can have an owner.\r\n */\r\ncontract OwnedI {\r\n    event LogOwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function getOwner()\r\n        view public\r\n        returns (address);\r\n\r\n    function setOwner(address newOwner)\r\n        public\r\n        returns (bool success); \r\n}\r\n\r\n/**\r\n * @notice Defines a contract that can have an owner.\r\n */\r\ncontract Owned is OwnedI {\r\n    /**\r\n     * @dev Made private to protect against child contract setting it to 0 by mistake.\r\n     */\r\n    address private owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier fromOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getOwner()\r\n        view public\r\n        returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function setOwner(address newOwner)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(newOwner != 0);\r\n        if (owner != newOwner) {\r\n            emit LogOwnerChanged(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n        success = true;\r\n    }\r\n}\r\n\r\ncontract WithBeneficiary is Owned {\r\n    /**\r\n     * @notice Address that is forwarded all value.\r\n     * @dev Made private to protect against child contract setting it to 0 by mistake.\r\n     */\r\n    address private beneficiary;\r\n    \r\n    event LogBeneficiarySet(address indexed previousBeneficiary, address indexed newBeneficiary);\r\n\r\n    constructor(address _beneficiary) payable public {\r\n        require(_beneficiary != 0);\r\n        beneficiary = _beneficiary;\r\n        if (msg.value > 0) {\r\n            asyncSend(beneficiary, msg.value);\r\n        }\r\n    }\r\n\r\n    function asyncSend(address dest, uint amount) internal;\r\n\r\n    function getBeneficiary()\r\n        view public\r\n        returns (address) {\r\n        return beneficiary;\r\n    }\r\n\r\n    function setBeneficiary(address newBeneficiary)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(newBeneficiary != 0);\r\n        if (beneficiary != newBeneficiary) {\r\n            emit LogBeneficiarySet(beneficiary, newBeneficiary);\r\n            beneficiary = newBeneficiary;\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function () payable public {\r\n        asyncSend(beneficiary, msg.value);\r\n    }\r\n}\r\n\r\ncontract WithFee is WithBeneficiary {\r\n    // @notice Contracts asking for a confirmation of a certification need to pass this fee.\r\n    uint256 private queryFee;\r\n\r\n    event LogQueryFeeSet(uint256 previousQueryFee, uint256 newQueryFee);\r\n\r\n    constructor(\r\n            address beneficiary,\r\n            uint256 _queryFee) public\r\n        WithBeneficiary(beneficiary) {\r\n        queryFee = _queryFee;\r\n    }\r\n\r\n    modifier requestFeePaid {\r\n        require(queryFee <= msg.value);\r\n        asyncSend(getBeneficiary(), msg.value);\r\n        _;\r\n    }\r\n\r\n    function getQueryFee()\r\n        view public\r\n        returns (uint256) {\r\n        return queryFee;\r\n    }\r\n\r\n    function setQueryFee(uint256 newQueryFee)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        if (queryFee != newQueryFee) {\r\n            emit LogQueryFeeSet(queryFee, newQueryFee);\r\n            queryFee = newQueryFee;\r\n        }\r\n        success = true;\r\n    }\r\n}\r\n\r\n/*\r\n * @notice Base contract supporting async send for pull payments.\r\n * Inherit from this contract and use asyncSend instead of send.\r\n * https://github.com/OpenZeppelin/zep-solidity/blob/master/contracts/PullPaymentCapable.sol\r\n */\r\ncontract PullPaymentCapable {\r\n    uint256 private totalBalance;\r\n    mapping(address => uint256) private payments;\r\n\r\n    event LogPaymentReceived(address indexed dest, uint256 amount);\r\n\r\n    constructor() public {\r\n        if (0 < address(this).balance) {\r\n            asyncSend(msg.sender, address(this).balance);\r\n        }\r\n    }\r\n\r\n    // store sent amount as credit to be pulled, called by payer\r\n    function asyncSend(address dest, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            totalBalance += amount;\r\n            payments[dest] += amount;\r\n            emit LogPaymentReceived(dest, amount);\r\n        }\r\n    }\r\n\r\n    function getTotalBalance()\r\n        view public\r\n        returns (uint256) {\r\n        return totalBalance;\r\n    }\r\n\r\n    function getPaymentOf(address beneficiary) \r\n        view public\r\n        returns (uint256) {\r\n        return payments[beneficiary];\r\n    }\r\n\r\n    // withdraw accumulated balance, called by payee\r\n    function withdrawPayments()\r\n        external \r\n        returns (bool success) {\r\n        uint256 payment = payments[msg.sender];\r\n        payments[msg.sender] = 0;\r\n        totalBalance -= payment;\r\n        require(msg.sender.call.value(payment)());\r\n        success = true;\r\n    }\r\n\r\n    function fixBalance()\r\n        public\r\n        returns (bool success);\r\n\r\n    function fixBalanceInternal(address dest)\r\n        internal\r\n        returns (bool success) {\r\n        if (totalBalance < address(this).balance) {\r\n            uint256 amount = address(this).balance - totalBalance;\r\n            payments[dest] += amount;\r\n            emit LogPaymentReceived(dest, amount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// @notice Interface for a certifier database\r\ncontract CertifierDbI {\r\n    event LogCertifierAdded(address indexed certifier);\r\n\r\n    event LogCertifierRemoved(address indexed certifier);\r\n\r\n    function addCertifier(address certifier)\r\n        public\r\n        returns (bool success);\r\n\r\n    function removeCertifier(address certifier)\r\n        public\r\n        returns (bool success);\r\n\r\n    function getCertifiersCount()\r\n        view public\r\n        returns (uint count);\r\n\r\n    function getCertifierStatus(address certifierAddr)\r\n        view public \r\n        returns (bool authorised, uint256 index);\r\n\r\n    function getCertifierAtIndex(uint256 index)\r\n        view public\r\n        returns (address);\r\n\r\n    function isCertifier(address certifier)\r\n        view public\r\n        returns (bool isIndeed);\r\n}\r\n\r\ncontract CertificationDbI {\r\n    event LogCertifierDbChanged(\r\n        address indexed previousCertifierDb,\r\n        address indexed newCertifierDb);\r\n\r\n    event LogStudentCertified(\r\n        address indexed student, uint timestamp,\r\n        address indexed certifier, bytes32 indexed document);\r\n\r\n    event LogStudentUncertified(\r\n        address indexed student, uint timestamp,\r\n        address indexed certifier);\r\n\r\n    event LogCertificationDocumentAdded(\r\n        address indexed student, bytes32 indexed document);\r\n\r\n    event LogCertificationDocumentRemoved(\r\n        address indexed student, bytes32 indexed document);\r\n\r\n    function getCertifierDb()\r\n        view public\r\n        returns (address);\r\n\r\n    function setCertifierDb(address newCertifierDb)\r\n        public\r\n        returns (bool success);\r\n\r\n    function certify(address student, bytes32 document)\r\n        public\r\n        returns (bool success);\r\n\r\n    function uncertify(address student)\r\n        public\r\n        returns (bool success);\r\n\r\n    function addCertificationDocument(address student, bytes32 document)\r\n        public\r\n        returns (bool success);\r\n\r\n    function addCertificationDocumentToSelf(bytes32 document)\r\n        public\r\n        returns (bool success);\r\n\r\n    function removeCertificationDocument(address student, bytes32 document)\r\n        public\r\n        returns (bool success);\r\n\r\n    function removeCertificationDocumentFromSelf(bytes32 document)\r\n        public\r\n        returns (bool success);\r\n\r\n    function getCertifiedStudentsCount()\r\n        view public\r\n        returns (uint count);\r\n\r\n    function getCertifiedStudentAtIndex(uint index)\r\n        payable public\r\n        returns (address student);\r\n\r\n    function getCertification(address student)\r\n        payable public\r\n        returns (bool certified, uint timestamp, address certifier, uint documentCount);\r\n\r\n    function isCertified(address student)\r\n        payable public\r\n        returns (bool isIndeed);\r\n\r\n    function getCertificationDocumentAtIndex(address student, uint256 index)\r\n        payable public\r\n        returns (bytes32 document);\r\n\r\n    function isCertification(address student, bytes32 document)\r\n        payable public\r\n        returns (bool isIndeed);\r\n}\r\n\r\ncontract CertificationDb is CertificationDbI, WithFee, PullPaymentCapable {\r\n    // @notice Where we check for certifiers.\r\n    CertifierDbI private certifierDb;\r\n\r\n    struct DocumentStatus {\r\n        bool isValid;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Certification {\r\n        bool certified;\r\n        uint256 timestamp;\r\n        address certifier;\r\n        mapping(bytes32 => DocumentStatus) documentStatuses;\r\n        bytes32[] documents;\r\n        uint256 index;\r\n    }\r\n\r\n    // @notice Address of certified students.\r\n    mapping(address => Certification) studentCertifications;\r\n    // @notice The potentially long list of all certified students.\r\n    address[] certifiedStudents;\r\n\r\n    constructor(\r\n            address beneficiary,\r\n            uint256 certificationQueryFee,\r\n            address _certifierDb)\r\n            public\r\n            WithFee(beneficiary, certificationQueryFee) {\r\n        require(_certifierDb != 0);\r\n        certifierDb = CertifierDbI(_certifierDb);\r\n    }\r\n\r\n    modifier fromCertifier {\r\n        require(certifierDb.isCertifier(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function getCertifierDb()\r\n        view public\r\n        returns (address) {\r\n        return certifierDb;\r\n    }\r\n\r\n    function setCertifierDb(address newCertifierDb)\r\n        fromOwner public\r\n        returns (bool success) {\r\n        require(newCertifierDb != 0);\r\n        if (certifierDb != newCertifierDb) {\r\n            emit LogCertifierDbChanged(certifierDb, newCertifierDb);\r\n            certifierDb = CertifierDbI(newCertifierDb);\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function certify(address student, bytes32 document) \r\n        fromCertifier public\r\n        returns (bool success) {\r\n        require(student != 0);\r\n        require(!studentCertifications[student].certified);\r\n        bool documentExists = document != 0;\r\n        studentCertifications[student] = Certification({\r\n            certified: true,\r\n            timestamp: now,\r\n            certifier: msg.sender,\r\n            documents: new bytes32[](0),\r\n            index: certifiedStudents.length\r\n        });\r\n        if (documentExists) {\r\n            studentCertifications[student].documentStatuses[document] = DocumentStatus({\r\n                isValid: true,\r\n                index: studentCertifications[student].documents.length\r\n            });\r\n            studentCertifications[student].documents.push(document);\r\n        }\r\n        certifiedStudents.push(student);\r\n        emit LogStudentCertified(student, now, msg.sender, document);\r\n        success = true;\r\n    }\r\n\r\n    function uncertify(address student) \r\n        fromCertifier public\r\n        returns (bool success) {\r\n        require(studentCertifications[student].certified);\r\n        // You need to uncertify all documents first\r\n        require(studentCertifications[student].documents.length == 0);\r\n        uint256 index = studentCertifications[student].index;\r\n        delete studentCertifications[student];\r\n        if (certifiedStudents.length > 1) {\r\n            certifiedStudents[index] = certifiedStudents[certifiedStudents.length - 1];\r\n            studentCertifications[certifiedStudents[index]].index = index;\r\n        }\r\n        certifiedStudents.length--;\r\n        emit LogStudentUncertified(student, now, msg.sender);\r\n        success = true;\r\n    }\r\n\r\n    function addCertificationDocument(address student, bytes32 document)\r\n        fromCertifier public\r\n        returns (bool success) {\r\n        success = addCertificationDocumentInternal(student, document);\r\n    }\r\n\r\n    function addCertificationDocumentToSelf(bytes32 document)\r\n        public\r\n        returns (bool success) {\r\n        success = addCertificationDocumentInternal(msg.sender, document);\r\n    }\r\n\r\n    function addCertificationDocumentInternal(address student, bytes32 document)\r\n        internal\r\n        returns (bool success) {\r\n        require(studentCertifications[student].certified);\r\n        require(document != 0);\r\n        Certification storage certification = studentCertifications[student];\r\n        if (!certification.documentStatuses[document].isValid) {\r\n            certification.documentStatuses[document] = DocumentStatus({\r\n                isValid:  true,\r\n                index: certification.documents.length\r\n            });\r\n            certification.documents.push(document);\r\n            emit LogCertificationDocumentAdded(student, document);\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function removeCertificationDocument(address student, bytes32 document)\r\n        fromCertifier public\r\n        returns (bool success) {\r\n        success = removeCertificationDocumentInternal(student, document);\r\n    }\r\n\r\n    function removeCertificationDocumentFromSelf(bytes32 document)\r\n        public\r\n        returns (bool success) {\r\n        success = removeCertificationDocumentInternal(msg.sender, document);\r\n    }\r\n\r\n    function removeCertificationDocumentInternal(address student, bytes32 document)\r\n        internal\r\n        returns (bool success) {\r\n        require(studentCertifications[student].certified);\r\n        Certification storage certification = studentCertifications[student];\r\n        if (certification.documentStatuses[document].isValid) {\r\n            uint256 index = certification.documentStatuses[document].index;\r\n            delete certification.documentStatuses[document];\r\n            if (certification.documents.length > 1) {\r\n                certification.documents[index] =\r\n                    certification.documents[certification.documents.length - 1];\r\n                certification.documentStatuses[certification.documents[index]].index = index;\r\n            }\r\n            certification.documents.length--;\r\n            emit LogCertificationDocumentRemoved(student, document);\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function getCertifiedStudentsCount()\r\n        view public\r\n        returns (uint256 count) {\r\n        count = certifiedStudents.length;\r\n    }\r\n\r\n    function getCertifiedStudentAtIndex(uint256 index)\r\n        payable public\r\n        requestFeePaid\r\n        returns (address student) {\r\n        student = certifiedStudents[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Requesting a certification is a paying feature.\r\n     */\r\n    function getCertification(address student)\r\n        payable public\r\n        requestFeePaid\r\n        returns (bool certified, uint256 timestamp, address certifier, uint256 documentCount) {\r\n        Certification storage certification = studentCertifications[student];\r\n        return (certification.certified,\r\n            certification.timestamp,\r\n            certification.certifier,\r\n            certification.documents.length);\r\n    }\r\n\r\n    /**\r\n     * @notice Requesting a certification confirmation is a paying feature.\r\n     */\r\n    function isCertified(address student)\r\n        payable public\r\n        requestFeePaid\r\n        returns (bool isIndeed) {\r\n        isIndeed = studentCertifications[student].certified;\r\n    }\r\n\r\n    /**\r\n     * @notice Requesting a certification document by index is a paying feature.\r\n     */\r\n    function getCertificationDocumentAtIndex(address student, uint256 index)\r\n        payable public\r\n        requestFeePaid\r\n        returns (bytes32 document) {\r\n        document = studentCertifications[student].documents[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Requesting a confirmation that a document is a certification is a paying feature.\r\n     */\r\n    function isCertification(address student, bytes32 document)\r\n        payable public\r\n        requestFeePaid\r\n        returns (bool isIndeed) {\r\n        isIndeed = studentCertifications[student].documentStatuses[document].isValid;\r\n    }\r\n\r\n    function fixBalance()\r\n        public\r\n        returns (bool success) {\r\n        return fixBalanceInternal(getBeneficiary());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCertifiedStudentsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"},{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"certify\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCertifierDb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"isCertified\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fixBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCertifierDb\",\"type\":\"address\"}],\"name\":\"setCertifierDb\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"removeCertificationDocumentFromSelf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"uncertify\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newQueryFee\",\"type\":\"uint256\"}],\"name\":\"setQueryFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"getCertification\",\"outputs\":[{\"name\":\"certified\",\"type\":\"bool\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"documentCount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCertifiedStudentAtIndex\",\"outputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"},{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isCertification\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCertificationDocumentAtIndex\",\"outputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getPaymentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"addCertificationDocumentToSelf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"},{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"addCertificationDocument\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"},{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"removeCertificationDocument\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"certificationQueryFee\",\"type\":\"uint256\"},{\"name\":\"_certifierDb\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousQueryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newQueryFee\",\"type\":\"uint256\"}],\"name\":\"LogQueryFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"LogBeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCertifierDb\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCertifierDb\",\"type\":\"address\"}],\"name\":\"LogCertifierDbChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"LogStudentCertified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"LogStudentUncertified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"student\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"LogCertificationDocumentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"student\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"LogCertificationDocumentRemoved\",\"type\":\"event\"}]","ContractName":"CertificationDb","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000de74da73d5102a796559933296c73e7d1c6f37fb0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000056962f1a0c5b1aa3c5d80c8ad8f0a6994a2eea93","Library":"","SwarmSource":"bzzr://64612e6c16bf0d3916ac2863386d5fa817e0edb046ff9d06a20bfaa415c6cd64"}]}