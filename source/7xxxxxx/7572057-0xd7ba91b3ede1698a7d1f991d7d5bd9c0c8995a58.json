{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'GENES' CrowdsaleFiatBTC contract\r\n//\r\n// Symbol           : GENES\r\n// Name             : Genesis Smart Coin\r\n// Total supply     : 70,000,000,000.000000000000000000\r\n// Contract supply  : 20,000,000,000.000000000000000000\r\n// Decimals         : 18\r\n//\r\n// (c) ViktorZidenyk / Ltd Genesis World 2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Address\r\n// ----------------------------------------------------------------------------\r\nlibrary Address {\r\n  function toAddress(bytes memory source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n\r\n  function isNotContract(address addr) internal view returns(bool) {\r\n    uint length;\r\n    assembly { length := extcodesize(addr) }\r\n    return length == 0;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Zero\r\n// ----------------------------------------------------------------------------\r\nlibrary Zero {\r\n  function requireNotZero(address addr) internal pure {\r\n    require(addr != address(0), \"require not zero address\");\r\n  }\r\n\r\n  function requireNotZero(uint val) internal pure {\r\n    require(val != 0, \"require not zero value\");\r\n  }\r\n\r\n  function notZero(address addr) internal pure returns(bool) {\r\n    return !(addr == address(0));\r\n  }\r\n\r\n  function isZero(address addr) internal pure returns(bool) {\r\n    return addr == address(0);\r\n  }\r\n\r\n  function isZero(uint a) internal pure returns(bool) {\r\n    return a == 0;\r\n  }\r\n\r\n  function notZero(uint a) internal pure returns(bool) {\r\n    return a != 0;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\t\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint256 amount) external;\r\n}\r\n\r\ncontract preCrowdsaleFiatBTC is owned {\r\n    \r\n    // Library\r\n    using SafeMath for uint;\r\n    \r\n    address public saleAgent;\r\n    token public tokenReward;\r\n    uint256 public totalSalesTokens;\r\n    \r\n    mapping(address => uint256) public balanceTokens;\r\n    mapping(address => uint256) public buyTokens;\r\n    mapping(address => uint256) public buyTokensBonus;\r\n    mapping(address => uint256) public bountyTokens;\r\n    mapping(address => uint256) public refTokens;\r\n    \r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n    \r\n    using Address for *;\r\n    using Zero for *;\r\n\r\n    event GoalReached(address recipient, uint256 totalAmountRaised);\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(address _addressOfTokenUsedAsReward) public {\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n    }\r\n\r\n\t\r\n\tfunction setSaleAgent(address newSeleAgent) public onlyOwner {\r\n        saleAgent = newSeleAgent;\r\n    }\r\n\t\r\n\tfunction addTokens(address to, uint256 tokens) public {\r\n        require(msg.sender == owner || msg.sender == saleAgent);\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(tokens);\r\n        buyTokens[to] = buyTokens[to].add(tokens);\r\n        totalSalesTokens = totalSalesTokens.add(tokens);\r\n        tokenReward.transfer(to, tokens);\r\n    }\r\n    \r\n    function addTokensBonus(address to, uint256 buyToken, uint256 buyBonus) public {\r\n        require(msg.sender == owner || msg.sender == saleAgent);\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(buyToken).add(buyBonus);\r\n        buyTokens[to] = buyTokens[to].add(buyToken);\r\n        buyTokensBonus[to] = buyTokensBonus[to].add(buyBonus);\r\n        totalSalesTokens = totalSalesTokens.add(buyToken).add(buyBonus);\r\n        tokenReward.transfer(to, buyToken.add(buyBonus));\r\n    }\r\n    \r\n    function addBountyTokens(address to, uint256 bountyToken) public {\r\n        require(msg.sender == owner || msg.sender == saleAgent);\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(bountyToken);\r\n        bountyTokens[to] = bountyTokens[to].add(bountyToken);\r\n        totalSalesTokens = totalSalesTokens.add(bountyToken);\r\n        tokenReward.transfer(to, bountyToken);\r\n    }\r\n    \r\n    function addTokensBonusRef(address to, uint256 buyToken, uint256 buyBonus, address referrerAddr, uint256 refToken) public {\r\n        require(msg.sender == owner || msg.sender == saleAgent);\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(buyToken).add(buyBonus);\r\n        buyTokens[to] = buyTokens[to].add(buyToken);\r\n        buyTokensBonus[to] = buyTokensBonus[to].add(buyBonus);\r\n        totalSalesTokens = totalSalesTokens.add(buyToken).add(buyBonus);\r\n        tokenReward.transfer(to, buyToken.add(buyBonus));\r\n        \r\n        // Referral bonus\r\n        balanceTokens[referrerAddr] = balanceTokens[referrerAddr].add(refToken);\r\n        refTokens[referrerAddr] = refTokens[referrerAddr].add(refToken);\r\n        totalSalesTokens = totalSalesTokens.add(refToken);\r\n        tokenReward.transfer(referrerAddr, refToken);\r\n    }\r\n    \r\n    /// @notice Send all tokens to Owner after ICO\r\n    function sendAllTokensToOwner(uint256 _revardTokens) onlyOwner public {\r\n        tokenReward.transfer(owner, _revardTokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSeleAgent\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokensBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"uint256\"},{\"name\":\"buyBonus\",\"type\":\"uint256\"}],\"name\":\"addTokensBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"uint256\"},{\"name\":\"buyBonus\",\"type\":\"uint256\"},{\"name\":\"referrerAddr\",\"type\":\"address\"},{\"name\":\"refToken\",\"type\":\"uint256\"}],\"name\":\"addTokensBonusRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSalesTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"bountyToken\",\"type\":\"uint256\"}],\"name\":\"addBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_revardTokens\",\"type\":\"uint256\"}],\"name\":\"sendAllTokensToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"preCrowdsaleFiatBTC","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000069788aa341bfca46ea181e99be6346b2269ecf4e","Library":"","SwarmSource":"bzzr://24a71c74139e867004347eca4ceaee1ca954ebe467b97217a86a985b91fc47b1"}]}