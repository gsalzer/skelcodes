{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ninterface UniswapFactory {\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n}\r\n\r\ninterface UniswapPool {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 minLiquidity, uint256 maxTokens, uint256 deadline) external payable returns (uint256);\r\n    // Remove Liquidity\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256 minEth,\r\n        uint256 minTokens,\r\n        uint256 deadline\r\n        ) external returns (uint256, uint256);\r\n\r\n    // ERC20 comaptibility for liquidity tokens\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\n\r\ncontract Helper {\r\n\r\n    /**\r\n     * @dev get Uniswap Proxy address\r\n     */\r\n    function getAddressUniFactory() public pure returns (address factory) {\r\n        factory = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n        // factory = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36; // Rinkeby\r\n    }\r\n\r\n    // Get Uniswap's Exchange address from Factory Contract\r\n    function getAddressPool(address _token) public view returns (address) {\r\n        return UniswapFactory(getAddressUniFactory()).getExchange(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev get admin address\r\n     */\r\n    function getAddressAdmin() public pure returns (address admin) {\r\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\r\n    }\r\n\r\n    /**\r\n     * @dev gets ETH & token balance\r\n     * @param src is the token being sold\r\n     * @return ethBal - if not erc20, eth balance\r\n     * @return tknBal - if not eth, erc20 balance\r\n     */\r\n    function getBal(address src, address _owner) internal view returns (uint, uint) {\r\n        uint tknBal = IERC20(src).balanceOf(address(_owner));\r\n        return (address(_owner).balance, tknBal);\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance to kyber for the \"user proxy\" if required\r\n     * @param token is the token address\r\n     */\r\n    function setApproval(address token, uint srcAmt, address to) internal {\r\n        IERC20 erc20Contract = IERC20(token);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, 2**255);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract Pool is Helper {\r\n\r\n    event LogAddLiquidity(\r\n        address token,\r\n        uint tokenAmt,\r\n        uint ethAmt,\r\n        uint poolTokenMinted,\r\n        address beneficiary\r\n    );\r\n\r\n    event LogRemoveLiquidity(\r\n        address token,\r\n        uint tokenReturned,\r\n        uint ethReturned,\r\n        uint poolTokenBurned,\r\n        address beneficiary\r\n    );\r\n\r\n    event LogShutPool(\r\n        address token,\r\n        uint tokenReturned,\r\n        uint ethReturned,\r\n        uint poolTokenBurned,\r\n        address beneficiary\r\n    );\r\n\r\n    /**\r\n     * @dev Uniswap's pool basic details\r\n     * @param token token address to get pool. Eg:- DAI address, MKR address, etc\r\n     * @param poolAddress Uniswap pool's address\r\n     * @param totalSupply total supply of pool token\r\n     * @param ethReserve Total ETH balance of uniswap's pool\r\n     * @param tokenReserve Total Token balance of uniswap's pool\r\n     */\r\n    function poolDetails(\r\n        address token\r\n    ) public view returns (\r\n        address poolAddress,\r\n        uint totalSupply,\r\n        uint ethReserve,\r\n        uint tokenReserve\r\n    )\r\n    {\r\n        poolAddress = getAddressPool(token);\r\n        totalSupply = IERC20(poolAddress).totalSupply();\r\n        (ethReserve, tokenReserve) = getBal(token, poolAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev to add liquidity in pool. Payable function token qty to deposit is decided as per the ETH sent by the user\r\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\r\n     * @param maxDepositedTokens Max token to be deposited\r\n     */\r\n    function addLiquidity(address token, uint maxDepositedTokens) public payable returns (uint256 tokensMinted) {\r\n        address poolAddr = getAddressPool(token);\r\n        (uint ethReserve, uint tokenReserve) = getBal(token, poolAddr);\r\n        uint tokenToDeposit = msg.value * tokenReserve / ethReserve + 1;\r\n        require(tokenToDeposit < maxDepositedTokens, \"Token to deposit is greater than Max token to Deposit\");\r\n        IERC20(token).transferFrom(msg.sender, address(this), tokenToDeposit);\r\n        setApproval(token, tokenToDeposit, poolAddr);\r\n        tokensMinted = UniswapPool(poolAddr).addLiquidity.value(msg.value)(\r\n            uint(1),\r\n            tokenToDeposit,\r\n            uint(1899063809) // 6th March 2030 GMT // no logic\r\n        );\r\n        emit LogAddLiquidity(\r\n            token,\r\n            tokenToDeposit,\r\n            msg.value,\r\n            tokensMinted,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev to remove liquidity from pool. ETH and token quantity is decided as per the exchange token qty to burn\r\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\r\n     * @param amount Uniswap pool's ERC20 token QTY to burn\r\n     * @param minEth Min ETH user to be returned\r\n     * @param minTokens Min Tokens to be returned\r\n     */\r\n    function removeLiquidity(\r\n        address token,\r\n        uint amount,\r\n        uint minEth,\r\n        uint minTokens\r\n    ) public returns (uint ethReturned, uint tokenReturned)\r\n    {\r\n        address poolAddr = getAddressPool(token);\r\n\r\n        setApproval(poolAddr, amount, poolAddr);\r\n        (ethReturned, tokenReturned) = UniswapPool(poolAddr).removeLiquidity(\r\n            amount,\r\n            minEth,\r\n            minTokens,\r\n            uint(1899063809) // 6th March 2030 GMT // no logic\r\n        );\r\n        address(msg.sender).transfer(ethReturned);\r\n        IERC20(token).transfer(msg.sender, tokenReturned);\r\n        emit LogRemoveLiquidity(\r\n            token,\r\n            tokenReturned,\r\n            ethReturned,\r\n            amount,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev to remove all of the user's liquidity from pool. ETH and token quantity is decided as per the exchange token qty to burn\r\n     * @param token ERC20 address of Uniswap's pool (eg:- DAI address, MKR address, etc)\r\n     */\r\n    function shut(address token) public returns (uint ethReturned, uint tokenReturned) {\r\n        address poolAddr = getAddressPool(token);\r\n        uint userPoolBal = IERC20(poolAddr).balanceOf(address(this));\r\n\r\n        setApproval(poolAddr, userPoolBal, poolAddr);\r\n        (ethReturned, tokenReturned) = UniswapPool(poolAddr).removeLiquidity(\r\n            userPoolBal,\r\n            uint(1),\r\n            uint(1),\r\n            uint(1899063809) // 6th March 2030 GMT // no logic\r\n        );\r\n        address(msg.sender).transfer(ethReturned);\r\n        IERC20(token).transfer(msg.sender, tokenReturned);\r\n        emit LogShutPool(\r\n            token,\r\n            tokenReturned,\r\n            ethReturned,\r\n            userPoolBal,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaUniswapPool is Pool {\r\n\r\n    uint public version;\r\n    \r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        version = _version;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shut\",\"outputs\":[{\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"name\":\"tokenReturned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressUniFactory\",\"outputs\":[{\"name\":\"factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"maxDepositedTokens\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"poolDetails\",\"outputs\":[{\"name\":\"poolAddress\",\"type\":\"address\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"ethReserve\",\"type\":\"uint256\"},{\"name\":\"tokenReserve\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAddressPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"minEth\",\"type\":\"uint256\"},{\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"name\":\"tokenReturned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressAdmin\",\"outputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolTokenMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"LogAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"LogRemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"LogShutPool\",\"type\":\"event\"}]","ContractName":"InstaUniswapPool","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://af2fae06ed905c68b711ee8454a154b727a812a32c94a60e4d4c9abf4611dbba"}]}