{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2019 blockimmo AG license@blockimmo.ch\r\n * No license\r\n */\r\n\r\npragma solidity 0.5.4;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // How many token units a buyer gets per wei.\r\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n    // 1 wei will give you 1 unit, or 0.001 TOK.\r\n    uint256 private _rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @param rate Number of token units a buyer gets per wei\r\n     * @dev The rate is the conversion between wei and the smallest and indivisible\r\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n     * @param wallet Address where collected funds will be forwarded to\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\r\n        require(rate > 0);\r\n        require(wallet != address(0));\r\n        require(address(token) != address(0));\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer funds with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        uint256 weiAmount = _weiAmount();\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n     *     super._preValidatePurchase(beneficiary, weiAmount);\r\n     *     require(weiRaised().add(weiAmount) <= cap);\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n     * conditions are not met.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n     * tokens.\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines the value (in Wei) included with a purchase.\r\n     */\r\n    function _weiAmount() internal view returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n     * @param cap Max amount of wei to be contributed\r\n     */\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0);\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @return the cap of the crowdsale.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the cap has been reached.\r\n     * @return Whether the cap was reached\r\n     */\r\n    function capReached() public view returns (bool) {\r\n        return weiRaised() >= _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of wei contributed\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n        require(weiRaised().add(weiAmount) <= _cap);\r\n    }\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _openingTime;\r\n    uint256 private _closingTime;\r\n\r\n    /**\r\n     * Event for crowdsale extending\r\n     * @param newClosingTime new closing time\r\n     * @param prevClosingTime old closing time\r\n     */\r\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        require(isOpen());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor, takes crowdsale opening and closing times.\r\n     * @param openingTime Crowdsale opening time\r\n     * @param closingTime Crowdsale closing time\r\n     */\r\n    constructor (uint256 openingTime, uint256 closingTime) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(openingTime >= block.timestamp);\r\n        require(closingTime > openingTime);\r\n\r\n        _openingTime = openingTime;\r\n        _closingTime = closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale opening time.\r\n     */\r\n    function openingTime() public view returns (uint256) {\r\n        return _openingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale closing time.\r\n     */\r\n    function closingTime() public view returns (uint256) {\r\n        return _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return true if the crowdsale is open, false otherwise.\r\n     */\r\n    function isOpen() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return block.timestamp > _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Extend parent behavior requiring to be within contributing period\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of wei contributed\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Extend crowdsale\r\n     * @param newClosingTime Crowdsale closing time\r\n     */\r\n    function _extendTime(uint256 newClosingTime) internal {\r\n        require(!hasClosed());\r\n        require(newClosingTime > _closingTime);\r\n\r\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\r\n        _closingTime = newClosingTime;\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    bool private _finalized;\r\n\r\n    event CrowdsaleFinalized();\r\n\r\n    constructor () internal {\r\n        _finalized = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the crowdsale is finalized, false otherwise.\r\n     */\r\n    function finalized() public view returns (bool) {\r\n        return _finalized;\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() public {\r\n        require(!_finalized);\r\n        require(hasClosed());\r\n\r\n        _finalized = true;\r\n\r\n        _finalization();\r\n        emit CrowdsaleFinalized();\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super._finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function _finalization() internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /**\r\n     * @dev Withdraw tokens only after crowdsale ends.\r\n     * @param beneficiary Whose tokens will be withdrawn.\r\n     */\r\n    function withdrawTokens(address beneficiary) public {\r\n        require(hasClosed());\r\n        uint256 amount = _balances[beneficiary];\r\n        require(amount > 0);\r\n        _balances[beneficiary] = 0;\r\n        _deliverTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @return the balance of an account.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Amount of tokens purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n    }\r\n\r\n}\r\n\r\ncontract MoneyMarketInterface {\r\n  function getSupplyBalance(address account, address asset) public view returns (uint);\r\n  function supply(address asset, uint amount) public returns (uint);\r\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\r\n}\r\n\r\ncontract LoanEscrow is Pausable {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  // configurable to any ERC20 (i.e. xCHF)\r\n  IERC20 public dai = IERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5  // 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08\r\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(0x3FDA67f7583380E67ef93072294a7fAc882FD7E7);  // 0x6732c278C58FC90542cce498981844A073D693d7\r\n\r\n  event Deposited(address indexed from, uint256 daiAmount);\r\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\r\n  event Pulled(address indexed to, uint256 daiAmount);\r\n\r\n  mapping(address => uint256) public deposits;\r\n  mapping(address => uint256) public pulls;\r\n  uint256 public deposited;\r\n  uint256 public pulled;\r\n\r\n  modifier onlyBlockimmo() {\r\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\r\n    _;\r\n  }\r\n\r\n  function blockimmo() public view returns (address);\r\n\r\n  function withdrawInterest() public onlyBlockimmo {\r\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), address(dai)).add(dai.balanceOf(address(this))).add(pulled).sub(deposited);\r\n    require(amountInterest > 0, \"no interest\");\r\n\r\n    uint256 errorCode = (amountInterest > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), amountInterest.sub(dai.balanceOf(address(this)))) : 0;\r\n    require(errorCode == 0, \"withdraw failed\");\r\n\r\n    dai.safeTransfer(msg.sender, amountInterest);\r\n    emit InterestWithdrawn(msg.sender, amountInterest);\r\n  }\r\n\r\n  function withdrawMoneyMarket(uint256 _amountDai) public onlyBlockimmo {\r\n    uint256 errorCode = moneyMarket.withdraw(address(dai), _amountDai);\r\n    require(errorCode == 0, \"withdraw failed\");\r\n  }\r\n\r\n  function deposit(address _from, uint256 _amountDai) internal {\r\n    require(_from != address(0) && _amountDai > 0, \"invalid parameter(s)\");\r\n\r\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\r\n\r\n    if (!paused()) {\r\n      dai.safeApprove(address(moneyMarket), _amountDai);\r\n\r\n      uint256 errorCode = moneyMarket.supply(address(dai), _amountDai);\r\n      require(errorCode == 0, \"supply failed\");\r\n      require(dai.allowance(address(this), address(moneyMarket)) == 0, \"allowance not fully consumed by moneyMarket\");\r\n    }\r\n\r\n    deposits[_from] = deposits[_from].add(_amountDai);\r\n    deposited = deposited.add(_amountDai);\r\n    emit Deposited(_from, _amountDai);\r\n  }\r\n\r\n  function pull(address _to, uint256 _amountDai, bool _refund) internal {\r\n    require(_to != address(0) && _amountDai > 0, \"invalid parameter(s)\");\r\n\r\n    uint256 errorCode = (_amountDai > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), _amountDai.sub(dai.balanceOf(address(this)))) : 0;\r\n    require(errorCode == 0, \"withdraw failed\");\r\n\r\n    if (_refund) {\r\n      deposits[_to] = deposits[_to].sub(_amountDai);\r\n      deposited = deposited.sub(_amountDai);\r\n    } else {\r\n      pulls[_to] = pulls[_to].add(_amountDai);\r\n      pulled = pulled.add(_amountDai);\r\n    }\r\n\r\n    dai.safeTransfer(_to, _amountDai);\r\n    emit Pulled(_to, _amountDai);\r\n  }\r\n}\r\n\r\ncontract LandRegistryProxyInterface {\r\n  function owner() public view returns (address);\r\n}\r\n\r\ncontract WhitelistInterface {\r\n  function checkRole(address _operator, string memory _role) public view;\r\n  function hasRole(address _operator, string memory _role) public view returns (bool);\r\n}\r\n\r\ncontract WhitelistProxyInterface {\r\n  function whitelist() public view returns (WhitelistInterface);\r\n}\r\n\r\ncontract TokenSale is CappedCrowdsale, FinalizableCrowdsale, LoanEscrow, PostDeliveryCrowdsale {\r\n  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56);  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\r\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(0x7223b032180CDb06Be7a3D634B1E10032111F367);  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\r\n\r\n  mapping(address => bool) public claimedRefund;\r\n  uint256 public goal;\r\n  mapping(address => bool) public reversed;\r\n  uint256 public totalTokens;\r\n\r\n  constructor (\r\n    uint256 _cap,\r\n    uint256 _closingTime,\r\n    uint256 _goal,\r\n    uint256 _openingTime,\r\n    uint256 _rate,\r\n    IERC20 _token,\r\n    address payable _wallet\r\n  )\r\n  public\r\n    Crowdsale(_rate, _wallet, _token)\r\n    CappedCrowdsale(_cap)\r\n    FinalizableCrowdsale()\r\n    TimedCrowdsale(_openingTime, _closingTime)\r\n    PostDeliveryCrowdsale()\r\n  {\r\n    goal = _goal;\r\n  }\r\n\r\n  function blockimmo() public view returns (address) {\r\n    return registryProxy.owner();\r\n  }\r\n\r\n  function claimRefund(address _refundee) public {\r\n    require(finalized() && !goalReached());\r\n    require(!claimedRefund[_refundee]);\r\n\r\n    claimedRefund[_refundee] = true;\r\n    pull(_refundee, deposits[_refundee], true);\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised() >= goal;\r\n  }\r\n\r\n  function hasClosed() public view returns (bool) {\r\n    return capReached() || super.hasClosed();\r\n  }\r\n\r\n  function reverse(address _account) public {\r\n    require(!finalized());\r\n    require(!reversed[_account]);\r\n    WhitelistInterface whitelist = whitelistProxy.whitelist();\r\n    require(!whitelist.hasRole(_account, \"authorized\"));\r\n\r\n    reversed[_account] = true;\r\n    pull(_account, deposits[_account], true);\r\n  }\r\n\r\n  function totalTokensSold() public view returns (uint256) {\r\n    return _getTokenAmount(weiRaised());\r\n  }\r\n\r\n  function withdrawTokens(address beneficiary) public {  // airdrop remaining tokens to investors proportionally\r\n    require(finalized() && goalReached(), \"withdrawTokens requires the TokenSale to be successfully finalized\");\r\n    require(!reversed[beneficiary]);\r\n\r\n    uint256 extra = totalTokens.sub(totalTokensSold()).mul(balanceOf(beneficiary)).div(totalTokensSold());\r\n    _deliverTokens(beneficiary, extra);\r\n\r\n    super.withdrawTokens(beneficiary);\r\n  }\r\n\r\n  function weiRaised() public view returns (uint256) {\r\n    return deposited;\r\n  }\r\n\r\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n    return weiAmount.div(rate());\r\n  }\r\n\r\n  function _finalization() internal {\r\n    require(msg.sender == blockimmo() || msg.sender == wallet());\r\n    super._finalization();\r\n\r\n    totalTokens = token().balanceOf(address(this));\r\n\r\n    if (goalReached()) {\r\n      uint256 fee = weiRaised().div(100);\r\n\r\n      pull(blockimmo(), fee, false);\r\n      pull(wallet(), weiRaised().sub(fee), false);\r\n    } else {\r\n      token().safeTransfer(wallet(), totalTokens);\r\n    }\r\n  }\r\n\r\n  function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n    super._processPurchase(beneficiary, tokenAmount);\r\n    deposit(beneficiary, tokenAmount.mul(rate()));\r\n  }\r\n\r\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n    require(msg.value == 0 && weiAmount % rate() == 0, \"rounding loss\");\r\n    require(!reversed[beneficiary]);\r\n\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    WhitelistInterface whitelist = whitelistProxy.whitelist();\r\n    whitelist.checkRole(beneficiary, \"authorized\");\r\n    require(deposits[beneficiary].add(weiAmount) <= 100000e18 || whitelist.hasRole(beneficiary, \"uncapped\"));\r\n  }\r\n\r\n  function _weiAmount() internal view returns (uint256) {\r\n    return dai.allowance(msg.sender, address(this));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registryProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pulls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountDai\",\"type\":\"uint256\"}],\"name\":\"withdrawMoneyMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reversed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refundee\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"reverse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pulled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockimmo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"InterestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000065a4da25d3016c00000000000000000000000000000000000000000000000000000000000005d07905d00000000000000000000000000000000000000000000001043561a8829300000000000000000000000000000000000000000000000000000000000005c98d25d0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000d8f3f2dcbc37e7437b62ed756c85672685320c91000000000000000000000000f61df1dd91ffff67b214c66caa39bd33e008ce14","Library":"","SwarmSource":"bzzr://a6290910e661a5d7f9540b6e4c9ed02476582e51c6beca11f32b71a13d055f40"}]}