{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n\r\n//DCC VERSION 5\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ninterface ERC721 {\r\n    // Required methods\r\n    function totalSupply() external view returns (uint256 total);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function exists(uint256 _tokenId) external view returns (bool _exists);\r\n    \r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721 {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\r\n}\r\n\r\n/**\r\n * These are required for the DCC contract to interact with the WLC contract\r\n */\r\ninterface WLCCompatible {\r\n    function getWLCReward(uint256 _boughtWLCAmount, address _owner) external returns (uint256 _remaining);\r\n    function setWLCParams(address _address, uint256 _reward) external;\r\n    function resetWLCParams() external;\r\n    \r\n    function getForWLC(address _owner) external;\r\n    \r\n    function getWLCRewardAmount() external view returns (uint256 _amount);\r\n    function getWLCAddress() external view returns (address _address);\r\n}\r\n\r\ncontract DreamCarToken1 is ERC721, ERC721Metadata, WLCCompatible {\r\n    string internal constant tokenName   = 'DreamCarCoin1';\r\n    string internal constant tokenSymbol = 'DCC1';\r\n    \r\n    uint8 public constant decimals = 0;\r\n    \r\n    //ERC721 VARIABLES\r\n    \r\n    //the total count of wishes\r\n    uint256 internal totalTokenSupply;\r\n    \r\n    //this address is the CEO\r\n    address payable public CEO;\r\n    \r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalTokenSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n    \r\n    // Mapping from owner to number of owned tokens\r\n    //mapping (address => uint256) internal tokensBalanceOf;\r\n    \r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n    \r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) internal tokenURIs;\r\n    \r\n    //TOKEN SPECIFIC VARIABLES\r\n\r\n    mapping (address => uint256) internal tokenBallanceOf;\r\n    \r\n    //Token price in WEI\r\n    uint256 public tokenPrice;\r\n    \r\n    //A list of price admins; they can change price, in addition to the CEO\r\n    address[] public priceAdmins;\r\n    \r\n    //Next id that will be assigned to token\r\n    uint256 internal nextTokenId = 1;\r\n    \r\n    //The winning token id\r\n    uint256 public winningTokenId = 0;\r\n    \r\n    //The winner's address, it will be empty, until the reward is claimed\r\n    address public winnerAddress; \r\n    \r\n    //WLC CONTRACT INTERACTION VARIABLES\r\n    \r\n    //WLC tokens in a single purchase to earn a DCC token\r\n    uint256 internal WLCRewardAmount;\r\n    \r\n    //WLC deployed contract address\r\n    address internal WLCAdress;\r\n    \r\n    //ERC721 FUNCTIONS IMPLEMENTATIONS\r\n    \r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n    \r\n    /**\r\n     * Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    /**\r\n     * Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return tokenBallanceOf[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Gets the owner of the specified token ID\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        return tokenOwner[_tokenId];\r\n    }\r\n    \r\n    /**\r\n     * Returns whether the specified token exists\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n    \r\n    /**\r\n     * Not necessary in the contract\r\n     */\r\n    function transfer(address _to, uint256 _tokenId) external { }\r\n    \r\n    /**\r\n     * Not necessary in the contract\r\n     */\r\n    function approve(address _to, uint256 _tokenId) external { }\r\n    \r\n    /**\r\n     * Not necessary in the contract - reverts\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external { }\r\n    \r\n    /**\r\n     * Internal function to set the token URI for a given token\r\n     * Reverts if the token ID does not exist\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n     * @param _uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 _tokenId, string storage _uri) internal {\r\n        require(exists(_tokenId));\r\n        tokenURIs[_tokenId] = _uri;\r\n    }\r\n    \r\n    //ERC721Metadata FUNCTIONS IMPLEMENTATIONS\r\n    /**\r\n     * Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory _name) {\r\n        return tokenName;\r\n    }\r\n    \r\n    /**\r\n     * Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        return tokenSymbol;\r\n    }\r\n    \r\n    /**\r\n     * Returns an URI for a given token ID\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param _tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));\r\n        return tokenURIs[_tokenId];\r\n    }\r\n    \r\n    //TOKEN SPECIFIC FUNCTIONS\r\n    \r\n    event Buy(address indexed from, uint256 amount, uint256 fromTokenId, uint256 toTokenId);\r\n    \r\n    event RewardIsClaimed(address indexed from, uint256 tokenId);\r\n    \r\n    event WinnerIsChosen(address indexed from, uint256 tokenId);\r\n    \r\n    /**\r\n     * Ensures that the caller of the function is the CEO of contract\r\n     */\r\n    modifier onlyCEO {\r\n        require(msg.sender == CEO, 'You need to be the CEO to do that!');\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Constructor of the contract\r\n     * @param _ceo address the CEO (owner) of the contract\r\n     */\r\n    constructor (address payable _ceo) public {\r\n        CEO = _ceo;\r\n        \r\n        totalTokenSupply = 40000;\r\n        \r\n        tokenPrice = 6384880602732729; // (if eth = 156.62USD, 1 USD for token)\r\n    }\r\n    \r\n    /**\r\n     * Gets the last existing token ids\r\n     * @return uint256 the id of the token\r\n     */\r\n    function lastTokenId() public view returns (uint256 tokenId) {\r\n        return nextTokenId - 1;\r\n    }\r\n    \r\n    /**\r\n     * Sets a new price for the tokensExchangedBy\r\n     * @param _newPrice uint256 the new price in WEI\r\n     */\r\n    function setTokenPriceInWEI(uint256 _newPrice) public {\r\n        bool transactionAllowed = false;\r\n        \r\n        if (msg.sender == CEO) {\r\n            transactionAllowed = true;\r\n        } else {\r\n            for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n                if (msg.sender == priceAdmins[i]) {\r\n                    transactionAllowed = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        require((transactionAllowed == true), 'You cannot do that!');\r\n        tokenPrice = _newPrice;\r\n    }\r\n    \r\n    /**\r\n     * Add a new price admin address to the list\r\n     * @param _newPriceAdmin address the address of the new price admin\r\n     */\r\n    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {\r\n        priceAdmins.push(_newPriceAdmin);\r\n    }\r\n    \r\n    /**\r\n     * Remove existing price admin address from the list\r\n     * @param _existingPriceAdmin address the address of the existing price admin\r\n     */\r\n    function removePriceAdmin(address _existingPriceAdmin) onlyCEO public {\r\n        for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n            if (_existingPriceAdmin == priceAdmins[i]) {\r\n                delete priceAdmins[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds the specified number of tokens to the specified address\r\n     * Internal method, used when creating new tokens\r\n     * @param _to address The address, which is going to own the tokens\r\n     * @param _amount uint256 The number of tokens\r\n     */\r\n    function _addTokensToAddress(address _to, uint256 _amount) internal {\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            tokenOwner[nextTokenId + i] = _to;\r\n        }\r\n        \r\n        tokenBallanceOf[_to] += _amount;\r\n        \r\n        nextTokenId += _amount;\r\n    }\r\n    \r\n    /**\r\n     * Checks if the specified token is owned by the transaction sender\r\n     */\r\n    function ensureAddressIsTokenOwner(address _owner, uint256 _tokenId) internal view {\r\n        require(balanceOf(_owner) >= 1, 'You do not own any tokens!');\r\n        \r\n        require(tokenOwner[_tokenId] == _owner, 'You do not own this token!');\r\n    }\r\n    \r\n    /**\r\n     * Generates a random number between 1 and totalTokenSupply variable\r\n     * This is used to choose the winning token id\r\n     */\r\n    function getRandomNumber() internal view returns (uint16) {\r\n        return uint16(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(block.timestamp, block.difficulty, block.number)\r\n                    )\r\n                )%totalTokenSupply\r\n            ) + 1;\r\n    }\r\n    \r\n    /**\r\n     * Chooses a winning token id, if all tokens are purchased\r\n     */\r\n    function chooseWinner() internal {\r\n         if ((nextTokenId - 1) == totalTokenSupply) {\r\n            winningTokenId = getRandomNumber();\r\n            emit WinnerIsChosen(tokenOwner[winningTokenId], winningTokenId);\r\n        } \r\n    }\r\n    \r\n    /**\r\n     * Scales the amount of tokens in a purchase, to ensure it will be less or equal to the amount of unsold tokens\r\n     * If there are no tokens left, it will return 0\r\n     * @param _amount uint256 the amout of tokens in the purchase attempt\r\n     * @return _exactAmount uint256\r\n     */\r\n    function scalePurchaseTokenAmountToMatchRemainingTokens(uint256 _amount) internal view returns (uint256 _exactAmount) {\r\n        if (nextTokenId + _amount - 1 > totalTokenSupply) {\r\n            _amount = totalTokenSupply - nextTokenId + 1;\r\n        }\r\n        \r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n    * Buy new tokens with ETH\r\n    * Calculates the nubmer of tokens for the given ETH amount\r\n    * Creates the new tokens when they are purchased\r\n    * Returns the excessive ETH (if any) to the transaction sender\r\n    */\r\n    function buy() payable public {\r\n        require(msg.value >= tokenPrice, \"You did't send enough ETH\");\r\n        \r\n        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);\r\n        \r\n        require(amount > 0, \"Not enough tokens are available for purchase!\");\r\n        \r\n        _addTokensToAddress(msg.sender, amount);\r\n        \r\n        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1);\r\n        \r\n        //transfer ETH to CEO\r\n        CEO.transfer((amount * tokenPrice));\r\n        \r\n        //returns excessive ETH\r\n        msg.sender.transfer(msg.value - (amount * tokenPrice));\r\n        \r\n        chooseWinner();\r\n    }\r\n    \r\n    /**\r\n    * Allows user to destroy a specified token\r\n    * This would allow a user to claim his prize for the destroyed token\r\n    * @param _tokenId uint256 ID of the token\r\n    */\r\n    function claimReward(uint256 _tokenId) public {\r\n        require(winningTokenId > 0, \"The is not winner yet!\");\r\n        require(_tokenId == winningTokenId, \"This token is not the winner!\");\r\n        \r\n        ensureAddressIsTokenOwner(msg.sender, _tokenId);\r\n        \r\n        winnerAddress = msg.sender;\r\n        \r\n        emit RewardIsClaimed(msg.sender, _tokenId);\r\n    }\r\n    \r\n    //WLC INTERACTION FUNCTIONS\r\n    \r\n    /**\r\n     * Allows the CEO to set the address and the reward values for a connected WishListToken\r\n     * @param _address address the address of the deployed contract\r\n     * @param _reward uint256 how many tokens need to be bought in a single transaction to the one DCC token\r\n     */\r\n    function setWLCParams(address _address, uint256 _reward) public onlyCEO {\r\n        WLCAdress = _address;\r\n        WLCRewardAmount = _reward;\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to revmove a connected WishListToken\r\n     * This revokes the reward and exchange functions\r\n     */\r\n    function resetWLCParams() public onlyCEO {\r\n        WLCAdress = address(0);\r\n        WLCRewardAmount = 0;\r\n    }\r\n    \r\n    /**\r\n     * How many WLC tokens need to be bought in a single transaction to the one DCC token\r\n     * @return _amount uint256\r\n     */\r\n    function getWLCRewardAmount() public view returns (uint256 _amount) {\r\n        return WLCRewardAmount;\r\n    }\r\n    \r\n    /**\r\n     * The address of the deployed WLC contract\r\n     * @return _address address\r\n     */\r\n    function getWLCAddress() public view returns (address _address) {\r\n        return WLCAdress;\r\n    }\r\n    \r\n    /**\r\n     * Allows the buyer of at least the number of WLC tokens, specified in WLCRewardAmount\r\n     * to receive a DCC as a bonus.\r\n     * This can only be called by the deployed WLC contract, by the address specified in WLCAdress\r\n     * @param _boughtWLCAmount uint256 the number of bought WLC tokens\r\n     * @param _owner address the address of the buyer\r\n     */\r\n    function getWLCReward(uint256 _boughtWLCAmount, address _owner) public returns (uint256 _remaining) {\r\n        if (WLCAdress != address(0) && WLCRewardAmount > 0 && _boughtWLCAmount >= WLCRewardAmount) {\r\n            require(WLCAdress == msg.sender, \"You cannot invoke this function directly!\");\r\n            \r\n            uint256 DCCAmount = scalePurchaseTokenAmountToMatchRemainingTokens(_boughtWLCAmount / WLCRewardAmount);\r\n            \r\n            if (DCCAmount > 0) {\r\n                _addTokensToAddress(_owner, DCCAmount);\r\n                \r\n                emit Buy(_owner, DCCAmount, nextTokenId - DCCAmount, nextTokenId - 1);\r\n                \r\n                chooseWinner();\r\n                \r\n                return _boughtWLCAmount - (DCCAmount * WLCRewardAmount);\r\n            }\r\n        }\r\n        \r\n        return _boughtWLCAmount;\r\n    }\r\n    \r\n    /**\r\n     * Allows an onwer of WLC token to excange it for DCC token\r\n     * This can only be called by the deployed WLC contract, by the address specified in WLCAdress\r\n     * @param _owner address the address of the exchanger\r\n     */\r\n    function getForWLC(address _owner) public {\r\n        require(WLCAdress == msg.sender, \"You cannot invoke this function directly!\");\r\n        \r\n        require(nextTokenId <= totalTokenSupply, \"Not enough tokens are available for purchase!\");\r\n        \r\n        _addTokensToAddress(_owner, 1);\r\n        \r\n        emit Buy(_owner, 1, nextTokenId - 1, nextTokenId - 1);\r\n        \r\n        chooseWinner();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_existingPriceAdmin\",\"type\":\"address\"}],\"name\":\"removePriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceAdmin\",\"type\":\"address\"}],\"name\":\"addPriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWLCRewardAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boughtWLCAmount\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getWLCReward\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getForWLC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetWLCParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInWEI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWLCAddress\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setWLCParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RewardIsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WinnerIsChosen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DreamCarToken1","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061","Library":"","SwarmSource":"bzzr://86676fa25e3c53b0c350b972869aed7c90f4d74d119c5d3684feaee7dcefed09"}]}