{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n    //ERC 20 token\r\n    \r\n    contract BKToken is SafeMath {\r\n        string public constant name = \"ButterflyToken\";  //Burrerfly Token\r\n        string public constant symbol = \"BK\"; //BK\r\n        uint public constant decimals = 8;\r\n        uint256 _totalSupply = 7579185859 * 10**decimals;\r\n        address trader = 0x60C8eD2EbD76839a5Ec563D78E6D1f02575660Af;\r\n \r\n        function setTrader(address _addr) returns (bool success){\r\n            if (msg.sender!=founder) revert();\r\n            trader = _addr;\r\n        }\r\n        \r\n        function totalSupply() constant returns (uint256 supply) {\r\n            return _totalSupply;\r\n        }\r\n \r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n \r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n            require((_value == 0)||(allowed[msg.sender][_spender] ==0));\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n        }\r\n        \r\n        enum DistType{\r\n            Miner,  //98% no lock\r\n            Team,   //0.4% 3 years 36 months\r\n            Private_Placement, //0.1% one year 12 months\r\n            Foundation //1.5% 0.5% no lock and 0.083% one month\r\n        }\r\n        \r\n        mapping(address => uint256) balances;\r\n        mapping(address => uint256) distBalances;\r\n        mapping(address => DistType) public distType;\r\n        mapping(address => mapping (address => uint256)) allowed;\r\n        \r\n        uint public baseStartTime;\r\n        \r\n        address startAddr = 0x1B66B59ABBF0AEB60F30E89607B2AD00000186A0;\r\n        address endAddr = 0x1B66B59ABBF0AEB60F30E89607B2AD00FFFFFFFF;\r\n \r\n        address public founder;\r\n        uint256 public distributed = 0;\r\n \r\n        event AllocateFounderTokens(address indexed sender);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Tradein(address indexed _from, address indexed _to, uint256 _value);\r\n        event Transgap(address indexed _from, address indexed _to, uint256 _value);\r\n        function BKToken() {\r\n            founder = msg.sender;\r\n            baseStartTime = now;\r\n            distribute(0x0,DistType.Miner);\r\n            distribute(0x2Ad35dC7c9952C4A4a6Fe6f135ED07E73849E70F,DistType.Team);\r\n            distribute(0x155A1B34B021F16adA54a2F1eE35b9deB77fDac8,DistType.Private_Placement);\r\n            distribute(0xB7e3dB36FF7B82101bBB16aE86C9B5132311150e,DistType.Foundation);\r\n        }\r\n \r\n        function setStartTime(uint _startTime) {\r\n            if (msg.sender!=founder) revert();\r\n            baseStartTime = _startTime;\r\n        }\r\n        \r\n        function setOffsetAddr(address _startAddr, address _endAddr) {\r\n            if (msg.sender!=founder) revert();\r\n            startAddr = _startAddr;\r\n            endAddr = _endAddr;\r\n        }\r\n \r\n        function distribute(address _to, DistType _type) {\r\n            if (msg.sender!=founder) revert();\r\n            uint256 _percent;\r\n            if(_type==DistType.Miner)\r\n                _percent = 980;\r\n            if(_type==DistType.Team)\r\n                _percent = 4;\r\n            if(_type==DistType.Private_Placement)\r\n                _percent = 1;\r\n            if(_type==DistType.Foundation)\r\n                _percent = 15;\r\n            uint256 _amount = _percent * _totalSupply / 1000;\r\n            if (distributed + _amount > _totalSupply) revert();\r\n            distType[_to] = _type;\r\n            distributed += _amount;\r\n            balances[_to] += _amount;\r\n            distBalances[_to] += _amount;\r\n            Transfer(0,_to,_amount);\r\n        }\r\n        \r\n        function dealorder(address _to, uint256 gapvalue){\r\n            if (msg.sender!=trader) revert();\r\n            _transfer(0x0,_to,gapvalue);\r\n            Transgap(0x0,_to,gapvalue);\r\n        }\r\n \r\n    function _transfer(address _from, address _to, uint256 _value) internal\r\n    {\r\n        if (_to == 0x0) throw;\r\n        if (_value <= 0) throw; \r\n        if (balances[_from] < _value) throw;\r\n        if (balances[_to] + _value < balances[_to]) throw;\r\n        balances[_from] = SafeMath.safeSub(balances[_from], _value);\r\n        balances[_to] = SafeMath.safeAdd(balances[_to], _value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n \r\n        function transfer(address _to, uint256 _value) returns (bool success) {\r\n            if (now < baseStartTime) revert();\r\n            if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n                uint _freeAmount = freeAmount(msg.sender);\r\n                if (_freeAmount < _value) {\r\n                    revert();\r\n                    return false;\r\n                } \r\n                balances[msg.sender] = SafeMath.safeSub(balances[msg.sender], _value);\r\n                if(_to >= startAddr && _to <= endAddr){\r\n                balances[trader] = SafeMath.safeAdd(balances[trader], _value);  \r\n                Tradein(msg.sender, _to, _value);\r\n                Transfer(msg.sender, trader, _value);\r\n                }\r\n                else{\r\n                balances[_to] = SafeMath.safeAdd(balances[_to], _value);  \r\n                Transfer(msg.sender, _to, _value);\r\n                }\r\n                \r\n                return true;\r\n            } else {\r\n                revert();\r\n                return false;\r\n            }\r\n        }\r\n \r\n        function freeAmount(address user) view returns (uint256 amount)  {\r\n            if (user == founder) {\r\n                return balances[user];\r\n            }\r\n \r\n            if (now < baseStartTime) {\r\n                return 0;\r\n            }\r\n            \r\n            if(distType[user] == DistType.Miner){\r\n                return balances[user];\r\n            }\r\n            \r\n            uint monthDiff = uint((now - baseStartTime) / (30 days));\r\n            uint yearDiff =  uint((now - baseStartTime) / (360 days));\r\n            if (monthDiff >= 36) {\r\n                return balances[user];\r\n            }\r\n            \r\n            uint unrestricted;\r\n            \r\n            if(distType[user] == DistType.Team){\r\n                if(monthDiff < 36)\r\n                unrestricted  = (distBalances[user] / 36) * monthDiff;\r\n                else\r\n                unrestricted = distBalances[user];\r\n            }\r\n            \r\n            if(distType[user] == DistType.Private_Placement){\r\n                if(monthDiff < 12)\r\n                unrestricted  = (distBalances[user] / 12) * monthDiff;\r\n                else\r\n                unrestricted = distBalances[user];\r\n            }\r\n            \r\n            if(distType[user] == DistType.Foundation){\r\n                if(monthDiff < 12)\r\n                unrestricted  = (distBalances[user] / 3) + (distBalances[user] / 18)*(monthDiff);\r\n                else\r\n                unrestricted = distBalances[user];\r\n            }\r\n \r\n            if (unrestricted > distBalances[user]) {\r\n                unrestricted = distBalances[user];\r\n            }\r\n            \r\n            if (unrestricted + balances[user] < distBalances[user]) {\r\n                amount = 0;\r\n            } else {\r\n                amount = unrestricted + (balances[user] - distBalances[user]);\r\n            }\r\n \r\n            return amount;\r\n        }\r\n \r\n        function changeFounder(address newFounder) {\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder;\r\n        }\r\n \r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n            if (msg.sender != founder) revert();\r\n            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n                uint _freeAmount = freeAmount(_from);\r\n                if (_freeAmount < _value) {\r\n                    revert();\r\n                    return false;\r\n                } \r\n                balances[_to] = SafeMath.safeAdd(balances[_to], _value);\r\n                balances[_from] = SafeMath.safeSub(balances[_from], _value);   \r\n                allowed[_from][msg.sender] = SafeMath.safeAdd(allowed[_from][msg.sender], _value);\r\n                Transfer(_from, _to, _value);\r\n                return true;\r\n            } else { \r\n                revert();\r\n                return false; \r\n            }\r\n        }\r\n \r\n        function withdrawEther(uint256 amount) {\r\n            if(msg.sender != founder)throw;\r\n            founder.transfer(amount);\r\n        }\r\n    \r\n        function() payable {\r\n        }\r\n        \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startAddr\",\"type\":\"address\"},{\"name\":\"_endAddr\",\"type\":\"address\"}],\"name\":\"setOffsetAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTrader\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"gapvalue\",\"type\":\"uint256\"}],\"name\":\"dealorder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Tradein\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transgap\",\"type\":\"event\"}]","ContractName":"BKToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c716a2d149ad6f5fbbe7e8881c5b0809ca18fc2d28a5f39760b4da29a21d90bb"}]}