{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract SlotMachine {\r\n\r\n    address public slotMachineFunds;\r\n\r\n    uint256 public coinPrice = 0.1 ether;\r\n\r\n    address owner;\r\n\r\n    event Rolled(address sender, uint rand1, uint rand2, uint rand3);\r\n\r\n    mapping (address => uint) pendingWithdrawals;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //the user plays one roll of the machine putting in money for the win\r\n    function oneRoll() payable public{\r\n        require(msg.value >= coinPrice);\r\n\r\n        uint rand1 = randomGen(msg.value);\r\n        uint rand2 = randomGen(msg.value + 10);\r\n        uint rand3 = randomGen(msg.value + 20);\r\n\r\n        uint result = calculatePrize(rand1, rand2, rand3);\r\n\r\n        emit Rolled(msg.sender, rand1, rand2, rand3);\r\n\r\n        pendingWithdrawals[msg.sender] += result;\r\n        \r\n    }\r\n    \r\n    function contractBalance() constant public returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function calculatePrize(uint rand1, uint rand2, uint rand3) constant public returns(uint) {\r\n        if(rand1 == 5 && rand2 == 5 && rand3 == 5) {\r\n            return coinPrice * 30;\r\n        } else if (rand1 == 6 && rand2 == 5 && rand3 == 6) {\r\n            return coinPrice * 20;\r\n        } else if (rand1 == 4 && rand2 == 4 && rand3 == 4) {\r\n            return coinPrice * 15;\r\n        } else if (rand1 == 3 && rand2 == 3 && rand3 == 3) {\r\n            return coinPrice * 12;\r\n        } else if (rand1 == 2 && rand2 == 2 && rand3 == 2) {\r\n            return coinPrice * 10;\r\n        } else if (rand1 == 1 && rand2 == 1 && rand3 == 1) {\r\n            return coinPrice * 5;\r\n        } else if ((rand1 == rand2) || (rand1 == rand3) || (rand2 == rand3)) {\r\n            return coinPrice;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function withdraw() public{\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n\r\n        pendingWithdrawals[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function balanceOf(address user) constant public returns(uint) {\r\n        return pendingWithdrawals[user];\r\n    }\r\n\r\n    function setCoinPrice(uint _coinPrice) public onlyOwner {\r\n        coinPrice = _coinPrice;\r\n    }\r\n\r\n    function() onlyOwner payable public {\r\n    }\r\n    \r\n    function addEther() payable public {}\r\n\r\n    function cashout(uint _amount) onlyOwner public{\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    function randomGen(uint seed) private constant returns (uint randomNumber) {\r\n        return (uint(keccak256(blockhash(block.number-1), seed )) % 6) + 1;\r\n    }\r\n    \r\n    function killContract() public onlyOwner { //onlyOwner is custom modifier\r\n  \t    selfdestruct(owner);  // `owner` is the owners address\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rand1\",\"type\":\"uint256\"},{\"name\":\"rand2\",\"type\":\"uint256\"},{\"name\":\"rand3\",\"type\":\"uint256\"}],\"name\":\"calculatePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinPrice\",\"type\":\"uint256\"}],\"name\":\"setCoinPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slotMachineFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"oneRoll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rand1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rand2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rand3\",\"type\":\"uint256\"}],\"name\":\"Rolled\",\"type\":\"event\"}]","ContractName":"SlotMachine","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8bb077f3ca0e5de4c3dc91f3622bb69e74413c8fdb44363ff421bff9556abfbe"}]}