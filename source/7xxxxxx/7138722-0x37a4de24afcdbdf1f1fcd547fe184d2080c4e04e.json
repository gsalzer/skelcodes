{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function tokenURI(uint256 tokenId) external view returns (string);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string name, string symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param tokenId uint256 ID of the token to set its URI\r\n   * @param uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 tokenId, string uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n// File: contracts/Referrers.sol\r\n\r\ncontract Referrers is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Referrer bonus in %\r\n    uint public referrerBonusSale;\r\n    uint public referrerBonusWin;\r\n    uint public _referrerId;\r\n    // mapping referrerId to address\r\n    mapping(uint => address) public referrerToAddress;\r\n    // Tickets referals: tokeId => referrerId\r\n    mapping(uint => uint) public ticketToReferrer;\r\n    // Tickets of referrer\r\n    mapping(uint => uint[]) public referrerTickets;\r\n    // mapping address to referrerId\r\n    mapping(address => uint) public addressToReferrer;\r\n    mapping(uint => uint) public totalEarnReferrer;\r\n\r\n    constructor() public {\r\n        referrerBonusSale = 8;\r\n        referrerBonusWin = 2;\r\n        _referrerId = 0;\r\n    }\r\n\r\n    function _setTicketReferrer(uint _tokenId, uint _referrer) internal {\r\n        require(ticketToReferrer[_tokenId] == 0);\r\n        ticketToReferrer[_tokenId] = _referrer;\r\n        referrerTickets[_referrer].push(_tokenId);\r\n    }\r\n\r\n    function registerReferrer() public {\r\n        require(addressToReferrer[msg.sender] == 0);\r\n        _referrerId = _referrerId.add(1);\r\n        addressToReferrer[msg.sender] = _referrerId;\r\n        referrerToAddress[_referrerId] = msg.sender;\r\n    }\r\n\r\n    function getReferrerTickets(uint _referrer) public view returns (uint[]) {\r\n        return referrerTickets[_referrer];\r\n    }\r\n\r\n    // Admin methods\r\n    function setReferrerBonusWin(uint _amount) public onlyOwner {\r\n        referrerBonusWin = _amount;\r\n    }\r\n\r\n    function setReferrerBonusSale(uint _amount) public onlyOwner {\r\n        referrerBonusSale = _amount;\r\n    }\r\n    //End admin methods\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\nlibrary Utils {\r\n    function pack(uint[] _data) internal pure returns(uint) {\r\n        uint result = 0;\r\n        for (uint i=0;i<_data.length;i++) {\r\n            result += 2**_data[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function unpack(uint _data, uint _maxBallsCount) internal pure returns(uint[]) {\r\n        uint[] memory result = new uint256[](_maxBallsCount);\r\n        uint iPosition = 0;\r\n        uint i = 0;\r\n        while (_data != 0) {\r\n            if ((_data & 1) == 1) {\r\n                result[iPosition] = i;\r\n                iPosition++;\r\n            }\r\n            i++;\r\n            _data >>= 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function popcount(uint x) public pure returns(uint) {\r\n        uint count;\r\n        for (count=0; x > 0; count++) {\r\n            x &= x - 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function getBonusAmount(uint _amount, uint _bonusPercent) internal pure returns (uint) {\r\n        return _amount * _bonusPercent / 100;\r\n    }\r\n\r\n    function addr2str(address _addr) internal pure returns(string) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(value[i + 12] >> 4)];\r\n            str[3+i*2] = alphabet[uint(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\n// File: contracts/Balance.sol\r\n\r\nlibrary Balance {\r\n    using SafeMath for uint256;\r\n\r\n    struct BalanceStorage {\r\n        // users/referrals balances\r\n        mapping(address => uint) balances;\r\n        mapping(address => uint) totalEarn;\r\n    }\r\n\r\n    // Add amount wei to address balance\r\n    function _addBalance(BalanceStorage storage self, address _address, uint _amount) internal {\r\n        self.balances[_address] = self.balances[_address].add(_amount);\r\n        self.totalEarn[_address] = self.totalEarn[_address].add(_amount);\r\n    }\r\n\r\n    function _subBalance(BalanceStorage storage self, address _address, uint _amount) internal {\r\n        self.balances[_address] = self.balances[_address].sub(_amount);\r\n        self.totalEarn[_address] = self.totalEarn[_address].sub(_amount);\r\n    }\r\n\r\n    function _clearBalance(BalanceStorage storage self, address _address) internal {\r\n        self.balances[_address] = 0;\r\n    }\r\n\r\n    function _getBalance(BalanceStorage storage self, address _address) internal view returns (uint){\r\n        return self.balances[_address];\r\n    }\r\n\r\n    function _getTotalEarn(BalanceStorage storage self, address _address) internal view returns (uint){\r\n        return self.totalEarn[_address];\r\n    }\r\n}\r\n\r\n// File: contracts/CryptoBall645.sol\r\n\r\n//Write your own contracts here. Currently compiles using solc v0.4.15+commit.bbb8e64f.\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DrawContractI {\r\n    function ticketToDraw(uint _tokenId) public returns (uint);\r\n    function drawNumber() public returns (uint);\r\n    function drawTime(uint _drawNumber) public returns (uint);\r\n    function ticketPrizes(uint _tokenId) public returns (uint);\r\n    function registerTicket(uint _tokenId, uint[] _numbers, uint _ticketPrice, uint _ownerBonusSale, uint _referrerBonusSale, uint _drawNumber) external;\r\n    function checkTicket(uint _tokenId) external;\r\n    function addSuperPrize(uint _amount) external;\r\n}\r\n\r\ncontract CryptoBall645 is ERC721Full(\"Crypto balls 6/45\", \"B645\"), Ownable, Referrers {\r\n    using Balance for Balance.BalanceStorage;\r\n    Balance.BalanceStorage balance;\r\n\r\n    event OwnerBonus(address indexed _to, uint _amount);\r\n    event ReferrerBonus(address indexed _to, uint _amount);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint constant public MAX_BALLS_COUNT = 6;\r\n    uint constant public MAX_BALL_NUMBER = 45;\r\n\r\n    //Bonus of contract owner\r\n    uint public ownerBonusSale = 25;\r\n    uint public ownerBonusWin = 0;\r\n\r\n    uint public ticketPrice = 0.01 ether;\r\n\r\n    uint public tokenIds = 0;\r\n    mapping(uint => uint) public mintDate;\r\n\r\n    DrawContractI drawContract;\r\n    address public drawContractAddress;\r\n\r\n    modifier onlyDrawContract() {\r\n        require(msg.sender == drawContractAddress);\r\n        _;\r\n    }\r\n\r\n    modifier allowBuyTicket() {\r\n        require(msg.value == ticketPrice);\r\n        _;\r\n    }\r\n\r\n    modifier allowBuyTicketCount(uint _drawCount) {\r\n        require(msg.value == ticketPrice*_drawCount);\r\n        _;\r\n    }\r\n\r\n    modifier allowRegisterTicket(uint[] _numbers) {\r\n        require(_numbers.length == MAX_BALLS_COUNT);\r\n        for (uint i = 0; i < MAX_BALLS_COUNT; i++) {\r\n            require(_numbers[i] > 0);\r\n            require(_numbers[i] <= MAX_BALL_NUMBER);\r\n            for (uint t = 0; t < MAX_BALLS_COUNT; t++) {\r\n                if (t == i) {\r\n                    continue;\r\n                }\r\n                require(_numbers[t]!=_numbers[i]);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Guarantees msg.sender is owner of the given token\r\n      * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n      */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // Update ticket price\r\n    function setTicketPrice(uint _amount) external onlyOwner {\r\n        ticketPrice = _amount;\r\n    }\r\n\r\n    // Update sale bonus for owner\r\n    function setOwnerBonusSale(uint _amount) external onlyOwner {\r\n        ownerBonusSale = _amount;\r\n    }\r\n\r\n    // Update win bonus for owner\r\n    function setOwnerBonusWin(uint _amount) external onlyOwner {\r\n        ownerBonusWin = _amount;\r\n    }\r\n\r\n    function setDrawContract(address _address) public onlyOwner {\r\n        drawContractAddress = _address;\r\n        drawContract = DrawContractI(_address);\r\n    }\r\n\r\n    function burn(uint _tokenId) external onlyOwner {\r\n        require((now - mintDate[_tokenId]) / 60 / 60 / 24 > 30);\r\n        require(drawContract.ticketToDraw(_tokenId) == 0);\r\n        uint _refundPrice = ticketPrice * (100 - ownerBonusSale - referrerBonusSale) / 100;\r\n        balance._addBalance(owner(), _refundPrice);\r\n        _burn(ownerOf(_tokenId), _tokenId);\r\n    }\r\n\r\n    // Tokens list of user\r\n    function getMyTickets() public view returns (uint256[]) {\r\n        uint _myTotalTokens = balanceOf(msg.sender);\r\n        uint[] memory _myTokens = new uint[](_myTotalTokens);\r\n        uint k = 0;\r\n        for (uint i = 0; i <= totalSupply(); i++) {\r\n            uint _myTokenId = tokenOfOwnerByIndex(msg.sender, i);\r\n            if (_myTokenId > 0) {\r\n                _myTokens[k] = _myTokenId;\r\n                k++;\r\n                if (k >= _myTotalTokens) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return _myTokens;\r\n    }\r\n\r\n    // Buy ticket\r\n    function _buyToken(address _to, uint _referrerId) private returns (uint) {\r\n        tokenIds = tokenIds.add(1);\r\n        uint _tokenId = tokenIds;\r\n        _mint(_to, _tokenId);\r\n        transferFrom(ownerOf(_tokenId), msg.sender, _tokenId);\r\n        mintDate[_tokenId] = now;\r\n        // Send bonus to the owner\r\n        _addOwnerBonus(ticketPrice, ownerBonusSale);\r\n        // Send bonus to the referrer if referrerId was sent and referrer was registered\r\n        if (_referrerId == 0) {\r\n            _referrerId = addressToReferrer[owner()];\r\n        }\r\n        if (_referrerId > 0 && referrerToAddress[_referrerId] > 0) {\r\n            _addReferrerBonus(_referrerId, ticketPrice, referrerBonusSale);\r\n            _setTicketReferrer(_tokenId, _referrerId);\r\n        }\r\n        return _tokenId;\r\n    }\r\n\r\n    function() public payable {\r\n        require(msg.value >= ticketPrice);\r\n        uint ticketsCount = msg.value / ticketPrice;\r\n        uint returnCount = msg.value % ticketPrice;\r\n\r\n        if (returnCount > 0) {\r\n            msg.sender.transfer(returnCount);\r\n        }\r\n        for (uint i = 1; i <= ticketsCount; i++) {\r\n            _buyToken(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    // User buy new ticket\r\n    function buyTicket(uint _referrerId) public payable allowBuyTicket {\r\n        _buyToken(msg.sender, _referrerId);\r\n    }\r\n\r\n    // Buy, fill and register ticket\r\n    function buyAndRegisterTicket(uint _referrerId, uint[] _numbers, uint _drawCount) public payable allowBuyTicketCount(_drawCount) allowRegisterTicket(_numbers) returns (uint){\r\n        uint _drawNumber = drawContract.drawNumber();\r\n        for (uint i = 0; i<_drawCount; i++) {\r\n            uint _tokenId = _buyToken(msg.sender, _referrerId);\r\n            uint _draw = _drawNumber + i;\r\n            drawContract.registerTicket(_tokenId, _numbers, ticketPrice, ownerBonusSale, referrerBonusSale, _draw);\r\n        }\r\n    }\r\n\r\n    // Register ticket to the nearest drawing\r\n    function registerTicket(uint _tokenId, uint[] _numbers, uint _drawNumber) public onlyOwnerOf(_tokenId) allowRegisterTicket(_numbers) {\r\n        //Ticket not yet filled\r\n        require(drawContract.ticketToDraw(_tokenId) == 0);\r\n        drawContract.registerTicket(_tokenId, _numbers, ticketPrice, ownerBonusSale, referrerBonusSale, _drawNumber);\r\n    }\r\n\r\n    function _checkTicket(uint _tokenId, address _receiver) private returns (bool) {\r\n        drawContract.checkTicket(_tokenId);\r\n        uint _prize = drawContract.ticketPrizes(_tokenId);\r\n        if (_prize > 0) {\r\n            if (_prize == ticketPrice) {\r\n                _buyToken(_receiver, ticketToReferrer[_tokenId]);\r\n                balance._subBalance(owner(), ticketPrice);\r\n            } else {\r\n                _addPriceToBalance(_tokenId, _prize, _receiver);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Check ticket and move prize to balance\r\n    function checkTicket(uint _tokenId) public {\r\n        require(_exists(_tokenId));\r\n        require(_checkTicket(_tokenId, ownerOf(_tokenId)));\r\n    }\r\n\r\n    // Contract owner can withdraw prizes after 30 days if winner didn't withdraw it\r\n    function withdrawTicketPrize(uint _tokenId) public onlyOwner {\r\n        require(_exists(_tokenId));\r\n        uint _ticketDraw = drawContract.ticketToDraw(_tokenId);\r\n        require((now - drawContract.drawTime(_ticketDraw)) / 60 / 60 / 24 > 30);\r\n        require(_checkTicket(_tokenId, owner()));\r\n    }\r\n\r\n    function _addPriceToBalance(uint _tokenId, uint _prizeAmount, address _receiver) private {\r\n        uint _ownerBonus = Utils.getBonusAmount(_prizeAmount, ownerBonusWin);\r\n        uint _referrerBonus = Utils.getBonusAmount(_prizeAmount, referrerBonusWin);\r\n        uint _referrerId = ticketToReferrer[_tokenId];\r\n        uint winnerPrizeAmount = _prizeAmount - _ownerBonus - _referrerBonus;\r\n        balance._addBalance(_receiver, winnerPrizeAmount);\r\n        _addReferrerBonus(_referrerId, winnerPrizeAmount, referrerBonusWin);\r\n        _addOwnerBonus(winnerPrizeAmount, ownerBonusWin);\r\n    }\r\n\r\n    // Get My balance\r\n    function getMyBalance() public view returns (uint){\r\n        return balance._getBalance(msg.sender);\r\n    }\r\n\r\n    // Withdraw My balance\r\n    function withdrawMyBalance() public {\r\n        uint _userBalance = balance._getBalance(msg.sender);\r\n        require(_userBalance > 0);\r\n        require(address(this).balance >= _userBalance);\r\n        balance._clearBalance(msg.sender);\r\n        msg.sender.transfer(_userBalance);\r\n        emit Transfer(this, msg.sender, _userBalance);\r\n    }\r\n\r\n    function withdrawBalanceAmount(uint _amount) public {\r\n        uint _userBalance = balance._getBalance(msg.sender);\r\n        require(_userBalance > 0);\r\n        require(_amount <= _userBalance);\r\n        require(address(this).balance >= _amount);\r\n        balance._subBalance(msg.sender, _amount);\r\n        msg.sender.transfer(_amount);\r\n        emit Transfer(this, msg.sender, _amount);\r\n    }\r\n\r\n    function _addReferrerBonus(uint _referrer, uint _fromAmount, uint _bonusPercent) internal {\r\n        address _referrerAddress = referrerToAddress[_referrer];\r\n        if (_referrerAddress == address(0)) {\r\n            _referrerAddress = owner();\r\n        }\r\n        uint _amount = Utils.getBonusAmount(_fromAmount, _bonusPercent);\r\n        if (_amount > 0) {\r\n            balance._addBalance(_referrerAddress, _amount);\r\n            totalEarnReferrer[_referrer] = totalEarnReferrer[_referrer].add(_amount);\r\n            emit ReferrerBonus(_referrerAddress, _amount);\r\n        }\r\n    }\r\n\r\n    function _addOwnerBonus(uint _fromAmount, uint _bonusPercent) internal {\r\n        uint _amount = Utils.getBonusAmount(_fromAmount, _bonusPercent);\r\n        if (_amount > 0) {\r\n            balance._addBalance(owner(), _amount);\r\n            emit OwnerBonus(owner(), _amount);\r\n        }\r\n    }\r\n\r\n    function addBalance(address _address, uint _amount) external onlyDrawContract {\r\n        balance._addBalance(_address, _amount);\r\n    }\r\n\r\n    function addSuperPrize() public payable {\r\n        drawContract.addSuperPrize(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BALLS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drawContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReferrerBonusSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"uint256\"}],\"name\":\"getReferrerTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketToReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerBonusWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addSuperPrize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReferrerBonusWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrerTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"name\":\"_numbers\",\"type\":\"uint256[]\"},{\"name\":\"_drawCount\",\"type\":\"uint256\"}],\"name\":\"buyAndRegisterTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBonusWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOwnerBonusWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalanceAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEarnReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_referrerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrerToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDrawContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOwnerBonusSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawTicketPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BALL_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_numbers\",\"type\":\"uint256[]\"},{\"name\":\"_drawNumber\",\"type\":\"uint256\"}],\"name\":\"registerTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerBonusSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBonusSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OwnerBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"CryptoBall645","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52ae6057f98a2381fc725e4adc725455f16f484d24be51555abb05db5f9f264b"}]}