{"status":"1","message":"OK","result":[{"SourceCode":"/*! lk2.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\r\n\r\npragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public new_owner;\r\n\r\n    event OwnershipTransfer(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _;  }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function _transferOwnership(address _to) internal {\r\n        require(_to != address(0));\r\n\r\n        new_owner = _to;\r\n\r\n        emit OwnershipTransfer(owner, _to);\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(new_owner != address(0) && msg.sender == new_owner);\r\n\r\n        emit OwnershipTransferred(owner, new_owner);\r\n\r\n        owner = new_owner;\r\n        new_owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address _to) public onlyOwner {\r\n        _transferOwnership(_to);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256);\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        require(_spender != address(0));\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        require(_spender != address(0));\r\n        require(_addedValue > 0);\r\n\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        require(_spender != address(0));\r\n        require(_subtractedValue > 0);\r\n\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n    modifier hasMintPermission() { require(msg.sender == owner); _; }\r\n\r\n    function mint(address _to, uint256 _amount) hasMintPermission canMint public returns(bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    constructor(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public returns(bool) {\r\n        require(totalSupply_.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    event WithdrawEther(address indexed to, uint value);\r\n\r\n    function withdrawEther(address _to, uint _value) onlyOwner public {\r\n        require(_to != address(0));\r\n        require(address(this).balance >= _value);\r\n\r\n        _to.transfer(_value);\r\n\r\n        emit WithdrawEther(_to, _value);\r\n    }\r\n\r\n    function withdrawTokensTransfer(ERC20 _token, address _to, uint256 _value) onlyOwner public {\r\n        require(_token.transfer(_to, _value));\r\n    }\r\n\r\n    function withdrawTokensTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) onlyOwner public {\r\n        require(_token.transferFrom(_from, _to, _value));\r\n    }\r\n\r\n    function withdrawTokensApprove(ERC20 _token, address _spender, uint256 _value) onlyOwner public {\r\n        require(_token.approve(_spender, _value));\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Manageable is Ownable {\r\n    address[] public managers;\r\n\r\n    event ManagerAdded(address indexed manager);\r\n    event ManagerRemoved(address indexed manager);\r\n\r\n    modifier onlyManager() { require(isManager(msg.sender)); _; }\r\n\r\n    function countManagers() view public returns(uint) {\r\n        return managers.length;\r\n    }\r\n\r\n    function getManagers() view public returns(address[]) {\r\n        return managers;\r\n    }\r\n\r\n    function isManager(address _manager) view public returns(bool) {\r\n        for(uint i = 0; i < managers.length; i++) {\r\n            if(managers[i] == _manager) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addManager(address _manager) onlyOwner public {\r\n        require(_manager != address(0));\r\n        require(!isManager(_manager));\r\n\r\n        managers.push(_manager);\r\n\r\n        emit ManagerAdded(_manager);\r\n    }\r\n\r\n    function removeManager(address _manager) onlyOwner public {\r\n        uint index = managers.length;\r\n        for(uint i = 0; i < managers.length; i++) {\r\n            if(managers[i] == _manager) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        if(index >= managers.length) revert();\r\n\r\n        for(; index < managers.length - 1; index++) {\r\n            managers[index] = managers[index + 1];\r\n        }\r\n        \r\n        managers.length--;\r\n        emit ManagerRemoved(_manager);\r\n    }\r\n}\r\n\r\ncontract RewardToken is StandardToken, Ownable {\r\n    struct Payment {\r\n        uint time;\r\n        uint amount;\r\n    }\r\n\r\n    Payment[] public repayments;\r\n    mapping(address => Payment[]) public rewards;\r\n\r\n    event Repayment(address indexed from, uint256 amount);\r\n    event Reward(address indexed to, uint256 amount);\r\n\r\n    function repayment() onlyOwner payable public {\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        repayments.push(Payment({time : block.timestamp, amount : msg.value}));\r\n\r\n        emit Repayment(msg.sender, msg.value);\r\n    }\r\n\r\n    function _reward(address _to) private returns(bool) {\r\n        if(rewards[_to].length < repayments.length) {\r\n            uint sum = 0;\r\n            for(uint i = rewards[_to].length; i < repayments.length; i++) {\r\n                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply_) : 0;\r\n                rewards[_to].push(Payment({time : block.timestamp, amount : amount}));\r\n                sum += amount;\r\n            }\r\n\r\n            if(sum > 0) {\r\n                _to.transfer(sum);\r\n                emit Reward(_to, sum);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function reward() public returns(bool) {\r\n        return _reward(msg.sender);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        _reward(msg.sender);\r\n        _reward(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        _reward(_from);\r\n        _reward(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract Token is RewardToken, CappedToken, BurnableToken, Withdrawable {\r\n    constructor() CappedToken(2000000000 * 1e8) StandardToken(\"TLS Token\", \"TLS\", 8) public {\r\n        \r\n    }\r\n}\r\n\r\ncontract Crowdsale is Manageable, Withdrawable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    event ExternalPurchase(address indexed holder, string tx, string currency, uint256 currencyAmount, uint256 rateToEther, uint256 tokenAmount);\r\n    event CrowdsaleClose();\r\n   \r\n    constructor() public {\r\n        token = new Token();\r\n        addManager(0x3a75fedC58bc0a5B10F5FCcC6c0a24470C34a0e8);\r\n        addManager(0x66F6aE2B20DF5a07bDc9b92fF80aEb77e3d81B11);\r\n    }\r\n\r\n    function externalPurchase(address _to, string _tx, string _currency, uint _value, uint256 _rate, uint256 _tokens) whenNotPaused onlyManager external {\r\n        require(!crowdsaleClosed);\r\n        require(_to != address(0));\r\n\r\n        token.mint(_to, _tokens);\r\n        emit ExternalPurchase(_to, _tx, _currency, _value, _rate, _tokens);\r\n    }\r\n\r\n    function closeCrowdsale(address _newTokenOwner) onlyOwner external {\r\n        require(!crowdsaleClosed);\r\n        require(_newTokenOwner != address(0));\r\n\r\n        token.finishMinting();\r\n        token.transferOwnership(_newTokenOwner);\r\n\r\n        crowdsaleClosed = true;\r\n\r\n        emit CrowdsaleClose();\r\n    }\r\n    \r\n    function transferTokenOwnership(address _to) onlyOwner external {\r\n        require(crowdsaleClosed);\r\n        require(_to != address(0));\r\n\r\n        token.transferOwnership(_to);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenOwner\",\"type\":\"address\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tx\",\"type\":\"string\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"externalPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"new_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tx\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateToEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9dcf98d4c5ef31103110b4c7885fdc5c0e12113a8a648ddc64e4bda1ce435a91"}]}