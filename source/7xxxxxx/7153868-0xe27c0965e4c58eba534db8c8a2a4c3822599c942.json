{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * https://GreenRabbit.site\r\n *\r\n * Welcome to Green Rabbit's smart Kingdom.\r\n *\r\n * Here you can collect or earn GRC tokens (Green Rabbit's Coins) and sell it for Ethereum.\r\n * Send Ethereum to the contract address for buying GRC tokens.\r\n * Attention: purchase price more than sale price by 11.1%\r\n *\r\n * The price of GRC tokens will be increased by 1% per day.\r\n * \r\n * For create the kingdom, you should to spend GRC tokens for increasing the number of citizens or warriors of your kingdom. \r\n *\r\n * If you want to be just an investor, don't add citizens or warriors and your kingdom won't be created.\r\n * \r\n * Each citizen of your Kingdom will pay tribute to you. One citizen pays tribute equal kingdom prosperity, per 7 days.\r\n * Your warriors can attack random kingdoms and can pick up their coins. One warrior can pick up number of GRC equal (100 - attacked kingdom defence).\r\n * After attack, number of your warriors will be reduced by percent of defence of attacked kingdom.\r\n * Send 0.01 ether to the contract 0x76d7aed5ab1c4a5e210d0ccac747d097f9d58966 for attack random kingdom.\r\n * Attention: You won't lose warriors, if attacked kingdom have GRC number less than 10000.\r\n *\r\n * Each kingdom have prosperity and defence levels. Sum of prosperity and defence levels always will be equal 100.\r\n * You can increase prosperity and reduce defence level by 10 sending 0.000333 ether to the contract address. Maximum prosperity is 100.\r\n * You can increase defence and reduce prosperity level by 10 sending 0.000444 ether to the contract address. Maximum defence is 90.\r\n *\r\n * Citizens will pay GRC tokens depending on their level of prosperity, the more it is, the more they will pay.\r\n * Attention! You can lost part of your coins, if your defence is not high and your kingdom would be under attack.\r\n *\r\n * Send from 0 to 0.00001 ether to this contract address for sell all your GRC tokens.\r\n * Send 0.000111 ether to spend your tokens to add citizens to your kingdom. \r\n * Send 0.000222 ether to spend your tokens to add warriors to your kingdom. \r\n * Send 0.000333 ether to set +10 prosperity and -10 defence level of your kingdom. \r\n * Send 0.000444 ether to set +10 defence and -10 prosperity level of your kingdom. \r\n *\r\n * Use 200000 of Gas limit for your transactions.\r\n *\r\n * Admin commissions: 5% from GRC tokens buying.\r\n *\r\n * Game will be paused for 3 days when balance is null and will be auto restarted, all kingdoms and tokens will be burnt.\r\n * \r\n */\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\taddress private owner;\r\n\t\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\t\r\n}\r\n\r\ncontract ERC20 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n\tuint256 private _totalSupply;\r\n\t\r\n\t \r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address from, address to, uint256 value) public onlyOwner returns (bool) {\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint token for a specified address\r\n    * @param account The address to mint to.\r\n    * @param value The amount to be minted.\r\n    */\r\n    function mint(address account, uint256 value) public onlyOwner returns (bool) {\r\n        _mint(account, value);\r\n        return true;\r\n    }\r\n\t\r\n    /**\r\n    * @dev Burn token for a specified address\r\n    * @param account The address to burn from.\r\n    * @param value The amount to be burnt.\r\n    */\r\n    function burn(address account, uint256 value) public onlyOwner returns (bool) {\r\n        _burn(account, value);\r\n        return true;\r\n    }\t\r\n\t\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract KingdomStorage is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint private _kingdomsCount;\r\n\r\n    struct Kingdom {\r\n        uint numberOfCitizens;\r\n\t\tuint numberOfWarriors;\r\n\t\tuint prosperity;\r\n\t\tuint defence;\r\n\t\tuint lostCoins; //lost tokens in wars\r\n        uint tributeCheckpoint;\r\n    }\r\n\r\n\tmapping (uint => address) private kingdomAddress;\r\n    mapping (address => Kingdom) private kingdoms;\r\n\t\r\n\tevent War(address indexed _attacked, address indexed _invader, uint _lostCoins, uint _slayedWarriors);\r\n\r\n    function addCitizens(address _address, uint _number, bool _are_warriors) external onlyOwner {\r\n\t\tif (kingdoms[_address].prosperity == 0) {\r\n\t\t\t// create the new kingdom\r\n\t\t\tkingdomAddress[_kingdomsCount] = _address;\r\n\t\t\tkingdoms[_address].prosperity = 50;\r\n\t\t\tkingdoms[_address].defence = 50;\t\r\n\t\t\t_kingdomsCount++;\r\n\t\t}\r\n\t\t\r\n        if (_are_warriors) {\r\n\t\t\t// add warriors\t\r\n\t\t\tkingdoms[_address].numberOfWarriors = kingdoms[_address].numberOfWarriors.add(_number);\r\n\t\t} else {\r\n\t\t\t// add citizens\r\n\t\t\tkingdoms[_address].numberOfCitizens = kingdoms[_address].numberOfCitizens.add(_number);\r\n\t\t\tkingdoms[_address].tributeCheckpoint = block.timestamp;\r\n\t\t}\r\n\r\n    }\r\n\t\r\n    function getTribute(address _address) external onlyOwner {\r\n\t\tuint tributeValue = getTributeValue(_address);\r\n\t\tif (tributeValue > 0) {\r\n\t\t\tmint(_address, tributeValue);\r\n\t\t\tkingdoms[_address].tributeCheckpoint = block.timestamp;\r\n\t\t\tkingdoms[_address].lostCoins = 0;\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction startWar(address _invader, address _attacked) external onlyOwner {\r\n\t\tuint invaderWarriorsNumber = getWarriorsNumber(_invader);\r\n\t\trequire (invaderWarriorsNumber >0);\r\n\t\t\r\n\t\tuint attackedKingdomBalance = balanceOf(_attacked);\t\t\r\n\t\tuint attackedKingdomWealth = getTributeValue(_attacked).add(attackedKingdomBalance);\r\n\t\tuint attackedKingdomDefence = getDefence(_attacked); \r\n\t\t\r\n\t\t// one warrior picks up number of GRC equal (100 - attacked kingdom defence)\r\n\t\tuint attackPower = invaderWarriorsNumber.mul(100 - attackedKingdomDefence); \r\n\t\tif (attackPower > attackedKingdomWealth)\r\n\t\t\tattackPower = attackedKingdomWealth;\r\n\t\t\r\n\t\t// defence action: slay warriors\r\n\t\tuint slayedWarriors;\r\n\t\t// dont slay, if attackedKingdomWealth <= 10000 GRC\r\n\t\tif (attackedKingdomWealth > 10000) {\r\n\t\t\tslayedWarriors = invaderWarriorsNumber.mul(attackedKingdomDefence).div(100);\t\r\n\t\t\tkingdoms[_invader].numberOfWarriors -= slayedWarriors;\r\n\t\t}\r\n\t\t\r\n\t\t// invader action: pick up tokens\r\n\t\tuint lostCoins;\r\n\t\t\r\n\t\tif (attackedKingdomBalance >= attackPower) {\r\n\t\t\ttransfer(_attacked, _invader, attackPower);\r\n\t\t\tlostCoins += attackPower;\r\n\t\t\tattackPower = 0;\r\n\t\t} else if (attackedKingdomBalance > 0) {\r\n\t\t\ttransfer(_attacked, _invader, attackedKingdomBalance);\r\n\t\t\tlostCoins += attackedKingdomBalance;\r\n\t\t\tattackPower -= attackedKingdomBalance;\r\n\t\t} \r\n\r\n\t\tif (attackPower > 0) {\r\n\t\t\tkingdoms[_attacked].lostCoins += attackPower;\r\n\t\t\tmint(_invader, attackPower);\r\n\t\t\tlostCoins += attackPower;\r\n\t\t}\r\n\t\t\r\n\t\temit War(_attacked, _invader, lostCoins, slayedWarriors);\r\n\t}\r\n\t\r\n\tfunction warFailed(address _invader) external onlyOwner {\r\n\t\temit War(address(0), _invader, 0, 0);\r\n\t}\r\n\t\r\n    function increaseProsperity(address _address) external onlyOwner {\r\n\t\t// minimum defence = 0%, maximum prosperity = 100%\r\n\t\tif (kingdoms[_address].prosperity <= 90) {\r\n\t\t\tkingdoms[_address].prosperity += 10;\r\n\t\t\tkingdoms[_address].defence -= 10;\r\n\t\t}\r\n    }\t\r\n\t\r\n    function increaseDefence(address _address) external onlyOwner {\r\n\t\t// maximum defence = 90%, minimum prosperity = 10%\r\n\t\tif (kingdoms[_address].defence <= 80) {\r\n\t\t\tkingdoms[_address].defence += 10;\r\n\t\t\tkingdoms[_address].prosperity -= 10;\r\n\t\t}\r\n    }\t\r\n\r\n    function getTributeValue(address _address) public view returns(uint) {\r\n\t\tuint numberOfCitizens = getCitizensNumber(_address);\r\n\t\tif (numberOfCitizens > 0) {\r\n\t\t\t// one citizen gives tribute equal kingdom prosperity, per 7 days;\r\n\t\t\treturn numberOfCitizens.mul(getProsperity(_address)).mul(block.timestamp.sub(getTributeCheckpoint(_address))).div(7 days).sub(getLostCoins(_address)); \r\n\t\t}\r\n\t\treturn 0;\r\n    }\t\r\n\r\n    function getProsperity(address _address) public view returns(uint) {\r\n\t\treturn kingdoms[_address].prosperity;\r\n    }\r\n\t\r\n    function getDefence(address _address) public view returns(uint) {\r\n\t\treturn kingdoms[_address].defence;\r\n    }\t\r\n    function getLostCoins(address _address) public view returns(uint) {\r\n\t\treturn kingdoms[_address].lostCoins;\r\n    }\t\r\n\r\n    function getCitizensNumber(address _address) public view returns(uint) {\r\n        return kingdoms[_address].numberOfCitizens;\r\n    }\r\n\r\n    function getWarriorsNumber(address _address) public view returns(uint) {\r\n        return kingdoms[_address].numberOfWarriors;\r\n    }\r\n\t\r\n    function getTributeCheckpoint(address _address) public view returns(uint) {\r\n        return kingdoms[_address].tributeCheckpoint;\r\n    }\r\n\r\n    function getKingdomAddress(uint _kingdomId) external view returns(address) {\r\n        return kingdomAddress[_kingdomId];\r\n    }\r\n\t\r\n\tfunction kingdomsCount() external view returns(uint) {\r\n        return _kingdomsCount;\r\n    }\r\n}\r\n\r\ncontract GreenRabbitKingdom is IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    address admin;\r\n\r\n    uint invested;\r\n    uint payed;\r\n    uint startTime;\r\n\tuint tokenStartPrice;\r\n\t\r\n\tstring public name = 'GreenRabbitCoin';\r\n\tstring public symbol = 'GRC';\r\n\tuint public decimals = 0;\r\n\t\r\n    event LogNewGame(uint _startTime);\r\n\t\r\n    KingdomStorage private kingdom;\r\n\r\n    modifier notOnPause() {\r\n        require(startTime <= block.timestamp, \"Game paused\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        kingdom = new KingdomStorage();\r\n        startTime = now;\r\n\t\ttokenStartPrice = 1 szabo; //0.000001 ETH\r\n    }\r\n \r\n    function() external payable {\r\n        if (msg.value == 0 && msg.value <= 0.00001 ether) {\r\n            sellTokens();\r\n        } else if (msg.value == 0.000111 ether) {\r\n\t\t\t//add citizens, not warriors\r\n            addCitizens(false);\r\n        } else if (msg.value == 0.000222 ether) {\r\n\t\t\t//add warriors\r\n            addCitizens(true);\r\n        } else if (msg.value == 0.000333 ether) {\r\n            increaseProsperity();\r\n        } else if (msg.value == 0.000444 ether) {\r\n            increaseDefence();\r\n\t\t} else {            \r\n\t\t\tbuyTokens();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 function\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return kingdom.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 function\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n\t\t// get tribute from your citizens before\r\n\t\tkingdom.getTribute(msg.sender);\r\n        return kingdom.transfer(msg.sender, to, value);\r\n    }\t\r\n\r\n    /**\r\n     * @dev ERC20 function\r\n     */\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n        return kingdom.balanceOf(owner);\r\n    }\r\n\t\r\n    function buyTokens() notOnPause public payable {\r\n\t\trequire (msg.value >= 0.001 ether);\r\n\t\tuint tokensValue = msg.value.div(getTokenSellPrice()).mul(90).div(100);\r\n\t\tkingdom.mint(msg.sender, tokensValue);\r\n\t\tadmin.send(msg.value / 20); //5%\r\n\t\temit Transfer(address(0), msg.sender, tokensValue);\r\n    }\r\n\r\n    function sellTokens() notOnPause public {\r\n\t\t// get tribute from your citizens before\r\n\t\tkingdom.getTribute(msg.sender);\r\n\t\t\r\n        uint tokensValue = balanceOf(msg.sender); \r\n\t\tuint payout = tokensValue.mul(getTokenSellPrice());\r\n\r\n        if (payout > 0) {\r\n\r\n            if (payout > address(this).balance) {\r\n\t\t\t\tmsg.sender.transfer(address(this).balance);\r\n                nextGame();\r\n                return;\r\n            }\r\n\r\n            msg.sender.transfer(payout);\r\n\t\t\t\r\n\t\t\tkingdom.burn(msg.sender, tokensValue);\r\n\t\t\temit Transfer(msg.sender, address(0), tokensValue);\r\n        }\t\t\r\n    }\r\n\t\r\n\tfunction addCitizens(bool _are_warriors) notOnPause public {\r\n\t\t// get tribute from your citizens before adding new citizens\r\n\t\tkingdom.getTribute(msg.sender);\r\n\t\t\r\n\t\tuint CitizensNumber = balanceOf(msg.sender).div(100);\r\n\t\tif (CitizensNumber > 0) {\r\n\t\t\tkingdom.addCitizens(msg.sender,CitizensNumber,_are_warriors);\r\n\t\t\tkingdom.burn(msg.sender, CitizensNumber * 100);\r\n\t\t}\r\n\t}\r\n\t\r\n    function attackKingdom(address _invader, uint _random) notOnPause public returns(bool) {\r\n\t\t// Only for invader's smart contract:\r\n\t\t// https://etherscan.io/address/0x76d7aed5ab1c4a5e210d0ccac747d097f9d58966\r\n\t\trequire (msg.sender == 0x76d7aed5ab1c4a5e210d0ccac747d097f9d58966); \r\n\t\t\r\n\t\tuint attackedKingdomId = _random % (kingdom.kingdomsCount());\r\n\t\taddress attackedKingdomAddress = kingdom.getKingdomAddress(attackedKingdomId);\r\n\t\t\r\n\t\tif (_invader != attackedKingdomAddress) {\r\n\t\t\tkingdom.startWar(_invader, attackedKingdomAddress);\r\n\t\t} else {\r\n\t\t\t// you can't attack youself\r\n\t\t\tkingdom.warFailed(_invader);\r\n\t\t}\r\n\t\t\t\r\n        return true;\r\n    }\t\r\n\t\r\n\tfunction increaseProsperity() notOnPause public {\r\n\t\t// get tribute from your citizens before\r\n\t\tkingdom.getTribute(msg.sender);\r\n\t\tkingdom.increaseProsperity(msg.sender);\r\n\t}\r\n\t\r\n\tfunction increaseDefence() notOnPause public {\r\n\t\t// get tribute from your citizens before\r\n\t\tkingdom.getTribute(msg.sender);\t\t\r\n\t\tkingdom.increaseDefence(msg.sender);\r\n\t}\r\n\t\r\n\tfunction synchronizeTokensBalance() notOnPause public {\r\n\t\t// get tribute from your citizens \r\n\t\t// for release real tokens that you can see them in your ERC-20 wallet \r\n\t\tkingdom.getTribute(msg.sender);\t\t\r\n\t}\t\r\n\t\r\n\tfunction getTokenSellPrice() public view returns(uint) {\r\n\t\t//each day +1% to token price\r\n\t\treturn tokenStartPrice.add( tokenStartPrice.div(100).mul(block.timestamp.sub(startTime).div(1 days)) );\r\n\t}\r\n\r\n    function getGameAge() external view returns(uint) {\r\n\t\tif (block.timestamp > startTime)\r\n\t\t\treturn block.timestamp.sub(startTime).div(1 days).add(1);\r\n\t\telse \r\n\t\t\treturn 0;\r\n    }\r\n\t\r\n    function getKingdomsCount() external view returns(uint) {\r\n        return kingdom.kingdomsCount();\r\n    }\r\n\t\r\n    function getKingdomData(address _address) external view returns(uint numberOfCitizens, uint numberOfWarriors, uint prosperity, uint defence, uint balance) {\r\n\t\tnumberOfCitizens = kingdom.getCitizensNumber(_address);\r\n\t\tnumberOfWarriors = kingdom.getWarriorsNumber(_address);\r\n\t\tprosperity = kingdom.getProsperity(_address);\r\n\t\tdefence = kingdom.getDefence(_address);\r\n\t\tbalance = kingdom.getTributeValue(_address) + balanceOf(_address);\r\n    }\t\r\n\r\n    function getBalance() external view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function nextGame() private {\r\n        kingdom = new KingdomStorage();\r\n        startTime = block.timestamp + 3 days;\r\n        emit LogNewGame(startTime);\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_are_warriors\",\"type\":\"bool\"}],\"name\":\"addCitizens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getKingdomData\",\"outputs\":[{\"name\":\"numberOfCitizens\",\"type\":\"uint256\"},{\"name\":\"numberOfWarriors\",\"type\":\"uint256\"},{\"name\":\"prosperity\",\"type\":\"uint256\"},{\"name\":\"defence\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseDefence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_invader\",\"type\":\"address\"},{\"name\":\"_random\",\"type\":\"uint256\"}],\"name\":\"attackKingdom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKingdomsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseProsperity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"synchronizeTokensBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"LogNewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GreenRabbitKingdom","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://09526377769d0d37f80c2a4c0e700e5e35b5f2ff179c33cb3a3e94e4304f1694"}]}