{"status":"1","message":"OK","result":[{"SourceCode":"contract ProxyData {\r\n    address internal proxied;\r\n}\r\n\r\ncontract Proxy is ProxyData {\r\n    constructor(address _proxied) public {\r\n        proxied = _proxied;\r\n}\r\n\r\nfunction () external payable {\r\n    address addr = proxied;\r\n    assembly {\r\n        let freememstart := mload(0x40)\r\n        calldatacopy(freememstart, 0, calldatasize())\r\n        let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\r\n        returndatacopy(freememstart, 0, returndatasize())\r\n        switch success\r\n            case 0 { revert(freememstart, returndatasize()) }\r\n            default { return(freememstart, returndatasize()) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract UniswapFactoryInterface {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\ncontract FundHeader {\r\n    address constant internal cEth = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    UniswapFactoryInterface constant internal uniswapFactory = UniswapFactoryInterface(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n}\r\n\r\ncontract FundDataInternal is ProxyData, FundHeader {\r\n    address internal collateralOwner;\r\n    address internal interestWithdrawer;\r\n    // cTokenAddress -> sum deposits denominated in underlying\r\n    mapping(address => uint) internal initialDepositCollateral;\r\n    // cTokenAddresses\r\n    address[] internal markets;\r\n}\r\n\r\ncontract CERC20NoBorrowInterface {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    address public underlying;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FundProxy is Proxy, FundDataInternal {\r\n    constructor(\r\n        address proxied,\r\n        address _collateralOwner,\r\n        address _interestWithdrawer,\r\n        address[] memory _markets\r\n    )\r\n    public\r\n    Proxy(proxied)\r\n    {\r\n        for (uint i=0; i < _markets.length; i++) {\r\n            markets.push(_markets[i]);\r\n            if (_markets[i] == cEth) {\r\n                continue;\r\n            }\r\n            address underlying = CERC20NoBorrowInterface(_markets[i]).underlying();\r\n            require(IERC20(underlying).approve(_markets[i], uint(-1)));\r\n            require(IERC20(underlying).approve(uniswapFactory.getExchange(underlying), uint(-1)));\r\n        }\r\n            collateralOwner = _collateralOwner;\r\n            interestWithdrawer = _interestWithdrawer;\r\n    }\r\n\r\n}\r\n\r\ncontract FundFactory {\r\n    address private implementation;\r\n    event NewFundCreated(address indexed collateralOwner, address proxyAddress);\r\n\r\n    constructor(address _implementation) public {\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function createFund(address _interestWithdrawer, address[] calldata _markets)\r\n    external\r\n    {\r\n        emit NewFundCreated(\r\n                msg.sender,\r\n                address(new FundProxy(address(implementation), msg.sender, _interestWithdrawer, _markets))\r\n            );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_interestWithdrawer\",\"type\":\"address\"},{\"name\":\"_markets\",\"type\":\"address[]\"}],\"name\":\"createFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"collateralOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"NewFundCreated\",\"type\":\"event\"}]","ContractName":"FundFactory","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f2a25ea7b8c600a56bc4bf46a70390aea1dc0315","Library":"","SwarmSource":"bzzr://bc29506dac01ea4f53a2d753d33269fc41340f8428a14b2ebb3163c6ba3d307d"}]}