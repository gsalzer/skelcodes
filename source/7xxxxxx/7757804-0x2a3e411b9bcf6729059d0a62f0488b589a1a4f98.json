{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract Bussiness is Ownable {\r\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\r\n    IERC721 public erc721Address = IERC721(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);\r\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\r\n    uint256 public ETHFee = 0; // 25 = 2,5 %\r\n    uint256 public Percen = 1000;\r\n    uint256 public HBWALLETExchange = 21;\r\n    // cong thuc hbFee = ETHFee / Percen * HBWALLETExchange / 2\r\n    uint256 public limitETHFee = 0;\r\n    uint256 public limitHBWALLETFee = 0;\r\n    uint256 public hightLightFee = 10000000000000000;\r\n    constructor() public {}\r\n    struct Price {\r\n        address payable tokenOwner;\r\n        uint256 price;\r\n        uint256 fee;\r\n        uint256 hbfee;\r\n        bool isHightlight;\r\n    }\r\n\r\n    uint[] public arrayTokenIdSale;\r\n    mapping(uint256 => Price) public prices;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the ceo address.\r\n     */\r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    // Move the last element to the deleted spot.\r\n    // Delete the last element, then correct the length.\r\n    function _burnArrayTokenIdSale(uint index)  internal {\r\n        if (index >= arrayTokenIdSale.length) return;\r\n\r\n        for (uint i = index; i<arrayTokenIdSale.length-1; i++){\r\n            arrayTokenIdSale[i] = arrayTokenIdSale[i+1];\r\n        }\r\n        delete arrayTokenIdSale[arrayTokenIdSale.length-1];\r\n        arrayTokenIdSale.length--;\r\n    }\r\n    \r\n    function _burnArrayTokenIdSaleByArr(uint[] memory arr) internal {\r\n        for(uint i; i<arr.length; i++){\r\n            _burnArrayTokenIdSale(i);\r\n        }\r\n       \r\n    }\r\n    function ownerOf(uint256 _tokenId) public view returns (address){\r\n        return erc721Address.ownerOf(_tokenId);\r\n    }\r\n\r\n    function balanceOf() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address){\r\n        return erc721Address.getApproved(_tokenId);\r\n    }\r\n\r\n    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {\r\n        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);\r\n        arrayTokenIdSale.push(_tokenId);\r\n    }\r\n\r\n    function setPriceFeeEth(uint256 _tokenId, uint256 _ethPrice, bool _isHightLight) public payable {\r\n        require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\r\n        uint256 ethfee;\r\n        uint256 _hightLightFee = 0;\r\n        if (_isHightLight == true && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\r\n            _hightLightFee = hightLightFee;\r\n        }\r\n        if (prices[_tokenId].price < _ethPrice) {\r\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\r\n            if(prices[_tokenId].price == 0) {\r\n                if (ethfee >= limitETHFee) {\r\n                    require(msg.value == ethfee + _hightLightFee);\r\n                } else {\r\n                    require(msg.value == limitETHFee + _hightLightFee);\r\n                    ethfee = limitETHFee;\r\n                }\r\n            }\r\n            ethfee += prices[_tokenId].fee;\r\n        } else ethfee = _ethPrice * ETHFee / Percen;\r\n\r\n        setPrice(_tokenId, _ethPrice, ethfee, 0, _isHightLight);\r\n    }\r\n\r\n    function setPriceFeeHBWALLET(uint256 _tokenId, uint256 _ethPrice, bool _isHightLight) public returns (bool){\r\n        require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\r\n        uint256 fee;\r\n        uint256 ethfee;\r\n        uint256 _hightLightFee = 0;\r\n        if (_isHightLight == true && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\r\n            _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\r\n        }\r\n        if (prices[_tokenId].price < _ethPrice) {\r\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\r\n            fee = ethfee * HBWALLETExchange / 2 / (10 ** 16);\r\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\r\n            if(prices[_tokenId].price == 0) {\r\n                if (fee >= limitHBWALLETFee) {\r\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), fee + _hightLightFee));\r\n                } else {\r\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), limitHBWALLETFee + _hightLightFee));\r\n                    fee = limitHBWALLETFee;\r\n                }\r\n            }\r\n            fee += prices[_tokenId].hbfee;\r\n        } else {\r\n            ethfee = _ethPrice * ETHFee / Percen;\r\n            fee = ethfee * HBWALLETExchange / 2 / (10 ** 16);\r\n        }\r\n\r\n        setPrice(_tokenId, _ethPrice, 0, fee, _isHightLight);\r\n        return true;\r\n    }\r\n\r\n    function removePrice(uint256 tokenId) public returns (uint256){\r\n        require(erc721Address.ownerOf(tokenId) == msg.sender);\r\n        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);\r\n        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);\r\n        resetPrice(tokenId);\r\n        return prices[tokenId].price;\r\n    }\r\n\r\n    function setFee(uint256 _ethFee, uint256 _HBWALLETExchange, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256){\r\n        require(_ethFee >= 0 && _HBWALLETExchange >= 1 && _hightLightFee >= 0);\r\n        ETHFee = _ethFee;\r\n        HBWALLETExchange = _HBWALLETExchange;\r\n        hightLightFee = _hightLightFee;\r\n        return (ETHFee, HBWALLETExchange, hightLightFee);\r\n    }\r\n\r\n    function setLimitFee(uint256 _ethlimitFee, uint256 _hbWalletlimitFee) public onlyOwner returns (uint256, uint256){\r\n        require(_ethlimitFee >= 0 && _hbWalletlimitFee >= 0);\r\n        limitETHFee = _ethlimitFee;\r\n        limitHBWALLETFee = _hbWalletlimitFee;\r\n        return (limitETHFee, limitHBWALLETFee);\r\n    }\r\n    /**\r\n     * @dev Withdraw the amount of eth that is remaining in this contract.\r\n     * @param _address The address of EOA that can receive token from this contract.\r\n     */\r\n    function _withdraw(address payable _address, uint256 amount, uint256 _amountHB) internal {\r\n        require(_address != address(0) && amount >= 0 && address(this).balance >= amount && _amountHB >= 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);\r\n        _address.transfer(amount);\r\n        hbwalletToken.transferFrom(address(this), _address, _amountHB);\r\n    }\r\n    function withdraw(address payable _address, uint256 amount, uint256 _amountHB) public onlyCeoAddress {\r\n        _withdraw(_address, amount, _amountHB);\r\n    }\r\n    function cancelBussiness() public onlyCeoAddress {\r\n        for (uint i = 0; i < arrayTokenIdSale.length; i++) {\r\n            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {\r\n                if (prices[arrayTokenIdSale[i]].fee > 0) {\r\n                    uint256 eth = prices[arrayTokenIdSale[i]].fee;\r\n                    if(prices[arrayTokenIdSale[i]].isHightlight == true) eth += hightLightFee;\r\n                    if(address(this).balance >= eth) {\r\n                        prices[arrayTokenIdSale[i]].tokenOwner.transfer(eth);\r\n                    } \r\n                }\r\n                else if (prices[arrayTokenIdSale[i]].hbfee > 0) {\r\n                    uint256 hb = prices[arrayTokenIdSale[i]].hbfee;\r\n                    if(prices[arrayTokenIdSale[i]].isHightlight == true) hb += hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\r\n                    if(hbwalletToken.balanceOf(address(this)) >= hb) {\r\n                        hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, hb);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _withdraw(msg.sender, address(this).balance, hbwalletToken.balanceOf(address(this)));\r\n    }\r\n    \r\n    function revenue(bool _isEth) public view onlyCeoAddress returns (uint256){\r\n        uint256 ethfee = 0;\r\n        uint256 hbfee = 0;\r\n        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {\r\n            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {\r\n                if (prices[arrayTokenIdSale[i]].fee > 0) {\r\n                    ethfee += prices[arrayTokenIdSale[i]].fee;\r\n                }\r\n                else if (prices[arrayTokenIdSale[i]].hbfee > 0) {\r\n                    hbfee += prices[arrayTokenIdSale[i]].hbfee;\r\n                }\r\n            }\r\n        }\r\n        uint256 eth = address(this).balance - ethfee;\r\n        uint256 hb = hbwalletToken.balanceOf(address(this)) - hbfee;\r\n        return _isEth ? eth : hb;\r\n    }\r\n    \r\n    function changeCeo(address _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n\r\n    }\r\n\r\n    function buy(uint256 tokenId) public payable {\r\n        require(getApproved(tokenId) == address(this));\r\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\r\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\r\n        prices[tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(tokenId);\r\n    }\r\n\r\n    function buyWithoutCheckApproved(uint256 tokenId) public payable {\r\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\r\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\r\n        prices[tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(tokenId);\r\n    }\r\n\r\n    function resetPrice(uint256 tokenId) private {\r\n        prices[tokenId] = Price(address(0), 0, 0, 0, false);\r\n        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {\r\n            if (arrayTokenIdSale[i] == tokenId) {\r\n                _burnArrayTokenIdSale(i);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hightLightFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitHBWALLETFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HBWALLETExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"name\":\"_HBWALLETExchange\",\"type\":\"uint256\"},{\"name\":\"_hightLightFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"bool\"}],\"name\":\"setPriceFeeHBWALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Percen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayTokenIdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyWithoutCheckApproved\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethlimitFee\",\"type\":\"uint256\"},{\"name\":\"_hbWalletlimitFee\",\"type\":\"uint256\"}],\"name\":\"setLimitFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_isHightLight\",\"type\":\"bool\"}],\"name\":\"setPriceFeeEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_amountHB\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"hbfee\",\"type\":\"uint256\"},{\"name\":\"isHightlight\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelBussiness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isEth\",\"type\":\"bool\"}],\"name\":\"revenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitETHFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hbwalletToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bussiness","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52a8e03953b3e1217fafa191cee2fbe7e4c11b8a98a92e038b5735c534a5b0e5"}]}