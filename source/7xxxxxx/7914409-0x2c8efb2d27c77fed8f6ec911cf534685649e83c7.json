{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title Opyns's FactoryStorage Contract\r\n * @notice Stores contract, user, exchange, and token data. Deploys FactoryLogic.\r\n * @author Opyn, Aparna Krishnan and Zubin Koticha\r\n */\r\ncontract FactoryStorage {\r\n\r\n    //TODO: add more events\r\n\r\n    event NewPositionContract(\r\n        address userAddress,\r\n        address newPositionContractAddress,\r\n        address factoryLogicAddress\r\n    );\r\n\r\n    event NewTokenAddedToPositionContract(\r\n        string ticker,\r\n        address tokenAddr,\r\n        address cTokenAddr,\r\n        address exchangeAddr\r\n    );\r\n\r\n    event UserAdded(\r\n        address userAddr\r\n    );\r\n\r\n    event TickerAdded(\r\n        string ticker\r\n    );\r\n\r\n    event FactoryLogicChanged(\r\n        address factoryLogicAddr\r\n    );\r\n\r\n    //maybe the name positionContractAddresses is better?!\r\n    //ticker => userAddr => positionContractAddr\r\n    //e.g. ticker = 'REP'\r\n    mapping (string => mapping (address => address)) public positionContracts;\r\n\r\n    /**\r\n    * @notice the following give the ERC20 token address, ctoken, and Uniswap Exchange for a given token ticker symbol.\r\n    * e.g tokenAddresses('REP') => 0x1a...\r\n    * e.g ctokenAddresses('REP') => 0x51...\r\n    * e.g exchangeAddresses('REP') => 0x9a...\r\n    */\r\n    mapping (string => address) public tokenAddresses;\r\n    mapping (string => address) public ctokenAddresses;\r\n    mapping (string => address) public exchangeAddresses;\r\n\r\n    //TODO: think about - using CarefulMath for uint;\r\n\r\n    address public factoryLogicAddress;\r\n\r\n    /**\r\n    * @notice The array of owners with write privileges.\r\n    */\r\n    address[3] public ownerAddresses;\r\n\r\n    /**\r\n    * @notice The array of all users with contracts.\r\n    */\r\n    address[] public userAddresses;\r\n    string[] public tickers;\r\n\r\n    /**\r\n    * @notice These mappings act as sets to see if a key is in string[] public tokens or address[] public userAddresses\r\n    */\r\n    mapping (address => bool) public userAddressesSet;\r\n    mapping (string => bool) public tickerSet;\r\n\r\n    /**\r\n    * @notice Constructs a new FactoryStorage\r\n    * @param owner1 The second owner (after msg.sender)\r\n    * @param owner2 The third owner (after msg.sender)\r\n    */\r\n    constructor(address owner1, address owner2) public {\r\n        //TODO: deal with keys and ownership\r\n        ownerAddresses[0] = msg.sender;\r\n        ownerAddresses[1] = owner1;\r\n        ownerAddresses[2] = owner2;\r\n\r\n        tickers = ['DAI','ZRX','BAT','ETH'];\r\n        tickerSet['DAI'] = true;\r\n        tickerSet['ZRX'] = true;\r\n        tickerSet['BAT'] = true;\r\n        tickerSet['ETH'] = true;\r\n\r\n        //TODO: ensure all the following are accurate for mainnet.\r\n        tokenAddresses['DAI'] = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n        tokenAddresses['BAT'] = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF;\r\n        tokenAddresses['ZRX'] = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\r\n        tokenAddresses['REP'] = 0x1985365e9f78359a9B6AD760e32412f4a445E862;\r\n\r\n        ctokenAddresses['DAI'] = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n        ctokenAddresses['BAT'] = 0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E;\r\n        ctokenAddresses['ZRX'] = 0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407;\r\n        ctokenAddresses['REP'] = 0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1;\r\n        ctokenAddresses['ETH'] = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n        exchangeAddresses['DAI'] = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n        exchangeAddresses['BAT'] = 0x2E642b8D59B45a1D8c5aEf716A84FF44ea665914;\r\n        exchangeAddresses['ZRX'] = 0xaE76c84C9262Cdb9abc0C2c8888e62Db8E22A0bF;\r\n        exchangeAddresses['REP'] = 0x48B04d2A05B6B604d8d5223Fd1984f191DED51af;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a FactoryLogic contract that this contract interacts with, this clause is responsibility for upgradeability.\r\n    * @param newAddress the address of the new FactoryLogic contract\r\n    */\r\n    function setFactoryLogicAddress(address newAddress) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        //TODO: better security practices required than the above\r\n        factoryLogicAddress = newAddress;\r\n        emit FactoryLogicChanged(newAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice Adds a new user to the userAddresses array.\r\n    * @param newAddress the address of the new user\r\n    */\r\n    function addUser(address newAddress) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        //TODO: ensure that this is how it works.\r\n        if (!userAddressesSet[newAddress]) {\r\n            userAddresses.push(newAddress);\r\n            userAddressesSet[newAddress] = true;\r\n            emit UserAdded(newAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @notice Adds a new token to the tokens array.\r\n   * @param ticker ticker symbol of the new token\r\n   */\r\n    function addTicker(string memory ticker) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        //TODO: ensure that this is how it works.\r\n        if (!tickerSet[ticker]) {\r\n            tickers.push(ticker);\r\n            tickerSet[ticker] = true;\r\n            emit TickerAdded(ticker);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the newAddress of a ticker in the tokenAddresses array.\r\n    * @param ticker string ticker symbol of the new token being added\r\n    * @param newAddress the new address of the token\r\n    */\r\n    function updateTokenAddress(string memory ticker, address newAddress) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        tokenAddresses[ticker] = newAddress;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the newAddress of a ticker in the ctokenAddresses array.\r\n    * @param newAddress the address of the ctoken\r\n    */\r\n    function updatecTokenAddress(string memory ticker, address newAddress) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        ctokenAddresses[ticker] = newAddress;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the newAddress of a position contract, this clause is responsibility for upgradeability.\r\n    * @param newAddress the address of the new FactoryLogic contract\r\n    */\r\n    function updateExchangeAddress(string memory ticker, address newAddress) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        exchangeAddresses[ticker] = newAddress;\r\n    }\r\n\r\n    //  TODO: proper solidity style for following function\r\n    /**\r\n    * @notice Sets the newAddress of a position contract, this clause is responsibility for upgradeability.\r\n    * @param ticker the ticker symbol for this new token\r\n    * @param tokenAddr the address of the token\r\n    * @param cTokenAddr the address of the cToken\r\n    * @param exchangeAddr the address of the particular DEX pair\r\n    */\r\n    function addNewTokenToPositionContracts(string memory ticker, address tokenAddr, address cTokenAddr, address exchangeAddr) public {\r\n        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);\r\n        //TODO: do we want to first ensure ticker not already there?!\r\n        tokenAddresses[ticker] = tokenAddr;\r\n        ctokenAddresses[ticker] = cTokenAddr;\r\n        exchangeAddresses[ticker] = exchangeAddr;\r\n        emit NewTokenAddedToPositionContract(ticker, tokenAddr, cTokenAddr, exchangeAddr);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the newAddress of a position contract, this clause is responsibility for upgradeability.\r\n    * @param ticker the ticker symbol that this PositionContract corresponds to\r\n    * @param userAddress the address of the user creating this PositionContract\r\n    * @param newContractAddress the address of the new position contract\r\n    */\r\n    function addNewPositionContract(string memory ticker, address userAddress, address newContractAddress) public {\r\n        //TODO: ensure userAddress has been added and ticker is valid.\r\n        require(factoryLogicAddress == msg.sender);\r\n        positionContracts[ticker][userAddress] = newContractAddress;\r\n        addUser(userAddress);\r\n        //TODO: shouldn't the following event include the ticker?\r\n        emit NewPositionContract(userAddress, newContractAddress, msg.sender);\r\n    }\r\n    \r\n    function updateRootAddr(address newAddress) public{\r\n        if(ownerAddresses[0] == msg.sender){\r\n            ownerAddresses[0] = newAddress;\r\n        } else if (ownerAddresses[1] == msg.sender) {\r\n            ownerAddresses[1] = newAddress;\r\n        } else if (ownerAddresses[2] == msg.sender) {\r\n            ownerAddresses[2] = newAddress;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAddressesSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateExchangeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setFactoryLogicAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryLogicAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"addTicker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"tickerSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRootAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"name\":\"exchangeAddr\",\"type\":\"address\"}],\"name\":\"addNewTokenToPositionContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatecTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"exchangeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"addNewPositionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"ctokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner1\",\"type\":\"address\"},{\"name\":\"owner2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPositionContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"factoryLogicAddress\",\"type\":\"address\"}],\"name\":\"NewPositionContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticker\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exchangeAddr\",\"type\":\"address\"}],\"name\":\"NewTokenAddedToPositionContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"TickerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factoryLogicAddr\",\"type\":\"address\"}],\"name\":\"FactoryLogicChanged\",\"type\":\"event\"}]","ContractName":"FactoryStorage","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c76c5b20505b65d14a150b0b8d3e5cef889313e500000000000000000000000075b379238868ebb577ce9888524d3cd71ee4b236","Library":"","SwarmSource":"bzzr://0e252f5aa19a517dea6b585d39d9ce42154f4fe75cdd14f96cdc5f7f7666195b"}]}