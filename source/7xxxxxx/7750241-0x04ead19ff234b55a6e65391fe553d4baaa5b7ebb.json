{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath\r\n{\r\n  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    \t{\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\r\n\t\treturn c;\r\n  \t}\r\n\r\n  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n  \t}\r\n\r\n  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tassert(b <= a);\r\n\r\n\t\treturn a - b;\r\n  \t}\r\n\r\n  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\r\n\t\treturn c;\r\n  \t}\r\n}\r\n\r\ncontract OwnerHelper\r\n{\r\n  \taddress public master;\r\n  \taddress public owner1;\r\n  \taddress public owner2;\r\n  \t\r\n  \taddress public targetAddress;\r\n  \tuint public targetOwner;\r\n    mapping (address => bool) public targetTransferOwnership;\r\n\r\n  \tevent ChangeOwnerSuggest(address indexed _from, address indexed _to, uint indexed _num);\r\n\r\n  \tmodifier onlyOwner\r\n\t{\r\n\t\trequire(msg.sender == owner1 ||msg.sender == owner2);\r\n\t\t_;\r\n  \t}\r\n  \t\r\n  \tmodifier onlyMaster\r\n  \t{\r\n  \t    require(msg.sender == master);\r\n  \t    _;\r\n  \t}\r\n  \t\r\n  \tconstructor() public\r\n\t{\r\n\t\tmaster = msg.sender;\r\n  \t}\r\n  \t\r\n  \tfunction changeOwnership1(address _to) onlyMaster public\r\n  \t{\r\n  \t    require(_to != address(0x0));\r\n\r\n  \t    owner1 = _to;\r\n  \t}\r\n  \t\r\n  \tfunction changeOwnership2(address _to) onlyMaster public\r\n  \t{\r\n  \t    require(_to != address(0x0));\r\n  \t    \r\n  \t    owner2 = _to;\r\n  \t}\r\n}\r\n\r\ncontract ERC20Interface\r\n{\r\n    event Transfer( address indexed _from, address indexed _to, uint _value);\r\n    event Approval( address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    function totalSupply() view public returns (uint _supply);\r\n    function balanceOf( address _who ) public view returns (uint _value);\r\n    function transfer( address _to, uint _value) public returns (bool _success);\r\n    function approve( address _spender, uint _value ) public returns (bool _success);\r\n    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\r\n    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\r\n}\r\n\r\ncontract ITAMToken is ERC20Interface, OwnerHelper\r\n{\r\n    using SafeMath for uint;\r\n    \r\n    string public name;\r\n    uint public decimals;\r\n    string public symbol;\r\n    \r\n    uint constant private E18 = 1000000000000000000;\r\n    uint constant private month = 2592000;\r\n    \r\n    // Total                                        2,500,000,000\r\n    uint constant public maxTotalSupply =           2500000000 * E18;\r\n    \r\n    // Advisor & Early Supporters                   125,000,000 (5%)\r\n    // - Vesting 3 month 2 times\r\n    uint constant public maxAdvSptSupply =          125000000 * E18;\r\n    \r\n    // Team & Founder                               250,000,000 (10%)\r\n    // - Vesting 6 month 3 times\r\n    uint constant public maxTeamSupply =            250000000 * E18;\r\n    \r\n    // Marketing                                    375,000,000 (15%)\r\n    // - Vesting 6 month 1 time\r\n    uint constant public maxMktSupply =             375000000 * E18;\r\n    \r\n    // ITAM Ecosystem                               750,000,000 (30%)\r\n    // - Vesting 3 month 1 time\r\n    uint constant public maxEcoSupply =             750000000 * E18;\r\n    \r\n    // Sale Supply                                  1,000,000,000 (40%)\r\n    uint constant public maxSaleSupply =            1000000000 * E18;\r\n    \r\n    // * Sale Details\r\n    // Friends and Family                           130,000,000 (5.2%)\r\n    // - Lock Monthly 20% 20% 20% 20% 20% \r\n    uint constant public maxFnFSaleSupply =         130000000 * E18;\r\n    \r\n    // Private Sale                                 345,000,000 (13.8%)\r\n    // - Lock Monthly 20% 20% 20% 20% 10% 10%\r\n    uint constant public maxPrivateSaleSupply =     345000000 * E18;\r\n    \r\n    // Public Sale                                  525,000,000 (19%)\r\n    uint constant public maxPublicSaleSupply =      525000000 * E18;\r\n    // *\r\n    \r\n    uint constant public advSptVestingSupplyPerTime = 25000000 * E18;\r\n    uint constant public advSptVestingDate = 2 * month;\r\n    uint constant public advSptVestingTime = 5;\r\n    \r\n    uint constant public teamVestingSupplyPerTime   = 12500000 * E18;\r\n    uint constant public teamVestingDelayDate = 6 * month;\r\n    uint constant public teamVestingDate = 1 * month;\r\n    uint constant public teamVestingTime = 20;\r\n    \r\n    uint constant public mktVestingSupplyFirst      = 125000000 * E18;\r\n    uint constant public mktVestingSupplyPerTime    =  25000000 * E18;\r\n    uint constant public mktVestingDate = 1 * month;\r\n    uint constant public mktVestingTime = 11;\r\n    \r\n    uint constant public ecoVestingSupplyFirst      = 250000000 * E18;\r\n    uint constant public ecoVestingSupplyPerTime    =  50000000 * E18;\r\n    uint constant public ecoVestingDate = 1 * month;\r\n    uint constant public ecoVestingTime = 11;\r\n    \r\n    uint constant public fnfSaleLockDate = 1 * month;\r\n    uint constant public fnfSaleLockTime = 5;\r\n    \r\n    uint constant public privateSaleLockDate = 1 * month;\r\n    uint constant public privateSaleLockTime = 6;\r\n    \r\n    uint public totalTokenSupply;\r\n    \r\n    uint public tokenIssuedAdvSpt;\r\n    uint public tokenIssuedTeam;\r\n    uint public tokenIssuedMkt;\r\n    uint public tokenIssuedEco;\r\n    \r\n    uint public tokenIssuedSale;\r\n    uint public fnfIssuedSale;\r\n    uint public privateIssuedSale;\r\n    uint public publicIssuedSale;\r\n    \r\n    uint public burnTokenSupply;\r\n    \r\n    mapping (address => uint) public balances;\r\n    mapping (address => mapping ( address => uint )) public approvals;\r\n    mapping (address => bool) public blackLists;\r\n    \r\n    mapping (uint => uint) public advSptVestingTimer;\r\n    mapping (uint => uint) public advSptVestingBalances;\r\n    \r\n    mapping (uint => uint) public teamVestingTimer;\r\n    mapping (uint => uint) public teamVestingBalances;\r\n    \r\n    mapping (uint => uint) public mktVestingTimer;\r\n    mapping (uint => uint) public mktVestingBalances;\r\n    \r\n    mapping (uint => uint) public ecoVestingTimer;\r\n    mapping (uint => uint) public ecoVestingBalances;\r\n    \r\n    mapping (uint => uint) public fnfLockTimer;\r\n    mapping (address => mapping ( uint => uint )) public fnfLockWallet;\r\n    \r\n    mapping (uint => uint) public privateLockTimer;\r\n    mapping (address => mapping ( uint => uint )) public privateLockWallet;\r\n    \r\n    bool public tokenLock = true;\r\n    bool public saleTime = true;\r\n    uint public endSaleTime = 0;\r\n    \r\n    event AdvSptIssue(address indexed _to, uint _tokens);\r\n    event TeamIssue(address indexed _to, uint _tokens);\r\n    event MktIssue(address indexed _to, uint _tokens);\r\n    event EcoIssue(address indexed _to, uint _tokens);\r\n    event SaleIssue(address indexed _to, uint _tokens);\r\n    \r\n    event Burn(address indexed _from, uint _value);\r\n    \r\n    event TokenUnlock(address indexed _to, uint _tokens);\r\n    event EndSale(uint _date);\r\n    \r\n    constructor() public\r\n    {\r\n        name        = \"ITAM\";\r\n        decimals    = 18;\r\n        symbol      = \"ITAM\";\r\n        \r\n        totalTokenSupply    = 0;\r\n        \r\n        tokenIssuedAdvSpt   = 0;\r\n        tokenIssuedTeam     = 0;\r\n        tokenIssuedMkt      = 0;\r\n        tokenIssuedEco      = 0;\r\n        tokenIssuedSale     = 0;\r\n        \r\n        fnfIssuedSale       = 0;\r\n        privateIssuedSale   = 0;\r\n        publicIssuedSale    = 0;\r\n\r\n        burnTokenSupply     = 0;\r\n        \r\n        require(maxAdvSptSupply == advSptVestingSupplyPerTime * advSptVestingTime, \"Invalid AdvSpt Supply\");\r\n        require(maxTeamSupply == teamVestingSupplyPerTime * teamVestingTime, \"Invalid Team Supply\");\r\n        require(maxMktSupply == mktVestingSupplyFirst + ( mktVestingSupplyPerTime * ( mktVestingTime - 1 ) ) , \"Invalid Mkt Supply\");\r\n        require(maxEcoSupply == ecoVestingSupplyFirst + ( ecoVestingSupplyPerTime * ( ecoVestingTime - 1 ) ) , \"Invalid Eco Supply\");\r\n        \r\n        uint fnfPercent = 0;\r\n        for(uint i = 0; i < fnfSaleLockTime; i++)\r\n        {\r\n            fnfPercent = fnfPercent.add(20);\r\n        }\r\n        require(100 == fnfPercent, \"Invalid FnF Percent\");\r\n        \r\n        uint privatePercent = 0;\r\n        for(uint i = 0; i < privateSaleLockTime; i++)\r\n        {\r\n            if(i <= 3)\r\n            {\r\n                privatePercent = privatePercent.add(20);\r\n            }\r\n            else\r\n            {\r\n                privatePercent = privatePercent.add(10);\r\n            }\r\n        }\r\n        require(100 == privatePercent, \"Invalid Private Percent\");\r\n        \r\n        require(maxTotalSupply == maxAdvSptSupply + maxTeamSupply + maxMktSupply + maxEcoSupply + maxSaleSupply, \"Invalid Total Supply\");\r\n        require(maxSaleSupply == maxFnFSaleSupply + maxPrivateSaleSupply + maxPublicSaleSupply, \"Invalid Sale Supply\");\r\n    }\r\n    \r\n    // ERC - 20 Interface -----\r\n\r\n    function totalSupply() view public returns (uint) \r\n    {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    function balanceOf(address _who) view public returns (uint) \r\n    {\r\n        return balances[_who];\r\n    }\r\n    \r\n    function balanceOfAll(address _who) view public returns (uint)\r\n    {\r\n        uint balance = balances[_who];\r\n        uint fnfBalances = (fnfLockWallet[_who][0] + fnfLockWallet[_who][1] + fnfLockWallet[_who][2] + fnfLockWallet[_who][3] + fnfLockWallet[_who][4]);\r\n        uint privateBalances = (privateLockWallet[_who][0] + privateLockWallet[_who][1] + privateLockWallet[_who][2] + privateLockWallet[_who][3] + privateLockWallet[_who][4] + privateLockWallet[_who][5]);\r\n        balance = balance.add(fnfBalances);\r\n        balance = balance.add(privateBalances);\r\n        \r\n        return balance;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) \r\n    {\r\n        require(isTransferable(msg.sender) == true);\r\n        require(isTransferable(_to) == true);\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool)\r\n    {\r\n        require(isTransferable(msg.sender) == true);\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        approvals[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true; \r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public returns (uint) \r\n    {\r\n        return approvals[_owner][_spender];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) \r\n    {\r\n        require(isTransferable(_from) == true);\r\n        require(isTransferable(_to) == true);\r\n        require(balances[_from] >= _value);\r\n        require(approvals[_from][msg.sender] >= _value);\r\n        \r\n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to]  = balances[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // -----\r\n    \r\n    // Vesting Function -----\r\n    \r\n    // _time : 0 ~ 4\r\n    function advSptIssue(address _to, uint _time) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < advSptVestingTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > advSptVestingTimer[_time] );\r\n        \r\n        uint tokens = advSptVestingSupplyPerTime;\r\n\r\n        require(tokens <= advSptVestingBalances[_time]);\r\n        require(tokens > 0);\r\n        require(maxAdvSptSupply >= tokenIssuedAdvSpt.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        advSptVestingBalances[_time] = 0;\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedAdvSpt = tokenIssuedAdvSpt.add(tokens);\r\n        \r\n        emit AdvSptIssue(_to, tokens);\r\n    }\r\n    \r\n    // _time : 0 ~ 19\r\n    function teamIssue(address _to, uint _time) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < teamVestingTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > teamVestingTimer[_time] );\r\n        \r\n        uint tokens = teamVestingSupplyPerTime;\r\n\r\n        require(tokens <= teamVestingBalances[_time]);\r\n        require(tokens > 0);\r\n        require(maxTeamSupply >= tokenIssuedTeam.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        teamVestingBalances[_time] = 0;\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedTeam = tokenIssuedTeam.add(tokens);\r\n        \r\n        emit TeamIssue(_to, tokens);\r\n    }\r\n    \r\n    // _time : 0 ~ 10\r\n    function mktIssue(address _to, uint _time, uint _value) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < mktVestingTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > mktVestingTimer[_time] );\r\n        \r\n        uint tokens = _value * E18;\r\n\r\n        require(tokens <= mktVestingBalances[_time]);\r\n        require(tokens > 0);\r\n        require(maxMktSupply >= tokenIssuedMkt.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        mktVestingBalances[_time] = mktVestingBalances[_time].sub(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedMkt = tokenIssuedMkt.add(tokens);\r\n        \r\n        emit MktIssue(_to, tokens);\r\n    }\r\n    \r\n    // _time : 0 ~ 10\r\n    function ecoIssue(address _to, uint _time, uint _value) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < ecoVestingTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > ecoVestingTimer[_time] );\r\n        \r\n        uint tokens = _value * E18;\r\n\r\n        require(tokens <= ecoVestingBalances[_time]);\r\n        require(tokens > 0);\r\n        require(maxEcoSupply >= tokenIssuedEco.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        ecoVestingBalances[_time] = ecoVestingBalances[_time].sub(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedEco = tokenIssuedEco.add(tokens);\r\n        \r\n        emit EcoIssue(_to, tokens);\r\n    }\r\n    \r\n    // Sale Function -----\r\n    \r\n    function fnfSaleIssue(address _to, uint _value) onlyOwner public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxSaleSupply >= tokenIssuedSale.add(tokens));\r\n        require(maxFnFSaleSupply >= fnfIssuedSale.add(tokens));\r\n        require(tokens > 0);\r\n        \r\n        for(uint i = 0; i < fnfSaleLockTime; i++)\r\n        {\r\n            uint lockTokens = tokens.mul(20) / 100;\r\n            fnfLockWallet[_to][i] = lockTokens;\r\n        }\r\n        \r\n        balances[_to] = balances[_to].add(fnfLockWallet[_to][0]);\r\n        fnfLockWallet[_to][0] = 0;\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedSale = tokenIssuedSale.add(tokens);\r\n        fnfIssuedSale = fnfIssuedSale.add(tokens);\r\n        \r\n        emit SaleIssue(_to, tokens);\r\n    }\r\n    \r\n    // _time : 1 ~ 4\r\n    function fnfSaleUnlock(address _to, uint _time) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < fnfSaleLockTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > fnfLockTimer[_time] );\r\n        \r\n        uint tokens = fnfLockWallet[_to][_time];\r\n        require(tokens > 0);\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        fnfLockWallet[_to][_time] = 0;\r\n        \r\n        emit TokenUnlock(_to, tokens);\r\n    }\r\n    \r\n    function privateSaleIssue(address _to, uint _value) onlyOwner public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxSaleSupply >= tokenIssuedSale.add(tokens));\r\n        require(maxPrivateSaleSupply >= privateIssuedSale.add(tokens));\r\n        require(tokens > 0);\r\n        \r\n        for(uint i = 0; i < privateSaleLockTime; i++)\r\n        {\r\n            uint lockPer = 20;\r\n            if(i >= 4)\r\n            {\r\n                lockPer = 10;\r\n            }\r\n            uint lockTokens = tokens.mul(lockPer) / 100;\r\n            privateLockWallet[_to][i] = lockTokens;\r\n        }\r\n        \r\n        balances[_to] = balances[_to].add(privateLockWallet[_to][0]);\r\n        privateLockWallet[_to][0] = 0;\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedSale = tokenIssuedSale.add(tokens);\r\n        privateIssuedSale = privateIssuedSale.add(tokens);\r\n        \r\n        emit SaleIssue(_to, tokens);\r\n    }\r\n    \r\n    // _time : 1 ~ 5\r\n    function privateSaleUnlock(address _to, uint _time) onlyOwner public\r\n    {\r\n        require(saleTime == false);\r\n        require( _time < privateSaleLockTime);\r\n        \r\n        uint nowTime = now;\r\n        require( nowTime > privateLockTimer[_time] );\r\n        \r\n        uint tokens = privateLockWallet[_to][_time];\r\n        require(tokens > 0);\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        privateLockWallet[_to][_time] = 0;\r\n        \r\n        emit TokenUnlock(_to, tokens);\r\n    }\r\n    \r\n    function publicSaleIssue(address _to, uint _value) onlyOwner public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxSaleSupply >= tokenIssuedSale.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedSale = tokenIssuedSale.add(tokens);\r\n        publicIssuedSale = publicIssuedSale.add(tokens);\r\n        \r\n        emit SaleIssue(_to, tokens);\r\n    }\r\n    \r\n    // -----\r\n    \r\n    // Lock Function -----\r\n    \r\n    function isTransferable(address _who) private view returns (bool)\r\n    {\r\n        if(blackLists[_who] == true)\r\n        {\r\n            return false;\r\n        }\r\n        if(tokenLock == false)\r\n        {\r\n            return true;\r\n        }\r\n        else if(msg.sender == owner1 || msg.sender == owner2)\r\n        {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function setTokenUnlock() onlyOwner public\r\n    {\r\n        require(tokenLock == true);\r\n        require(saleTime == false);\r\n        \r\n        tokenLock = false;\r\n    }\r\n    \r\n    function setTokenLock() onlyOwner public\r\n    {\r\n        require(tokenLock == false);\r\n        \r\n        tokenLock = true;\r\n    }\r\n    \r\n    // -----\r\n    \r\n    // ETC / Burn Function -----\r\n    \r\n    function () payable external\r\n    {\r\n        revert();\r\n    }\r\n    \r\n    function endSale() onlyOwner public\r\n    {\r\n        require(saleTime == true);\r\n        require(maxSaleSupply == tokenIssuedSale);\r\n        \r\n        saleTime = false;\r\n        \r\n        uint nowTime = now;\r\n        \r\n        endSaleTime = nowTime;\r\n        \r\n        for(uint i = 0; i < advSptVestingTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + (advSptVestingDate * i);\r\n            advSptVestingTimer[i] = lockTime;\r\n            advSptVestingBalances[i] = advSptVestingBalances[i].add(advSptVestingSupplyPerTime);\r\n        }\r\n        \r\n        for(uint i = 0; i < teamVestingTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + teamVestingDelayDate + (teamVestingDate * i);\r\n            teamVestingTimer[i] = lockTime;\r\n            teamVestingBalances[i] = teamVestingBalances[i].add(teamVestingSupplyPerTime);\r\n        }\r\n        \r\n        for(uint i = 0; i < mktVestingTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + (mktVestingDate * i);\r\n            mktVestingTimer[i] = lockTime;\r\n            if(i == 0)\r\n            {\r\n                mktVestingBalances[i] = mktVestingBalances[i].add(mktVestingSupplyFirst);\r\n            }\r\n            else\r\n            {\r\n                mktVestingBalances[i] = mktVestingBalances[i].add(mktVestingSupplyPerTime);\r\n            }\r\n        }\r\n        \r\n        for(uint i = 0; i < ecoVestingTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + (ecoVestingDate * i);\r\n            ecoVestingTimer[i] = lockTime;\r\n            if(i == 0)\r\n            {\r\n                ecoVestingBalances[i] = ecoVestingBalances[i].add(ecoVestingSupplyFirst);\r\n            }\r\n            else\r\n            {\r\n                ecoVestingBalances[i] = ecoVestingBalances[i].add(ecoVestingSupplyPerTime);\r\n            }\r\n        }\r\n        \r\n        for(uint i = 0; i < fnfSaleLockTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + (fnfSaleLockDate * i);\r\n            fnfLockTimer[i] = lockTime;\r\n        }\r\n        \r\n        for(uint i = 0; i < privateSaleLockTime; i++)\r\n        {\r\n            uint lockTime = endSaleTime + (privateSaleLockDate * i);\r\n            privateLockTimer[i] = lockTime;\r\n        }\r\n        \r\n        emit EndSale(endSaleTime);\r\n    }\r\n    \r\n    function withdrawTokens(address _contract, uint _decimals, uint _value) onlyOwner public\r\n    {\r\n\r\n        if(_contract == address(0x0))\r\n        {\r\n            uint eth = _value.mul(10 ** _decimals);\r\n            msg.sender.transfer(eth);\r\n        }\r\n        else\r\n        {\r\n            uint tokens = _value.mul(10 ** _decimals);\r\n            ERC20Interface(_contract).transfer(msg.sender, tokens);\r\n            \r\n            emit Transfer(address(0x0), msg.sender, tokens);\r\n        }\r\n    }\r\n    \r\n    function burnToken(uint _value) onlyOwner public\r\n    {\r\n        uint tokens = _value * E18;\r\n        \r\n        require(balances[msg.sender] >= tokens);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        \r\n        burnTokenSupply = burnTokenSupply.add(tokens);\r\n        totalTokenSupply = totalTokenSupply.sub(tokens);\r\n        \r\n        emit Burn(msg.sender, tokens);\r\n    }\r\n    \r\n    function close() onlyOwner public\r\n    {\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    // -----\r\n    \r\n    // BlackList function\r\n    \r\n    function addBlackList(address _to) onlyOwner public\r\n    {\r\n        require(blackLists[_to] == false);\r\n        \r\n        blackLists[_to] = true;\r\n    }\r\n    \r\n    function delBlackList(address _to) onlyOwner public\r\n    {\r\n        require(blackLists[_to] == true);\r\n        \r\n        blackLists[_to] = false;\r\n    }\r\n    \r\n    // -----\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"privateSaleUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamVestingTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoVestingSupplyFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateLockTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAdvSptSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fnfLockWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedEco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnfSaleLockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwnership2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ecoVestingTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advSptVestingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnfIssuedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoVestingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mktVestingBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIssuedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktVestingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetTransferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPrivateSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingSupplyPerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSaleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fnfLockTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ecoIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fnfSaleIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mktVestingTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"teamIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"advSptIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"publicSaleIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mktIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"fnfSaleUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktVestingSupplyFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedAdvSpt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFnFSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicIssuedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPublicSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMktSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktVestingSupplyPerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktVestingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"privateSaleIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoVestingSupplyPerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advSptVestingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwnership1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamVestingBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateLockWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advSptVestingTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleLockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedMkt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnfSaleLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoVestingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackLists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ecoVestingBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advSptVestingSupplyPerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advSptVestingBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEcoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingDelayDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOfAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"AdvSptIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TeamIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"MktIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"EcoIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"SaleIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokenUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"EndSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"ChangeOwnerSuggest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ITAMToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce1b8fe525a3728fc4cd1c94a23eba64a4af4cdcb3894ab2f43dc5b1f306660f"}]}