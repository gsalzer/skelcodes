{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n// Â© 2018 SafeBlocks LTD.  All rights reserved.\r\n\r\n  _____            __          ____    _                  _\r\n / ____|          / _|        |  _ \\  | |                | |\r\n| (___     __ _  | |_    ___  | |_) | | |   ___     ___  | | __  ___\r\n \\___ \\   / _` | |  _|  / _ \\ |  _ <  | |  / _ \\   / __| | |/ / / __|\r\n ____) | | (_| | | |   |  __/ | |_) | | | | (_) | | (__  |   <  \\__ \\\r\n|_____/   \\__,_| |_|    \\___| |____/  |_|  \\___/   \\___| |_|\\_\\ |___/\r\n\r\n\r\n// @author SafeBlocks\r\n// @date 30/04/2018\r\n*/\r\ncontract SafeBlocksFirewall {\r\n\r\n    event AllowTransactionEnquireResult(address sourceAddress, bool approved, address token, uint amount, address destination, string msg);\r\n    event AllowAccessEnquireResult(address sourceAddress, bool approved, address destination, bytes4 functionSig, string msg);\r\n    event PolicyChanged(address contractAddress, address destination, address tokenAdress, uint limit);\r\n    event AccessChanged(address contractAddress, address destination, bytes4 functionSig, bool hasAccess);\r\n    event ConfigurationChanged(address sender, address newConfiguration, string message);\r\n\r\n    enum PolicyType {//Order matters(!)\r\n        Transactions, //int value 0\r\n        Access        //int value 1\r\n    }\r\n\r\n    enum PolicyEnforcementStatus {//Order matters(!)\r\n        BlockAll, //int value 0\r\n        AllowAll, //int value 1\r\n        Enforce   //int value 2\r\n    }\r\n\r\n    address private owner;\r\n    address private rulesOwner;\r\n    address private proxyContract;\r\n    bool private verbose;\r\n\r\n    mapping(address /*contractAddress*/ => bool) private enforceBypass;\r\n    mapping(address /*contractAddress*/ => mapping(address /*destination*/ => mapping(address /*tokenAddress*/ => uint256 /*limit*/))) private customerRules;\r\n    mapping(address /*contractAddress*/ => mapping(bytes4 /*function-name*/ => mapping(address /*destination*/ => bool /*has-access*/))) private acl;\r\n    mapping(address /*contractAddress*/ => mapping(bytes4 /*function-name*/ => bool)) private blockAllAccessForFunction;\r\n    mapping(address /*contractAddress*/ => mapping(uint /*policy-type*/ => uint /*enforcement status*/)) private policiesEnforcementStatus;\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        verbose = false;\r\n    }\r\n\r\n    //*************************************** modifiers ****************************************\r\n\r\n    modifier onlyContractOwner {\r\n        require(owner == msg.sender, \"You are not allowed to run this function, required role: Contract-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractOwnerOrRulesOwner {\r\n        require(owner == msg.sender || rulesOwner == msg.sender, \"You are not allowed to run this function, required role: Contract-Owner or Rules-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRulesOwner {\r\n        require(rulesOwner == msg.sender, \"You are not allowed to run this function, required role: Rules-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(proxyContract == msg.sender, \"You are not allowed to run this function, required role: SafeBlocks-Proxy\");\r\n        _;\r\n    }\r\n\r\n    //*************************************** setters ****************************************\r\n\r\n    function setProxyContract(address _proxy)\r\n    onlyContractOwner\r\n    public {\r\n        proxyContract = _proxy;\r\n        emit ConfigurationChanged(msg.sender, _proxy, \"a new proxy contract address has been assigned\");\r\n    }\r\n\r\n    function setRulesOwner(address _rulesOwner)\r\n    public\r\n    onlyContractOwner {\r\n        rulesOwner = _rulesOwner;\r\n        emit ConfigurationChanged(msg.sender, _rulesOwner, \"a new Rules-Owner has been assigned\");\r\n    }\r\n\r\n    function setVerbose(bool _verbose)\r\n    onlyContractOwner\r\n    public {\r\n        verbose = _verbose;\r\n        emit ConfigurationChanged(msg.sender, msg.sender, \"a new Verbose-Mode has been assigned\");\r\n    }\r\n\r\n    //*************************************** firewall functionality ****************************************\r\n\r\n    function setBypassPerContract(address _contractAddress, bool _bypass)\r\n    onlyRulesOwner\r\n    public {\r\n        enforceBypass[_contractAddress] = _bypass;\r\n        if (verbose) emit PolicyChanged(_contractAddress, address(0), address(0), _bypass ? 1 : 0);\r\n    }\r\n\r\n    function setPolicyEnforcementStatus(address _contractAddress, uint _policyType, uint _policyEnforcementStatus)\r\n    onlyRulesOwner\r\n    public {\r\n        policiesEnforcementStatus[_contractAddress][_policyType] = _policyEnforcementStatus;\r\n    }\r\n\r\n    function setBlockAllAccessPerContractFunction(address _contractAddress, bytes4 _functionSig, bool _isBlocked)\r\n    onlyRulesOwner\r\n    public {\r\n        blockAllAccessForFunction[_contractAddress][_functionSig] = _isBlocked;\r\n        if (verbose) emit AccessChanged(_contractAddress, address(0), _functionSig, _isBlocked);\r\n    }\r\n\r\n    function addRule(address _contractAddress, address _destination, address _token, uint256 _tokenLimit)\r\n    onlyRulesOwner\r\n    public {\r\n        customerRules[_contractAddress][_destination][_token] = _tokenLimit;\r\n        if (verbose) emit PolicyChanged(_contractAddress, _destination, _token, _tokenLimit);\r\n    }\r\n\r\n    function removeRule(address _contractAddress, address _destination, address _token)\r\n    onlyRulesOwner\r\n    public {\r\n        delete customerRules[_contractAddress][_destination][_token];\r\n        if (verbose) emit PolicyChanged(_contractAddress, _destination, _token, 0);\r\n    }\r\n\r\n    function addAccess(address _contractAddress, address _destination, bytes4 _functionSig)\r\n    onlyRulesOwner\r\n    public {\r\n        acl[_contractAddress][_functionSig][_destination] = true;\r\n        if (verbose) emit AccessChanged(_contractAddress, _destination, _functionSig, true);\r\n    }\r\n\r\n    function removeAccess(address _contractAddress, address _destination, bytes4 _functionSig)\r\n    onlyRulesOwner\r\n    public {\r\n        delete acl[_contractAddress][_functionSig][_destination];\r\n        if (verbose) emit AccessChanged(_contractAddress, _destination, _functionSig, false);\r\n    }\r\n\r\n    /*\r\n     * Validating that the withdraw operation meets the constrains of the predefined security policy\r\n     *\r\n     * @returns true if the transaction meets the security policy conditions, else false.\r\n     */\r\n    function allowTransaction(address _contractAddress, uint _amount, address _destination, address _token)\r\n    public\r\n    onlyProxy\r\n    returns (bool){\r\n        if (enforceBypass[_contractAddress]) {//contract level bypass, across all policies\r\n            if (verbose) emit AllowTransactionEnquireResult(_contractAddress, true, _token, _amount, _destination, \"1\");\r\n            return true;\r\n        }\r\n\r\n        PolicyEnforcementStatus policyEnforcementStatus = PolicyEnforcementStatus(policiesEnforcementStatus[_contractAddress][uint(PolicyType.Transactions)]);\r\n        if (PolicyEnforcementStatus.BlockAll == policyEnforcementStatus) {//block all activated\r\n            if (verbose) emit AllowTransactionEnquireResult(_contractAddress, false, _token, _amount, _destination, \"2\");\r\n            return false;\r\n        }\r\n        if (PolicyEnforcementStatus.AllowAll == policyEnforcementStatus) {//allow all activated\r\n            if (verbose) emit AllowTransactionEnquireResult(_contractAddress, true, _token, _amount, _destination, \"3\");\r\n            return true;\r\n        }\r\n\r\n        bool transactionAllowed = isTransactionAllowed(_contractAddress, _amount, _destination, _token);\r\n        if (verbose) emit AllowTransactionEnquireResult(_contractAddress, transactionAllowed, _token, _amount, _destination, \"4\");\r\n        return transactionAllowed;\r\n    }\r\n\r\n    /*\r\n    * Validating the given destination has access to the given functionSig according to the predefine access control list\r\n    *\r\n    * @returns true if access granted, else false.\r\n    */\r\n    function allowAccess(address _contractAddress, address _destination, bytes4 _functionSig)\r\n    public\r\n    onlyProxy\r\n    returns (bool){\r\n        if (enforceBypass[_contractAddress]) {//contract level bypass, across all policies\r\n            if (verbose) emit AllowAccessEnquireResult(_contractAddress, true, _destination, _functionSig, \"1\");\r\n            return true;\r\n        }\r\n\r\n        PolicyEnforcementStatus policyEnforcementStatus = PolicyEnforcementStatus(policiesEnforcementStatus[_contractAddress][uint(PolicyType.Access)]);\r\n        if (PolicyEnforcementStatus.BlockAll == policyEnforcementStatus) {//block all activated\r\n            if (verbose) emit AllowAccessEnquireResult(_contractAddress, false, _destination, _functionSig, \"2\");\r\n            return false;\r\n        }\r\n        if (PolicyEnforcementStatus.AllowAll == policyEnforcementStatus) {//allow all activated\r\n            if (verbose) emit AllowAccessEnquireResult(_contractAddress, true, _destination, _functionSig, \"3\");\r\n            return true;\r\n        }\r\n\r\n        bool hasAccessResult = hasAccess(_contractAddress, _destination, _functionSig);\r\n        if (verbose) emit AllowAccessEnquireResult(_contractAddress, hasAccessResult, _destination, _functionSig, \"4\");\r\n        return hasAccessResult;\r\n    }\r\n\r\n    //*************************************** private ****************************************\r\n\r\n    function isTransactionAllowed(address _contractAddress, uint _amount, address _destination, address _token)\r\n    private\r\n    view\r\n    returns (bool){\r\n        uint256 limit = customerRules[_contractAddress][_destination][_token];\r\n        uint256 anyDestinationLimit = customerRules[_contractAddress][0x0][_token];\r\n\r\n        if (limit == 0 && anyDestinationLimit == 0) {//no rules ?? deny all\r\n            return false;\r\n        }\r\n        if (anyDestinationLimit > 0 && limit == 0) {\r\n            limit = anyDestinationLimit;\r\n        }\r\n        return _amount <= limit;\r\n    }\r\n\r\n    function hasAccess(address _contractAddress, address _destination, bytes4 _functionSig)\r\n    private\r\n    view\r\n    returns (bool){\r\n        bool blockAll = blockAllAccessForFunction[_contractAddress][_functionSig];\r\n        if (blockAll) {\r\n            return false;\r\n        }\r\n        bool allowAny = acl[_contractAddress][_functionSig][0x0];\r\n        if (allowAny) {\r\n            return true;\r\n        }\r\n        bool hasAccessResult = acl[_contractAddress][_functionSig][_destination];\r\n        return hasAccessResult;\r\n    }\r\n\r\n    //*************************************** getters ****************************************\r\n\r\n    function getPolicyEnforcementStatus(address _contractAddress, uint _policyType)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint){\r\n        return policiesEnforcementStatus[_contractAddress][_policyType];\r\n    }\r\n\r\n    function getBlockAllAccessForFunction(address _contractAddress, bytes4 _functionSig)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (bool){\r\n        blockAllAccessForFunction[_contractAddress][_functionSig];\r\n    }\r\n\r\n    function getEnforceBypass(address _contractAddress)\r\n    public\r\n    view\r\n    onlyContractOwnerOrRulesOwner\r\n    returns (bool){\r\n        return (enforceBypass[_contractAddress]);\r\n    }\r\n\r\n    function getCustomerRules(address _contractAddress, address _destination, address _tokenAddress)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint256){\r\n        return (customerRules[_contractAddress][_destination][_tokenAddress]);\r\n    }\r\n}\r\n// Â© 2018 SafeBlocks LTD.  All rights reserved.","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_policyType\",\"type\":\"uint256\"},{\"name\":\"_policyEnforcementStatus\",\"type\":\"uint256\"}],\"name\":\"setPolicyEnforcementStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenLimit\",\"type\":\"uint256\"}],\"name\":\"addRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_bypass\",\"type\":\"bool\"}],\"name\":\"setBypassPerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"}],\"name\":\"getBlockAllAccessForFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_policyType\",\"type\":\"uint256\"}],\"name\":\"getPolicyEnforcementStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_verbose\",\"type\":\"bool\"}],\"name\":\"setVerbose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getCustomerRules\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"}],\"name\":\"allowAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"}],\"name\":\"addAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getEnforceBypass\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"}],\"name\":\"removeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"},{\"name\":\"_isBlocked\",\"type\":\"bool\"}],\"name\":\"setBlockAllAccessPerContractFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rulesOwner\",\"type\":\"address\"}],\"name\":\"setRulesOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"AllowTransactionEnquireResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"AllowAccessEnquireResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAdress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"PolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"hasAccess\",\"type\":\"bool\"}],\"name\":\"AccessChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newConfiguration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"}]","ContractName":"SafeBlocksFirewall","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4606b4cc0b3fd1e8d221171ac52b13c8ab0c0e082561c28479f846fe44f80060"}]}