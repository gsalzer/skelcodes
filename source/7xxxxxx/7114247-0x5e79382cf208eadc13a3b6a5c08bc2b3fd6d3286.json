{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract EthmoMinter {\r\n    address[] newContracts;\r\n    address constant private Admin = 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\r\n    address constant private addr=0x6536eF439c4507a49F54eaBEB0127a3Bca9Def89;\r\n    address constant private addrs=0xE80cBfDA1b8D0212C4b79D6d6162dc377C96876e;\r\n    address constant private Tummy=0x820090F4D39a9585a327cc39ba483f8fE7a9DA84;\r\n    address constant private Willy=0xA4757a60d41Ff94652104e4BCdB2936591c74d1D;\r\n    address constant private Nicky=0x89473CD97F49E6d991B68e880f4162e2CBaC3561;\r\n    address constant private Artem=0xA7e8AFa092FAa27F06942480D28edE6fE73E5F88;\r\n    uint FIWDeploy;\r\n    uint FIWMint;\r\n    uint mult;\r\n    \r\n    function createContract (bytes32 EthmojiName,bytes32 EthmojiNicknameOrSymbol,uint Amount) public payable{\r\n        if (msg.sender==Admin || msg.sender==Tummy || msg.sender==Willy || msg.sender==Nicky || msg.sender==Artem){\r\n        }else{\r\n            VIPs Mult=VIPs(addrs);\r\n            mult=Mult.IsVIP(msg.sender);\r\n            EthmoFees fee=EthmoFees(addr);\r\n            FIWDeploy=fee.GetFeeEthmoDeploy();\r\n            FIWMint=fee.GetFeeEthmoMint();\r\n            require(msg.value >= (FIWDeploy+FIWMint*Amount)*mult);\r\n        }\r\n        Admin.transfer(msg.value);\r\n        address Sender=msg.sender;\r\n        address newContract = new Contract(EthmojiName,EthmojiNicknameOrSymbol,Amount,Sender);\r\n\r\n        newContracts.push(newContract);\r\n\r\n    } \r\n    \r\n    function MintMoreEthmojis (address EthmojiAddress,uint Amount) public payable{\r\n        if (msg.sender==Admin || msg.sender==Tummy || msg.sender==Willy || msg.sender==Nicky || msg.sender==Artem){\r\n        }else{\r\n            VIPs Mult=VIPs(addrs);\r\n            mult=Mult.IsVIP(msg.sender);\r\n            EthmoFees fee=EthmoFees(addr);\r\n            FIWMint=fee.GetFeeEthmoMint();\r\n            require(msg.value >= FIWMint*Amount*mult);\r\n        }\r\n        Admin.transfer(msg.value);\r\n        address Sender=msg.sender;\r\n        address Legit=address(this);\r\n        Contract mints=Contract(EthmojiAddress);\r\n        mints.MintMore(Sender,Amount,Legit);\r\n    }\r\n    \r\n    \r\n    function () public payable{\r\n        Admin.transfer(msg.value);\r\n    }\r\n        \r\n   \r\n\r\n}\r\n\r\n\r\ncontract VIPs {\r\n    function IsVIP(address Address)returns(uint Multiplier);\r\n}\r\n    \r\n\r\ncontract EthmoFees {\r\n    function GetFeeEthmoDeploy()returns(uint);\r\n    function GetFeeEthmoMint()returns(uint);\r\n}\r\n\r\n\r\ncontract Contract is ERC20Interface, Owned, SafeMath {\r\n    address constant private Admin = 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\r\n\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n\r\n    function Contract (bytes32 EthmojiName,bytes32 EthmojiNicknameOrSymbol,uint Amount,address Sender) public {\r\n        \r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n        byte char = byte(bytes32(uint(EthmojiName) * 2 ** (8 * j)));\r\n        if (char != 0) {\r\n            bytesString[charCount] = char;\r\n            charCount++;\r\n        }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n        bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    \r\n\r\n    bytes memory bytesStringsw = new bytes(32);\r\n    uint charCountsw = 0;\r\n    for (uint k = 0; k < 32; k++) {\r\n        byte charsw = byte(bytes32(uint(EthmojiNicknameOrSymbol) * 2 ** (8 * k)));\r\n        if (charsw != 0) {\r\n            bytesStringsw[charCountsw] = charsw;\r\n            charCountsw++;\r\n        }\r\n    }\r\n    bytes memory bytesStringTrimmedsw = new bytes(charCountsw);\r\n    for (k = 0; k < charCountsw; k++) {\r\n        bytesStringTrimmedsw[k] = bytesStringsw[k];\r\n    }\r\n\r\n        symbol = string(bytesStringTrimmedsw);\r\n        name = string(bytesStringTrimmed);\r\n        decimals = 0;\r\n        _totalSupply = Amount;\r\n        balances[Sender] = _totalSupply;\r\n        emit Transfer(address(0), Sender, _totalSupply);\r\n    }\r\n\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n   \r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n  \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    function MintMore(address Sender,uint Amount,address Legit) public payable {\r\n        require(msg.sender==Legit);\r\n        uint tokens=Amount;\r\n        balances[Sender] = safeAdd(balances[Sender], tokens);\r\n        _totalSupply = safeAdd(_totalSupply, tokens);\r\n        Transfer(address(0), Sender, tokens);\r\n    }\r\n    \r\n    \r\n\r\n    function () public payable{\r\n        Admin.transfer(msg.value);\r\n    }\r\n\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"EthmojiAddress\",\"type\":\"address\"},{\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"MintMoreEthmojis\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"EthmojiName\",\"type\":\"bytes32\"},{\"name\":\"EthmojiNicknameOrSymbol\",\"type\":\"bytes32\"},{\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthmoMinter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://018149870beaf2700d861c6df564a010831d9cf60151b246d03ce5d45a0b255e"}]}