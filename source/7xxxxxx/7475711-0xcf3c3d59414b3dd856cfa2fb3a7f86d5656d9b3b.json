{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Cutted.sol\r\n\r\ncontract ERC20Cutted {\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Room2Online.sol\r\n\r\ncontract Room2Online is Ownable {\r\n\r\n  event TicketPurchased(address lotAddr, uint ticketNumber, address player, uint totalAmount, uint netAmount);\r\n\r\n  event TicketPaid(address lotAddr, uint lotIndex, uint ticketNumber, address player, uint winning);\r\n\r\n  event LotStarted(address lotAddr, uint lotIndex, uint startTime);\r\n\r\n  event LotFinished(address lotAddr, uint lotIndex, uint finishTime);\r\n\r\n  event ParametersUpdated(address feeWallet, uint feePercent, uint minInvestLimit);\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public percentRate = 100;\r\n\r\n  uint public minInvestLimit;\r\n\r\n  uint public feePercent;\r\n\r\n  address public feeWallet;\r\n\r\n  struct Ticket {\r\n    address owner;\r\n    uint totalAmount;\r\n    uint netAmount;\r\n    uint winning;\r\n    bool finished;\r\n  }\r\n\r\n  struct Lot {\r\n    uint balance;\r\n    uint[] ticketNumbers;\r\n    uint startTime;\r\n    uint finishTime;\r\n  }\r\n\r\n  Ticket[] public tickets;\r\n\r\n  uint public lotIndex;\r\n\r\n  mapping(uint => Lot) public lots;\r\n\r\n  modifier notContract(address to) {\r\n    uint codeLength;\r\n    assembly {\r\n      codeLength := extcodesize(to)\r\n    }\r\n    require(codeLength == 0, \"Contracts not supported!\");\r\n    _;\r\n  }\r\n\r\n  function updateParameters(address newFeeWallet, uint newFeePercent, uint newMinInvestLimit) public onlyOwner {\r\n    feeWallet = newFeeWallet;\r\n    feePercent = newFeePercent;\r\n    minInvestLimit = newMinInvestLimit;\r\n    emit ParametersUpdated(newFeeWallet, newFeePercent, newMinInvestLimit);\r\n  }\r\n\r\n  function getTicketInfo(uint ticketNumber) public view returns(address, uint, uint, uint, bool) {\r\n    Ticket storage ticket = tickets[ticketNumber];\r\n    return (ticket.owner, ticket.totalAmount, ticket.netAmount, ticket.winning, ticket.finished);\r\n  }\r\n\r\n  constructor () public {\r\n    minInvestLimit = 10000000000000000;\r\n    feePercent = 10;\r\n    feeWallet = 0x53F22b8f420317E7CDcbf2A180A12534286CB578;\r\n    emit ParametersUpdated(feeWallet, feePercent, minInvestLimit);\r\n    emit LotStarted(address(this), lotIndex, now);\r\n  }\r\n\r\n  function setFeeWallet(address newFeeWallet) public onlyOwner {\r\n    feeWallet = newFeeWallet;\r\n  }\r\n\r\n  function () public payable notContract(msg.sender) {\r\n    require(msg.value >= minInvestLimit);\r\n    uint fee = msg.value.mul(feePercent).div(percentRate);\r\n    uint netAmount = msg.value.sub(fee);\r\n    tickets.push(Ticket(msg.sender, msg.value, netAmount, 0, false));\r\n    emit TicketPurchased(address(this), tickets.length.sub(1), msg.sender, msg.value, netAmount);\r\n    feeWallet.transfer(fee);\r\n  }\r\n\r\n  function processRewards(uint[] ticketNumbers, uint[] winnings) public onlyOwner {\r\n    Lot storage lot = lots[lotIndex];\r\n    for (uint i = 0; i < ticketNumbers.length; i++) {\r\n      uint ticketNumber = ticketNumbers[i];\r\n      Ticket storage ticket = tickets[ticketNumber];\r\n      if (!ticket.finished) {\r\n        ticket.winning = winnings[i];\r\n        ticket.finished = true;\r\n        lot.ticketNumbers.push(ticketNumber);\r\n        lot.balance = lot.balance.add(winnings[i]);\r\n        ticket.owner.transfer(winnings[i]);\r\n        emit TicketPaid(address(this), lotIndex, ticketNumber, ticket.owner, winnings[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function finishLot(uint currentLotFinishTime, uint nextLotStartTime) public onlyOwner {\r\n    Lot storage currentLot = lots[lotIndex];\r\n    currentLot.finishTime = currentLotFinishTime;\r\n    emit LotFinished(address(this), lotIndex, currentLotFinishTime);\r\n    lotIndex++;\r\n    Lot storage nextLot = lots[lotIndex];\r\n    nextLot.startTime = nextLotStartTime;\r\n    emit LotStarted(address(this), lotIndex, nextLotStartTime);\r\n  }\r\n\r\n  function retrieveTokens(address tokenAddr, address to) public onlyOwner {\r\n    ERC20Cutted token = ERC20Cutted(tokenAddr);\r\n    token.transfer(to, token.balanceOf(address(this)));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"currentLotFinishTime\",\"type\":\"uint256\"},{\"name\":\"nextLotStartTime\",\"type\":\"uint256\"}],\"name\":\"finishLot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"},{\"name\":\"newFeePercent\",\"type\":\"uint256\"},{\"name\":\"newMinInvestLimit\",\"type\":\"uint256\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"netAmount\",\"type\":\"uint256\"},{\"name\":\"winning\",\"type\":\"uint256\"},{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketNumbers\",\"type\":\"uint256[]\"},{\"name\":\"winnings\",\"type\":\"uint256[]\"}],\"name\":\"processRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lots\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"finishTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"netAmount\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winning\",\"type\":\"uint256\"}],\"name\":\"TicketPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"LotStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finishTime\",\"type\":\"uint256\"}],\"name\":\"LotFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minInvestLimit\",\"type\":\"uint256\"}],\"name\":\"ParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Room2Online","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3b3fc883e5cb928671b975d4e8b05dd22e8151b36b08eb8b2d50a27692e6fbc2"}]}