{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes signature)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\n\r\ncontract BToken is ERC20Burnable, ERC20Detailed {\r\n  uint constant private INITIAL_SUPPLY = 10 * 1e24;\r\n  \r\n  constructor() ERC20Detailed(\"BurnToken\", \"BUTK\", 18) public {\r\n    super._mint(msg.sender, INITIAL_SUPPLY);\r\n  }\r\n}\r\n\r\ncontract BMng is Pausable, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum TokenStatus {\r\n    Unknown,\r\n    Active,\r\n    Suspended\r\n  }\r\n\r\n  struct Token {\r\n    TokenStatus status;\r\n    uint256 rewardRateNumerator;\r\n    uint256 rewardRateDenominator;\r\n    uint256 burned;\r\n    uint256 burnedAccumulator;\r\n    uint256 bTokensRewarded;\r\n    uint256 totalSupplyInit; // provided during registration\r\n  }\r\n\r\n  event Auth(\r\n    address indexed burner,\r\n    address indexed partner\r\n  );\r\n\r\n  event Burn(\r\n    address indexed token,\r\n    address indexed burner,\r\n    address partner,\r\n    uint256 value,\r\n    uint256 bValue,\r\n    uint256 bValuePartner\r\n  );\r\n\r\n  event DiscountUpdate(\r\n    uint256 discountNumerator,\r\n    uint256 discountDenominator,\r\n    uint256 balanceThreshold\r\n  );\r\n\r\n  string public name;\r\n  address constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n  address registrator;\r\n  address defaultPartner;\r\n  \r\n  uint256 partnerBonusRateNumerator;\r\n  uint256 partnerBonusRateDenominator;\r\n\r\n  uint256 constant discountNumeratorMul = 95;\r\n  uint256 constant discountDenominatorMul = 100;\r\n\r\n  uint256 discountNumerator;\r\n  uint256 discountDenominator;\r\n  uint256 balanceThreshold;\r\n\r\n  mapping (address => Token) public tokens;\r\n\r\n  // Emails registered\r\n  mapping (address => address) referalPartners;\r\n\r\n  // Counters\r\n  mapping (address => mapping (address => uint256)) burntByTokenUser;\r\n  // mapping (address => uint256) burntByTokenTotal;\r\n  \r\n  // Reference codes\r\n  mapping (bytes8 => address) refLookup;\r\n\r\n  // Bonuses\r\n  mapping (address => bool) public shouldGetBonus;\r\n\r\n  BToken bToken;\r\n  uint256 public initialBlockNumber;\r\n\r\n  constructor(\r\n    address _bTokenAddress, \r\n    address _registrator, \r\n    address _defaultPartner,\r\n    uint256 _initialBalance\r\n  ) \r\n  public \r\n  {\r\n    name = \"Burn Token Management Contract v0.2\";\r\n    registrator = _registrator;\r\n    defaultPartner = _defaultPartner;\r\n    bToken = BToken(_bTokenAddress);\r\n    initialBlockNumber = block.number;\r\n    // Formal referals\r\n    referalPartners[_registrator] = burnAddress;\r\n    referalPartners[_defaultPartner] = burnAddress;\r\n    // Bonus rate\r\n    partnerBonusRateNumerator = 15; // 15% default\r\n    partnerBonusRateDenominator = 100;\r\n    discountNumerator = 1;\r\n    discountDenominator = 1;\r\n    balanceThreshold = _initialBalance.mul(discountNumeratorMul).div(discountDenominatorMul);\r\n  }\r\n\r\n  // --------------------------------------------------------------------------\r\n  // Administration fuctionality\r\n  \r\n  function claimBurnTokensBack(address _to) public onlyOwner {\r\n    // This is necessary to finalize the contract lifecicle \r\n    uint256 remainingBalance = bToken.balanceOf(this);\r\n    bToken.transfer(_to, remainingBalance);\r\n  }\r\n\r\n  function register(\r\n    address tokenAddress, \r\n    uint256 totalSupply,\r\n    uint256 _rewardRateNumerator,\r\n    uint256 _rewardRateDenominator,\r\n    bool activate\r\n  ) \r\n    public \r\n    onlyOwner \r\n  {\r\n    require(tokens[tokenAddress].status == TokenStatus.Unknown, \"Cannot register more than one time\");\r\n    Token memory _token;\r\n    if (activate) {\r\n      _token.status = TokenStatus.Active;\r\n    } else {\r\n      _token.status = TokenStatus.Suspended;\r\n    }    \r\n    _token.rewardRateNumerator = _rewardRateNumerator;\r\n    _token.rewardRateDenominator = _rewardRateDenominator;\r\n    _token.totalSupplyInit = totalSupply;\r\n    tokens[tokenAddress] = _token;\r\n  }\r\n\r\n  function changeRegistrator(address _newRegistrator) public onlyOwner {\r\n    registrator = _newRegistrator;\r\n  }\r\n\r\n  function changeDefaultPartnerAddress(address _newDefaultPartner) public onlyOwner {\r\n    defaultPartner = _newDefaultPartner;\r\n  }\r\n\r\n  \r\n  function setRewardRateForToken(\r\n    address tokenAddress,\r\n    uint256 _rewardRateNumerator,\r\n    uint256 _rewardRateDenominator\r\n  )\r\n    public \r\n    onlyOwner \r\n  {\r\n    require(tokens[tokenAddress].status != TokenStatus.Unknown, \"Token should be registered first\");\r\n    tokens[tokenAddress].rewardRateNumerator = _rewardRateNumerator;\r\n    tokens[tokenAddress].rewardRateDenominator = _rewardRateDenominator;\r\n  }\r\n  \r\n\r\n  function setPartnerBonusRate(\r\n    uint256 _partnerBonusRateNumerator,\r\n    uint256 _partnerBonusRateDenominator\r\n  )\r\n    public \r\n    onlyOwner \r\n  {\r\n    partnerBonusRateNumerator = _partnerBonusRateNumerator;\r\n    partnerBonusRateDenominator = _partnerBonusRateDenominator;\r\n  }\r\n\r\n  function suspend(address tokenAddress) public onlyOwner {\r\n    require(tokens[tokenAddress].status != TokenStatus.Unknown, \"Token should be registered first\");\r\n    tokens[tokenAddress].status = TokenStatus.Suspended;\r\n  }\r\n\r\n  function unSuspend(address tokenAddress) public onlyOwner {\r\n    require(tokens[tokenAddress].status != TokenStatus.Unknown, \"Token should be registered first\");\r\n    tokens[tokenAddress].status = TokenStatus.Active;\r\n    tokens[tokenAddress].burnedAccumulator = 0;\r\n  }\r\n\r\n  function activate(address tokenAddress) public onlyOwner {\r\n    require(tokens[tokenAddress].status != TokenStatus.Unknown, \"Token should be registered first\");\r\n    tokens[tokenAddress].status = TokenStatus.Active;\r\n  }\r\n\r\n  // END of Administration fuctionality\r\n  // --------------------------------------------------------------------------\r\n\r\n  function isAuthorized(address _who) public view whenNotPaused returns (bool) {\r\n    address partner = referalPartners[_who];\r\n    return partner != address(0);\r\n  }\r\n\r\n  function amountBurnedTotal(address token) public view returns (uint256) {\r\n    return tokens[token].burned;\r\n  }\r\n\r\n  function amountBurnedByUser(address token, address _who) public view returns (uint256) {\r\n    return burntByTokenUser[token][_who];\r\n  }\r\n\r\n  // Ref code\r\n  function getRefByAddress(address _who) public pure returns (bytes6) {\r\n    /* \r\n      We use Base58 encoding and want refcode length to be 8 symbols \r\n      bits = log2(58) * 8 = 46.86384796102058 = 40 + 6.86384796102058\r\n      2^(40 + 6.86384796102058) = 0x100^5 * 116.4726943 ~ 0x100^5 * 116\r\n      CEIL(47 / 8) = 6\r\n      Output: bytes6 (48 bits)\r\n      In such case for 10^6 records we have 0.39% hash collision probability \r\n      (see: https://preshing.com/20110504/hash-collision-probabilities/)\r\n    */ \r\n    bytes32 dataHash = keccak256(abi.encodePacked(_who, \"BUTK\"));\r\n    return bytes6(uint256(dataHash) % uint256(116 * 0x10000000000));\r\n  }\r\n\r\n  function getAddressByRef(bytes6 ref) public view returns (address) {\r\n    return refLookup[ref];\r\n  }\r\n\r\n  function saveRef(address _who) private returns (bool) {\r\n    require(_who != address(0), \"Should not be zero address\");\r\n    bytes6 ref = getRefByAddress(_who);\r\n    refLookup[ref] = _who;\r\n    return true;\r\n  }\r\n\r\n  function checkSignature(bytes sig, address _who) public view returns (bool) {\r\n    bytes32 dataHash = keccak256(abi.encodePacked(_who));\r\n    return (ECDSA.recover(dataHash, sig) == registrator);\r\n  }\r\n\r\n  function authorizeAddress(bytes authSignature, bytes6 ref) public whenNotPaused returns (bool) {\r\n    // require(false, \"Test fail\");\r\n    require(checkSignature(authSignature, msg.sender) == true, \"Authorization should be signed by registrator\");\r\n    require(isAuthorized(msg.sender) == false, \"No need to authorize more then once\");\r\n    address refAddress = getAddressByRef(ref);\r\n    address partner = (refAddress == address(0)) ? defaultPartner : refAddress;\r\n\r\n    // Create ref code (register as a partner)\r\n    saveRef(msg.sender);\r\n\r\n    referalPartners[msg.sender] = partner;\r\n\r\n    // Only if ref code is used authorized to get extra bonus\r\n    if (partner != defaultPartner) {\r\n      shouldGetBonus[msg.sender] = true;\r\n    }\r\n\r\n    emit Auth(msg.sender, partner);\r\n\r\n    return true;\r\n  }\r\n\r\n  function suspendIfNecessary(\r\n    address tokenAddress\r\n  )\r\n    private returns (bool) \r\n  {\r\n    // When 10% of totalSupply is burnt suspend the token just in case \r\n    // there is a chance that its contract is broken\r\n    if (tokens[tokenAddress].burnedAccumulator > tokens[tokenAddress].totalSupplyInit.div(10)) {\r\n      tokens[tokenAddress].status = TokenStatus.Suspended;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Discount\r\n  function discountCorrectionIfNecessary(\r\n    uint256 balance\r\n  ) \r\n    private returns (bool)\r\n  {\r\n    if (balance < balanceThreshold) {\r\n      // Update discountNumerator, discountDenominator and balanceThreshold\r\n      // we multiply discount coefficient by 0.9\r\n      discountNumerator = discountNumerator * discountNumeratorMul;\r\n      discountDenominator = discountDenominator * discountDenominatorMul;\r\n      balanceThreshold = balanceThreshold.mul(discountNumeratorMul).div(discountDenominatorMul);\r\n      emit DiscountUpdate(discountNumerator, discountDenominator, balanceThreshold);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Helpers\r\n  function getAllTokenData(\r\n    address tokenAddress,\r\n    address _who\r\n  )\r\n    public view returns (uint256, uint256, uint256, uint256, bool) \r\n  {\r\n    IERC20 tokenContract = IERC20(tokenAddress);\r\n    uint256 balance = tokenContract.balanceOf(_who);\r\n    uint256 allowance = tokenContract.allowance(_who, this);\r\n    bool isActive = (tokens[tokenAddress].status == TokenStatus.Active);\r\n    uint256 burnedByUser = amountBurnedByUser(tokenAddress, _who);\r\n    uint256 burnedTotal = amountBurnedTotal(tokenAddress);\r\n    return (balance, allowance, burnedByUser, burnedTotal, isActive);\r\n  }\r\n\r\n  function getBTokenValue(\r\n    address tokenAddress, \r\n    uint256 value\r\n  )\r\n    public view returns (uint256) \r\n  {\r\n    Token memory tokenRec = tokens[tokenAddress];\r\n    require(tokenRec.status == TokenStatus.Active, \"Token should be in active state\");\r\n    uint256 denominator = tokenRec.rewardRateDenominator;\r\n    require(denominator > 0, \"Reward denominator should not be zero\");\r\n    uint256 numerator = tokenRec.rewardRateNumerator;\r\n    uint256 bTokenValue = value.mul(numerator).div(denominator);\r\n    // Discount\r\n    uint256 discountedBTokenValue = bTokenValue.mul(discountNumerator).div(discountDenominator);\r\n    return discountedBTokenValue;\r\n  } \r\n\r\n  function getPartnerReward(uint256 bTokenValue) public view returns (uint256) {\r\n    return bTokenValue.mul(partnerBonusRateNumerator).div(partnerBonusRateDenominator);\r\n  }\r\n\r\n  function burn(\r\n    address tokenAddress, \r\n    uint256 value\r\n  ) \r\n    public \r\n    whenNotPaused \r\n    returns (bool) \r\n  {\r\n    address partner = referalPartners[msg.sender];\r\n    require(partner != address(0), \"Burner should be registered\");\r\n    IERC20 tokenContract = IERC20(tokenAddress);\r\n    require(tokenContract.allowance(msg.sender, this) >= value, \"Should be allowed\");\r\n \r\n    uint256 bTokenValueFin;\r\n    uint256 bTokenValue = getBTokenValue(tokenAddress, value);\r\n    uint256 currentBalance = bToken.balanceOf(this);\r\n    require(bTokenValue < currentBalance.div(100), \"Cannot reward more than 1% of the balance\");\r\n\r\n    uint256 bTokenPartnerBonus = getPartnerReward(bTokenValue);\r\n    uint256 bTokenTotal = bTokenValue.add(bTokenPartnerBonus);\r\n    \r\n    // Update counters\r\n    tokens[tokenAddress].burned = tokens[tokenAddress].burned.add(value);\r\n    tokens[tokenAddress].burnedAccumulator = tokens[tokenAddress].burnedAccumulator.add(value);\r\n    tokens[tokenAddress].bTokensRewarded = tokens[tokenAddress].bTokensRewarded.add(bTokenTotal);\r\n    burntByTokenUser[tokenAddress][msg.sender] = burntByTokenUser[tokenAddress][msg.sender].add(value);\r\n\r\n    tokenContract.transferFrom(msg.sender, burnAddress, value); // burn shit-token\r\n    \r\n    discountCorrectionIfNecessary(currentBalance.sub(bTokenValue).sub(bTokenPartnerBonus));\r\n    \r\n    suspendIfNecessary(tokenAddress);\r\n\r\n    bToken.transfer(partner, bTokenPartnerBonus);\r\n\r\n    if (shouldGetBonus[msg.sender]) {\r\n      // give bonus once\r\n      shouldGetBonus[msg.sender] = false;\r\n      bTokenValueFin = bTokenValue.mul(6).div(5); // +20%\r\n    } else {\r\n      bTokenValueFin = bTokenValue;\r\n    }\r\n\r\n    bToken.transfer(msg.sender, bTokenValueFin);\r\n    emit Burn(tokenAddress, msg.sender, partner, value, bTokenValueFin, bTokenPartnerBonus);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getRefByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes6\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"amountBurnedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"suspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bTokenValue\",\"type\":\"uint256\"}],\"name\":\"getPartnerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getBTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimBurnTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"checkSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"amountBurnedByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegistrator\",\"type\":\"address\"}],\"name\":\"changeRegistrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldGetBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authSignature\",\"type\":\"bytes\"},{\"name\":\"ref\",\"type\":\"bytes6\"}],\"name\":\"authorizeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDefaultPartner\",\"type\":\"address\"}],\"name\":\"changeDefaultPartnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ref\",\"type\":\"bytes6\"}],\"name\":\"getAddressByRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerBonusRateNumerator\",\"type\":\"uint256\"},{\"name\":\"_partnerBonusRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setPartnerBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"_rewardRateNumerator\",\"type\":\"uint256\"},{\"name\":\"_rewardRateDenominator\",\"type\":\"uint256\"},{\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getAllTokenData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"unSuspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_rewardRateNumerator\",\"type\":\"uint256\"},{\"name\":\"_rewardRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardRateForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"rewardRateNumerator\",\"type\":\"uint256\"},{\"name\":\"rewardRateDenominator\",\"type\":\"uint256\"},{\"name\":\"burned\",\"type\":\"uint256\"},{\"name\":\"burnedAccumulator\",\"type\":\"uint256\"},{\"name\":\"bTokensRewarded\",\"type\":\"uint256\"},{\"name\":\"totalSupplyInit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bTokenAddress\",\"type\":\"address\"},{\"name\":\"_registrator\",\"type\":\"address\"},{\"name\":\"_defaultPartner\",\"type\":\"address\"},{\"name\":\"_initialBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"Auth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bValuePartner\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"discountNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discountDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceThreshold\",\"type\":\"uint256\"}],\"name\":\"DiscountUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"BMng","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e0dd75da07c10d0a904e79e9ac95b360a06a4bb9000000000000000000000000cbf0d8037dd72ea13569a5b3ad75e7b497a66e09000000000000000000000000cbf0d8037dd72ea13569a5b3ad75e7b497a66e090000000000000000000000000000000000000000000771d2fa45345a6d653600","Library":"","SwarmSource":"bzzr://2ea148a8d35355cbda8824d8f943ab337c613a694915dc7f7b6118cb93ac613a"}]}