{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20/Storage.sol\r\n\r\n/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2019 eToroX Labs\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title External ERC20 Storage\r\n *\r\n * @dev The storage contract used in ExternalERC20 token. This contract can\r\n * provide storage for exactly one contract, referred to as the implementor,\r\n * inheriting from the ExternalERC20 contract. Only the current implementor or\r\n * the owner can transfer the implementorship. Change of state is only allowed\r\n * by the implementor.\r\n */\r\ncontract Storage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    uint256 private totalSupply;\r\n\r\n    address private _implementor;\r\n\r\n    event StorageImplementorTransferred(address indexed from,\r\n                                        address indexed to);\r\n\r\n    /**\r\n     * @dev Contructor.\r\n     * @param owner The address of the owner of the contract.\r\n     * Must not be the zero address.\r\n     * @param implementor The address of the contract that is\r\n     * allowed to change state. Must not be the zero address.\r\n     */\r\n    constructor(address owner, address implementor) public {\r\n\r\n        require(\r\n            owner != address(0),\r\n            \"Owner should not be the zero address\"\r\n        );\r\n\r\n        require(\r\n            implementor != address(0),\r\n            \"Implementor should not be the zero address\"\r\n        );\r\n\r\n        transferOwnership(owner);\r\n        _implementor = implementor;\r\n    }\r\n\r\n    /**\r\n     * @dev Return whether the sender is an implementor.\r\n     */\r\n    function isImplementor() public view returns(bool) {\r\n        return msg.sender == _implementor;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new balance.\r\n     * Can only be done by owner or implementor contract.\r\n     */\r\n    function setBalance(address owner,\r\n                        uint256 value)\r\n        public\r\n        onlyImplementor\r\n    {\r\n        balances[owner] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the balances relatively\r\n     * @param owner the address for which to increase balance\r\n     * @param addedValue the value to increase with\r\n     */\r\n    function increaseBalance(address owner, uint256 addedValue)\r\n        public\r\n        onlyImplementor\r\n    {\r\n        balances[owner] = balances[owner].add(addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the balances relatively\r\n     * @param owner the address for which to decrease balance\r\n     * @param subtractedValue the value to decrease with\r\n     */\r\n    function decreaseBalance(address owner, uint256 subtractedValue)\r\n        public\r\n        onlyImplementor\r\n    {\r\n        balances[owner] = balances[owner].sub(subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Can only be done by owner or implementor contract.\r\n     * @return The current balance of owner\r\n     */\r\n    function getBalance(address owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new allowance.\r\n     * Can only be called by implementor contract.\r\n     */\r\n    function setAllowed(address owner,\r\n                        address spender,\r\n                        uint256 value)\r\n        public\r\n        onlyImplementor\r\n    {\r\n        allowed[owner][spender] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the allowance relatively\r\n     * @param owner the address for which to allow from\r\n     * @param spender the addres for which the allowance increase is granted\r\n     * @param addedValue the value to increase with\r\n     */\r\n    function increaseAllowed(\r\n        address owner,\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        onlyImplementor\r\n    {\r\n        allowed[owner][spender] = allowed[owner][spender].add(addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the allowance relatively\r\n     * @param owner the address for which to allow from\r\n     * @param spender the addres for which the allowance decrease is granted\r\n     * @param subtractedValue the value to decrease with\r\n     */\r\n    function decreaseAllowed(\r\n        address owner,\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        onlyImplementor\r\n    {\r\n        allowed[owner][spender] = allowed[owner][spender].sub(subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Can only be called by implementor contract.\r\n     * @return The current allowance for spender from owner\r\n     */\r\n    function getAllowed(address owner,\r\n                        address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Change totalSupply.\r\n     * Can only be called by implementor contract.\r\n     */\r\n    function setTotalSupply(uint256 value)\r\n        public\r\n        onlyImplementor\r\n    {\r\n        totalSupply = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Can only be called by implementor contract.\r\n     * @return Current supply\r\n     */\r\n    function getTotalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer implementor to new contract\r\n     * Can only be called by owner or implementor contract.\r\n     */\r\n    function transferImplementor(address newImplementor)\r\n        public\r\n        requireNonZero(newImplementor)\r\n        onlyImplementorOrOwner\r\n    {\r\n        require(newImplementor != _implementor,\r\n                \"Cannot transfer to same implementor as existing\");\r\n        address curImplementor = _implementor;\r\n        _implementor = newImplementor;\r\n        emit StorageImplementorTransferred(curImplementor, newImplementor);\r\n    }\r\n\r\n    /**\r\n     * @dev Asserts that sender is either owner or implementor.\r\n     */\r\n    modifier onlyImplementorOrOwner() {\r\n        require(isImplementor() || isOwner(), \"Is not implementor or owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Asserts that sender is the implementor.\r\n     */\r\n    modifier onlyImplementor() {\r\n        require(isImplementor(), \"Is not implementor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Asserts that the given address is not the null-address\r\n     */\r\n    modifier requireNonZero(address addr) {\r\n        require(addr != address(0), \"Expected a non-zero address\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementor\",\"type\":\"address\"}],\"name\":\"transferImplementor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isImplementor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"implementor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"StorageImplementorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Storage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001e65feadd70c2dbffc91c8ec0e282fcf3e4783cb0000000000000000000000007d2bebd6e41b05384f0a8eb8ff228daac6f39c96","Library":"","SwarmSource":"bzzr://1e438fd2c48222a90e73a06e76b9d5a1b28c95683278a0b4b340a3fa4a5a5aba"}]}