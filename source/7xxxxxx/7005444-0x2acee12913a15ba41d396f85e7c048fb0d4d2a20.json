{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017â€“2018, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n \r\npragma solidity 0.5.2;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract OracleRegistry is Ownable {\r\n\r\n    event LogAddOracle(\r\n        address indexed oracle,\r\n        string name\r\n    );\r\n\r\n    event LogRemoveOracle(\r\n        address indexed oracle,\r\n        string name\r\n    );\r\n\r\n    event LogOracleNameChange(address indexed oracle, string oldName, string newName);\r\n\r\n    mapping (address => OracleMetadata) public oracles;\r\n    mapping (string => address) internal oracleByName;\r\n\r\n    address[] public oracleAddresses;\r\n\r\n    struct OracleMetadata {\r\n        address oracle;\r\n        string name;\r\n    }\r\n\r\n    modifier oracleExists(address _oracle) {\r\n        require(oracles[_oracle].oracle != address(0), \"OracleRegistry::oracle doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    modifier oracleDoesNotExist(address _oracle) {\r\n        require(oracles[_oracle].oracle == address(0), \"OracleRegistry::oracle exists\");\r\n        _;\r\n    }\r\n\r\n    modifier nameDoesNotExist(string memory _name) {\r\n        require(oracleByName[_name] == address(0), \"OracleRegistry::name exists\");\r\n        _;\r\n    }\r\n\r\n    modifier addressNotNull(address _address) {\r\n        require(_address != address(0), \"OracleRegistry::address is null\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows owner to add a new oracle to the registry.\r\n    /// @param _oracle Address of new oracle.\r\n    /// @param _name Name of new oracle.\r\n    function addOracle(\r\n        address _oracle,\r\n        string memory _name)\r\n        public\r\n        onlyOwner\r\n        oracleDoesNotExist(_oracle)\r\n        addressNotNull(_oracle)\r\n        nameDoesNotExist(_name)\r\n    {\r\n        oracles[_oracle] = OracleMetadata({\r\n            oracle: _oracle,\r\n            name: _name\r\n        });\r\n        oracleAddresses.push(_oracle);\r\n        oracleByName[_name] = _oracle;\r\n        emit LogAddOracle(\r\n            _oracle,\r\n            _name\r\n        );\r\n    }\r\n\r\n    /// @dev Allows owner to remove an existing oracle from the registry.\r\n    /// @param _oracle Address of existing oracle.\r\n    function removeOracle(address _oracle, uint256 _index)\r\n        public\r\n        onlyOwner\r\n        oracleExists(_oracle)\r\n    {\r\n        require(oracleAddresses[_index] == _oracle, \"OracleRegistry::invalid index\");\r\n\r\n        oracleAddresses[_index] = oracleAddresses[oracleAddresses.length - 1];\r\n        oracleAddresses.length -= 1;\r\n\r\n        OracleMetadata storage oracle = oracles[_oracle];\r\n        emit LogRemoveOracle(\r\n            oracle.oracle,\r\n            oracle.name\r\n        );\r\n        delete oracleByName[oracle.name];\r\n        delete oracles[_oracle];\r\n    }\r\n\r\n    /// @dev Allows owner to modify an existing oracle's name.\r\n    /// @param _oracle Address of existing oracle.\r\n    /// @param _name New name.\r\n    function setOracleName(address _oracle, string memory _name)\r\n        public\r\n        onlyOwner\r\n        oracleExists(_oracle)\r\n        nameDoesNotExist(_name)\r\n    {\r\n        OracleMetadata storage oracle = oracles[_oracle];\r\n        emit LogOracleNameChange(_oracle, oracle.name, _name);\r\n        delete oracleByName[oracle.name];\r\n        oracleByName[_name] = _oracle;\r\n        oracle.name = _name;\r\n    }\r\n\r\n    /// @dev Checks if an oracle exists in the registry\r\n    /// @param _oracle Address of registered oracle.\r\n    /// @return True if exists, False otherwise.\r\n    function hasOracle(address _oracle)\r\n        public\r\n        view\r\n        returns (bool) {\r\n        return (oracles[_oracle].oracle == _oracle);\r\n    }\r\n\r\n    /// @dev Provides a registered oracle's address when given the oracle name.\r\n    /// @param _name Name of registered oracle.\r\n    /// @return Oracle's address.\r\n    function getOracleAddressByName(string memory _name)\r\n        public\r\n        view\r\n        returns (address) {\r\n        return oracleByName[_name];\r\n    }\r\n\r\n    /// @dev Provides a registered oracle's metadata, looked up by address.\r\n    /// @param _oracle Address of registered oracle.\r\n    /// @return Oracle metadata.\r\n    function getOracleMetaData(address _oracle)\r\n        public\r\n        view\r\n        returns (\r\n            address,  //oracleAddress\r\n            string memory   //name\r\n        )\r\n    {\r\n        OracleMetadata memory oracle = oracles[_oracle];\r\n        return (\r\n            oracle.oracle,\r\n            oracle.name\r\n        );\r\n    }\r\n\r\n    /// @dev Provides a registered oracle's metadata, looked up by name.\r\n    /// @param _name Name of registered oracle.\r\n    /// @return Oracle metadata.\r\n    function getOracleByName(string memory _name)\r\n        public\r\n        view\r\n        returns (\r\n            address,  //oracleAddress\r\n            string memory    //name\r\n        )\r\n    {\r\n        address _oracle = oracleByName[_name];\r\n        return getOracleMetaData(_oracle);\r\n    }\r\n\r\n    /// @dev Returns an array containing all oracle addresses.\r\n    /// @return Array of oracle addresses.\r\n    function getOracleAddresses()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return oracleAddresses;\r\n    }\r\n\r\n    /// @dev Returns an array of oracle addresses, an array with the length of each oracle name, and a concatenated string of oracle names\r\n    /// @return Array of oracle names, array of name lengths, concatenated string of all names\r\n    function getOracleList()\r\n        public\r\n        view\r\n        returns (address[] memory, uint256[] memory, string memory)\r\n    {\r\n        address[] memory addresses = oracleAddresses;\r\n        uint256[] memory nameLengths = new uint256[](oracleAddresses.length);\r\n        string memory allStrings;\r\n\r\n        if (oracleAddresses.length == 0)\r\n            return (addresses,nameLengths,allStrings);\r\n        \r\n        for (uint256 i = 0; i < oracleAddresses.length; i++) {\r\n            string memory tmp = oracles[oracleAddresses[i]].name;\r\n            nameLengths[i] = bytes(tmp).length;\r\n            allStrings = strConcat(allStrings, tmp);\r\n        }\r\n\r\n        return (addresses, nameLengths, allStrings);\r\n    }\r\n\r\n    /// @dev Concatenates two strings\r\n    /// @return concatenated string\r\n    function strConcat(\r\n        string  memory _a,\r\n        string  memory _b)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory bab = bytes(ab);\r\n        uint256 k = 0;\r\n        uint256 i;\r\n        for (i = 0; i < _ba.length; i++)\r\n            bab[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++)\r\n            bab[k++] = _bb[i];\r\n        \r\n        return string(bab);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"hasOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"getOracleMetaData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOracleByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"name\":\"oracle\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOracleAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setOracleName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"LogAddOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"LogRemoveOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"LogOracleNameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OracleRegistry","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97f18f60366e3efb21c6fb2e58d82d70fdcb78dccb8e8af622862b5399d1b90d"}]}