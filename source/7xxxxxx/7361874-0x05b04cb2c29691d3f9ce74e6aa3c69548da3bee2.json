{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract EtherStateEquivalentToken {\r\n    address public owner;\r\n    mapping (address => uint256) public tokenBalance;\r\n    mapping (address => uint256) public refBalance;\r\n    \r\n    uint256 public tokenPrice = 0.0004 ether; \r\n    uint256 public tokenSupply = 0;\r\n    uint256 constant public softCap =  2500000 ether;\r\n    uint256 constant public hardCap = 10000000 ether;\r\n    uint256 public start;\r\n    uint256 public softCapMoment = 0;\r\n    uint256 public softCapPeriod = 1483300; //17 * 24 * 60 * 60;\r\n    uint256 public hardCapPeriod = softCapPeriod;\r\n    uint256 public investedTotal = 0;\r\n    \r\n    bool public softCapReached = false;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier softCapFailed {\r\n        require(now > start + softCapPeriod && !softCapReached);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        start = now;\r\n    }\r\n    \r\n    function() public payable {\r\n        invest(msg.sender, msg.value, 0x0, 0x0);\r\n    }\r\n    \r\n    function buy(address ref1, address ref2) public payable {\r\n        /* \r\n            Function Enhamster\r\n        */\r\n        \r\n        require(msg.value > 0);\r\n        \r\n        invest(msg.sender, msg.value, ref1, ref2);\r\n    }\r\n    \r\n    function invest(address investor, uint256 value, address ref1, address ref2) internal {\r\n        /* \r\n            Внутренняя функция покупки токенов, вызывается из головного метода и метода buy.\r\n        */\r\n        \r\n        uint256 tokens = value / tokenPrice * 1 ether;\r\n        require (tokens + tokenSupply <= hardCap); /* нельзя чтобы образовался tokenSupply, превосходящий 10 000 000 EST */\r\n        if (softCapMoment > 0) require(now < softCapMoment + hardCapPeriod); /* после периода Hard Cap токены нельзя покупать */\r\n        \r\n        tokenBalance[investor] += tokens;\r\n        tokenSupply += tokens;\r\n        \r\n        if (tokenSupply >= softCap) {\r\n            softCapReached = true;\r\n            softCapMoment = now;\r\n        }\r\n        \r\n        uint256 ref1Money = value * 6 / 100;\r\n        uint256 ref2Money = value * 3 / 100;\r\n        uint256 ownerMoney = value - ref1Money - ref2Money;\r\n        \r\n        if (ref1 != 0x0 && tokenBalance[ref1] >= 125 ether) {\r\n            refBalance[ref1] += ref1Money;\r\n        } else {\r\n            refBalance[owner] += ref1Money;\r\n        }\r\n        if (ref2 != 0x0 && tokenBalance[ref2] >= 125 ether) {\r\n            refBalance[ref2] += ref2Money;\r\n        } else {\r\n            refBalance[owner] += ref2Money;\r\n        }\r\n        refBalance[owner] += ownerMoney;\r\n        \r\n        investedTotal += value;\r\n         \r\n        emit OnInvest(investor, value, tokens, ref1, ref2, now);\r\n    }\r\n    \r\n    function withdraw() public {\r\n        /* \r\n            Вывод средств с реферального баланса, возможен только в случае достижения Soft Cap. Этот же метод \r\n            используется owner'ом контракта для вывода средств.\r\n        */\r\n        \r\n        require(softCapReached);\r\n        uint256 value = refBalance[msg.sender];\r\n        require(value > 0);\r\n        \r\n        refBalance[msg.sender] = 0;\r\n        \r\n        msg.sender.transfer(value);\r\n        emit OnWithdraw(msg.sender, value, now);\r\n    }\r\n    \r\n    function withdrawAmount(uint256 amount) public {\r\n        /* \r\n            Вывод средств с реферального баланса, с указанием определённой суммы.\r\n        */\r\n        require(amount > 0);\r\n        require(softCapReached);\r\n        uint256 value = refBalance[msg.sender];\r\n        require(value >= amount);\r\n        \r\n        refBalance[msg.sender] = value-amount;\r\n        \r\n        msg.sender.transfer(amount);\r\n        emit OnWithdraw(msg.sender, amount, now);\r\n    }\r\n    \r\n    function withdrawAmountTo(uint256 amount, address receiver) public {\r\n        /* \r\n            Вывод средств с реферального баланса определённой суммы в пользу другого адреса.\r\n        */\r\n        require(amount > 0);\r\n        require(softCapReached);\r\n        uint256 value = refBalance[msg.sender];\r\n        require(value >= amount);\r\n        \r\n        refBalance[msg.sender] = value-amount;\r\n        \r\n        receiver.transfer(amount);\r\n        emit OnWithdrawTo(msg.sender, receiver, amount, now);\r\n    }\r\n    \r\n    function deinvest() public softCapFailed {\r\n        /* \r\n            Вывод средств инвестора в случае провала softCap. Модификатор проверяет время и не позволяет \r\n            выводить средства до завершения периода softCapPeriod, а также в случае, если Soft Cap был выполнен.\r\n        */\r\n            \r\n        uint256 tokens = tokenBalance[msg.sender];\r\n        require(tokens > 0);\r\n        \r\n        tokenBalance[msg.sender] = 0;\r\n        tokenSupply -= tokens;\r\n        uint256 money = tokens * tokenPrice / 1e18;\r\n        msg.sender.transfer(money);\r\n        emit OnDeinvest(msg.sender, tokens, money, now);\r\n    }\r\n    \r\n    function goESM() public { \r\n        /*  \r\n            Обмен на токены Ether State Main. При вызове этого метода, все токены EST будут сожжены,\r\n            и сформируется соответствующий Event.\r\n        */\r\n       \r\n        require(softCapReached);\r\n        uint256 tokens = tokenBalance[msg.sender];\r\n        require(tokens > 0);\r\n        \r\n        tokenBalance[msg.sender] = 0;\r\n        tokenSupply -= tokens;\r\n        emit OnExchangeForESM(msg.sender, tokens, now);\r\n    }\r\n\r\n    function transfer(address receiver) public {\r\n        uint256 tokens = tokenBalance[msg.sender];\r\n        require(tokens > 0);\r\n\r\n        tokenBalance[msg.sender] = 0;\r\n        tokenBalance[receiver] += tokens;\r\n\r\n        emit OnTransfer(msg.sender, receiver, tokens, now);\r\n    }\r\n    \r\n    event OnInvest (\r\n        address investor,\r\n        uint256 value,\r\n        uint256 tokensGranted,\r\n        address ref1,\r\n        address ref2,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event OnWithdraw (\r\n        address indexed investor,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnWithdrawTo (\r\n        address indexed investor,\r\n        address indexed receiver,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event OnDeinvest (\r\n        address indexed investor,\r\n        uint256 tokensBurned,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event OnExchangeForESM (\r\n        address indexed investor,\r\n        uint256 tokensBurned,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnTransfer (\r\n        address investorA,\r\n        address investorB,\r\n        uint256 tokens,\r\n        uint256 timestamp\r\n    );\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapMoment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref1\",\"type\":\"address\"},{\"name\":\"ref2\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAmountTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goESM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensGranted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ref2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDeinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnExchangeForESM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investorB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnTransfer\",\"type\":\"event\"}]","ContractName":"EtherStateEquivalentToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa2bae40a069c25b5ed76e2c228be1323a52e2a2093ecefb5376f8d3d0b2fa92"}]}