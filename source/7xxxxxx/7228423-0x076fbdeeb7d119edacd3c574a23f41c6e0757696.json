{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n _____                                                        _   \r\n/__   \\_ __ ___  __ _ ___ _   _ _ __ ___    /\\  /\\_   _ _ __ | |_ \r\n  / /\\/ '__/ _ \\/ _` / __| | | | '__/ _ \\  / /_/ / | | | '_ \\| __|\r\n / /  | | |  __/ (_| \\__ \\ |_| | | |  __/ / __  /| |_| | | | | |_ \r\n \\/   |_|  \\___|\\__,_|___/\\__,_|_|  \\___| \\/ /_/  \\__,_|_| |_|\\__|\r\n\r\n\r\n Treasure Hunt\r\n\r\n Buy a box with 0.1 ETH for your chance to find hidden treasure.\r\n\r\n You have the chance to win a portion of the Jackpot\r\n\r\n When all the boxes have been opened or 5 treasure chests are found,\r\n the board resets with the Jackpot carrying over to the next game\r\n\r\n You will need Metamask or Trustwallet to play\r\n\r\n GREEN boxes are available to open, just click to open then pay 0.1 ETH\r\n\r\n RED boxes have been opened and were empty\r\n\r\n CHESTS are where treasure was discovered\r\n\r\n COPY your maternode link and send it to your friends\r\n Whenever they buy a box using your link, you get 10% of their\r\n bet!!!!!\r\n\r\n COME JOIN THE HUNT\r\n\r\n website:  https:treasurehunter.ga\r\n\r\n discord:  https://discord.gg/VQwAtyy\r\n                                                                  \r\n*/\r\n\r\n\r\ncontract TreasureHunt {\r\n    using SafeMath for uint;\r\n\r\n\r\n    event Winner(\r\n        address customerAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    event Bet(\r\n        address customerAddress,\r\n        uint256 number\r\n    );\r\n\r\n     event Restart(\r\n        uint256 number\r\n    );\r\n    \r\n    mapping (uint8 => address[]) playersByNumber ;\r\n    mapping (bytes32 => bool) gameNumbers;\r\n    mapping (bytes32 => bool) prizeNumbers;\r\n    mapping (uint8 => bool) Prizes;\r\n    mapping (uint8 => bool) PrizeLocations;\r\n    mapping (uint8 => bool) usedNumbers;\r\n\r\n\r\n    uint8[] public numbers;\r\n    uint8[] public PrizeNums;\r\n    bytes32[] public prizeList;\r\n    uint public lastNumber;\r\n\r\n    bytes32[101] bytesArray;\r\n\r\n    uint public gameCount = 1;\r\n\r\n    uint public minBet = 0.1 ether;\r\n    uint public jackpot = 0;\r\n    uint8 public prizeCount = 0;\r\n\r\n    uint8 public prizeMax = 10;\r\n\r\n    uint public houseRate = 40;  //4%\r\n    uint public referralRate = 100; //10%\r\n\r\n    uint8 public numberCount = 0;\r\n    uint maxNum = 100;\r\n\r\n    uint8 maxPrizeNum = 5;\r\n\r\n    \r\n    address owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        prizeCount = 0;\r\n        gameCount = gameCount + 1;\r\n        numberCount = 0;\r\n        for (uint8 i = 1; i<maxNum+1; i++) {\r\n            bytesArray[i] = 0x0;\r\n            usedNumbers[i] = false;\r\n        }\r\n       \r\n    }\r\n\r\n\r\n    function contains(uint8 number) public view returns (bool){\r\n        return usedNumbers[number];\r\n    }\r\n\r\n    function enterNumber(uint8 number, address _referrer) payable public {\r\n        //bytes32 bytesNumber = bytes32(number);\r\n\r\n        require(!contains(number));\r\n        require(msg.value >= minBet);\r\n        require(number <= maxNum+1);\r\n\r\n        numberCount += 1;\r\n        \r\n\r\n        uint betAmount = msg.value;\r\n\r\n        uint houseFee = SafeMath.div(SafeMath.mul(betAmount, houseRate),1000);\r\n\r\n        owner.transfer(houseFee);\r\n\r\n        betAmount = SafeMath.sub(betAmount,houseFee);\r\n\r\n\r\n        if(\r\n        // is this a referred purchase?\r\n            _referrer != 0x0000000000000000000000000000000000000000 &&\r\n            _referrer != msg.sender)\r\n            {\r\n                uint refFee = SafeMath.div(SafeMath.mul(betAmount, referralRate),1000);\r\n                \r\n                _referrer.transfer(refFee);\r\n                betAmount = SafeMath.sub(betAmount,refFee);\r\n            }\r\n\r\n        uint8 checkPrize = random();\r\n        jackpot = address(this).balance;\r\n        if (number == checkPrize||number == checkPrize+10||number == checkPrize+20||number == checkPrize+30||number == checkPrize+40||number == checkPrize+50||number == checkPrize+60||number == checkPrize+70||number == checkPrize+80||number == checkPrize+90) {\r\n        \r\n                prizeCount = prizeCount + 1;\r\n                payout(prizeCount);\r\n                bytesArray[number] = 0x2;\r\n  \r\n        } else {\r\n            bytesArray[number] = 0x1;\r\n        }\r\n\r\n        //playersByNumber[number].push(msg.sender);\r\n        numbers.push(number);\r\n        usedNumbers[number] = true;\r\n        //gameNumbers.push(number);\r\n\r\n        emit Bet(msg.sender, number);\r\n\r\n        if (numberCount >= maxNum-1) {\r\n            restartGame();\r\n        }\r\n        \r\n    }\r\n\r\n    function payout(uint8 prizeNum)  {\r\n\r\n        uint winAmount = 0;\r\n        jackpot = address(this).balance;\r\n        //msg.sender.transfer(jackpot);\r\n        // winAmount = SafeMath.div(SafeMath.mul(jackpot,100),10);\r\n        // msg.sender.transfer(winAmount);\r\n\r\n        uint prizelevel = randomPrize();\r\n        \r\n        if (prizelevel == 1){   //payout 10% of jackpot\r\n\r\n            winAmount = SafeMath.div(SafeMath.mul(jackpot,10),100);\r\n            msg.sender.transfer(winAmount);\r\n\r\n        } else if (prizelevel == 2) {\r\n\r\n            winAmount = SafeMath.div(SafeMath.mul(jackpot,20),100);\r\n            msg.sender.transfer(winAmount);\r\n\r\n        } else if (prizelevel == 3) {\r\n\r\n            winAmount = SafeMath.div(SafeMath.mul(jackpot,30),100);\r\n            msg.sender.transfer(winAmount);\r\n\r\n        } else if (prizelevel == 4) {\r\n\r\n            winAmount = SafeMath.div(SafeMath.mul(jackpot,40),100);\r\n            msg.sender.transfer(winAmount);\r\n\r\n        } else if (prizelevel >= 5) {\r\n\r\n            winAmount = SafeMath.div(SafeMath.mul(jackpot,70),100);\r\n            msg.sender.transfer(winAmount);\r\n            \r\n\r\n        }\r\n\r\n        // if (prizeCount >= maxPrizeNum){\r\n        //     restartGame();\r\n        // }\r\n\r\n        emit Winner(msg.sender,winAmount);\r\n        \r\n    }\r\n\r\n    function restartGame() internal {\r\n        //reset values\r\n        prizeCount = 0;\r\n        delete numbers;\r\n        delete PrizeNums;\r\n        delete bytesArray;\r\n        //delete usedNumbers;\r\n        gameCount = gameCount + 1;\r\n        numberCount = 0;\r\n        for (uint8 i = 0; i<101; i++) {\r\n            //bytesArray[i] = 0x0;\r\n            usedNumbers[i] = false;\r\n        }\r\n        emit Restart(gameCount);\r\n    }\r\n\r\n\r\n  function restartRemote() public {\r\n        //reset values\r\n        require(msg.sender == owner);\r\n        prizeCount = 0;\r\n        delete numbers;\r\n        delete PrizeNums;\r\n        delete bytesArray;\r\n        //delete usedNumbers;\r\n        gameCount = gameCount + 1;\r\n        numberCount = 0;\r\n        for (uint8 i = 0; i<101; i++) {\r\n            //bytesArray[i] = 0x0;\r\n            usedNumbers[i] = false;\r\n        }\r\n        emit Restart(gameCount);\r\n    }\r\n\r\n    function random() private view returns (uint8) {\r\n\r\n\r\n\r\n        uint8 prize = uint8(uint256(keccak256(block.timestamp, block.difficulty)) % prizeMax) + 1;\r\n\r\n        PrizeNums.push(prize);\r\n\r\n        return(prize);\r\n\r\n \r\n    }\r\n\r\n    function randomPrize() private view returns (uint8) {\r\n\r\n\r\n\r\n        uint8 prizeLevel = uint8(uint256(keccak256(block.timestamp, block.difficulty)) % 5) + 1;\r\n\r\n        return(prizeLevel);\r\n\r\n \r\n    }\r\n\r\n    function jackpotDeposit() public payable \r\n    {\r\n\r\n    }\r\n\r\n    function prizeContains(uint8 number) returns (uint8){\r\n        return PrizeNums[number];\r\n    }\r\n\r\n    function getArray() constant returns (bytes32[101])\r\n    {\r\n        return bytesArray;\r\n    }\r\n\r\n    function getValue(uint8 x) constant returns (bytes32)\r\n    {\r\n        return bytesArray[x];\r\n    }\r\n\r\n    function setMaxPrizeNum(uint8 maxNum) public\r\n    {\r\n        require(msg.sender == owner);\r\n        maxPrizeNum = maxNum;\r\n    }\r\n\r\n\r\n\r\n    function getPrize(uint8 x) constant returns (uint8)\r\n        {\r\n            return PrizeNums[x];\r\n        }\r\n\r\n    function getPrizeNumber(bytes32 x) constant returns (bool)\r\n        {\r\n            return prizeNumbers[x];\r\n        }\r\n\r\n    function getEthValue() public view returns (uint)\r\n    {\r\n        return address(this).balance;\r\n    } \r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"getPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prizeNum\",\"type\":\"uint8\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartRemote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PrizeNums\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"jackpotDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"enterNumber\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"prizeContains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"getPrizeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[101]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxNum\",\"type\":\"uint8\"}],\"name\":\"setMaxPrizeNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Restart\",\"type\":\"event\"}]","ContractName":"TreasureHunt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b2aa45c7aec953c8f081850f2e5343d9463532bb132685b383255c6589980175"}]}