{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n//pragma experimental ABIEncoderV2;\r\n/**\r\n  * @title Luckybar\r\n  * @author Joshua Choi\r\n  * @dev\r\n  *\r\n  */\r\n\r\npragma solidity ^0.4.24;\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() public {\r\n    pausers.add(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    pausers.remove(msg.sender);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\ncontract Pausable is PauserRole {\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool private _paused = false;\r\n\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(_balances[to].add(value) > _balances[to]);\r\n    require(to != address(0));\r\n\r\n    uint previousBalances = _balances[from].add(_balances[to]);\r\n    assert(_balances[from].add(_balances[to]) == previousBalances);\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieve tokens from one address to owner\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function retrieveFrom(\r\n    address from,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _balances[from]);\r\n    require(_balances[msg.sender].add(value) > _balances[msg.sender]);\r\n\r\n    uint previousBalances = _balances[from].add(_balances[msg.sender]);\r\n    assert(_balances[from].add(_balances[msg.sender]) == previousBalances);\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[msg.sender] = _balances[msg.sender].add(value);\r\n    emit Transfer(from, msg.sender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param amount The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      amount);\r\n    _burn(account, amount);\r\n  }\r\n  \r\n    /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    _allowed[msg.sender][_spender] = (\r\n    _allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = _allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      _allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      _allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n    return true;\r\n   }\r\n}\r\n\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function sudoBurnFrom(address from, uint256 value) public {\r\n    _burn(from, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\r\n   * an additional Burn event.\r\n   */\r\n  function _burn(address who, uint256 value) internal {\r\n    super._burn(who, value);\r\n  }\r\n}\r\n\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n  Roles.Role private minters;\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(spender, value);\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseAllowance(spender, addedValue);\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseAllowance(spender, subtractedValue);\r\n  }\r\n}\r\n\r\ncontract StandardTokenERC20Custom is ERC20Detailed, ERC20Burnable, ERC20Pausable, ERC20Mintable {\r\n\r\n  using SafeERC20 for ERC20;\r\n\r\n  //   string public name = \"TOKA CHIP\";\r\n  //   string public symbol = \"CHIP\";\r\n  //   uint8 public decimals = 18;\r\n  //   uint256 private _totalSupply = 4600000000 * (10 ** uint256(decimals));\r\n  //   4600000000000000000000000000\r\n\r\n  constructor(string name, string symbol, uint8 decimals, uint256 _totalSupply)\r\n    ERC20Pausable()\r\n    ERC20Burnable()\r\n    ERC20Detailed(name, symbol, decimals)\r\n    ERC20()\r\n    public\r\n  {\r\n    _mint(msg.sender, _totalSupply * (10 ** uint256(decimals)));\r\n    addPauser(msg.sender);\r\n    addMinter(msg.sender);\r\n  }\r\n\r\n  function approveAndPlayFunc(address _spender, uint _value, string _func) public returns(bool success){\r\n    require(_spender != address(this));\r\n    require(super.approve(_spender, _value));\r\n    require(_spender.call(bytes4(keccak256(string(abi.encodePacked(_func, \"(address,uint256)\")))), msg.sender, _value));\r\n    return true;\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownership\r\n * @dev Ownership contract establishes ownership (via owner address) and provides basic authorization control\r\n * functions (transferring of ownership and ownership modifier).\r\n */\r\n \r\ncontract Ownership {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev The establishOwnership constructor sets original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function estalishOwnership() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows current owner to transfer control/ownership of contract to a newOwner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Termination contract for terminating the smart contract.\r\n * Terminate function can only be called by the current owner,\r\n * returns all funds in contract to owner and then terminates.\r\n */\r\ncontract Bank is Ownership {\r\n\r\n    function terminate() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function withdraw(uint amount) payable public onlyOwner {\r\n        if(!owner.send(amount)) revert();\r\n    }\r\n\r\n    function depositSpecificAmount(uint _deposit) payable public onlyOwner {\r\n        require(msg.value == _deposit);\r\n    }\r\n\r\n    function deposit() payable public onlyOwner {\r\n        require(msg.value > 0);\r\n    }\r\n\r\n /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n}\r\n\r\n/**\r\n * @dev contract that sets terms of the minBet, houseEdge,\r\n * & contains betting and fallback function.\r\n */\r\ncontract LuckyBar is Bank {\r\n\r\n    struct record {\r\n        uint[5] date;\r\n        uint[5] amount;\r\n        address[5] account;\r\n    }\r\n    \r\n    struct pair {\r\n        uint256 maxBet;\r\n        uint256 minBet;\r\n        uint256 houseEdge; // in %\r\n        uint256 reward;\r\n        bool bEnabled;\r\n        record ranking;\r\n        record latest;\r\n    }\r\n\r\n    pair public sE2E;\r\n    pair public sE2C;\r\n    pair public sC2E;\r\n    pair public sC2C;\r\n\r\n    uint256 public E2C_Ratio;\r\n    uint256 private salt;\r\n    IERC20 private token;\r\n    StandardTokenERC20Custom private chip;\r\n    address public manager;\r\n\r\n    // Either True or False + amount\r\n    //event Won(bool _status, string _rewardType, uint _amount, record[5], record[5]); // it does not work maybe because of its size is too big\r\n    event Won(bool _status, string _rewardType, uint _amount);\r\n    event Swapped(string _target, uint _amount);\r\n\r\n    // sets the stakes of the bet\r\n    constructor() payable public {\r\n        estalishOwnership();\r\n        setProperties(\"thisissaltIneedtomakearandomnumber\", 100000);\r\n        setToken(0x0bfd1945683489253e401485c6bbb2cfaedca313); // toka mainnet\r\n        setChip(0x27a88bfb581d4c68b0fb830ee4a493da94dcc86c); // chip mainnet\r\n        setGameMinBet(100e18, 0.1 ether, 100e18, 0.1 ether);\r\n        setGameMaxBet(10000000e18, 1 ether, 100000e18, 1 ether);\r\n        setGameFee(1,0,5,5);\r\n        enableGame(true, true, false, true);\r\n        setReward(0,5000,0,5000);\r\n        manager = owner;\r\n    }\r\n    \r\n    function getRecordsE2E() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\r\n        return (sE2E.ranking.date,sE2E.ranking.amount,sE2E.ranking.account, sE2E.latest.date,sE2E.latest.amount,sE2E.latest.account);\r\n    }\r\n    function getRecordsE2C() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\r\n        return (sE2C.ranking.date,sE2C.ranking.amount,sE2C.ranking.account, sE2C.latest.date,sE2C.latest.amount,sE2C.latest.account);\r\n    }\r\n    function getRecordsC2E() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\r\n        return (sC2E.ranking.date,sC2E.ranking.amount,sC2E.ranking.account, sC2E.latest.date,sC2E.latest.amount,sC2E.latest.account);\r\n    }\r\n    function getRecordsC2C() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\r\n        return (sC2C.ranking.date,sC2C.ranking.amount,sC2C.ranking.account, sC2C.latest.date,sC2C.latest.amount,sC2C\r\n        .latest.account);\r\n    }\r\n\r\n    function emptyRecordsE2E() public onlyOwner {\r\n        for(uint i=0;i<5;i++) {\r\n            sE2E.ranking.amount[i] = 0;\r\n            sE2E.ranking.date[i] = 0;\r\n            sE2E.ranking.account[i] = 0x0;\r\n            sE2E.latest.amount[i] = 0;\r\n            sE2E.latest.date[i] = 0;\r\n            sE2E.latest.account[i] = 0x0;\r\n        }\r\n    }\r\n\r\n    function emptyRecordsE2C() public onlyOwner {\r\n        for(uint i=0;i<5;i++) {\r\n            sE2C.ranking.amount[i] = 0;\r\n            sE2C.ranking.date[i] = 0;\r\n            sE2C.ranking.account[i] = 0x0;\r\n            sE2C.latest.amount[i] = 0;\r\n            sE2C.latest.date[i] = 0;\r\n            sE2C.latest.account[i] = 0x0;\r\n        }\r\n    }\r\n\r\n    function emptyRecordsC2E() public onlyOwner {\r\n        for(uint i=0;i<5;i++) {\r\n            sC2E.ranking.amount[i] = 0;\r\n            sC2E.ranking.date[i] = 0;\r\n            sC2E.ranking.account[i] = 0x0;\r\n            sC2E.latest.amount[i] = 0;\r\n            sC2E.latest.date[i] = 0;\r\n            sC2E.latest.account[i] = 0x0;     \r\n        }\r\n    }\r\n\r\n    function emptyRecordsC2C() public onlyOwner {\r\n        for(uint i=0;i<5;i++) {\r\n            sC2C.ranking.amount[i] = 0;\r\n            sC2C.ranking.date[i] = 0;\r\n            sC2C.ranking.account[i] = 0x0;\r\n            sC2C.latest.amount[i] = 0;\r\n            sC2C.latest.date[i] = 0;\r\n            sC2C.latest.account[i] = 0x0;\r\n        }\r\n    }\r\n\r\n\r\n    function setReward(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\r\n        sC2C.reward = C2C;\r\n        sE2C.reward = E2C;\r\n        sC2E.reward = C2E;\r\n        sE2E.reward = E2E;\r\n    }\r\n    \r\n    function enableGame(bool C2C, bool E2C, bool C2E, bool E2E) public onlyOwner {\r\n        sC2C.bEnabled = C2C;\r\n        sE2C.bEnabled = E2C;\r\n        sC2E.bEnabled = C2E;\r\n        sE2E.bEnabled = E2E;\r\n    }\r\n\r\n    function setGameFee(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\r\n        sC2C.houseEdge = C2C;\r\n        sE2C.houseEdge = E2C;\r\n        sC2E.houseEdge = C2E;\r\n        sE2E.houseEdge = E2E;\r\n    }\r\n    \r\n    function setGameMaxBet(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\r\n        sC2C.maxBet = C2C;\r\n        sE2C.maxBet = E2C;\r\n        sC2E.maxBet = C2E;\r\n        sE2E.maxBet = E2E;\r\n    }\r\n\r\n    function setGameMinBet(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\r\n        sC2C.minBet = C2C;\r\n        sE2C.minBet = E2C;\r\n        sC2E.minBet = C2E;\r\n        sE2E.minBet = E2E;\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setChip(address _chip) public onlyOwner {\r\n        chip = StandardTokenERC20Custom(_chip);\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    function setProperties(string _salt, uint _E2C_Ratio) public onlyOwner {\r\n        require(_E2C_Ratio > 0);\r\n        salt = uint(keccak256(_salt));\r\n        E2C_Ratio = _E2C_Ratio;\r\n    }\r\n\r\n    function() public { //fallback\r\n        revert();\r\n    }\r\n\r\n    function swapC2T(address _from, uint256 _value) payable public {\r\n        require(chip.transferFrom(_from, manager, _value));\r\n        require(token.transferFrom(manager, _from, _value));\r\n\r\n        emit Swapped(\"TOKA\", _value);\r\n    }\r\n\r\n    function swapT2C(address _from, uint256 _value) payable public {\r\n        require(token.transferFrom(_from, manager, _value));\r\n        require(chip.transferFrom(manager, _from, _value));\r\n\r\n        emit Swapped(\"CHIP\", _value);\r\n    }\r\n\r\n    function playC2C(address _from, uint256 _value) payable public {\r\n        require(sC2C.bEnabled);\r\n        require(_value >= sC2C.minBet && _value <= sC2C.maxBet);\r\n        require(chip.transferFrom(_from, manager, _value));\r\n\r\n        uint256 amountWon = _value * (50 + uint256(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sC2C.houseEdge) / 100;\r\n        require(chip.transferFrom(manager, _from, amountWon + _value * sC2C.reward)); // reward. but set to be zero.\r\n        \r\n        // ranking\r\n        for(uint i=0;i<5;i++) {\r\n            if(sC2C.ranking.amount[i] < amountWon) {\r\n                for(uint j=4;j>i;j--) {\r\n                    sC2C.ranking.amount[j] = sC2C.ranking.amount[j-1];\r\n                    sC2C.ranking.date[j] = sC2C.ranking.date[j-1];\r\n                    sC2C.ranking.account[j] = sC2C.ranking.account[j-1];\r\n                }\r\n                sC2C.ranking.amount[i] = amountWon;\r\n                sC2C.ranking.date[i] = now;\r\n                sC2C.ranking.account[i] = _from;\r\n                break;\r\n            }\r\n        }\r\n        // latest\r\n        for(i=4;i>0;i--) {\r\n            sC2C.latest.amount[i] = sC2C.latest.amount[i-1];\r\n            sC2C.latest.date[i] = sC2C.latest.date[i-1];\r\n            sC2C.latest.account[i] = sC2C.latest.account[i-1];\r\n        }\r\n        sC2C.latest.amount[0] = amountWon;\r\n        sC2C.latest.date[0] = now;\r\n        sC2C.latest.account[0] = _from;\r\n\r\n        emit Won(amountWon > _value, \"CHIP\", amountWon);//, sC2C.ranking, sC2C.latest);\r\n    }\r\n\r\n    function playC2E(address _from, uint256 _value) payable public {\r\n        require(sC2E.bEnabled);\r\n        require(_value >= sC2E.minBet && _value <= sC2E.maxBet);\r\n        require(chip.transferFrom(_from, manager, _value));\r\n\r\n        uint256 amountWon = _value * (50 + uint256(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sC2E.houseEdge) / 100 / E2C_Ratio;\r\n        require(_from.send(amountWon));\r\n        \r\n        // ranking\r\n        for(uint i=0;i<5;i++) {\r\n            if(sC2E.ranking.amount[i] < amountWon) {\r\n                for(uint j=4;j>i;j--) {\r\n                    sC2E.ranking.amount[j] = sC2E.ranking.amount[j-1];\r\n                    sC2E.ranking.date[j] = sC2E.ranking.date[j-1];\r\n                    sC2E.ranking.account[j] = sC2E.ranking.account[j-1];\r\n                }\r\n                sC2E.ranking.amount[i] = amountWon;\r\n                sC2E.ranking.date[i] = now;\r\n                sC2E.ranking.account[i] = _from;\r\n                break;\r\n            }\r\n        }\r\n        // latest\r\n        for(i=4;i>0;i--) {\r\n            sC2E.latest.amount[i] = sC2E.latest.amount[i-1];\r\n            sC2E.latest.date[i] = sC2E.latest.date[i-1];\r\n            sC2E.latest.account[i] = sC2E.latest.account[i-1];\r\n        }\r\n        sC2E.latest.amount[0] = amountWon;\r\n        sC2E.latest.date[0] = now;\r\n        sC2E.latest.account[0] = _from;\r\n\r\n        emit Won(amountWon > (_value / E2C_Ratio), \"ETH\", amountWon);//, sC2E.ranking, sC2E.latest);\r\n    }\r\n\r\n    function playE2E() payable public {\r\n        require(sE2E.bEnabled);\r\n        require(msg.value >= sE2E.minBet && msg.value <= sE2E.maxBet);\r\n\r\n        uint amountWon = msg.value * (50 + uint(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sE2E.houseEdge) / 100;\r\n        require(msg.sender.send(amountWon));\r\n        require(chip.transferFrom(manager, msg.sender, msg.value * sE2E.reward)); // reward!!\r\n\r\n        // ranking\r\n        for(uint i=0;i<5;i++) {\r\n            if(sE2E.ranking.amount[i] < amountWon) {\r\n                for(uint j=4;j>i;j--) {\r\n                    sE2E.ranking.amount[j] = sE2E.ranking.amount[j-1];\r\n                    sE2E.ranking.date[j] = sE2E.ranking.date[j-1];\r\n                    sE2E.ranking.account[j] = sE2E.ranking.account[j-1];\r\n                }\r\n                sE2E.ranking.amount[i] = amountWon;\r\n                sE2E.ranking.date[i] = now;\r\n                sE2E.ranking.account[i] = msg.sender;\r\n                break;\r\n            }\r\n        }\r\n        // latest\r\n        for(i=4;i>0;i--) {\r\n            sE2E.latest.amount[i] = sE2E.latest.amount[i-1];\r\n            sE2E.latest.date[i] = sE2E.latest.date[i-1];\r\n            sE2E.latest.account[i] = sE2E.latest.account[i-1];\r\n        }\r\n        sE2E.latest.amount[0] = amountWon;\r\n        sE2E.latest.date[0] = now;\r\n        sE2E.latest.account[0] = msg.sender;\r\n\r\n        emit Won(amountWon > msg.value, \"ETH\", amountWon);//, sE2E.ranking, sE2E.latest);\r\n    }\r\n\r\n    function playE2C() payable public {\r\n        require(sE2C.bEnabled);\r\n        require(msg.value >= sE2C.minBet && msg.value <= sE2C.maxBet);\r\n\r\n        uint amountWon = msg.value * (50 + uint(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sE2C.houseEdge) / 100 * E2C_Ratio;\r\n        require(chip.transferFrom(manager, msg.sender, amountWon));\r\n        require(chip.transferFrom(manager, msg.sender, msg.value * sE2C.reward)); // reward!!\r\n        \r\n        // ranking\r\n        for(uint i=0;i<5;i++) {\r\n            if(sE2C.ranking.amount[i] < amountWon) {\r\n                for(uint j=4;j>i;j--) {\r\n                    sE2C.ranking.amount[j] = sE2C.ranking.amount[j-1];\r\n                    sE2C.ranking.date[j] = sE2C.ranking.date[j-1];\r\n                    sE2C.ranking.account[j] = sE2C.ranking.account[j-1];\r\n                }\r\n                sE2C.ranking.amount[i] = amountWon;\r\n                sE2C.ranking.date[i] = now;\r\n                sE2C.ranking.account[i] = msg.sender;\r\n                break;\r\n            }\r\n        }\r\n        // latest\r\n        for(i=4;i>0;i--) {\r\n            sE2C.latest.amount[i] = sE2C.latest.amount[i-1];\r\n            sE2C.latest.date[i] = sE2C.latest.date[i-1];\r\n            sE2C.latest.account[i] = sE2C.latest.account[i-1];\r\n        }\r\n        sE2C.latest.amount[0] = amountWon;\r\n        sE2C.latest.date[0] = now;\r\n        sE2C.latest.account[0] = msg.sender;\r\n\r\n        emit Won(amountWon > (msg.value * E2C_Ratio), \"CHIP\", amountWon);//, sE2C.ranking, sE2C.latest);\r\n    }\r\n\r\n    // function for owner to check contract balance\r\n    function checkContractBalance() onlyOwner public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    function checkContractBalanceToka() onlyOwner public view returns(uint) {\r\n        return token.balanceOf(manager);\r\n    }\r\n    function checkContractBalanceChip() onlyOwner public view returns(uint) {\r\n        return chip.balanceOf(manager);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"C2C\",\"type\":\"bool\"},{\"name\":\"E2C\",\"type\":\"bool\"},{\"name\":\"C2E\",\"type\":\"bool\"},{\"name\":\"E2E\",\"type\":\"bool\"}],\"name\":\"enableGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_salt\",\"type\":\"string\"},{\"name\":\"_E2C_Ratio\",\"type\":\"uint256\"}],\"name\":\"setProperties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C2C\",\"type\":\"uint256\"},{\"name\":\"E2C\",\"type\":\"uint256\"},{\"name\":\"C2E\",\"type\":\"uint256\"},{\"name\":\"E2E\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBalanceToka\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyRecordsE2E\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"depositSpecificAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyRecordsC2C\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sC2E\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"minBet\",\"type\":\"uint256\"},{\"name\":\"houseEdge\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"bEnabled\",\"type\":\"bool\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"ranking\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"latest\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sE2C\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"minBet\",\"type\":\"uint256\"},{\"name\":\"houseEdge\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"bEnabled\",\"type\":\"bool\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"ranking\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"latest\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyRecordsC2E\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsC2C\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sE2E\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"minBet\",\"type\":\"uint256\"},{\"name\":\"houseEdge\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"bEnabled\",\"type\":\"bool\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"ranking\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"latest\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBalanceChip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsE2E\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapT2C\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C2C\",\"type\":\"uint256\"},{\"name\":\"E2C\",\"type\":\"uint256\"},{\"name\":\"C2E\",\"type\":\"uint256\"},{\"name\":\"E2E\",\"type\":\"uint256\"}],\"name\":\"setGameFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsC2E\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"E2C_Ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playE2E\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C2C\",\"type\":\"uint256\"},{\"name\":\"E2C\",\"type\":\"uint256\"},{\"name\":\"C2E\",\"type\":\"uint256\"},{\"name\":\"E2E\",\"type\":\"uint256\"}],\"name\":\"setGameMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyRecordsE2C\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chip\",\"type\":\"address\"}],\"name\":\"setChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"playC2E\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"estalishOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sC2C\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"minBet\",\"type\":\"uint256\"},{\"name\":\"houseEdge\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"bEnabled\",\"type\":\"bool\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"ranking\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"date\",\"type\":\"uint256[5]\"},{\"name\":\"amount\",\"type\":\"uint256[5]\"},{\"name\":\"account\",\"type\":\"address[5]\"}],\"name\":\"latest\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapC2T\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsE2C\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"uint256[5]\"},{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C2C\",\"type\":\"uint256\"},{\"name\":\"E2C\",\"type\":\"uint256\"},{\"name\":\"C2E\",\"type\":\"uint256\"},{\"name\":\"E2E\",\"type\":\"uint256\"}],\"name\":\"setGameMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"playC2C\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playE2C\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_rewardType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LuckyBar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd8f5725df3758569a9bb9fcf2f7458c746f97bb30d31e81bae398c1e461ad5d"}]}