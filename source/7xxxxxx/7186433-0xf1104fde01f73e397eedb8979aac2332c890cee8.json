{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n| Sheltercoin ICO 'Sheltercoin Token' Crowdfunding contract\r\n| Date - 16-November-2017\r\n| Blockchain Date - Dec 4 2018\r\n| copyright 2017 zMint Limited. All Rights Reserved.\r\n| authors A Campbell, S Outtrim\r\n| Vers - 000 v001\r\n| ------------------------\r\n| Updates \r\n| Date 25-Aug-17 ADC Finalising format\r\n| Date 27-Aug-17 ADC Code review amendments\r\n| Date 01-Sep-17 ADC Changes \r\n| Date 16-Nov-17 ADC Sheltercoin Pre-ICO phase\r\n| Date 27-Nov-17 ADC Pragma 17 Changes\r\n| Date 12-Dec-17 SO, ADC Code Review, testing; production migration.\r\n| Date 01-May-18 ADC Code changes\r\n| Date 12-May-18 ADC KYC Client Verication \r\n| Date 29-May-18 SO, ADC Code Revew, testing\r\n| Date 11-Jun-18 SO  hard coding, testing, production migration. \r\n|                    Removed TransferAnyERC20Token, KYC contract shell\r\n|                    Added whitelist and blacklist code\r\n|                    Added bonus calc to ICO function\r\n| Date 08-Aug-18 SO  Updated function to constructor()\r\n|                    Added SHLT specific function to SHLT code, replaced names\r\n| Date 07-Feb-19 SO  Production deployment of new SHLT token\r\n|                    \r\n| \r\n| Sheltercoin.io :-)\r\n| :-) hAVe aN aWeSoMe iCo :-) \r\n|\r\n// ---------------------------------------------------------------------------- */\r\n\r\n\r\n/* =============================================================================\r\n| Sheltercoin ICO 'Sheltercoin Token & Crowdfunding \r\n|\r\n| 001. contract - ERC20 Token Interface\r\n|\r\n|\r\n|\r\n| Apache Licence\r\n| ============================================================================= */\r\n\r\n\r\n/* ============================================================================\r\n|\r\n| Token Standard #20 Interface\r\n| https://github.com/ethereum/EIPs/issues/20\r\n| \r\n| ============================================================================ */\r\n\r\n\r\ncontract ERC20Interface {\r\n    uint public totalSupply;\r\n    uint public tokensSold;\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) \r\n        public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant \r\n        returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, \r\n        uint _value);\r\n}\r\n\r\n\r\n\r\n/* ======================================================================\r\n|\r\n| 002. contract Owned \r\n| \r\n| ====================================================================== */\r\n\r\ncontract Owned {\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 002.01 - Current owner, and proposed new owner\r\n    | -----------------------------------------------------------------------*/\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 002.02 - Constructor - assign creator as the owner\r\n    // -----------------------------------------------------------------------*/\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 002.03 - Modifier to mark that a function can only be executed by the owner\r\n    | -----------------------------------------------------------------------*/\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 002.04 - Owner can initiate transfer of contract to a new owner\r\n    | -----------------------------------------------------------------------*/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n \r\n    /* ------------------------------------------------------------------------\r\n    | 002.05 - New owner has to accept transfer of contract\r\n    | -----------------------------------------------------------------------*/\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n/* ===================================================================================\r\n|\r\n| 003. contract Pausable\r\n|      Abstract contract that allows children to implement an emergency stop mechanism\r\n| \r\n| ==================================================================================== */\r\n\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n    /* ------------------------------------------------------------------------\r\n    | 003.01 - modifier to allow actions only when the contract IS paused\r\n    | -----------------------------------------------------------------------*/\r\n   modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 003.02 - modifier to allow actions only when the contract IS NOT paused\r\n    | -----------------------------------------------------------------------*/\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 003.01 - called by the owner to pause, triggers stopped state\r\n    | -----------------------------------------------------------------------*/\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 003.01 - called by the owner to unpause, returns to normal state\r\n    | -----------------------------------------------------------------------*/\r\n   function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/* ===================================================================================\r\n|\r\n| 004. contract Transferable\r\n|      Abstract contract that allows wallets the transfer mechanism\r\n| \r\n| ==================================================================================== */\r\n\r\ncontract Transferable is Owned {\r\n  event Transfer();\r\n  event Untransfer();\r\n\r\n  bool public flg_transfer = true;\r\n    /* ------------------------------------------------------------------------\r\n    | 004.01 - modifier to allow actions only when the contract IS transfer\r\n    | -----------------------------------------------------------------------*/\r\n   modifier whenNotTransfer() {\r\n    require(!flg_transfer);\r\n    _;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 004.02 - modifier to allow actions only when the contract IS NOT transfer\r\n    | -----------------------------------------------------------------------*/\r\n  modifier whenTransfer {\r\n    require(flg_transfer);\r\n    _;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 004.01 - called by the owner to transfer, triggers stopped state\r\n    | -----------------------------------------------------------------------*/\r\n  function transfer() public onlyOwner whenNotTransfer returns (bool) {\r\n    flg_transfer = true;\r\n    emit Transfer();\r\n    return true;\r\n  }\r\n   \r\n   /* ------------------------------------------------------------------------\r\n    | 004.01 - called by the owner to untransfer, returns to normal state\r\n    | -----------------------------------------------------------------------*/\r\n   function untransfer() public onlyOwner whenTransfer returns (bool) {\r\n    flg_transfer = false;\r\n    emit Untransfer();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n| 005. libraty Safe maths - OpenZeppelin\r\n| --------------------------------------------------------------------------- */\r\nlibrary SafeMath {\r\n\r\n    /* ------------------------------------------------------------------------\r\n    // 005.01 - safeAdd a number to another number, checking for overflows\r\n    // -----------------------------------------------------------------------*/\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    /* ------------------------------------------------------------------------\r\n    // 005.02 - safeSubtract a number from another number, checking for underflows\r\n    // -----------------------------------------------------------------------*/\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    /* ------------------------------------------------------------------------\r\n    // 005.03 - safeMuiltplier a number to another number, checking for underflows\r\n    // -----------------------------------------------------------------------*/\r\n    function safeMul(uint a, uint b) internal pure returns (uint256) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /* ------------------------------------------------------------------------\r\n    // 005.04 - safeDivision \r\n    // -----------------------------------------------------------------------*/\r\n    function safeDiv(uint a, uint b) internal pure returns (uint256) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n    /* ------------------------------------------------------------------------\r\n    // 005.05 - Max64\r\n    // -----------------------------------------------------------------------*/\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n    /* ------------------------------------------------------------------------\r\n    // 005.06 - Min64\r\n    // -----------------------------------------------------------------------*/\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n    /* ------------------------------------------------------------------------\r\n    // 005.07 - max256\r\n    // -----------------------------------------------------------------------*/\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    /* ------------------------------------------------------------------------\r\n    // 005.08 - min256\r\n    // -----------------------------------------------------------------------*/\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n/* ----------------------------------------------------------------------------\r\n| 006. contract Sheltercoin Token Configuration - pass through parameters\r\n| ---------------------------------------------------------------------------- */\r\n\r\ncontract SheltercoinTokCfg {\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 006.01 - Token symbol(), name() and decimals()\r\n    |------------------------------------------------------------------------ */\r\n    string public constant SYMBOL = \"SHLT\";\r\n    string public constant NAME = \"SHLT Sheltercoin.io\";\r\n    uint8 public constant DECIMALS = 8;\r\n    bool public flg001 = false;\r\n    \r\n\r\n\r\n\r\n    /* -----------------------------------------------------------------------\r\n    | 006.02 - Decimal factor for multiplications \r\n    | ------------------------------------------------------------------------*/\r\n    uint public constant TOKENS_SOFT_CAP = 1 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_HARD_CAP = 1000000000 * DECIMALSFACTOR; /* billion */\r\n    uint public constant TOKENS_TOTAL = 1000000000 * DECIMALSFACTOR;\r\n    uint public tokensSold = 0;\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 006.03 - Lot 1 Crowdsale start date and end date\r\n    | Do not use the `now` function here\r\n    | Good caluclator for sanity check for epoch - http://www.unixtimestamp.com/\r\n    | Start - Sunday 30-Jun-19 12:00:00 UTC \r\n    | End - Tuesday 30-Jun-20  12:00:00 UTC \r\n    | ----------------------------------------------------------------------- */\r\n    uint public constant DECIMALSFACTOR = 10**uint(DECIMALS);\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 006.04 - Lot 1 Crowdsale timings Soft Cap and Hard Cap, and Total tokens\r\n    | -------------------------------------------------------------------------- */\r\n    uint public START_DATE = 1582545600;  // 24-Feb-20 12:00:00 GMT\r\n    uint public END_DATE = 1614165071;    // 24-Feb-21 11:11:11 GMT\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 006.05 - Individual transaction contribution min and max amounts\r\n    | Set to 0 to switch off, or `x ether`\r\n    | ----------------------------------------------------------------------*/\r\n    uint public CONTRIBUTIONS_MIN = 0;\r\n    uint public CONTRIBUTIONS_MAX = 1000000 ether;\r\n}\r\n\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n| 007. - contract ERC20 Token, with the safeAddition of Symbol, name and Decimal\r\n| --------------------------------------------------------------------------*/\r\ncontract ERC20Token is ERC20Interface, Owned, Pausable, Transferable {\r\n    using SafeMath for uint;\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.01 - Symbol(), Name() and Decimals()\r\n    | ----------------------------------------------------------------------*/\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.02 - Balances for each account\r\n    | ----------------------------------------------------------------------*/\r\n    mapping(address => uint) balances;\r\n\r\n    /*------------------------------------------------------------------------\r\n    | 007.03 - Owner of account approves the transfer of an amount to another account\r\n    | ----------------------------------------------------------------------*/\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.04 - Constructor\r\n    | ----------------------------------------------------------------------*/\r\n    constructor (\r\n        string _symbol, \r\n        string _name, \r\n        uint8 _decimals, \r\n        uint _tokensSold\r\n    ) Owned() public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        tokensSold = _tokensSold;\r\n        balances[owner] = _tokensSold;\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.05 -Get the account balance of another account with address _owner\r\n    | ----------------------------------------------------------------------*/\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.06 - Transfer the balance from owner's account to another account\r\n    | ----------------------------------------------------------------------*/\r\n    function transfer(address _to, uint _amount) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount             // User has balance\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[msg.sender] = balances[msg.sender].safeSub(_amount);\r\n            balances[_to] = balances[_to].safeAdd(_amount);\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.07 - Allow _spender to withdraw from your Account, multiple times, up to the\r\n    |          _value amount. If this function is called again it overwrites the\r\n    |          current allowance with _value.\r\n    | ----------------------------------------------------------------------*/\r\n    function approve(\r\n        address _spender,\r\n        uint _amount\r\n    ) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.08 - Spender of tokens transfer an amount of tokens from the token owner's\r\n    |          balance to another account. The owner of the tokens must already\r\n    |          have approved this transfer\r\n    | ----------------------------------------------------------------------*/\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint _amount\r\n    ) public returns (bool success) {\r\n        if (balances[_from] >= _amount                  // _from a/c has a balance\r\n            && allowed[_from][msg.sender] >= _amount    // Transfer allowed\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].safeSub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_amount);\r\n            balances[_to] = balances[_to].safeAdd(_amount);\r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.09 - Returns the amount of tokens approved by the owner that can be\r\n    |          transferred to the spender's account\r\n    | ----------------------------------------------------------------------*/\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) public constant returns (uint remaining) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n| 008. contract SheltercoinToken - Sheltercoin ICO Crowdsale\r\n| --------------------------------------------------------------------------*/\r\ncontract SHLTSheltercoinToken is ERC20Token, SheltercoinTokCfg {\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.01 - Has the crowdsale been finalised?\r\n    | ----------------------------------------------------------------------*/\r\n    bool public finalised = false;\r\n    \r\n    /* ------------------------------------------------------------------------\r\n    | 007.02 - Number of Tokens per 1 ETH\r\n    |          This can be adjusted as the ETH/USD rate changes\r\n    |          \r\n    | 007.03 SO \r\n               Price per ETH $105.63 Feb 7 2019 coinmarketcap\r\n               1 ETH = 2000 SHLT\r\n               1 SHLT = 0.0005 ETH\r\n               USD 5c \r\n               1 billion SHLT = total hard cap \r\n    |\r\n    |          tokensPerEther  = 2000\r\n    |          tokensPerKEther = 2000000\r\n    |          \r\n\r\n    /* ----------------------------------------------------------------------*/\r\n    uint public tokensPerEther = 2000;    \r\n    uint public tokensPerKEther = 2000000;  \r\n    uint public etherSold = 0;\r\n    uint public weiSold = 0;\r\n    uint public tokens = 0;\r\n    uint public dspTokens = 0;\r\n    uint public dspTokensSold = 0;\r\n    uint public dspEther = 0;\r\n    uint public dspEtherSold = 0;\r\n    uint public dspWeiSold = 0;\r\n    uint public BONUS_VALUE = 0;\r\n    uint public bonusTokens = 0;\r\n\r\n// Emergency Disaster Relief \r\n    string public SCE_Shelter_ID;\r\n    string public SCE_Shelter_Desc;\r\n  //  string public SCE_Emergency_ID;\r\n    string public SCE_Emergency_Type;\r\n// string public SCE_UN_Body;\r\n    string public SCE_UN_Programme_ID;\r\n    string public SCE_Country;\r\n    string public SCE_Region; \r\n //   string public SCE_Area;\r\n    uint public SCE_START_DATE;\r\n    uint public SCE_END_DATE; \r\n    \r\n    /* ------------------------------------------------------------------------\r\n    | 007.04 - Wallet receiving the raised funds \r\n    |        - The ICO Contract address \r\n    | ----------------------------------------------------------------------*/\r\n    address public wallet;\r\n    address public tokenContractAdr;\r\n    /* ------------------------------------------------------------------------\r\n    | 007.05 - Crowdsale participant's accounts need to be client verified client before\r\n    |          the participant can move their tokens\r\n    | ----------------------------------------------------------------------*/\r\n    mapping(address => bool) public Whitelisted;\r\n    mapping(address => bool) public Blacklisted;\r\n\r\n    modifier isWhitelisted() {\r\n        require(Whitelisted[msg.sender] == true);\r\n        _;\r\n      }\r\n    \r\n    modifier isBlacklisted() {\r\n        require(Blacklisted[msg.sender] == true);\r\n        _;\r\n\r\n\r\n      }\r\n   \r\n    /* ------------------------------------------------------------------------\r\n    | 007.06 - Constructor\r\n    | ----------------------------------------------------------------------*/\r\n    constructor (address _wallet) \r\n       public ERC20Token(SYMBOL, NAME, DECIMALS, 0)\r\n    {\r\n        wallet = _wallet;\r\n        flg001 = true ;   \r\n\r\n    }\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.07 - Sheltercoin Owner can change the Crowdsale wallet address\r\n    |          Can be set at any time before or during the Crowdsale\r\n    |          Not relevant after the crowdsale is finalised as no more contributions\r\n    |          are accepted\r\n    | ----------------------------------------------------------------------*/\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        wallet = _wallet;\r\n        emit WalletUpdated(wallet);\r\n    }\r\n    event WalletUpdated(address newWallet);\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.08 - Sheltercoin Owner can set number of tokens per 1 x  ETH\r\n    |          Can only be set before the start of the Crowdsale\r\n    | ----------------------------------------------------------------------*/\r\n    function settokensPerKEther(uint _tokensPerKEther) public onlyOwner {\r\n        require(now < START_DATE);\r\n        require(_tokensPerKEther > 0);\r\n        tokensPerKEther = _tokensPerKEther;\r\n        emit tokensPerKEtherUpdated(tokensPerKEther);\r\n    }\r\n    event tokensPerKEtherUpdated(uint _tokPerKEther);\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.09 - Accept Ethers to buy Tokens during the Crowdsale\r\n    | ----------------------------------------------------------------------*/\r\n    function () public payable {\r\n        ICOContribution(msg.sender);\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.10 - Accept Ethers from one account for tokens to be created for another\r\n    |          account. Can be used by Exchanges to purchase Tokens on behalf of \r\n    |          it's Customers\r\n    | ----------------------------------------------------------------------*/\r\n    function ICOContribution(address participant) public payable {\r\n        // No contributions after the crowdsale is finalised\r\n        require(!finalised);\r\n        // Not paused\r\n        require(!paused);\r\n        // No contributions before the start of the crowdsale\r\n        require(now >= START_DATE);\r\n        // No contributions after the end of the crowdsale\r\n        require(now <= END_DATE);\r\n        // No contributions below the minimum (can be 0 ETH)\r\n        require(msg.value >= CONTRIBUTIONS_MIN);\r\n        // No contributions above a maximum (if maximum is set to non-0)\r\n        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\r\n\r\n        // client verification required before participant can transfer the tokens\r\n        require(Whitelisted[msg.sender]);\r\n        require(!Blacklisted[msg.sender]);\r\n\r\n        // Transfer the contributed ethers to the Crowdsale wallet\r\n        require(wallet.send(msg.value)); \r\n\r\n        // Calculate number of Tokens for contributed ETH\r\n        // `18` is the ETH decimals\r\n        // `- decimals` is the token decimals\r\n        // `+ 3` for the tokens per 1,000 ETH factor\r\n        tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\r\n\r\n        /* create variable bonusTokens. This is the purchase amount adjusted by\r\n           any bonus. The SetBonus function is onlyOwner\r\n           Bonus is expressed in %, eg 50 = 50%\r\n           */\r\n        bonusTokens = msg.value.safeMul(BONUS_VALUE + 100);\r\n\r\n        bonusTokens = bonusTokens.safeDiv(100);\r\n \r\n        tokens = bonusTokens;\r\n\r\n        dspTokens = tokens * tokensPerKEther / 10**uint(18 - decimals + 6);\r\n        dspEther = tokens / 10**uint(18);  \r\n        // Check if the Hard Cap will be exceeded\r\n       require(totalSupply + tokens <= TOKENS_HARD_CAP);\r\n       require(tokensSold + tokens <= TOKENS_HARD_CAP);\r\n        // Crowdsale Address\r\n         tokenContractAdr = this;\r\n        // safeAdd tokens purchased to Account's balance and TokensSold\r\n        balances[participant] = balances[participant].safeAdd(tokens);\r\n        tokensSold = tokensSold.safeAdd(tokens);\r\n        etherSold = etherSold.safeAdd(dspEther);\r\n        weiSold = weiSold + tokenContractAdr.balance;\r\n        //weiSold = weiSold + this.balance;\r\n        // Event Display Totals \r\n        dspTokensSold = dspTokensSold.safeAdd(dspTokens);\r\n        dspEtherSold = dspEtherSold.safeAdd(dspEther);\r\n        dspWeiSold = dspWeiSold + tokenContractAdr.balance;\r\n       //dspWeiSold = dspWeiSold + this.balance;\r\n\r\n  \r\n         // Transfer Tokens &  Log the tokens purchased \r\n        emit Transfer(tokenContractAdr, participant, tokens);\r\n        emit TokensBought(participant,bonusTokens, dspWeiSold, dspEther, dspEtherSold, dspTokens, dspTokensSold, tokensPerEther);\r\n\r\n        \r\n     \r\n    }\r\n    event TokensBought(address indexed buyer, uint newWei, \r\n        uint newWeiBalance, uint newEther, uint EtherTotal, uint _toks, uint newTokenTotal, \r\n        uint _toksPerEther);\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    |  007.11 - SheltercoinOwner to finalise the Crowdsale \r\n    |           \r\n    | ----------------------------------------------------------------------*/\r\n    function finalise() public onlyOwner {\r\n        // Can only finalise if raised > soft cap or after the end date\r\n        require(tokensSold >= TOKENS_SOFT_CAP || now > END_DATE);\r\n       // Can only finalise once\r\n        require(!finalised);\r\n          // Crowdsale Address\r\n         tokenContractAdr = this;    \r\n        // Write out the total\r\n        emit TokensBought(tokenContractAdr, 0, dspWeiSold, dspEther, dspEtherSold, dspTokens, dspTokensSold, tokensPerEther);\r\n        // Can only finalise once\r\n        finalised = true;\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.12 - Sheltercoin Owner to safeAdd Pre-sales funding token balance before the Crowdsale\r\n    |          commences\r\n    | ----------------------------------------------------------------------*/\r\n    function ICOAddPrecommitment(address participant, uint balance) public onlyOwner {\r\n         // Not paused\r\n        require(!paused);\r\n        // No contributions after the start of the crowdsale\r\n        // Allowing off chain contributions during the Crowdsale\r\n        // Allowing contributions after the end of the crowdsale\r\n        // Off Chain SHLT Balance to Transfer \r\n        require(balance > 0);\r\n        //Address field is completed\r\n        require(address(participant) != 0x0);\r\n        // safeAdd tokens purchased to Account's balance and TokensSold\r\n        tokenContractAdr = this;\r\n        balances[participant] = balances[participant].safeAdd(balance);\r\n        tokensSold = tokensSold.safeAdd(balance);\r\n        emit Transfer(tokenContractAdr, participant, balance);\r\n    }\r\n    event ICOcommitmentAdded(address indexed participant, uint balance, uint tokensSold );\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.12a - Sheltercoin Owner to Change ICO Start Date or ICO End Date\r\n    |          commences\r\n    | ----------------------------------------------------------------------*/\r\n    function ICOdt(uint START_DATE_NEW, uint END_DATE_NEW ) public onlyOwner {\r\n        // No contributions after the crowdsale is finalised\r\n        require(!finalised);\r\n        // Not paused\r\n        require(!paused);\r\n        //  Allowed to change any time \r\n        // No 0 \r\n        require(START_DATE_NEW > 0);\r\n        require(END_DATE_NEW > 0);\r\n        tokenContractAdr = this;\r\n        START_DATE = START_DATE_NEW;\r\n        END_DATE = END_DATE_NEW;\r\n        emit ICOdate(START_DATE, END_DATE);\r\n     }\r\n    event ICOdate(uint ST_DT, uint END_DT);\r\n\r\n    /* ----------------------------------------------------------------------\r\n    | 007.13 - Transfer the Balance from Owner's account to another account, with client\r\n    |          verification check for the crowdsale participant's first transfer\r\n    | ----------------------------------------------------------------------*/\r\n    function transfer(address _to, uint _amount) public returns (bool success) {\r\n        // Cannot transfer before crowdsale ends\r\n        // require(finalised);\r\n        //  require(flg002transfer);\r\n        // Cannot transfer if Client verification is required\r\n        //require(!clientRequired[msg.sender]);\r\n        // Standard transfer\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    /* ------------------------------------------------------------------------\r\n    | 007.14 - Spender of tokens transfer an amount of tokens from the token Owner's\r\n    |          balance to another account, with Client verification check for the\r\n    |          Crowdsale participant's first transfer\r\n    | ----------------------------------------------------------------------*/\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n        public returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends\r\n        // require(flg002transfer);\r\n        // Cannot transfer if Client verification is required\r\n        //require(!clientRequired[_from]);\r\n        // Standard transferFrom\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n /* ------------------------------------------------------------------------\r\n    | 007.16 - Any account can burn _from's tokens as long as the _from account has \r\n    |          approved the _amount to be burnt using\r\n    |          approve(0x0, _amount)\r\n    | ----------------------------------------------------------------------*/\r\n    function mintFrom(\r\n        address _from,\r\n        uint _amount\r\n    ) public returns (bool success) {\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            && allowed[_from][0x0] >= _amount           // Transfer approved\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[0x0] + _amount > balances[0x0]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].safeSub(_amount);\r\n            allowed[_from][0x0] = allowed[_from][0x0].safeSub(_amount);\r\n            balances[0x0] = balances[0x0].safeAdd(_amount);\r\n            tokensSold = tokensSold.safeSub(_amount);\r\n            emit Transfer(_from, 0x0, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    \r\n \r\n     }  \r\n    \r\n\r\n/* ------------------------------------------------------------------------\r\n    | 007.17 - Set bonus percentage multiplier. 50% = * 1.5\r\n    | ----------------------------------------------------------------------*/\r\n    function setBonus(uint _bonus) public onlyOwner\r\n\r\n        returns (bool success) {\r\n        require (!finalised);\r\n        if (_bonus >= 0)               // From a/c is owner\r\n          {\r\n            BONUS_VALUE = _bonus;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n          emit BonusSet(_bonus);\r\n        }\r\n    event BonusSet(uint _bonus);\r\n\r\n    /* ------------------------------------------------------------------------\r\n    |  007.15 - SheltercoinOwner to Client verify the participant's account\r\n    |  ----------------------------------------------------------------------*/\r\n   \r\n   \r\n    function AddToWhitelist(address participant) public onlyOwner {\r\n        Whitelisted[participant] = true;\r\n        emit AddedToWhitelist(participant);\r\n    }\r\n    event AddedToWhitelist(address indexed participant);\r\n\r\n    function IsWhitelisted(address participant) \r\n        public view returns (bool) {\r\n      return bool(Whitelisted[participant]);\r\n    }\r\n    \r\n    function RemoveFromWhitelist(address participant) public onlyOwner {\r\n        Whitelisted[participant] = false;\r\n        emit RemovedFromWhitelist(participant);\r\n    }\r\n    event RemovedFromWhitelist(address indexed participant);\r\n\r\n    function AddToBlacklist(address participant) public onlyOwner {\r\n        Blacklisted[participant] = true;\r\n        emit AddedToBlacklist(participant);\r\n    }\r\n    event AddedToBlacklist(address indexed participant);\r\n\r\n    function IsBlacklisted(address participant) \r\n        public view returns (bool) {\r\n      return bool(Blacklisted[participant]);\r\n    }\r\n    function RemoveFromBlackList(address participant) public onlyOwner {\r\n        Blacklisted[participant] = false;\r\n        emit RemovedFromBlacklist(participant);\r\n    }\r\n    event RemovedFromBlacklist(address indexed participant);\r\n\r\n    function SCEmergency(string _Shelter_ID, string _Shelter_Description, string _Emergency_Type, string _UN_Programme_ID, string _Country, string _Region, uint START_DATE_SCE, uint END_DATE_SCE ) public onlyOwner {\r\n \r\n        // Disaster Occur's\r\n        finalised = true;\r\n        require(finalised);\r\n        // Not paused\r\n        //require(!paused);\r\n        // No 0 \r\n         require(START_DATE_SCE > 0);\r\n        // Write to the blockchain \r\n        tokenContractAdr = this;\r\n        SCE_Shelter_ID = _Shelter_ID;\r\n        SCE_Shelter_Desc = _Shelter_Description;\r\n        SCE_Emergency_Type = _Emergency_Type;\r\n        SCE_UN_Programme_ID = _UN_Programme_ID;\r\n        SCE_Country = _Country;\r\n        SCE_Region = _Region; \r\n        SCE_START_DATE = START_DATE_SCE;\r\n        SCE_END_DATE = END_DATE_SCE; \r\n        emit SC_Emergency(SCE_Shelter_ID, SCE_Shelter_Desc, SCE_Emergency_Type, SCE_UN_Programme_ID, SCE_Country, SCE_Region, SCE_START_DATE, SCE_END_DATE );\r\n       \r\n    }\r\n    event SC_Emergency(string _str_Shelter_ID, string _str_Shelter_Descrip, string _str_Emergency_Type, string _str_UN_Prog_ID, string _str_Country, string _str_Region, uint SC_ST_DT, uint SC_END_DT);\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"flg_transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspEtherSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAdr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_Emergency_Type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"IsWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"IsBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"START_DATE_NEW\",\"type\":\"uint256\"},{\"name\":\"END_DATE_NEW\",\"type\":\"uint256\"}],\"name\":\"ICOdt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RemoveFromBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"untransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ICOAddPrecommitment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_UN_Programme_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"AddToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspWeiSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Shelter_ID\",\"type\":\"string\"},{\"name\":\"_Shelter_Description\",\"type\":\"string\"},{\"name\":\"_Emergency_Type\",\"type\":\"string\"},{\"name\":\"_UN_Programme_ID\",\"type\":\"string\"},{\"name\":\"_Country\",\"type\":\"string\"},{\"name\":\"_Region\",\"type\":\"string\"},{\"name\":\"START_DATE_SCE\",\"type\":\"uint256\"},{\"name\":\"END_DATE_SCE\",\"type\":\"uint256\"}],\"name\":\"SCEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_Shelter_Desc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_Region\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_Country\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flg001\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"settokensPerKEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ICOContribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCE_Shelter_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokPerKEther\",\"type\":\"uint256\"}],\"name\":\"tokensPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newWeiBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"EtherTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toks\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTokenTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toksPerEther\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"ICOcommitmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ST_DT\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"END_DT\",\"type\":\"uint256\"}],\"name\":\"ICOdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"BonusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_str_Shelter_ID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_str_Shelter_Descrip\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_str_Emergency_Type\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_str_UN_Prog_ID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_str_Country\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_str_Region\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"SC_ST_DT\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SC_END_DT\",\"type\":\"uint256\"}],\"name\":\"SC_Emergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Untransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SHLTSheltercoinToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000964b25eb217eb84896ff86d4145a872749f29edd","Library":"","SwarmSource":"bzzr://ce0c1588f798f0344644cb8a9c503fa23b73cb3e9ea1d87fe60344b4039d7cf7"}]}