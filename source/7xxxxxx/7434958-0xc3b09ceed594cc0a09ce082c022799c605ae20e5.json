{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * ZeroPriceIndex - Management system for maintaining the \"official\" community \r\n *                  trade prices of ERC tokens & collectibles listed within \r\n *                  the ZeroCache.\r\n *\r\n * Version 19.3.24\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice Zero(Cache) Price Index\r\n *\r\n * @dev Manages the current trade prices of ZeroCache tokens.\r\n */\r\ncontract ZeroPriceIndex is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n    \r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /**\r\n     * Set Zero(Cache) Price Index namespaces\r\n     * \r\n     * NOTE: Keep all namespaces lowercase.\r\n     */\r\n    string private _namespace = 'zpi';\r\n\r\n    /* Set Dai Stablecoin (trade pair) base. */\r\n    string private _TRADE_PAIR_BASE = 'DAI';\r\n\r\n    /**\r\n     * Initialize Core Tokens\r\n     * \r\n     * NOTE: All tokens are traded against DAI Stablecoin.\r\n     */\r\n    string[4] _CORE_TOKENS = [\r\n        '0GOLD',    // ZeroGold\r\n        '0xBTC',    // 0xBitcoin Token\r\n        'WBTC',     // Wrapped Bitcoin\r\n        'WETH'      // Wrapped Ether\r\n    ];\r\n\r\n    /* Initialize price update notifications. */\r\n    event PriceUpdate(\r\n        bytes32 indexed dataId, \r\n        uint value\r\n    );\r\n\r\n    /* Initialize price list update notifications. */\r\n    event PriceListUpdate(\r\n        bytes32 indexed listId, \r\n        bytes ipfsHash\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Set predecessor address. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = ZeroPriceIndex(_predecessor).getRevision();\r\n            \r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n    \r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * GETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Get Trade Price (Token)\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function tradePriceOf(\r\n        string _token\r\n    ) external view returns (uint price) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _token, '.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        price = _zer0netDb.getUint(hash);\r\n    }\r\n\r\n    /**\r\n     * Get Trade Price (Collectible)\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     * \r\n     * An up-to-date trade price index of the TOP 100 collectibles \r\n     * listed in the ZeroCache.\r\n     * (the complete listing is available via IPFS, see below)\r\n     */\r\n    function tradePriceOf(\r\n        address _token,\r\n        uint _tokenId\r\n    ) external view returns (uint price) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _token, '.', \r\n            _tokenId\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        price = _zer0netDb.getUint(hash);\r\n    }\r\n\r\n    /**\r\n     * Get Trade Price List(s)\r\n     * \r\n     * An real-time trade price index of the ZeroCache TOP tokens:\r\n     *     1. ERC-20\r\n     *     2. ERC-721 (Collectible)\r\n     * \r\n     * Also, returns the IPFS address(es) to complete \r\n     * ERC-721 (Collectible) trade price histories.\r\n     * \r\n     * Available Price List Ids [sha3 db keys]:\r\n     * (prefix = `zpi.ipfs.`)\r\n     *     1. ...total          [0xd7ea7671063c5fb2c6913499e32dc9fa57ebeaeaea57318fb1c5d85fc2b7bd9a]\r\n     *     2. ...erc20.total    [0xe2a4d3615b13317181f86cf96dd85e05c8b88398081afe4c28bb7a614cb15d0f]\r\n     *     3. ...erc20.top100   [0x6e06845611588cbefd856f969d489fd79dfc0f11bdd8b6c033a386ba5629c7e8]\r\n     *     4. ...erc20.top1000  [0xa591401b1b623d8a9e8e5807dbd9a79cd4ede4270274bbabc20b15415a9386e7]\r\n     *     5. ...erc721.total   [0xe6685143353a7b4ee6f59925a757017f2638c0ed4cb9376ec8e6e37b4995aed2]\r\n     *     6. ...erc721.top100  [0xe75054ff8b05a4e8ebaeca5b43579e9f59fb910b50615bd3f225a8fe8c8aea49]\r\n     *     7. ...erc721.top1000 [0xdae2a49474830953c576849e09151b23c15dd3f8c4e98fbcd27c13b9f5739930]\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function tradePriceList(\r\n        string _listId\r\n    ) external view returns (bytes ipfsHash) {\r\n        /* Initailze data id. */\r\n        bytes32 dataId = 0x0;\r\n        \r\n        /* Set hash. */\r\n        dataId = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.ipfs.', \r\n            _listId\r\n        ));\r\n\r\n        /* Validate data id. */\r\n        if (dataId == 0x0) {\r\n            /* Default to `...total`. */\r\n            dataId = 0xd7ea7671063c5fb2c6913499e32dc9fa57ebeaeaea57318fb1c5d85fc2b7bd9a;\r\n        }\r\n        \r\n        /* Retrun IPFS hash. */\r\n        ipfsHash = _zer0netDb.getBytes(dataId);\r\n    }\r\n\r\n    /**\r\n     * Trade Price Summary\r\n     * \r\n     * Retrieves the trade prices for the TOP 100 tokens and collectibles.\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function tradePriceSummary() external view returns (\r\n        uint[4] summary\r\n    ) {\r\n        /* Initailze hash. */\r\n        bytes32 hash = 0x0;\r\n        \r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.0GOLD.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        summary[0] = _zer0netDb.getUint(hash);\r\n\r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.0xBTC.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        summary[1] = _zer0netDb.getUint(hash);\r\n\r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.WBTC.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        summary[2] = _zer0netDb.getUint(hash);\r\n\r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.WETH.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        summary[3] = _zer0netDb.getUint(hash);\r\n    }\r\n\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n\r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n    \r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n    \r\n\r\n    /***************************************************************************\r\n     * \r\n     * SETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Set Trade Price (Token)\r\n     * \r\n     * Keys for trade pairs are encoded using the 'exact' symbol,\r\n     * as listed in their respective contract:\r\n     * \r\n     *     ZeroGold `zpi.0GOLD.DAI`\r\n     *     0x3cf0b17677519ce01176e2dde0338a4d8962be5853b2d83217cc99c527d5629a\r\n     * \r\n     *     0xBitcoin Token `zpi.0xBTC.DAI`\r\n     *     0x9b7396ba7848459ddbaa41b35e502a95d1df654913a5b67c4e7870bd40064612\r\n     * \r\n     *     Wrapped Ether `zpi.WBTC.DAI`\r\n     *     0x03f90c9c29c9a65eabac4ea5eb624068469de88b5b8557eae0c8778367e8dfae\r\n     * \r\n     *     Wrapped Ether `zpi.WETH.DAI`\r\n     *     0xf2349fd68dcc221f5a12142038d2619c9f73c8e7e95afcd8e0bd5bcd33b291bb\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function setTradePrice(\r\n        string _token,\r\n        uint _value\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Calculate data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _token, '.', \r\n            _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Set value in Zer0net Db. */\r\n        _zer0netDb.setUint(dataId, _value);\r\n        \r\n        /* Broadcast event. */\r\n        emit PriceUpdate(\r\n            dataId, \r\n            _value\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Trade Price (Collectible)\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function setTradePrice(\r\n        address _token,\r\n        uint _tokenId,\r\n        uint _value\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Calculate data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _token, '.', \r\n            _tokenId\r\n        ));\r\n\r\n        /* Set value in Zer0net Db. */\r\n        _zer0netDb.setUint(dataId, _value);\r\n        \r\n        /* Broadcast event. */\r\n        emit PriceUpdate(\r\n            dataId, \r\n            _value\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Trade Price (IPFS) List\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function setTradePriceList(\r\n        string _listId,\r\n        bytes _ipfsHash\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            _namespace, \r\n            '.ipfs.', \r\n            _listId\r\n        ));\r\n        \r\n        /* Set value in Zer0net Db. */\r\n        _zer0netDb.setBytes(hash, _ipfsHash);\r\n        \r\n        /* Broadcast event. */\r\n        emit PriceListUpdate(\r\n            hash, \r\n            _ipfsHash\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Core Trade Prices\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     * \r\n     * NOTE: Use of `string[]` is still experimental, \r\n     *       so we are required to `setCorePrices` by sending\r\n     *       `_values` in the proper format.\r\n     */\r\n    function setAllCoreTradePrices(\r\n        uint[] _values\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Iterate Core Tokens for updating. */    \r\n        for (uint8 i = 0; i < _CORE_TOKENS.length; i++) {\r\n            /* Set data id. */\r\n            bytes32 dataId = keccak256(abi.encodePacked(\r\n                _namespace, '.', \r\n                _CORE_TOKENS[i], '.', \r\n                _TRADE_PAIR_BASE\r\n            ));\r\n    \r\n            /* Set value in Zer0net Db. */\r\n            _zer0netDb.setUint(dataId, _values[i]);\r\n            \r\n            /* Broadcast event. */\r\n            emit PriceUpdate(\r\n                dataId, \r\n                _values[i]\r\n            );\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set (Multiple) Trade Prices\r\n     * \r\n     * This will be used for ERC-721 Collectible tokens.\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function setTokenTradePrices(\r\n        address[] _tokens,\r\n        uint[] _tokenIds,\r\n        uint[] _values\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Iterate Core Tokens for updating. */    \r\n        for (uint8 i = 0; i < _tokens.length; i++) {\r\n            /* Set data id. */\r\n            bytes32 dataId = keccak256(abi.encodePacked(\r\n                _namespace, '.', \r\n                _tokens[i], '.', \r\n                _tokenIds[i]\r\n            ));\r\n    \r\n            /* Set value in Zer0net Db. */\r\n            _zer0netDb.setUint(dataId, _values[i]);\r\n            \r\n            /* Broadcast event. */\r\n            emit PriceUpdate(\r\n                dataId, \r\n                _values[i]\r\n            );\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set Successor\r\n     * \r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     * \r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     * \r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n        \r\n        // TODO Add additional interfaces here.\r\n        \r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * UTILITIES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address _tokenAddress, \r\n        uint _tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setTokenTradePrices\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradePriceSummary\",\"outputs\":[{\"name\":\"summary\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setAllCoreTradePrices\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_listId\",\"type\":\"string\"}],\"name\":\"tradePriceList\",\"outputs\":[{\"name\":\"ipfsHash\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"tradePriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTradePrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTradePrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tradePriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listId\",\"type\":\"string\"},{\"name\":\"_ipfsHash\",\"type\":\"bytes\"}],\"name\":\"setTradePriceList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"bytes\"}],\"name\":\"PriceListUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZeroPriceIndex","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91180e9ebc03ee273a20865397919e121cbf6ee2296d41411a90bfbb46f3ecbd"}]}