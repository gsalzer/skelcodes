{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: uniswap-solidity/contracts/UniswapFactoryInterface.sol\r\n\r\n// https://docs.uniswap.io/smart-contract-integration/interface\r\ncontract UniswapFactoryInterface {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n// File: uniswap-solidity/contracts/UniswapExchangeInterface.sol\r\n\r\n// https://docs.uniswap.io/smart-contract-integration/interface\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: uniswap-solidity/contracts/Uniswap.sol\r\n\r\n\r\n\r\n// File: contracts/safe/SafeERC20.sol\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function transferTokens(\r\n      IERC20 _token,\r\n      address _from,\r\n      address _to,\r\n      uint256 _value\r\n    ) internal {\r\n        uint256 oldBalance = _token.balanceOf(_to);\r\n        require(\r\n            _token.transferFrom(_from, _to, _value),\r\n            \"Failed to transfer tokens.\"\r\n        );\r\n        require(\r\n            _token.balanceOf(_to) >= oldBalance.add(_value),\r\n            \"Balance validation failed after transfer.\"\r\n        );\r\n    }\r\n\r\n    function approveTokens(\r\n      IERC20 _token,\r\n      address _spender,\r\n      uint256 _value\r\n    ) internal {\r\n        uint256 nextAllowance =\r\n          _token.allowance(address(this), _spender).add(_value);\r\n        require(\r\n            _token.approve(_spender, nextAllowance),\r\n            \"Failed to approve exchange withdrawal of tokens.\"\r\n        );\r\n        require(\r\n            _token.allowance(address(this), _spender) >= nextAllowance,\r\n            \"Failed to validate token approval.\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/safe/SafeExchange.sol\r\n\r\nlibrary SafeExchange {\r\n    using SafeMath for uint256;\r\n\r\n    modifier swaps(uint256 _value, IERC20 _token) {\r\n        uint256 nextBalance = _token.balanceOf(address(this)).add(_value);\r\n        _;\r\n        require(\r\n            _token.balanceOf(address(this)) >= nextBalance,\r\n            \"Balance validation failed after swap.\"\r\n        );\r\n    }\r\n\r\n    function swapTokens(\r\n        UniswapExchangeInterface _exchange,\r\n        uint256 _outValue,\r\n        uint256 _inValue,\r\n        uint256 _ethValue,\r\n        uint256 _deadline,\r\n        IERC20 _outToken\r\n    ) internal swaps(_outValue, _outToken) {\r\n        _exchange.tokenToTokenSwapOutput(\r\n            _outValue,\r\n            _inValue,\r\n            _ethValue,\r\n            _deadline,\r\n            address(_outToken)\r\n        );\r\n    }\r\n\r\n    function swapEther(\r\n        UniswapExchangeInterface _exchange,\r\n        uint256 _outValue,\r\n        uint256 _ethValue,\r\n        uint256 _deadline,\r\n        IERC20 _outToken\r\n    ) internal swaps(_outValue, _outToken) {\r\n        _exchange.ethToTokenSwapOutput.value(_ethValue)(_outValue, _deadline);\r\n    }\r\n}\r\n\r\n// File: contracts/Unipay.sol\r\n\r\ncontract Unipay {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeExchange for UniswapExchangeInterface;\r\n\r\n    UniswapFactoryInterface factory;\r\n    IERC20 outToken;\r\n    address recipient;\r\n\r\n    constructor(address _factory, address _recipient, address _token) public {\r\n        factory = UniswapFactoryInterface(_factory);\r\n        outToken = IERC20(_token);\r\n        recipient = _recipient;\r\n    }\r\n\r\n    function price(\r\n        address _token,\r\n        uint256 _value\r\n    ) public view returns (uint256, uint256, UniswapExchangeInterface) {\r\n        UniswapExchangeInterface inExchange =\r\n          UniswapExchangeInterface(factory.getExchange(_token));\r\n        UniswapExchangeInterface outExchange =\r\n          UniswapExchangeInterface(factory.getExchange(address(outToken)));\r\n        uint256 etherCost = outExchange.getEthToTokenOutputPrice(_value);\r\n        uint256 tokenCost = inExchange.getTokenToEthOutputPrice(etherCost);\r\n        return (tokenCost, etherCost, inExchange);\r\n    }\r\n\r\n    function price(\r\n      uint256 _value\r\n    ) public view returns (uint256, UniswapExchangeInterface) {\r\n      UniswapExchangeInterface exchange =\r\n        UniswapExchangeInterface(factory.getExchange(address(outToken)));\r\n      return (exchange.getEthToTokenOutputPrice(_value), exchange);\r\n    }\r\n\r\n    function collect(\r\n        address _from,\r\n        address _token,\r\n        uint256 _value,\r\n        uint256 _deadline\r\n    ) public {\r\n        (\r\n            uint256 tokenCost,\r\n            uint256 etherCost,\r\n            UniswapExchangeInterface exchange\r\n        ) = price(_token, _value);\r\n\r\n        IERC20(_token).transferTokens(_from, address(this), tokenCost);\r\n        IERC20(_token).approveTokens(address(exchange), tokenCost);\r\n        exchange.swapTokens(_value, tokenCost, etherCost, _deadline, outToken);\r\n        outToken.approveTokens(recipient, _value);\r\n    }\r\n\r\n    function pay(\r\n        uint256 _value,\r\n        uint256 _deadline\r\n    ) public payable {\r\n        (\r\n            uint256 etherCost,\r\n            UniswapExchangeInterface exchange\r\n        ) = price(_value);\r\n\r\n        require(msg.value >= etherCost, \"Insufficient ether sent.\");\r\n        exchange.swapEther(_value, etherCost, _deadline, outToken);\r\n        outToken.approveTokens(recipient, _value);\r\n        msg.sender.transfer(msg.value.sub(etherCost));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Unipay","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95000000000000000000000000b3c348c4a6d95fee050bf8a770fc91ec60aa4ab20000000000000000000000004d8fc1453a0f359e99c9675954e656d80d996fbf","Library":"","SwarmSource":"bzzr://cfea1dbc85593d3aad025de00d2078fb2b5a556fee924f80be27a411c8acb07e"}]}