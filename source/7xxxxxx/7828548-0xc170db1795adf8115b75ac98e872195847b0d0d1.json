{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Source Code first verified at https://etherscan.io on Thursday, May 2, 2019\r\n (UTC) */\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\ncontract ERC20 \r\n{\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BatchSend \r\n{\r\n\tuint constant MAX_BATCH_LEN = 150;\r\n\t\r\n\tfunction batchSendToken(address _token, address[] memory recipients, uint[] memory amounts) public \r\n\t{\r\n\t\trequire(recipients.length <= MAX_BATCH_LEN); \r\n\t\tif(recipients.length != amounts.length)\r\n            revert();\r\n\t\tERC20 token = ERC20(_token);\r\n\t\tfor(uint i = 0; i < recipients.length; i++) \r\n\t\t{\r\n\t\t\trequire(token.transferFrom(msg.sender, recipients[i], amounts[i]));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction batchSendToken2(address _token, address[] memory recipients, uint amount) public \r\n\t{\r\n\t\trequire(recipients.length <= MAX_BATCH_LEN); \r\n\r\n\t\tERC20 token = ERC20(_token);\r\n\t\tfor(uint i = 0; i < recipients.length; i++) \r\n\t\t{\r\n\t\t\trequire(token.transferFrom(msg.sender, recipients[i], amount));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction batchSendETH(address[] memory recipients, uint[] memory amounts) public payable \r\n\t{\r\n\t\trequire(recipients.length <= MAX_BATCH_LEN); \r\n\t\tif(recipients.length != amounts.length)\r\n            revert();\r\n\t\t\r\n\t\tfor(uint i = 0; i < recipients.length; i++) \r\n\t\t{\r\n\t\t\taddress(uint160(recipients[i])).transfer(amounts[i]);\r\n\t\t}\r\n\t\tmsg.sender.transfer(address(this).balance);\r\n\t}\r\n\t\r\n\tfunction batchSendETH2(address[] memory recipients) public payable \r\n\t{\r\n\t\trequire(recipients.length <= MAX_BATCH_LEN); \r\n\r\n\t\tfor(uint i = 0; i < recipients.length; i++) \r\n\t\t{\r\n\t\t\taddress(uint160(recipients[i])).transfer(msg.value / recipients.length);\r\n\t\t}\r\n\t\tmsg.sender.transfer(address(this).balance);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchSendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchSendToken2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"batchSendETH2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchSendETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BatchSend","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7795bfcc6118f5386ee2de54ee022713c4e2f99374055b0d05ec3d712ab3e05f"}]}