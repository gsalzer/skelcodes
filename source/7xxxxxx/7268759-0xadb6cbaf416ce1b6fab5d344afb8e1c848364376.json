{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/* \r\n   ----------------------------------------------------------------------------\r\n   ERC-20 Token: Fixed supply with ICO \r\n   \r\n*/\r\n\r\n\r\n// -- Safe Math library - integer overflow prevention (OpenZeppelin) --\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// -- ERC-20 Token Standard interface --\r\n// based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// -- Contract function - receive approval and execute function in one call --\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n\r\n// -- Owned Contract --\r\n\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// -- ERC20 Token + fixed supply --\r\n\r\ncontract LibertyEcoToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    \r\n    uint256 _totalSupply;\r\n    uint256 public reserveCap = 0;                                  // Amount of tokens to reserve for owner (constructor) \r\n    uint256 public tokensRemain = 0;                                // Amount of tokens to sell (constructor)\r\n    uint256 public tokensSold = 0;                                  // Amount of tokens sold\r\n    uint256 public tokensDistributed = 0;                           // Amount of tokens distributed\r\n\r\n    uint256 public tokensPerEth = 100;                               // Units of token can be bought with 1 ETH\r\n    uint256 public EtherInWei = 0;                                  // Store the total ETH raised via ICO \r\n    address payable public fundsWallet;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // -- Constructor --\r\n    \r\n    constructor() public {\r\n        symbol = \"LES\";                                            // Token symbol / abbreviation\r\n        name = \"Liberty EcoToken\";                                         // Token name\r\n        decimals = 18;                                              \r\n        _totalSupply = 100000000000 * 10**uint(decimals);               // Initial token supply deployed (in wei) -- 100 tokens\r\n        \r\n        balances[owner] = _totalSupply;                             // Give all token supply to owner\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        \r\n        fundsWallet = msg.sender;                                   // To be funded on owner's wallet\r\n        \r\n        tokensRemain = _totalSupply.sub(reserveCap);\r\n    }\r\n\r\n\r\n    // -- Total Supply --\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    // -- Get token balance for account `tokenOwner` --\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    /*\r\n      -- Transfer balance from token owner's account to other account --\r\n        - Owner's account must have sufficient balance to transfer\r\n        - 0 value transfers are allowed\r\n    */\r\n    \r\n    function transfer(address to, uint256 tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    /* \r\n      -- Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account --\r\n     \r\n        ERC-20 Token Standard recommends that there are no checks for the approval \r\n        double-spend attack as this should be implemented in user interfaces\r\n    */\r\n    \r\n    function approve(address spender, uint256 tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n      -- Transfer `tokens` from the `from` account to the `to` account --\r\n    \r\n        The calling account must already have sufficient tokens approve(...)-d\r\n        for spending from the `from` account and:\r\n        \r\n        - From account must have sufficient balance to transfer\r\n        - Spender must have sufficient allowance to transfer\r\n        - 0 value transfers are allowed\r\n    */\r\n    \r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    //  -- Returns the amount of tokens approved by the owner that can be transferred to the spender's account --\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    /*\r\n      -- Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account -- \r\n        - The `spender` contract function `receiveApproval(...)` is then executed\r\n    */\r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // -- 100 tokens given per 1 ETH but revert if owner reserve limit reached --\r\n    \r\n    function () external payable {\r\n        if(balances[owner] >= reserveCap) {\r\n            EtherInWei = EtherInWei + msg.value;\r\n            uint256 amount = msg.value * tokensPerEth;\r\n            \r\n            require(balances[fundsWallet] >= amount);\r\n            \r\n            balances[fundsWallet] = balances[fundsWallet].sub(amount);\r\n            balances[msg.sender] = balances[msg.sender].add(amount);\r\n            \r\n            emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\r\n            \r\n            //Transfer ether to fundsWallet\r\n            fundsWallet.transfer(msg.value);\r\n            \r\n            deductToken(amount);\r\n        }\r\n        \r\n        else {\r\n            revert(\"Token balance reaches reserve capacity, no more tokens will be given out.\");\r\n        }\r\n    }\r\n\r\n\r\n    // -- Owner can transfer out any accidentally sent ERC20 tokens --\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // -- Mini function to deduct remaining tokens to sell and add in amount of tokens sold\r\n    function deductToken(uint256 amt) private {\r\n        tokensRemain = tokensRemain.sub(amt);\r\n        tokensSold = tokensSold.add(amt);\r\n    }\r\n    \r\n    // -- Set reserve cap by amount \r\n    \r\n    function setReserveCap(uint256 tokenAmount) public onlyOwner {\r\n        reserveCap = tokenAmount * 10**uint(decimals);\r\n        tokensRemain = balances[owner].sub(reserveCap);\r\n    }\r\n    \r\n    // -- Set reserve cap by percentage\r\n    \r\n    function setReserveCapPercentage (uint percentage) public onlyOwner {\r\n        reserveCap = calcSupplyPercentage(percentage);\r\n        tokensRemain = balances[owner].sub(reserveCap);\r\n    }\r\n    \r\n    // -- Mini function for calculating token percentage from whole supply --\r\n    \r\n    function calcSupplyPercentage(uint256 percent) public view returns (uint256){\r\n        uint256 total = _totalSupply.mul(percent.mul(100)).div(10000);\r\n        \r\n        return total;\r\n    }\r\n    \r\n    // -- Distribute tokens to other address (with amount of tokens) --\r\n    \r\n    function distributeTokenByAmount(address dist_address, uint256 tokens)public payable onlyOwner returns (bool success){\r\n        require(balances[owner] > 0 && tokens <= tokensRemain, \"Token distribution fail due to insufficient selling token.\");\r\n        uint256 tokenToDistribute = tokens * 10**uint(decimals);\r\n        \r\n        balances[owner] = balances[owner].sub(tokenToDistribute);\r\n        balances[dist_address] = balances[dist_address].add(tokenToDistribute);\r\n        \r\n        emit Transfer(owner, dist_address, tokenToDistribute);\r\n        \r\n        tokensRemain = tokensRemain.sub(tokenToDistribute);\r\n        tokensDistributed = tokensDistributed.add(tokenToDistribute);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // -- Release reserve cap from owner for token sell by amount of tokens\r\n    \r\n    function releaseCapByAmount(uint256 tokenAmount) public onlyOwner {\r\n        tokenAmount = tokenAmount * 10**uint(decimals);\r\n        \r\n        require(balances[owner] >= tokenAmount);\r\n        reserveCap = reserveCap.sub(tokenAmount);\r\n        tokensRemain = tokensRemain.add(tokenAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"calcSupplyPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"setReserveCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dist_address\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"distributeTokenByAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"releaseCapByAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EtherInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setReserveCapPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LibertyEcoToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ef419b2afd9e5d7ec5d2cd7a64a0bcdba0224a69eaf37a1c51066753d8e6ca5"}]}