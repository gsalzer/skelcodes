{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\ncontract FranklinStorage {\n\n    // NOTE: This is test code! All contracts will be thoughrouhly rewritten for production.\n\n    address public testCreator;\n\n    constructor() public {\n        testCreator = msg.sender;\n    }\n\n    function killThisTestContract() public {\n        require(msg.sender == testCreator, \"only creator can clean up test contracts\");\n        selfdestruct(testCreator);\n    }\n    \n\n    // For tree depth 24\n    bytes32 constant EMPTY_TREE_ROOT = 0x003f7e15e4de3453fe13e11fb4b007f1fce6a5b0f0353b3b8208910143aaa2f7;\n\n    uint256 public constant DEADLINE = 3600;\n\n    event BlockCommitted(uint32 indexed blockNumber);\n    event BlockVerified(uint32 indexed blockNumber);\n\n    enum Circuit {\n        DEPOSIT,\n        TRANSFER,\n        EXIT\n    }\n\n    enum AccountState {\n        NOT_REGISTERED,\n        REGISTERED,\n        PENDING_EXIT,\n        UNCONFIRMED_EXIT\n    }\n\n    struct Block {\n        uint8 circuit;\n        uint64  deadline;\n        uint128 totalFees;\n        bytes32 newRoot;\n        bytes32 publicDataCommitment;\n        address prover;\n    }\n\n    // Key is block number\n    mapping (uint32 => Block) public blocks;\n    // Only some addresses can send proofs\n    mapping (address => bool) public operators;\n    // Fee collection accounting\n    mapping (address => uint256) public balances;\n\n    struct Account {\n        uint8 state;\n        uint32 exitBatchNumber;\n        address owner;\n        uint256 publicKey;\n        uint32 exitListHead;\n        uint32 exitListTail;\n    }\n\n    // one Ethereum address should have one account\n    mapping (address => uint24) public ethereumAddressToAccountID;\n\n    // Plasma account => general information\n    mapping (uint24 => Account) public accounts;\n\n    // Public information for users\n    bool public stopped;\n    uint32 public lastCommittedBlockNumber;\n    uint32 public lastVerifiedBlockNumber;\n    bytes32 public lastVerifiedRoot;\n    uint64 public constant MAX_DELAY = 1 days;\n    uint256 public constant DENOMINATOR = 1000000000000;\n\n    // deposits\n\n    uint256 public constant DEPOSIT_BATCH_SIZE = 1;\n    uint256 public totalDepositRequests; // enumerates total number of deposit, starting from 0\n    uint256 public lastCommittedDepositBatch;\n    uint256 public lastVerifiedDepositBatch;\n    uint128 public currentDepositBatchFee; // deposit request fee scaled units\n\n    uint24 public constant SPECIAL_ACCOUNT_DEPOSITS = 1;\n\n    uint24 public nextAccountToRegister;\n\n    // some ideas for optimization of the deposit request information storage:\n    // store in a mapping: 20k gas to add, 5k to update a record + 5k to update the global counter per batch\n    // store in an array: 20k + 5k gas to add, 5k to update + up to DEPOSIT_BATCH_SIZE * SLOAD\n\n    // batch number => (plasma address => deposit information)\n    mapping (uint256 => mapping (uint24 => DepositRequest)) public depositRequests;\n    mapping (uint256 => DepositBatch) public depositBatches;\n\n    struct DepositRequest {\n        uint128 amount;\n    }\n\n    enum DepositBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct DepositBatch {\n        uint8 state;\n        uint24 numRequests;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID, uint256 indexed publicKey, uint128 amount);\n    event LogCancelDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    // Exits \n\n    uint256 constant EXIT_BATCH_SIZE = 1;\n    uint256 public totalExitRequests; \n    uint256 public lastCommittedExitBatch;\n    uint256 public lastVerifiedExitBatch;\n    uint128 public currentExitBatchFee; \n\n    uint24 public constant SPECIAL_ACCOUNT_EXITS = 0;\n\n    // batches for complete exits\n    mapping (uint256 => ExitBatch) public exitBatches;\n\n    enum ExitBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct ExitBatch {\n        uint8 state;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n    event LogCancelExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    event LogExit(address indexed ethereumAddress, uint32 indexed blockNumber);\n    event LogCompleteExit(address indexed ethereumAddress, uint32 indexed blockNumber, uint24 accountID);\n\n    struct ExitLeaf {\n        uint32 nextID;\n        uint128 amount;\n    }\n\n    mapping (address => mapping (uint32 => ExitLeaf)) public exitLeafs;\n\n    // mapping ethereum address => block number => balance\n    // mapping (address => mapping (uint32 => uint128)) public exitAmounts;\n    // Delegates chain\n    address public depositor;\n    address public transactor;\n    address public exitor;\n}\n\nlibrary TwistedEdwards {\n    // EdwardsPoint public generator;\n\n    struct EdwardsPoint {\n        uint256 x;\n        uint256 y;\n    }\n\n    // constructor (\n    //     uint256[2] memory _generator\n    // ) public {\n    //     require(_generator[0] < getPrimeFieldSize(), \"Generator X is not in the field\");\n    //     require(_generator[1] < getPrimeFieldSize(), \"Generator Y is not in the field\");\n    //     // TODO: Check generator order\n    //     generator = EdwardsPoint (_generator[0], _generator[1]);\n    // }\n\n    function getA()\n    internal\n    pure \n    returns (uint256) {\n        return 21888242871839275222246405745257275088548364400416034343698204186575808495616;\n    }\n\n    function getD()\n    internal\n    pure \n    returns (uint256) {\n        return 12181644023421730124874158521699555681764249180949974110617291017600649128846;\n    }\n\n    function getCofactor()\n    internal\n    pure \n    returns (uint256) {\n        return 8;\n    }\n\n    function getMainGroupOrder()\n    internal\n    pure \n    returns (uint256) {\n        return 2736030358979909402780800718157159386076813972158567259200215660948447373041;\n    }\n\n    function getPrimeFieldSize()\n    internal\n    pure \n    returns (uint256) {\n        return 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    }\n\n    function fieldNegate(uint256 _x)\n    internal\n    pure\n    returns (uint256) {\n        return getPrimeFieldSize() - _x;\n    }\n\n    function negate(EdwardsPoint memory P)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        S = EdwardsPoint(fieldNegate(P.x), P.y);\n    }\n\n    function fieldInv(uint256 x) \n    internal \n    pure returns (uint256) {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = x;\n        if (a == 0)\n            return 0;\n        if (a > p)\n            a = a % p;\n        int256 t1;\n        int256 t2 = 1;\n        uint256 r1 = p;\n        uint256 r2 = a;\n        uint256 q;\n        while (r2 != 0) {\n            q = r1 / r2;\n            (t1, t2, r1, r2) = (t2, t1 - int256(q) * t2, r2, r1 - q * r2);\n        }\n        if (t1 < 0)\n            return (p - uint256(-t1));\n        return uint256(t1);\n    }\n\n    // Infinity point is encoded as (0, 1)\n    function isInfinity(EdwardsPoint memory P)\n    internal\n    pure\n    returns (bool)\n    {  \n        return P.x == 0 && P.y == 1;\n    }\n\n    // group addition law\n    // x3 = (x1*y2+y1*x2)/(1+d*x1*x2*y1*y2)\n    // y3 = (y1*y2-a*x1*x2)/(1-d*x1*x2*y1*y2)\n\n    // IMPORTANT! Take no assumption about a == -1 for now\n    function add(EdwardsPoint memory P, EdwardsPoint memory Q)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        // precompute and save x1*y2. x2*y1\n        uint256 x1y2 = mulmod(P.x, Q.y, p);\n        uint256 x2y1 = mulmod(Q.x, P.y, p);\n        // calculate x1*x2 and y1*y2 for shortness\n        uint256 x1x2 = mulmod(P.x, Q.x, p);\n        uint256 y1y2 = mulmod(P.y, Q.y, p);\n\n        uint256 x3_t = addmod(x1y2, x2y1, p);\n        uint256 x3_b = fieldInv(addmod(1, mulmod( mulmod(d, x1y2, p), x2y1, p), p) );\n\n        // manual negations here\n        uint256 y3_t = addmod(y1y2, p - mulmod(a, x1x2, p), p);\n        uint256 y3_b = fieldInv(addmod(1, p - mulmod( mulmod(d, x1y2, p), x2y1, p), p) );\n        \n        S = EdwardsPoint(mulmod(x3_t, x3_b, p), mulmod(y3_t, y3_b, p));\n    }\n\n    // group doubling law\n    // x3 = (x1*y1+y1*x1)/(1+d*x1*x1*y1*y1)\n    // y3 = (y1*y1-a*x1*x1)/(1-d*x1*x1*y1*y1)\n\n    // IMPORTANT! Take no assumption about a == -1 for now\n    function double(EdwardsPoint memory P)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        // precompute and save x1*y2. x2*y1\n        uint256 xx = mulmod(P.x, P.x, p);\n        uint256 yy = mulmod(P.y, P.y, p);\n        uint256 xy = mulmod(P.x, P.y, p);\n\n        uint256 x3_t = addmod(xy, xy, p);\n        uint256 x3_b = fieldInv(addmod(1, mulmod( mulmod(d, xy, p), xy, p), p) );\n\n        // manual negations here\n        uint256 y3_t = addmod(yy, p - mulmod(a, xx, p), p);\n        uint256 y3_b = fieldInv(addmod(1, p - mulmod( mulmod(d, xx, p), yy, p), p) );\n        \n        S = EdwardsPoint(mulmod(x3_t, x3_b, p), mulmod(y3_t, y3_b, p));\n    }\n\n    \n    function multiplyByScalar(\n        uint256 d, \n        EdwardsPoint memory P\n    ) \n    internal \n    pure\n    returns (EdwardsPoint memory S)\n    {\n        \n        S = EdwardsPoint(0,1);\n        if (d == 0) {\n            return S;\n        }\n\n        EdwardsPoint memory base = EdwardsPoint(P.x, P.y);\n\n        // double and add\n        uint256 remaining = d;\n        while (remaining != 0) {\n            if ((remaining & 1) != 0) {\n                S = add(S, base);\n            }\n            remaining = remaining >> 1;\n            base = double(base);\n        }\n\n    }\n\n    // Check that a * x^2 + y^2 = 1 + d * x^2 * y^2\n    function isOnCurve(\n        EdwardsPoint memory P\n    )\n    internal\n    pure\n    returns (bool)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        uint256 xx = mulmod(P.x, P.x, p);\n        uint256 yy = mulmod(P.y, P.y, p);\n\n        uint256 lhs = addmod(mulmod(a, xx,p), yy, p);\n        uint256 rhs = addmod(1, mulmod(d, mulmod(xx, yy, p), p), p);\n\n        return lhs == rhs;\n    }\n\n    function isInCorrectGroup(\n        EdwardsPoint memory P\n    ) \n    internal \n    pure\n    returns (bool)\n    {\n        uint256 order = getMainGroupOrder();\n        return isInfinity(multiplyByScalar(order, P));\n    }\n\n    function isCorrectGroup(\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (bool)\n    {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        return isInCorrectGroup(P);\n    }\n\n    function multiply(\n        uint256 d,\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (uint256[2] memory result)\n    {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        EdwardsPoint memory S = multiplyByScalar(d, P);\n        result[0] = S.x;\n        result[1] = S.y;\n    }\n\n    function checkOnCurve(\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (bool) {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        return isOnCurve(P);\n    }\n\n    // // Multiplication dP. P affine, wNAF: w=5\n    // // Params: d, Px, Py\n    // // Output: Jacobian Q\n    // function _wnafMul(\n    //     uint256 d, \n    //     EdwardsPoint memory P\n    // ) \n    // internal \n    // pure \n    // returns (EdwardsPoint memory S)\n    // {\n    //     uint p = getPrimeFieldSize();\n    //     if (d == 0) {\n    //         return pointOfInfinity;\n    //     }\n    //     uint dwPtr; // points to array of NAF coefficients.\n    //     uint i;\n\n    //     // wNAF\n    //     assembly\n    //     {\n    //         let dm := 0\n    //         dwPtr := mload(0x40)\n    //         mstore(0x40, add(dwPtr, 512)) // Should lower this.\n    //     loop:\n    //         jumpi(loop_end, iszero(d))\n    //         jumpi(even, iszero(and(d, 1)))\n    //         dm := mod(d, 32)\n    //         mstore8(add(dwPtr, i), dm) // Don't store as signed - convert when reading.\n    //         d := add(sub(d, dm), mul(gt(dm, 16), 32))\n    //     even:\n    //         d := div(d, 2)\n    //         i := add(i, 1)\n    //         jump(loop)\n    //     loop_end:\n    //     }\n\n    //     // Pre calculation\n    //     uint[3][8] memory PREC; // P, 3P, 5P, 7P, 9P, 11P, 13P, 15P\n    //     PREC[0] = [P[0], P[1], 1];\n    //     uint[3] memory X = _double(PREC[0]);\n    //     PREC[1] = _addMixed(X, P);\n    //     PREC[2] = _add(X, PREC[1]);\n    //     PREC[3] = _add(X, PREC[2]);\n    //     PREC[4] = _add(X, PREC[3]);\n    //     PREC[5] = _add(X, PREC[4]);\n    //     PREC[6] = _add(X, PREC[5]);\n    //     PREC[7] = _add(X, PREC[6]);\n\n    //     // Mult loop\n    //     while(i > 0) {\n    //         uint dj;\n    //         uint pIdx;\n    //         i--;\n    //         assembly {\n    //             dj := byte(0, mload(add(dwPtr, i)))\n    //         }\n    //         Q = _double(Q);\n    //         if (dj > 16) {\n    //             pIdx = (31 - dj) / 2; // These are the \"negative ones\", so invert y.\n    //             Q = _add(Q, [PREC[pIdx][0], p - PREC[pIdx][1], PREC[pIdx][2] ]);\n    //         }\n    //         else if (dj > 0) {\n    //             pIdx = (dj - 1) / 2;\n    //             Q = _add(Q, [PREC[pIdx][0], PREC[pIdx][1], PREC[pIdx][2] ]);\n    //         }\n    //         if (Q[0] == pointOfInfinity[0] && Q[1] == pointOfInfinity[1] && Q[2] == pointOfInfinity[2]) {\n    //             return Q;\n    //         }\n    //     }\n    //     return Q;\n    // }\n\n\n\n\n\n\n\n}\n\ncontract Verifier {\n\n    function NegateY( uint256 Y )\n        internal pure returns (uint256)\n    {\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        return q - (Y % q);\n    }\n\n    function Verify ( uint256[14] in_vk, uint256[] vk_gammaABC, uint256[8] in_proof, uint256[] proof_inputs )\n        internal \n        view \n        returns (bool)\n    {\n        require( ((vk_gammaABC.length / 2) - 1) == proof_inputs.length, \"Invalid number of public inputs\" );\n\n        // Compute the linear combination vk_x\n        uint256[3] memory mul_input;\n        uint256[4] memory add_input;\n        bool success;\n        uint m = 2;\n\n        // First two fields are used as the sum\n        add_input[0] = vk_gammaABC[0];\n        add_input[1] = vk_gammaABC[1];\n\n        // Performs a sum of gammaABC[0] + sum[ gammaABC[i+1]^proof_inputs[i] ]\n        for (uint i = 0; i < proof_inputs.length; i++) {\n            mul_input[0] = vk_gammaABC[m++];\n            mul_input[1] = vk_gammaABC[m++];\n            mul_input[2] = proof_inputs[i];\n\n            assembly {\n                // ECMUL, output to last 2 elements of `add_input`\n                success := staticcall(sub(gas, 2000), 7, mul_input, 0x60, add(add_input, 0x40), 0x40)\n            }\n            require( success, \"Failed to call ECMUL precompile\" );\n\n            assembly {\n                // ECADD\n                success := staticcall(sub(gas, 2000), 6, add_input, 0x80, add_input, 0x40)\n            }\n            require( success, \"Failed to call ECADD precompile\" );\n        }\n\n        uint[24] memory input = [\n            // (proof.A, proof.B)\n            in_proof[0], in_proof[1],                           // proof.A   (G1)\n            in_proof[2], in_proof[3], in_proof[4], in_proof[5], // proof.B   (G2)\n\n            // (-vk.alpha, vk.beta)\n            in_vk[0], NegateY(in_vk[1]),                        // -vk.alpha (G1)\n            in_vk[2], in_vk[3], in_vk[4], in_vk[5],             // vk.beta   (G2)\n\n            // (-vk_x, vk.gamma)\n            add_input[0], NegateY(add_input[1]),                // -vk_x     (G1)\n            in_vk[6], in_vk[7], in_vk[8], in_vk[9],             // vk.gamma  (G2)\n\n            // (-proof.C, vk.delta)\n            in_proof[6], NegateY(in_proof[7]),                  // -proof.C  (G1)\n            in_vk[10], in_vk[11], in_vk[12], in_vk[13]          // vk.delta  (G2)\n        ];\n\n        uint[1] memory out;\n        assembly {\n            success := staticcall(sub(gas, 2000), 8, input, 768, out, 0x20)\n        }\n        require(success, \"Failed to call pairing precompile\");\n        return out[0] == 1;\n    }\n}\n\ncontract DepositVerificationKey {\n\n    function getVkDepositCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x02834523b73cb0630d49fc3e2054522563fb6471012d3f1e6fe31cb946240774;\n        vk[1] = 0x0ba99f12ab5e9c80db6c85f62fb7a0df5d0dcb1088eb4b48d36156d816489128;\n        vk[2] = 0x0f19b305cee59f6dc3c054880068b4a13768e5b901d0479271c20f8b79243965;\n        vk[3] = 0x11e32a8c382c7fb28b177d02e354607f7c33abc7f5636e71cd0fb4cd77eb1d74;\n        vk[4] = 0x2bee5b6bb3fda73e29152d399f1bd211961f048eeb0d5a7d752ad9ffb649dff1;\n        vk[5] = 0x15ec0d94cdfe1fdcc23a58995e2af0b788fffae99691676fa943d608226b8682;\n        vk[6] = 0x03f6ee67c8871c54c6f20e77376eb305e5b4964f1019bce1ad9ce22b2bec622c;\n        vk[7] = 0x21b45fc68e2059b1eab7eee045ab7be7ed45a2d3f6e3515ac1ec28f7b490b1dd;\n        vk[8] = 0x0c9b53ea69e19134e41340bb6c0d1795661381291bf630c24396f8e866528002;\n        vk[9] = 0x2e24ea773c3f54e3e7fc82249e7de02be3932e8b156800d9e4d19a5047f85cbb;\n        vk[10] = 0x215e8c48ee50bad165d2420f9220145fa4cc98d7dcb52cc2a6e9010fd6214411;\n        vk[11] = 0x1917a1144eb6f1c16ebf2673f2eb0fe275ae8bf518ae36553354580cd191293f;\n        vk[12] = 0x1d636227f8db452d07a36077ffb1f0723947ae4cae746721445d3d249438ee57;\n        vk[13] = 0x13c4be40874508b0fa8b895657084e1a8e1bb7002d7a8cc05f0973763cb20755;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x017474e8efdf8775559844f978a7d23602c51508c42055cba41da71d8c184662;\n        gammaABC[1] = 0x0479fb6bc0d7c11f5a734f450f6a47ec94bd59014f8398b248f59dc058b76b64;\n        gammaABC[2] = 0x06cef07cba4570717e5a1389b1425ed2f9d3de870c651254f557b82187eda82c;\n        gammaABC[3] = 0x1ba4b300e354352533d910452a340d16d2205ab18698cc5158bbb89a4d6340e9;\n        gammaABC[4] = 0x16901a82f58d7d091cb47c0b8daa365e9c8dea97ff33d461044ce0c8f03cae71;\n        gammaABC[5] = 0x0902ea2f0d929f53465faab02d6e6c475868b5004b6ccdf29ec17fdcf1f4bf50;\n        gammaABC[6] = 0x113c4aa77bfc12e18d3d0f64e840c2f912406ee9e61e476aaa67f8c743baa7c2;\n        gammaABC[7] = 0x176aa258bd76a01a4f744c71483afbc1ec4cd0529a6842b8a14c7feb75821e90;\n\n\n    }\n\n}\n\ncontract ExitVerificationKey {\n\n    function getVkExitCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x2655d0f184451488c9c86edaa0f36a7d4f7a2fc3825e7d030af5660d3681ace6;\n        vk[1] = 0x30062c29546c272a712d301884a3deef21716e671c5da66cac7f5d263714a2a6;\n        vk[2] = 0x1e6c69a1d12135996fa27fb9f435d1876b34629e574671ba77826b8733d93b65;\n        vk[3] = 0x0bb271e151e34c9bfe2abaaf66c5888ccfa6c2272a29ab8f5f572d1177fbdf1e;\n        vk[4] = 0x05ff0ddaeb5d75296cac71fd305db5a3395759a926cb6c8701f84d35710f78ee;\n        vk[5] = 0x20272b96093e40001583fead3bd6e8c6453f346bdf92d5779bed7ab884d0aa2e;\n        vk[6] = 0x0950cc975d157dd4e80dc8d162caa4e506186f7adbe9cf69867a18e56b7a167b;\n        vk[7] = 0x0a58c1bf8b3a41a9d53c66509de333ac6e110de78d270f6f4c7a32acac5d65bf;\n        vk[8] = 0x152ff1340ad2dcf6eb3b2373263f3e3d48c58e4f3c8035d994d690efb89105cd;\n        vk[9] = 0x1a7a1d4994c386d270238d45dcf938bfae17753560be434e4c98950d9a150d9c;\n        vk[10] = 0x0ea995b343d372ae0f5cad6a29ea289172d127085b8ebb9a8a46d8c359728dcb;\n        vk[11] = 0x256fd00e2102e55b0e0882a8fc9297d9e2eb66b1f368dea21c3b4fea52ff1b77;\n        vk[12] = 0x024e59df7dad7374d09caa273089b9d27057c131db4d645cbe2b780ed8dca72b;\n        vk[13] = 0x1aea3eea3d14b2240eabd4c12fa0cc60a3431e6f55132cf7809eb80b5c696c7d;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x02e10a3d18c9ddc8a7faf5e20d6cd56ae82426e802596b8e424c8d24a2d8cc91;\n        gammaABC[1] = 0x0fcf4f982b4c051fe7d7e25d73c174f709e1a116a39573f5ebcce86a694086ac;\n        gammaABC[2] = 0x0647167a8df2f9de6e1dbd6e6e52e8bcf6b64d7fb9a6405f3efca93f250cac14;\n        gammaABC[3] = 0x2045113ec018db92050dba997d86b3b440c420d55819887fee065a17ef897897;\n        gammaABC[4] = 0x253baaed4e84773d8b85c1ac4d0b64d15d5652b318c3a72daf96a6d26a6d1481;\n        gammaABC[5] = 0x170034f174be16fd996aeb4ac97653a3f0e344ed8b5dbe947d952208a938edba;\n        gammaABC[6] = 0x23967a7baa217743b308217c7db86912a130a668bce7c9ac030d5ed42472347c;\n        gammaABC[7] = 0x2bfd3180a31b3fef9328b1225755ea2e7ca8d1e832cb4729930e15b5f842300d;\n\n\n    }\n\n}\n\ncontract TransferVerificationKey {\n\n    function getVkTransferCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x10c2409dca4fa02e16250e08e4cbf8eae90c8fba1e91115f065f88f73d0ec0ba;\n        vk[1] = 0x0aa6ecb84f58760a6a01d0f31bb8776582c893f66562b623d9082e50b9147015;\n        vk[2] = 0x10296458aa3bcd5ad37ae95f63f55e90b8830fe1449dc21aee05ebdf7e29ef14;\n        vk[3] = 0x0f51783ae1ca492c229a5d04bc2de03ff6ff9a4f877a2bc80bb60eb1f70cc84b;\n        vk[4] = 0x0f874f1341d40fe04cebe4668c968c74d2d09aa07e4685889c90f6d4ec4345de;\n        vk[5] = 0x1652c73a52779311ca7ffdcd9749e40592780259a9c9e738b63199dad11d7f17;\n        vk[6] = 0x086d1b9a535ffcebe71f045e022967f0c113114c04a1bf944a395c14cce50f49;\n        vk[7] = 0x2b2166f750b92453a4bc000425e93c3c412d911961dcd9050c61368f07673262;\n        vk[8] = 0x12ba168ac5544a1b8c1bd3c47b6d9a1391db76a608e4556b639e0032e2deffbe;\n        vk[9] = 0x2b32a828faf0bb870f693cc8031c166b0063d854c435ea1b516e67ba5a6d8907;\n        vk[10] = 0x100f54919b2e2f9ddaacfae446be3614441bb0e451380ec96658979748613433;\n        vk[11] = 0x066bcceed5d7a04466af77a2af1e9ca005a12f19bc4d7cc8e231354885b82607;\n        vk[12] = 0x28782e5b286bda594b1ad6320c62df3dbfcf4db5043430d19204f46a34fd4119;\n        vk[13] = 0x11b16528236d3aba305c2f3b051b0d88902465da7969d8b6719fbf9dd35dcf2a;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x0f33cb3065f68e121317d06f1424955c5a7e2ec8edebc909aac08a3f17069886;\n        gammaABC[1] = 0x037f77f317232115d1e59c5d751cdfc7cb71860def1eac9c26601ca608818d82;\n        gammaABC[2] = 0x160621974534ddb69577555fb5add3b219fc3d7940d6af98fd0b4d1323e98a02;\n        gammaABC[3] = 0x0f99ebad244805d05f610d8a9e2fb9395fe4159ed19ff545c1663395faf2e54e;\n        gammaABC[4] = 0x252887d8a49ac0d88d097657230f297137e590d836a958c33f6e86737a7b6d5d;\n        gammaABC[5] = 0x303d4a352e156b053325cd397e875076f30a41b8b5cb919c284f76021c95d506;\n        gammaABC[6] = 0x12373b5d89c0ded59c6cff32b0ff93b98a46b0fabc01be54748fbe072c34721e;\n        gammaABC[7] = 0x00c29f8e6d126eff674bede612ba90717ef37c8fa3431309d2bb81dac30871e5;\n\n\n    }\n\n}\n\ncontract VerificationKeys is TransferVerificationKey, DepositVerificationKey, ExitVerificationKey {\n}\n\ncontract FranklinCommon is VerificationKeys, FranklinStorage, Verifier {\n\n    modifier active_only() {\n        require(!stopped, \"contract should not be globally stopped\");\n        _;\n    }\n\n    modifier operator_only() {\n        require(operators[msg.sender] == true, \"sender should be one of the operators\");\n        _;\n    }\n\n    // unit normalization functions\n    function scaleIntoPlasmaUnitsFromWei(uint256 value)\n    public\n    pure\n    returns (uint128) {\n        uint256 den = DENOMINATOR;\n        require(value % den == 0, \"amount has higher precision than possible\");\n        uint256 scaled = value / den;\n        require(scaled < uint256(1) << 128, \"deposit amount is too high\");\n        return uint128(scaled);\n    }\n\n    function scaleFromPlasmaUnitsIntoWei(uint128 value)\n    public\n    pure\n    returns (uint256) {\n        return uint256(value) * DENOMINATOR;\n    }\n\n    function verifyProof(Circuit circuitType, uint256[8] memory proof, bytes32 oldRoot, bytes32 newRoot, bytes32 finalHash)\n        internal view returns (bool valid)\n    {\n        uint256 mask = (~uint256(0)) >> 3;\n        uint256[14] memory vk;\n        uint256[] memory gammaABC;\n        if (circuitType == Circuit.DEPOSIT) {\n            (vk, gammaABC) = getVkDepositCircuit();\n        } else if (circuitType == Circuit.TRANSFER) {\n            (vk, gammaABC) = getVkTransferCircuit();\n        } else if (circuitType == Circuit.EXIT) {\n            (vk, gammaABC) = getVkExitCircuit();\n        } else {\n            return false;\n        }\n        uint256[] memory inputs = new uint256[](3);\n        inputs[0] = uint256(oldRoot);\n        inputs[1] = uint256(newRoot);\n        inputs[2] = uint256(finalHash) & mask;\n        return Verify(vk, gammaABC, proof, inputs);\n    }\n\n}\n\ncontract Depositor is FranklinCommon {\n    \n    function deposit(uint256[2] memory publicKey, uint128 maxFee) \n    public \n    payable \n    active_only()\n    {\n        // only registed an account or do the lookup\n        uint24 accountID = ethereumAddressToAccountID[msg.sender];\n        if (accountID == 0) {\n            // register new account\n            uint256 packedKey = packAndValidatePublicKey(publicKey);\n            ethereumAddressToAccountID[msg.sender] = nextAccountToRegister;\n            Account memory freshAccount = Account(\n                uint8(AccountState.REGISTERED),\n                uint32(0),\n                msg.sender,\n                packedKey,\n                uint32(0),\n                uint32(0)\n            );\n            accountID = nextAccountToRegister;\n            accounts[accountID] = freshAccount;\n            // bump accounts counter\n            nextAccountToRegister += 1;\n        }\n        depositInto(accountID, maxFee);\n    }\n\n    function depositInto(uint24 accountID, uint128 maxFee) \n    public \n    payable \n    active_only()\n    {\n        // this comparison is to avoid frontrunning between user\n        // and the operator\n        require(maxFee >= currentDepositBatchFee, \"deposit fee is less than required\");\n        uint128 scaledValue = scaleIntoPlasmaUnitsFromWei(msg.value);\n        require(scaledValue >= currentDepositBatchFee, \"deposit amount should cover the fee\");\n        require(accountID < nextAccountToRegister, \"for now only allow to deposit into non-empty accounts\");\n        // read account info\n        Account memory accountInformation = accounts[accountID];\n        require(accountInformation.state == uint8(AccountState.REGISTERED), \"can only deposit into registered account\");\n\n        // work with a deposit\n        uint256 currentBatch = totalDepositRequests / DEPOSIT_BATCH_SIZE;\n        // write aux info about the batch\n        DepositBatch storage batch = depositBatches[currentBatch];\n        // amount of time for an operator to process a batch is counted\n        // from the first deposit in the batch\n        if (batch.timestamp == 0) {\n            batch.state = uint8(DepositBatchState.CREATED);\n            batch.numRequests = uint24(0);\n            batch.timestamp = uint64(block.timestamp);\n            batch.batchFee = currentDepositBatchFee;\n        }\n        scaledValue -= currentDepositBatchFee;\n        // get request in this batch for this account\n        DepositRequest storage request = depositRequests[currentBatch][accountID];\n        \n        if (request.amount == 0) {\n            // this is a new request in this batch\n            batch.numRequests++;\n            totalDepositRequests++;\n        }\n        request.amount += scaledValue;\n        \n        emit LogDepositRequest(currentBatch, accountID, accountInformation.publicKey, request.amount);\n    }\n\n    // allow users to cancel a deposit if the work on the next proof is not yet started\n    function cancelDeposit()\n    public\n    {\n        uint24 accountID = ethereumAddressToAccountID[msg.sender];\n        require(accountID != 0, \"trying to cancel a deposit for non-existing account\");\n        uint256 currentBatch = totalDepositRequests/DEPOSIT_BATCH_SIZE;\n        uint256 requestsInThisBatch = totalDepositRequests % DEPOSIT_BATCH_SIZE;\n        DepositBatch storage batch = depositBatches[currentBatch];\n        // this check is most likely excessive, \n        require(batch.state == uint8(DepositBatchState.CREATED), \"canceling is only allowed for batches that are not yet committed\");\n    \n        DepositRequest storage request = depositRequests[currentBatch][accountID];\n        uint128 depositAmount = request.amount;\n        require(depositAmount > 0, \"trying to cancel an empty deposit\");\n\n        // add a batch fee that was previously subtracted\n        depositAmount += batch.batchFee;\n        // log and clear the storage\n        emit LogCancelDepositRequest(currentBatch, accountID);\n        // if the first request in a batch is canceled - clear it to stop the countdown\n        if (requestsInThisBatch == 0) { \n            delete depositBatches[currentBatch];\n        }\n        delete depositRequests[currentBatch][accountID];\n        totalDepositRequests--;\n        batch.numRequests--;\n\n        msg.sender.transfer(scaleFromPlasmaUnitsIntoWei(depositAmount));\n    }\n\n    function startNextDepositBatch()\n    public\n    active_only()\n    operator_only()\n    {\n        uint256 currentBatch = totalDepositRequests/DEPOSIT_BATCH_SIZE;\n        uint256 inTheCurrentBatch = totalDepositRequests % DEPOSIT_BATCH_SIZE;\n        if (inTheCurrentBatch != 0) {\n            totalDepositRequests = (currentBatch + 1) * DEPOSIT_BATCH_SIZE;\n        } else {\n            revert(\"it's not necessary to bump the batch number\");\n        }\n \n    }\n\n    function changeDepositBatchFee(uint128 newBatchFee)\n    public\n    active_only()\n    operator_only()\n    {\n        if (currentDepositBatchFee != newBatchFee) {\n            currentDepositBatchFee = newBatchFee;\n        } else {\n            revert(\"fee adjustment makes no sense\");\n        } \n    }\n\n    // pure function to calculate commitment formats\n    function createPublicDataCommitmentForDeposit(uint32 blockNumber, bytes memory txDataPacked)\n    public \n    pure\n    returns (bytes32 h) {\n\n        bytes32 initialHash = sha256(abi.encodePacked(uint256(blockNumber)));\n        bytes32 finalHash = sha256(abi.encodePacked(initialHash, txDataPacked));\n        \n        return finalHash;\n    }\n\n    // on commitment to some block we just commit to SOME public data, that will be parsed \n    // ONLY when proof is presented\n    \n    function commitDepositBlock(\n        uint256 batchNumber,\n        uint24[DEPOSIT_BATCH_SIZE] memory accoundIDs,\n        uint32 blockNumber, \n        bytes32 newRoot\n    ) \n    public\n    active_only()\n    operator_only()\n    {\n        require(blockNumber == lastCommittedBlockNumber + 1, \"may only commit next block\");\n        require(batchNumber == lastCommittedDepositBatch, \"trying to commit batch out of order\");\n        \n        DepositBatch storage batch = depositBatches[batchNumber];\n        batch.state = uint8(DepositBatchState.COMMITTED);\n        batch.blockNumber = blockNumber;\n        batch.timestamp = uint64(block.timestamp);\n\n        // pack the public data using information that it's already on-chain\n        bytes memory txDataPacked = processDepositBlockData(batchNumber, accoundIDs);\n        \n        // create now commitments and write to storage\n        bytes32 publicDataCommitment = createPublicDataCommitmentForDeposit(blockNumber, txDataPacked);\n\n        blocks[blockNumber] = Block(\n            uint8(Circuit.DEPOSIT), \n            uint64(block.timestamp + MAX_DELAY), \n            0, \n            newRoot, \n            publicDataCommitment, \n            msg.sender\n        );\n        emit BlockCommitted(blockNumber);\n        lastCommittedBlockNumber++;\n        lastCommittedDepositBatch++;\n    }\n\n    function verifyDepositBlock(\n        uint256 batchNumber, \n        uint24[DEPOSIT_BATCH_SIZE] memory accoundIDs, \n        uint32 blockNumber, \n        uint256[8] memory proof\n    ) \n    public \n    active_only()\n    operator_only()\n    {\n        require(lastVerifiedBlockNumber < lastCommittedBlockNumber, \"no committed block to verify\");\n        require(blockNumber == lastVerifiedBlockNumber + 1, \"may only verify next block\");\n        require(batchNumber == lastVerifiedDepositBatch, \"must verify batches in order\");\n\n        Block storage committed = blocks[blockNumber];\n        require(committed.circuit == uint8(Circuit.DEPOSIT), \"trying to prove the invalid circuit for this block number\");\n\n        DepositBatch storage batch = depositBatches[batchNumber];\n        require(batch.blockNumber == blockNumber, \"block number in referencing invalid batch number\");\n        batch.state = uint8(DepositBatchState.VERIFIED);\n        batch.timestamp = uint64(block.timestamp);\n\n        // do actual verification\n        bool verification_success = verifyProof(\n            Circuit.DEPOSIT,\n            proof, \n            lastVerifiedRoot, \n            committed.newRoot, \n            committed.publicDataCommitment\n        );\n        require(verification_success, \"invalid proof\");\n\n        emit BlockVerified(blockNumber);\n        lastVerifiedBlockNumber++;\n        lastVerifiedDepositBatch++;\n        lastVerifiedRoot = committed.newRoot;\n\n        uint128 totalFees = clearDepositBatch(batchNumber, accoundIDs);\n        committed.totalFees = totalFees;\n        balances[committed.prover] += totalFees;\n        // process the block information\n    }\n\n    // transaction data is trivial: 3 bytes of in-plasma address, 16 bytes of amount and 32 bytes of public key\n    function processDepositBlockData(uint256 batchNumber, uint24[DEPOSIT_BATCH_SIZE] memory accountIDs) \n    internal \n    view\n    returns (bytes memory txData)\n    {\n        txData = new bytes(DEPOSIT_BATCH_SIZE * 51);\n        uint256 chunk;\n        uint128 requestAmount;\n        uint256 publicKey;\n        uint256 pointer = 32;\n        uint24 specialAccountID = SPECIAL_ACCOUNT_DEPOSITS;\n        uint256 numRequestsInBatch = uint256(depositBatches[batchNumber].numRequests);\n        uint24 id;\n        for (uint256 i = 0; i < numRequestsInBatch; i++) { \n            // this is a cheap way to ensure that all requests are unique, without O(n) MSTORE\n            // it also automatically guarantees that all requests requests from the batch have been executed\n            require(i == 0 || accountIDs[i] > accountIDs[i-1], \"accountID are not properly ordered\");\n            id = accountIDs[i];\n            require(id != specialAccountID, \"batch should contain non-padding accounts first\");\n            requestAmount = depositRequests[batchNumber][id].amount;\n            publicKey = accounts[id].publicKey;\n            // put address and amount into the top bits of the chunk\n            // address || amount || 0000...0000\n            chunk = ((uint256(id) << 128) + uint256(requestAmount)) << 104;\n            // and store it into place\n            assembly {\n                mstore(add(txData, pointer), chunk)\n            }\n            pointer += 19;\n            assembly {\n                mstore(add(txData, pointer), publicKey)\n            }\n            pointer += 32;\n        }\n        chunk = uint256(specialAccountID) << 232;\n        publicKey = accounts[specialAccountID].publicKey;\n\n        for (i = numRequestsInBatch; i < DEPOSIT_BATCH_SIZE; i++) { \n            id = accountIDs[i];\n            require(id == specialAccountID, \"padding should be done with special account number\");\n            assembly {\n                mstore(add(txData, pointer), chunk)\n            }\n            pointer += 19;\n            assembly {\n                mstore(add(txData, pointer), publicKey)\n            }\n            pointer += 32;\n        }\n\n        return txData;\n    }\n\n    // transaction data is trivial: 3 bytes of in-plasma address and 16 bytes of amount\n    function clearDepositBatch(uint256 batchNumber, uint24[DEPOSIT_BATCH_SIZE] memory accountIDs) \n    internal \n    returns (uint128 totalFees)\n    {\n        uint128 batchFee = depositBatches[batchNumber].batchFee;\n        for (uint256 i = 0; i < DEPOSIT_BATCH_SIZE; i++) { \n            if (accountIDs[i] == 0) {\n                // this was just a padding\n                continue;\n            }\n            require(i == 0 || accountIDs[i] > accountIDs[i-1], \"accountID are not properly ordered\");\n            DepositRequest storage request = depositRequests[batchNumber][accountIDs[i]];\n            require(request.amount != 0, \"trying to process an empty request and collect fees\");\n            delete depositRequests[batchNumber][accountIDs[i]];\n            totalFees += batchFee;\n        }\n        return totalFees;\n    }\n\n    function packAndValidatePublicKey(uint256[2] memory publicKey)\n    public\n    pure\n    returns(uint256 packed) {\n        require(TwistedEdwards.checkOnCurve(publicKey), \"public key must be on the curve\");\n        // group check + packing\n        packed = publicKey[1] + ((publicKey[0] & 1) << 255);\n        return packed;\n    }\n\n    // function () external payable {\n    //     address callee = transactor;\n    //     assembly {\n    //         let memoryPointer := mload(0x40)\n    //         calldatacopy(memoryPointer, 0, calldatasize)\n    //         let newFreeMemoryPointer := add(memoryPointer, calldatasize)\n    //         mstore(0x40, newFreeMemoryPointer)\n    //         let retVal := delegatecall(sub(gas, 2000), callee, memoryPointer, calldatasize, newFreeMemoryPointer, 0x40)\n    //         let retDataSize := returndatasize\n    //         returndatacopy(newFreeMemoryPointer, 0, retDataSize)\n    //         switch retVal case 0 { revert(0,0) } default { return(newFreeMemoryPointer, retDataSize) }\n    //     }\n    // }\n}\n\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastVerifiedRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNextDepositBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPECIAL_ACCOUNT_EXITS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDepositRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalExitRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"exitLeafs\",\"outputs\":[{\"name\":\"nextID\",\"type\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"scaleIntoPlasmaUnitsFromWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_BATCH_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killThisTestContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCommittedExitBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"depositRequests\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"name\":\"accoundIDs\",\"type\":\"uint24[1]\"},{\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"commitDepositBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentExitBatchFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blocks\",\"outputs\":[{\"name\":\"circuit\",\"type\":\"uint8\"},{\"name\":\"deadline\",\"type\":\"uint64\"},{\"name\":\"totalFees\",\"type\":\"uint128\"},{\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"name\":\"publicDataCommitment\",\"type\":\"bytes32\"},{\"name\":\"prover\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountID\",\"type\":\"uint24\"},{\"name\":\"maxFee\",\"type\":\"uint128\"}],\"name\":\"depositInto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"name\":\"txDataPacked\",\"type\":\"bytes\"}],\"name\":\"createPublicDataCommitmentForDeposit\",\"outputs\":[{\"name\":\"h\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastVerifiedDepositBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"exitBatchNumber\",\"type\":\"uint32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"publicKey\",\"type\":\"uint256\"},{\"name\":\"exitListHead\",\"type\":\"uint32\"},{\"name\":\"exitListTail\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCommittedBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethereumAddressToAccountID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"maxFee\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"name\":\"accoundIDs\",\"type\":\"uint24[1]\"},{\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyDepositBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exitBatches\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"name\":\"timestamp\",\"type\":\"uint64\"},{\"name\":\"batchFee\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEADLINE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDepositBatchFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"scaleFromPlasmaUnitsIntoWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"packAndValidatePublicKey\",\"outputs\":[{\"name\":\"packed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPECIAL_ACCOUNT_DEPOSITS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastVerifiedExitBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAccountToRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastVerifiedBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBatchFee\",\"type\":\"uint128\"}],\"name\":\"changeDepositBatchFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositBatches\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"numRequests\",\"type\":\"uint24\"},{\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"name\":\"timestamp\",\"type\":\"uint64\"},{\"name\":\"batchFee\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCommittedDepositBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"accountID\",\"type\":\"uint24\"},{\"indexed\":true,\"name\":\"publicKey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LogDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"accountID\",\"type\":\"uint24\"}],\"name\":\"LogCancelDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"accountID\",\"type\":\"uint24\"}],\"name\":\"LogExitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"accountID\",\"type\":\"uint24\"}],\"name\":\"LogCancelExitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"accountID\",\"type\":\"uint24\"}],\"name\":\"LogCompleteExit\",\"type\":\"event\"}]","ContractName":"Depositor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69aa3ce53739437afb2723bf9a83cb35f4c641efc8a0794d599ade18f99da482"}]}