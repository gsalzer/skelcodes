{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract Operator {\r\n    uint256 public ONE_DAY = 86400;\r\n    uint256 public MIN_DEP = 1 ether;\r\n    uint256 public MAX_DEP = 100 ether;\r\n    address public admin;\r\n    address public admin2;\r\n    address public querierAddress;\r\n    uint256 public depositedAmountGross = 0;\r\n    uint256 public paySystemCommissionTimes = 1;\r\n    uint256 public payDailyIncomeTimes = 1;\r\n    uint256 public lastPaySystemCommission = now;\r\n    uint256 public lastPayDailyIncome = now;\r\n    uint256 public contractStartAt = now;\r\n    uint256 public lastReset = now;\r\n    address payable public operationFund = 0xa4048772583220896ec93316616778B4EbC70F9d;\r\n    address[] public investorAddresses;\r\n    bytes32[] public investmentIds;\r\n    bytes32[] public withdrawalIds;\r\n    bytes32[] public maxOutIds;\r\n    mapping (address => Investor) investors;\r\n    mapping (bytes32 => Investment) public investments;\r\n    mapping (bytes32 => Withdrawal) public withdrawals;\r\n    mapping (bytes32 => MaxOut) public maxOuts;\r\n    mapping (address => WithdrawAccount) public withdrawAccounts;\r\n    uint256 additionNow = 0;\r\n\r\n    uint256 public maxLevelsAddSale = 200;\r\n    uint256 public maximumMaxOutInWeek = 2;\r\n    bool public importing = true;\r\n\r\n    Vote public currentVote;\r\n\r\n    struct WithdrawAccount {\r\n        address initialAddress;\r\n        address currentWithdrawalAddress;\r\n        address requestingWithdrawalAddress;\r\n    }\r\n\r\n    struct Vote {\r\n        uint256 startTime;\r\n        string reason;\r\n        mapping (address => uint8) votes;\r\n        address payable emergencyAddress;\r\n        uint256 yesPoint;\r\n        uint256 noPoint;\r\n        uint256 totalPoint;\r\n    }\r\n\r\n    struct Investment {\r\n        bytes32 id;\r\n        uint256 at;\r\n        uint256 amount;\r\n        address investor;\r\n        address nextInvestor;\r\n        bool nextBranch;\r\n    }\r\n\r\n    struct Withdrawal {\r\n        bytes32 id;\r\n        uint256 at;\r\n        uint256 amount;\r\n        address investor;\r\n        address presentee;\r\n        uint256 reason;\r\n        uint256 times;\r\n    }\r\n\r\n    struct Investor {\r\n        address parent;\r\n        address leftChild;\r\n        address rightChild;\r\n        address presenter;\r\n        uint256 generation;\r\n        uint256 depositedAmount;\r\n        uint256 withdrewAmount;\r\n        bool isDisabled;\r\n        uint256 lastMaxOut;\r\n        uint256 maxOutTimes;\r\n        uint256 maxOutTimesInWeek;\r\n        uint256 totalSell;\r\n        uint256 sellThisMonth;\r\n        uint256 rightSell;\r\n        uint256 leftSell;\r\n        uint256 reserveCommission;\r\n        uint256 dailyIncomeWithrewAmount;\r\n        uint256 registerTime;\r\n        uint256 minDeposit;\r\n        bytes32[] investments;\r\n        bytes32[] withdrawals;\r\n    }\r\n\r\n    struct MaxOut {\r\n        bytes32 id;\r\n        address investor;\r\n        uint256 times;\r\n        uint256 at;\r\n    }\r\n\r\n    constructor () public { admin = msg.sender; }\r\n    \r\n    modifier mustBeAdmin() {\r\n        require(msg.sender == admin || msg.sender == querierAddress || msg.sender == admin2);\r\n        _;\r\n    }\r\n\r\n    modifier mustBeImporting() { require(importing); require(msg.sender == querierAddress || msg.sender == admin); _; }\r\n    \r\n    function () payable external { deposit(); }\r\n\r\n    function getNow() internal view returns(uint256) {\r\n        return additionNow + now;\r\n    }\r\n\r\n    function depositProcess(address sender) internal {\r\n        Investor storage investor = investors[sender];\r\n        require(investor.generation != 0);\r\n        if (investor.depositedAmount == 0) require(msg.value >= investor.minDeposit);\r\n        require(investor.maxOutTimesInWeek < maximumMaxOutInWeek);\r\n        require(investor.maxOutTimes < 50);\r\n        require(investor.maxOutTimes == 0 || getNow() - investor.lastMaxOut < ONE_DAY * 7 || investor.depositedAmount != 0);\r\n        depositedAmountGross += msg.value;\r\n        bytes32 id = keccak256(abi.encodePacked(block.number, getNow(), sender, msg.value));\r\n        uint256 investmentValue = investor.depositedAmount + msg.value <= MAX_DEP ? msg.value : MAX_DEP - investor.depositedAmount;\r\n        if (investmentValue == 0) return;\r\n        bool nextBranch = investors[investor.parent].leftChild == sender; \r\n        Investment memory investment = Investment({ id: id, at: getNow(), amount: investmentValue, investor: sender, nextInvestor: investor.parent, nextBranch: nextBranch  });\r\n        investments[id] = investment;\r\n        processInvestments(id);\r\n        investmentIds.push(id);\r\n    }\r\n\r\n    function pushNewMaxOut(address investorAddress, uint256 times, uint256 depositedAmount) internal {\r\n        bytes32 id = keccak256(abi.encodePacked(block.number, getNow(), investorAddress, times));\r\n        MaxOut memory maxOut = MaxOut({ id: id, at: getNow(), investor: investorAddress, times: times });\r\n        maxOutIds.push(id);\r\n        maxOuts[id] = maxOut;\r\n        investors[investorAddress].minDeposit = depositedAmount;\r\n    }\r\n    \r\n    function deposit() payable public { depositProcess(msg.sender); }\r\n    \r\n    function processInvestments(bytes32 investmentId) internal {\r\n        Investment storage investment = investments[investmentId];\r\n        uint256 amount = investment.amount;\r\n        Investor storage investor = investors[investment.investor];\r\n        investor.investments.push(investmentId);\r\n        investor.depositedAmount += amount;\r\n        address payable presenterAddress = address(uint160(investor.presenter));\r\n        Investor storage presenter = investors[presenterAddress];\r\n        if (presenterAddress != address(0)) {\r\n            presenter.totalSell += amount;\r\n            presenter.sellThisMonth += amount;\r\n        }\r\n        if (presenter.depositedAmount >= MIN_DEP && !presenter.isDisabled) {\r\n            sendEtherForInvestor(presenterAddress, amount / 10, 1, investment.investor, 0);\r\n        }\r\n    }\r\n\r\n    function getWithdrawAddress(address payable initialAddress) public view returns (address payable) {\r\n        WithdrawAccount memory withdrawAccount = withdrawAccounts[initialAddress];\r\n        address withdrawAddress = withdrawAccount.currentWithdrawalAddress;\r\n        if (withdrawAddress != address(0)) return address(uint160(withdrawAddress));\r\n        return initialAddress;\r\n    }\r\n\r\n    function requestChangeWithdrawAddress(address newAddress) public {\r\n        require(investors[msg.sender].depositedAmount > 0);\r\n        WithdrawAccount storage currentWithdrawAccount = withdrawAccounts[msg.sender];\r\n        if (currentWithdrawAccount.initialAddress != address(0)) {\r\n            currentWithdrawAccount.requestingWithdrawalAddress = newAddress;\r\n            return;\r\n        }\r\n        WithdrawAccount memory withdrawAccount = WithdrawAccount({\r\n            initialAddress: msg.sender,\r\n            currentWithdrawalAddress: msg.sender,\r\n            requestingWithdrawalAddress: newAddress\r\n        });\r\n        withdrawAccounts[msg.sender] = withdrawAccount;\r\n    }\r\n\r\n    function acceptChangeWithdrawAddress(address initialAddress, address requestingWithdrawalAddress) public mustBeAdmin {\r\n        WithdrawAccount storage withdrawAccount = withdrawAccounts[initialAddress];\r\n        require(withdrawAccount.requestingWithdrawalAddress == requestingWithdrawalAddress);\r\n        withdrawAccount.requestingWithdrawalAddress = address(0);\r\n        withdrawAccount.currentWithdrawalAddress = requestingWithdrawalAddress;\r\n    }\r\n\r\n    function addSellForParents(bytes32 investmentId) public mustBeAdmin {\r\n        Investment storage investment = investments[investmentId];\r\n        require(investment.nextInvestor != address(0));\r\n        uint256 amount = investment.amount;\r\n        uint256 loopCount = 0;\r\n        while (investment.nextInvestor != address(0) && loopCount < maxLevelsAddSale) {\r\n            Investor storage investor = investors[investment.nextInvestor];\r\n            if (investment.nextBranch) investor.leftSell += amount;\r\n            else investor.rightSell += amount;\r\n            investment.nextBranch = investors[investor.parent].leftChild == investment.nextInvestor;\r\n            investment.nextInvestor = investor.parent;\r\n            loopCount++;\r\n        }\r\n    }\r\n\r\n    function sendEtherForInvestor(address payable investorAddress, uint256 value, uint256 reason, address presentee, uint256 times) internal {\r\n        if (value == 0 && reason != 100) return;\r\n        if (investorAddress == address(0)) return;\r\n        Investor storage investor = investors[investorAddress];\r\n        uint256 unpaidSystemCommission = getUnpaidSystemCommission(investorAddress);\r\n        uint256 totalPaidAfterThisTime = investor.reserveCommission + getDailyIncomeForUser(investorAddress) + unpaidSystemCommission;\r\n        if (reason == 1) totalPaidAfterThisTime += value;\r\n        if (totalPaidAfterThisTime + investor.withdrewAmount >= 3 * investor.depositedAmount) {\r\n            payWithMaxOut(totalPaidAfterThisTime, investorAddress, unpaidSystemCommission);\r\n            return;\r\n        }\r\n        if (investor.reserveCommission > 0) payWithNoMaxOut(investor.reserveCommission, investorAddress, 4, address(0), 0);\r\n        payWithNoMaxOut(value, investorAddress, reason, presentee, times);\r\n    }\r\n    \r\n    function payWithNoMaxOut(uint256 amountToPay, address payable investorAddress, uint256 reason, address presentee, uint256 times) internal {\r\n        investors[investorAddress].withdrewAmount += amountToPay;\r\n        if (reason == 4) investors[investorAddress].reserveCommission = 0;\r\n        if (reason == 3) resetSystemCommision(investorAddress, times);\r\n        if (reason == 2) investors[investorAddress].dailyIncomeWithrewAmount += amountToPay;\r\n        pay(amountToPay, investorAddress, reason, presentee, times);\r\n    }\r\n    \r\n    function payWithMaxOut(uint256 totalPaidAfterThisTime, address payable investorAddress, uint256 unpaidSystemCommission) internal {\r\n        Investor storage investor = investors[investorAddress];\r\n        uint256 amountToPay = investor.depositedAmount * 3 - investor.withdrewAmount;\r\n        uint256 amountToReserve = totalPaidAfterThisTime - amountToPay;\r\n        if (unpaidSystemCommission > 0) resetSystemCommision(investorAddress, 0);\r\n        investor.maxOutTimes++;\r\n        investor.maxOutTimesInWeek++;\r\n        uint256 oldDepositedAmount = investor.depositedAmount;\r\n        investor.depositedAmount = 0;\r\n        investor.withdrewAmount = 0;\r\n        investor.lastMaxOut = getNow();\r\n        investor.dailyIncomeWithrewAmount = 0;\r\n        investor.reserveCommission = amountToReserve;\r\n        pushNewMaxOut(investorAddress, investor.maxOutTimes, oldDepositedAmount);\r\n        pay(amountToPay, investorAddress, 0, address(0), 0);\r\n    }\r\n\r\n    function pay(uint256 amountToPay, address payable investorAddress, uint256 reason, address presentee, uint256 times) internal {\r\n        if (amountToPay == 0) return;\r\n        address payable withdrawAddress = getWithdrawAddress(investorAddress);\r\n        withdrawAddress.transfer(amountToPay / 100 * 90);\r\n        operationFund.transfer(amountToPay / 100 * 10);\r\n        bytes32 id = keccak256(abi.encodePacked(block.difficulty, getNow(), investorAddress, amountToPay, reason));\r\n        Withdrawal memory withdrawal = Withdrawal({ id: id, at: getNow(), amount: amountToPay, investor: investorAddress, presentee: presentee, times: times, reason: reason });\r\n        withdrawals[id] = withdrawal;\r\n        investors[investorAddress].withdrawals.push(id);\r\n        withdrawalIds.push(id);\r\n    }\r\n\r\n    function getAllIncomeTilNow(address investorAddress) internal view returns(uint256 allIncome) {\r\n        Investor memory investor = investors[investorAddress];\r\n        uint256 unpaidDailyIncome = getDailyIncomeForUser(investorAddress);\r\n        uint256 withdrewAmount = investor.withdrewAmount;\r\n        uint256 unpaidSystemCommission = getUnpaidSystemCommission(investorAddress);\r\n        uint256 allIncomeNow = unpaidDailyIncome + withdrewAmount + unpaidSystemCommission;\r\n        return allIncomeNow;\r\n    }\r\n\r\n    function putPresentee(address presenterAddress, address presenteeAddress, address parentAddress, bool isLeft) public mustBeAdmin {\r\n        Investor storage presenter = investors[presenterAddress];\r\n        Investor storage parent = investors[parentAddress];\r\n        if (investorAddresses.length != 0) {\r\n            require(presenter.generation != 0);\r\n            require(parent.generation != 0);\r\n            if (isLeft) {\r\n                require(parent.leftChild == address(0)); \r\n            } else {\r\n                require(parent.rightChild == address(0)); \r\n            }\r\n        }\r\n        Investor memory investor = Investor({\r\n            parent: parentAddress,\r\n            leftChild: address(0),\r\n            rightChild: address(0),\r\n            presenter: presenterAddress,\r\n            generation: parent.generation + 1,\r\n            depositedAmount: 0,\r\n            withdrewAmount: 0,\r\n            isDisabled: false,\r\n            lastMaxOut: getNow(),\r\n            maxOutTimes: 0,\r\n            maxOutTimesInWeek: 0,\r\n            totalSell: 0,\r\n            sellThisMonth: 0,\r\n            registerTime: getNow(),\r\n            investments: new bytes32[](0),\r\n            withdrawals: new bytes32[](0),\r\n            minDeposit: MIN_DEP,\r\n            rightSell: 0,\r\n            leftSell: 0,\r\n            reserveCommission: 0,\r\n            dailyIncomeWithrewAmount: 0\r\n        });\r\n        investors[presenteeAddress] = investor;\r\n       \r\n        investorAddresses.push(presenteeAddress);\r\n        if (parent.generation == 0) return;\r\n        if (isLeft) {\r\n            parent.leftChild = presenteeAddress;\r\n        } else {\r\n            parent.rightChild = presenteeAddress;\r\n        }\r\n    }\r\n\r\n    function getDailyIncomeForUser(address investorAddress) internal view returns(uint256 amount) {\r\n        Investor memory investor = investors[investorAddress];\r\n        uint256 investmentLength = investor.investments.length;\r\n        uint256 dailyIncome = 0;\r\n        for (uint256 i = 0; i < investmentLength; i++) {\r\n            Investment memory investment = investments[investor.investments[i]];\r\n            if (investment.at < investor.lastMaxOut) continue; \r\n            if (getNow() - investment.at >= ONE_DAY) {\r\n                uint256 numberOfDay = (getNow() - investment.at) / ONE_DAY;\r\n                uint256 totalDailyIncome = numberOfDay * investment.amount / 100;\r\n                dailyIncome = totalDailyIncome + dailyIncome;\r\n            }\r\n        }\r\n        return dailyIncome - investor.dailyIncomeWithrewAmount;\r\n    }\r\n    \r\n    function payDailyIncomeForInvestor(address payable investorAddress, uint256 times) public mustBeAdmin {\r\n        uint256 dailyIncome = getDailyIncomeForUser(investorAddress);\r\n        Investor storage investor = investors[investorAddress];\r\n        if (times > ONE_DAY) {\r\n            uint256 investmentLength = investor.investments.length;\r\n            bytes32 lastInvestmentId = investor.investments[investmentLength - 1];\r\n            investments[lastInvestmentId].at -= times;\r\n            investors[investorAddress].lastMaxOut = investments[lastInvestmentId].at;\r\n            return;\r\n        }\r\n        if (investor.isDisabled) return;\r\n        sendEtherForInvestor(investorAddress, dailyIncome, 2, address(0), times);\r\n    }\r\n    \r\n    function payDailyIncomeByIndex(uint256 from, uint256 to) public mustBeAdmin{\r\n        require(from >= 0 && to < investorAddresses.length);\r\n        for(uint256 i = from; i <= to; i++) {\r\n            payDailyIncomeForInvestor(address(uint160(investorAddresses[i])), payDailyIncomeTimes);\r\n        }\r\n    }\r\n\r\n    function getUnpaidSystemCommission(address investorAddress) public view returns(uint256 unpaid) {\r\n        Investor memory investor = investors[investorAddress];\r\n        uint256 depositedAmount = investor.depositedAmount;\r\n        uint256 totalSell = investor.totalSell;\r\n        uint256 leftSell = investor.leftSell;\r\n        uint256 rightSell = investor.rightSell;\r\n        uint256 sellThisMonth = investor.sellThisMonth;\r\n        uint256 sellToPaySystemCommission = rightSell < leftSell ? rightSell : leftSell;\r\n        uint256 commission = sellToPaySystemCommission * getPercentage(depositedAmount, totalSell, sellThisMonth) / 100;\r\n        return commission;\r\n    }\r\n    \r\n    function paySystemCommissionInvestor(address payable investorAddress, uint256 times) public mustBeAdmin {\r\n        Investor storage investor = investors[investorAddress];\r\n        if (investor.isDisabled) return;\r\n        uint256 systemCommission = getUnpaidSystemCommission(investorAddress);\r\n        sendEtherForInvestor(investorAddress, systemCommission, 3, address(0), times);\r\n    }\r\n\r\n    function resetSystemCommision(address investorAddress, uint256 times) internal {\r\n        Investor storage investor = investors[investorAddress];\r\n        if (paySystemCommissionTimes > 3 && times != 0) {\r\n            investor.rightSell = 0;\r\n            investor.leftSell = 0;\r\n        } else if (investor.rightSell >= investor.leftSell) {\r\n            investor.rightSell = investor.rightSell - investor.leftSell;\r\n            investor.leftSell = 0;\r\n        } else {\r\n            investor.leftSell = investor.leftSell - investor.rightSell;\r\n            investor.rightSell = 0;\r\n        }\r\n        if (times != 0) investor.sellThisMonth = 0;\r\n    }\r\n\r\n    function paySystemCommissionByIndex(uint256 from, uint256 to) public mustBeAdmin {\r\n         require(from >= 0 && to < investorAddresses.length);\r\n        if (getNow() <= 30 * ONE_DAY + contractStartAt) return;\r\n        for(uint256 i = from; i <= to; i++) {\r\n            paySystemCommissionInvestor(address(uint160(investorAddresses[i])), paySystemCommissionTimes);\r\n        }\r\n    }\r\n    \r\n    function finishPayDailyIncome() public mustBeAdmin {\r\n        lastPayDailyIncome = getNow();\r\n        payDailyIncomeTimes++;\r\n    }\r\n    \r\n    function finishPaySystemCommission() public mustBeAdmin {\r\n        lastPaySystemCommission = getNow();\r\n        paySystemCommissionTimes++;\r\n    }\r\n    \r\n    function resetGame(uint256 from, uint256 to) public mustBeAdmin {\r\n        require(from >= 0 && to < investorAddresses.length);\r\n        require(currentVote.startTime != 0);\r\n        require(getNow() - currentVote.startTime > 3 * ONE_DAY);\r\n        require(currentVote.yesPoint > currentVote.totalPoint / 2);\r\n        require(currentVote.emergencyAddress == address(0));\r\n        lastReset = getNow();\r\n        for (uint256 i = from; i < to; i++) {\r\n            address investorAddress = investorAddresses[i];\r\n            Investor storage investor = investors[investorAddress];\r\n            uint256 currentVoteValue = currentVote.votes[investorAddress] != 0 ? currentVote.votes[investorAddress] : 2;\r\n            if (currentVoteValue == 2) {\r\n                if (investor.maxOutTimes > 0 || (investor.withdrewAmount >= investor.depositedAmount && investor.withdrewAmount != 0)) {\r\n                    investor.lastMaxOut = getNow();\r\n                    investor.depositedAmount = 0;\r\n                    investor.withdrewAmount = 0;\r\n                    investor.dailyIncomeWithrewAmount = 0;\r\n                }\r\n                investor.reserveCommission = 0;\r\n                investor.rightSell = 0;\r\n                investor.leftSell = 0;\r\n                investor.totalSell = 0;\r\n                investor.sellThisMonth = 0;\r\n            } else {\r\n                if (investor.maxOutTimes > 0 || (investor.withdrewAmount >= investor.depositedAmount && investor.withdrewAmount != 0)) {\r\n                    investor.isDisabled = true;\r\n                    investor.reserveCommission = 0;\r\n                    investor.lastMaxOut = getNow();\r\n                    investor.depositedAmount = 0;\r\n                    investor.withdrewAmount = 0;\r\n                    investor.dailyIncomeWithrewAmount = 0;\r\n                }\r\n                investor.reserveCommission = 0;\r\n                investor.rightSell = 0;\r\n                investor.leftSell = 0;\r\n                investor.totalSell = 0;\r\n                investor.sellThisMonth = 0;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    function stopGame(uint256 percent, uint256 from, uint256 to) mustBeAdmin public {\r\n        require(currentVote.startTime != 0);\r\n        require(getNow() - currentVote.startTime > 3 * ONE_DAY);\r\n        require(currentVote.noPoint > currentVote.totalPoint / 2);\r\n        require(currentVote.emergencyAddress == address(0));\r\n        require(percent <= 50);\r\n        require(from >= 0 && to < investorAddresses.length);\r\n        for (uint256 i = from; i <= to; i++) {\r\n            address payable investorAddress = address(uint160(investorAddresses[i]));\r\n            Investor storage investor = investors[investorAddress];\r\n            if (investor.maxOutTimes > 0) continue;\r\n            if (investor.isDisabled) continue;\r\n            uint256 depositedAmount = investor.depositedAmount;\r\n            uint256 withdrewAmount = investor.withdrewAmount;\r\n            if (withdrewAmount >= depositedAmount / 2) continue;\r\n            sendEtherForInvestor(investorAddress, depositedAmount * percent / 100 - withdrewAmount, 6, address(0), 0);\r\n        }\r\n    }\r\n    \r\n    function revivalInvestor(address investor) public mustBeAdmin { investors[investor].lastMaxOut = getNow(); }\r\n\r\n    function payToReachMaxOut(address payable investorAddress) public mustBeAdmin {\r\n        uint256 unpaidSystemCommissions = getUnpaidSystemCommission(investorAddress);\r\n        uint256 unpaidDailyIncomes = getDailyIncomeForUser(investorAddress);\r\n        uint256 withdrewAmount = investors[investorAddress].withdrewAmount;\r\n        uint256 depositedAmount = investors[investorAddress].depositedAmount;\r\n        uint256 reserveCommission = investors[investorAddress].reserveCommission;\r\n        require(depositedAmount > 0  && withdrewAmount + unpaidSystemCommissions + unpaidDailyIncomes + reserveCommission >= 3 * depositedAmount);\r\n        sendEtherForInvestor(investorAddress, 0, 100, address(0), 0);\r\n    }\r\n\r\n    function resetMaxOutInWeek(uint256 from, uint256 to) public mustBeAdmin {\r\n        require(from >= 0 && to < investorAddresses.length);\r\n        for (uint256 i = from; i < to; i++) {\r\n            address investorAddress = investorAddresses[i];\r\n            if (investors[investorAddress].maxOutTimesInWeek == 0) continue;\r\n            investors[investorAddress].maxOutTimesInWeek = 0;\r\n        }\r\n    }\r\n\r\n    function setMaximumMaxOutTimes(address investorAddress, uint256 times) public mustBeAdmin{ investors[investorAddress].maxOutTimes = times; }\r\n\r\n    function disableInvestor(address investorAddress) public mustBeAdmin {\r\n        Investor storage investor = investors[investorAddress];\r\n        investor.isDisabled = true;\r\n    }\r\n    \r\n    function enableInvestor(address investorAddress) public mustBeAdmin {\r\n        Investor storage investor = investors[investorAddress];\r\n        investor.isDisabled = false;\r\n    }\r\n    \r\n    function donate() payable public { depositedAmountGross += msg.value; }\r\n\r\n    function getTotalSellLevel(uint256 totalSell) internal pure returns (uint256 level){\r\n        if (totalSell < 30 ether) return 0;\r\n        if (totalSell < 60 ether) return 1;\r\n        if (totalSell < 90 ether) return 2;\r\n        if (totalSell < 120 ether) return 3;\r\n        if (totalSell < 150 ether) return 4;\r\n        return 5;\r\n    }\r\n\r\n    function getSellThisMonthLevel(uint256 sellThisMonth) internal pure returns (uint256 level){\r\n        if (sellThisMonth < 2 ether) return 0;\r\n        if (sellThisMonth < 4 ether) return 1;\r\n        if (sellThisMonth < 6 ether) return 2;\r\n        if (sellThisMonth < 8 ether) return 3;\r\n        if (sellThisMonth < 10 ether) return 4;\r\n        return 5;\r\n    }\r\n    \r\n    function getDepositLevel(uint256 depositedAmount) internal pure returns (uint256 level){\r\n        if (depositedAmount < 2 ether) return 0;\r\n        if (depositedAmount < 4 ether) return 1;\r\n        if (depositedAmount < 6 ether) return 2;\r\n        if (depositedAmount < 8 ether) return 3;\r\n        if (depositedAmount < 10 ether) return 4;\r\n        return 5;\r\n    }\r\n    \r\n    function getPercentage(uint256 depositedAmount, uint256 totalSell, uint256 sellThisMonth) internal pure returns(uint256 level) {\r\n        uint256 totalSellLevel = getTotalSellLevel(totalSell);\r\n        uint256 depLevel = getDepositLevel(depositedAmount);\r\n        uint256 sellThisMonthLevel = getSellThisMonthLevel(sellThisMonth);\r\n        uint256 min12 = totalSellLevel < depLevel ? totalSellLevel : depLevel;\r\n        uint256 minLevel = sellThisMonthLevel < min12 ? sellThisMonthLevel : min12;\r\n        return minLevel * 2;\r\n    }\r\n    \r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) return 0x0;\r\n        assembly { result := mload(add(source, 32)) }\r\n    }\r\n    \r\n    function getInvestor(address investorAddress) view public returns (address[] memory addresses, bool isDisabled, uint256[] memory numbers) {\r\n        addresses = new address[](4);\r\n        numbers = new uint256[](16);\r\n        Investor memory investor = investors[investorAddress];\r\n        addresses[0] = investor.parent;\r\n        addresses[1] = investor.leftChild;\r\n        addresses[2] = investor.rightChild;\r\n        addresses[3] = investor.presenter;\r\n        numbers[0] = investor.generation;\r\n        numbers[1] = investor.depositedAmount;\r\n        numbers[2] = investor.withdrewAmount;\r\n        numbers[3] = investor.lastMaxOut;\r\n        numbers[4] = investor.maxOutTimes;\r\n        numbers[5] = investor.maxOutTimesInWeek;\r\n        numbers[6] = investor.totalSell;\r\n        numbers[7] = investor.sellThisMonth;\r\n        numbers[8] = investor.rightSell;\r\n        numbers[9] = investor.leftSell;\r\n        numbers[10] = investor.reserveCommission;\r\n        numbers[11] = investor.dailyIncomeWithrewAmount;\r\n        numbers[12] = investor.registerTime;\r\n        numbers[13] = getUnpaidSystemCommission(investorAddress);\r\n        numbers[14] = getDailyIncomeForUser(investorAddress);\r\n        numbers[15] = investor.minDeposit;\r\n        return (addresses, investor.isDisabled, numbers);\r\n    }\r\n\r\n    function getInvestorLength() view public returns(uint256) { return investorAddresses.length; }\r\n\r\n    function getMaxOutsLength() view public returns(uint256) { return maxOutIds.length; }\r\n    \r\n    function getNodesAddresses(address rootNodeAddress) public view returns(address[] memory){\r\n        uint256 maxLength = investorAddresses.length;\r\n        address[] memory nodes = new address[](maxLength);\r\n        nodes[0] = rootNodeAddress;\r\n        uint256 processIndex = 0;\r\n        uint256 nextIndex = 1;\r\n        while (processIndex != nextIndex) {\r\n            Investor memory currentInvestor = investors[nodes[processIndex++]];\r\n            if (currentInvestor.leftChild != address(0)) nodes[nextIndex++] = currentInvestor.leftChild;\r\n            if (currentInvestor.rightChild != address(0)) nodes[nextIndex++] = currentInvestor.rightChild;\r\n        }\r\n        return nodes;\r\n    }\r\n    \r\n    function getInvestmentsLength () public view returns(uint256 length) { return investmentIds.length; }\r\n    \r\n    function getWithdrawalsLength() public view returns(uint256 length) { return withdrawalIds.length; }\r\n    \r\n    function importInvestor(address[] memory addresses, bool isDisabled, uint256[] memory numbers) public mustBeImporting {\r\n        if (investors[addresses[4]].generation != 0) return;\r\n        Investor memory investor = Investor({\r\n            isDisabled: isDisabled,\r\n            parent: addresses[0],\r\n            leftChild: addresses[1],\r\n            rightChild: addresses[2],\r\n            presenter: addresses[3],\r\n            generation: numbers[0],\r\n            depositedAmount: numbers[1],\r\n            withdrewAmount: numbers[2],\r\n            lastMaxOut: numbers[3],\r\n            maxOutTimes: numbers[4],\r\n            maxOutTimesInWeek: numbers[5],\r\n            totalSell: numbers[6],\r\n            sellThisMonth: numbers[7],\r\n            investments: new bytes32[](0),\r\n            withdrawals: new bytes32[](0),\r\n            rightSell: numbers[8],\r\n            leftSell: numbers[9],\r\n            reserveCommission: numbers[10],\r\n            dailyIncomeWithrewAmount: numbers[11],\r\n            registerTime: numbers[12],\r\n            minDeposit: MIN_DEP\r\n        });\r\n        investors[addresses[4]] = investor;\r\n        investorAddresses.push(addresses[4]);\r\n    }\r\n    \r\n    function importInvestments(bytes32 id, uint256 at, uint256 amount, address investorAddress) public mustBeImporting {\r\n        if (investments[id].at != 0) return;\r\n        Investment memory investment = Investment({ id: id, at: at, amount: amount, investor: investorAddress, nextInvestor: address(0), nextBranch: false });\r\n        investments[id] = investment;\r\n        investmentIds.push(id);\r\n        Investor storage investor = investors[investorAddress];\r\n        investor.investments.push(id);\r\n        depositedAmountGross += amount;\r\n    }\r\n    \r\n    function importWithdrawals(bytes32 id, uint256 at, uint256 amount, address investorAddress, address presentee, uint256 reason, uint256 times) public mustBeImporting {\r\n        if (withdrawals[id].at != 0) return;\r\n        Withdrawal memory withdrawal = Withdrawal({ id: id, at: at, amount: amount, investor: investorAddress, presentee: presentee, times: times, reason: reason });\r\n        withdrawals[id] = withdrawal;\r\n        Investor storage investor = investors[investorAddress];\r\n        investor.withdrawals.push(id);\r\n        withdrawalIds.push(id);\r\n    }\r\n    \r\n    function finishImporting() public mustBeAdmin { importing = false; }\r\n\r\n    function finalizeVotes(uint256 from, uint256 to, bool isRemoving) public mustBeAdmin {\r\n        require(getNow() - currentVote.startTime > 3 * ONE_DAY);\r\n        for (uint256 index = from; index < to; index++) {\r\n            address investorAddress = investorAddresses[index];\r\n            if (isRemoving && currentVote.votes[investorAddress] == 3) {\r\n                currentVote.votes[investorAddress] = 0;\r\n                continue;\r\n            }\r\n            if (currentVote.votes[investorAddress] == 0) {\r\n                currentVote.yesPoint += 1;\r\n            }\r\n            currentVote.votes[investorAddress] = 3;\r\n        }\r\n    }\r\n\r\n    function createVote(string memory reason, address payable emergencyAddress) public mustBeAdmin {\r\n        require(currentVote.startTime == 0);\r\n        currentVote = Vote({\r\n            startTime: getNow(),\r\n            reason: reason,\r\n            emergencyAddress: emergencyAddress,\r\n            yesPoint: 0,\r\n            noPoint: 0,\r\n            totalPoint: investorAddresses.length\r\n        });\r\n    }\r\n\r\n    function removeVote() public mustBeAdmin {\r\n        currentVote = Vote({\r\n            startTime: 0,\r\n            reason: '',\r\n            emergencyAddress: address(0),\r\n            yesPoint: 0,\r\n            noPoint: 0,\r\n            totalPoint: 0\r\n        });\r\n    }\r\n    \r\n    function sendEtherToNewContract() public mustBeAdmin {\r\n        require(currentVote.startTime != 0);\r\n        require(getNow() - currentVote.startTime > 3 * ONE_DAY);\r\n        require(currentVote.yesPoint > currentVote.totalPoint / 2);\r\n        require(currentVote.emergencyAddress != address(0));\r\n        bool isTransferSuccess = false;\r\n        (isTransferSuccess, ) = currentVote.emergencyAddress.call.value(address(this).balance)(\"\");\r\n        if (!isTransferSuccess) revert();\r\n    }\r\n\r\n    function voteProcess(address investor, bool isYes) internal {\r\n        require(investors[investor].depositedAmount > 0);\r\n        require(!investors[investor].isDisabled);\r\n        require(getNow() - currentVote.startTime < 3 * ONE_DAY);\r\n        uint8 newVoteValue = isYes ? 2 : 1;\r\n        uint8 currentVoteValue = currentVote.votes[investor];\r\n        require(newVoteValue != currentVoteValue);\r\n        updateVote(isYes);\r\n        if (currentVoteValue == 0) return;\r\n        if (isYes) {\r\n            currentVote.noPoint -= getVoteShare();\r\n        } else {\r\n            currentVote.yesPoint -= getVoteShare();\r\n        }\r\n    }\r\n    \r\n    function vote(bool isYes) public { voteProcess(msg.sender, isYes); }\r\n    \r\n    function updateVote(bool isYes) internal {\r\n        currentVote.votes[msg.sender] = isYes ? 2 : 1;\r\n        if (isYes) {\r\n            currentVote.yesPoint += getVoteShare();\r\n        } else {\r\n            currentVote.noPoint += getVoteShare();\r\n        }\r\n    }\r\n    \r\n    function getVoteShare() public view returns(uint256) {\r\n        if (investors[msg.sender].generation >= 3) return 1;\r\n        if (currentVote.totalPoint > 40) return currentVote.totalPoint / 20;\r\n        return 2;\r\n    }\r\n    \r\n    function setQuerier(address _querierAddress) public mustBeAdmin {\r\n        querierAddress = _querierAddress;\r\n    }\r\n\r\n    function setAdmin2(address _admin2) public mustBeAdmin {\r\n        admin2 = _admin2;\r\n    }\r\n\r\n    function setInitialValue(uint256 _paySystemCommissionTimes, uint256 _payDailyIncomeTimes, uint256 _lastPaySystemCommission, uint256 _lastPayDailyIncome, uint256 _contractStartAt, uint256 _lastReset) public mustBeImporting {\r\n        paySystemCommissionTimes = _paySystemCommissionTimes;\r\n        payDailyIncomeTimes = _payDailyIncomeTimes;\r\n        lastPaySystemCommission = _lastPaySystemCommission;\r\n        lastPayDailyIncome = _lastPayDailyIncome;\r\n        contractStartAt = _contractStartAt;\r\n        lastReset = _lastReset;\r\n    }\r\n\r\n    function depositFor(address investor) public payable mustBeAdmin {\r\n        depositProcess(investor);\r\n    }\r\n\r\n    function setInvestorTestInfo(address investorAddress, uint256 totalSell, uint256 sellThisMonth, uint256 rightSell, uint256 leftSell) public mustBeAdmin {\r\n        Investor storage investor = investors[investorAddress];\r\n        require(investor.generation > 0);\r\n        investor.totalSell = totalSell;\r\n        investor.sellThisMonth = sellThisMonth;\r\n        investor.rightSell = rightSell;\r\n        investor.leftSell = leftSell;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"isDisabled\",\"type\":\"bool\"},{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"name\":\"importInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositedAmountGross\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendEtherToNewContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paySystemCommissionTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayDailyIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"enableInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin2\",\"type\":\"address\"}],\"name\":\"setAdmin2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"importing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxOutIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestmentsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxOutsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_querierAddress\",\"type\":\"address\"}],\"name\":\"setQuerier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rootNodeAddress\",\"type\":\"address\"}],\"name\":\"getNodesAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isYes\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"resetMaxOutInWeek\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPayDailyIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"paySystemCommissionInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"totalSell\",\"type\":\"uint256\"},{\"name\":\"sellThisMonth\",\"type\":\"uint256\"},{\"name\":\"rightSell\",\"type\":\"uint256\"},{\"name\":\"leftSell\",\"type\":\"uint256\"}],\"name\":\"setInvestorTestInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"maxOuts\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"times\",\"type\":\"uint256\"},{\"name\":\"at\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"at\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"importInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"resetGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"requestChangeWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"paySystemCommissionByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reason\",\"type\":\"string\"},{\"name\":\"emergencyAddress\",\"type\":\"address\"}],\"name\":\"createVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAccounts\",\"outputs\":[{\"name\":\"initialAddress\",\"type\":\"address\"},{\"name\":\"currentWithdrawalAddress\",\"type\":\"address\"},{\"name\":\"requestingWithdrawalAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"querierAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumMaxOutInWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"at\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"presentee\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"importWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getInvestor\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"isDisabled\",\"type\":\"bool\"},{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaySystemCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"setMaximumMaxOutTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"presenterAddress\",\"type\":\"address\"},{\"name\":\"presenteeAddress\",\"type\":\"address\"},{\"name\":\"parentAddress\",\"type\":\"address\"},{\"name\":\"isLeft\",\"type\":\"bool\"}],\"name\":\"putPresentee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"initialAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payDailyIncomeTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"payDailyIncomeByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPaySystemCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastReset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishImporting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getUnpaidSystemCommission\",\"outputs\":[{\"name\":\"unpaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"payDailyIncomeForInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"revivalInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"at\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"nextInvestor\",\"type\":\"address\"},{\"name\":\"nextBranch\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paySystemCommissionTimes\",\"type\":\"uint256\"},{\"name\":\"_payDailyIncomeTimes\",\"type\":\"uint256\"},{\"name\":\"_lastPaySystemCommission\",\"type\":\"uint256\"},{\"name\":\"_lastPayDailyIncome\",\"type\":\"uint256\"},{\"name\":\"_contractStartAt\",\"type\":\"uint256\"},{\"name\":\"_lastReset\",\"type\":\"uint256\"}],\"name\":\"setInitialValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"isRemoving\",\"type\":\"bool\"}],\"name\":\"finalizeVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"stopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"at\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"presentee\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"disableInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLevelsAddSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVote\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"},{\"name\":\"emergencyAddress\",\"type\":\"address\"},{\"name\":\"yesPoint\",\"type\":\"uint256\"},{\"name\":\"noPoint\",\"type\":\"uint256\"},{\"name\":\"totalPoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investmentId\",\"type\":\"bytes32\"}],\"name\":\"addSellForParents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialAddress\",\"type\":\"address\"},{\"name\":\"requestingWithdrawalAddress\",\"type\":\"address\"}],\"name\":\"acceptChangeWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"payToReachMaxOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Operator","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2fcdb7624d85c6a65d1ad3745fb91fc9950ef0cbaf93fcdf1d86d58fa1f49d57"}]}