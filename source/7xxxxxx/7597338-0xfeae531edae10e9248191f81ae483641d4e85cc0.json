{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * InfinityPool - A multi-tenant mining quarry for ANY ZeroCache token provider\r\n *                that wishes to offer their users a Proof-of-Work (PoW) reward \r\n *                system.\r\n *\r\n * \r\n *                Why InfinityPool Mining?\r\n *                ------------------------\r\n * \r\n *                A better model than ICOs and Airdrops, PoW mining is accepted as \r\n *                the MOST democratic distribution system available in crypto today.\r\n * \r\n *                To learn more, please visit:\r\n *                https://infinitypool.info\r\n * \r\n * Version 19.4.19\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ZeroCache Interface\r\n */\r\ncontract ZeroCacheInterface {\r\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\r\n    function transfer(address _token, address _to, uint _tokens) external returns (bool success);\r\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice InfinityPool is a public storage for Mineable Crypto.\r\n *\r\n * @dev This is a multi-tenant quarry for \"Mineable\" ERC-918 tokens.\r\n *      https://eips.ethereum.org/EIPS/eip-918\r\n * \r\n *      Token Supply\r\n *      ------------\r\n *\r\n *      Owner will maintain 100% control over the token supply by using\r\n *      the `deposit` and `withdraw` functions to add / reduce the token supply.\r\n *      (NOTE: withdrawals are managed/transferred via the Minado.sol contract)\r\n * \r\n *      Pool Fees\r\n *      ---------\r\n * \r\n *      Upon deposit of an ERC-20 token, 1% is automatically transferred to \r\n *      the InfinityWell for community reward.\r\n */\r\ncontract InfinityPool is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n    \r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n    \r\n    /**\r\n     * Set Namespace\r\n     * \r\n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\r\n     * most commonly used as database \"key-value\" keys.\r\n     * \r\n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\r\n     *       Zer0netDb keys; in order to prevent ANY accidental or\r\n     *       malicious SQL-injection vulnerabilities / attacks.\r\n     */\r\n    string private _namespace = 'infinitypool';\r\n\r\n    event Deposit(\r\n        address indexed token, \r\n        address owner, \r\n        uint tokens\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed token, \r\n        address receiver, \r\n        uint tokens\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Set predecessor address. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = InfinityPool(_predecessor).getRevision();\r\n            \r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * ACTIONS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Deposit\r\n     * \r\n     * Provides support for \"manual\" token deposits.\r\n     * \r\n     * NOTE: This function requires ZeroCache transfer authorization.\r\n     */\r\n    function deposit(\r\n        address _token,\r\n        address _from, \r\n        uint _tokens,\r\n        address _staekholder, \r\n        uint _staek, \r\n        uint _expires, \r\n        uint _nonce, \r\n        bytes _signature\r\n    ) external returns (bool success) {\r\n        /* Transfer the ERC-20 tokens into Pool. */\r\n        _zeroCache().transfer(\r\n            _token, \r\n            _from, \r\n            address(this), \r\n            _tokens, \r\n            _staekholder, \r\n            _staek, \r\n            _expires, \r\n            _nonce, \r\n            _signature\r\n        );\r\n\r\n        /* InfinityWell 1% token drop. */        \r\n        _wellDrop(_token, _tokens);\r\n\r\n        /* Broadcast event. */\r\n        emit Deposit(_token, _from, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * (Irreversible) Well Drop\r\n     * \r\n     * A 1% contribution will be automatically \"dropped\" into the InfinityWell\r\n     * during each deposit into the InfinityPool.\r\n     */\r\n    function _wellDrop(\r\n        address _token,\r\n        uint _tokens\r\n    ) private returns (bool success) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256('aname.infinitywell');\r\n            \r\n        /* Retrieve value from Zer0net Db. */\r\n        address infinityWell = _zer0netDb.getAddress(hash);\r\n\r\n        /* Calculate InifinityWell drop amount. */\r\n        // NOTE: This is fixed at 1% of token (deposit) amount.\r\n        uint dropAmount = uint(_tokens.div(100));\r\n        \r\n        /* Transfer the ERC-20 tokens into the InfinityWell. */\r\n        // NOTE: This transfer is irreversible.\r\n        _zeroCache().transfer(\r\n            _token, \r\n            infinityWell, \r\n            dropAmount\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Administrative Transfer\r\n     * \r\n     * NOTE: This will typically be called from an authorized,\r\n     *       open-source Zer0net contract.\r\n     * \r\n     * WARNING: This contract DOES NOT / WILL NOT have the ability to \r\n     *          transfer out non-ZeroCache tokens sent in erroneously.\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        address _to, \r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Make transfer. */\r\n        _zeroCache().transfer(_token, _to, _tokens);\r\n        \r\n        /* Broadcast event. */\r\n        emit Transfer(_token, _to, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * GETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n\r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n    \r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n    \r\n\r\n    /***************************************************************************\r\n     * \r\n     * SETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Set Successor\r\n     * \r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     * \r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     * \r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n        \r\n        // TODO Add additional interfaces here.\r\n        \r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ZeroCache Interface\r\n     *\r\n     * Retrieves the current ZeroCache interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroCache() private view returns (\r\n        ZeroCacheInterface zeroCache\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.zerocache');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        zeroCache = ZeroCacheInterface(aname);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InfinityPool","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df4b927a02bebd630b4955fa1954176a5cbb9553ee4db25a4e00aee28a0bc2d6"}]}