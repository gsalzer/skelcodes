{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n    address payable public reclaimablePocket; //**this will hold any of this contract token that is sent to this contract by mistake, and can be claimed back\r\n    address payable public teamWallet;\r\n    constructor(address payable _reclaimablePocket, address payable _teamWallet) public {\r\n        owner = msg.sender;\r\n        reclaimablePocket = _reclaimablePocket;\r\n        teamWallet = _teamWallet;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyTeam {\r\n        require(msg.sender == teamWallet || msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address payable newOwner) onlyOwner public { owner = newOwner; }\r\n    function changeRecPocket(address payable _newRecPocket) onlyTeam public { reclaimablePocket = _newRecPocket;}\r\n    function changeTeamWallet(address payable _newTeamWallet) onlyOwner public { teamWallet = _newTeamWallet;}\r\n}\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool); //3rd party transfer\r\n    function approve(address _spender, uint _value) external returns (bool); //set allowance\r\n    function allowance(address _owner, address _spender) external view returns (uint); //get allowance value\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value); //emits approval activities\r\n}\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes calldata _data) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\ninterface ERC223ReceivingContract { function tokenFallback(address _from, uint _value, bytes calldata _data) external; }\r\n\r\ncontract Token is ERC20, ERC223, owned {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    string internal _symbol;\r\n    string internal _name;\r\n    uint256 internal _decimals = 18;\r\n    string public version = \"1.0.0\";\r\n    uint internal _totalSupply;\r\n    mapping (address => uint) internal _balanceOf;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n\r\n    //Configurables\r\n    uint256 public tokensSold = 0;\r\n    uint256 public remainingTokens;\r\n    //uint256 public teamReserve;\r\n    uint256 public buyPrice;    //eth per Token\r\n    \r\n    constructor(string memory name, string memory symbol, uint totalSupply) public {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _totalSupply = totalSupply * 10 ** uint256(_decimals);  // Update total supply with the decimal amount\r\n    }\r\n    \r\n    function name() public view returns (string memory) { return _name; }\r\n    function symbol() public view returns (string memory) { return _symbol; }\r\n    function decimals() public view returns (uint256) { return _decimals; }\r\n    function totalSupply() public view returns (uint) { return _totalSupply; }\r\n    function balanceOf(address _addr) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // To emit direct purchase of token transaction from contract.\r\n    event purchaseInvoice(address indexed _buyer, uint _tokenReceived, uint _weiSent, uint _weiCost, uint _weiReturned );\r\n}\r\n\r\ncontract SiBiCryptToken is Token {\r\n   \r\n    /**\r\n     * @dev enum of current crowd sale state\r\n     **/\r\n     enum Stages {none, icoStart, icoPaused, icoResumed, icoEnd} \r\n     Stages currentStage;\r\n    bool payingDividends;\r\n    uint256 freezeTimeStart;\r\n    uint256 constant freezePeriod = 1 * 1 days;\r\n    \r\n    function balanceOf(address _addr) public view returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n    \r\n    modifier checkICOStatus(){\r\n        require(currentStage == Stages.icoPaused || currentStage == Stages.icoEnd, \"Pls, try again after ICO\");\r\n        _;\r\n    }\r\n    modifier isPayingDividends(){\r\n        if(payingDividends && now >= (freezeTimeStart+freezePeriod)){\r\n            payingDividends = false;\r\n        }\r\n        require(!payingDividends, \"Dividends is being dispatch, pls try later\");\r\n        _;\r\n    }\r\n    function payOutDividends() public onlyOwner returns(bool){\r\n        payingDividends = true;\r\n        freezeTimeStart = now;\r\n        return true;\r\n    }\r\n    event thirdPartyTransfer( address indexed _from, address indexed _to, uint _value, address indexed _sentBy ) ;\r\n    event returnedWei(address indexed _fromContract, address indexed _toSender, uint _value);\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        bytes memory empty ;\r\n        transfer(_to, _value, empty);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        if(isContract(_to)){\r\n            if(_to == address(this)){\r\n                _transfer(address(this), reclaimablePocket, _value);\r\n            }\r\n            else\r\n            {\r\n                ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                    _contract.tokenFallback(msg.sender, _value, _data);\r\n            }\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) public view returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public checkICOStatus returns (bool) {\r\n        require (_value > 0 && _allowances[_from][msg.sender] >= _value, \"insufficient allowance\");\r\n        _transfer(_from, _to, _value);\r\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n        emit thirdPartyTransfer(_from, _to, _value, msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal checkICOStatus isPayingDividends {\r\n        require(_to != address(0x0), \"invalid 'to' address\"); // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_balanceOf[_from] >= _value, \"insufficient funds\"); // Check if the sender has enough\r\n        require(_balanceOf[_to] + _value > _balanceOf[_to], \"overflow err\"); // Check for overflows\r\n        uint previousBalances = _balanceOf[_from] + _balanceOf[_to]; // Save this for an assertion in the future\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value); \r\n        _balanceOf[_to] = _balanceOf[_to].add(_value); // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(_balanceOf[_from] + _balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(_balanceOf[msg.sender]>=_value);\r\n        _allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SiBiCryptICO is SiBiCryptToken {\r\n    \r\n  \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n      /* Initializes contract with initial supply tokens and sharesPercent to the creator _owner of the contract */\r\n    constructor(\r\n            string memory tokenName, string memory tokenSymbol, uint256 initialSupply, address payable _reclaimablePocket, address payable _teamWallet \r\n        ) Token(tokenName, tokenSymbol, initialSupply) owned(_reclaimablePocket, _teamWallet) public {\r\n        uint toOwnerWallet = (_totalSupply*40)/100;\r\n        uint toTeam = (_totalSupply*15)/100;\r\n         _balanceOf[msg.sender] += toOwnerWallet;\r\n         _balanceOf[teamWallet] += toTeam;\r\n         emit Transfer(address(this),msg.sender,toOwnerWallet);\r\n        emit Transfer(address(this),teamWallet,toTeam);\r\n         tokensSold += toOwnerWallet.add(toTeam);\r\n         remainingTokens = _totalSupply.sub(tokensSold);\r\n         currentStage = Stages.none;\r\n         payingDividends = false;\r\n    }\r\n    \r\n  \r\n    /// @param newBuyPrice Price users can buy token from the contract\r\n    function setPrices(uint256 newBuyPrice) onlyOwner public {\r\n        buyPrice = newBuyPrice;   //ETH per Token\r\n    }\r\n    /**\r\n     * @dev fallback function to send ether to for Crowd sale\r\n     **/\r\n    function () external payable {\r\n        require(currentStage == Stages.icoStart || currentStage == Stages.icoResumed, \"Oops! ICO is not running\");\r\n        require(msg.value > 0);\r\n        require(remainingTokens > 0, \"Tokens sold out! you may proceed to buy from Token holders\");\r\n        \r\n        uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n        uint256 tokens = (weiAmount.div(buyPrice)).mul(1*10**18);\r\n        uint256 returnWei;\r\n        \r\n        if(tokens > remainingTokens){\r\n            uint256 newTokens = remainingTokens;\r\n            uint256 newWei = (newTokens.mul(buyPrice)).div(1*10**18);\r\n            returnWei = weiAmount.sub(newWei);\r\n            weiAmount = newWei;\r\n            tokens = newTokens;\r\n        }\r\n        \r\n        tokensSold = tokensSold.add(tokens); // Increment raised amount\r\n        remainingTokens = remainingTokens.sub(tokens); //decrease remaining token\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit returnedWei(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].add(tokens);\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n        emit purchaseInvoice(msg.sender, tokens, msg.value, weiAmount, returnWei);\r\n       \r\n        owner.transfer(weiAmount); // Send money for project execution\r\n        if(remainingTokens == 0 ){pauseIco();}\r\n    }\r\n    \r\n    /**\r\n     * @dev startIco starts the public ICO\r\n     **/\r\n    function startIco() public onlyOwner  returns(bool) {\r\n        require(currentStage != Stages.icoEnd, \"Oops! ICO has been finalized.\");\r\n        require(currentStage == Stages.none, \"ICO is running already\");\r\n        currentStage = Stages.icoStart;\r\n        return true;\r\n    }\r\n    \r\n    function pauseIco() internal {\r\n        require(currentStage != Stages.icoEnd, \"Oops! ICO has been finalized.\");\r\n        currentStage = Stages.icoPaused;\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function resumeIco() public onlyOwner returns(bool) {\r\n        require(currentStage == Stages.icoPaused, \"call denied\");\r\n        currentStage = Stages.icoResumed;\r\n        return true;\r\n    }\r\n    \r\n    function ICO_State() public view returns(string memory) {\r\n        if(currentStage == Stages.none) return \"Initializing...\";\r\n        if(currentStage == Stages.icoPaused) return \"Paused!\";\r\n        if(currentStage == Stages.icoEnd) return \"ICO Stopped!\";\r\n        else return \"ICO is running...\";\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev endIco closes down the ICO \r\n     **/\r\n    function endIco() internal {\r\n        currentStage = Stages.icoEnd;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens > 0){\r\n            _balanceOf[owner] = _balanceOf[owner].add(remainingTokens);\r\n        }\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n\r\n    /**\r\n     * @dev finalizeIco closes down the ICO and sets needed varriables\r\n     **/\r\n    function finalizeIco() public onlyOwner returns(Stages){\r\n        require(currentStage != Stages.icoEnd );\r\n        if(currentStage == Stages.icoPaused){\r\n            endIco();\r\n            return currentStage;\r\n        }\r\n        else{\r\n            pauseIco();\r\n            return currentStage;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * ******************************************************************************************************************\r\n * If you find this code useful or helpful, please give a tip @ 0x15f26bA042233BC6e31e961195fFACAC7F63E97E Thanks!***\r\n * ******************************************************************************************************************\r\n**/","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"payOutDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimablePocket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTeamWallet\",\"type\":\"address\"}],\"name\":\"changeTeamWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_State\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecPocket\",\"type\":\"address\"}],\"name\":\"changeRecPocket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"_reclaimablePocket\",\"type\":\"address\"},{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sentBy\",\"type\":\"address\"}],\"name\":\"thirdPartyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"returnedWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weiSent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weiCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weiReturned\",\"type\":\"uint256\"}],\"name\":\"purchaseInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SiBiCryptICO","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000024e864ec4b9af0c0dc7c094f0c086f606ba6b75a000000000000000000000000fa14d4f5c24529e35903e3e039f0dca3762db02b000000000000000000000000000000000000000000000000000000000000000f53694269437279707420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045342437400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://451f1c0de9e762de00fe3880a7c7993cf52b66e5c79fe5a5b0eeb888ede89135"}]}