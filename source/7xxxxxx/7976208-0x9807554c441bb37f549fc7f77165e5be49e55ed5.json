{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface RegistryInterface {\r\n    function proxies(address) external view returns (address);\r\n}\r\n\r\ninterface UserWalletInterface {\r\n    function owner() external view returns (address);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function totalReserves() external view returns (uint);\r\n    function reserveFactorMantissa() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helper is DSMath {\r\n\r\n    address public daiAdd = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    // address public daiAdd = 0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa; // Rinkeby\r\n    address public cDaiAdd = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    // address public cDaiAdd = 0x6D7F0754FFeb405d23C51CE938289d4835bE3b14; // Rinkeby\r\n    address public registryAdd = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    mapping (address => uint) public deposited; // Amount of CToken deposited\r\n    mapping (address => bool) public isAdmin;\r\n\r\n    /**\r\n     * @dev setting allowance to compound for the \"user proxy\" if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, 2**255);\r\n        }\r\n    }\r\n\r\n    modifier isUserWallet {\r\n        address userAdd = UserWalletInterface(msg.sender).owner();\r\n        address walletAdd = RegistryInterface(registryAdd).proxies(userAdd);\r\n        require(walletAdd != address(0), \"Not-User-Wallet\");\r\n        require(walletAdd == msg.sender, \"Not-Wallet-Owner\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CTokens is Helper {\r\n\r\n    struct CTokenData {\r\n        address cTokenAdd;\r\n        uint factor;\r\n    }\r\n\r\n    CTokenData[] public cTokenAddr;\r\n\r\n    uint public cArrLength = 0;\r\n\r\n    function addCToken(address cToken, uint factor) public {\r\n        require(isAdmin[msg.sender], \"Address not an admin\");\r\n        CTokenData memory setCToken = CTokenData(cToken, factor);\r\n        cTokenAddr.push(setCToken);\r\n        cArrLength++;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Bridge is CTokens {\r\n\r\n    /**\r\n     * @dev Deposit DAI for liquidity\r\n     */\r\n    function depositDAI(uint amt) public {\r\n        ERC20Interface(daiAdd).transferFrom(msg.sender, address(this), amt);\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        assert(cToken.mint(amt) == 0);\r\n        uint cDaiAmt = wdiv(amt, cToken.exchangeRateCurrent());\r\n        deposited[msg.sender] += cDaiAmt;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw DAI from liquidity\r\n     */\r\n    function withdrawDAI(uint amt) public {\r\n        require(deposited[msg.sender] != 0, \"Nothing to Withdraw\");\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        uint withdrawAmt = wdiv(amt, cToken.exchangeRateCurrent());\r\n        uint daiAmt = amt;\r\n        if (withdrawAmt > deposited[msg.sender]) {\r\n            withdrawAmt = deposited[msg.sender];\r\n            daiAmt = wmul(withdrawAmt, cToken.exchangeRateCurrent());\r\n        }\r\n        require(cToken.redeem(withdrawAmt) == 0, \"something went wrong\");\r\n        ERC20Interface(daiAdd).transfer(msg.sender, daiAmt);\r\n        deposited[msg.sender] -= withdrawAmt;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit CDAI for liquidity\r\n     */\r\n    function depositCDAI(uint amt) public {\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        require(cToken.transferFrom(msg.sender, address(this), amt), \"Nothing to deposit\");\r\n        deposited[msg.sender] += amt;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw CDAI from liquidity\r\n     */\r\n    function withdrawCDAI(uint amt) public {\r\n        require(deposited[msg.sender] != 0, \"Nothing to Withdraw\");\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        uint withdrawAmt = amt;\r\n        if (withdrawAmt > deposited[msg.sender]) {\r\n            withdrawAmt = deposited[msg.sender];\r\n        }\r\n        cToken.transfer(msg.sender, withdrawAmt);\r\n        deposited[msg.sender] -= withdrawAmt;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer DAI to only to user wallet\r\n     */\r\n    function transferDAI(uint amt) public isUserWallet {\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        require(cToken.redeemUnderlying(amt) == 0, \"something went wrong\");\r\n        ERC20Interface(daiAdd).transfer(msg.sender, amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Take DAI back from user wallet\r\n     */\r\n    function transferBackDAI(uint amt) public isUserWallet {\r\n        ERC20Interface tokenContract = ERC20Interface(daiAdd);\r\n        tokenContract.transferFrom(msg.sender, address(this), amt);\r\n        CTokenInterface cToken = CTokenInterface(cDaiAdd);\r\n        assert(cToken.mint(amt) == 0);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MakerCompBridge is Bridge {\r\n\r\n    uint public version;\r\n\r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        isAdmin[0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638] = true;\r\n        isAdmin[0xa7615CD307F323172331865181DC8b80a2834324] = true;\r\n        addCToken(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E, 600000000000000000);\r\n        addCToken(0xF5DCe57282A584D2746FaF1593d3121Fcac444dC, 750000000000000000);\r\n        addCToken(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5, 750000000000000000);\r\n        addCToken(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1, 500000000000000000);\r\n        addCToken(0x39AA39c021dfbaE8faC545936693aC917d5E7563, 750000000000000000);\r\n        addCToken(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407, 600000000000000000);\r\n        setApproval(daiAdd, 10**30, cDaiAdd);\r\n        setApproval(cDaiAdd, 10**30, cDaiAdd);\r\n        version = _version;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawCDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cTokenAddr\",\"outputs\":[{\"name\":\"cTokenAdd\",\"type\":\"address\"},{\"name\":\"factor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registryAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositCDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDaiAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cArrLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferBackDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cToken\",\"type\":\"address\"},{\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"addCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MakerCompBridge","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://3a1386adec3e736762dcf74c03c5399ce57c1e15a3b0bde9193e7867c59acd0e"}]}