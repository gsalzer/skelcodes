{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * ZeroPriceIndex - Management system for maintaining the trade prices of\r\n *                  ERC tokens & collectibles listed within ZeroCache.\r\n *\r\n * Version 19.2.9\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice Zero(Cache) Price Index\r\n *\r\n * @dev Manages the current trade prices of ZeroCache tokens.\r\n */\r\ncontract ZeroPriceIndex is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /* Initialize price notification. */\r\n    event PriceSet(\r\n        bytes32 indexed key, \r\n        uint value\r\n    );\r\n\r\n    /**\r\n     * Set Zero(Cache) Price Index namespaces\r\n     * \r\n     * NOTE: Keep all namespaces lowercase.\r\n     */\r\n    string private _NAMESPACE = 'zpi';\r\n\r\n    /* Set Dai Stablecoin (trade pair) base. */\r\n    string private _TRADE_PAIR_BASE = 'DAI';\r\n\r\n    /**\r\n     * Initialize Core Tokens\r\n     * \r\n     * NOTE: All tokens are traded against DAI Stablecoin.\r\n     */\r\n    string[3] _CORE_TOKENS = [\r\n        'WETH',     // Wrapped Ether\r\n        '0GOLD',    // ZeroGold\r\n        '0xBTC'     // 0xBitcoin Token\r\n    ];\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.zero.price.index'))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n    \r\n    /**\r\n     * Get Trade Price\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function tradePriceOf(\r\n        string _token\r\n    ) external view returns (uint price) {\r\n        /* Initailze hash. */\r\n        bytes32 hash = 0x0;\r\n        \r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _NAMESPACE, '.', _token, '.', _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        price = _zer0netDb.getUint(hash);\r\n    }\r\n\r\n    /**\r\n     * Get (All) Core Trade Prices\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     */\r\n    function coreTradePrices() external view returns (uint[3] prices) {\r\n        /* Initailze hash. */\r\n        bytes32 hash = 0x0;\r\n        \r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _NAMESPACE, '.WETH.', _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        prices[0] = _zer0netDb.getUint(hash);\r\n\r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _NAMESPACE, '.0GOLD.', _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        prices[1] = _zer0netDb.getUint(hash);\r\n\r\n        /* Set hash. */\r\n        hash = keccak256(abi.encodePacked(\r\n            _NAMESPACE, '.0xBTC.', _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        prices[2] = _zer0netDb.getUint(hash);\r\n    }\r\n\r\n    /**\r\n     * Set Trade Price\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     * \r\n     * Keys for trade pairs are encoded using the 'exact' symbol,\r\n     * as listed in their respective contract:\r\n     * \r\n     *     Wrapped Ether `0PI.WETH.DAI`\r\n     *     0x3f1c44ba685cff388a95a3e7ae4b6f00efe4793f0629b97577c1aa17090665ad\r\n     * \r\n     *     ZeroGold `0PI.0GOLD.DAI`\r\n     *     0xeb7bb6c531569208c3173a7af7030a37a5a4b6d9f1518a8ae9ec655bde099fec\r\n     * \r\n     *     0xBitcoin Token `0PI.0xBTC.DAI`\r\n     *     0xcaf604185158d62d93f6252c02ca8238aecf42f5560c4c98d13cd1391bc54d42\r\n     */\r\n    function setTradePrice(\r\n        string _token,\r\n        uint _value\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            _NAMESPACE, '.', _token, '.', _TRADE_PAIR_BASE\r\n        ));\r\n\r\n        /* Set value in Zer0net Db. */\r\n        _zer0netDb.setUint(hash, _value);\r\n        \r\n        /* Broadcast event. */\r\n        emit PriceSet(hash, _value);\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Core Prices\r\n     * \r\n     * NOTE: All trades are made against DAI stablecoin.\r\n     * \r\n     * NOTE: Use of `string[]` is still experimental, \r\n     *       so we are required to `setCorePrices` by sending\r\n     *       `_values` in the proper format.\r\n     */\r\n    function setAllCoreTradePrices(\r\n        uint[] _values\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Iterate Core Tokens for updating. */    \r\n        for (uint i = 0; i < _CORE_TOKENS.length; i++) {\r\n            /* Set hash. */\r\n            bytes32 hash = keccak256(abi.encodePacked(\r\n                _NAMESPACE, '.', _CORE_TOKENS[i], '.', _TRADE_PAIR_BASE\r\n            ));\r\n    \r\n            /* Set value in Zer0net Db. */\r\n            _zer0netDb.setUint(hash, _values[i]);\r\n            \r\n            /* Broadcast event. */\r\n            emit PriceSet(hash, _values[i]);\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address tokenAddress, uint tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setAllCoreTradePrices\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreTradePrices\",\"outputs\":[{\"name\":\"prices\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"tradePriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTradePrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZeroPriceIndex","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c0f3c306344fe4633fbc922f7a19dbc0d14de3c718432248fe43ec6b871c297"}]}