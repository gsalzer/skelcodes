{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// The functionality that all derivative contracts expose to the admin.\r\ninterface AdminInterface {\r\n    // Initiates the shutdown process, in case of an emergency.\r\n    function emergencyShutdown() external;\r\n\r\n    // A core contract method called immediately before or after any financial transaction. It pays fees and moves money\r\n    // between margin accounts to make sure they reflect the NAV of the contract.\r\n    function remargin() external;\r\n}\r\n\r\n// This interface allows contracts to query a verified, trusted price.\r\ninterface OracleInterface {\r\n    // Requests the Oracle price for an identifier at a time. Returns the time at which a price will be available.\r\n    // Returns 0 is the price is available now, and returns 2^256-1 if the price will never be available.  Reverts if\r\n    // the Oracle doesn't support this identifier. Only contracts registered in the Registry are authorized to call this\r\n    // method.\r\n    function requestPrice(bytes32 identifier, uint time) external returns (uint expectedTime);\r\n\r\n    // Checks whether a price has been resolved.\r\n    function hasPrice(bytes32 identifier, uint time) external view returns (bool hasPriceAvailable);\r\n\r\n    // Returns the Oracle price for identifier at a time. Reverts if the Oracle doesn't support this identifier or if\r\n    // the Oracle doesn't have a price for this time. Only contracts registered in the Registry are authorized to call\r\n    // this method.\r\n    function getPrice(bytes32 identifier, uint time) external view returns (int price);\r\n\r\n    // Returns whether the Oracle provides verified prices for the given identifier.\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported);\r\n\r\n    // An event fired when a request for a (identifier, time) pair is made.\r\n    event VerifiedPriceRequested(bytes32 indexed identifier, uint indexed time);\r\n\r\n    // An event fired when a verified price is available for a (identifier, time) pair.\r\n    event VerifiedPriceAvailable(bytes32 indexed identifier, uint indexed time, int price);\r\n}\r\n\r\ninterface RegistryInterface {\r\n    struct RegisteredDerivative {\r\n        address derivativeAddress;\r\n        address derivativeCreator;\r\n    }\r\n\r\n    // Registers a new derivative. Only authorized derivative creators can call this method.\r\n    function registerDerivative(address[] calldata counterparties, address derivativeAddress) external;\r\n\r\n    // Adds a new derivative creator to this list of authorized creators. Only the owner of this contract can call\r\n    // this method.   \r\n    function addDerivativeCreator(address derivativeCreator) external;\r\n\r\n    // Removes a derivative creator to this list of authorized creators. Only the owner of this contract can call this\r\n    // method.  \r\n    function removeDerivativeCreator(address derivativeCreator) external;\r\n\r\n    // Returns whether the derivative has been registered with the registry (and is therefore an authorized participant\r\n    // in the UMA system).\r\n    function isDerivativeRegistered(address derivative) external view returns (bool isRegistered);\r\n\r\n    // Returns a list of all derivatives that are associated with a particular party.\r\n    function getRegisteredDerivatives(address party) external view returns (RegisteredDerivative[] memory derivatives);\r\n\r\n    // Returns all registered derivatives.\r\n    function getAllRegisteredDerivatives() external view returns (RegisteredDerivative[] memory derivatives);\r\n\r\n    // Returns whether an address is authorized to register new derivatives.\r\n    function isDerivativeCreatorAuthorized(address derivativeCreator) external view returns (bool isAuthorized);\r\n}\r\n\r\ncontract Testable is Ownable {\r\n\r\n    // Is the contract being run on the test network. Note: this variable should be set on construction and never\r\n    // modified.\r\n    bool public isTest;\r\n\r\n    uint private currentTime;\r\n\r\n    constructor(bool _isTest) internal {\r\n        isTest = _isTest;\r\n        if (_isTest) {\r\n            currentTime = now; // solhint-disable-line not-rely-on-time\r\n        }\r\n    }\r\n\r\n    modifier onlyIfTest {\r\n        require(isTest);\r\n        _;\r\n    }\r\n\r\n    function setCurrentTime(uint _time) external onlyOwner onlyIfTest {\r\n        currentTime = _time;\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint) {\r\n        if (isTest) {\r\n            return currentTime;\r\n        } else {\r\n            return now; // solhint-disable-line not-rely-on-time\r\n        }\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    // Withdraws ETH from the contract.\r\n    function withdraw(uint amount) external onlyOwner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Withdraws ERC20 tokens from the contract.\r\n    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        require(erc20.transfer(msg.sender, amount));\r\n    }\r\n}\r\n\r\n// Implements an oracle that allows the owner to push prices for queries that have been made.\r\ncontract CentralizedOracle is OracleInterface, Withdrawable, Testable {\r\n    using SafeMath for uint;\r\n\r\n    // This contract doesn't implement the voting routine, and naively indicates that all requested prices will be\r\n    // available in a week.\r\n    uint constant private SECONDS_IN_WEEK = 60*60*24*7;\r\n\r\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\r\n    struct Price {\r\n        bool isAvailable;\r\n        int price;\r\n        // Time the verified price became available.\r\n        uint verifiedTime;\r\n    }\r\n\r\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\r\n    // not yet available.\r\n    struct QueryIndex {\r\n        bool isValid;\r\n        uint index;\r\n    }\r\n\r\n    // Represents a (identifier, time) point that has been queried.\r\n    struct QueryPoint {\r\n        bytes32 identifier;\r\n        uint time;\r\n    }\r\n\r\n    // The set of identifiers the oracle can provide verified prices for.\r\n    mapping(bytes32 => bool) private supportedIdentifiers;\r\n\r\n    // Conceptually we want a (time, identifier) -> price map.\r\n    mapping(bytes32 => mapping(uint => Price)) private verifiedPrices;\r\n\r\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\r\n    // Can we generalize this data structure?\r\n    mapping(bytes32 => mapping(uint => QueryIndex)) private queryIndices;\r\n    QueryPoint[] private requestedPrices;\r\n\r\n    // Registry to verify that a derivative is approved to use the Oracle.\r\n    RegistryInterface private registry;\r\n\r\n    constructor(address _registry, bool _isTest) public Testable(_isTest) {\r\n        registry = RegistryInterface(_registry);\r\n    }\r\n\r\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\r\n    function requestPrice(bytes32 identifier, uint time) external returns (uint expectedTime) {\r\n        // Ensure that the caller has been registered with the Oracle before processing the request.\r\n        require(registry.isDerivativeRegistered(msg.sender));\r\n        require(supportedIdentifiers[identifier]);\r\n        Price storage lookup = verifiedPrices[identifier][time];\r\n        if (lookup.isAvailable) {\r\n            // We already have a price, return 0 to indicate that.\r\n            return 0;\r\n        } else if (queryIndices[identifier][time].isValid) {\r\n            // We already have a pending query, don't need to do anything.\r\n            return getCurrentTime().add(SECONDS_IN_WEEK);\r\n        } else {\r\n            // New query, enqueue it for review.\r\n            queryIndices[identifier][time] = QueryIndex(true, requestedPrices.length);\r\n            requestedPrices.push(QueryPoint(identifier, time));\r\n            emit VerifiedPriceRequested(identifier, time);\r\n            return getCurrentTime().add(SECONDS_IN_WEEK);\r\n        }\r\n    }\r\n\r\n    // Pushes the verified price for a requested query.\r\n    function pushPrice(bytes32 identifier, uint time, int price) external onlyOwner {\r\n        verifiedPrices[identifier][time] = Price(true, price, getCurrentTime());\r\n        emit VerifiedPriceAvailable(identifier, time, price);\r\n\r\n        QueryIndex storage queryIndex = queryIndices[identifier][time];\r\n        require(queryIndex.isValid, \"Can't push prices that haven't been requested\");\r\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\r\n        // the contents of the last index (unless it is the last index).\r\n        uint indexToReplace = queryIndex.index;\r\n        delete queryIndices[identifier][time];\r\n        uint lastIndex = requestedPrices.length.sub(1);\r\n        if (lastIndex != indexToReplace) {\r\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\r\n            queryIndices[queryToCopy.identifier][queryToCopy.time].index = indexToReplace;\r\n            requestedPrices[indexToReplace] = queryToCopy;\r\n        }\r\n        requestedPrices.length = requestedPrices.length.sub(1);\r\n    }\r\n\r\n    // Adds the provided identifier as a supported identifier.\r\n    function addSupportedIdentifier(bytes32 identifier) external onlyOwner {\r\n        if(!supportedIdentifiers[identifier]) {\r\n            supportedIdentifiers[identifier] = true;\r\n            emit AddSupportedIdentifier(identifier);\r\n        }\r\n    }\r\n\r\n    // Calls emergencyShutdown() on the provided derivative.\r\n    function callEmergencyShutdown(address derivative) external onlyOwner {\r\n        AdminInterface admin = AdminInterface(derivative);\r\n        admin.emergencyShutdown();\r\n    }\r\n\r\n    // Calls remargin() on the provided derivative.\r\n    function callRemargin(address derivative) external onlyOwner {\r\n        AdminInterface admin = AdminInterface(derivative);\r\n        admin.remargin();\r\n    }\r\n\r\n    // Checks whether a price has been resolved.\r\n    function hasPrice(bytes32 identifier, uint time) external view returns (bool hasPriceAvailable) {\r\n        // Ensure that the caller has been registered with the Oracle before processing the request.\r\n        require(registry.isDerivativeRegistered(msg.sender));\r\n        require(supportedIdentifiers[identifier]);\r\n        Price storage lookup = verifiedPrices[identifier][time];\r\n        return lookup.isAvailable;\r\n    }\r\n\r\n    // Gets a price that has already been resolved.\r\n    function getPrice(bytes32 identifier, uint time) external view returns (int price) {\r\n        // Ensure that the caller has been registered with the Oracle before processing the request.\r\n        require(registry.isDerivativeRegistered(msg.sender));\r\n        require(supportedIdentifiers[identifier]);\r\n        Price storage lookup = verifiedPrices[identifier][time];\r\n        require(lookup.isAvailable);\r\n        return lookup.price;\r\n    }\r\n\r\n    // Gets the queries that still need verified prices.\r\n    function getPendingQueries() external view onlyOwner returns (QueryPoint[] memory queryPoints) {\r\n        return requestedPrices;\r\n    }\r\n\r\n    // Whether the oracle provides verified prices for the provided identifier.\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported) {\r\n        return supportedIdentifiers[identifier];\r\n    }\r\n\r\n    event AddSupportedIdentifier(bytes32 indexed identifier);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"pushPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"callEmergencyShutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"addSupportedIdentifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"callRemargin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"requestPrice\",\"outputs\":[{\"name\":\"expectedTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"isIdentifierSupported\",\"outputs\":[{\"name\":\"isSupported\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"hasPrice\",\"outputs\":[{\"name\":\"hasPriceAvailable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingQueries\",\"outputs\":[{\"components\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"queryPoints\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_isTest\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"AddSupportedIdentifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"VerifiedPriceRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"VerifiedPriceAvailable\",\"type\":\"event\"}]","ContractName":"CentralizedOracle","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000061c35bc16f947c1e8829f4d1a19806c8099083e50000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://359daf5b6dddb3e40a326df6b678e274f360a8e7bef4bf96a6809cab1e273108"}]}