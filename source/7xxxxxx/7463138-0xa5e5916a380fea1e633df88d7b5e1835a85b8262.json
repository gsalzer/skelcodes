{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 tokenAmount) external returns (bool);\r\n    function approve(address spender, uint256 tokenAmount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool);\r\n    function burn(uint256 tokenAmount) external returns (bool success);\r\n    function burnFrom(address from, uint256 tokenAmount) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\r\n    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\r\n    event Burn(address indexed from, uint256 tokenAmount);\r\n}\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address from, uint256 tokenAmount, address token, bytes extraData) external;\r\n}\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, \"Multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, \"Division by 0\"); // Solidity only automatically requires when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // require(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, \"Subtraction overflow\");\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, \"Addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Dividing by 0\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BrewerscoinToken is owned, IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant base = 1e18;\r\n    uint256 constant MAX_UINT = 2**256 - 1;\r\n\r\n    // Public variables of the token\r\n    string public constant name = \"Brewer's coin\";\r\n    string public constant symbol = \"BREW\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 1e26;              // 100 million\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\r\n    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\r\n    event Burn(address indexed from, uint256 tokenAmount);\r\n\r\n    // Error messages\r\n    string private constant NOT_ENOUGH_TOKENS = \"Not enough tokens\";\r\n    string private constant NOT_ENOUGH_ETHER = \"Not enough ether\";\r\n    string private constant NOT_ENOUGH_ALLOWANCE = \"Not enough allowance\";\r\n    string private constant ADDRESS_0_NOT_ALLOWED = \"Address 0 not allowed\";\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor() public {\r\n\r\n        // put all tokens on owner balance\r\n        balances[msg.sender] = totalSupply;\r\n\r\n        // allow owner 2^256-1 tokens of this contract, the fee of buyBeer will be transfered to this contract\r\n        allowance[this][msg.sender] = MAX_UINT;\r\n    }\r\n\r\n    /**\r\n     * Total Supply\r\n     *\r\n     * Get the total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Function to check the amount of tokens that an tokenOwner allowed to a spender\r\n     *\r\n     * @param tokenOwner address The address which owns the funds\r\n     * @param spender address The address which will spend the funds\r\n     */\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256) {\r\n        return allowance[tokenOwner][spender];\r\n    }\r\n\r\n    /**\r\n     * Function to get the amount of tokens that an address contains\r\n     *\r\n     * @param tokenOwner address The address which owns the funds\r\n     */\r\n    function balanceOf(address tokenOwner) external view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `tokenAmount` tokens to `to` from your account\r\n     *\r\n     * @param to the address of the recipient\r\n     * @param tokenAmount the amount to send\r\n     */\r\n    function transfer(address to, uint256 tokenAmount) external returns (bool) {\r\n        _transfer(msg.sender, to, tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address if allowed\r\n     *\r\n     * Send `tokenAmount` tokens to `to` in behalf of `from`\r\n     *\r\n     * @param from The address of the sender\r\n     * @param to The address of the recipient\r\n     * @param tokenAmount the amount to send\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool) {\r\n\r\n        // Check allowance\r\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\r\n\r\n        // transfer\r\n        _transfer(from, to, tokenAmount);\r\n\r\n        // Subtract allowance\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Internal method for transferring tokens from one address to the other\r\n     *\r\n     * Send `tokenAmount` tokens to `to` in behalf of `from`\r\n     *\r\n     * @param from the address of the sender\r\n     * @param to the address of the recipient\r\n     * @param tokenAmount the amount of tokens to transfer\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenAmount) internal {\r\n\r\n        // Check if the sender has enough tokens\r\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\r\n\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(to != address(0), ADDRESS_0_NOT_ALLOWED);\r\n\r\n        // Subtract tokens from sender\r\n        balances[from] = balances[from].sub(tokenAmount);\r\n\r\n        // Add the tokens to the recipient\r\n        balances[to] = balances[to].add(tokenAmount);\r\n\r\n        // Trigger event\r\n        emit Transfer(from, to, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\r\n     *\r\n     * @param spender The address authorized to spend\r\n     * @param tokenAmount the max amount they can spend\r\n     */\r\n    function approve(address spender, uint256 tokenAmount) external returns (bool success) {\r\n        return _approve(spender, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param spender the address authorised to spend\r\n     * @param tokenAmount the max amount they can spend\r\n     * @param extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address spender, uint256 tokenAmount, bytes extraData) external returns (bool success) {\r\n        tokenRecipient _spender = tokenRecipient(spender);\r\n        if (_approve(spender, tokenAmount)) {\r\n            _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\r\n     *\r\n     * @param spender The address authorized to spend\r\n     * @param tokenAmount the max amount they can spend\r\n     */\r\n    function _approve(address spender, uint256 tokenAmount) internal returns (bool success) {\r\n        allowance[msg.sender][spender] = tokenAmount;\r\n        emit Approval(msg.sender, spender, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `tokenAmount` tokens from the system irreversibly\r\n     *\r\n     * @param tokenAmount the amount of tokens to burn\r\n     */\r\n    function burn(uint256 tokenAmount) external returns (bool success) {\r\n\r\n        _burn(msg.sender, tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `tokenAmount` tokens from the system irreversibly on behalf of `from`.\r\n     *\r\n     * @param from the address of the sender\r\n     * @param tokenAmount the amount of tokens to burn\r\n     */\r\n    function burnFrom(address from, uint256 tokenAmount) public returns (bool success) {\r\n\r\n        // Check allowance\r\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\r\n\r\n        // Burn\r\n        _burn(from, tokenAmount);\r\n\r\n        // Subtract from the sender's allowance\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `tokenAmount` tokens from the system irreversibly\r\n     *\r\n     * @param from the address to burn tokens from\r\n     * @param tokenAmount the amount of tokens to burn\r\n     */\r\n    function _burn(address from, uint256 tokenAmount) internal {\r\n\r\n        // Check if the sender has enough\r\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\r\n\r\n        // Subtract from the sender\r\n        balances[from] = balances[from].sub(tokenAmount);\r\n\r\n        // Updates totalSupply\r\n        totalSupply = totalSupply.sub(tokenAmount);\r\n\r\n        // Burn tokens\r\n        emit Burn(from, tokenAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BrewerscoinToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13b5f9b4705d44fb2744c90394a6ddd65cd41382e5a41b7f4fd8c8a57547e2a7"}]}