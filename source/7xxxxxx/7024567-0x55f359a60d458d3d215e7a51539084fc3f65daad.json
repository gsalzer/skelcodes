{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferInitiated(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n  \r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n  \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n  \r\n    /**\r\n     * @dev Throws if called by any account other than the specific function owner.\r\n     */\r\n    modifier ownedBy(address _a) {\r\n        require( msg.sender == _a );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n  \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to. Needs to be accepted by\r\n     * the new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnershipAtomic(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n  \r\n    /**\r\n     * @dev Completes the ownership transfer by having the new address confirm the transfer.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n  \r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n        emit OwnershipTransferInitiated(owner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require( (allowed[msg.sender][_spender] == 0) || (_value == 0) );\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    // Overflow check: 2700 *1e6 * 1e18 < 10^30 < 2^105 < 2^256\r\n    uint constant public SUPPLY_HARD_CAP = 2700 * 1e6 * 1e18;\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        hasMintPermission\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        require( totalSupply_.add(_amount) <= SUPPLY_HARD_CAP );\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract OPUCoin is MintableToken {\r\n    string constant public symbol = \"OPU\";\r\n    string constant public name = \"Opu Coin\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    // -------------------------------------------\r\n\t// Public functions\r\n    // -------------------------------------------\r\n    constructor() public { }\r\n}\r\n\r\n\r\ncontract ColdStorage is Ownable {\r\n    using SafeMath for uint8;\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n\r\n    uint public lockupEnds;\r\n    uint public lockupPeriod;\r\n    bool public storageInitialized = false;\r\n    address public founders;\r\n\r\n    event StorageInitialized(address _to, uint _tokens);\r\n    event TokensReleased(address _to, uint _tokensReleased);\r\n\r\n    constructor(address _token) public {\r\n        require( _token != address(0) );\r\n        token = ERC20(_token);\r\n        uint lockupYears = 2;\r\n        lockupPeriod = lockupYears.mul(365 days);\r\n    }\r\n\r\n    function claimTokens() external {\r\n        require( now > lockupEnds );\r\n        require( msg.sender == founders );\r\n\r\n        uint tokensToRelease = token.balanceOf(address(this));\r\n        require( token.transfer(msg.sender, tokensToRelease) );\r\n        emit TokensReleased(msg.sender, tokensToRelease);\r\n    }\r\n\r\n    function initializeHolding(address _to) public onlyOwner {\r\n        uint tokens = token.balanceOf(address(this));\r\n        require( !storageInitialized );\r\n        require( tokens != 0 );\r\n\r\n        lockupEnds = now.add(lockupPeriod);\r\n        founders = _to;\r\n        storageInitialized = true;\r\n        emit StorageInitialized(_to, tokens);\r\n    }\r\n}\r\n\r\n\r\ncontract Vesting is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n    mapping (address => Holding) public holdings;\r\n    address internal founders;\r\n\r\n    uint constant internal PERIOD_INTERVAL = 30 days;\r\n    uint constant internal FOUNDERS_HOLDING = 365 days;\r\n    uint constant internal BONUS_HOLDING = 0;\r\n    uint constant internal TOTAL_PERIODS = 12;\r\n\r\n    uint public additionalHoldingPool = 0;\r\n    uint internal totalTokensCommitted = 0;\r\n\r\n    bool internal vestingStarted = false;\r\n    uint internal vestingStart = 0;\r\n\r\n    struct Holding {\r\n        uint tokensCommitted;\r\n        uint tokensRemaining;\r\n        uint batchesClaimed;\r\n        bool updatedForFinalization;\r\n        bool isFounder;\r\n        bool isValue;\r\n    }\r\n\r\n    event TokensReleased(address _to, uint _tokensReleased, uint _tokensRemaining);\r\n    event VestingInitialized(address _to, uint _tokens);\r\n    event VestingUpdated(address _to, uint _totalTokens);\r\n\r\n    constructor(address _token, address _founders) public {\r\n        require( _token != 0x0);\r\n        require(_founders != 0x0);\r\n        token = ERC20(_token);\r\n        founders = _founders;\r\n    }\r\n\r\n    function claimTokens() external {\r\n        require( holdings[msg.sender].isValue );\r\n        require( vestingStarted );\r\n        uint personalVestingStart = \r\n            (holdings[msg.sender].isFounder) ? (vestingStart.add(FOUNDERS_HOLDING)) : (vestingStart);\r\n\r\n        require( now > personalVestingStart );\r\n\r\n        uint periodsPassed = now.sub(personalVestingStart).div(PERIOD_INTERVAL);\r\n\r\n        uint batchesToClaim = periodsPassed.sub(holdings[msg.sender].batchesClaimed);\r\n        require( batchesToClaim > 0 );\r\n\r\n        if (!holdings[msg.sender].updatedForFinalization) {\r\n            holdings[msg.sender].updatedForFinalization = true;\r\n            holdings[msg.sender].tokensRemaining = (holdings[msg.sender].tokensRemaining).add(\r\n                (holdings[msg.sender].tokensCommitted).mul(additionalHoldingPool).div(totalTokensCommitted)\r\n            );\r\n        }\r\n\r\n        uint tokensPerBatch = (holdings[msg.sender].tokensRemaining).div(\r\n            TOTAL_PERIODS.sub(holdings[msg.sender].batchesClaimed)\r\n        );\r\n        uint tokensToRelease = 0;\r\n\r\n        if (periodsPassed >= TOTAL_PERIODS) {\r\n            tokensToRelease = holdings[msg.sender].tokensRemaining;\r\n            delete holdings[msg.sender];\r\n        } else {\r\n            tokensToRelease = tokensPerBatch.mul(batchesToClaim);\r\n            holdings[msg.sender].tokensRemaining = (holdings[msg.sender].tokensRemaining).sub(tokensToRelease);\r\n            holdings[msg.sender].batchesClaimed = holdings[msg.sender].batchesClaimed.add(batchesToClaim);\r\n        }\r\n\r\n        require( token.transfer(msg.sender, tokensToRelease) );\r\n        emit TokensReleased(msg.sender, tokensToRelease, holdings[msg.sender].tokensRemaining);\r\n    }\r\n\r\n    function tokensRemainingInHolding(address _user) public view returns (uint) {\r\n        return holdings[_user].tokensRemaining;\r\n    }\r\n    \r\n    function initializeVesting(address _beneficiary, uint _tokens) public onlyOwner {\r\n        bool isFounder = (_beneficiary == founders);\r\n        _initializeVesting(_beneficiary, _tokens, isFounder);\r\n    }\r\n\r\n    function finalizeVestingAllocation(uint _holdingPoolTokens) public onlyOwner {\r\n        additionalHoldingPool = _holdingPoolTokens;\r\n        vestingStarted = true;\r\n        vestingStart = now;\r\n    }\r\n\r\n    function _initializeVesting(address _to, uint _tokens, bool _isFounder) internal {\r\n        require( !vestingStarted );\r\n\r\n        if (!_isFounder) totalTokensCommitted = totalTokensCommitted.add(_tokens);\r\n\r\n        if (!holdings[_to].isValue) {\r\n            holdings[_to] = Holding({\r\n                tokensCommitted: _tokens, \r\n                tokensRemaining: _tokens,\r\n                batchesClaimed: 0, \r\n                updatedForFinalization: _isFounder, \r\n                isFounder: _isFounder,\r\n                isValue: true\r\n            });\r\n\r\n            emit VestingInitialized(_to, _tokens);\r\n        } else {\r\n            holdings[_to].tokensCommitted = (holdings[_to].tokensCommitted).add(_tokens);\r\n            holdings[_to].tokensRemaining = (holdings[_to].tokensRemaining).add(_tokens);\r\n\r\n            emit VestingUpdated(_to, holdings[_to].tokensRemaining);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Allocation is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public backend;\r\n    address public team;\r\n    address public partners;\r\n    address public toSendFromStorage;\r\n    OPUCoin public token;\r\n    Vesting public vesting;\r\n    ColdStorage public coldStorage;\r\n\r\n    bool public emergencyPaused = false;\r\n    bool public finalizedHoldingsAndTeamTokens = false;\r\n    bool public mintingFinished = false;\r\n\r\n    // All the numbers on the following 8 lines are lower than 10^30\r\n    // Which is in turn lower than 2^105, which is lower than 2^256\r\n    // So, no overflows are possible, the operations are safe.\r\n    uint constant internal MIL = 1e6 * 1e18;\r\n    // Token distribution table, all values in millions of tokens\r\n    uint constant internal ICO_DISTRIBUTION    = 1350 * MIL;\r\n    uint constant internal TEAM_TOKENS         = 675  * MIL;\r\n    uint constant internal COLD_STORAGE_TOKENS = 189  * MIL;\r\n    uint constant internal PARTNERS_TOKENS     = 297  * MIL; \r\n    uint constant internal REWARDS_POOL        = 189  * MIL;\r\n\r\n    uint internal totalTokensSold = 0;\r\n    uint internal totalTokensRewarded = 0;\r\n\r\n    event TokensAllocated(address _buyer, uint _tokens);\r\n    event TokensAllocatedIntoHolding(address _buyer, uint _tokens);\r\n    event TokensMintedForRedemption(address _to, uint _tokens);\r\n    event TokensSentIntoVesting(address _vesting, address _to, uint _tokens);\r\n    event TokensSentIntoHolding(address _vesting, address _to, uint _tokens);\r\n    event HoldingAndTeamTokensFinalized();\r\n    event BackendUpdated(address oldBackend, address newBackend);\r\n    event TeamUpdated(address oldTeam, address newTeam);\r\n    event PartnersUpdated(address oldPartners, address newPartners);\r\n    event ToSendFromStorageUpdated(address oldToSendFromStorage, address newToSendFromStorage);\r\n\r\n    // Human interaction (only accepted from the address that launched the contract)\r\n    constructor(\r\n        address _backend, \r\n        address _team, \r\n        address _partners, \r\n        address _toSendFromStorage\r\n    ) \r\n        public \r\n    {\r\n        require( _backend           != address(0) );\r\n        require( _team              != address(0) );\r\n        require( _partners          != address(0) );\r\n        require( _toSendFromStorage != address(0) );\r\n\r\n        backend           = _backend;\r\n        team              = _team;\r\n        partners          = _partners;\r\n        toSendFromStorage = _toSendFromStorage;\r\n\r\n        token       = new OPUCoin();\r\n        vesting     = new Vesting(address(token), team);\r\n        coldStorage = new ColdStorage(address(token));\r\n    }\r\n\r\n    function emergencyPause() public onlyOwner unpaused { emergencyPaused = true; }\r\n\r\n    function emergencyUnpause() public onlyOwner paused { emergencyPaused = false; }\r\n\r\n    function allocate(\r\n        address _buyer, \r\n        uint _tokensWithStageBonuses, \r\n        uint _rewardsBonusTokens\r\n    ) \r\n        public \r\n        ownedBy(backend) \r\n        mintingEnabled\r\n    {\r\n        uint tokensAllocated = _allocateTokens(_buyer, _tokensWithStageBonuses, _rewardsBonusTokens);\r\n        emit TokensAllocated(_buyer, tokensAllocated);\r\n    }\r\n\r\n    function allocateIntoHolding(\r\n        address _buyer, \r\n        uint _tokensWithStageBonuses, \r\n        uint _rewardsBonusTokens\r\n    ) \r\n        public \r\n        ownedBy(backend) \r\n        mintingEnabled\r\n    {\r\n        uint tokensAllocated = _allocateTokens(\r\n            address(vesting), \r\n            _tokensWithStageBonuses, \r\n            _rewardsBonusTokens\r\n        );\r\n        vesting.initializeVesting(_buyer, tokensAllocated);\r\n        emit TokensAllocatedIntoHolding(_buyer, tokensAllocated);\r\n    }\r\n\r\n    function finalizeHoldingAndTeamTokens(\r\n        uint _holdingPoolTokens\r\n    ) \r\n        public \r\n        ownedBy(backend) \r\n        unpaused \r\n    {\r\n        require( !finalizedHoldingsAndTeamTokens );\r\n\r\n        finalizedHoldingsAndTeamTokens = true;\r\n\r\n        vestTokens(team, TEAM_TOKENS);\r\n        holdTokens(toSendFromStorage, COLD_STORAGE_TOKENS);\r\n        token.mint(partners, PARTNERS_TOKENS);\r\n\r\n        // Can exceed ICO token cap\r\n        token.mint(address(vesting), _holdingPoolTokens);\r\n        vesting.finalizeVestingAllocation(_holdingPoolTokens);\r\n\r\n        mintingFinished = true;\r\n        token.finishMinting();\r\n\r\n        emit HoldingAndTeamTokensFinalized();\r\n    }\r\n\r\n    function optAddressIntoHolding(\r\n        address _holder, \r\n        uint _tokens\r\n    ) \r\n        public \r\n        ownedBy(backend) \r\n    {\r\n        require( !finalizedHoldingsAndTeamTokens );\r\n\r\n        require( token.mint(address(vesting), _tokens) );\r\n\r\n        vesting.initializeVesting(_holder, _tokens);\r\n        emit TokensSentIntoHolding(address(vesting), _holder, _tokens);\r\n    }\r\n\r\n    function _allocateTokens(\r\n        address _to, \r\n        uint _tokensWithStageBonuses, \r\n        uint _rewardsBonusTokens\r\n    ) \r\n        internal \r\n        unpaused \r\n        returns (uint)\r\n    {\r\n        require( _to != address(0) );\r\n\r\n        checkCapsAndUpdate(_tokensWithStageBonuses, _rewardsBonusTokens);\r\n\r\n        // Calculate the total token sum to allocate\r\n        uint tokensToAllocate = _tokensWithStageBonuses.add(_rewardsBonusTokens);\r\n\r\n        // Mint the tokens\r\n        require( token.mint(_to, tokensToAllocate) );\r\n        return tokensToAllocate;\r\n    }\r\n\r\n    function checkCapsAndUpdate(uint _tokensToSell, uint _tokensToReward) internal {\r\n        uint newTotalTokensSold = totalTokensSold.add(_tokensToSell);\r\n        require( newTotalTokensSold <= ICO_DISTRIBUTION );\r\n        totalTokensSold = newTotalTokensSold;\r\n\r\n        uint newTotalTokensRewarded = totalTokensRewarded.add(_tokensToReward);\r\n        require( newTotalTokensRewarded <= REWARDS_POOL );\r\n        totalTokensRewarded = newTotalTokensRewarded;\r\n    }\r\n\r\n    function vestTokens(address _to, uint _tokens) internal {\r\n        require( token.mint(address(vesting), _tokens) );\r\n        vesting.initializeVesting( _to, _tokens );\r\n        emit TokensSentIntoVesting(address(vesting), _to, _tokens);\r\n    }\r\n\r\n    function holdTokens(address _to, uint _tokens) internal {\r\n        require( token.mint(address(coldStorage), _tokens) );\r\n        coldStorage.initializeHolding(_to);\r\n        emit TokensSentIntoHolding(address(coldStorage), _to, _tokens);\r\n    }\r\n\r\n    function updateBackend(address _newBackend) public onlyOwner {\r\n        require(_newBackend != address(0));\r\n        backend = _newBackend;\r\n        emit BackendUpdated(backend, _newBackend);\r\n    }\r\n\r\n    function updateTeam(address _newTeam) public onlyOwner {\r\n        require(_newTeam != address(0));\r\n        team = _newTeam;\r\n        emit TeamUpdated(team, _newTeam);\r\n    }\r\n\r\n    function updatePartners(address _newPartners) public onlyOwner {\r\n        require(_newPartners != address(0));\r\n        partners = _newPartners;\r\n        emit PartnersUpdated(partners, _newPartners);\r\n    }\r\n\r\n    function updateToSendFromStorage(address _newToSendFromStorage) public onlyOwner {\r\n        require(_newToSendFromStorage != address(0));\r\n        toSendFromStorage = _newToSendFromStorage;\r\n        emit ToSendFromStorageUpdated(toSendFromStorage, _newToSendFromStorage);\r\n    }\r\n\r\n    modifier unpaused() {\r\n        require( !emergencyPaused );\r\n        _;\r\n    }\r\n\r\n    modifier paused() {\r\n        require( emergencyPaused );\r\n        _;\r\n    }\r\n\r\n    modifier mintingEnabled() {\r\n        require( !mintingFinished );\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedHoldingsAndTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newToSendFromStorage\",\"type\":\"address\"}],\"name\":\"updateToSendFromStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_tokensWithStageBonuses\",\"type\":\"uint256\"},{\"name\":\"_rewardsBonusTokens\",\"type\":\"uint256\"}],\"name\":\"allocateIntoHolding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toSendFromStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"optAddressIntoHolding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPartners\",\"type\":\"address\"}],\"name\":\"updatePartners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holdingPoolTokens\",\"type\":\"uint256\"}],\"name\":\"finalizeHoldingAndTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipAtomic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_tokensWithStageBonuses\",\"type\":\"uint256\"},{\"name\":\"_rewardsBonusTokens\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTeam\",\"type\":\"address\"}],\"name\":\"updateTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBackend\",\"type\":\"address\"}],\"name\":\"updateBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_backend\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_partners\",\"type\":\"address\"},{\"name\":\"_toSendFromStorage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensAllocatedIntoHolding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensMintedForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_vesting\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensSentIntoVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_vesting\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensSentIntoHolding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HoldingAndTeamTokensFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldBackend\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBackend\",\"type\":\"address\"}],\"name\":\"BackendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTeam\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTeam\",\"type\":\"address\"}],\"name\":\"TeamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPartners\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPartners\",\"type\":\"address\"}],\"name\":\"PartnersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldToSendFromStorage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newToSendFromStorage\",\"type\":\"address\"}],\"name\":\"ToSendFromStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Allocation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000054650daf32afbfe0fff592f249e0652e539749dc000000000000000000000000b1c944e0e44dc28c6740ba5b638f280e95d54a480000000000000000000000007835858b8563afeb5abe6274203fc66cf3bbb3010000000000000000000000008dfc01fa9754fca042db3c00f7e09b82efeeec66","Library":"","SwarmSource":"bzzr://1f5a6b6d2ab50ad6eacde70cf49fd81026ed49b7a0e4d817dfe69ee0f2ad1ec5"}]}