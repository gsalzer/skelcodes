{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PlayerAffiliate is Ownable {\r\n    using SafeMath for *;\r\n\r\n    uint256 public gameCount_;\r\n    mapping (uint256 => uint256) public playerCount_;  //gameId => playerCount\r\n    mapping (address => address) public playerAffiliate_;   //player => player's affiliate\r\n    mapping (address => uint256) public affiliateWithdrew_;    // affAddr => withdrewEth\r\n    mapping (address => uint256) public affiliateProfit_;  // affAddr => totalProfit\r\n    mapping (uint256 => mapping(uint256 => address)) public players_;   //gameId => playerId => playerAddr\r\n    mapping (uint256 => mapping(address => uint256)) public playerIds_;    //gameId => playerAddr => playerId;\r\n    mapping (uint256 => address) public games_;    //gameId => gameAddress\r\n    mapping (address => uint256) public gameIds_;  //gameAddress => gameId\r\n\r\n    event RegisteredGame(address _addr, uint256 _gameId);\r\n    event RegisteredAffiliate(uint256 indexed _gameId, address _plyAddr, address _affAddr);\r\n\r\n    modifier isRegisteredGame(address _addr) {\r\n        require(gameIds_[_addr] != 0, 'not a registered game.');\r\n        _;\r\n    }\r\n\r\n    modifier isNotRegisteredGame(address _addr) {\r\n        require(gameIds_[_addr] == 0, 'can not be a registered game.');\r\n        _;\r\n    }\r\n\r\n    modifier isHuman(address _addr) {\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    function determinePID(uint256 _gameId, address _addr)\r\n        private\r\n        returns(bool)\r\n    {\r\n        require(_addr != address(0));\r\n\r\n        if (playerIds_[_gameId][_addr] == 0) {\r\n            uint256 newPlayerId = playerCount_[_gameId] + 1;\r\n            playerCount_[_gameId]++;\r\n            players_[_gameId][newPlayerId] = _addr;\r\n            playerIds_[_gameId][_addr] = newPlayerId;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getOrCreatePlayerId(address _plyAddr)\r\n        isHuman(_plyAddr)\r\n        isRegisteredGame(msg.sender)\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = gameIds_[msg.sender];\r\n        determinePID(gameId, _plyAddr);\r\n        return playerIds_[gameId][_plyAddr];\r\n    }\r\n\r\n    function getPlayerId(address _gameAddr, address _plyAddr)\r\n        isRegisteredGame(_gameAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = gameIds_[_gameAddr];\r\n        return playerIds_[gameId][_plyAddr];\r\n    }\r\n\r\n    function getPlayerAddrById(address _gameAddr, uint256 _pid)\r\n        isRegisteredGame(_gameAddr)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        uint256 gameId = gameIds_[_gameAddr];\r\n        return players_[gameId][_pid];\r\n    }\r\n\r\n    function getPlayerAmount(address _gameAddr)\r\n        isRegisteredGame(_gameAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return playerCount_[gameIds_[_gameAddr]];\r\n    }\r\n\r\n    function registerGame(address _addr)\r\n        onlyOwner\r\n        isNotRegisteredGame(_addr)\r\n        public\r\n    {\r\n        gameCount_++;\r\n        games_[gameCount_] = _addr;\r\n        gameIds_[_addr] = gameCount_;\r\n\r\n        emit RegisteredGame(_addr, gameCount_);\r\n    }\r\n\r\n    function unRegisterGame(address _addr)\r\n        onlyOwner\r\n        isRegisteredGame(_addr)\r\n        public\r\n    {\r\n        uint256 gameId = gameIds_[_addr];\r\n        playerCount_[gameId] = 0;\r\n        games_[gameId] = address(0);\r\n        gameIds_[_addr] = 0;\r\n    }\r\n\r\n    function getOrRegisterAffiliate(address _plyAddr, address _affAddr)\r\n        isRegisteredGame(msg.sender)\r\n        isHuman(_plyAddr)\r\n        isHuman(_affAddr)\r\n        public\r\n        returns(address)\r\n    {\r\n        address plyAff_ = playerAffiliate_[_plyAddr];\r\n        uint256 gameId = gameIds_[msg.sender];\r\n\r\n        if (plyAff_ == address(0)) {\r\n            registerAffiliate(_plyAddr, _affAddr);\r\n            return _affAddr;\r\n        } else {\r\n            determinePID(gameId, _plyAddr);\r\n            determinePID(gameId, _affAddr);\r\n            return plyAff_;\r\n        }\r\n    }\r\n\r\n    function registerAffiliate(address _plyAddr, address _affAddr)\r\n        private\r\n    {\r\n        require(_plyAddr != _affAddr);\r\n        require(_affAddr != address(0));\r\n        require(playerAffiliate_[_plyAddr] == address(0), 'already registered affiliate.');\r\n\r\n        uint256 gameId = gameIds_[msg.sender];\r\n        determinePID(gameId, _plyAddr);\r\n        determinePID(gameId, _affAddr);\r\n\r\n        playerAffiliate_[_plyAddr] = _affAddr;\r\n\r\n        emit RegisteredAffiliate(gameId, _plyAddr, _affAddr);\r\n    }\r\n\r\n    function hasAffiliate(address _plyAddr) public view returns(bool) {\r\n        if (playerAffiliate_[_plyAddr] == address(0))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function clearAffiliate(address _plyAddr)\r\n        onlyOwner\r\n        public\r\n    {\r\n        require(playerAffiliate_[_plyAddr] != address(0));\r\n        playerAffiliate_[_plyAddr] = address(0);\r\n    }\r\n\r\n    function getPlyAffiliateId(address _gameAddr, address _plyAddr)\r\n        isRegisteredGame(_gameAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 gameId = gameIds_[_gameAddr];\r\n        address affAddr = playerAffiliate_[_plyAddr];\r\n        return playerIds_[gameId][affAddr];\r\n    }\r\n\r\n    function depositShare(address _plyAddr)\r\n        isRegisteredGame(msg.sender)\r\n        isHuman(_plyAddr)\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        affiliateProfit_[_plyAddr] = (affiliateProfit_[_plyAddr]).add(msg.value);\r\n        return true;\r\n    }\r\n\r\n    function getPlayerLeftProfit(address _plyAddr)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (affiliateProfit_[_plyAddr]).sub(affiliateWithdrew_[_plyAddr]);\r\n    }\r\n\r\n    function withdrawShare()\r\n        isHuman(msg.sender)\r\n        public\r\n    {\r\n        uint256 plyLeftProfit = getPlayerLeftProfit(msg.sender);\r\n        require(plyLeftProfit > 0);\r\n\r\n        affiliateWithdrew_[msg.sender] = (affiliateWithdrew_[msg.sender]).add(plyLeftProfit);\r\n        (msg.sender).transfer(plyLeftProfit);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"depositShare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateProfit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlyAffiliateId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerIds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameIds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"getPlayerAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"hasAffiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddrById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateWithdrew_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unRegisterGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerLeftProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"registerGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"clearAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAffiliate_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getPlayerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"},{\"name\":\"_affAddr\",\"type\":\"address\"}],\"name\":\"getOrRegisterAffiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plyAddr\",\"type\":\"address\"}],\"name\":\"getOrCreatePlayerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"RegisteredGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_plyAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_affAddr\",\"type\":\"address\"}],\"name\":\"RegisteredAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PlayerAffiliate","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa23947c3d20d54cba50db44ae0b3bee3631c60c8309821a49cf166f3f69f475"}]}