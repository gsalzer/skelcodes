{"status":"1","message":"OK","result":[{"SourceCode":"contract Administrable {\r\n    using SafeMath for uint256;\r\n    mapping (address => bool) private admins;\r\n    uint256 private _nAdmin;\r\n    uint256 private _nLimit;\r\n\r\n    event Activated(address indexed admin);\r\n    event Deactivated(address indexed admin);\r\n\r\n    /**\r\n     * @dev The Administrable constructor sets the original `admin` of the contract to the sender\r\n     * account. The initial limit amount of admin is 2.\r\n     */\r\n    constructor() internal {\r\n        _setAdminLimit(2);\r\n        _activateAdmin(msg.sender);\r\n    }\r\n\r\n    function isAdmin() public view returns(bool) {\r\n        return admins[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by non-admin.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(), \"sender not admin\");\r\n        _;\r\n    }\r\n\r\n    function activateAdmin(address admin) external onlyAdmin {\r\n        _activateAdmin(admin);\r\n    }\r\n\r\n    function deactivateAdmin(address admin) external onlyAdmin {\r\n        _safeDeactivateAdmin(admin);\r\n    }\r\n\r\n    function setAdminLimit(uint256 n) external onlyAdmin {\r\n        _setAdminLimit(n);\r\n    }\r\n\r\n    function _setAdminLimit(uint256 n) internal {\r\n        require(_nLimit != n, \"same limit\");\r\n        _nLimit = n;\r\n    }\r\n\r\n    /**\r\n     * @notice The Amount of admin should be bounded by _nLimit.\r\n     */\r\n    function _activateAdmin(address admin) internal {\r\n        require(admin != address(0), \"invalid address\");\r\n        require(_nAdmin < _nLimit, \"too many admins existed\");\r\n        require(!admins[admin], \"already admin\");\r\n        admins[admin] = true;\r\n        _nAdmin = _nAdmin.add(1);\r\n        emit Activated(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice At least one admin should exists.\r\n     */\r\n    function _safeDeactivateAdmin(address admin) internal {\r\n        require(_nAdmin > 1, \"admin should > 1\");\r\n        _deactivateAdmin(admin);\r\n    }\r\n\r\n    function _deactivateAdmin(address admin) internal {\r\n        require(admins[admin], \"not admin\");\r\n        admins[admin] = false;\r\n        _nAdmin = _nAdmin.sub(1);\r\n        emit Deactivated(admin);\r\n    }\r\n}\r\n\r\nlibrary ErrorHandler {\r\n    function errorHandler(bytes memory ret) internal pure {\r\n        if (ret.length > 0) {\r\n            byte ec = abi.decode(ret, (byte));\r\n            if (ec != 0x00)\r\n                revert(byteToHexString(ec));\r\n        }\r\n    }\r\n\r\n    function byteToHexString(byte data) internal pure returns (string memory ret) {\r\n        bytes memory ec = bytes(\"0x00\");\r\n        byte dataL = data & 0x0f;\r\n        byte dataH = data >> 4;\r\n        if (dataL < 0x0a)\r\n            ec[3] = byte(uint8(ec[3]) + uint8(dataL));\r\n        else\r\n            ec[3] = byte(uint8(ec[3]) + uint8(dataL) + 0x27);\r\n        if (dataH < 0x0a)\r\n            ec[2] = byte(uint8(ec[2]) + uint8(dataH));\r\n        else\r\n            ec[2] = byte(uint8(ec[2]) + uint8(dataH) + 0x27);\r\n\r\n        return string(ec);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract Proxy is Ownable {\r\n    using Address for address;\r\n\r\n    // keccak256 hash of \"dinngo.proxy.implementation\"\r\n    bytes32 private constant IMPLEMENTATION_SLOT =\r\n        0x3b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb4;\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    constructor(address implementation) internal {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"dinngo.proxy.implementation\"));\r\n        _setImplementation(implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Upgrade the implementation contract. Can only be triggered\r\n     * by the owner. Emits the Upgraded event.\r\n     * @param implementation The new implementation address.\r\n     */\r\n    function upgrade(address implementation) external onlyOwner {\r\n        _setImplementation(implementation);\r\n        emit Upgraded(implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the implementation address in the storage slot.\r\n     * @param implementation The new implementation address.\r\n     */\r\n    function _setImplementation(address implementation) internal {\r\n        require(implementation.isContract(),\r\n            \"Implementation address should be a contract address\"\r\n        );\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, implementation)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view returns (address implementation) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            implementation := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\ncontract TimelockUpgradableProxy is Proxy {\r\n    // keccak256 hash of \"dinngo.proxy.registration\"\r\n    bytes32 private constant REGISTRATION_SLOT =\r\n        0x90215db359d12011b32ff0c897114c39e26956599904ee846adb0dd49f782e97;\r\n    // keccak256 hash of \"dinngo.proxy.time\"\r\n    bytes32 private constant TIME_SLOT =\r\n        0xe89d1a29650bdc8a918bc762afb8ef07e10f6180e461c3fc305f9f142e5591e6;\r\n    uint256 private constant UPGRADE_TIME = 14 days;\r\n\r\n    event UpgradeAnnounced(address indexed implementation, uint256 time);\r\n\r\n    constructor() internal {\r\n        assert(REGISTRATION_SLOT == keccak256(\"dinngo.proxy.registration\"));\r\n        assert(TIME_SLOT == keccak256(\"dinngo.proxy.time\"));\r\n    }\r\n\r\n    /**\r\n     * @notice Register the implementation address as the candidate contract\r\n     * to be upgraded. Emits the UpgradeAnnounced event.\r\n     * @param implementation The implementation contract address to be registered.\r\n     */\r\n    function register(address implementation) external onlyOwner {\r\n        _registerImplementation(implementation);\r\n        emit UpgradeAnnounced(implementation, _time());\r\n    }\r\n\r\n    /**\r\n     * @dev Overload the function in contract Proxy.\r\n     * @notice Upgrade the implementation contract.\r\n     * @param implementation The new implementation contract.\r\n     */\r\n    function upgrade(address implementation) external {\r\n        require(implementation == _registration());\r\n        upgradeAnnounced();\r\n    }\r\n\r\n    /**\r\n     * @notice Upgrade the implementation contract to the announced address.\r\n     * Emits the Upgraded event.\r\n     */\r\n    function upgradeAnnounced() public onlyOwner {\r\n        require(now >= _time());\r\n        _setImplementation(_registration());\r\n        emit Upgraded(_registration());\r\n    }\r\n\r\n    /**\r\n     * @dev Register the imeplemtation address to the registation slot. Record the\r\n     * valid time by adding the UPGRADE_TIME to the registration time to the time slot.\r\n     * @param implementation The implemetation address to be registered.\r\n     */\r\n    function _registerImplementation(address implementation) internal {\r\n        require(implementation.isContract(),\r\n            \"Implementation address should be a contract address\"\r\n        );\r\n        uint256 time = now + UPGRADE_TIME;\r\n\r\n        bytes32 implSlot = REGISTRATION_SLOT;\r\n        bytes32 timeSlot = TIME_SLOT;\r\n\r\n        assembly {\r\n            sstore(implSlot, implementation)\r\n            sstore(timeSlot, time)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the valid time of registered implementation address.\r\n     */\r\n    function _time() internal view returns (uint256 time) {\r\n        bytes32 slot = TIME_SLOT;\r\n\r\n        assembly {\r\n            time := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the registered implementation address.\r\n     */\r\n    function _registration() internal view returns (address implementation) {\r\n        bytes32 slot = REGISTRATION_SLOT;\r\n\r\n        assembly {\r\n            implementation := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\ncontract DinngoProxy is Ownable, Administrable, TimelockUpgradableProxy {\r\n    using ErrorHandler for bytes;\r\n\r\n    uint256 public processTime;\r\n\r\n    mapping (address => mapping (address => uint256)) public balances;\r\n    mapping (bytes32 => uint256) public orderFills;\r\n    mapping (uint256 => address payable) public userID_Address;\r\n    mapping (uint256 => address) public tokenID_Address;\r\n    mapping (address => uint256) public userRanks;\r\n    mapping (address => uint256) public tokenRanks;\r\n    mapping (address => uint256) public lockTimes;\r\n\r\n    /**\r\n     * @dev User ID 0 is the management wallet.\r\n     * Token ID 0 is ETH (address 0). Token ID 1 is DGO.\r\n     * @param dinngoWallet The main address of dinngo\r\n     * @param dinngoToken The contract address of DGO\r\n     */\r\n    constructor(\r\n        address payable dinngoWallet,\r\n        address dinngoToken,\r\n        address impl\r\n    ) Proxy(impl) public {\r\n        processTime = 90 days;\r\n        userID_Address[0] = dinngoWallet;\r\n        userRanks[dinngoWallet] = 255;\r\n        tokenID_Address[0] = address(0);\r\n        tokenID_Address[1] = dinngoToken;\r\n    }\r\n\r\n    /**\r\n     * @dev All ether directly sent to contract will be refunded\r\n     */\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @notice Add the address to the user list. Event AddUser will be emitted\r\n     * after execution.\r\n     * @dev Record the user list to map the user address to a specific user ID, in\r\n     * order to compact the data size when transferring user address information\r\n     * @param id The user id to be assigned\r\n     * @param user The user address to be added\r\n     */\r\n    function addUser(uint256 id, address user) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"addUser(uint256,address)\", id, user)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the address from the user list.\r\n     * @dev The user rank is set to 0 to remove the user.\r\n     * @param user The user address to be added\r\n     */\r\n    function removeUser(address user) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"removeUser(address)\", user)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the rank of user. Can only be called by owner.\r\n     * @param user The user address\r\n     * @param rank The rank to be assigned\r\n     */\r\n    function updateUserRank(address user, uint256 rank) external onlyAdmin {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"updateUserRank(address,uint256)\",user, rank)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Add the token to the token list. Event AddToken will be emitted\r\n     * after execution.\r\n     * @dev Record the token list to map the token contract address to a specific\r\n     * token ID, in order to compact the data size when transferring token contract\r\n     * address information\r\n     * @param id The token id to be assigned\r\n     * @param token The token contract address to be added\r\n     */\r\n    function addToken(uint256 id, address token) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"addToken(uint256,address)\", id, token)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the token to the token list.\r\n     * @dev The token rank is set to 0 to remove the token.\r\n     * @param token The token contract address to be removed.\r\n     */\r\n    function removeToken(address token) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"removeToken(address)\", token)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the rank of token. Can only be called by owner.\r\n     * @param token The token contract address.\r\n     * @param rank The rank to be assigned.\r\n     */\r\n    function updateTokenRank(address token, uint256 rank) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"updateTokenRank(address,uint256)\", token, rank)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    function activateAdmin(address admin) external onlyOwner {\r\n        _activateAdmin(admin);\r\n    }\r\n\r\n    function deactivateAdmin(address admin) external onlyOwner {\r\n        _safeDeactivateAdmin(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Force-deactivate allows owner to deactivate admin even there will be\r\n     * no admin left. Should only be executed under emergency situation.\r\n     */\r\n    function forceDeactivateAdmin(address admin) external onlyOwner {\r\n        _deactivateAdmin(admin);\r\n    }\r\n\r\n    function setAdminLimit(uint256 n) external onlyOwner {\r\n        _setAdminLimit(n);\r\n    }\r\n\r\n    /**\r\n     * @notice The deposit function for ether. The ether that is sent with the function\r\n     * call will be deposited. The first time user will be added to the user list.\r\n     * Event Deposit will be emitted after execution.\r\n     */\r\n    function deposit() external payable {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"deposit()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The deposit function for tokens. The first time user will be added to\r\n     * the user list. Event Deposit will be emitted after execution.\r\n     * @param token Address of the token contract to be deposited\r\n     * @param amount Amount of the token to be depositied\r\n     */\r\n    function depositToken(address token, uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"depositToken(address,uint256)\", token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function for ether. Event Withdraw will be emitted\r\n     * after execution. User needs to be locked before calling withdraw.\r\n     * @param amount The amount to be withdrawn.\r\n     */\r\n    function withdraw(uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdraw(uint256)\", amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function for tokens. Event Withdraw will be emitted\r\n     * after execution. User needs to be locked before calling withdraw.\r\n     * @param token The token contract address to be withdrawn.\r\n     * @param amount The token amount to be withdrawn.\r\n     */\r\n    function withdrawToken(address token, uint256 amount) external {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdrawToken(address,uint256)\", token, amount)\r\n        );\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice The withdraw function that can only be triggered by owner.\r\n     * Event Withdraw will be emitted after execution.\r\n     * @param withdrawal The serialized withdrawal data\r\n     */\r\n    function withdrawByAdmin(bytes calldata withdrawal) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"withdrawByAdmin(bytes)\", withdrawal)\r\n        );\r\n        require(ok);\r\n        ret.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * @notice The settle function for orders. First order is taker order and the followings\r\n     * are maker orders.\r\n     * @param orders The serialized orders.\r\n     */\r\n    function settle(bytes calldata orders) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"settle(bytes)\", orders)\r\n        );\r\n        require(ok);\r\n        ret.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * @notice The migrate function that can only be triggered by admin.\r\n     * @param migration The serialized migration data\r\n     */\r\n    function migrateByAdmin(bytes calldata migration) external onlyAdmin {\r\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"migrateByAdmin(bytes)\", migration)\r\n        );\r\n        require(ok);\r\n        ret.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * @notice Announce lock of the sender\r\n     */\r\n    function lock() external {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"lock()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Unlock the sender\r\n     */\r\n    function unlock() external {\r\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"unlock()\"));\r\n        require(ok);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the processing time of locking the user address\r\n     */\r\n    function changeProcessTime(uint256 time) external onlyOwner {\r\n        (bool ok,) = _implementation().delegatecall(\r\n            abi.encodeWithSignature(\"changeProcessTime(uint256)\", time)\r\n        );\r\n        require(ok);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"upgradeAnnounced\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawal\",\"type\":\"bytes\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"activateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateTokenRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userID_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"forceDeactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setAdminLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"migration\",\"type\":\"bytes\"}],\"name\":\"migrateByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateUserRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orders\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenID_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"changeProcessTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dinngoWallet\",\"type\":\"address\"},{\"name\":\"dinngoToken\",\"type\":\"address\"},{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpgradeAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DinngoProxy","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4589bb891d020aad7681ff49c0f3911c793255e0000000000000000000000006d38574be6c230272daad16fa5f291f825bd0da100000000000000000000000027ccda67fd7319efe097d0b562db96e9969433ba","Library":"","SwarmSource":"bzzr://9b011b05aeeb6dc6abb10d474fcedc266ee6e3f8f811abb180afe90ea456f15c"}]}