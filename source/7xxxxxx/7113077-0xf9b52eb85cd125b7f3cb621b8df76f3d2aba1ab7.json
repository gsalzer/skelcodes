{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract BlockSpeech {\r\n\r\n    event Keynote(address indexed _from, uint _speech_id, string _speech_title);\r\n    event Like(address indexed _from, address _addr, uint _speech_id);\r\n    event Reward(address indexed _from, address _addr, uint _speech_id, uint _value);\r\n\r\n    struct Speech {\r\n        uint speech_id;\r\n        uint speech_type; // 1, for TA; 2, for the world\r\n        string speech_title;\r\n        string speech_content;\r\n        uint likes;\r\n        uint reward;\r\n        mapping(address=>uint) reward_detail;\r\n        mapping(address=>bool) is_like;\r\n    }\r\n\r\n    mapping (address => mapping (uint => Speech)) _speeches;\r\n    mapping (address => uint[]) _speech_list;\r\n    address[] _writers;\r\n    mapping(address=>uint) _writer_num;\r\n    uint[] _speech_num;\r\n    uint _speech_total_likes;\r\n    mapping(address=>uint) _total_likes;\r\n    mapping(address=>uint) _total_reward;\r\n\r\n    mapping(uint=>address[]) _like_addrs;\r\n    mapping(uint=>address[]) _reward_addrs;\r\n\r\n    uint public DEV_TAX_DIVISOR;\r\n    address public blockAppAddr;\r\n\r\n    function BlockSpeech(uint _tax_rate) public {\r\n        blockAppAddr = msg.sender;\r\n        DEV_TAX_DIVISOR = _tax_rate;\r\n    }\r\n\r\n    function keynote(uint _speech_id, uint _speech_type, string _speech_title, string _speech_content) public returns(bool) {\r\n\r\n        require(_speech_id > 0);\r\n        require(bytes(_speech_title).length > 0);\r\n        require(bytes(_speech_content).length > 0);\r\n\r\n        if(_writer_num[msg.sender] == 0) {\r\n            uint num = _writers.length++;\r\n            _writers[num] = msg.sender;\r\n            _writer_num[msg.sender] = num;\r\n        }\r\n\r\n        Speech memory speech = Speech(_speech_id, _speech_type, _speech_title, _speech_content, 0, 0);\r\n\r\n        _speeches[msg.sender][_speech_id] = speech;\r\n        _speech_list[msg.sender][_speech_list[msg.sender].length++] = _speech_id;\r\n\r\n        _speech_num[_speech_num.length++] = _speech_num.length++;\r\n\r\n        emit Keynote(msg.sender, _speech_id, _speech_title);\r\n        return true;\r\n    }\r\n\r\n    function like(address _addr, uint _speech_id) public returns(bool) {\r\n        require(_speech_id > 0);\r\n        require(_addr != address(0));\r\n\r\n        Speech storage speech = _speeches[_addr][_speech_id];\r\n        require(speech.speech_id > 0);\r\n        require(!speech.is_like[msg.sender]);\r\n\r\n        speech.is_like[msg.sender] = true;\r\n        speech.likes++;\r\n\r\n        _like_addrs[_speech_id][_like_addrs[_speech_id].length++] = msg.sender;\r\n        _total_likes[_addr] = SafeMath.add(_total_likes[_addr], 1);\r\n        _speech_total_likes = SafeMath.add(_speech_total_likes, 1);\r\n\r\n        emit Like(msg.sender, _addr, _speech_id);\r\n        return true;\r\n    }\r\n\r\n    function reward(address _addr, uint _speech_id) public payable returns(bool) {\r\n        require(_speech_id > 0);\r\n        require(_addr != address(0));\r\n        require(msg.value > 0);\r\n\r\n        Speech storage speech = _speeches[_addr][_speech_id];\r\n        require(speech.speech_id > 0);\r\n\r\n        speech.reward = SafeMath.add(speech.reward, msg.value);\r\n        _reward_addrs[_speech_id][_reward_addrs[_speech_id].length++] = msg.sender;\r\n        _total_reward[_addr] = SafeMath.add(_total_reward[_addr], msg.value);\r\n\r\n        uint devTax = SafeMath.div(msg.value, DEV_TAX_DIVISOR);\r\n        uint finalValue = SafeMath.sub(msg.value, devTax);\r\n\r\n        assert(finalValue>0 && devTax>0);\r\n\r\n        blockAppAddr.transfer(devTax);\r\n        _addr.transfer(finalValue);\r\n\r\n        emit Reward(msg.sender, _addr, _speech_id, msg.value);\r\n        return true;\r\n    }\r\n\r\n    function getMySpeechList() public constant returns (uint[] speech_list, uint[] speech_rewards, uint[] speech_likes, bool[] is_likes){\r\n\r\n        speech_rewards = new uint[](_speech_list[msg.sender].length);\r\n        speech_likes = new uint[](_speech_list[msg.sender].length);\r\n        is_likes = new bool[](_speech_list[msg.sender].length);\r\n\r\n        for(uint i=0; i<_speech_list[msg.sender].length; i++) {\r\n            Speech storage speech = _speeches[msg.sender][_speech_list[msg.sender][i]];\r\n            speech_rewards[i] = speech.reward;\r\n            speech_likes[i] = speech.likes;\r\n            is_likes[i] = speech.is_like[msg.sender];\r\n        }\r\n\r\n        return (_speech_list[msg.sender], speech_rewards, speech_likes, is_likes);\r\n    }\r\n\r\n    function getMySpeechList(address _addr) public constant returns (uint[] speech_list, uint[] speech_rewards, uint[] speech_likes, bool[] is_likes, uint[] speech_types){\r\n        require(_addr != address(0));\r\n\r\n        speech_types = new uint[](_speech_list[_addr].length);\r\n        speech_rewards = new uint[](_speech_list[_addr].length);\r\n        speech_likes = new uint[](_speech_list[_addr].length);\r\n        is_likes = new bool[](_speech_list[_addr].length);\r\n\r\n        for(uint i=0; i<_speech_list[_addr].length; i++) {\r\n            Speech storage speech = _speeches[_addr][_speech_list[_addr][i]];\r\n            speech_types[i] = speech.speech_type;\r\n            speech_rewards[i] = speech.reward;\r\n            speech_likes[i] = speech.likes;\r\n            is_likes[i] = speech.is_like[_addr];\r\n        }\r\n\r\n        return (_speech_list[_addr], speech_rewards, speech_likes, is_likes, speech_types);\r\n    }\r\n\r\n    function getMySpeech(uint _speech_id) public constant returns (uint speech_type, string speech_title, string speech_content, uint likes, uint rewards){\r\n        require(_speech_id > 0);\r\n\r\n        Speech storage speech = _speeches[msg.sender][_speech_id];\r\n        assert(speech.speech_id > 0);\r\n\r\n        return (speech.speech_type, speech.speech_title, speech.speech_content, speech.likes, speech.reward);\r\n    }\r\n\r\n    function getMySpeech(uint _speech_id, address _addr) public constant returns (uint speech_type, string speech_title, string speech_content, uint likes, uint rewards){\r\n        require(_speech_id > 0);\r\n\r\n        Speech storage speech = _speeches[_addr][_speech_id];\r\n        assert(speech.speech_id > 0);\r\n\r\n        return (speech.speech_type, speech.speech_title, speech.speech_content, speech.likes, speech.reward);\r\n    }\r\n\r\n    function getMe() public constant returns (uint num_writer, uint num_speech, uint total_likes, uint total_reward) {\r\n        return (_writer_num[msg.sender], _speech_list[msg.sender].length, _total_likes[msg.sender], _total_reward[msg.sender]);\r\n    }\r\n\r\n    function getWriter(address _addr) public constant returns (uint num_writer, uint num_speech, uint total_likes, uint total_reward) {\r\n        require(_addr != address(0));\r\n        return (_writer_num[_addr], _speech_list[_addr].length, _total_likes[_addr], _total_reward[_addr]);\r\n    }\r\n\r\n    function getWriter(address[] _addrs) public constant returns (uint[] num_writer, uint[] num_speech, uint[] total_likes, uint[] total_reward) {\r\n\r\n        for(uint i=0; i<_addrs.length; i++) {\r\n            num_writer[i] = _writer_num[_addrs[i]];\r\n            num_speech[i] = _speech_list[_addrs[i]].length;\r\n            total_likes[i] = _total_likes[_addrs[i]];\r\n            total_reward[i] = _total_reward[_addrs[i]];\r\n        }\r\n        return (num_writer, num_speech, total_likes, total_reward);\r\n    }\r\n\r\n    function getBlockSpeech() public constant returns (uint num_writers, uint num_speechs, uint speech_total_likes) {\r\n        return (_writers.length, _speech_num.length, _speech_total_likes);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function isInArray(uint a, uint[] b) internal pure returns (bool) {\r\n\r\n        for(uint i = 0; i < b.length; i++) {\r\n            if(b[i] == a) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"getWriter\",\"outputs\":[{\"name\":\"num_writer\",\"type\":\"uint256[]\"},{\"name\":\"num_speech\",\"type\":\"uint256[]\"},{\"name\":\"total_likes\",\"type\":\"uint256[]\"},{\"name\":\"total_reward\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_speech_id\",\"type\":\"uint256\"},{\"name\":\"_speech_type\",\"type\":\"uint256\"},{\"name\":\"_speech_title\",\"type\":\"string\"},{\"name\":\"_speech_content\",\"type\":\"string\"}],\"name\":\"keynote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockSpeech\",\"outputs\":[{\"name\":\"num_writers\",\"type\":\"uint256\"},{\"name\":\"num_speechs\",\"type\":\"uint256\"},{\"name\":\"speech_total_likes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_speech_id\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_TAX_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMySpeechList\",\"outputs\":[{\"name\":\"speech_list\",\"type\":\"uint256[]\"},{\"name\":\"speech_rewards\",\"type\":\"uint256[]\"},{\"name\":\"speech_likes\",\"type\":\"uint256[]\"},{\"name\":\"is_likes\",\"type\":\"bool[]\"},{\"name\":\"speech_types\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_speech_id\",\"type\":\"uint256\"}],\"name\":\"getMySpeech\",\"outputs\":[{\"name\":\"speech_type\",\"type\":\"uint256\"},{\"name\":\"speech_title\",\"type\":\"string\"},{\"name\":\"speech_content\",\"type\":\"string\"},{\"name\":\"likes\",\"type\":\"uint256\"},{\"name\":\"rewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockAppAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getWriter\",\"outputs\":[{\"name\":\"num_writer\",\"type\":\"uint256\"},{\"name\":\"num_speech\",\"type\":\"uint256\"},{\"name\":\"total_likes\",\"type\":\"uint256\"},{\"name\":\"total_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_speech_id\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMySpeech\",\"outputs\":[{\"name\":\"speech_type\",\"type\":\"uint256\"},{\"name\":\"speech_title\",\"type\":\"string\"},{\"name\":\"speech_content\",\"type\":\"string\"},{\"name\":\"likes\",\"type\":\"uint256\"},{\"name\":\"rewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMe\",\"outputs\":[{\"name\":\"num_writer\",\"type\":\"uint256\"},{\"name\":\"num_speech\",\"type\":\"uint256\"},{\"name\":\"total_likes\",\"type\":\"uint256\"},{\"name\":\"total_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_speech_id\",\"type\":\"uint256\"}],\"name\":\"like\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMySpeechList\",\"outputs\":[{\"name\":\"speech_list\",\"type\":\"uint256[]\"},{\"name\":\"speech_rewards\",\"type\":\"uint256[]\"},{\"name\":\"speech_likes\",\"type\":\"uint256[]\"},{\"name\":\"is_likes\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tax_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_speech_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_speech_title\",\"type\":\"string\"}],\"name\":\"Keynote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_speech_id\",\"type\":\"uint256\"}],\"name\":\"Like\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_speech_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"}]","ContractName":"BlockSpeech","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a930de6f4e2ad096f14f425aeb0fc895014234f241bd19ee916bd4726cf449b3"}]}