{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ownership/Ownable.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/// @title Ownable\r\n/// @dev Provide a simple access control with a single authority: the owner\r\ncontract Ownable {\r\n\r\n    // Ethereum address of current owner\r\n    address public owner;\r\n\r\n    // Ethereum address of the next owner\r\n    // (has to claim ownership first to become effective owner)\r\n    address public newOwner;\r\n\r\n    // @dev Log event on ownership transferred\r\n    // @param previousOwner Ethereum address of previous owner\r\n    // @param newOwner Ethereum address of new owner\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev Forbid call by anyone but owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Restricted to owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Deployer account becomes initial owner\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev  Transfer ownership to a new Ethereum account (safe method)\r\n    ///       Note: the new owner has to claim his ownership to become effective owner.\r\n    /// @param _newOwner  Ethereum address to transfer ownership to\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0), \"New owner is zero\");\r\n\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /// @dev  Transfer ownership to a new Ethereum account (unsafe method)\r\n    ///       Note: It's strongly recommended to use the safe variant via transferOwnership\r\n    ///             and claimOwnership, to prevent accidental transfers to a wrong address.\r\n    /// @param _newOwner  Ethereum address to transfer ownership to\r\n    function transferOwnershipUnsafe(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0), \"New owner is zero\");\r\n\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /// @dev  Become effective owner (if dedicated so by previous owner)\r\n    function claimOwnership() public {\r\n        require(msg.sender == newOwner, \"Restricted to new owner\");\r\n\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /// @dev  Transfer ownership (internal method)\r\n    /// @param _newOwner  Ethereum address to transfer ownership to\r\n    function _transferOwnership(address _newOwner) private {\r\n        if (_newOwner != owner) {\r\n            emit OwnershipTransferred(owner, _newOwner);\r\n\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/whitelist/Whitelist.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n/// @title Whitelist\r\n/// @author STOKR\r\ncontract Whitelist is Ownable {\r\n\r\n    // Set of admins\r\n    mapping(address => bool) public admins;\r\n\r\n    // Set of Whitelisted addresses\r\n    mapping(address => bool) public isWhitelisted;\r\n\r\n    /// @dev Log entry on admin added to set\r\n    /// @param admin An Ethereum address\r\n    event AdminAdded(address indexed admin);\r\n\r\n    /// @dev Log entry on admin removed from set\r\n    /// @param admin An Ethereum address\r\n    event AdminRemoved(address indexed admin);\r\n\r\n    /// @dev Log entry on investor added set\r\n    /// @param admin An Ethereum address\r\n    /// @param investor An Ethereum address\r\n    event InvestorAdded(address indexed admin, address indexed investor);\r\n\r\n    /// @dev Log entry on investor removed from set\r\n    /// @param admin An Ethereum address\r\n    /// @param investor An Ethereum address\r\n    event InvestorRemoved(address indexed admin, address indexed investor);\r\n\r\n    /// @dev Only admin\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender], \"Restricted to whitelist admin\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Add admin to set\r\n    /// @param _admin An Ethereum address\r\n    function addAdmin(address _admin) public onlyOwner {\r\n        require(_admin != address(0x0), \"Whitelist admin is zero\");\r\n\r\n        if (!admins[_admin]) {\r\n            admins[_admin] = true;\r\n\r\n            emit AdminAdded(_admin);\r\n        }\r\n    }\r\n\r\n    /// @dev Remove admin from set\r\n    /// @param _admin An Ethereum address\r\n    function removeAdmin(address _admin) public onlyOwner {\r\n        require(_admin != address(0x0), \"Whitelist admin is zero\");  // Necessary?\r\n\r\n        if (admins[_admin]) {\r\n            admins[_admin] = false;\r\n\r\n            emit AdminRemoved(_admin);\r\n        }\r\n    }\r\n\r\n    /// @dev Add investor to set of whitelisted addresses\r\n    /// @param _investors A list where each entry is an Ethereum address\r\n    function addToWhitelist(address[] _investors) external onlyAdmin {\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            if (!isWhitelisted[_investors[i]]) {\r\n                isWhitelisted[_investors[i]] = true;\r\n\r\n                emit InvestorAdded(msg.sender, _investors[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Remove investor from set of whitelisted addresses\r\n    /// @param _investors A list where each entry is an Ethereum address\r\n    function removeFromWhitelist(address[] _investors) external onlyAdmin {\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            if (isWhitelisted[_investors[i]]) {\r\n                isWhitelisted[_investors[i]] = false;\r\n\r\n                emit InvestorRemoved(msg.sender, _investors[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipUnsafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://53bf991e6cd91ee9d22cf1bb6ff5ce933106b6668781ec933a81e65c64beeb6d"}]}