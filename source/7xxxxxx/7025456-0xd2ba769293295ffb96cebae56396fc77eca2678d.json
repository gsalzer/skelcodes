{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath\r\n{\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function GET_MAX_UINT256() pure internal returns(uint256){\r\n        return MAX_UINT256;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal returns(uint){\r\n        uint c = a * b;\r\n        assertSafe(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) pure internal returns(uint){\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns(uint){\r\n        assertSafe(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns(uint){\r\n        uint c = a + b;\r\n        assertSafe(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal view returns(uint64){\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal view returns(uint64){\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal view returns(uint256){\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal view returns(uint256){\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assertSafe(bool assertion) internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ERC223Interface {\r\n      \r\n    function balanceOf(address _who) view public returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\r\n    event Approval(address indexed _from, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\ncontract ERC223Token is ERC223Interface {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    \r\n    uint256 public supply;\r\n    \r\n    function ERC223Token(uint256 _totalSupply) public\r\n    {\r\n        supply = _totalSupply;\r\n    }       \r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success){\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer (msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success){\r\n        uint codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n        emit Transfer (msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) view public returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /*\r\n    ERC 20 compatible functions\r\n    */\r\n\r\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (allowances [_from][msg.sender] < _value) return false;\r\n        if (balances [_from] < _value) return false;\r\n\r\n        allowances [_from][msg.sender] = allowances [_from][msg.sender].sub(_value);\r\n\r\n        if (_value > 0 && _from != _to) {\r\n            balances [_from] = balances [_from].sub(_value);\r\n            balances [_to] = balances [_to].add(_value);\r\n            emit Transfer (_from, _to, _value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve (address _spender, uint256 _value) public returns (bool success) {\r\n        allowances [msg.sender][_spender] = _value;\r\n        emit Approval (msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance (address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowances [_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract LykkeTokenErc223Base is ERC223Token {\r\n\r\n    address internal _issuer;\r\n    string public standard;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    function LykkeTokenErc223Base(\r\n        address issuer,\r\n        string tokenName,\r\n        uint8 divisibility,\r\n        string tokenSymbol, \r\n        string version,\r\n        uint256 totalSupply) ERC223Token(totalSupply) public{\r\n        symbol = tokenSymbol;\r\n        standard = version;\r\n        name = tokenName;\r\n        decimals = divisibility;\r\n        _issuer = issuer;\r\n    }\r\n}\r\n\r\ncontract EmissiveErc223Token is LykkeTokenErc223Base {\r\n    using SafeMath for uint;\r\n    \r\n    function EmissiveErc223Token(\r\n        address issuer,\r\n        string tokenName,\r\n        uint8 divisibility,\r\n        string tokenSymbol, \r\n        string version) LykkeTokenErc223Base(issuer, tokenName, divisibility, tokenSymbol, version, 0) public{\r\n        balances [_issuer] = SafeMath.GET_MAX_UINT256();\r\n    }\r\n\r\n    function totalSupply () view public returns (uint256 supply) {\r\n        return SafeMath.GET_MAX_UINT256().sub(balances [_issuer]);\r\n    }\r\n\r\n    function balanceOf (address _owner) view public returns (uint256 balance) {\r\n        return _owner == _issuer ? 0 : ERC223Token.balanceOf (_owner);\r\n    }\r\n}\r\n\r\ncontract LuCyToken is EmissiveErc223Token {\r\n    using SafeMath for uint;\r\n    string public termsAndConditionsUrl;\r\n    address public owner;\r\n\r\n    function LuCyToken(\r\n        address issuer,\r\n        string tokenName,\r\n        uint8 divisibility,\r\n        string tokenSymbol, \r\n        string version) EmissiveErc223Token(issuer, tokenName, divisibility, tokenSymbol, version) public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getTermsAndConditions () public view returns (string tc) {\r\n        return termsAndConditionsUrl;\r\n    }\r\n\r\n    function setTermsAndConditions (string _newTc) public {\r\n        if (msg.sender != owner){\r\n            revert(\"Only owner is allowed to change T & C\");\r\n        }\r\n        termsAndConditionsUrl = _newTc;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"termsAndConditionsUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTc\",\"type\":\"string\"}],\"name\":\"setTermsAndConditions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTermsAndConditions\",\"outputs\":[{\"name\":\"tc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"divisibility\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LuCyToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f2015a9160c9c9381ff99f19fc18e5af57cac8ed00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000124c794349207365727669636520746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c594349000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d52945ab63f8445072eee1a1e9d418ae822cd3fda6079073546ce9dceff46f1a"}]}