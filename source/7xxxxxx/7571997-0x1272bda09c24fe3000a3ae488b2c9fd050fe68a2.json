{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'GENES' Genesis crowdsale contract\r\n//\r\n// Symbol           : GENES\r\n// Name             : Genesis Smart Coin\r\n// Total supply     : 70,000,000,000.000000000000000000\r\n// Contract supply  : 50,000,000,000.000000000000000000\r\n// Decimals         : 18\r\n//\r\n// (c) ViktorZidenyk / Ltd Genesis World 2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Address\r\n// ----------------------------------------------------------------------------\r\nlibrary Address {\r\n  function toAddress(bytes memory source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n\r\n  function isNotContract(address addr) internal view returns(bool) {\r\n    uint length;\r\n    assembly { length := extcodesize(addr) }\r\n    return length == 0;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Zero\r\n// ----------------------------------------------------------------------------\r\nlibrary Zero {\r\n  function requireNotZero(address addr) internal pure {\r\n    require(addr != address(0), \"require not zero address\");\r\n  }\r\n\r\n  function requireNotZero(uint val) internal pure {\r\n    require(val != 0, \"require not zero value\");\r\n  }\r\n\r\n  function notZero(address addr) internal pure returns(bool) {\r\n    return !(addr == address(0));\r\n  }\r\n\r\n  function isZero(address addr) internal pure returns(bool) {\r\n    return addr == address(0);\r\n  }\r\n\r\n  function isZero(uint a) internal pure returns(bool) {\r\n    return a == 0;\r\n  }\r\n\r\n  function notZero(uint a) internal pure returns(bool) {\r\n    return a != 0;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\t\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n}\r\n\r\ncontract preCrowdsaleETH is owned {\r\n    \r\n    // Library\r\n    using SafeMath for uint;\r\n    \r\n    uint public price;\r\n    uint8 decimals;\r\n    uint8 public refPercent;\r\n    uint256 public softCap;\r\n\tuint256 public hardCap;\r\n\tuint256 public totalSalesEth;\r\n\tuint256 public totalSalesTokens;\r\n\tuint public startDate;\r\n\tuint public bonusEnds50;\r\n\tuint public bonusEnds30;\r\n\tuint public bonusEnds20;\r\n\tuint public bonusEnds10;\r\n\tuint public bonusEnds5;\r\n    uint public endDate;\r\n    address public beneficiary;\r\n    token public tokenReward;\r\n    \r\n    mapping(address => uint256) public balanceOfEth;\r\n    mapping(address => uint256) public balanceTokens;\r\n    mapping(address => uint256) public buyTokens;\r\n    mapping(address => uint256) public buyTokensBonus;\r\n    mapping(address => uint256) public bountyTokens;\r\n    mapping(address => uint256) public refTokens;\r\n    \r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n    \r\n    using Address for *;\r\n    using Zero for *;\r\n\r\n    event GoalReached(address recipient, uint256 totalAmountRaised);\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(address _addressOfTokenUsedAsReward) public {\r\n        price = 2500;\r\n        decimals = 18;\r\n        refPercent = 5;\r\n        softCap = 1000000 * 10**uint(decimals);\r\n\t\thardCap = 100000000 * 10**uint(decimals);\r\n\t\tstartDate = 1555286400;\t\t//15.04.2019\r\n\t\tbonusEnds50 = 1557014400;   //05.05.2019\r\n\t\tbonusEnds30 = 1558828800;   //26.05.2019\r\n\t\tbonusEnds20 = 1560211200;   //11.06.2019\r\n\t\tbonusEnds10 = 1561161600;   //22.06.2019\r\n\t\tbonusEnds5 = 1562112000;\t//03.07.2019\r\n\t\tendDate = 1571097600; \t\t//15.10.2019\r\n\t\tbeneficiary = owner;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n\r\n    function () payable external {\r\n        require(!crowdsaleClosed);\r\n        require(now >= startDate && now <= endDate);\r\n        \r\n        uint256 amount = msg.value;\r\n        uint256 buyTokens = msg.value.mul(price);\r\n        uint256 buyBonus = 0;\r\n        \r\n        // HardCap\r\n        require(hardCap >= buyTokens.add(buyBonus));\r\n\r\n        if (now <= bonusEnds50) {\r\n            buyBonus = msg.value.mul(price.mul(50).div(100));\r\n        } else if (now <= bonusEnds30){\r\n\t\t\tbuyBonus = msg.value.mul(price.mul(30).div(100));\r\n\t\t} else if (now <= bonusEnds20){\r\n\t\t\tbuyBonus = msg.value.mul(price.mul(20).div(100));\r\n\t\t} else if (now <= bonusEnds10){\r\n\t\t\tbuyBonus = msg.value.mul(price.mul(10).div(100));\t\r\n\t\t} else if (now <= bonusEnds5){\r\n\t\t\tbuyBonus = msg.value.mul(price.mul(5).div(100));\r\n\t\t}\r\n\t\t\r\n\t\t// Verification of input data on referral\r\n        address referrerAddr = msg.data.toAddress();\r\n        uint256 refTokens = msg.value.mul(price).mul(refPercent).div(100);\r\n        if (referrerAddr.notZero() && referrerAddr != msg.sender && hardCap < buyTokens.add(buyBonus).add(refTokens)) {\r\n            balanceOfEth[msg.sender] = balanceOfEth[msg.sender].add(amount);\r\n            totalSalesEth = totalSalesEth.add(amount);\r\n            totalSalesTokens = totalSalesTokens.add(buyTokens).add(buyBonus).add(refTokens);\r\n            addTokensBonusRef(msg.sender, buyTokens, buyBonus, referrerAddr, refTokens);\r\n\t\t    emit FundTransfer(msg.sender, amount, true);\r\n\t\t    \r\n        } else {\r\n    \r\n            balanceOfEth[msg.sender] = balanceOfEth[msg.sender].add(amount);\r\n            totalSalesEth = totalSalesEth.add(amount);\r\n            totalSalesTokens = totalSalesTokens.add(buyTokens).add(buyBonus);\r\n            addTokensBonus(msg.sender, buyTokens, buyBonus);\r\n\t\t    emit FundTransfer(msg.sender, amount, true);\r\n        }\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= endDate) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public afterDeadline {\r\n        if (totalSalesTokens >= softCap){\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, totalSalesEth);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() public afterDeadline {\r\n        require(crowdsaleClosed);\r\n        if (!fundingGoalReached) {\r\n            uint256 amount = balanceOfEth[msg.sender];\r\n            balanceOfEth[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                   emit FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOfEth[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            if (msg.sender.send(address(this).balance)) {\r\n               emit FundTransfer(beneficiary, address(this).balance, false);\r\n            } else {\r\n                // If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Set referer percent\r\n    // ------------------------------------------------------------------------\r\n\tfunction setRefPer(uint8 percent) public onlyOwner {\r\n\t    refPercent = percent;\r\n\t}\r\n\t\r\n\tfunction addTokens(address to, uint256 tokens) internal {\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(tokens);\r\n        buyTokens[to] = buyTokens[to].add(tokens);\r\n        tokenReward.transfer(to, tokens);\r\n    }\r\n    \r\n    function addTokensBonus(address to, uint256 buyToken, uint256 buyBonus) internal {\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(buyToken).add(buyBonus);\r\n        buyTokens[to] = buyTokens[to].add(buyToken);\r\n        buyTokensBonus[to] = buyTokensBonus[to].add(buyBonus);\r\n        tokenReward.transfer(to, buyToken.add(buyBonus));\r\n    }\r\n    \r\n    function addBountyTokens(address to, uint256 bountyToken) internal {\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(bountyToken);\r\n        bountyTokens[to] = bountyTokens[to].add(bountyToken);\r\n        tokenReward.transfer(to, bountyToken);\r\n    }\r\n    \r\n    function addTokensBonusRef(address to, uint256 buyToken, uint256 buyBonus, address referrerAddr, uint256 refToken) internal {\r\n        require(!crowdsaleClosed);\r\n        balanceTokens[to] = balanceTokens[to].add(buyToken).add(buyBonus);\r\n        buyTokens[to] = buyTokens[to].add(buyToken);\r\n        buyTokensBonus[to] = buyTokensBonus[to].add(buyBonus);\r\n        tokenReward.transfer(to, buyToken.add(buyBonus));\r\n        \r\n        // Referral bonus\r\n        balanceTokens[referrerAddr] = balanceTokens[referrerAddr].add(refToken);\r\n        refTokens[referrerAddr] = refTokens[referrerAddr].add(refToken);\r\n        tokenReward.transfer(referrerAddr, refToken);\r\n    }\r\n    \r\n    /// @notice Send all tokens to Owner after ICO\r\n    function sendAllTokensToOwner(uint256 _revardTokens) onlyOwner public {\r\n        tokenReward.transfer(owner, _revardTokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSalesEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds30\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokensBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSalesTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds10\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds50\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_revardTokens\",\"type\":\"uint256\"}],\"name\":\"sendAllTokensToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"setRefPer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"preCrowdsaleETH","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000069788aa341bfca46ea181e99be6346b2269ecf4e","Library":"","SwarmSource":"bzzr://f7cafbdc90004657ff5e7674e84e9959170040e06796759e782beb28b0a3ebe6"}]}