{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract CampaignFactory {\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  address[] campaigns;\r\n  address public owner = msg.sender;\r\n\r\n  function createCampaign(\r\n    uint _duration,\r\n    string _title,\r\n    string _description,\r\n    string _website) public onlyOwner returns(address) {\r\n    Campaign newCampaign = new Campaign(\r\n      _duration,\r\n      _title,\r\n      _description,\r\n      _website,\r\n      msg.sender\r\n    );\r\n\r\n    campaigns.push(newCampaign);\r\n    return newCampaign;\r\n  }\r\n\r\n  function getCampaigns() public view returns(address[]){\r\n    require( campaigns.length > 0);\r\n    return campaigns;\r\n  }\r\n}\r\n\r\ncontract Campaign {\r\n  enum CampaignState {\r\n    READY, OPEN, CLOSED\r\n  }\r\n\r\n  uint public currentAmount;\r\n  uint public targetAmount;\r\n  uint public duration; //period of campaign(days)\r\n  uint createtionTime = now;\r\n\r\n  address public owner;\r\n  address[] donatorsArr;\r\n  address[] receiversArr;\r\n\r\n  string title;\r\n  string description;\r\n  string website;\r\n\r\n  mapping (address => uint) donators;\r\n  mapping (address => uint) receiversMap;\r\n  // widthdraw list\r\n  mapping (address => bool) receiversWidthdraw;\r\n\r\n  CampaignState public state;\r\n\r\n  constructor(\r\n    uint _duration,\r\n    string _title,\r\n    string _description,\r\n    string _website,\r\n    address _owner\r\n  ) public {\r\n    title = _title;\r\n    duration = (_duration*1 minutes); //days to minutes\r\n    description = _description;\r\n    website = _website;\r\n    owner = _owner;\r\n    state = CampaignState.READY;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /*\r\n  * check state and duration\r\n  */\r\n  modifier onlyWhenCampaignClosed() {\r\n    require(state == CampaignState.CLOSED);// && now >= createtionTime + duration) ;\r\n    _;\r\n  }\r\n\r\n  /*\r\n* check state and duration\r\n*/\r\n  modifier onlyWhenCampaignOpen() {\r\n    require(state == CampaignState.OPEN && now <= createtionTime + duration) ;\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * fallback function\r\n  */\r\n  function () public payable{\r\n    if( msg.value > 0 ){\r\n      require(state == CampaignState.OPEN);\r\n      donatorsArr.push(msg.sender);\r\n      donators[msg.sender] += msg.value;\r\n      currentAmount += msg.value;\r\n    }\r\n  }\r\n\r\n  function addReceiver(address _receiver, uint _requiredAmount) onlyOwner public {\r\n    require(state == CampaignState.READY);\r\n    require(_requiredAmount > 0 && receiversMap[_receiver] <= 0);\r\n    receiversArr.push(_receiver);\r\n    receiversMap[_receiver] = _requiredAmount;\r\n    targetAmount += _requiredAmount;\r\n  }\r\n\r\n  function updateReceiver(address _receiver, uint _requiredAmount) onlyOwner public {\r\n    require(state == CampaignState.READY);\r\n    require(_requiredAmount > 0 && receiversMap[_receiver] > 0);\r\n    targetAmount = targetAmount - receiversMap[_receiver] + _requiredAmount;\r\n    receiversMap[_receiver] = _requiredAmount;\r\n  }\r\n\r\n  /**\r\n  * returns title, description, website, duration, targetAmount, count of receivers, state\r\n  */\r\n  function campaignInfo() view public returns(string, string, string, uint, uint, uint, uint) {\r\n    return (title, description, website, duration, targetAmount, receiversArr.length, uint(state) );\r\n  }\r\n\r\n  function getReceivers() view public returns (address[]){\r\n    return receiversArr;\r\n  }\r\n\r\n  function getReceiversMap(address _receiver) view public returns (uint){\r\n    return receiversMap[_receiver];\r\n  }\r\n\r\n  function getDonators() view public returns (address[]) {\r\n    return donatorsArr;\r\n  }\r\n\r\n  function donate() public onlyWhenCampaignOpen payable{\r\n    require(state == CampaignState.OPEN);\r\n\r\n    require(msg.value > 0);\r\n    donatorsArr.push(msg.sender);\r\n    donators[msg.sender] += msg.value;\r\n    currentAmount += msg.value;\r\n  }\r\n\r\n  function extendDuration(uint _newDuration) onlyOwner public {\r\n    require(duration < _newDuration);\r\n    duration = _newDuration;\r\n  }\r\n\r\n  function startCampaign() onlyOwner public {\r\n    require(state == CampaignState.READY);\r\n    require(receiversArr.length > 0);\r\n    changeState(CampaignState.OPEN);\r\n  }\r\n  function stopCampaign() onlyOwner public {\r\n    require(state == CampaignState.OPEN && targetAmount <= currentAmount);\r\n    changeState(CampaignState.CLOSED);\r\n  }\r\n\r\n  function changeState(CampaignState _state) internal {\r\n    // require(state != _state && state < _state);\r\n    require(state != _state);\r\n    state = _state;\r\n  }\r\n  // function changeState(uint _state) internal {\r\n  //   require(state != _state && uint(CampaignState.READY) <= _state && uint(CampaignState.CLOSED) >= _state);\r\n  //   state = CampaignState(_state);\r\n  // }\r\n\r\n  function queryMyDonation() view public returns(uint) {\r\n    require(donators[msg.sender] > 0);\r\n    return donators[msg.sender];\r\n  }\r\n\r\n  function widthdraw() onlyWhenCampaignClosed public payable{\r\n    require(receiversMap[msg.sender] > 0);\r\n    require(!receiversWidthdraw[msg.sender]);\r\n    // uint amount = receiversMap[msg.sender];\r\n    // delete receiversMap[msg.sender];\r\n    // msg.sender.transfer(amount);\r\n    receiversWidthdraw[msg.sender] = true;\r\n    msg.sender.transfer(receiversMap[msg.sender]);\r\n  }\r\n\r\n  function getContractBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function getCampaignEndBlockTime() public view returns (uint) {\r\n    return (createtionTime + duration);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_website\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCampaigns\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CampaignFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f5a8b4a125672dc5df525ca8e86456dcb21a2255c0f2d4a48bdaf2920c4fcfd"}]}