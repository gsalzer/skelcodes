{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title Vrenelium Token - VRE\r\n * @author Vrenelium AG 2018/2019\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n *\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n *\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 token implementation\r\n *\r\n * @dev Implementation of the ERC20 token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token with logarithmic approximation to token cap\r\n */\r\ncontract MintableTokenWithCap is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  uint256 public constant TOTAL_TOKEN_CAP      = 78000000 * 10 ** 18; // Maximum amount of tokens\r\n  uint256 public constant PRE_MINTED_TOKEN_CAP = 24100000 * 10 ** 18; // Amount of pre minted tokens\r\n\r\n  uint256 public constant PRE_MINTING_END      = 1577750400; // x1 - 2019-12-31T00:00:00+00:00 - Pre minting end Timestamp\r\n  uint256 public constant MINTING_END          = 3187295999; // x2 - 2070-12-31T23:59:59+00:00 - Minting end Timestamp\r\n\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_ + _amount <= getCurrentMintingLimit());\r\n\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function getCurrentMintingLimit()\r\n    public\r\n    view\r\n    returns(uint256)\r\n  {\r\n    if(now <= PRE_MINTING_END) {\r\n\r\n      return PRE_MINTED_TOKEN_CAP;\r\n    }\r\n    else if(now <= MINTING_END) {\r\n\r\n      // Logarithmic approximation until MINTING_END\r\n      // qfactor = (ln(2x + 0.2) - ln(0.2)) / (ln(2.2)-ln(0.2))\r\n      // Pre calculated values are used for efficiency reasons\r\n\r\n      if(now <= 1609459199) { // 12/31/2020 @ 11:59pm (UTC)\r\n            return 28132170 *10 ** 18;\r\n      }\r\n      else if(now <= 1640995199) { // 12/31/2021 @ 11:59pm (UTC)\r\n            return 31541205 *10 ** 18;\r\n      }\r\n      else if(now <= 1672531199) { // 12/31/2022 @ 11:59pm (UTC)\r\n            return 34500660 *10 ** 18;\r\n      }\r\n      else if(now <= 1704067199) { // 12/31/2023 @ 11:59pm (UTC)\r\n            return 37115417 *10 ** 18;\r\n      }\r\n      else if(now <= 1735603199) { // 12/31/2024 @ 11:59pm (UTC)\r\n            return 39457461 *10 ** 18;\r\n      }\r\n      else if(now <= 1767225599) { // 12/31/2025 @ 11:59pm (UTC)\r\n            return 41583887 *10 ** 18;\r\n      }\r\n      else if(now <= 1798761599) { // 12/31/2026 @ 11:59pm (UTC)\r\n            return 43521339 *10 ** 18;\r\n      }\r\n      else if(now <= 1830297599) { // 12/31/2027 @ 11:59pm (UTC)\r\n            return 45304967 *10 ** 18;\r\n      }\r\n      else if(now <= 1861919999) { // 12/31/2028 @ 11:59pm (UTC)\r\n            return 46961775 *10 ** 18;\r\n      }\r\n      else if(now <= 1893455999) { // 12/31/2029 @ 11:59pm (UTC)\r\n            return 48500727 *10 ** 18;\r\n      }\r\n      else if(now <= 1924991999) { // 12/31/2030 @ 11:59pm (UTC)\r\n            return 49941032 *10 ** 18;\r\n      }\r\n      else if(now <= 1956527999) { // 12/31/2031 @ 11:59pm (UTC)\r\n            return 51294580 *10 ** 18;\r\n      }\r\n      else if(now <= 1988150399) { // 12/31/2032 @ 11:59pm (UTC)\r\n            return 52574631 *10 ** 18;\r\n      }\r\n      else if(now <= 2019686399) { // 12/31/2033 @ 11:59pm (UTC)\r\n            return 53782475 *10 ** 18;\r\n      }\r\n      else if(now <= 2051222399) { // 12/31/2034 @ 11:59pm (UTC)\r\n            return 54928714 *10 ** 18;\r\n      }\r\n      else if(now <= 2082758399) { // 12/31/2035 @ 11:59pm (UTC)\r\n            return 56019326 *10 ** 18;\r\n      }\r\n      else if(now <= 2114380799) { // 12/31/2036 @ 11:59pm (UTC)\r\n            return 57062248 *10 ** 18;\r\n      }\r\n      else if(now <= 2145916799) { // 12/31/2037 @ 11:59pm (UTC)\r\n            return 58056255 *10 ** 18;\r\n      }\r\n      else if(now <= 2177452799) { // 12/31/2038 @ 11:59pm (UTC)\r\n            return 59008160 *10 ** 18;\r\n      }\r\n      else if(now <= 2208988799) { // 12/31/2039 @ 11:59pm (UTC)\r\n            return 59921387 *10 ** 18;\r\n      }\r\n      else if(now <= 2240611199) { // 12/31/2040 @ 11:59pm (UTC)\r\n            return 60801313 *10 ** 18;\r\n      }\r\n      else if(now <= 2272147199) { // 12/31/2041 @ 11:59pm (UTC)\r\n            return 61645817 *10 ** 18;\r\n      }\r\n      else if(now <= 2303683199) { // 12/31/2042 @ 11:59pm (UTC)\r\n            return 62459738 *10 ** 18;\r\n      }\r\n      else if(now <= 2335219199) { // 12/31/2043 @ 11:59pm (UTC)\r\n            return 63245214 *10 ** 18;\r\n      }\r\n      else if(now <= 2366841599) { // 12/31/2044 @ 11:59pm (UTC)\r\n            return 64006212 *10 ** 18;\r\n      }\r\n      else if(now <= 2398377599) { // 12/31/2045 @ 11:59pm (UTC)\r\n            return 64740308 *10 ** 18;\r\n      }\r\n      else if(now <= 2429913599) { // 12/31/2046 @ 11:59pm (UTC)\r\n            return 65451186 *10 ** 18;\r\n      }\r\n      else if(now <= 2461449599) { // 12/31/2047 @ 11:59pm (UTC)\r\n            return 66140270 *10 ** 18;\r\n      }\r\n      else if(now <= 2493071999) { // 12/31/2048 @ 11:59pm (UTC)\r\n            return 66810661 *10 ** 18;\r\n      }\r\n      else if(now <= 2524607999) { // 12/31/2049 @ 11:59pm (UTC)\r\n            return 67459883 *10 ** 18;\r\n      }\r\n      else if(now <= 2556143999) { // 12/31/2050 @ 11:59pm (UTC)\r\n            return 68090879 *10 ** 18;\r\n      }\r\n      else if(now <= 2587679999) { // 12/31/2051 @ 11:59pm (UTC)\r\n            return 68704644 *10 ** 18;\r\n      }\r\n      else if(now <= 2619302399) { // 12/31/2052 @ 11:59pm (UTC)\r\n            return 69303710 *10 ** 18;\r\n      }\r\n      else if(now <= 2650838399) { // 12/31/2053 @ 11:59pm (UTC)\r\n            return 69885650 *10 ** 18;\r\n      }\r\n      else if(now <= 2682374399) { // 12/31/2054 @ 11:59pm (UTC)\r\n            return 70452903 *10 ** 18;\r\n      }\r\n      else if(now <= 2713910399) { // 12/31/2055 @ 11:59pm (UTC)\r\n            return 71006193 *10 ** 18;\r\n      }\r\n      else if(now <= 2745532799) { // 12/31/2056 @ 11:59pm (UTC)\r\n            return 71547652 *10 ** 18;\r\n      }\r\n      else if(now <= 2777068799) { // 12/31/2057 @ 11:59pm (UTC)\r\n            return 72074946 *10 ** 18;\r\n      }\r\n      else if(now <= 2808604799) { // 12/31/2058 @ 11:59pm (UTC)\r\n            return 72590155 *10 ** 18;\r\n      }\r\n      else if(now <= 2840140799) { // 12/31/2059 @ 11:59pm (UTC)\r\n            return 73093818 *10 ** 18;\r\n      }\r\n      else if(now <= 2871763199) { // 12/31/2060 @ 11:59pm (UTC)\r\n            return 73587778 *10 ** 18;\r\n      }\r\n      else if(now <= 2903299199) { // 12/31/2061 @ 11:59pm (UTC)\r\n            return 74069809 *10 ** 18;\r\n      }\r\n      else if(now <= 2934835199) { // 12/31/2062 @ 11:59pm (UTC)\r\n            return 74541721 *10 ** 18;\r\n      }\r\n      else if(now <= 2966371199) { // 12/31/2063 @ 11:59pm (UTC)\r\n            return 75003928 *10 ** 18;\r\n      }\r\n      else if(now <= 2997993599) { // 12/31/2064 @ 11:59pm (UTC)\r\n            return 75458050 *10 ** 18;\r\n      }\r\n      else if(now <= 3029529599) { // 12/31/2065 @ 11:59pm (UTC)\r\n            return 75901975 *10 ** 18;\r\n      }\r\n      else if(now <= 3061065599) { // 12/31/2066 @ 11:59pm (UTC)\r\n            return 76337302 *10 ** 18;\r\n      }\r\n      else if(now <= 3092601599) { // 12/31/2067 @ 11:59pm (UTC)\r\n            return 76764358 *10 ** 18;\r\n      }\r\n      else if(now <= 3124223999) { // 12/31/2068 @ 11:59pm (UTC)\r\n            return 77184590 *10 ** 18;\r\n      }\r\n      else if(now <= 3155759999) { // 12/31/2069 @ 11:59pm (UTC)\r\n            return 77595992 *10 ** 18;\r\n      }\r\n      else if(now <= 3187295999) { // 12/31/2070 @ 11:59pm (UTC)\r\n            return 78000000 *10 ** 18;\r\n      }\r\n    }\r\n    else {\r\n\r\n      return TOTAL_TOKEN_CAP;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n* @title Vrenelium Token Smart Contract\r\n*/\r\ncontract VreneliumToken is MintableTokenWithCap {\r\n\r\n    // Public Constants\r\n    string public constant name = \"Vrenelium Token\";\r\n    string public constant symbol = \"VRE\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Modifier to not allow transfers\r\n    * to this contract\r\n    */\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        returns (bool) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        returns (bool) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRE_MINTED_TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMintingLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINTING_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_MINTING_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VreneliumToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eb7c22799243305acce179b11343728698a1fb47d0ffe1bad4a378893f05223a"}]}