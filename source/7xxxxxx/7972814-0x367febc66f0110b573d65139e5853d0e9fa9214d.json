{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\t/* contract can send to others - we verify there is not a contract\r\n\tat address we are sending to. This prevents security issues\r\n\t*/\r\n\t\r\ncontract TriviaChain {\r\n\r\n\t/* Owner of the contract -- this is US */\r\n\taddress payable public owner;\r\n\t\r\n\t/* Unix timestamp of when contract is valid from */\r\n\tuint256 public startdate = 1560737700;\t\r\n\t\r\n\t/* Unix timestamp of when contract is valid until */\r\n\tuint256 public enddate = 1560737758;\r\n\r\n\r\n\t/* this is the question ID - needs to match with database question ID */\r\n\tint constant question_id = 18;\r\n\r\n\t/* Answer Hash to verify the user put in the correct answer - sha256\r\n\t\tIt is the hash of the correct answer\r\n\t*/\r\n\tbytes correctAnswerHash = bytes('0x1670F2E42FEFA5044D59A65349E47C566009488FC57D7B4376DD5787B59E3C57'); //need to verify that same as toHEx\r\n\r\n\t\r\n\t/* constructor called whenever we initialize a contract sender will be us */\r\n\tconstructor() public {owner = msg.sender; }\r\n\r\n\t/* standard modifier to only allow owner */\r\n\tmodifier onlyOwner {\r\n\trequire (msg.sender == owner);\r\n\t_;\r\n\t}\r\n\r\n\t\r\n\t/* fallback function so contract can recieve ether */\r\n\t\r\n\tfunction() external payable { }\r\n\t\r\n\t/* function to check there is no code at site we are sending funds to \r\n\t   The contract holds the funds so users can see the pot payout and then \r\n\t   the value after payout\r\n\t*/\r\n\tfunction checkAnswer(string memory answer) private view returns (bool) {\r\n\t\r\n\tbytes32 answerHash = sha256(abi.encodePacked(answer));\r\n\t\r\n\t/* this will cost gas on the blockchain \r\n\t\r\n\tif(keccak256(answerHash) == keccak256(correctAnswerHash)) {\r\n\tthis.correctAnswer = true;\r\n\t}\r\n\t\r\n\t*/\r\n\t\r\n\tif(keccak256(abi.encode(answerHash)) == keccak256(abi.encode(correctAnswerHash)))  {\r\n\treturn true;\r\n\t}\r\n\t\r\n\treturn false;\r\n\t\r\n\t}\r\n\t\r\n\t/* functinon to pay the correct recipients requires the owner to send*/\r\n\t\r\n\tfunction sendEtherToWinner(address payable recipient, uint amount) public payable onlyOwner() {\r\n\t\trecipient.transfer(amount);\r\n\t}\r\n\t\r\n\t/* gets the start time*/\r\n\tfunction get_startdate() public view  returns (uint256) {\r\n        return startdate;\r\n    }\r\n\t\r\n\t/* gets the time end*/\r\n\tfunction get_enddate() public view  returns (uint256) {\r\n        return enddate;\r\n    }\r\n\t\r\n\t/* gets the question id */\r\n\t\r\n\tfunction get_Id() public pure  returns (int) {\r\n        return question_id;\r\n    }\r\n\t\r\n\tfunction get_answer_hash() public view  returns (string memory) {\r\n        return string(correctAnswerHash);\r\n    }\r\n\t\r\n\tfunction getSha256(string memory input) public pure returns (bytes32) {\r\n\r\n        bytes32 hash = sha256(abi.encodePacked(input));\r\n\r\n        return (hash);\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"get_answer_hash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input\",\"type\":\"string\"}],\"name\":\"getSha256\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEtherToWinner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_Id\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TriviaChain","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://598ecb777d325c3d92a4e59ad830aefbd0416e9dde7197bff41390c7bbc3d164"}]}