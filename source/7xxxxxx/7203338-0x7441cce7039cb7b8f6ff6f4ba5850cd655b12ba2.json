{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract TubLike {\r\n    function safe(bytes32 cup) external returns (bool);\r\n    function cups(bytes32 cup) external view returns (address,uint,uint,uint);\r\n}\r\n\r\ncontract GemLike {\r\n    function balanceOf(address guy) external view returns (uint256);\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n}\r\n\r\ncontract RiskyBusiness {\r\n\r\n    address public owner;\r\n    uint256 public min;\r\n\r\n    mapping (bytes32 => bool) public played;\r\n\r\n    TubLike public constant tub = TubLike(0x448a5065aeBB8E423F0896E6c5D525C040f59af3);\r\n    GemLike public constant dai = GemLike(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n\r\n    constructor(uint256 min_) public {\r\n        owner = msg.sender;\r\n        min = min_;\r\n    }\r\n\r\n    modifier auth {\r\n        require(msg.sender == owner, \"risky-biz: you are not Mariano!\");\r\n        _;\r\n    }\r\n\r\n    function play(uint256 cup) external returns (bool) {\r\n        bytes32 id = bytes32(cup);\r\n        (address lad, , uint art, ) = tub.cups(id);\r\n\r\n        require(msg.sender == lad, \"risky-biz: sender is not cdp owner\");\r\n        require(art >= min, \"risky-biz: not enough debt in cdp\");\r\n        require(!tub.safe(id), \"risky-biz: cdp is not unsafe\");\r\n        require(!played[id], \"risky-biz: this cdp has already played\");\r\n        \r\n        played[id] = true;\r\n        return dai.transfer(msg.sender, dai.balanceOf(address(this)));\r\n    }\r\n\r\n    function setMin(uint256 min_) external auth {\r\n        min = min_;\r\n    }\r\n\r\n    function totallyNotABackdoorToRetrieveMyDaiJustInCase() external auth returns (bool) {\r\n        uint wad = dai.balanceOf(address(this));\r\n        return dai.transfer(msg.sender, wad);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cup\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"played\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totallyNotABackdoorToRetrieveMyDaiJustInCase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"min_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RiskyBusiness","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000a968163f0a57b400000","Library":"","SwarmSource":"bzzr://9990709d70f7f02b68326be75b4b9d5d7ac29849a410ac60c8cdc8e94d694cec"}]}