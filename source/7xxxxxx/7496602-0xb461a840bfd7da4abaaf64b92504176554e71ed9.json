{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.99 <0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract HashGame is Ownable {\r\n\r\n    uint256 constant public MAX_BET = 1 ether;\r\n    uint256 public ethRaised;\r\n    uint256 public countRound = 1;\r\n\r\n    struct Game {\r\n        address player;\r\n        uint256 betAmount;\r\n        uint256 blockNumber;\r\n        uint256 prize;\r\n        uint256[] symbols;\r\n        bool started;\r\n        bool isWinner;\r\n        string symbolWinner;\r\n    }\r\n    mapping(uint256 => Game) public games;\r\n    mapping(address => uint256) public roundPlayer;\r\n\r\n    address payable public beneficiar;\r\n\r\n    event Result(address indexed player, uint[] symbols, string winSymbol, uint256 betAmount, uint256 prizeAmount, uint256 blockNumber);\r\n    event PlaceBet(address indexed player, uint256 betAmount, uint256 prizeAmount, uint256 blockNumber, uint256[] symbols);\r\n\r\n    constructor (address payable beneficiarAddress) public {\r\n        setBeneficiarAddress(beneficiarAddress);\r\n    }\r\n\r\n    function () external payable {}\r\n\r\n    function placeBet(uint[] memory symbolsUint) public payable {\r\n        require(msg.value > 0 && msg.value <= MAX_BET, \"Requires msg.value > 0 && msg.value <= MAX_BET\");\r\n        require(!games[roundPlayer[msg.sender]].started, \"Requires not started\");\r\n        require(symbolsUint.length > 0 && symbolsUint.length <= 5, \"Requires symbols.length > 0 && symbols.length <= 5\");\r\n        uint256 prize = calcPrize(symbolsUint.length, msg.value);\r\n        require(address(this).balance >= prize, \"require balance of contract >= prize\");\r\n\r\n        Game storage game = games[countRound];\r\n        game.player = msg.sender;\r\n        game.betAmount = msg.value;\r\n        game.blockNumber = block.number;\r\n        game.prize = prize;\r\n        game.symbols = symbolsUint;\r\n        game.started = true;\r\n\r\n        roundPlayer[msg.sender]  = countRound;\r\n\r\n        countRound++;\r\n        emit PlaceBet(msg.sender, msg.value, prize, block.number, symbolsUint);\r\n    }\r\n\r\n    function bet() public {\r\n        Game storage game = games[roundPlayer[msg.sender]];\r\n        require(game.started, \"require game started\");\r\n        require(block.number > game.blockNumber, \"require current number of block > game number of block\");\r\n        if (block.number - game.blockNumber > 256) {\r\n            if (address(this).balance > game.betAmount) {\r\n                game.started = false;\r\n                msg.sender.transfer(game.betAmount);\r\n            }\r\n        } else {\r\n            string [] memory symbols = getValueSymbols(game.symbols);\r\n            byte lastBlockhashByte = getLastByte(blockhash(game.blockNumber));\r\n            string memory lastByteRightSymbol = getRightSymbolFromByte(lastBlockhashByte);\r\n            game.symbolWinner = lastByteRightSymbol;\r\n            uint256 prize = game.prize;\r\n            if (address(this).balance > prize) {\r\n                for (uint i = 0; i < symbols.length; i++) {\r\n                    if ( keccak256(bytes(symbols[i])) == keccak256(bytes(lastByteRightSymbol)) ) {\r\n                        ethRaised = ethRaised + prize;\r\n                        game.isWinner = true;\r\n                        msg.sender.transfer(prize);\r\n                    }\r\n                }\r\n                game.started = false;\r\n            }\r\n            emit Result(msg.sender, game.symbols, lastByteRightSymbol, game.betAmount, prize, game.blockNumber);\r\n        }\r\n    }\r\n\r\n    function getEtherFromBank(uint256 weiAmount) public {\r\n        require(msg.sender == owner() || msg.sender == beneficiar);\r\n        beneficiar.transfer(weiAmount);\r\n    }\r\n\r\n    function getBalanceContract() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getGamesByIndex(uint index) public view returns\r\n    (\r\n        address player,\r\n        uint betAmount,\r\n        uint prize,\r\n        bool isWinner,\r\n        uint[] memory symbols,\r\n        bool started,\r\n        string memory symbolWinner\r\n    ) {\r\n        Game memory game = games[index];\r\n        player = game.player;\r\n        betAmount = game.betAmount;\r\n        prize = game.prize;\r\n        isWinner = game.isWinner;\r\n        symbols = game.symbols;\r\n        started = game.started;\r\n        symbolWinner = game.symbolWinner;\r\n    }\r\n\r\n    function setBeneficiarAddress(address payable beneficiarAddress) public onlyOwner {\r\n        beneficiar = beneficiarAddress;\r\n    }\r\n\r\n    function getLastByte(bytes32 strBytes) private pure returns (byte lastByte) {\r\n        lastByte = strBytes[31];\r\n    }\r\n\r\n    function getRightSymbolFromByte(byte input) private pure returns(string memory symbol) {\r\n        byte val = input & 0x0f;\r\n        if (val == 0x00) {\r\n            symbol = '0';\r\n        } else if (val == 0x01) {\r\n            symbol = '1';\r\n        } else if (val == 0x02) {\r\n            symbol = '2';\r\n        } else if (val == 0x03) {\r\n            symbol = '3';\r\n        } else if (val == 0x04) {\r\n            symbol = '4';\r\n        } else if (val == 0x05) {\r\n            symbol = '5';\r\n        } else if (val == 0x06) {\r\n            symbol = '6';\r\n        } else if (val == 0x07) {\r\n            symbol = '7';\r\n        } else if (val == 0x08) {\r\n            symbol = '8';\r\n        } else if (val == 0x09) {\r\n            symbol = '9';\r\n        } else if (val == 0x0a) {\r\n            symbol = 'a';\r\n        } else if (val == 0x0b) {\r\n            symbol = 'b';\r\n        } else if (val == 0x0c) {\r\n            symbol = 'c';\r\n        } else if (val == 0x0d) {\r\n            symbol = 'd';\r\n        } else if (val == 0x0e) {\r\n            symbol = 'e';\r\n        } else if (val == 0x0f) {\r\n            symbol = 'f';\r\n        }\r\n    }\r\n\r\n    function convertToSymbol(uint val) private pure returns(string memory symbol) {\r\n        if (val == 0) {\r\n            symbol = '0';\r\n        } else if (val == 1) {\r\n            symbol = '1';\r\n        } else if (val == 2) {\r\n            symbol = '2';\r\n        } else if (val == 3) {\r\n            symbol = '3';\r\n        } else if (val == 4) {\r\n            symbol = '4';\r\n        } else if (val == 5) {\r\n            symbol = '5';\r\n        } else if (val == 6) {\r\n            symbol = '6';\r\n        } else if (val == 7) {\r\n            symbol = '7';\r\n        } else if (val == 8) {\r\n            symbol = '8';\r\n        } else if (val == 9) {\r\n            symbol = '9';\r\n        } else if (val == 10) {\r\n            symbol = 'a';\r\n        } else if (val == 11) {\r\n            symbol = 'b';\r\n        } else if (val == 12) {\r\n            symbol = 'c';\r\n        } else if (val == 13) {\r\n            symbol = 'd';\r\n        } else if (val == 14) {\r\n            symbol = 'e';\r\n        } else if (val == 15) {\r\n            symbol = 'f';\r\n        }\r\n    }\r\n\r\n    function calcPrize(uint len, uint value) internal pure returns (uint) {\r\n        if (len == 1) {\r\n            return value * 10;\r\n        }\r\n        if (len == 2) {\r\n            return value * 5;\r\n        }\r\n        if (len == 3) {\r\n            return value * 4;\r\n        }\r\n        if (len == 4) {\r\n            return value * 3;\r\n        }\r\n        if (len == 5) {\r\n            return value * 2;\r\n        }\r\n    }\r\n\r\n    function getValueSymbols(uint[] memory arrayUintSymbols) internal pure returns (string[] memory arrayStrSymbols) {\r\n        delete arrayStrSymbols;\r\n        string [] memory arrayString = new string[](arrayUintSymbols.length);\r\n        for (uint i = 0; i < arrayUintSymbols.length; i++) {\r\n            arrayString[i] = convertToSymbol(arrayUintSymbols[i]);\r\n        }\r\n        arrayStrSymbols = arrayString;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"betAmount\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"started\",\"type\":\"bool\"},{\"name\":\"isWinner\",\"type\":\"bool\"},{\"name\":\"symbolWinner\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGamesByIndex\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"betAmount\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"isWinner\",\"type\":\"bool\"},{\"name\":\"symbols\",\"type\":\"uint256[]\"},{\"name\":\"started\",\"type\":\"bool\"},{\"name\":\"symbolWinner\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getEtherFromBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiarAddress\",\"type\":\"address\"}],\"name\":\"setBeneficiarAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbolsUint\",\"type\":\"uint256[]\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiarAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"symbols\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"winSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbols\",\"type\":\"uint256[]\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HashGame","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d589eaa57cdf77d22eb656e080509faa5759068","Library":"","SwarmSource":"bzzr://d7ca2c6ddcc32841b4f8c27e217b275afa0c8056f474239e94f442347332a9eb"}]}