{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\n/**\r\n* @author ESPAY PTY LTD.\r\n*/\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n*      functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    constructor() internal{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Authenticity\r\n * @dev Authenticity contract for authenticate ERC223 contracts.\r\n*/\r\ncontract Authenticity is Ownable{\r\n    \r\n    address[] contracts;\r\n    \r\n    /**\r\n    * @dev Throws if _addr address was not contract address.\r\n    */\r\n    modifier withContract(address _addr){\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        require(length > 0);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev constructor for deploy Authenticity contract with _contractAddress.\r\n    * @param _contractAddress address of ERC223 contract that need to authenticate.\r\n    */\r\n    constructor(address _contractAddress) public {\r\n        contracts.push(_contractAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev getAddress for check checkAddress was authenticate or not.\r\n    * @param checkAddress address of ERC223 contract that check for authenticate.\r\n    * @return true if getAddress execute successfully.\r\n    */\r\n    function getAddress(address checkAddress) public view withContract(checkAddress) returns (bool success) {\r\n        for(uint i = 0; i<contracts.length;i++ )\r\n        if(checkAddress==contracts[i]) success=true;\r\n    }\r\n    \r\n    /**\r\n    * @dev addContract for add _contractAddress into authenticate contract.\r\n    * @param _contractAddress address of ERC223 contract that need to authenticate.\r\n    * @return true if addContract execute successfully.\r\n    */\r\n    function addContract(address _contractAddress) onlyOwner withContract(_contractAddress) public returns (bool success){\r\n        if(!getAddress(_contractAddress)) contracts.push(_contractAddress);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev that return total number of authenticated contracts.\r\n    * @return total authenticated addresses.\r\n    */\r\n    function getAddresses() public view returns (uint){\r\n        return contracts.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"checkAddress\",\"type\":\"address\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Authenticity","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff0d1d8d7d3599de7cf9a762feaf837e9bc17209","Library":"","SwarmSource":"bzzr://79a3ed78dea120e3dd79ef1961feccfa32b6aaa3ee53c65c5f0738ee4f9d7db8"}]}