{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/**\r\n *\tLottery 5 of 36 (Weekly)\r\n */\r\n \r\ncontract SmartLotto {\r\n    \r\n\t// For safe math operations\r\n    using SafeMath for uint;\r\n    \r\n    uint private constant DAY_IN_SECONDS = 86400;\r\n\t\r\n\t// Member struct\r\n\tstruct Member {\r\n\t\taddress payable addr;\t\t\t\t\t\t// Address\r\n\t\tuint ticket;\t\t\t\t\t\t\t\t// Ticket number\r\n\t\tuint8[5] numbers;                           // Selected numbers\r\n\t\tuint8 matchNumbers;                         // Match numbers\r\n\t\tuint prize;                                 // Winning prize\r\n\t}\r\n\t\r\n\t\r\n\t// Game struct\r\n\tstruct Game {\r\n\t\tuint datetime;\t\t\t\t\t\t\t\t// Game timestamp\r\n\t\tuint8[5] win_numbers;\t\t\t\t\t\t// Winning numbers\r\n\t\tuint membersCounter;\t\t\t\t\t\t// Members count\r\n\t\tuint totalFund;                             // Total prize fund\r\n\t\tuint8 status;                               // Game status: 0 - created, 1 - pleyed\r\n\t\tmapping(uint => Member) members;\t\t    // Members list\r\n\t}\r\n\t\r\n\tmapping(uint => Game) public games;\r\n\t\r\n\tuint private CONTRACT_STARTED_DATE = 0;\r\n\tuint private constant TICKET_PRICE = 0.01 ether;\r\n\tuint private constant MAX_NUMBER = 36;\t\t\t\t\t\t            // Максимально возможное число -> 36\r\n\t\r\n\tuint private constant PERCENT_FUND_JACKPOT = 15;                        // (%) Increase Jackpot\r\n\tuint private constant PERCENT_FUND_4 = 35;                              // (%) Fund 4 of 5\r\n\tuint private constant PERCENT_FUND_3 = 30;                              // (%) Fund 3 of 5\r\n    uint private constant PERCENT_FUND_2 = 20;                              // (%) Fund 2 of 5\r\n    \r\n\tuint public JACKPOT = 0;\r\n\t\r\n\t// Init params\r\n\tuint public GAME_NUM = 0;\r\n\tuint private constant return_jackpot_period = 25 weeks;\r\n\tuint private start_jackpot_amount = 0;\r\n\t\r\n\tuint private constant PERCENT_FUND_PR = 12;                             // (%) PR & ADV\r\n\tuint private FUND_PR = 0;                                               // Fund PR & ADV\r\n\r\n\t// Addresses\r\n\taddress payable private constant ADDRESS_SERVICE = 0xa01d5284C84C0e1Db294C3690Eb49234dE775e78;\r\n\taddress payable private constant ADDRESS_START_JACKPOT = 0xa42b3D62471E3e9Cc502d3ef65857deb04032613;\r\n\taddress payable private constant ADDRESS_PR = 0x173Ff9be87F1D282B7377d443Aa5C12842266BD3;\r\n\t\r\n\t// Events\r\n\tevent NewMember(uint _gamenum, uint _ticket, address _addr, uint8 _n1, uint8 _n2, uint8 _n3, uint8 _n4, uint8 _n5);\r\n\tevent NewGame(uint _gamenum);\r\n\tevent UpdateFund(uint _fund);\r\n\tevent UpdateJackpot(uint _jackpot);\r\n\tevent WinNumbers(uint _gamenum, uint8 _n1, uint8 _n2, uint8 _n3, uint8 _n4, uint8 _n5);\r\n\tevent WinPrize(uint _gamenum, uint _ticket, uint _prize, uint8 _match);\r\n\r\n\t// Entry point\r\n\tfunction() external payable {\r\n\t    \r\n        // Select action\r\n\t\tif(msg.sender == ADDRESS_START_JACKPOT) {\r\n\t\t\tprocessStartingJackpot();\r\n\t\t} else {\r\n\t\t\tif(msg.sender == ADDRESS_SERVICE) {\r\n\t\t\t\tstartGame();\r\n\t\t\t} else {\r\n\t\t\t\tprocessUserTicket();\r\n\t\t\t}\r\n\t\t}\r\n\r\n    }\r\n\t\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// Starting Jackpot action\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\tfunction processStartingJackpot() private {\r\n\t\t// If value > 0, increase starting Jackpot\r\n\t\tif(msg.value > 0) {\r\n\t\t\tJACKPOT += msg.value;\r\n\t\t\tstart_jackpot_amount += msg.value;\r\n\t\t\temit UpdateJackpot(JACKPOT);\r\n\t\t// Else, return starting Jackpot\r\n\t\t} else {\r\n\t\t\tif(start_jackpot_amount > 0){\r\n\t\t\t\t_returnStartJackpot();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Return starting Jackpot after 6 months\r\n\tfunction _returnStartJackpot() private { \r\n\t\t\r\n\t\tif(JACKPOT > start_jackpot_amount * 2 || (now - CONTRACT_STARTED_DATE) > return_jackpot_period) {\r\n\t\t\t\r\n\t\t\tif(JACKPOT > start_jackpot_amount) {\r\n\t\t\t\tADDRESS_START_JACKPOT.transfer(start_jackpot_amount);\r\n\t\t\t\tJACKPOT = JACKPOT - start_jackpot_amount;\r\n\t\t\t\tstart_jackpot_amount = 0;\r\n\t\t\t} else {\r\n\t\t\t\tADDRESS_START_JACKPOT.transfer(JACKPOT);\r\n\t\t\t\tstart_jackpot_amount = 0;\r\n\t\t\t\tJACKPOT = 0;\r\n\t\t\t}\r\n\t\t\temit UpdateJackpot(JACKPOT);\r\n\t\t\t\r\n\t\t} \r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// Running a Game\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\tfunction startGame() private {\r\n\t    \r\n\t    uint8 weekday = getWeekday(now);\r\n\t\tuint8 hour = getHour(now);\r\n\t    \r\n\t\tif(GAME_NUM == 0) {\r\n\t\t    GAME_NUM = 1;\r\n\t\t    games[GAME_NUM].datetime = now;\r\n\t\t    games[GAME_NUM].status = 1;\r\n\t\t    CONTRACT_STARTED_DATE = now;\r\n\t\t} else {\r\n\t\t    if(weekday == 7 && hour == 9) {\r\n\r\n\t\t        if(games[GAME_NUM].status == 1) {\r\n\t\t            processGame();\r\n\t\t        }\r\n\r\n\t\t    } else {\r\n\t\t        games[GAME_NUM].status = 1;\r\n\t\t    }\r\n\t\t    \r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tfunction processGame() private {\r\n\t    \r\n\t    uint8 mn = 0;\r\n\t\tuint winners5 = 0;\r\n\t\tuint winners4 = 0;\r\n\t\tuint winners3 = 0;\r\n\t\tuint winners2 = 0;\r\n\r\n\t\tuint fund4 = 0;\r\n\t\tuint fund3 = 0;\r\n\t\tuint fund2 = 0;\r\n\t    \r\n\t    // Generate winning numbers\r\n\t    for(uint8 i = 0; i < 5; i++) {\r\n\t        games[GAME_NUM].win_numbers[i] = random(i);\r\n\t    }\r\n\r\n\t    // Sort winning numbers array\r\n\t    games[GAME_NUM].win_numbers = sortNumbers(games[GAME_NUM].win_numbers);\r\n\t    \r\n\t    // Change dublicate numbers\r\n\t    for(uint8 i = 0; i < 4; i++) {\r\n\t        for(uint8 j = i+1; j < 5; j++) {\r\n\t            if(games[GAME_NUM].win_numbers[i] == games[GAME_NUM].win_numbers[j]) {\r\n\t                games[GAME_NUM].win_numbers[j]++;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    uint8[5] memory win_numbers;\r\n\t    win_numbers = games[GAME_NUM].win_numbers;\r\n\t    emit WinNumbers(GAME_NUM, win_numbers[0], win_numbers[1], win_numbers[2], win_numbers[3], win_numbers[4]);\r\n\t    \r\n\t    if(games[GAME_NUM].membersCounter > 0) {\r\n\t    \r\n\t        // Pocess tickets list\r\n\t        for(uint i = 1; i <= games[GAME_NUM].membersCounter; i++) {\r\n\t            \r\n\t            mn = findMatch(games[GAME_NUM].win_numbers, games[GAME_NUM].members[i].numbers);\r\n\t\t\t\tgames[GAME_NUM].members[i].matchNumbers = mn;\r\n\t\t\t\t\r\n\t\t\t\tif(mn == 5) {\r\n\t\t\t\t\twinners5++;\r\n\t\t\t\t}\r\n\t\t\t\tif(mn == 4) {\r\n\t\t\t\t\twinners4++;\r\n\t\t\t\t}\r\n\t\t\t\tif(mn == 3) {\r\n\t\t\t\t\twinners3++;\r\n\t\t\t\t}\r\n\t\t\t\tif(mn == 2) {\r\n\t\t\t\t\twinners2++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t        }\r\n\t        \r\n\t        // Fund calculate\r\n\t        JACKPOT = JACKPOT + games[GAME_NUM].totalFund * PERCENT_FUND_JACKPOT / 100;\r\n\t\t\tfund4 = games[GAME_NUM].totalFund * PERCENT_FUND_4 / 100;\r\n\t\t\tfund3 = games[GAME_NUM].totalFund * PERCENT_FUND_3 / 100;\r\n\t\t\tfund2 = games[GAME_NUM].totalFund * PERCENT_FUND_2 / 100;\r\n\t\t\t\r\n\t\t\tif(winners4 == 0) {\r\n\t\t\t    JACKPOT = JACKPOT + fund4;\r\n\t\t\t}\r\n\t\t\tif(winners3 == 0) {\r\n\t\t\t    JACKPOT = JACKPOT + fund3;\r\n\t\t\t}\r\n\t\t\tif(winners2 == 0) {\r\n\t\t\t    JACKPOT = JACKPOT + fund2;\r\n\t\t\t}\r\n            \r\n\t\t\tfor(uint i = 1; i <= games[GAME_NUM].membersCounter; i++) {\r\n\t\t\t    \r\n\t\t\t    if(games[GAME_NUM].members[i].matchNumbers == 5) {\r\n\t\t\t        games[GAME_NUM].members[i].prize = JACKPOT / winners5;\r\n\t\t\t        games[GAME_NUM].members[i].addr.transfer(games[GAME_NUM].members[i].prize);\r\n\t\t\t        emit WinPrize(GAME_NUM, games[GAME_NUM].members[i].ticket, games[GAME_NUM].members[i].prize, 5);\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    if(games[GAME_NUM].members[i].matchNumbers == 4) {\r\n\t\t\t        games[GAME_NUM].members[i].prize = fund4 / winners4;\r\n\t\t\t        games[GAME_NUM].members[i].addr.transfer(games[GAME_NUM].members[i].prize);\r\n\t\t\t        emit WinPrize(GAME_NUM, games[GAME_NUM].members[i].ticket, games[GAME_NUM].members[i].prize, 4);\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    if(games[GAME_NUM].members[i].matchNumbers == 3) {\r\n\t\t\t        games[GAME_NUM].members[i].prize = fund3 / winners3;\r\n\t\t\t        games[GAME_NUM].members[i].addr.transfer(games[GAME_NUM].members[i].prize);\r\n\t\t\t        emit WinPrize(GAME_NUM, games[GAME_NUM].members[i].ticket, games[GAME_NUM].members[i].prize, 3);\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    if(games[GAME_NUM].members[i].matchNumbers == 2) {\r\n\t\t\t        games[GAME_NUM].members[i].prize = fund2 / winners2;\r\n\t\t\t        games[GAME_NUM].members[i].addr.transfer(games[GAME_NUM].members[i].prize);\r\n\t\t\t        emit WinPrize(GAME_NUM, games[GAME_NUM].members[i].ticket, games[GAME_NUM].members[i].prize, 2);\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    if(games[GAME_NUM].members[i].matchNumbers == 1) {\r\n\t\t\t        emit WinPrize(GAME_NUM, games[GAME_NUM].members[i].ticket, games[GAME_NUM].members[i].prize, 1);\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If exist Jackpot winners, init JACPOT\r\n\t\t\tif(winners5 != 0) {\r\n\t\t\t    JACKPOT = 0;\r\n\t\t\t    start_jackpot_amount = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t    }\r\n\t    \r\n\t    emit UpdateJackpot(JACKPOT);\r\n\t    \r\n\t    // Init next Game\r\n\t    GAME_NUM++;\r\n\t    games[GAME_NUM].datetime = now;\r\n\t    games[GAME_NUM].status = 0;\r\n\t    emit NewGame(GAME_NUM);\r\n\t    \r\n\t    // Transfer\r\n\t    ADDRESS_PR.transfer(FUND_PR);\r\n\t    FUND_PR = 0;\r\n\r\n\t}\r\n\t\r\n\t// Find match numbers function\r\n\tfunction findMatch(uint8[5] memory arr1, uint8[5] memory arr2) private pure returns (uint8) {\r\n\t    \r\n\t    uint8 cnt = 0;\r\n\t    \r\n\t    for(uint8 i = 0; i < 5; i++) {\r\n\t        for(uint8 j = 0; j < 5; j++) {\r\n\t            if(arr1[i] == arr2[j]) {\r\n\t                cnt++;\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    return cnt;\r\n\r\n\t}\r\n\t\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// Buy ticket process\r\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\tfunction processUserTicket() private {\r\n\t\t\r\n\t\tuint8 weekday = getWeekday(now);\r\n\t\tuint8 hour = getHour(now);\r\n\t\t\r\n\t\tif( GAME_NUM > 0 && (weekday != 7 || (weekday == 7 && (hour < 8 || hour > 11 ))) ) {\r\n\r\n\t\t    if(msg.value == TICKET_PRICE) {\r\n\t\t\t    createTicket();\r\n\t\t    } else {\r\n\t\t\t    if(msg.value < TICKET_PRICE) {\r\n\t\t\t\t    FUND_PR = FUND_PR + msg.value.mul(PERCENT_FUND_PR).div(100);\r\n\t\t\t\t    games[GAME_NUM].totalFund = games[GAME_NUM].totalFund + msg.value.mul(100 - PERCENT_FUND_PR).div(100);\r\n\t\t\t\t    emit UpdateFund(games[GAME_NUM].totalFund);\r\n\t\t\t    } else {\r\n\t\t\t\t    msg.sender.transfer(msg.value.sub(TICKET_PRICE));\r\n\t\t\t\t    createTicket();\r\n\t\t\t    }\r\n\t\t    }\r\n\t\t\r\n\t\t} else {\r\n\t\t     msg.sender.transfer(msg.value);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction createTicket() private {\r\n\t\t\r\n\t\tbool err = false;\r\n\t\tuint8[5] memory numbers;\r\n\t\t\r\n\t\t// Calculate funds\r\n\t\tFUND_PR = FUND_PR + TICKET_PRICE.mul(PERCENT_FUND_PR).div(100);\r\n\t\tgames[GAME_NUM].totalFund = games[GAME_NUM].totalFund + TICKET_PRICE.mul(100 - PERCENT_FUND_PR).div(100);\r\n\t\temit UpdateFund(games[GAME_NUM].totalFund);\r\n\t\t\r\n\t\t// Parse and check msg.DATA\r\n\t\t(err, numbers) = ParseCheckData();\r\n\t\t\r\n\t\tuint mbrCnt;\r\n\r\n\t\t// If no errors, sort numbers array and save member\r\n\t\tif(!err) {\r\n\t\t    numbers = sortNumbers(numbers);\r\n\r\n\t\t    // Increase member counter\r\n\t\t    games[GAME_NUM].membersCounter++;\r\n\t\t    mbrCnt = games[GAME_NUM].membersCounter;\r\n\r\n\t\t    // Save member\r\n\t\t    games[GAME_NUM].members[mbrCnt].addr = msg.sender;\r\n\t\t    games[GAME_NUM].members[mbrCnt].ticket = mbrCnt;\r\n\t\t    games[GAME_NUM].members[mbrCnt].numbers = numbers;\r\n\t\t    games[GAME_NUM].members[mbrCnt].matchNumbers = 0;\r\n\t\t    \r\n\t\t    emit NewMember(GAME_NUM, mbrCnt, msg.sender, numbers[0], numbers[1], numbers[2], numbers[3], numbers[4]);\r\n\t\t    \r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t\r\n\t// Parse and check msg.DATA function\r\n\tfunction ParseCheckData() private view returns (bool, uint8[5] memory) {\r\n\t    \r\n\t    bool err = false;\r\n\t    uint8[5] memory numbers;\r\n\t    \r\n\t    // Check 5 numbers entered\r\n\t    if(msg.data.length == 5) {\r\n\t        \r\n\t        // Parse DATA string\r\n\t\t    for(uint8 i = 0; i < msg.data.length; i++) {\r\n\t\t        numbers[i] = uint8(msg.data[i]);\r\n\t\t    }\r\n\t\t    \r\n\t\t    // Check range: 1 - MAX_NUMBER\r\n\t\t    for(uint8 i = 0; i < numbers.length; i++) {\r\n\t\t        if(numbers[i] < 1 || numbers[i] > MAX_NUMBER) {\r\n\t\t            err = true;\r\n\t\t            break;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    \r\n\t\t    // Check dublicate numbers\r\n\t\t    if(!err) {\r\n\t\t    \r\n\t\t        for(uint8 i = 0; i < numbers.length-1; i++) {\r\n\t\t            for(uint8 j = i+1; j < numbers.length; j++) {\r\n\t\t                if(numbers[i] == numbers[j]) {\r\n\t\t                    err = true;\r\n\t\t                    break;\r\n\t\t                }\r\n\t\t            }\r\n\t\t            if(err) {\r\n\t\t                break;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        \r\n\t\t    }\r\n\t\t    \r\n\t    } else {\r\n\t        err = true;\r\n\t    }\r\n\r\n\t    return (err, numbers);\r\n\r\n\t}\r\n\t\r\n\t// Sort array of number function\r\n\tfunction sortNumbers(uint8[5] memory arrNumbers) private pure returns (uint8[5] memory) {\r\n\t    \r\n\t    uint8 temp;\r\n\t    \r\n\t    for(uint8 i = 0; i < arrNumbers.length - 1; i++) {\r\n            for(uint j = 0; j < arrNumbers.length - i - 1; j++)\r\n                if (arrNumbers[j] > arrNumbers[j + 1]) {\r\n                    temp = arrNumbers[j];\r\n                    arrNumbers[j] = arrNumbers[j + 1];\r\n                    arrNumbers[j + 1] = temp;\r\n                }    \r\n\t    }\r\n        \r\n        return arrNumbers;\r\n        \r\n\t}\r\n\t\r\n\t// Contract address balance\r\n    function getBalance() public view returns(uint) {\r\n        uint balance = address(this).balance;\r\n\t\treturn balance;\r\n\t}\r\n\t\r\n\t// Generate random number\r\n\tfunction random(uint8 num) internal view returns (uint8) {\r\n\t    \r\n        return uint8(uint(blockhash(block.number - 1 - num*2)) % MAX_NUMBER + 1);\r\n        \r\n    } \r\n    \r\n    function getHour(uint timestamp) private pure returns (uint8) {\r\n        return uint8((timestamp / 60 / 60) % 24);\r\n    }\r\n    \r\n    function getWeekday(uint timestamp) private pure returns (uint8) {\r\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n    }\r\n\t\r\n\t\r\n\t// API\r\n\t\r\n\t// i - Game number\r\n\tfunction getGameInfo(uint i) public view returns (uint, uint, uint, uint8, uint8, uint8, uint8, uint8, uint8) {\r\n\t    Game memory game = games[i];\r\n\t    return (game.datetime, game.totalFund, game.membersCounter, game.win_numbers[0], game.win_numbers[1], game.win_numbers[2], game.win_numbers[3], game.win_numbers[4], game.status);\r\n\t}\r\n\t\r\n\t// i - Game number, j - Ticket number\r\n\tfunction getMemberInfo(uint i, uint j) public view returns (address, uint, uint8, uint8, uint8, uint8, uint8, uint8, uint) {\r\n\t    Member memory mbr = games[i].members[j];\r\n\t    return (mbr.addr, mbr.ticket, mbr.matchNumbers, mbr.numbers[0], mbr.numbers[1], mbr.numbers[2], mbr.numbers[3], mbr.numbers[4], mbr.prize);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"membersCounter\",\"type\":\"uint256\"},{\"name\":\"totalFund\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"getMemberInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_NUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ticket\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_n1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n5\",\"type\":\"uint8\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fund\",\"type\":\"uint256\"}],\"name\":\"UpdateFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_jackpot\",\"type\":\"uint256\"}],\"name\":\"UpdateJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_n1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n5\",\"type\":\"uint8\"}],\"name\":\"WinNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ticket\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_match\",\"type\":\"uint8\"}],\"name\":\"WinPrize\",\"type\":\"event\"}]","ContractName":"SmartLotto","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f7309cb7935437524ec0746ea019bcda6554978de3f83930a260c43ace3a7b7"}]}