{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title DappRegistry\r\n * @dev Registry of dapp contracts and methods that have been authorised by Argent. \r\n * Registered methods can be authorised immediately for a dapp key and a wallet while \r\n * the authoirsation of unregistered methods is delayed for 24 hours. \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract DappRegistry is Owned {\r\n\r\n    // [contract][signature][bool]\r\n    mapping (address => mapping (bytes4 => bool)) internal authorised;\r\n\r\n    event Registered(address indexed _contract, bytes4[] _methods);\r\n    event Deregistered(address indexed _contract, bytes4[] _methods);\r\n\r\n    /**\r\n     * @dev Registers a list of methods for a dapp contract.\r\n     * @param _contract The dapp contract.\r\n     * @param _methods The dapp methods.\r\n     */\r\n    function register(address _contract, bytes4[] _methods) external onlyOwner {\r\n        for(uint i = 0; i < _methods.length; i++) {\r\n            authorised[_contract][_methods[i]] = true;\r\n        }\r\n        emit Registered(_contract, _methods);\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters a list of methods for a dapp contract.\r\n     * @param _contract The dapp contract.\r\n     * @param _methods The dapp methods.\r\n     */\r\n    function deregister(address _contract, bytes4[] _methods) external onlyOwner {\r\n        for(uint i = 0; i < _methods.length; i++) {\r\n            authorised[_contract][_methods[i]] = false;\r\n        }\r\n        emit Deregistered(_contract, _methods);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a list of methods are registered for a dapp contract.\r\n     * @param _contract The dapp contract.\r\n     * @param _method The dapp methods.\r\n     * @return true if all the methods are registered.\r\n     */\r\n    function isRegistered(address _contract, bytes4 _method) external view returns (bool) {\r\n        return authorised[_contract][_method];\r\n    }  \r\n\r\n    /**\r\n     * @dev Checks if a list of methods are registered for a dapp contract.\r\n     * @param _contract The dapp contract.\r\n     * @param _methods The dapp methods.\r\n     * @return true if all the methods are registered.\r\n     */\r\n    function isRegistered(address _contract, bytes4[] _methods) external view returns (bool) {\r\n        for(uint i = 0; i < _methods.length; i++) {\r\n            if (!authorised[_contract][_methods[i]]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_methods\",\"type\":\"bytes4[]\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_methods\",\"type\":\"bytes4[]\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_methods\",\"type\":\"bytes4[]\"}],\"name\":\"deregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_methods\",\"type\":\"bytes4[]\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_methods\",\"type\":\"bytes4[]\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"DappRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://830f33e8450f7103a6665f458958e56a7be6a5ab3d8c5114af1aed5f7f2e1e09"}]}