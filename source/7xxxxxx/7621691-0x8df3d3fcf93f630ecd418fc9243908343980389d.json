{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\ncontract Bussiness is Ownable {\r\n    address public ceoAddress = address(0x6c3e879bdd20e9686cfd9bbd1bfd4b2dd6d47079);\r\n  IERC721 public erc721Address = IERC721(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);\r\n  ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdac17f958d2ee523a2206206994597c13d831ec7);\r\n  uint256 public ETHFee = 2;\r\n  uint256 public HBWALLETFee = 1;\r\n  constructor() public {}\r\n  struct Price {\r\n    address tokenOwner;\r\n    uint256 price;\r\n    uint256 fee;\r\n  }\r\n\r\n  mapping(uint256 => Price) public prices;\r\n  mapping(uint256 => Price) public usdtPrices;\r\n  \r\n  /**\r\n   * @dev Throws if called by any account other than the ceo address.\r\n   */\r\n  modifier onlyCeoAddress() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n  function ownerOf(uint256 _tokenId) public view returns (address){\r\n      return erc721Address.ownerOf(_tokenId);\r\n  }\r\n  function balanceOf() public view returns (uint256){\r\n      return address(this).balance;\r\n  }\r\n  function getApproved(uint256 _tokenId) public view returns (address){\r\n      return erc721Address.getApproved(_tokenId);\r\n  }\r\n  \r\n  function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _usdtPrice) public {\r\n      require(erc721Address.ownerOf(_tokenId) == msg.sender);\r\n      prices[_tokenId] = Price(msg.sender, _ethPrice, 0);\r\n      usdtPrices[_tokenId] = Price(msg.sender, _usdtPrice, 0);\r\n  }\r\n  function setPriceFeeEth(uint256 _tokenId, uint256 _ethPrice) public payable {\r\n      require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\r\n      uint256 ethfee;\r\n      if(prices[_tokenId].price < _ethPrice) {\r\n          ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / 100;\r\n          require(msg.value == ethfee);\r\n          ethfee += prices[_tokenId].fee;\r\n      } else ethfee = _ethPrice * ETHFee / 100;\r\n      prices[_tokenId] = Price(msg.sender, _ethPrice, ethfee);\r\n  }\r\n  function removePrice(uint256 tokenId) public returns (uint256){\r\n      require(erc721Address.ownerOf(tokenId) == msg.sender);\r\n      if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);\r\n      resetPrice(tokenId);\r\n      return prices[tokenId].price;\r\n  }\r\n\r\n  function getPrice(uint256 tokenId) public view returns (address, address, uint256, uint256){\r\n      address currentOwner = erc721Address.ownerOf(tokenId);\r\n      if(prices[tokenId].tokenOwner != currentOwner){\r\n           resetPrice(tokenId);\r\n       }\r\n      return (currentOwner, prices[tokenId].tokenOwner, prices[tokenId].price, usdtPrices[tokenId].price);\r\n\r\n  }\r\n\r\n  function setFee(uint256 _ethFee, uint256 _hbWalletFee) public view onlyOwner returns (uint256 _ETHFee, uint256 _HBWALLETFee){\r\n        require(_ethFee > 0 && _hbWalletFee > 0);\r\n        _ETHFee = _ethFee;\r\n        _HBWALLETFee = _hbWalletFee;\r\n        return (_ETHFee, _HBWALLETFee);\r\n    }\r\n  /**\r\n   * @dev Withdraw the amount of eth that is remaining in this contract.\r\n   * @param _address The address of EOA that can receive token from this contract.\r\n   */\r\n    function withdraw(address _address, uint256 amount) public onlyCeoAddress {\r\n        require(_address != address(0) && amount > 0 && address(this).balance > amount);\r\n        _address.transfer(amount);\r\n    }\r\n\r\n  function buy(uint256 tokenId) public payable {\r\n    require(getApproved(tokenId) == address(this));\r\n    require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\r\n    erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\r\n    prices[tokenId].tokenOwner.transfer(msg.value);\r\n    resetPrice(tokenId);\r\n  }\r\n  function buyWithoutCheckApproved(uint256 tokenId) public payable {\r\n    require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\r\n    erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\r\n    prices[tokenId].tokenOwner.transfer(msg.value);\r\n    resetPrice(tokenId);\r\n  }\r\n  function buyByUsdt(uint256 tokenId) public {\r\n    require(usdtPrices[tokenId].price > 0 && erc721Address.getApproved(tokenId) == address(this));\r\n    require(usdtToken.transferFrom(msg.sender, usdtPrices[tokenId].tokenOwner, usdtPrices[tokenId].price));\r\n\r\n    erc721Address.transferFrom(usdtPrices[tokenId].tokenOwner, msg.sender, tokenId);\r\n    resetPrice(tokenId);\r\n\r\n  }\r\n  function resetPrice(uint256 tokenId) private {\r\n    prices[tokenId] = Price(address(0), 0, 0);\r\n    usdtPrices[tokenId] = Price(address(0), 0, 0);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HBWALLETFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"name\":\"_hbWalletFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"_ETHFee\",\"type\":\"uint256\"},{\"name\":\"_HBWALLETFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyByUsdt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceFeeEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyWithoutCheckApproved\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_usdtPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdtPrices\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bussiness","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://080d679b19766b5133b9661cb4bf93147d9f3156896bb4b76a5e0d5d29757e3f"}]}