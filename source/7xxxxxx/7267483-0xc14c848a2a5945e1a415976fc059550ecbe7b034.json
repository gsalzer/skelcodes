{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract Line {\r\n\r\n    address private owner;\r\n\r\n    uint constant public jackpotNumerator = 50;\r\n    uint constant public winNumerator = 5;\r\n    uint constant public giftNumerator = 1;\r\n    uint constant public denominator = 100;\r\n    uint constant public ownerDenominator = 100;\r\n\r\n    uint public jackpot = 0;\r\n\r\n    address[] internal addresses;\r\n    mapping(address => SpinRec) internal spinsByAddr;\r\n    mapping(bytes32 => SpinRec) internal spinsByQuery;\r\n\r\n    struct SpinRec {\r\n        uint id;\r\n        bytes32 queryId;\r\n        uint bet;\r\n        uint token;\r\n    }\r\n\r\n    event Jackpot(uint line, address addr, uint date, uint prize, uint left);\r\n    event Win(uint line, address addr, uint date, uint prize, uint left);\r\n    event Gift(uint line, address addr, uint date, uint prize, uint left);\r\n    \r\n    event Spin(address addr, uint bet, uint jackpot, bytes32 queryId);\r\n    event Reveal(uint line, address addr, uint bet, bytes32 queryId);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getQueryId() constant public returns (uint256) {\r\n        return uint256(spinsByAddr[msg.sender].queryId);\r\n    }\r\n\r\n    function getTokenFor(uint256 queryId) constant public returns (uint) {\r\n        return spinsByQuery[bytes32(queryId)].token;\r\n    }\r\n\r\n    function getToken() constant public returns (uint) {\r\n        return spinsByAddr[msg.sender].token;\r\n    }\r\n\r\n    function getQueryIdBytes() constant public returns (bytes32) {\r\n        return spinsByAddr[msg.sender].queryId;\r\n    }\r\n\r\n    function getTokenForBytes(bytes32 queryId) constant public returns (uint) {\r\n        return spinsByQuery[queryId].token;\r\n    }\r\n\r\n    function revealResult(uint token, bytes32 queryId) internal {\r\n\r\n        SpinRec storage spin = spinsByQuery[queryId];\r\n\r\n        require(spin.id != 0);\r\n\r\n        spin.token = token;\r\n        address player = addresses[spin.id];\r\n        spinsByAddr[player].token = token;\r\n\r\n        emit Reveal(token, player, spin.bet, queryId);\r\n\r\n        uint prizeNumerator = 0;\r\n\r\n        if (token == 444) {\r\n            prizeNumerator = jackpotNumerator;\r\n        } else if (token == 333 || token == 222 || token == 111) {\r\n            prizeNumerator = winNumerator;\r\n        } else if (token%10 == 4 || token/10%10 == 4 || token/100%10 == 4) {\r\n            prizeNumerator = giftNumerator;\r\n        }\r\n\r\n        uint balance = address(this).balance;\r\n        uint prize = 0;\r\n        if (prizeNumerator > 0) {\r\n            prize =  balance / 100 * prizeNumerator;\r\n            if (player.send(prize)) {\r\n                if (prizeNumerator == jackpotNumerator) {\r\n                    emit Jackpot(token, player, now, prize, balance);\r\n                } else if (prizeNumerator == winNumerator) {\r\n                    emit Win(token, player, now, prize, balance);\r\n                } else {\r\n                    emit Gift(token, player, now, prize, balance);\r\n                }\r\n                owner.transfer(spin.bet / ownerDenominator);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function recordSpin(bytes32 queryId) internal {\r\n        \r\n        SpinRec storage spin = spinsByAddr[msg.sender];\r\n\r\n        if (spin.id == 0) {\r\n\r\n            msg.sender.transfer(0 wei); \r\n\r\n            spin.id = addresses.length;\r\n            addresses.push(msg.sender);\r\n        }\r\n\r\n        spin.bet = msg.value;\r\n        spin.queryId = queryId;\r\n        spinsByQuery[queryId] = spin;\r\n    }\r\n    \r\n    constructor() public {\r\n        \r\n        delete addresses;\r\n        addresses.length = 1;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function waiver() private {\r\n        \r\n        delete owner;\r\n    }\r\n    \r\n    function reset() onlyOwner public {\r\n        \r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    uint nonce;\r\n\r\n    function random() internal returns (uint) {\r\n\r\n        bytes32 output = keccak256(abi.encodePacked(now, msg.sender, nonce));\r\n\r\n        uint rand = uint256(output) % 1024;\r\n        nonce++;\r\n        return rand;\r\n    }\r\n\r\n    function() payable public {\r\n        \r\n        require(msg.value > 10);\r\n        jackpot += msg.value;\r\n\r\n        uint rand = random();\r\n        bytes32 queryId = bytes32(nonce);\r\n\r\n        recordSpin(queryId);\r\n\r\n        emit Spin(msg.sender, msg.value, jackpot, queryId);\r\n\r\n        revealResult(rand%345+100, queryId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"getTokenForBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"queryId\",\"type\":\"uint256\"}],\"name\":\"getTokenFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giftNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueryIdBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Gift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"Spin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"Reveal\",\"type\":\"event\"}]","ContractName":"Line","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32b794e269ba0c81ade0450f9aea9373def0dff7950b6254f1cd2d2eba09b4ec"}]}