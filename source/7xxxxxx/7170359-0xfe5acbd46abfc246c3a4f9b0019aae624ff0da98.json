{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n/**\r\n* @title VSTER ICO Contract\r\n* @dev VSTER is an ERC-20 Standar Compliant Token\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    //mapping to user levels\r\n    mapping(address => uint8) public level;\r\n    //0 normal user\r\n    //1 basic admin\r\n    //2 master admin\r\n\r\n    /**\r\n    * @dev This contructor takes the msg.sender as the first master admin\r\n    */\r\n    constructor() internal {\r\n        level[msg.sender] = 2; //Set initial admin to contract creator\r\n        emit AdminshipUpdated(msg.sender,2); //Log the admin set\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(level[msg.sender] >= _level ); //It require the user level to be more or equal than _level\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function transfer the adminship of the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    */\r\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\r\n        require(_newAdmin != address(0)); //The new admin must not be zero address\r\n        level[_newAdmin] = _level; //New level is set\r\n        emit AdminshipUpdated(_newAdmin,_level); //Log the admin set\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\r\n\r\n}\r\n\r\ncontract VSTERICO is admined {\r\n\r\n    using SafeMath for uint256;\r\n    //This ico have these possible states\r\n    enum State {\r\n        PRESALE,\r\n        MAINSALE,\r\n        Successful\r\n    }\r\n    //Public variables\r\n\r\n    //Time-state Related\r\n    State public state = State.PRESALE; //Set initial stage\r\n    uint256 constant public PRESALEStart = 1548979200; //Human time (GMT): Friday, 1 February 2019 0:00:00\r\n    uint256 constant public MAINSALEStart = 1554163200; //Human time (GMT): Tuesday, 2 April 2019 0:00:00\r\n    uint256 constant public SaleDeadline = 1564531200; //Human time (GMT): Wednesday, 31 July 2019 0:00:00\r\n    uint256 public completedAt; //Set when ico finish\r\n    //Token-eth related\r\n    uint256 public totalRaised; //eth collected in wei\r\n    uint256 public totalRefDistributed; //total tokens distributed to referrals\r\n    uint256 public totalEthRefDistributed; //total eth distributed to specified referrals\r\n    uint256 public totalDistributed; //Sale tokens distributed\r\n    ERC20Basic public tokenReward = ERC20Basic(0xA2e13c4f0431B6f2B06BBE61a24B61CCBe13136A); //Token contract address\r\n    mapping(address => bool) referral; //Determine the referral type\r\n\r\n    //Contract details\r\n    address public creator; //Creator address\r\n    address public fundsWallet = 0x62e0b52F0a7AD4bB7b87Ce41e132bCBC7173EB96;\r\n    string public version = '0.2'; //Contract version\r\n\r\n    //Price related\r\n    uint256 public USDPriceInWei; // 0.1 cent (0.001$) in wei\r\n    string public USDPrice;\r\n\r\n    //events for log\r\n    event LogFundrisingInitialized(address indexed _creator);\r\n    event LogFundingReceived(address indexed _addr, uint _amount, uint _currentTotal, address _referral);\r\n    event LogBeneficiaryPaid(address indexed _beneficiaryAddress);\r\n    event LogContributorsPayout(address indexed _addr, uint _amount);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n\r\n    //Modifier to prevent execution if ico has ended or is holded\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _initialUSDInWei initial usd value on wei\r\n    */\r\n    constructor(uint _initialUSDInWei) public {\r\n\r\n        creator = msg.sender; //Creator is set from deployer address\r\n        USDPriceInWei = _initialUSDInWei;\r\n\r\n        emit LogFundrisingInitialized(creator); //Log contract initialization\r\n\r\n    }\r\n\r\n    function setReferralType(address _user, bool _type) onlyAdmin(1) public {\r\n      referral[_user] = _type;\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute(address _target, uint256 _value, address _reff) public notFinished payable {\r\n        require(now > PRESALEStart); //This time must be equal or greater than the start time\r\n\r\n        address user;\r\n        uint remaining;\r\n        uint256 tokenBought;\r\n        uint256 temp;\r\n        uint256 refBase;\r\n\r\n        //If the address is not zero the caller must be an admin\r\n        if(_target != address(0) && level[msg.sender] >= 1){\r\n          user = _target; //user is set by admin\r\n          remaining = _value.mul(1e18); //value contributed is set by admin\r\n          refBase = _value; //value for referral calc\r\n        } else { //If the address is zero or the caller is not an admin\r\n          user = msg.sender; //user is same as caller\r\n          remaining = msg.value.mul(1e18); //value is same as sent\r\n          refBase = msg.value; //value for referral calc\r\n        }\r\n\r\n        totalRaised = totalRaised.add(remaining.div(1e18)); //ether received updated\r\n\r\n        //Tokens bought calculation\r\n        while(remaining > 0){\r\n\r\n          (temp,remaining) = tokenBuyCalc(remaining);\r\n          tokenBought = tokenBought.add(temp);\r\n\r\n        }\r\n\r\n        temp = 0; //Clear temporal variable\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //Whole tokens sold updated\r\n\r\n        //Check for presale limit\r\n        if(state == State.PRESALE){\r\n          require(totalDistributed <= 5000000 * (10**18));\r\n        }\r\n\r\n        //Transfer tokens to user\r\n        tokenReward.transfer(user,tokenBought);\r\n\r\n        //Referral checks\r\n        if(_reff != address(0) && _reff != user){ //referral cannot be zero or self\r\n\r\n          //Check if referral receives eth or tokens\r\n          if(referral[_reff] == true){ //If eth\r\n            //Check current rate\r\n            if(state == State.PRESALE){//Presale Rate\r\n              //100%/10 = 10%\r\n              _reff.transfer(refBase.div(10));\r\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(10));\r\n\r\n            } else {//Mainsale rate\r\n              //100%/20= 5%\r\n              _reff.transfer(refBase.div(20));\r\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(20));\r\n\r\n            }\r\n          } else {//if tokens\r\n            //Check current rate\r\n            if(state == State.PRESALE){//Presale Rate\r\n              //100%/10 = 10%\r\n              tokenReward.transfer(_reff,tokenBought.div(10));\r\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(10));\r\n            } else {//Mainsale rate\r\n              //100%/20= 5%\r\n              tokenReward.transfer(_reff,tokenBought.div(20));\r\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(20));\r\n            }\r\n          }\r\n        }\r\n\r\n        emit LogFundingReceived(user, msg.value, totalRaised, _reff); //Log the purchase\r\n\r\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\r\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\r\n\r\n        checkIfFundingCompleteOrExpired(); //Execute state checks\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice tokenBought calculation function\r\n    * @param _value is the amount of eth multiplied by 1e18\r\n    */\r\n    function tokenBuyCalc(uint _value) internal view returns (uint sold,uint remaining) {\r\n\r\n      uint256 tempPrice = USDPriceInWei; //0.001$ in wei\r\n\r\n      //Determine state to set current price\r\n      if(state == State.PRESALE){ //Presale price\r\n\r\n            tempPrice = tempPrice.mul(400); //0.001$ * 400 = 0.4$\r\n            sold = _value.div(tempPrice); //here occurs decimal correction\r\n\r\n            return (sold,0);\r\n\r\n      } else { //state == State.MAINSALE - Mainsale price\r\n\r\n            tempPrice = tempPrice.mul(600); //0.001$ * 600 = 0.6$\r\n            sold = _value.div(tempPrice); //here occurs decimal correction\r\n\r\n            return (sold,0);\r\n\r\n        }\r\n}\r\n\r\n    /**\r\n    * @notice Process to check contract current status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if ( now > SaleDeadline && state != State.Successful){ //If deadline is reached and not yet successful\r\n\r\n            state = State.Successful; //ICO becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            successful(); //and execute closure\r\n\r\n        } else if(state == State.PRESALE && now >= MAINSALEStart ) {\r\n\r\n            state = State.MAINSALE; //We get on next stage\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice successful closure handler\r\n    */\r\n    function successful() public {\r\n        require(state == State.Successful); //When successful\r\n\r\n        uint256 temp = tokenReward.balanceOf(address(this)); //Remanent tokens handle\r\n\r\n        tokenReward.transfer(creator,temp); //Transfer remanent tokens\r\n        emit LogContributorsPayout(creator,temp); //Log transaction\r\n\r\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\r\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\r\n    }\r\n\r\n    /**\r\n    * @notice set usd price on wei\r\n    * @param _value wei value\r\n    */\r\n    function setPrice(uint _value, string _price) public onlyAdmin(2) {\r\n\r\n      USDPriceInWei = _value;\r\n      USDPrice = _price;\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    * @param _address Address of target token\r\n    */\r\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\r\n        require(state == State.Successful); //Only when sale finish\r\n\r\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev Direct payments handler\r\n    */\r\n    function () public payable {\r\n\r\n        //Forward to contribute function\r\n        //zero address, no custom value, no referral\r\n        contribute(address(0),0,address(0));\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALEStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRefDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"externalTokensRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reff\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setReferralType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"successful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"adminshipLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAINSALEStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialUSDInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFundrisingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminshipUpdated\",\"type\":\"event\"}]","ContractName":"VSTERICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000884cc27baf0","Library":"","SwarmSource":"bzzr://c7582822e626984cf991ae3d8cf73b3cf4f7e584f23f3eef74cd7029fd22ac90"}]}