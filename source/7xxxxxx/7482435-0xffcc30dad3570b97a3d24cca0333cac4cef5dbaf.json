{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface TubInterface {\r\n    function wipe(bytes32, uint) external;\r\n    function gov() external view returns (TokenInterface);\r\n    function sai() external view returns (TokenInterface);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function pep() external view returns (PepInterface);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\ninterface UniswapExchange {\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n        ) external returns (uint256  tokensSold);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract WipeProxy is DSMath {\r\n\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    function getUniswapMKRExchange() public pure returns (address ume) {\r\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\r\n    }\r\n\r\n    function getUniswapDAIExchange() public pure returns (address ude) {\r\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n    }\r\n\r\n    function wipe(\r\n        uint cdpNum,\r\n        uint _wad\r\n    ) public \r\n    {\r\n        require(_wad > 0, \"no-wipe-no-dai\");\r\n\r\n        TubInterface tub = TubInterface(getSaiTubAddress());\r\n        UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\r\n        UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\r\n        TokenInterface dai = tub.sai();\r\n        TokenInterface mkr = tub.gov();\r\n\r\n        bytes32 cup = bytes32(cdpNum);\r\n\r\n        setAllowance(dai, getSaiTubAddress());\r\n        setAllowance(mkr, getSaiTubAddress());\r\n        setAllowance(dai, getUniswapDAIExchange());\r\n\r\n        (bytes32 val, bool ok) = tub.pep().peek();\r\n\r\n        // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\r\n        uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\r\n\r\n        uint daiAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\r\n        daiAmt = add(_wad, daiAmt);\r\n        require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\r\n\r\n        if (ok && val != 0) {\r\n            daiEx.tokenToTokenSwapOutput(\r\n                mkrFee,\r\n                daiAmt,\r\n                uint(999000000000000000000),\r\n                uint(1899063809), // 6th March 2030 GMT // no logic\r\n                address(mkr)\r\n            );\r\n        }\r\n\r\n        tub.wipe(cup, _wad);\r\n    }\r\n\r\n    function setAllowance(TokenInterface token_, address spender_) private {\r\n        if (token_.allowance(address(this), spender_) != uint(-1)) {\r\n            token_.approve(spender_, uint(-1));\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapMKRExchange\",\"outputs\":[{\"name\":\"ume\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapDAIExchange\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"WipeProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1445d2ba7b9909198d4df2143c95d5e8f69754934af113f6230dc3ba90581136"}]}