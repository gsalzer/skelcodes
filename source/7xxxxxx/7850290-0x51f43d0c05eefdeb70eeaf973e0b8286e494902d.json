{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n   function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n}\r\n\r\ncontract ERC20Standard {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Exsender is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    function distributeForeignTokenWithUnifiedAmount(ERC20Standard _tokenContract, address[] calldata _addresses, uint256 _amount) external {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _tokenContract.transferFrom(msg.sender, _addresses[i], _amount);\r\n        }\r\n    }\r\n    \r\n    function distributeForeignTokenWithSplittedAmount(ERC20Standard _tokenContract, address[] calldata _addresses, uint256[] calldata _amounts) external {\r\n        require(_addresses.length == _amounts.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _tokenContract.transferFrom(msg.sender, _addresses[i], _amounts[i]);\r\n        }\r\n    }\r\n    \r\n    function distributeEtherWithUnifiedAmount(address payable[] calldata _addresses) payable external {\r\n        uint256 amount = msg.value.div(_addresses.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(amount);\r\n        }\r\n    }\r\n    \r\n    function distributeEtherWithSplittedAmount(address payable[] calldata _addresses, uint256[] calldata _amounts) payable external {\r\n        require(_addresses.length == _amounts.length);\r\n        require(msg.value >= sumArray(_amounts));\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(_amounts[i]);\r\n        }\r\n    }\r\n    \r\n    function liftTokensToSingleAddress(ERC20Standard[] calldata _tokenContract, address _receiver, uint256[] calldata _amounts) external {\r\n        for (uint256 i = 0; i < _tokenContract.length; i++) {\r\n            _tokenContract[i].transferFrom(msg.sender, _receiver, _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function liftTokensToMultipleAddresses(ERC20Standard[] calldata _tokenContract, address[] calldata _receiver, uint256[] calldata _amounts) external {\r\n        for (uint256 i = 0; i < _tokenContract.length; i++) {\r\n            _tokenContract[i].transferFrom(msg.sender, _receiver[i], _amounts[i]);\r\n        }\r\n    }\r\n    \r\n    function getForeignTokenBalance(ERC20Standard _tokenContract, address who) view public returns (uint256) {\r\n        return _tokenContract.balanceOf(who);\r\n    }\r\n        \r\n    function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\r\n        require(_amount <= address(this).balance);\r\n        emit TransferEther(address(this), _receiver, _amount);\r\n        _receiver.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawFund() onlyOwner public {\r\n        uint256 balance = address(this).balance;\r\n        owner.transfer(balance);\r\n    }\r\n    \r\n    function withdrawForeignTokens(ERC20Standard _tokenContract) onlyOwner public {\r\n        uint256 amount = _tokenContract.balanceOf(address(this));\r\n        _tokenContract.transfer(owner, amount);\r\n    }\r\n\r\n    function sumArray(uint256[] memory _array) public pure returns (uint256 sum_) {\r\n        sum_ = 0;\r\n        for (uint256 i = 0; i < _array.length; i++) {\r\n            sum_ += _array[i];\r\n        }\r\n    }\r\n    event TransferEther(address indexed _from, address indexed _to, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address[]\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"liftTokensToSingleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"sumArray\",\"outputs\":[{\"name\":\"sum_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getForeignTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeForeignTokenWithUnifiedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"distributeEtherWithUnifiedAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address[]\"},{\"name\":\"_receiver\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"liftTokensToMultipleAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeEtherWithSplittedAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeForeignTokenWithSplittedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exsender","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7a080881d05770204a4145082a631505e68a1afecc0a1e2b044f8d8dd77c986e"}]}