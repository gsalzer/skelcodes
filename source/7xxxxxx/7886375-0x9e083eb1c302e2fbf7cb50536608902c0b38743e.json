{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.4 <0.6.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t * @dev Multiplies two numbers, throws on overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Integer division of two numbers, truncating the quotient.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two numbers, throws on overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\ninterface INameTAOPosition {\r\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\r\n\tfunction getAdvocate(address _id) external view returns (address);\r\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\r\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\r\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\r\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface IAOSettingAttribute {\r\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external returns (bytes32, bytes32);\r\n\r\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory);\r\n\r\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\r\n\r\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external returns (bool);\r\n\r\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory);\r\n\r\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external returns (bool);\r\n\r\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external returns (bytes32, bytes32);\r\n\r\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address);\r\n\r\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\r\n\r\n\tfunction settingExist(uint256 _settingId) external view returns (bool);\r\n\r\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != address(0));\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title TAO\r\n */\r\ncontract TAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public vaultAddress;\r\n\tstring public name;\t\t\t\t// the name for this TAO\r\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\r\n\r\n\t// TAO's data\r\n\tstring public datHash;\r\n\tstring public database;\r\n\tstring public keyValue;\r\n\tbytes32 public contentId;\r\n\r\n\t/**\r\n\t * 0 = TAO\r\n\t * 1 = Name\r\n\t */\r\n\tuint8 public typeId;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _vaultAddress\r\n\t) public {\r\n\t\tname = _name;\r\n\t\toriginId = _originId;\r\n\t\tdatHash = _datHash;\r\n\t\tdatabase = _database;\r\n\t\tkeyValue = _keyValue;\r\n\t\tcontentId = _contentId;\r\n\r\n\t\t// Creating TAO\r\n\t\ttypeId = 0;\r\n\r\n\t\tvaultAddress = _vaultAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if calling address is Vault contract\r\n\t */\r\n\tmodifier onlyVault {\r\n\t\trequire (msg.sender == vaultAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Will receive any ETH sent\r\n\t */\r\n\tfunction () external payable {\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\t_recipient.transfer(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\r\n\t * @param _erc20TokenAddress The address of ERC20 Token\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\r\n\t\t_erc20.transfer(_recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Name\r\n */\r\ncontract Name is TAO {\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\r\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\r\n\t\t// Creating Name\r\n\t\ttypeId = 1;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOLibrary\r\n */\r\nlibrary AOLibrary {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\r\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given TAO ID is a TAO\r\n\t * @param _taoId The ID of the TAO\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isTAO(address _taoId) public view returns (bool) {\r\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given Name ID is a Name\r\n\t * @param _nameId The ID of the Name\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isName(address _nameId) public view returns (bool) {\r\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\r\n\t * @param _tokenAddress The ERC20 Token address to check\r\n\t */\r\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\r\n\t\tif (_tokenAddress == address(0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\r\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t * @param _sender The address to check\r\n\t * @param _theAO The AO address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t * @return true if yes, false otherwise\r\n\t */\r\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\r\n\t\treturn (_sender == _theAO ||\r\n\t\t\t(\r\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\r\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\r\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate percentage.\r\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\r\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\r\n\t */\r\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _PERCENTAGE_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate multiplier.\r\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\r\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\r\n\t */\r\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _MULTIPLIER_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _originId The Name ID the creates the TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployTAO(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (TAO _tao) {\r\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a Name\r\n\t * @param _name The name of the Name\r\n\t * @param _originId The eth address the creates the Name\r\n\t * @param _datHash The datHash of this Name\r\n\t * @param _database The database for this Name\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this Name\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployName(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (Name _myName) {\r\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\r\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\r\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\r\n\t * @return the new primordial weighted multiplier\r\n\t */\r\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\r\n\t\tif (_currentWeightedMultiplier > 0) {\r\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\r\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\r\n\t\t\treturn _totalWeightedIons.div(_totalIons);\r\n\t\t} else {\r\n\t\t\treturn _additionalWeightedMultiplier;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the primordial ion multiplier on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Multiplier = S\r\n\t *\t\tEnding Multiplier = E\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\r\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\r\n\t * @return The multiplier in (10 ** 6)\r\n\t */\r\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\r\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\r\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\r\n\t\t\t/**\r\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\r\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\r\n\t\t\t */\r\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus percentage of network ion on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Network Bonus Multiplier = Bs\r\n\t *\t\tEnding Network Bonus Multiplier = Be\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\r\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\r\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\r\n\t\t\t */\r\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\r\n\t\t\treturn bonusPercentage;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus amount of network ion on a given lot\r\n\t *\t\tAO Bonus Amount = B% x P\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\r\n\t\t/**\r\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\r\n\t\t * when calculating the network ion bonus amount\r\n\t\t */\r\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\r\n\t\treturn networkBonus;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the maximum amount of Primordial an account can burn\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_maximumMultiplier = S\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\tB = ((S x P) - (P x M)) / S\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _maximumMultiplier The maximum multiplier of this account\r\n\t * @return The maximum burn amount\r\n\t */\r\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\r\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after burning primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P - B)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToBurn The amount of primordial ion to burn\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToConvert = C\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P + C)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToConvert The amount of network ion to convert\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev count num of digits\r\n\t * @param number uint256 of the nuumber to be checked\r\n\t * @return uint8 num of digits\r\n\t */\r\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\r\n\t\tuint8 digits = 0;\r\n\t\twhile(number != 0) {\r\n\t\t\tnumber = number.div(10);\r\n\t\t\tdigits++;\r\n\t\t}\r\n\t\treturn digits;\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract TheAO {\r\n\taddress public theAO;\r\n\taddress public nameTAOPositionAddress;\r\n\r\n\t// Check whether an address is whitelisted and granted access to transact\r\n\t// on behalf of others\r\n\tmapping (address => bool) public whitelist;\r\n\r\n\tconstructor() public {\r\n\t\ttheAO = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if msg.sender is in whitelist.\r\n\t */\r\n\tmodifier inWhitelist() {\r\n\t\trequire (whitelist[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOSettingAttribute\r\n *\r\n * This contract stores all AO setting data/state\r\n */\r\ncontract AOSettingAttribute is TheAO, IAOSettingAttribute {\r\n\tINameTAOPosition internal _nameTAOPosition;\r\n\r\n\tstruct SettingData {\r\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\r\n\t\taddress creatorNameId;\t\t\t// The nameId that created the setting\r\n\t\taddress creatorTAOId;\t\t// The taoId that created the setting\r\n\t\taddress associatedTAOId;\t// The taoId that the setting affects\r\n\t\tstring settingName;\t\t\t\t// The human-readable name of the setting\r\n\t\tbool pendingCreate;\t\t\t\t// State when associatedTAOId has not accepted setting\r\n\t\tbool locked;\t\t\t\t\t// State when pending anything (cannot change if locked)\r\n\t\tbool rejected;\t\t\t\t\t// State when associatedTAOId rejected this setting\r\n\t\tstring settingDataJSON;\t\t\t// Catch-all\r\n\t}\r\n\r\n\tstruct SettingState {\r\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\r\n\t\tbool pendingUpdate;\t\t\t\t// State when setting is in process of being updated\r\n\t\taddress updateAdvocateNameId;\t// The nameId of the Advocate that performed the update\r\n\r\n\t\t/**\r\n\t\t * A child of the associatedTAOId with the update Logos.\r\n\t\t * This tells the setting contract that there is a proposal TAO that is a Child TAO\r\n\t\t * of the associated TAO, which will be responsible for deciding if the update to the\r\n\t\t * setting is accepted or rejected.\r\n\t\t */\r\n\t\taddress proposalTAOId;\r\n\r\n\t\t/**\r\n\t\t * The proposalTAOId moves here when setting value changes successfully\r\n\t\t */\r\n\t\taddress lastUpdateTAOId;\r\n\r\n\t\tstring settingStateJSON;\t\t// Catch-all\r\n\t}\r\n\r\n\tstruct SettingDeprecation {\r\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\r\n\t\taddress creatorNameId;\t\t\t// The nameId that created this deprecation\r\n\t\taddress creatorTAOId;\t\t// The taoId that created this deprecation\r\n\t\taddress associatedTAOId;\t// The taoId that the setting affects\r\n\t\tbool pendingDeprecated;\t\t\t// State when associatedTAOId has not accepted setting\r\n\t\tbool locked;\t\t\t\t\t// State when pending anything (cannot change if locked)\r\n\t\tbool rejected;\t\t\t\t\t// State when associatedTAOId rejected this setting\r\n\t\tbool migrated;\t\t\t\t\t// State when this setting is fully migrated\r\n\r\n\t\t// holds the pending new settingId value when a deprecation is set\r\n\t\tuint256 pendingNewSettingId;\r\n\r\n\t\t// holds the new settingId that has been approved by associatedTAOId\r\n\t\tuint256 newSettingId;\r\n\r\n\t\t// holds the pending new contract address for this setting\r\n\t\taddress pendingNewSettingContractAddress;\r\n\r\n\t\t// holds the new contract address for this setting\r\n\t\taddress newSettingContractAddress;\r\n\t}\r\n\r\n\tstruct AssociatedTAOSetting {\r\n\t\tbytes32 associatedTAOSettingId;\t\t// Identifier\r\n\t\taddress associatedTAOId;\t\t\t// The TAO ID that the setting is associated to\r\n\t\tuint256 settingId;\t\t\t\t\t\t// The Setting ID that is associated with the TAO ID\r\n\t}\r\n\r\n\tstruct CreatorTAOSetting {\r\n\t\tbytes32 creatorTAOSettingId;\t\t// Identifier\r\n\t\taddress creatorTAOId;\t\t\t\t// The TAO ID that the setting was created from\r\n\t\tuint256 settingId;\t\t\t\t\t\t// The Setting ID created from the TAO ID\r\n\t}\r\n\r\n\tstruct AssociatedTAOSettingDeprecation {\r\n\t\tbytes32 associatedTAOSettingDeprecationId;\t\t// Identifier\r\n\t\taddress associatedTAOId;\t\t\t\t\t\t// The TAO ID that the setting is associated to\r\n\t\tuint256 settingId;\t\t\t\t\t\t\t\t\t// The Setting ID that is associated with the TAO ID\r\n\t}\r\n\r\n\tstruct CreatorTAOSettingDeprecation {\r\n\t\tbytes32 creatorTAOSettingDeprecationId;\t\t\t// Identifier\r\n\t\taddress creatorTAOId;\t\t\t\t\t\t\t// The TAO ID that the setting was created from\r\n\t\tuint256 settingId;\t\t\t\t\t\t\t\t\t// The Setting ID created from the TAO ID\r\n\t}\r\n\r\n\t// Mapping from settingId to it's data\r\n\tmapping (uint256 => SettingData) internal settingDatas;\r\n\r\n\t// Mapping from settingId to it's state\r\n\tmapping (uint256 => SettingState) internal settingStates;\r\n\r\n\t// Mapping from settingId to it's deprecation info\r\n\tmapping (uint256 => SettingDeprecation) internal settingDeprecations;\r\n\r\n\t// Mapping from associatedTAOSettingId to AssociatedTAOSetting\r\n\tmapping (bytes32 => AssociatedTAOSetting) internal associatedTAOSettings;\r\n\r\n\t// Mapping from creatorTAOSettingId to CreatorTAOSetting\r\n\tmapping (bytes32 => CreatorTAOSetting) internal creatorTAOSettings;\r\n\r\n\t// Mapping from associatedTAOSettingDeprecationId to AssociatedTAOSettingDeprecation\r\n\tmapping (bytes32 => AssociatedTAOSettingDeprecation) internal associatedTAOSettingDeprecations;\r\n\r\n\t// Mapping from creatorTAOSettingDeprecationId to CreatorTAOSettingDeprecation\r\n\tmapping (bytes32 => CreatorTAOSettingDeprecation) internal creatorTAOSettingDeprecations;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor(address _nameTAOPositionAddress) public {\r\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t */\r\n\tmodifier onlyTheAO {\r\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameTAOPosition address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev Add setting data/state\r\n\t * @param _settingId The ID of the setting\r\n\t * @param _creatorNameId The nameId that created the setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t * @return The ID of the \"Associated\" setting\r\n\t * @return The ID of the \"Creator\" setting\r\n\t */\r\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external inWhitelist returns (bytes32, bytes32) {\r\n\t\t// Store setting data/state\r\n\t\trequire (_storeSettingDataState(_settingId, _creatorNameId, _settingName, _creatorTAOId, _associatedTAOId, _extraData));\r\n\r\n\t\t// Store the associatedTAOSetting/creatorTAOSetting info\r\n\t\treturn (\r\n\t\t\t_storeAssociatedTAOSetting(_associatedTAOId, _settingId),\r\n\t\t\t_storeCreatorTAOSetting(_creatorTAOId, _settingId)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Setting Data of a setting ID\r\n\t * @param _settingId The ID of the setting\r\n\t */\r\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory) {\r\n\t\tSettingData memory _settingData = settingDatas[_settingId];\r\n\t\treturn (\r\n\t\t\t_settingData.settingId,\r\n\t\t\t_settingData.creatorNameId,\r\n\t\t\t_settingData.creatorTAOId,\r\n\t\t\t_settingData.associatedTAOId,\r\n\t\t\t_settingData.settingName,\r\n\t\t\t_settingData.pendingCreate,\r\n\t\t\t_settingData.locked,\r\n\t\t\t_settingData.rejected,\r\n\t\t\t_settingData.settingDataJSON\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Associated TAO Setting info\r\n\t * @param _associatedTAOSettingId The ID of the associated tao setting\r\n\t */\r\n\tfunction getAssociatedTAOSetting(bytes32 _associatedTAOSettingId) public view returns (bytes32, address, uint256) {\r\n\t\tAssociatedTAOSetting memory _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];\r\n\t\treturn (\r\n\t\t\t_associatedTAOSetting.associatedTAOSettingId,\r\n\t\t\t_associatedTAOSetting.associatedTAOId,\r\n\t\t\t_associatedTAOSetting.settingId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Creator TAO Setting info\r\n\t * @param _creatorTAOSettingId The ID of the creator tao setting\r\n\t */\r\n\tfunction getCreatorTAOSetting(bytes32 _creatorTAOSettingId) public view returns (bytes32, address, uint256) {\r\n\t\tCreatorTAOSetting memory _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];\r\n\t\treturn (\r\n\t\t\t_creatorTAOSetting.creatorTAOSettingId,\r\n\t\t\t_creatorTAOSetting.creatorTAOId,\r\n\t\t\t_creatorTAOSetting.settingId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's _associatedTAOId approves setting creation\r\n\t * @param _settingId The ID of the setting to approve\r\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\r\n\t * @param _approved Whether to approve or reject\r\n\t * @return true on success\r\n\t */\r\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting exists and needs approval\r\n\t\tSettingData storage _settingData = settingDatas[_settingId];\r\n\t\trequire (_settingData.settingId == _settingId &&\r\n\t\t\t_settingData.pendingCreate == true &&\r\n\t\t\t_settingData.locked == true &&\r\n\t\t\t_settingData.rejected == false &&\r\n\t\t\t_associatedTAOAdvocate != address(0) &&\r\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\r\n\t\t);\r\n\r\n\t\tif (_approved) {\r\n\t\t\t// Unlock the setting so that advocate of creatorTAOId can finalize the creation\r\n\t\t\t_settingData.locked = false;\r\n\t\t} else {\r\n\t\t\t// Reject the setting\r\n\t\t\t_settingData.pendingCreate = false;\r\n\t\t\t_settingData.rejected = true;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's _creatorTAOId finalizes the setting creation once the setting is approved\r\n\t * @param _settingId The ID of the setting to be finalized\r\n\t * @param _creatorTAOAdvocate The advocate of the creator TAO\r\n\t * @return true on success\r\n\t */\r\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting exists and needs approval\r\n\t\tSettingData storage _settingData = settingDatas[_settingId];\r\n\t\trequire (_settingData.settingId == _settingId &&\r\n\t\t\t_settingData.pendingCreate == true &&\r\n\t\t\t_settingData.locked == false &&\r\n\t\t\t_settingData.rejected == false &&\r\n\t\t\t_creatorTAOAdvocate != address(0) &&\r\n\t\t\t_creatorTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.creatorTAOId)\r\n\t\t);\r\n\r\n\t\t// Update the setting data\r\n\t\t_settingData.pendingCreate = false;\r\n\t\t_settingData.locked = true;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Store setting update data\r\n\t * @param _settingId The ID of the setting to be updated\r\n\t * @param _associatedTAOAdvocate The setting's associatedTAOId's advocate's name address\r\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t * @return true on success\r\n\t */\r\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting is created\r\n\t\tSettingData memory _settingData = settingDatas[_settingId];\r\n\t\trequire (_settingData.settingId == _settingId &&\r\n\t\t\t_settingData.pendingCreate == false &&\r\n\t\t\t_settingData.locked == true &&\r\n\t\t\t_settingData.rejected == false &&\r\n\t\t\t_associatedTAOAdvocate != address(0) &&\r\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\r\n\t\t);\r\n\r\n\t\t// Make sure setting is not in the middle of updating\r\n\t\tSettingState storage _settingState = settingStates[_settingId];\r\n\t\trequire (_settingState.pendingUpdate == false);\r\n\r\n\t\t// Make sure setting is not yet deprecated\r\n\t\tSettingDeprecation memory _settingDeprecation = settingDeprecations[_settingId];\r\n\t\tif (_settingDeprecation.settingId == _settingId) {\r\n\t\t\trequire (_settingDeprecation.migrated == false);\r\n\t\t}\r\n\r\n\t\t// Store the SettingState data\r\n\t\t_settingState.pendingUpdate = true;\r\n\t\t_settingState.updateAdvocateNameId = _associatedTAOAdvocate;\r\n\t\t_settingState.proposalTAOId = _proposalTAOId;\r\n\t\t_settingState.settingStateJSON = _extraData;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get setting state\r\n\t * @param _settingId The ID of the setting\r\n\t */\r\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory) {\r\n\t\tSettingState memory _settingState = settingStates[_settingId];\r\n\t\treturn (\r\n\t\t\t_settingState.settingId,\r\n\t\t\t_settingState.pendingUpdate,\r\n\t\t\t_settingState.updateAdvocateNameId,\r\n\t\t\t_settingState.proposalTAOId,\r\n\t\t\t_settingState.lastUpdateTAOId,\r\n\t\t\t_settingState.settingStateJSON\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's proposalTAOId approves the setting update\r\n\t * @param _settingId The ID of the setting to be approved\r\n\t * @param _proposalTAOAdvocate The advocate of the proposal TAO\r\n\t * @param _approved Whether to approve or reject\r\n\t * @return true on success\r\n\t */\r\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting is created\r\n\t\tSettingData storage _settingData = settingDatas[_settingId];\r\n\t\trequire (_settingData.settingId == _settingId && _settingData.pendingCreate == false && _settingData.locked == true && _settingData.rejected == false);\r\n\r\n\t\t// Make sure setting update exists and needs approval\r\n\t\tSettingState storage _settingState = settingStates[_settingId];\r\n\t\trequire (_settingState.settingId == _settingId &&\r\n\t\t\t_settingState.pendingUpdate == true &&\r\n\t\t\t_proposalTAOAdvocate != address(0) &&\r\n\t\t\t_proposalTAOAdvocate == _nameTAOPosition.getAdvocate(_settingState.proposalTAOId)\r\n\t\t);\r\n\r\n\t\tif (_approved) {\r\n\t\t\t// Unlock the setting so that advocate of associatedTAOId can finalize the update\r\n\t\t\t_settingData.locked = false;\r\n\t\t} else {\r\n\t\t\t// Set pendingUpdate to false\r\n\t\t\t_settingState.pendingUpdate = false;\r\n\t\t\t_settingState.proposalTAOId = address(0);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's _associatedTAOId finalizes the setting update once the setting is approved\r\n\t * @param _settingId The ID of the setting to be finalized\r\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\r\n\t * @return true on success\r\n\t */\r\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting is created\r\n\t\tSettingData storage _settingData = settingDatas[_settingId];\r\n\t\trequire (_settingData.settingId == _settingId &&\r\n\t\t\t_settingData.pendingCreate == false &&\r\n\t\t\t_settingData.locked == false &&\r\n\t\t\t_settingData.rejected == false &&\r\n\t\t\t_associatedTAOAdvocate != address(0) &&\r\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\r\n\t\t);\r\n\r\n\t\t// Make sure setting update exists and needs approval\r\n\t\tSettingState storage _settingState = settingStates[_settingId];\r\n\t\trequire (_settingState.settingId == _settingId && _settingState.pendingUpdate == true && _settingState.proposalTAOId != address(0));\r\n\r\n\t\t// Update the setting data\r\n\t\t_settingData.locked = true;\r\n\r\n\t\t// Update the setting state\r\n\t\t_settingState.pendingUpdate = false;\r\n\t\t_settingState.updateAdvocateNameId = _associatedTAOAdvocate;\r\n\t\taddress _proposalTAOId = _settingState.proposalTAOId;\r\n\t\t_settingState.proposalTAOId = address(0);\r\n\t\t_settingState.lastUpdateTAOId = _proposalTAOId;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add setting deprecation\r\n\t * @param _settingId The ID of the setting\r\n\t * @param _creatorNameId The nameId that created the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _newSettingId The new settingId value to route\r\n\t * @param _newSettingContractAddress The address of the new setting contract to route\r\n\t * @return The ID of the \"Associated\" setting deprecation\r\n\t * @return The ID of the \"Creator\" setting deprecation\r\n\t */\r\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external inWhitelist returns (bytes32, bytes32) {\r\n\t\trequire (_storeSettingDeprecation(_settingId, _creatorNameId, _creatorTAOId, _associatedTAOId, _newSettingId, _newSettingContractAddress));\r\n\r\n\t\t// Store the associatedTAOSettingDeprecation info\r\n\t\tbytes32 _associatedTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));\r\n\t\tAssociatedTAOSettingDeprecation storage _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];\r\n\t\t_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId = _associatedTAOSettingDeprecationId;\r\n\t\t_associatedTAOSettingDeprecation.associatedTAOId = _associatedTAOId;\r\n\t\t_associatedTAOSettingDeprecation.settingId = _settingId;\r\n\r\n\t\t// Store the creatorTAOSettingDeprecation info\r\n\t\tbytes32 _creatorTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));\r\n\t\tCreatorTAOSettingDeprecation storage _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];\r\n\t\t_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId = _creatorTAOSettingDeprecationId;\r\n\t\t_creatorTAOSettingDeprecation.creatorTAOId = _creatorTAOId;\r\n\t\t_creatorTAOSettingDeprecation.settingId = _settingId;\r\n\r\n\t\treturn (_associatedTAOSettingDeprecationId, _creatorTAOSettingDeprecationId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Setting Deprecation info of a setting ID\r\n\t * @param _settingId The ID of the setting\r\n\t */\r\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address) {\r\n\t\tSettingDeprecation memory _settingDeprecation = settingDeprecations[_settingId];\r\n\t\treturn (\r\n\t\t\t_settingDeprecation.settingId,\r\n\t\t\t_settingDeprecation.creatorNameId,\r\n\t\t\t_settingDeprecation.creatorTAOId,\r\n\t\t\t_settingDeprecation.associatedTAOId,\r\n\t\t\t_settingDeprecation.pendingDeprecated,\r\n\t\t\t_settingDeprecation.locked,\r\n\t\t\t_settingDeprecation.rejected,\r\n\t\t\t_settingDeprecation.migrated,\r\n\t\t\t_settingDeprecation.pendingNewSettingId,\r\n\t\t\t_settingDeprecation.newSettingId,\r\n\t\t\t_settingDeprecation.pendingNewSettingContractAddress,\r\n\t\t\t_settingDeprecation.newSettingContractAddress\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Associated TAO Setting Deprecation info\r\n\t * @param _associatedTAOSettingDeprecationId The ID of the associated tao setting deprecation\r\n\t */\r\n\tfunction getAssociatedTAOSettingDeprecation(bytes32 _associatedTAOSettingDeprecationId) external view returns (bytes32, address, uint256) {\r\n\t\tAssociatedTAOSettingDeprecation memory _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];\r\n\t\treturn (\r\n\t\t\t_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId,\r\n\t\t\t_associatedTAOSettingDeprecation.associatedTAOId,\r\n\t\t\t_associatedTAOSettingDeprecation.settingId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get Creator TAO Setting Deprecation info\r\n\t * @param _creatorTAOSettingDeprecationId The ID of the creator tao setting deprecation\r\n\t */\r\n\tfunction getCreatorTAOSettingDeprecation(bytes32 _creatorTAOSettingDeprecationId) public view returns (bytes32, address, uint256) {\r\n\t\tCreatorTAOSettingDeprecation memory _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];\r\n\t\treturn (\r\n\t\t\t_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId,\r\n\t\t\t_creatorTAOSettingDeprecation.creatorTAOId,\r\n\t\t\t_creatorTAOSettingDeprecation.settingId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of SettingDeprecation's _associatedTAOId approves deprecation\r\n\t * @param _settingId The ID of the setting to approve\r\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\r\n\t * @param _approved Whether to approve or reject\r\n\t * @return true on success\r\n\t */\r\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting exists and needs approval\r\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\r\n\t\trequire (_settingDeprecation.settingId == _settingId &&\r\n\t\t\t_settingDeprecation.migrated == false &&\r\n\t\t\t_settingDeprecation.pendingDeprecated == true &&\r\n\t\t\t_settingDeprecation.locked == true &&\r\n\t\t\t_settingDeprecation.rejected == false &&\r\n\t\t\t_associatedTAOAdvocate != address(0) &&\r\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingDeprecation.associatedTAOId)\r\n\t\t);\r\n\r\n\t\tif (_approved) {\r\n\t\t\t// Unlock the setting so that advocate of creatorTAOId can finalize the creation\r\n\t\t\t_settingDeprecation.locked = false;\r\n\t\t} else {\r\n\t\t\t// Reject the setting\r\n\t\t\t_settingDeprecation.pendingDeprecated = false;\r\n\t\t\t_settingDeprecation.rejected = true;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of SettingDeprecation's _creatorTAOId finalizes the deprecation once the setting deprecation is approved\r\n\t * @param _settingId The ID of the setting to be finalized\r\n\t * @param _creatorTAOAdvocate The advocate of the creator TAO\r\n\t * @return true on success\r\n\t */\r\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external inWhitelist returns (bool) {\r\n\t\t// Make sure setting exists and needs approval\r\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\r\n\t\trequire (_settingDeprecation.settingId == _settingId &&\r\n\t\t\t_settingDeprecation.migrated == false &&\r\n\t\t\t_settingDeprecation.pendingDeprecated == true &&\r\n\t\t\t_settingDeprecation.locked == false &&\r\n\t\t\t_settingDeprecation.rejected == false &&\r\n\t\t\t_creatorTAOAdvocate != address(0) &&\r\n\t\t\t_creatorTAOAdvocate == _nameTAOPosition.getAdvocate(_settingDeprecation.creatorTAOId)\r\n\t\t);\r\n\r\n\t\t// Update the setting data\r\n\t\t_settingDeprecation.pendingDeprecated = false;\r\n\t\t_settingDeprecation.locked = true;\r\n\t\t_settingDeprecation.migrated = true;\r\n\t\tuint256 _newSettingId = _settingDeprecation.pendingNewSettingId;\r\n\t\t_settingDeprecation.pendingNewSettingId = 0;\r\n\t\t_settingDeprecation.newSettingId = _newSettingId;\r\n\r\n\t\taddress _newSettingContractAddress = _settingDeprecation.pendingNewSettingContractAddress;\r\n\t\t_settingDeprecation.pendingNewSettingContractAddress = address(0);\r\n\t\t_settingDeprecation.newSettingContractAddress = _newSettingContractAddress;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if a setting exist and not rejected\r\n\t * @param _settingId The ID of the setting\r\n\t * @return true if exist. false otherwise\r\n\t */\r\n\tfunction settingExist(uint256 _settingId) external view returns (bool) {\r\n\t\tSettingData memory _settingData = settingDatas[_settingId];\r\n\t\treturn (_settingData.settingId == _settingId && _settingData.rejected == false);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get the latest ID of a deprecated setting, if exist\r\n\t * @param _settingId The ID of the setting\r\n\t * @return The latest setting ID\r\n\t */\r\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256) {\r\n\t\tuint256 _latestSettingId = _settingId;\r\n\t\t(,,,,,,, bool _migrated,, uint256 _newSettingId,,) = this.getSettingDeprecation(_latestSettingId);\r\n\t\twhile (_migrated && _newSettingId > 0) {\r\n\t\t\t_latestSettingId = _newSettingId;\r\n\t\t\t(,,,,,,, _migrated,, _newSettingId,,) = this.getSettingDeprecation(_latestSettingId);\r\n\t\t}\r\n\t\treturn _latestSettingId;\r\n\t}\r\n\r\n\t/***** Internal Method *****/\r\n\t/**\r\n\t * @dev Store setting data/state\r\n\t * @param _settingId The ID of the setting\r\n\t * @param _creatorNameId The nameId that created the setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t * @return true on success\r\n\t */\r\n\tfunction _storeSettingDataState(uint256 _settingId, address _creatorNameId, string memory _settingName, address _creatorTAOId, address _associatedTAOId, string memory _extraData) internal returns (bool) {\r\n\t\t// Store setting data\r\n\t\tSettingData storage _settingData = settingDatas[_settingId];\r\n\t\t_settingData.settingId = _settingId;\r\n\t\t_settingData.creatorNameId = _creatorNameId;\r\n\t\t_settingData.creatorTAOId = _creatorTAOId;\r\n\t\t_settingData.associatedTAOId = _associatedTAOId;\r\n\t\t_settingData.settingName = _settingName;\r\n\t\t_settingData.pendingCreate = true;\r\n\t\t_settingData.locked = true;\r\n\t\t_settingData.settingDataJSON = _extraData;\r\n\r\n\t\t// Store setting state\r\n\t\tSettingState storage _settingState = settingStates[_settingId];\r\n\t\t_settingState.settingId = _settingId;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Store setting deprecation\r\n\t * @param _settingId The ID of the setting\r\n\t * @param _creatorNameId The nameId that created the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _newSettingId The new settingId value to route\r\n\t * @param _newSettingContractAddress The address of the new setting contract to route\r\n\t * @return true on success\r\n\t */\r\n\tfunction _storeSettingDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) internal returns (bool) {\r\n\t\t// Make sure this setting exists\r\n\t\trequire (settingDatas[_settingId].creatorNameId != address(0) && settingDatas[_settingId].rejected == false && settingDatas[_settingId].pendingCreate == false);\r\n\r\n\t\t// Make sure deprecation is not yet exist for this setting Id\r\n\t\trequire (settingDeprecations[_settingId].creatorNameId == address(0));\r\n\r\n\t\t// Make sure newSettingId exists\r\n\t\trequire (settingDatas[_newSettingId].creatorNameId != address(0) && settingDatas[_newSettingId].rejected == false && settingDatas[_newSettingId].pendingCreate == false);\r\n\r\n\t\t// Store setting deprecation info\r\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\r\n\t\t_settingDeprecation.settingId = _settingId;\r\n\t\t_settingDeprecation.creatorNameId = _creatorNameId;\r\n\t\t_settingDeprecation.creatorTAOId = _creatorTAOId;\r\n\t\t_settingDeprecation.associatedTAOId = _associatedTAOId;\r\n\t\t_settingDeprecation.pendingDeprecated = true;\r\n\t\t_settingDeprecation.locked = true;\r\n\t\t_settingDeprecation.pendingNewSettingId = _newSettingId;\r\n\t\t_settingDeprecation.pendingNewSettingContractAddress = _newSettingContractAddress;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Store the associated TAO Setting info\r\n\t * @param _associatedTAOId The Associated TAO ID\r\n\t * @param _settingId The setting ID\r\n\t * @return The newly created associated TAO setting ID\r\n\t */\r\n\tfunction _storeAssociatedTAOSetting(address _associatedTAOId, uint256 _settingId) internal returns (bytes32) {\r\n\t\t// Store the associatedTAOSetting info\r\n\t\tbytes32 _associatedTAOSettingId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));\r\n\t\tAssociatedTAOSetting storage _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];\r\n\t\t_associatedTAOSetting.associatedTAOSettingId = _associatedTAOSettingId;\r\n\t\t_associatedTAOSetting.associatedTAOId = _associatedTAOId;\r\n\t\t_associatedTAOSetting.settingId = _settingId;\r\n\t\treturn _associatedTAOSettingId;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Store the creator TAO Setting info\r\n\t * @param _creatorTAOId The Creator TAO ID\r\n\t * @param _settingId The setting ID\r\n\t * @return The newly created creator TAO setting ID\r\n\t */\r\n\tfunction _storeCreatorTAOSetting(address _creatorTAOId, uint256 _settingId) internal returns (bytes32) {\r\n\t\t// Store the creatorTAOSetting info\r\n\t\tbytes32 _creatorTAOSettingId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));\r\n\t\tCreatorTAOSetting storage _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];\r\n\t\t_creatorTAOSetting.creatorTAOSettingId = _creatorTAOSettingId;\r\n\t\t_creatorTAOSetting.creatorTAOId = _creatorTAOId;\r\n\t\t_creatorTAOSetting.settingId = _settingId;\r\n\t\treturn _creatorTAOSettingId;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOSettingDeprecationId\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedTAOSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorNameId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creatorTAOSettingDeprecationId\",\"type\":\"bytes32\"}],\"name\":\"getCreatorTAOSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creatorTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"getCreatorTAOSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_proposalTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getLatestSettingId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedTAOSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"settingExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorNameId\",\"type\":\"address\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_newSettingId\",\"type\":\"uint256\"},{\"name\":\"_newSettingContractAddress\",\"type\":\"address\"}],\"name\":\"addDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AOSettingAttribute","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe","Library":"AOLibrary:1150d53299Abb7DE27464D01B626728f5c840229","SwarmSource":"bzzr://be19824d385f2a0b5e10ef4c3bb059d2acf1bff0d54592fa1cb71459c3b271db"}]}