{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/promocode/PromoCode.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract PromoCode is Ownable {\r\n  ERC20 public token;\r\n  mapping(bytes32 => bool) public used;\r\n  uint256 public amount;\r\n\r\n  event Redeem(address user, uint256 amount, string code);\r\n\r\n  constructor(ERC20 _token, uint256 _amount) public {\r\n    amount = _amount;\r\n    token = _token;\r\n  }\r\n\r\n  function setAmount(uint256 _amount) public onlyOwner {\r\n    amount = _amount;\r\n  }\r\n\r\n  function redeem(string promoCode, bytes signature) public {\r\n    bytes32 hash = keccak256(abi.encodePacked(promoCode));\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    assembly {\r\n      r := mload(add(signature, 32))\r\n      s := mload(add(signature, 64))\r\n      v := and(mload(add(signature, 65)), 255)\r\n    }\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    require(!used[hash]);\r\n    used[hash] = true;\r\n    require(verifyString(promoCode, v, r, s) == owner);\r\n    address user = msg.sender;\r\n    require(token.transferFrom(owner, user, amount));\r\n    emit Redeem(user, amount, promoCode);\r\n  }\r\n\r\n  // https://blog.ricmoo.com/verifying-messages-in-solidity-50a94f82b2ca\r\n  // Returns the address that signed a given string message\r\n  function verifyString(string message, uint8 v, bytes32 r, bytes32 s) public pure returns (address signer) {\r\n    // The message header; we will fill in the length next\r\n    string memory header = \"\\x19Ethereum Signed Message:\\n000000\";\r\n    uint256 lengthOffset;\r\n    uint256 length;\r\n    assembly {\r\n    // The first word of a string is its length\r\n      length := mload(message)\r\n    // The beginning of the base-10 message length in the prefix\r\n      lengthOffset := add(header, 57)\r\n    }\r\n    // Maximum length we support\r\n    require(length <= 999999);\r\n    // The length of the message's length in base-10\r\n    uint256 lengthLength = 0;\r\n    // The divisor to get the next left-most message length digit\r\n    uint256 divisor = 100000;\r\n    // Move one digit of the message length to the right at a time\r\n    while (divisor != 0) {\r\n      // The place value at the divisor\r\n      uint256 digit = length / divisor;\r\n      if (digit == 0) {\r\n        // Skip leading zeros\r\n        if (lengthLength == 0) {\r\n          divisor /= 10;\r\n          continue;\r\n        }\r\n      }\r\n      // Found a non-zero digit or non-leading zero digit\r\n      lengthLength++;\r\n      // Remove this digit from the message length's current value\r\n      length -= digit * divisor;\r\n      // Shift our base-10 divisor over\r\n      divisor /= 10;\r\n\r\n      // Convert the digit to its ASCII representation (man ascii)\r\n      digit += 0x30;\r\n      // Move to the next character and write the digit\r\n      lengthOffset++;\r\n      assembly {\r\n        mstore8(lengthOffset, digit)\r\n      }\r\n    }\r\n    // The null string requires exactly 1 zero (unskip 1 leading 0)\r\n    if (lengthLength == 0) {\r\n      lengthLength = 1 + 0x19 + 1;\r\n    } else {\r\n      lengthLength += 1 + 0x19;\r\n    }\r\n    // Truncate the tailing zeros from the header\r\n    assembly {\r\n      mstore(header, lengthLength)\r\n    }\r\n    // Perform the elliptic curve recover operation\r\n    bytes32 check = keccak256(abi.encodePacked(header, message));\r\n    return ecrecover(check, v, r, s);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifyString\",\"outputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"promoCode\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PromoCode","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d42debe4edc92bd5a3fbb4243e1eccf6d63a4a5d000000000000000000000000000000000000000000000004c53ecdc18a600000","Library":"","SwarmSource":"bzzr://382d1f63aaae3908c57526428103758cbfed1f96265a464a8e99ccca00de949b"}]}