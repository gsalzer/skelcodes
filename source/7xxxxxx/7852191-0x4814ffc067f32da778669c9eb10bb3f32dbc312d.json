{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n   constructor() public {\r\n        owner = msg.sender;\r\n\t\t}\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n\t\t}\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n\t\t}\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n\t\t}\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n\t}\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n\t}\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n\t}\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n\t}\r\n}\r\n\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n\t}\r\n\r\ncontract DigiWillToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Digiwill\";   //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals = 18;        //Number of decimals of the smallest unit\r\n    string public symbol = \"DGW\";      //An identifier: e.g. REP\r\n    uint public totalSupply;\r\n\tbool public enabledTokenTransfer = false;\r\n\r\n    mapping (address => uint256) public balances;\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\t\r\n\tmapping (address => bool) public allowedToTransfer;\r\n\tmapping (address => bool) public blockedAddress;\r\n\r\n///////////\r\n// Constructor\r\n///////////\r\n\r\n    // @notice Constructor to create a DigiWillToken\r\n       constructor() public {\r\n        totalSupply = 2000000000 * 10**18;\r\n        // Give the creator all initial tokens\r\n        balances[msg.sender] = totalSupply;\r\n        allowedToTransfer[msg.sender] = true;\r\n\t\t}\r\n\r\n\r\n/////////////\r\n// ERC20 Methods\r\n/////////////\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transferred\r\n    // @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n\t\t}\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    //  is approved by `_from`\r\n    // @param _from The address holding the tokens being transferred\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transferred\r\n    // @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        // The standard ERC 20 transferFrom functionality\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        allowed[_from][msg.sender] -= _amount;\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n\t\t}\r\n\r\n    // @dev This is the actual transfer function in the token contract, it can\r\n    //  only be called by other functions in this contract.\r\n    // @param _from The address holding the tokens being transferred\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transferred\r\n    // @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal {\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n\t\t\r\n        require((_to != 0) && (_to != address(this)));\r\n        require(_amount <= balances[_from]);\r\n\t\trequire(enabledTokenTransfer == true || allowedToTransfer[_from] == true);\r\n\t\t\r\n\t\trequire(!blockedAddress[_from] || blockedAddress[_from] == false);\r\n\t\trequire(!blockedAddress[_to] || blockedAddress[_to] == false);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\temit Transfer(_from, _to, _amount);\r\n\r\n\t\t}\r\n\r\n    // @return The balance of `_owner`\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n\t\t}\r\n\t\t\r\n\t // @return The lock status of targetAddress\r\n    function lockStatusOf(address targetAddress) public constant returns (bool state) {\r\n        return blockedAddress[targetAddress];\r\n\t\t}\r\n\t\t\r\n\t// @return The transfer allowance of targetAddress\r\n    function transferAllowanceOf(address targetAddress) public constant returns (bool state) {\r\n        return allowedToTransfer[targetAddress];\r\n\t\t}\r\n\r\n    // @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    //  its behalf. This is a modified version of the ERC20 approve function\r\n    //  to be a little bit safer\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @param _amount The amount of tokens to be approved for transfer\r\n    // @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n\t\t}\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n    function burn(uint256 _value) public onlyOwner {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\t\t}\r\n\r\n    /** @dev This function makes it easy to read the `allowed[]` map\r\n    * @param _owner The address of the account that owns the token\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @return Amount of remaining tokens of _owner that _spender is allowed\r\n    *  to spend\r\n\t  */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n\t\t}\r\n\r\n    // @dev This function makes it easy to get the total number of tokens\r\n    // @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupply;\r\n\t\t}\r\n\t\r\n\tfunction setTokenTransferLock(bool lockStatus) public onlyOwner {\r\n\t\tenabledTokenTransfer = lockStatus;\r\n\t\t}\r\n\t\r\n\tfunction setAddressTransferAllowance(address targetAddress, bool lockStatus) public onlyOwner {\r\n\t\tallowedToTransfer[targetAddress] = lockStatus;\r\n\t\t}\r\n\t\t\r\n\tfunction setAddressBlockState(address targetAddress, bool lockStatus) public onlyOwner {\r\n\t\trequire(targetAddress != owner);\r\n\t\tblockedAddress[targetAddress] = lockStatus;\r\n\t\t}\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount\r\n        );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n    event Burn(\r\n        address indexed _burner,\r\n        uint256 _amount\r\n        );\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"lockStatusOf\",\"outputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"transferAllowanceOf\",\"outputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setAddressBlockState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setAddressTransferAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabledTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setTokenTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DigiWillToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e264f7390e9eb02046ede8e470e95e2d86f3b276a49e8f8c3e86ee8603f7e696"}]}