{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\npragma solidity 0.5.2;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Adminable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Adminable is Initializable {\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, fails.\r\n   */\r\n  modifier ifAdmin() {\r\n    require(msg.sender == _admin());\r\n    _;\r\n  }\r\n\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n    /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\ncontract Vault {}\r\ncontract Bridge {\r\n    function submitPeriod(\r\n    bytes32 _prevHash, \r\n    bytes32 _root) \r\n  public  returns (uint256 newHeight) {}\r\n}\r\n\r\ncontract PoaOperator is Adminable {\r\n\r\n  event Epoch(uint256 epoch);\r\n  event EpochLength(uint256 epochLength);\r\n\r\n  event ValidatorJoin(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 eventCounter,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorLogout(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    address newSigner,\r\n    uint256 eventCounter,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorLeave(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorUpdate(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 eventCounter\r\n  );\r\n\r\n  struct Slot {\r\n    uint32 eventCounter;\r\n    address owner;\r\n    uint64 stake;\r\n    address signer;\r\n    bytes32 tendermint;\r\n    uint32 activationEpoch;\r\n    address newOwner;\r\n    uint64 newStake;\r\n    address newSigner;\r\n    bytes32 newTendermint;\r\n  }\r\n\r\n  Vault public vault;\r\n  Bridge public bridge;\r\n\r\n  uint256 public epochLength; // length of epoch in periods (32 blocks)\r\n  uint256 public lastCompleteEpoch; // height at which last epoch was completed\r\n  uint256 public lastEpochBlockHeight;\r\n\r\n  mapping(uint256 => Slot) public slots;\r\n\r\n\r\n  function initialize(Bridge _bridge, Vault _vault, uint256 _epochLength) public initializer {\r\n    vault = _vault;\r\n    bridge = _bridge;\r\n    epochLength = _epochLength;\r\n    emit EpochLength(epochLength);\r\n  }\r\n\r\n  function setEpochLength(uint256 _epochLength) public ifAdmin {\r\n    epochLength = _epochLength;\r\n    emit EpochLength(epochLength);\r\n  }\r\n\r\n  function setSlot(uint256 _slotId, address _signerAddr, bytes32 _tenderAddr) public ifAdmin {\r\n    require(_slotId < epochLength, \"out of range slotId\");\r\n    Slot storage slot = slots[_slotId];\r\n\r\n    // taking empty slot\r\n    if (slot.signer == address(0)) {\r\n      slot.owner = _signerAddr;\r\n      slot.signer = _signerAddr;\r\n      slot.tendermint = _tenderAddr;\r\n      slot.activationEpoch = 0;\r\n      slot.eventCounter++;\r\n      emit ValidatorJoin(\r\n        slot.signer,\r\n        _slotId,\r\n        _tenderAddr,\r\n        slot.eventCounter,\r\n        lastCompleteEpoch + 1\r\n      );\r\n      return;\r\n    }\r\n    // emptying slot\r\n    if (_signerAddr == address(0) && _tenderAddr == 0) {\r\n      slot.activationEpoch = uint32(lastCompleteEpoch + 3);\r\n      slot.eventCounter++;\r\n      emit ValidatorLogout(\r\n        slot.signer,\r\n        _slotId,\r\n        _tenderAddr,\r\n        address(0),\r\n        slot.eventCounter,\r\n        lastCompleteEpoch + 3\r\n      );\r\n      return;\r\n    }\r\n  }\r\n\r\n  function activate(uint256 _slotId) public {\r\n    require(_slotId < epochLength, \"out of range slotId\");\r\n    Slot storage slot = slots[_slotId];\r\n    require(lastCompleteEpoch + 1 >= slot.activationEpoch, \"activation epoch not reached yet\");\r\n    if (slot.signer != address(0)) {\r\n      emit ValidatorLeave(\r\n        slot.signer,\r\n        _slotId,\r\n        slot.tendermint,\r\n        lastCompleteEpoch + 1\r\n      );\r\n    }\r\n    slot.owner = slot.newOwner;\r\n    slot.signer = slot.newSigner;\r\n    slot.tendermint = slot.newTendermint;\r\n    slot.activationEpoch = 0;\r\n    slot.newSigner = address(0);\r\n    slot.newTendermint = 0x0;\r\n    slot.eventCounter++;\r\n    if (slot.signer != address(0)) {\r\n      emit ValidatorJoin(\r\n        slot.signer,\r\n        _slotId,\r\n        slot.tendermint,\r\n        slot.eventCounter,\r\n        lastCompleteEpoch + 1\r\n      );\r\n    }\r\n  }\r\n\r\n  event Submission(\r\n    bytes32 indexed blocksRoot,\r\n    uint256 indexed slotId,\r\n    address owner,\r\n    bytes32 periodRoot\r\n  );\r\n\r\n  function submitPeriod(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot) public {\r\n    require(_slotId < epochLength, \"Incorrect slotId\");\r\n    Slot storage slot = slots[_slotId];\r\n    require(slot.signer == msg.sender, \"not submitted by signerAddr\");\r\n    // This is here so that I can submit in the same epoch I auction/logout but not after\r\n    if (slot.activationEpoch > 0) {\r\n      // if slot not active, prevent submission\r\n      require(lastCompleteEpoch + 2 < slot.activationEpoch, \"slot not active\");\r\n    }\r\n\r\n    // validator root\r\n    bytes32 hashRoot = bytes32(_slotId << 160 | uint160(slot.owner));\r\n    assembly {\r\n      mstore(0, hashRoot)\r\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n    // cas root\r\n    assembly {\r\n      mstore(0, 0x0000000000000000000000000000000000000000)\r\n      mstore(0x20, hashRoot)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    // consensus root\r\n    bytes32 consensusRoot;\r\n    assembly {\r\n      mstore(0, _blocksRoot)\r\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\r\n      consensusRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    // period root\r\n    assembly {\r\n      mstore(0, consensusRoot)\r\n      mstore(0x20, hashRoot)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    uint256 newHeight = bridge.submitPeriod(_prevHash, hashRoot);\r\n    // check if epoch completed\r\n    if (newHeight >= lastEpochBlockHeight + epochLength) {\r\n      lastCompleteEpoch++;\r\n      lastEpochBlockHeight = newHeight;\r\n      emit Epoch(lastCompleteEpoch);\r\n    }\r\n    emit Submission(_blocksRoot, _slotId, slot.owner, hashRoot);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"name\":\"eventCounter\",\"type\":\"uint32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"stake\",\"type\":\"uint64\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"tendermint\",\"type\":\"bytes32\"},{\"name\":\"activationEpoch\",\"type\":\"uint32\"},{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newStake\",\"type\":\"uint64\"},{\"name\":\"newSigner\",\"type\":\"address\"},{\"name\":\"newTendermint\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCompleteEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastEpochBlockHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_prevHash\",\"type\":\"bytes32\"},{\"name\":\"_blocksRoot\",\"type\":\"bytes32\"}],\"name\":\"submitPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_signerAddr\",\"type\":\"address\"},{\"name\":\"_tenderAddr\",\"type\":\"bytes32\"}],\"name\":\"setSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Epoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epochLength\",\"type\":\"uint256\"}],\"name\":\"EpochLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newSigner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorLogout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tenderAddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"eventCounter\",\"type\":\"uint256\"}],\"name\":\"ValidatorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blocksRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"periodRoot\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"}]","ContractName":"PoaOperator","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c2d55fe9dbfc4aee48abf24dfdeaf6a0d8042799ed895fed6fe445afdbd3e739"}]}