{"status":"1","message":"OK","result":[{"SourceCode":"/* file: openzeppelin-solidity/contracts/ownership/Ownable.sol */\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/ownership/Ownable.sol) */\r\n/* file: openzeppelin-solidity/contracts/math/SafeMath.sol */\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/math/SafeMath.sol) */\r\n/* file: ./contracts/utils/Utils.sol */\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\npragma solidity ^0.5.4;\r\n\r\n\r\ncontract Utils {\r\n    /** MODIFIERS **/\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"invalid address\");\r\n        _;\r\n    }\r\n}\r\n\r\n/* eof (./contracts/utils/Utils.sol) */\r\n/* file: ./contracts/management/Manageable.sol */\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\n pragma solidity ^0.5.4;\r\n\r\n\r\ncontract Manageable is Ownable, Utils {\r\n    mapping(address => bool) public isManager;     // manager accounts\r\n\r\n    /** EVENTS **/\r\n    event ChangedManager(address indexed manager, bool active);\r\n\r\n    /** MODIFIERS **/\r\n    modifier onlyManager() {\r\n        require(isManager[msg.sender], \"is not manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice constructor sets the deployer as a manager\r\n    */\r\n    constructor() public {\r\n        setManager(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @notice enable/disable an account to be a manager\r\n     * @param _manager address address of the manager to create/alter\r\n     * @param _active bool flag that shows if the manager account is active\r\n     */\r\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\r\n        isManager[_manager] = _active;\r\n        emit ChangedManager(_manager, _active);\r\n    }\r\n}\r\n\r\n/* eof (./contracts/management/Manageable.sol) */\r\n/* file: ./contracts/whitelist/GlobalWhitelist.sol */\r\n/**\r\n * @title Global Whitelist Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\ncontract GlobalWhitelist is Ownable, Manageable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\r\n    bool public isWhitelisting = true;             // whitelisting enabled by default\r\n\r\n    /** EVENTS **/\r\n    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\r\n    event GlobalWhitelistDisabled(address indexed manager);\r\n    event GlobalWhitelistEnabled(address indexed manager);\r\n\r\n    /**\r\n    * @dev add an address to the whitelist\r\n    * @param _address address\r\n    */\r\n    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = true;\r\n        emit ChangedWhitelisting(_address, true);\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param _addresses addresses array\r\n    */\r\n    function addAddressesToWhitelist(address[] memory _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addAddressToWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param _address address\r\n    */\r\n    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = false;\r\n        emit ChangedWhitelisting(_address, false);\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param _addresses addresses\r\n    */\r\n    function removeAddressesFromWhitelist(address[] memory _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            removeAddressFromWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /** \r\n    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\r\n    */\r\n    function toggleWhitelist() public onlyOwner {\r\n        isWhitelisting ? isWhitelisting = false : isWhitelisting = true;\r\n        if (isWhitelisting) {\r\n            emit GlobalWhitelistEnabled(msg.sender);\r\n        } else {\r\n            emit GlobalWhitelistDisabled(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n/* eof (./contracts/whitelist/GlobalWhitelist.sol) */\r\n/* file: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol */\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol) */\r\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\r\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol) */\r\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol) */\r\n/* file: openzeppelin-solidity/contracts/access/Roles.sol */\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/access/Roles.sol) */\r\n/* file: openzeppelin-solidity/contracts/access/roles/PauserRole.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/access/roles/PauserRole.sol) */\r\n/* file: openzeppelin-solidity/contracts/lifecycle/Pausable.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/lifecycle/Pausable.sol) */\r\n/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol */\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol) */\r\n/* file: ./contracts/token/ERC20/IERC20Snapshot.sol */\r\n/**\r\n * @title Interface ERC20 SnapshotToken (abstract contract)\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;  \r\n\r\n\r\n/* solhint-disable no-empty-blocks */\r\ncontract IERC20Snapshot {   \r\n    /**\r\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    * @param _owner The address from which the balance will be retrieved\r\n    * @param _blockNumber The block number when the balance is queried\r\n    * @return The balance at `_blockNumber`\r\n    */\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {}\r\n\r\n    /**\r\n    * @notice Total amount of tokens at a specific `_blockNumber`.\r\n    * @param _blockNumber The block number when the totalSupply is queried\r\n    * @return The total amount of tokens at `_blockNumber`\r\n    */\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {}\r\n}\r\n\r\n/* eof (./contracts/token/ERC20/IERC20Snapshot.sol) */\r\n/* file: ./contracts/token/ERC20/ERC20Snapshot.sol */\r\n/**\r\n * @title ERC20 Snapshot Token\r\n * inspired by Jordi Baylina's MiniMeToken to record historical balances\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;  \r\n\r\n\r\n\r\ncontract ERC20Snapshot is IERC20Snapshot, ERC20 {   \r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev `Snapshot` is the structure that attaches a block number to a\r\n    * given value. The block number attached is the one that last changed the value\r\n    */\r\n    struct Snapshot {\r\n        uint128 fromBlock;  // `fromBlock` is the block number at which the value was generated from\r\n        uint128 value;  // `value` is the amount of tokens at a specific block number\r\n    }\r\n\r\n    /**\r\n    * @dev `_snapshotBalances` is the map that tracks the balance of each address, in this\r\n    * contract when the balance changes the block number that the change\r\n    * occurred is also included in the map\r\n    */\r\n    mapping (address => Snapshot[]) private _snapshotBalances;\r\n\r\n    // Tracks the history of the `_totalSupply` & '_mintedSupply' of the token\r\n    Snapshot[] private _snapshotTotalSupply;\r\n\r\n    /*** FUNCTIONS ***/\r\n    /** OVERRIDE\r\n    * @dev Send `_value` tokens to `_to` from `msg.sender`\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of tokens to be transferred\r\n    * @return Whether the transfer was successful or not\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool result) {\r\n        result = super.transfer(_to, _value);\r\n        createSnapshot(msg.sender, _to);\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @dev Send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\r\n    * @param _from The address holding the tokens being transferred\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of tokens to be transferred\r\n    * @return True if the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool result) {\r\n        result = super.transferFrom(_from, _to, _value);\r\n        createSnapshot(_from, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    * @param _owner The address from which the balance will be retrieved\r\n    * @param _blockNumber The block number when the balance is queried\r\n    * @return The balance at `_blockNumber`\r\n    */\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {\r\n        return getValueAt(_snapshotBalances[_owner], _blockNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Total supply cap of tokens at a specific `_blockNumber`.\r\n    * @param _blockNumber The block number when the totalSupply is queried\r\n    * @return The total supply cap of tokens at `_blockNumber`\r\n    */\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {\r\n        return getValueAt(_snapshotTotalSupply, _blockNumber);\r\n    }\r\n\r\n    /*** Internal functions ***/\r\n    /**\r\n    * @dev Updates snapshot mappings for _from and _to and emit an event\r\n    * @param _from The address holding the tokens being transferred\r\n    * @param _to The address of the recipient\r\n    * @return True if the transfer was successful\r\n    */\r\n    function createSnapshot(address _from, address _to) internal {\r\n        updateValueAtNow(_snapshotBalances[_from], balanceOf(_from));\r\n        updateValueAtNow(_snapshotBalances[_to], balanceOf(_to));\r\n    }\r\n\r\n    /**\r\n    * @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    * @param checkpoints The history of values being queried\r\n    * @param _block The block number to retrieve the value at\r\n    * @return The number of tokens being queried\r\n    */\r\n    function getValueAt(Snapshot[] storage checkpoints, uint _block) internal view returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\r\n            return checkpoints[checkpoints.length.sub(1)].value;\r\n        }\r\n\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        } \r\n\r\n        // Binary search of the value in the array\r\n        uint min;\r\n        uint max = checkpoints.length.sub(1);\r\n\r\n        while (max > min) {\r\n            uint mid = (max.add(min).add(1)).div(2);\r\n            if (checkpoints[mid].fromBlock <= _block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /**\r\n    * @dev `updateValueAtNow` used to update the `_snapshotBalances` map and the `_snapshotTotalSupply`\r\n    * @param checkpoints The history of data being updated\r\n    * @param _value The new number of tokens\r\n    */\r\n    function updateValueAtNow(Snapshot[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\r\n            checkpoints.push(Snapshot(uint128(block.number), uint128(_value)));\r\n        } else {\r\n            checkpoints[checkpoints.length.sub(1)].value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n/* eof (./contracts/token/ERC20/ERC20Snapshot.sol) */\r\n/* file: ./contracts/token/ERC20/ERC20ForcedTransfer.sol */\r\n/**\r\n * @title ERC20Confiscatable\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;  \r\n\r\n\r\n\r\ncontract ERC20ForcedTransfer is Ownable, ERC20 {\r\n    /*** EVENTS ***/\r\n    event ForcedTransfer(address indexed account, uint256 amount, address indexed receiver);\r\n\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @notice takes funds from _confiscatee and sends them to _receiver\r\n    * @param _confiscatee address who's funds are being confiscated\r\n    * @param _receiver address who's receiving the funds \r\n    */\r\n    function forceTransfer(address _confiscatee, address _receiver) public onlyOwner {\r\n        uint256 balance = balanceOf(_confiscatee);\r\n        _transfer(_confiscatee, _receiver, balance);\r\n        emit ForcedTransfer(_confiscatee, balance, _receiver);\r\n    }\r\n}\r\n\r\n/* eof (./contracts/token/ERC20/ERC20ForcedTransfer.sol) */\r\n/* file: ./contracts/token/ERC20/ERC20Whitelist.sol */\r\n/**\r\n * @title ERC20Whitelist\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;  \r\n\r\n\r\n\r\ncontract ERC20Whitelist is Ownable, ERC20 {   \r\n    GlobalWhitelist public whitelist;\r\n    bool public isWhitelisting = true;  // default to true\r\n\r\n    /** EVENTS **/\r\n    event ESTWhitelistingEnabled();\r\n    event ESTWhitelistingDisabled();\r\n\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @notice disables whitelist per individual EST\r\n    * @dev parnent contract, ExporoTokenFactory, is owner\r\n    */\r\n    function toggleWhitelist() external onlyOwner {\r\n        isWhitelisting ? isWhitelisting = false : isWhitelisting = true;\r\n        if (isWhitelisting) {\r\n            emit ESTWhitelistingEnabled();\r\n        } else {\r\n            emit ESTWhitelistingDisabled();\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return bool\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (checkWhitelistEnabled()) {\r\n            checkIfWhitelisted(msg.sender);\r\n            checkIfWhitelisted(_to);\r\n        }\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    * @return bool\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (checkWhitelistEnabled()) {\r\n            checkIfWhitelisted(_from);\r\n            checkIfWhitelisted(_to);\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev check if whitelisting is in effect versus local and global bools\r\n    * @return bool\r\n    */\r\n    function checkWhitelistEnabled() public view returns (bool) {\r\n        // local whitelist\r\n        if (isWhitelisting) {\r\n            // global whitelist\r\n            if (whitelist.isWhitelisting()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*** INTERNAL/PRIVATE ***/\r\n    /**\r\n    * @dev check if the address has been whitelisted by the Whitelist contract\r\n    * @param _account address of the account to check\r\n    */\r\n    function checkIfWhitelisted(address _account) internal view {\r\n        require(whitelist.isWhitelisted(_account), \"not whitelisted\");\r\n    }\r\n}\r\n\r\n/* eof (./contracts/token/ERC20/ERC20Whitelist.sol) */\r\n/* file: ./contracts/token/ERC20/ERC20DocumentRegistry.sol */\r\n/**\r\n * @title ERC20 Document Registry Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\n pragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @notice Prospectus and Quarterly Reports stored hashes via IPFS\r\n * @dev read IAgreement for details under /contracts/neufund/standards\r\n*/\r\n// solhint-disable not-rely-on-time\r\ncontract ERC20DocumentRegistry is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct HashedDocument {\r\n        uint256 timestamp;\r\n        string documentUri;\r\n    }\r\n\r\n    // array of all documents \r\n    HashedDocument[] private _documents;\r\n\r\n    event LogDocumentedAdded(string documentUri, uint256 documentIndex);\r\n\r\n    /**\r\n    * @notice adds a document's uri from IPFS to the array\r\n    * @param documentUri string\r\n    */\r\n    function addDocument(string memory documentUri) public onlyOwner {\r\n        require(bytes(documentUri).length > 0, \"invalid documentUri\");\r\n\r\n        HashedDocument memory document = HashedDocument({\r\n            timestamp: block.timestamp,\r\n            documentUri: documentUri\r\n        });\r\n\r\n        _documents.push(document);\r\n\r\n        emit LogDocumentedAdded(documentUri, _documents.length.sub(1));\r\n    }\r\n\r\n    /**\r\n    * @notice fetch the latest document on the array\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function currentDocument() public view \r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(_documents.length > 0, \"no documents exist\");\r\n            uint256 last = _documents.length.sub(1);\r\n\r\n            HashedDocument storage document = _documents[last];\r\n            return (document.timestamp, document.documentUri, last);\r\n        }\r\n\r\n    /**\r\n    * @notice adds a document's uri from IPFS to the array\r\n    * @param documentIndex uint256\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function getDocument(uint256 documentIndex) public view\r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(documentIndex < _documents.length, \"invalid index\");\r\n\r\n            HashedDocument storage document = _documents[documentIndex];\r\n            return (document.timestamp, document.documentUri, documentIndex);\r\n        }\r\n\r\n    /**\r\n    * @notice return the total amount of documents in the array\r\n    * @return uint256\r\n    */\r\n    function documentCount() public view returns (uint256) {\r\n        return _documents.length;\r\n    }\r\n}\r\n\r\n/* eof (./contracts/token/ERC20/ERC20DocumentRegistry.sol) */\r\n/* file: ./contracts/exporo/ExporoToken.sol */\r\n/**\r\n * @title Exporo Token Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\ncontract SampleToken is Ownable, ERC20, ERC20Detailed {\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @dev constructor\r\n    * @param _name string\r\n    * @param _symbol string\r\n    * @param _decimal uint8\r\n    * @param _initialSupply uint256 initial total supply cap. can be 0\r\n    * @param _recipient address to recieve the tokens\r\n    */\r\n    /* solhint-disable */\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimal, uint256 _initialSupply, address _recipient)\r\n        public \r\n        ERC20Detailed(_name, _symbol, _decimal) {\r\n            _mint(_recipient, _initialSupply);\r\n        }\r\n    /* solhint-enable */\r\n}\r\n\r\n/* eof (./contracts/exporo/ExporoToken.sol) */\r\n/* file: ./contracts/exporo/ExporoTokenFactory.sol */\r\n/**\r\n * @title Exporo Token Factory Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/* solhint-disable max-line-length */\r\n/* solhint-disable separate-by-one-line-in-contract */\r\ncontract SampleTokenFactory is Ownable, Manageable {\r\n    address public whitelist;\r\n\r\n    /*** EVENTS ***/\r\n    event NewTokenDeployed(address indexed contractAddress, string name, string symbol, uint8 decimals);\r\n   \r\n\r\n    /**\r\n    * @dev allows owner to launch a new token with a new name, symbol, and decimals.\r\n    * Defaults to using whitelist stored in this contract. If _whitelist is address(0), else it will use\r\n    * _whitelist as the param to pass into the new token's constructor upon deployment \r\n    * @param _name string\r\n    * @param _symbol string\r\n    * @param _decimals uint8 \r\n    * @param _initialSupply uint256 initial total supply cap\r\n    * @param _recipient address to recieve the initial token supply\r\n    */\r\n    function newToken(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply, address _recipient) \r\n        public \r\n        onlyManager \r\n        onlyValidAddress(_recipient)\r\n        returns (address) {\r\n            require(bytes(_name).length > 0, \"name cannot be blank\");\r\n            require(bytes(_symbol).length > 0, \"symbol cannot be blank\");\r\n            require(_initialSupply > 0, \"supply cannot be 0\");\r\n\r\n            SampleToken token = new SampleToken(_name, _symbol, _decimals, _initialSupply, _recipient);\r\n\r\n            emit NewTokenDeployed(address(token), _name, _symbol, _decimals);\r\n            \r\n            return address(token);\r\n        }\r\n}\r\n\r\n/* eof (./contracts/exporo/ExporoTokenFactory.sol) */","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"NewTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ChangedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SampleTokenFactory","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://666d02bbe668c9bab07946e6ca2c4681a5831ee4ef49febcfeca942dc5735a25"}]}