{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n//TODO:\r\n//\r\n//test - contributions, reclaims, fallback function, multiple loans\r\n//do we need a true start time?\r\n// allow people to contribute more than 99 million on the app\r\n// make it clear that 1 period is 60 seconds\r\n// Add UCASH address to HTML\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//This proxy contract is necessary because our oracle uses the Transfer event to detect incoming transfers, and can't distiguish between transfer and transferFrom'\r\n//users call contribute on the proxy, and the proxy transfers UCASH from the user to itself, then transfers UCASH to the ucollateral contract\r\n//this allows us to differentiate between contributions that use approve and transfer from, and contributions that occur when ucash is sent directly to the ucollateral contract.\r\ncontract ProxyContributor{\r\n\r\n    UCOLLATERAL U;\r\n\r\n    address public UCASHAddress;\r\n\r\n    constructor (address _UCASHAddress) public{\r\n        U = UCOLLATERAL(msg.sender);\r\n        UCASHAddress = _UCASHAddress;\r\n    }\r\n\r\n    function contribute() public {\r\n        uint allowedAmount = ERC20(UCASHAddress).allowance(msg.sender,address(this));\r\n        ERC20(UCASHAddress).transferFrom(msg.sender,address(this),allowedAmount);\r\n        ERC20(UCASHAddress).transfer(address(U),allowedAmount);\r\n\r\n        U.contributeByProxyContract(msg.sender,allowedAmount);\r\n\r\n    }\r\n}\r\n\r\ncontract UCOLLATERAL {\r\n    uint public StageAmount = 10**6*10**8;  //1 million UCASH per stage\r\n    uint public RemainingInStage = StageAmount; //Amount remaining in current stage\r\n    uint BPNumerator = 21; // Bounty Percentage Numerator\r\n    uint BPDenominator = 10000; // Bounty Percentage Denominator\r\n    uint public StageValue = BPNumerator*BountyPool/BPDenominator;  // Total value allocated to current Stage\r\n    uint public BountyPool; //Total UCASH available in the Bounty Pool\r\n\r\n    uint periods = 30;              //how many periods this loan lasts\r\n    uint period = 1 days;       //period length\r\n\r\n    uint specialReclaimValue = 110000; //Special Value to send contract, that triggers reclaim of loan. currently 0.0011 UCASH or 110000 wei\r\n\r\n    uint recirculationIndex; //Index to keep track of which loans have been auto reclaimed. For lateFeesToBountyPool function. Loops back to 0 when it reaches the end of ListofLoans\r\n\r\n    address public UCASHAddress;\r\n    uint decimals = 8;\r\n\r\n    address public owner;\r\n    ProxyContributor P;\r\n    address public Proxy;\r\n\r\n\r\nmodifier onlyOwner()\r\n    {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n\r\n    event Contribution(address contributor, uint amountContributed, uint amountBounty, uint maturationDate);\r\n    event Reclaimed(address contributor, uint amountReclaimed, uint amountPenalty);\r\n\r\nstruct Loan {\r\n    uint totalContribution;\r\n    uint bounty;\r\n    uint contractTime;\r\n    uint start;\r\n    uint recirculated;\r\n    uint arrayIndex;\r\n}\r\n\r\nmapping(address=>Loan) public Loans;\r\naddress[] public ListofLoans;\r\n\r\nconstructor() public {\r\n    CalculateStageValue();\r\n    owner = msg.sender;\r\n    UCASHAddress = 0x92e52a1A235d9A103D970901066CE910AAceFD37;\r\n\r\n    P = new ProxyContributor(UCASHAddress);\r\n    Proxy = address(P);\r\n}\r\n\r\n//Reclaim your loan by sending a transaction\r\nfunction() external payable{\r\n    if(loanMatured(msg.sender) || msg.value == specialReclaimValue){\r\n        reclaimInternal(msg.sender);\r\n    }\r\n}\r\n\r\nfunction contributeByProxyContract(address contributor, uint contribution) public {\r\n    require(msg.sender==Proxy);\r\n    contributeInternal(contributor,contribution);\r\n}\r\n\r\n//oracle calls this function everytime a UCASH transfer is made to the contract address\r\nfunction contributeByOracle(address contributor, uint contribution) public onlyOwner{\r\n    contributeInternal(contributor,contribution);\r\n}\r\nfunction contributeInternal(address contributor, uint contribution) internal returns(bool){\r\n    if (loanMatured(contributor) || contribution == specialReclaimValue){\r\n        reclaimInternal(contributor);\r\n    }\r\n\r\n    Loan memory memLoan = Loans[contributor];\r\n\r\n    if (memLoan.start == 0){\r\n        memLoan.start = now;\r\n        memLoan.contractTime = periods * period;\r\n        memLoan.arrayIndex = ListofLoans.length;\r\n        ListofLoans.push(contributor);\r\n    }\r\n\r\n    uint timeElapsed = now - memLoan.start;\r\n    uint rollBackTime = timeElapsed*contribution/(memLoan.totalContribution+contribution);\r\n\r\n    uint Bounty;\r\n\r\n    uint amountMemory = contribution;\r\n\r\n    while(amountMemory > RemainingInStage){\r\n        Bounty += RemainingInStage*StageValue/StageAmount;\r\n        amountMemory -=RemainingInStage;\r\n        BountyPool -= RemainingInStage*StageValue/StageAmount;\r\n\r\n        CalculateStageValue();\r\n        RemainingInStage = StageAmount;\r\n    }\r\n\r\n    Bounty += amountMemory*StageValue/StageAmount;\r\n    RemainingInStage -= amountMemory;\r\n    BountyPool -= amountMemory*StageValue/StageAmount;\r\n\r\n    memLoan.totalContribution += contribution;\r\n    memLoan.bounty += Bounty;\r\n    memLoan.start += rollBackTime;\r\n    Loans[contributor] = memLoan;\r\n\r\n    emit Contribution(contributor, contribution, Bounty, memLoan.start+memLoan.contractTime);\r\n}\r\n\r\nfunction reclaim() public{\r\n    reclaimInternal(msg.sender);\r\n}\r\n\r\nfunction reclaimInternal(address contributor) internal{\r\n\r\n    uint UCASHtoSend;\r\n    uint penalty;\r\n\r\n    (UCASHtoSend,penalty) = ifClaimedNow(contributor);\r\n\r\n    transferUCASH(contributor,UCASHtoSend);\r\n\r\n    if(!loanMatured(contributor)){\r\n        BountyPool += Loans[contributor].bounty;\r\n    }\r\n\r\n    BountyPool += penalty;\r\n    BountyPool -= Loans[contributor].recirculated;\r\n\r\n    //re-arrange Array. Replace current element with last element, and delete last element.\r\n    uint currentArrayIndex = Loans[contributor].arrayIndex;\r\n    address replacingLoan = ListofLoans[ListofLoans.length - 1];\r\n    Loans[replacingLoan].arrayIndex = currentArrayIndex;\r\n    ListofLoans[currentArrayIndex] = replacingLoan;\r\n\r\n    delete Loans[contributor];\r\n    ListofLoans.length--;\r\n\r\n    CalculateStageValue();\r\n}\r\n\r\nfunction ifClaimedNowPublic() public view returns(uint,uint){\r\n    return ifClaimedNow(msg.sender);\r\n}\r\n\r\nfunction ifClaimedNow(address contributor) public view returns(uint ,uint){\r\n    Loan memory memLoan = Loans[contributor];\r\n    if (memLoan.start == 0){\r\n        return (0,0);\r\n    }\r\n\r\n    uint CancellationFee; //fraction out of 1000000\r\n    uint penalty;\r\n\r\n    if (!loanMatured(contributor)){\r\n         if((now - memLoan.start) <= 3 days){\r\n            CancellationFee = 0;\r\n       }else {\r\n            uint elapsedPeriods = (now-memLoan.start)/(period);\r\n            CancellationFee = 210000*(periods-elapsedPeriods)/periods;\r\n       }\r\n        penalty = (memLoan.totalContribution*CancellationFee)/1000000;\r\n        memLoan.bounty = 0;\r\n    } else{\r\n        penalty = getLateFee(contributor);\r\n    }\r\n\r\n    uint UCASHtoSend = memLoan.totalContribution + memLoan.bounty - penalty;\r\n    return (UCASHtoSend,penalty);\r\n}\r\n\r\nfunction CalculateStageValue() internal{\r\n    StageValue = BPNumerator*BountyPool/BPDenominator;\r\n}\r\n\r\nfunction loanMatured(address contributor) private view returns (bool){\r\n    if(Loans[contributor].start == 0){\r\n        return false;\r\n    }\r\n\r\n    if((now > (Loans[contributor].start+Loans[contributor].contractTime))){\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction contractBalance() public view returns(uint){\r\n    return ERC20(UCASHAddress).balanceOf(address(this));\r\n}\r\n\r\nfunction secondsLeftPublic() public view returns(uint){\r\n    return secondsLeft(msg.sender);\r\n}\r\n\r\nfunction secondsLeft(address contributor) public view returns(uint){\r\n    if(loanMatured(contributor)){\r\n        return 0;\r\n    } else if(Loans[contributor].start ==0) {\r\n        return 0;\r\n    } else{\r\n        return (Loans[contributor].start + Loans[contributor].contractTime - now);\r\n    }\r\n}\r\n\r\nfunction getLateFee(address contributor) public view returns(uint){\r\n    require(loanMatured(contributor));\r\n    Loan memory memLoan = Loans[contributor];\r\n    uint totalReward = memLoan.totalContribution + memLoan.bounty;\r\n    uint endDate = memLoan.start + memLoan.contractTime;\r\n\r\n    uint periodsLateBy =  (now - endDate)/period;\r\n\r\n\r\n    uint totalPenalty;\r\n    uint periodPenalty;\r\n        if (periodsLateBy>=2000){\r\n            totalPenalty = totalReward;\r\n        } else if (periodsLateBy<=10){\r\n            return(0);\r\n        } else{\r\n        uint i;\r\n        while(i++<uint(periodsLateBy-10)){\r\n            periodPenalty = totalReward*21/1000;\r\n                totalPenalty += periodPenalty; //penalize 2.1% of remaining reward every month;\r\n                totalReward -= periodPenalty;\r\n        }\r\n        }\r\n\r\n        return(totalPenalty);\r\n}\r\n\r\nfunction isLateBy(address contributor) public view returns(uint){\r\n    if(Loans[contributor].start == 0){\r\n        return 0;\r\n    }\r\n     uint endDate = Loans[contributor].start + Loans[contributor].contractTime;\r\n     if(now<endDate){\r\n        return 0;\r\n     }else{\r\n        return  (now - endDate)/period;\r\n     }\r\n\r\n}\r\n\r\nfunction numLoans() public view returns (uint) {\r\n    return ListofLoans.length;\r\n}\r\n\r\nfunction nowwww() public view  returns(uint){\r\n   return now;\r\n}\r\n\r\nfunction calculateBounty(uint contribution) public view returns(uint){\r\n    uint Bounty;\r\n    uint _BountyPool = BountyPool;\r\n    uint _RemainingInStage = RemainingInStage;\r\n    uint _StageValue = StageValue;\r\n\r\n    while(contribution > _RemainingInStage){\r\n        Bounty += _RemainingInStage*_StageValue/StageAmount;\r\n        contribution -= _RemainingInStage;\r\n        _BountyPool -= _RemainingInStage*_StageValue/StageAmount;\r\n\r\n        _StageValue = BPNumerator*_BountyPool/BPDenominator;\r\n        _RemainingInStage = StageAmount;\r\n    }\r\n\r\n    Bounty += contribution*_StageValue/StageAmount;\r\n\r\n    return Bounty;\r\n}\r\n\r\n\r\n\r\nfunction addFunds(uint _amount) public payable onlyOwner{\r\n    BountyPool+= _amount;\r\n    CalculateStageValue();\r\n}\r\n\r\nfunction removeFunds(uint _amount) onlyOwner public {\r\n    BountyPool -= _amount;\r\n    transferUCASH(owner,_amount);\r\n    CalculateStageValue();\r\n}\r\n\r\n\r\nfunction transferUCASH(address _recipient, uint _amount) private{\r\n    ERC20(UCASHAddress).transfer(_recipient,_amount);\r\n}\r\n\r\nfunction calculateAllReclaimedNow() public view returns(uint){\r\n    uint total;\r\n    uint i;\r\n    for(i=0;i<ListofLoans.length;i++){\r\n        uint reclaimable;\r\n        (reclaimable,) = ifClaimedNow(ListofLoans[i]);\r\n        total += reclaimable;\r\n    }\r\n    return total;\r\n}\r\n\r\nfunction CalculateAllocatedUcash() public view returns(uint){\r\n     uint total;\r\n    uint i;\r\n    for(i=0;i<ListofLoans.length;i++){\r\n        total += Loans[ListofLoans[i]].totalContribution + Loans[ListofLoans[i]].bounty;\r\n    }\r\n    return total;\r\n}\r\n\r\n\r\n\r\n//Recirculate All Late fees to the bountyPool, and AutoReclaim loans more than 100 periods late.\r\nfunction recirculateLateFees(uint iterations) public {\r\n    if(recirculationIndex>=ListofLoans.length){\r\n        recirculationIndex = 0;\r\n    }\r\n    uint i = recirculationIndex;\r\n    uint j;\r\n    if (i+iterations>ListofLoans.length){\r\n        j = ListofLoans.length;\r\n    } else{\r\n        j = i + iterations;\r\n    }\r\n    for(i;i<j;i++){\r\n        address contributor = ListofLoans[i];\r\n        if(isLateBy(contributor)>=600){\r\n            reclaimInternal(contributor);       //autoreclaim the loan if the loan is late by more than 100 periods\r\n            //reclaimInternal deletes ListofLoans[i] and moves last element of ListofLoans into ListofLoans[i]\r\n            i--; j--;                           //shift the loop back by one interval, shorten loop by one interval.  Number of loops remains the same.\r\n        }else if(loanMatured(contributor)){\r\n             uint amountToRecirculate = getLateFee(contributor) - Loans[contributor].recirculated;\r\n             Loans[contributor].recirculated += amountToRecirculate;\r\n             BountyPool += amountToRecirculate;\r\n           }\r\n        }\r\n\r\n    recirculationIndex = j;\r\n}\r\n\r\n    function killswitch() public onlyOwner returns (bool){\r\n        uint i;\r\n        while (i++<500 && ListofLoans.length>0){\r\n            address contributor = ListofLoans[ListofLoans.length-1];\r\n            Loan memory memLoan = Loans[contributor];\r\n            ERC20(UCASHAddress).transfer(contributor, memLoan.totalContribution-memLoan.recirculated);\r\n            ListofLoans.length--;\r\n        }\r\n\r\n    if(ListofLoans.length==0){\r\n        ERC20(UCASHAddress).transfer(owner,contractBalance());\r\n        selfdestruct(address(this));\r\n\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"BountyPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowwww\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsLeftPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iterations\",\"type\":\"uint256\"}],\"name\":\"recirculateLateFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"ifClaimedNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"contributeByOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killswitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateAllReclaimedNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ifClaimedNowPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"getLateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"calculateBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"secondsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CalculateAllocatedUcash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isLateBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RemainingInStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ListofLoans\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Loans\",\"outputs\":[{\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"name\":\"bounty\",\"type\":\"uint256\"},{\"name\":\"contractTime\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"recirculated\",\"type\":\"uint256\"},{\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"contributeByProxyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numLoans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UCASHAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountContributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maturationDate\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountReclaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountPenalty\",\"type\":\"uint256\"}],\"name\":\"Reclaimed\",\"type\":\"event\"}]","ContractName":"UCOLLATERAL","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57d67b96cdd48d24efbd0b7aa816ebe7b5537053977e08398ea6d5c501cd9c6d"}]}