{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\npragma solidity 0.5.2;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\ncontract Bridge {\r\n\r\n  event NewHeight(uint256 height, bytes32 indexed root);\r\n  event NewOperator(address operator);\r\n\r\n  struct Period {\r\n    uint32 height;  // the height of last block in period\r\n    uint32 timestamp;\r\n  }\r\n\r\n  bytes32 constant GENESIS = 0x4920616d207665727920616e6772792c20627574206974207761732066756e21;\r\n\r\n  bytes32 public tipHash; // hash of first period that has extended chain to some height\r\n  uint256 public genesisBlockNumber;\r\n  uint256 parentBlockInterval; // how often epochs can be submitted max\r\n  uint256 public lastParentBlock; // last ethereum block when epoch was submitted\r\n  address public operator; // the operator contract\r\n\r\n  mapping(bytes32 => Period) public periods;\r\n\r\n  function getParentBlockInterval() public view returns (uint256) {\r\n    return parentBlockInterval;\r\n  }\r\n\r\n  function setParentBlockInterval(uint256 _parentBlockInterval) public {\r\n    parentBlockInterval = _parentBlockInterval;\r\n  }\r\n\r\n  function submitPeriod(\r\n    bytes32 _prevHash, \r\n    bytes32 _root) \r\n  public returns (uint256 newHeight) {\r\n\r\n  }\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Adminable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Adminable is Initializable {\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, fails.\r\n   */\r\n  modifier ifAdmin() {\r\n    require(msg.sender == _admin());\r\n    _;\r\n  }\r\n\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n    /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract TransferrableToken is ERC165 {\r\n  function transferFrom(address _from, address _to, uint256 _valueOrTokenId) public;\r\n  function approve(address _to, uint256 _value) public;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PriorityQueue\r\n * @dev A priority queue implementation\r\n */\r\n\r\nlibrary PriorityQueue {\r\n  using SafeMath for uint256;\r\n\r\n  struct Token {\r\n    TransferrableToken addr;\r\n    uint256[] heapList;\r\n    uint256 currentSize;\r\n  }\r\n\r\n  function insert(Token storage self, uint256 k) public {\r\n    self.heapList.push(k);\r\n    self.currentSize = self.currentSize.add(1);\r\n    percUp(self, self.currentSize);\r\n  }\r\n\r\n  function minChild(Token storage self, uint256 i) public view returns (uint256) {\r\n    if (i.mul(2).add(1) > self.currentSize) {\r\n      return i.mul(2);\r\n    } else {\r\n      if (self.heapList[i.mul(2)] < self.heapList[i.mul(2).add(1)]) {\r\n        return i.mul(2);\r\n      } else {\r\n        return i.mul(2).add(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getMin(Token storage self) public view returns (uint256) {\r\n    return self.heapList[1];\r\n  }\r\n\r\n  function delMin(Token storage self) public returns (uint256) {\r\n    uint256 retVal = self.heapList[1];\r\n    self.heapList[1] = self.heapList[self.currentSize];\r\n    delete self.heapList[self.currentSize];\r\n    self.currentSize = self.currentSize.sub(1);\r\n    percDown(self, 1);\r\n    self.heapList.length = self.heapList.length.sub(1);\r\n    return retVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percUp(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    while (newVal < self.heapList[i.div(2)]) {\r\n      self.heapList[i] = self.heapList[i.div(2)];\r\n      i = i.div(2);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percDown(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    uint256 mc = minChild(self, i);\r\n    while (mc <= self.currentSize && newVal > self.heapList[mc]) {\r\n      self.heapList[i] = self.heapList[mc];\r\n      i = mc;\r\n      mc = minChild(self, i);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n}\r\n\r\ncontract Vault is Adminable {\r\n\r\n  event NewToken(address indexed tokenAddr, uint16 color);\r\n\r\n  Bridge public bridge;\r\n\r\n  uint16 public erc20TokenCount;\r\n  uint16 public nftTokenCount;\r\n\r\n  mapping(uint16 => PriorityQueue.Token) public tokens;\r\n  mapping(address => bool) public tokenColors;\r\n\r\n  function initialize(Bridge _bridge) public initializer {\r\n    bridge = _bridge;\r\n  } \r\n\r\n  function getTokenAddr(uint16 _color) public view returns (address) {\r\n    return address(tokens[_color].addr);\r\n  }\r\n\r\n  function registerToken(address _token, bool _isERC721) public ifAdmin {\r\n    // make sure token is not 0x0 and that it has not been registered yet\r\n    require(_token != address(0), \"Tried to register 0x0 address\");\r\n    require(!tokenColors[_token], \"Token already registered\");\r\n    uint16 color;\r\n    if (_isERC721) {\r\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \"Not an ERC721 token\");\r\n      color = 32769 + nftTokenCount; // NFT color namespace starts from 2^15 + 1\r\n      nftTokenCount += 1;\r\n    } else {\r\n      require(ERC20(_token).totalSupply() >= 0, \"Not an ERC20 token\");\r\n      color = erc20TokenCount;\r\n      erc20TokenCount += 1;\r\n    }\r\n    uint256[] memory arr = new uint256[](1);\r\n    tokenColors[_token] = true;\r\n    tokens[color] = PriorityQueue.Token({\r\n      addr: TransferrableToken(_token),\r\n      heapList: arr,\r\n      currentSize: 0\r\n    });\r\n    emit NewToken(_token, color);\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[50] private ______gap;\r\n\r\n}\r\n\r\ncontract DepositHandler is Vault {\r\n\r\n  event NewDeposit(\r\n    uint32 indexed depositId, \r\n    address indexed depositor, \r\n    uint256 indexed color, \r\n    uint256 amount\r\n  );\r\n  event MinGasPrice(uint256 minGasPrice);\r\n\r\n  struct Deposit {\r\n    uint64 time;\r\n    uint16 color;\r\n    address owner;\r\n    uint256 amount;\r\n  }\r\n\r\n  uint32 public depositCount;\r\n  uint256 public minGasPrice;\r\n\r\n  mapping(uint32 => Deposit) public deposits;\r\n\r\n  function setMinGasPrice(uint256 _minGasPrice) public ifAdmin {\r\n    minGasPrice = _minGasPrice;\r\n    emit MinGasPrice(minGasPrice);\r\n  }\r\n\r\n   /**\r\n   * @notice Add to the network `(_amountOrTokenId)` amount of a `(_color)` tokens\r\n   * or `(_amountOrTokenId)` token id if `(_color)` is NFT.\r\n   * @dev Token should be registered with the Bridge first.\r\n   * @param _owner Account to transfer tokens from\r\n   * @param _amountOrTokenId Amount (for ERC20) or token ID (for ERC721) to transfer\r\n   * @param _color Color of the token to deposit\r\n   */\r\n  function deposit(address _owner, uint256 _amountOrTokenId, uint16 _color) public {\r\n    TransferrableToken token = tokens[_color].addr;\r\n    require(address(token) != address(0), \"Token color not registered\");\r\n    require(_amountOrTokenId > 0 || _color > 32769, \"no 0 deposits for fungible tokens\");\r\n    token.transferFrom(_owner, address(this), _amountOrTokenId);\r\n\r\n    bytes32 tipHash = bridge.tipHash();\r\n    uint256 timestamp;\r\n    (, timestamp) = bridge.periods(tipHash);\r\n\r\n    depositCount++;\r\n    deposits[depositCount] = Deposit({\r\n      time: uint32(timestamp),\r\n      owner: _owner,\r\n      color: _color,\r\n      amount: _amountOrTokenId\r\n    });\r\n    emit NewDeposit(\r\n      depositCount, \r\n      _owner, \r\n      _color, \r\n      _amountOrTokenId\r\n    );\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\nlibrary TxLib {\r\n\r\n  uint constant internal WORD_SIZE = 32;\r\n  uint constant internal ONES = ~uint(0);\r\n  enum TxType { Deposit, Transfer }\r\n\r\n  struct Outpoint {\r\n    bytes32 hash;\r\n    uint8 pos;\r\n  }\r\n\r\n  struct Input {\r\n    Outpoint outpoint;\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n  }\r\n\r\n  struct Output {\r\n    uint256 value;\r\n    uint16 color;\r\n    address owner;\r\n    uint32 gasPrice;\r\n    bytes msgData;\r\n    bytes32 stateRoot;\r\n  }\r\n\r\n  struct Tx {\r\n    TxType txType;\r\n    Input[] ins;\r\n    Output[] outs;\r\n  }\r\n\r\n  function parseInput(\r\n    TxType _type, bytes memory _txData, uint256 _pos, uint256 offset, Input[] memory _ins\r\n  ) internal pure returns (uint256 newOffset) {\r\n    bytes32 inputData;\r\n    uint8 index;\r\n    if (_type == TxType.Deposit) {\r\n      assembly {\r\n        // load the depositId (4 bytes) starting from byte 2 of tx\r\n        inputData := mload(add(add(offset, 4), _txData))\r\n      }\r\n      inputData = bytes32(uint256(uint32(uint256(inputData))));\r\n      index = 0;\r\n      newOffset = offset + 4;\r\n    } else {\r\n      assembly {\r\n        // load the prevHash (32 bytes) from input\r\n        inputData := mload(add(add(offset, 32), _txData))\r\n        // load the output index (1 byte) from input\r\n        index := mload(add(add(offset, 33), _txData))\r\n      }\r\n      newOffset = offset + 33;\r\n    }\r\n    Outpoint memory outpoint = Outpoint(inputData, index);\r\n    Input memory input = Input(outpoint, 0, 0, 0); // solium-disable-line arg-overflow\r\n    if (_type == TxType.Transfer) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n      assembly {\r\n        r := mload(add(add(offset, 65), _txData))\r\n        s := mload(add(add(offset, 97), _txData))\r\n        v := mload(add(add(offset, 98), _txData))\r\n      }\r\n      input.r = r;\r\n      input.s = s;\r\n      input.v = v;\r\n      newOffset = offset + 33 + 65;\r\n    }\r\n    _ins[_pos] = input;\r\n  }\r\n\r\n  // Copies 'len' bytes from 'srcPtr' to 'destPtr'.\r\n  // NOTE: This function does not check if memory is allocated, it only copies the bytes.\r\n  function memcopy(uint srcPtr, uint destPtr, uint len) internal pure {\r\n    uint offset = 0;\r\n    uint size = len / WORD_SIZE;\r\n    // Copy word-length chunks while possible.\r\n    for (uint i = 0; i < size; i++) {\r\n      offset = i * WORD_SIZE;\r\n      assembly {\r\n        mstore(add(destPtr, offset), mload(add(srcPtr, offset)))\r\n      }\r\n    }\r\n    offset = size*WORD_SIZE;\r\n    uint mask = ONES << 8*(32 - len % WORD_SIZE);\r\n    assembly {\r\n      let nSrc := add(srcPtr, offset)\r\n      let nDest := add(destPtr, offset)\r\n      mstore(nDest, or(and(mload(nSrc), mask), and(mload(nDest), not(mask))))\r\n    }\r\n  }\r\n\r\n  function parseOutput(\r\n    bytes memory _txData, uint256 _pos, uint256 offset, Output[] memory _outs\r\n  ) internal pure returns (uint256 newOffset) {\r\n    uint256 value;\r\n    uint16 color;\r\n    address owner;\r\n    assembly {\r\n      value := mload(add(add(offset, 32), _txData))\r\n      color := mload(add(add(offset, 34), _txData))\r\n      owner := mload(add(add(offset, 54), _txData))\r\n    }\r\n    bytes memory data = new bytes(0);\r\n    Output memory output = Output(value, color, owner, 0, data, 0);  // solium-disable-line arg-overflow\r\n    _outs[_pos] = output;\r\n    newOffset = offset + 54;\r\n  }\r\n\r\n  function parseTx(bytes memory _txData) internal pure returns (Tx memory txn) {\r\n    // read type\r\n    TxType txType;\r\n    uint256 a;\r\n    assembly {\r\n      a := mload(add(0x20, _txData))\r\n    }\r\n    a = a >> 248; // get first byte\r\n    if (a == 2) {\r\n      txType = TxType.Deposit;\r\n    } else if (a == 3) {\r\n      txType = TxType.Transfer;\r\n    } else {\r\n      revert(\"unknown tx type\");\r\n    }\r\n    // read ins and outs\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = a >> 252; // get ins-length nibble\r\n    Input[] memory ins = new Input[](a);\r\n    uint256 offset = 2;\r\n    for (uint i = 0; i < ins.length; i++) {\r\n      offset = parseInput(txType, _txData, i, offset, ins); // solium-disable-line arg-overflow\r\n    }\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = (a >> 248) & 0x0f; // get outs-length nibble\r\n    Output[] memory outs = new Output[](a);\r\n    for (uint256 i = 0; i < outs.length; i++) {\r\n      offset = parseOutput(_txData, i, offset, outs); // solium-disable-line arg-overflow\r\n    }\r\n    txn = Tx(txType, ins, outs);\r\n  }\r\n\r\n  function getSigHash(bytes memory _txData) internal pure returns (bytes32 sigHash) {\r\n    uint256 a;\r\n    assembly {\r\n      a := mload(add(0x20, _txData))\r\n    }\r\n    a = a >> 248;\r\n    // if not transfer, sighash is just tx hash\r\n    require(a == 3);\r\n    // read ins\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = a >> 252; // get ins-length nibble\r\n    bytes memory sigData = new bytes(_txData.length);\r\n    assembly {\r\n      // copy type\r\n      mstore8(add(sigData, 32), byte(0, mload(add(_txData, 32))))\r\n      // copy #inputs / #outputs\r\n      mstore8(add(sigData, 33), byte(1, mload(add(_txData, 32))))\r\n      let offset := 0\r\n      for\r\n        { let i := 0 }\r\n        lt(i, a)\r\n        { i := add(i, 1) }\r\n        {\r\n          mstore(add(sigData, add(34, offset)), mload(add(_txData, add(34, offset))))\r\n          mstore8(add(sigData, add(66, offset)), byte(0, mload(add(_txData, add(66, offset)))))\r\n          offset := add(offset, add(33, 65))\r\n        }\r\n      for\r\n        { let i := add(34, offset) }\r\n        lt(i, add(64, mload(_txData)))\r\n        { i := add(i, 0x20) }\r\n        {\r\n          mstore(add(sigData, i), mload(add(_txData, i)))\r\n        }\r\n    }\r\n\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", uint2str(_txData.length), sigData));\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function getMerkleRoot(\r\n    bytes32 _leaf, uint256 _index, uint256 _offset, bytes32[] memory _proof\r\n  ) internal pure returns (bytes32) {\r\n    bytes32 temp;\r\n    for (uint256 i = _offset; i < _proof.length; i++) {\r\n      temp = _proof[i];\r\n      if (_index % 2 == 0) {\r\n        assembly {\r\n          mstore(0, _leaf)\r\n          mstore(0x20, temp)\r\n          _leaf := keccak256(0, 0x40)\r\n        }\r\n      } else {\r\n        assembly {\r\n          mstore(0, temp)\r\n          mstore(0x20, _leaf)\r\n          _leaf := keccak256(0, 0x40)\r\n        }\r\n      }\r\n      _index = _index / 2;\r\n    }\r\n    return _leaf;\r\n  }\r\n\r\n  //validate that transaction is included to the period (merkle proof)\r\n  function validateProof(\r\n    uint256 _cdOffset, bytes32[] memory _proof\r\n  ) internal pure returns (uint64 txPos, bytes32 txHash, bytes memory txData) {\r\n    uint256 offset = uint8(uint256(_proof[1] >> 248));\r\n    uint256 txLength = uint16(uint256(_proof[1] >> 224));\r\n\r\n    txData = new bytes(txLength);\r\n    assembly {\r\n      calldatacopy(add(txData, 0x20), add(68, add(offset, _cdOffset)), txLength)\r\n    }\r\n    txHash = keccak256(txData);\r\n    txPos = uint64(uint256(_proof[1] >> 160));\r\n    bytes32 root = getMerkleRoot(\r\n      txHash, \r\n      txPos, \r\n      uint8(uint256(_proof[1] >> 240)),\r\n      _proof\r\n    ); \r\n    require(root == _proof[0]);\r\n  }\r\n\r\n  function recoverTxSigner(uint256 offset, bytes32[] memory _proof) internal pure returns (address dest) {\r\n    uint16 txLength = uint16(uint256(_proof[1] >> 224));\r\n    bytes memory txData = new bytes(txLength);\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    assembly {\r\n      calldatacopy(add(txData, 32), add(114, offset), 43)\r\n      r := calldataload(add(157, offset))\r\n      s := calldataload(add(189, offset))\r\n      v := calldataload(add(190, offset))\r\n      calldatacopy(add(txData, 140), add(222, offset), 28) // 32 + 43 + 65\r\n    }\r\n    dest = ecrecover(getSigHash(txData), v, r, s); // solium-disable-line arg-overflow\r\n  }\r\n\r\n  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L886\r\n  // solium-disable-next-line security/no-assign-params\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = byte(uint8(48 + _i % 10));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n}\r\n\r\ncontract ExitHandler is DepositHandler {\r\n\r\n  using PriorityQueue for PriorityQueue.Token;\r\n\r\n  event ExitStarted(\r\n    bytes32 indexed txHash, \r\n    uint8 indexed outIndex, \r\n    uint256 indexed color, \r\n    address exitor, \r\n    uint256 amount\r\n  );\r\n\r\n  struct Exit {\r\n    uint256 amount;\r\n    uint16 color;\r\n    address owner;\r\n    bool finalized;\r\n    uint32 priorityTimestamp;\r\n    uint256 stake;\r\n  }\r\n\r\n  uint256 public exitDuration;\r\n  uint256 public exitStake;\r\n  uint256 public nftExitCounter;\r\n\r\n  /**\r\n   * UTXO → Exit mapping. Contains exits for both NFT and ERC20 colors\r\n   */\r\n  mapping(bytes32 => Exit) public exits;\r\n\r\n  function initializeWithExit(\r\n    Bridge _bridge, \r\n    uint256 _exitDuration, \r\n    uint256 _exitStake) public initializer {\r\n    initialize(_bridge);\r\n    exitDuration = _exitDuration;\r\n    exitStake = _exitStake;\r\n    emit MinGasPrice(0);\r\n  }\r\n\r\n  function setExitStake(uint256 _exitStake) public ifAdmin {\r\n    exitStake = _exitStake;\r\n  }\r\n\r\n  function setExitDuration(uint256 _exitDuration) public ifAdmin {\r\n    exitDuration = _exitDuration;\r\n  }\r\n\r\n  function startExit(\r\n    bytes32[] memory _youngestInputProof, bytes32[] memory _proof,\r\n    uint8 _outputIndex, uint8 _inputIndex\r\n  ) public payable {\r\n    require(msg.value >= exitStake, \"Not enough ether sent to pay for exit stake\");\r\n    uint32 timestamp;\r\n    (, timestamp) = bridge.periods(_proof[0]);\r\n    require(timestamp > 0, \"The referenced period was not submitted to bridge\");\r\n\r\n    if (_youngestInputProof.length > 0) {\r\n      (, timestamp) = bridge.periods(_youngestInputProof[0]);\r\n      require(timestamp > 0, \"The referenced period was not submitted to bridge\");\r\n    }\r\n\r\n    // check exiting tx inclusion in the root chain block\r\n    bytes32 txHash;\r\n    bytes memory txData;\r\n    uint64 txPos;\r\n    (txPos, txHash, txData) = TxLib.validateProof(32 * (_youngestInputProof.length + 2) + 64, _proof);\r\n\r\n    // parse exiting tx and check if it is exitable\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n    TxLib.Output memory out = exitingTx.outs[_outputIndex];\r\n\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) << 120 | uint120(uint256(txHash)));\r\n    require(out.owner == msg.sender, \"Only UTXO owner can start exit\");\r\n    require(out.value > 0, \"UTXO has no value\");\r\n    require(exits[utxoId].amount == 0, \"The exit for UTXO has already been started\");\r\n    require(!exits[utxoId].finalized, \"The exit for UTXO has already been finalized\");\r\n\r\n    uint256 priority;\r\n    if (_youngestInputProof.length > 0) {\r\n      // check youngest input tx inclusion in the root chain block\r\n      bytes32 inputTxHash;\r\n      (txPos, inputTxHash,) = TxLib.validateProof(96, _youngestInputProof);\r\n      require(\r\n        inputTxHash == exitingTx.ins[_inputIndex].outpoint.hash, \r\n        \"Input from the proof is not referenced in exiting tx\"\r\n      );\r\n      \r\n      if (isNft(out.color)) {\r\n        priority = (nftExitCounter << 128) | uint128(uint256(utxoId));\r\n        nftExitCounter++;\r\n      } else {      \r\n        priority = getERC20ExitPriority(timestamp, utxoId, txPos);\r\n      }\r\n    } else {\r\n      require(exitingTx.txType == TxLib.TxType.Deposit, \"Expected deposit tx\");\r\n      if (isNft(out.color)) {\r\n        priority = (nftExitCounter << 128) | uint128(uint256(utxoId));\r\n        nftExitCounter++;\r\n      } else {      \r\n        priority = getERC20ExitPriority(timestamp, utxoId, txPos);\r\n      }\r\n    }\r\n\r\n    tokens[out.color].insert(priority);\r\n\r\n    exits[utxoId] = Exit({\r\n      owner: out.owner,\r\n      color: out.color,\r\n      amount: out.value,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: timestamp\r\n    });\r\n    emit ExitStarted(\r\n      txHash, \r\n      _outputIndex, \r\n      out.color, \r\n      out.owner, \r\n      out.value\r\n    );\r\n  }\r\n\r\n  function startDepositExit(uint256 _depositId) public payable {\r\n    require(msg.value >= exitStake, \"Not enough ether sent to pay for exit stake\");\r\n    // check that deposit exits\r\n    Deposit memory deposit = deposits[uint32(_depositId)];\r\n    require(deposit.owner == msg.sender, \"Only deposit owner can start exit\");\r\n    require(deposit.amount > 0, \"deposit has no value\");\r\n    require(exits[bytes32(_depositId)].amount == 0, \"The exit of deposit has already been started\");\r\n    require(!exits[bytes32(_depositId)].finalized, \"The exit for deposit has already been finalized\");\r\n    \r\n    uint256 priority;\r\n    if (isNft(deposit.color)) {\r\n      priority = (nftExitCounter << 128) | uint128(_depositId);\r\n      nftExitCounter++;\r\n    } else {      \r\n      priority = getERC20ExitPriority(uint32(deposit.time), bytes32(_depositId), 0);\r\n    }\r\n\r\n    tokens[deposit.color].insert(priority);\r\n\r\n    exits[bytes32(_depositId)] = Exit({\r\n      owner: deposit.owner,\r\n      color: deposit.color,\r\n      amount: deposit.amount,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: uint32(now)\r\n    });\r\n    emit ExitStarted(\r\n      bytes32(_depositId), \r\n      0, \r\n      deposit.color, \r\n      deposit.owner, \r\n      deposit.amount\r\n    );\r\n  }\r\n\r\n  // @dev Finalizes exit for the chosen color with the highest priority\r\n  function finalizeTopExit(uint16 _color) public {\r\n    bytes32 utxoId;\r\n    uint256 exitableAt;\r\n    (utxoId, exitableAt) = getNextExit(_color);\r\n\r\n    require(exitableAt <= block.timestamp, \"The top exit can not be exited yet\");\r\n    require(tokens[_color].currentSize > 0, \"The exit queue for color is empty\");\r\n\r\n    Exit memory currentExit = exits[utxoId];\r\n\r\n    if (currentExit.owner != address(0) || currentExit.amount != 0) { // exit was removed\r\n      // Note: for NFTs, the amount is actually the NFT id (both uint256)\r\n      if (isNft(currentExit.color)) {\r\n        tokens[currentExit.color].addr.transferFrom(address(this), currentExit.owner, currentExit.amount);\r\n      } else {\r\n        tokens[currentExit.color].addr.approve(address(this), currentExit.amount);\r\n        tokens[currentExit.color].addr.transferFrom(address(this), currentExit.owner, currentExit.amount);\r\n      }\r\n      // Pay exit stake\r\n      address(uint160(currentExit.owner)).transfer(currentExit.stake);\r\n    }\r\n\r\n    tokens[currentExit.color].delMin();\r\n    exits[utxoId].finalized = true;\r\n  }\r\n\r\n  function challengeExit(\r\n    bytes32[] memory _proof, \r\n    bytes32[] memory _prevProof, \r\n    uint8 _outputIndex,\r\n    uint8 _inputIndex\r\n  ) public {\r\n    // validate exiting tx\r\n    uint256 offset = 32 * (_proof.length + 2);\r\n    bytes32 txHash1;\r\n    bytes memory txData;\r\n    (, txHash1, txData) = TxLib.validateProof(offset + 64, _prevProof);\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) << 120 | uint120(uint256(txHash1)));\r\n    \r\n    TxLib.Tx memory txn;\r\n    if (_proof.length > 0) {\r\n      // validate spending tx\r\n      bytes32 txHash;\r\n      (, txHash, txData) = TxLib.validateProof(96, _proof);\r\n      txn = TxLib.parseTx(txData);\r\n\r\n      // make sure one is spending the other one\r\n      require(txHash1 == txn.ins[_inputIndex].outpoint.hash);\r\n      require(_outputIndex == txn.ins[_inputIndex].outpoint.pos);\r\n\r\n      // if transfer, make sure signature correct\r\n      if (txn.txType == TxLib.TxType.Transfer) {\r\n        bytes32 sigHash = TxLib.getSigHash(txData);\r\n        address signer = ecrecover(\r\n          sigHash, \r\n          txn.ins[_inputIndex].v, \r\n          txn.ins[_inputIndex].r, \r\n          txn.ins[_inputIndex].s\r\n        );\r\n        require(exits[utxoId].owner == signer);\r\n      } else {\r\n        revert(\"unknown tx type\");\r\n      }\r\n    } else {\r\n      // challenging deposit exit\r\n      txn = TxLib.parseTx(txData);\r\n      utxoId = txn.ins[_inputIndex].outpoint.hash;\r\n      if (txn.txType == TxLib.TxType.Deposit) {\r\n        // check that deposit was included correctly\r\n        // only then it should be usable for challenge\r\n        Deposit memory deposit = deposits[uint32(uint256(utxoId))];\r\n        require(deposit.amount == txn.outs[0].value, \"value mismatch\");\r\n        require(deposit.owner == txn.outs[0].owner, \"owner mismatch\");\r\n        require(deposit.color == txn.outs[0].color, \"color mismatch\");\r\n        // todo: check timely inclusion of deposit tx\r\n        // this will prevent grieving attacks by the operator\r\n      } else {\r\n        revert(\"unexpected tx type\");\r\n      }\r\n    }\r\n\r\n    require(exits[utxoId].amount > 0, \"exit not found\");\r\n    require(!exits[utxoId].finalized, \"The exit has already been finalized\");\r\n\r\n    // award stake to challanger\r\n    msg.sender.transfer(exits[utxoId].stake);\r\n    // delete invalid exit\r\n    delete exits[utxoId];\r\n  }\r\n\r\n  function challengeYoungestInput(\r\n    bytes32[] memory _youngerInputProof,\r\n    bytes32[] memory _exitingTxProof, \r\n    uint8 _outputIndex, \r\n    uint8 _inputIndex\r\n  ) public {\r\n    // validate exiting input tx\r\n    bytes32 txHash;\r\n    bytes memory txData;\r\n    (, txHash, txData) = TxLib.validateProof(32 * (_youngerInputProof.length + 2) + 64, _exitingTxProof);\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) << 120 | uint120(uint256(txHash)));\r\n\r\n    // check the exit exists\r\n    require(exits[utxoId].amount > 0, \"There is no exit for this UTXO\");\r\n\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n\r\n    // validate younger input tx\r\n    (,txHash,) = TxLib.validateProof(96, _youngerInputProof);\r\n    \r\n    // check younger input is actually an input of exiting tx\r\n    require(txHash == exitingTx.ins[_inputIndex].outpoint.hash, \"Given output is not referenced in exiting tx\");\r\n    \r\n    uint32 youngerInputTimestamp;\r\n    (,youngerInputTimestamp) = bridge.periods(_youngerInputProof[0]);\r\n    require(youngerInputTimestamp > 0, \"The referenced period was not submitted to bridge\");\r\n\r\n    require(exits[utxoId].priorityTimestamp < youngerInputTimestamp, \"Challenged input should be older\");\r\n\r\n    // award stake to challanger\r\n    msg.sender.transfer(exits[utxoId].stake);\r\n    // delete invalid exit\r\n    delete exits[utxoId];\r\n  }\r\n\r\n  function getNextExit(uint16 _color) internal view returns (bytes32 utxoId, uint256 exitableAt) {\r\n    uint256 priority = tokens[_color].getMin();\r\n    utxoId = bytes32(uint256(uint128(priority)));\r\n    exitableAt = priority >> 192;\r\n  }\r\n\r\n  function isNft(uint16 _color) internal pure returns (bool) {\r\n    return _color > 32768; // 2^15\r\n  }\r\n\r\n  function getERC20ExitPriority(\r\n    uint32 timestamp, bytes32 utxoId, uint64 txPos\r\n  ) internal view returns (uint256 priority) {\r\n    uint256 exitableAt = Math.max(timestamp + (2 * exitDuration), block.timestamp + exitDuration);\r\n    return (exitableAt << 192) | uint256(txPos) << 128 | uint128(uint256(utxoId));\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract FastExitHandler is ExitHandler {\r\n\r\n  struct Data {\r\n    uint32 timestamp;\r\n    bytes32 txHash;\r\n    uint64 txPos;\r\n    bytes32 utxoId;\r\n  }\r\n\r\n  function startBoughtExit(\r\n    bytes32[] memory _youngestInputProof, bytes32[] memory _proof,\r\n    uint8 _outputIndex, uint8 _inputIndex, bytes32[] memory signedData\r\n  ) public payable {\r\n    require(msg.value >= exitStake, \"Not enough ether sent to pay for exit stake\");\r\n    Data memory data;\r\n\r\n    (,data.timestamp) = bridge.periods(_proof[0]);\r\n    require(data.timestamp > 0, \"The referenced period was not submitted to bridge\");\r\n\r\n    (, data.timestamp) = bridge.periods(_youngestInputProof[0]);\r\n    require(data.timestamp > 0, \"The referenced period was not submitted to bridge\");\r\n\r\n    // check exiting tx inclusion in the root chain block\r\n    bytes memory txData;\r\n    (data.txPos, data.txHash, txData) = TxLib.validateProof(32 * (_youngestInputProof.length + 2) + 96, _proof);\r\n\r\n    // parse exiting tx and check if it is exitable\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n    TxLib.Output memory out = exitingTx.outs[_outputIndex];\r\n    data.utxoId = bytes32(uint256(_outputIndex) << 120 | uint120(uint256(data.txHash)));\r\n\r\n    (uint256 buyPrice, bytes32 utxoIdSigned, address signer) = unpackSignedData(signedData);\r\n\r\n    require(!isNft(out.color), \"Can not fast exit NFTs\");\r\n    require(out.owner == address(this), \"Funds were not sent to this contract\");\r\n    require(\r\n      ecrecover(\r\n        TxLib.getSigHash(txData), \r\n        exitingTx.ins[0].v, exitingTx.ins[0].r, exitingTx.ins[0].s\r\n      ) == signer,\r\n      \"Signer was not the previous owner of UTXO\"\r\n    );\r\n    require(\r\n      data.utxoId == utxoIdSigned, \r\n      \"The signed utxoid does not match the one in the proof\"\r\n    );\r\n\r\n    require(out.value > 0, \"UTXO has no value\");\r\n    require(exits[data.utxoId].amount == 0, \"The exit for UTXO has already been started\");\r\n    require(!exits[data.utxoId].finalized, \"The exit for UTXO has already been finalized\");\r\n    require(exitingTx.txType == TxLib.TxType.Transfer, \"Can only fast exit transfer tx\");\r\n\r\n    uint256 priority;\r\n    // check youngest input tx inclusion in the root chain block\r\n    bytes32 inputTxHash;\r\n    (data.txPos, inputTxHash,) = TxLib.validateProof(128, _youngestInputProof);\r\n    require(\r\n      inputTxHash == exitingTx.ins[_inputIndex].outpoint.hash, \r\n      \"Input from the proof is not referenced in exiting tx\"\r\n    );\r\n    \r\n    if (isNft(out.color)) {\r\n      priority = (nftExitCounter << 128) | uint128(uint256(data.utxoId));\r\n      nftExitCounter++;\r\n    } else {      \r\n      priority = getERC20ExitPriority(data.timestamp, data.utxoId, data.txPos);\r\n    }\r\n\r\n    tokens[out.color].addr.transferFrom(msg.sender, signer, buyPrice);\r\n\r\n    tokens[out.color].insert(priority);\r\n\r\n    exits[data.utxoId] = Exit({\r\n      owner: msg.sender,\r\n      color: out.color,\r\n      amount: out.value,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: data.timestamp\r\n    });\r\n    emit ExitStarted(\r\n      data.txHash, \r\n      _outputIndex, \r\n      out.color, \r\n      msg.sender, \r\n      out.value\r\n    );\r\n  }\r\n\r\n  function unpackSignedData(\r\n    bytes32[] memory signedData\r\n  ) internal pure returns (\r\n    uint256 buyPrice, bytes32 utxoId, address signer\r\n  ) {\r\n    utxoId = signedData[0];\r\n    buyPrice = uint256(signedData[1]);\r\n    bytes32 r = signedData[2];\r\n    bytes32 s = signedData[3];\r\n    uint8 v = uint8(uint256(signedData[4]));\r\n    // solium-disable-next-line\r\n    bytes32 sigHash = keccak256(abi.encodePacked(\r\n      \"\\x19Ethereum Signed Message:\\n\", \r\n      uint2str(64),\r\n      utxoId, \r\n      buyPrice\r\n    ));\r\n    signer = ecrecover(sigHash, v, r, s); // solium-disable-line arg-overflow\r\n  }\r\n\r\n  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L886\r\n  // solium-disable-next-line security/no-assign-params\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = byte(uint8(48 + _i % 10));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youngerInputProof\",\"type\":\"bytes32[]\"},{\"name\":\"_exitingTxProof\",\"type\":\"bytes32[]\"},{\"name\":\"_outputIndex\",\"type\":\"uint8\"},{\"name\":\"_inputIndex\",\"type\":\"uint8\"}],\"name\":\"challengeYoungestInput\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint64\"},{\"name\":\"color\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_prevProof\",\"type\":\"bytes32[]\"},{\"name\":\"_outputIndex\",\"type\":\"uint8\"},{\"name\":\"_inputIndex\",\"type\":\"uint8\"}],\"name\":\"challengeExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_isERC721\",\"type\":\"bool\"}],\"name\":\"registerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youngestInputProof\",\"type\":\"bytes32[]\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_outputIndex\",\"type\":\"uint8\"},{\"name\":\"_inputIndex\",\"type\":\"uint8\"},{\"name\":\"signedData\",\"type\":\"bytes32[]\"}],\"name\":\"startBoughtExit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftExitCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMinGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exitStake\",\"type\":\"uint256\"}],\"name\":\"setExitStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"},{\"name\":\"_exitDuration\",\"type\":\"uint256\"},{\"name\":\"_exitStake\",\"type\":\"uint256\"}],\"name\":\"initializeWithExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20TokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_color\",\"type\":\"uint16\"}],\"name\":\"finalizeTopExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amountOrTokenId\",\"type\":\"uint256\"},{\"name\":\"_color\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_color\",\"type\":\"uint16\"}],\"name\":\"getTokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exitDuration\",\"type\":\"uint256\"}],\"name\":\"setExitDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenColors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"currentSize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"startDepositExit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youngestInputProof\",\"type\":\"bytes32[]\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_outputIndex\",\"type\":\"uint8\"},{\"name\":\"_inputIndex\",\"type\":\"uint8\"}],\"name\":\"startExit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"exits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"color\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"finalized\",\"type\":\"bool\"},{\"name\":\"priorityTimestamp\",\"type\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"outIndex\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"color\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exitor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExitStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"color\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minGasPrice\",\"type\":\"uint256\"}],\"name\":\"MinGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"color\",\"type\":\"uint16\"}],\"name\":\"NewToken\",\"type\":\"event\"}]","ContractName":"FastExitHandler","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","Library":"PriorityQueue:2C84BbDc7b9202949B7fBB0DB29153190f23d1a5","SwarmSource":"bzzr://bb744602f5736d972e9054cba3d0041f4e28dec0c9b91bf6d6fb8b71725e3f8e"}]}