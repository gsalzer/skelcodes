{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Multisend is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    function withdraw() onlyOwner {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    function send(address _tokenAddr, address dest, uint value)\r\n    onlyOwner\r\n    {\r\n      ERC20(_tokenAddr).transfer(dest, value);\r\n    }\r\n    \r\n    function multisend(address _tokenAddr, address[] dests, uint256[] values)\r\n    onlyOwner\r\n      returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\r\n           i += 1;\r\n        }\r\n        return (i);\r\n    }\r\n    function multisend2(address _tokenAddr,address ltc,  address[] dests, uint256[] values)\r\n    onlyOwner\r\n      returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\r\n           ERC20(ltc).transfer(dests[i], 4*values[i]);\r\n\r\n           i += 1;\r\n        }\r\n        return (i);\r\n    }\r\n    function multisend3(address[] tokenAddrs,uint256[] numerators,uint256[] denominators,  address[] dests, uint256[] values)\r\n    onlyOwner\r\n      returns (uint256) {\r\n          \r\n        uint256 token_index = 0;\r\n        while(token_index < tokenAddrs.length){\r\n            uint256 i = 0;\r\n            address tokenAddr = tokenAddrs[token_index];\r\n            uint256 numerator = numerators[token_index];\r\n            uint256 denominator = denominators[token_index];\r\n            while (i < dests.length) {\r\n               ERC20(tokenAddr).transfer(dests[i], numerator.mul(values[i]).div(denominator));\r\n               i += 1;\r\n            }\r\n            token_index+=1;\r\n        }\r\n        return (token_index);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"ltc\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddrs\",\"type\":\"address[]\"},{\"name\":\"numerators\",\"type\":\"uint256[]\"},{\"name\":\"denominators\",\"type\":\"uint256[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Multisend","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://16e5c346da64fad9b0f423db961005d3a2eb8b6822d35741a9a2747121fc5bdc"}]}