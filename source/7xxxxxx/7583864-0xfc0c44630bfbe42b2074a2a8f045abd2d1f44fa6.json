{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract GomicsERC20 {\r\n\r\n    uint internal maxAdmin;       // 관리자 최대 수 MaxAdmin\r\n\r\n    string public name;             // ERC20 = 토큰 이름 name\r\n    string public symbol;           // ERC20 = 토큰 심볼 symbol\r\n    uint8 public decimals;          // ERC20 = 토큰 소숫점 18자리 까지 가능  decimals 18\r\n    uint256 public totalSupply;     // ERC20 = 총 발행 량 totalSupply\r\n\r\n    address public owner;           // 소유자 owner\r\n\r\n    bool public stopTransfer;       // 일시 거래 중단 기능 stopTransfer\r\n\r\n    struct userMap {\r\n        bool black;\r\n        uint256 balanceOf;\r\n    }\r\n\r\n    address[] internal adminsnew;   // 신규 관리자 추가 adminsnew\r\n    address[] public admins;        // 관리자 admins\r\n\r\n    // 사용자 리스트 public user list\r\n    mapping (address => userMap) public user;\r\n\r\n    event StopTransfer(address indexed from, bool value);                                           // 이벤트 - 토큰 전송 중지 StopTransfer\r\n    event UserBlack(address indexed from, address indexed user, bool value);                        // 이벤트 - 블랙 리스트 UserBlack\r\n    event UserAdmin(address indexed from, address indexed user, bool value);                        // 이벤트 - 관리자 리스트 UserAdmin list\r\n    event Transfer(address indexed from, address indexed to, uint256 value);                        // 이벤트 - 토큰 전송 Transfer\r\n\r\n    /**\r\n     * 생성자 issuer\r\n     *\r\n     * 초기 토큰에 대한 발행량, 토큰 이름, 토큰 심볼를 초기화 한다. Initialize the amount of issuance, token name, token symbol for the initial token\r\n     */\r\n    constructor(\r\n        address _owner\r\n    ) public {\r\n        maxAdmin                                         = 3;                                       // max admin\r\n        decimals                                         = 8;                                       // 소수 점 decimals\r\n        totalSupply                                      = 75000000 * 10 ** uint256(decimals);      // 총 발행량  totalSupply\r\n        name                                             = 'GOM';                                   // 토큰 이름  name\r\n        symbol                                           = 'GOM';                                   // 토큰 심볼  symbol \r\n\r\n        owner                                            = _owner;                                  // 주인 설정  owner         \r\n\r\n        user[_owner]                                     = userMap(false, totalSupply);             // 주인 관리자 owner / 화이트 리스트에 자동 추가 Automatically add to whitelist\r\n        user[0x0101010101010101010101010101010101010101] = userMap(false, 0);                       // 토큰 파기 주소 token revocation address\r\n    }\r\n\r\n    modifier requireOwner() { require(owner == msg.sender); _; }                                    // 소유자 권한 owner's rights\r\n    modifier requireAdmin() {                                                                       // 관리자 권한 Administrator rights\r\n        if( owner == msg.sender) {\r\n            require(true);\r\n            _;\r\n        }\r\n        else {\r\n            for(uint i = 0; i < admins.length; i++) {\r\n                require(admins[i] == msg.sender);\r\n                _;\r\n            }\r\n        }\r\n\r\n        require(true);\r\n        _;\r\n    }\r\n    modifier requireStopTransfer() { require(!stopTransfer); _; }                                   // 거래 중단 StopTransfer\r\n    modifier requireBlack() { require(!user[msg.sender].black); _; }                                // 거래 거부 requireBlack\r\n\r\n    /**\r\n     * modify User admin\r\n     *\r\n     */\r\n    function adminLength() public view requireOwner returns(uint ret) {\r\n        return admins.length;\r\n    }\r\n\r\n    /**\r\n     * modify User admin\r\n     *\r\n     * @param _address 주소 address\r\n     * @param _admin 관리자 admin\r\n     */\r\n    function modifyUserAdmin(address _address, bool _admin) public requireOwner {\r\n\r\n        require(owner != _address);\r\n\r\n        if( _admin ) {\r\n            _addAdmin(_address);\r\n        }\r\n        else{\r\n            _removeAdmin(_address);\r\n        }\r\n\r\n        emit UserAdmin(msg.sender, _address, _admin);\r\n    }\r\n\r\n    /**\r\n     * modify User black\r\n     *\r\n     * @param _address 주소 address\r\n     * @param _black 블록 black\r\n     */\r\n    function modifyUserBlack(address _address, bool _black) public requireAdmin {\r\n        user[_address].black  = _black;\r\n\r\n        emit UserBlack(msg.sender, _address, _black);\r\n    }\r\n\r\n    /**\r\n     * modify Stop Transfer\r\n     *\r\n     * @param _stop 비상 중지 여부 Emergency stop status\r\n     */\r\n    function modifyStopTransfer(bool _stop) public requireOwner {\r\n        stopTransfer = _stop;\r\n\r\n        emit StopTransfer(msg.sender, _stop);\r\n    }\r\n\r\n    /**\r\n     * _addAdmin\r\n     *\r\n     * @param _address 주소 address\r\n     */\r\n    function _addAdmin(address _address) internal {\r\n        \r\n        require(admins.length<=maxAdmin - 1);\r\n        \r\n        for(uint i = 0 ; i < admins.length; i++){\r\n            require(admins[i] != _address);\r\n        }\r\n        \r\n        admins.push(_address);\r\n    }\r\n    \r\n    /**\r\n     * _removeAdmin\r\n     *\r\n     * @param _address 주소 address\r\n     */\r\n    function _removeAdmin(address _address) internal {\r\n        \r\n        for(uint i = 0 ; i < admins.length; i++){\r\n            if( admins[i] != _address ) {\r\n                adminsnew.push(admins[i]);\r\n            }\r\n        }\r\n        \r\n        admins = adminsnew;\r\n        delete adminsnew;\r\n    }\r\n\r\n    /**\r\n     * 잔고\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _address The address of the recipient\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256 result) {\r\n        return user[_address].balanceOf;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal requireStopTransfer {\r\n\r\n        require(user[_from].black != true);\r\n        require(user[_to].black != true);\r\n\r\n        // Check if the sender has enough\r\n        require(user[_from].balanceOf >= _value);\r\n\r\n        // Check for overflows\r\n        require(_add(user[_to].balanceOf, _value) >= user[_to].balanceOf);\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = _add(user[_from].balanceOf, user[_to].balanceOf);\r\n\r\n        // Subtract from the sender\r\n        user[_from].balanceOf = _sub(user[_from].balanceOf, _value);\r\n\r\n        // Add the same to the recipient\r\n        user[_to].balanceOf = _add(user[_to].balanceOf, _value);\r\n\r\n        // 이벤트 발생 Event Occurrence\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(_add(user[_from].balanceOf, user[_to].balanceOf) == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function _mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function _div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function _mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminLength\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_black\",\"type\":\"bool\"}],\"name\":\"modifyUserBlack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"black\",\"type\":\"bool\"},{\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"bool\"}],\"name\":\"modifyUserAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stop\",\"type\":\"bool\"}],\"name\":\"modifyStopTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"StopTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"UserBlack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"UserAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GomicsERC20","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d061c011c9e61e3f588658ab4fad284e7d08a91e","Library":"","SwarmSource":"bzzr://6e7b5675b1da7f2aa0fe030b5ff263499c4ba809ba790b71e5217917b5130b94"}]}