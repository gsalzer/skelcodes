{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public ownerWallet;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    ownerWallet = 0xB67d52d9BDA884d487b6eae57478E387602e522d;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ETHStvo is Ownable {\r\n\r\n    event regStarEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyStarEvent(address indexed _user, uint _star, uint _cycle, uint _time);\r\n    event prolongateStarEvent(address indexed _user, uint _star, uint _time);\r\n    event getMoneyForStarEvent(address indexed _user, address indexed _referral, uint _star, uint _cycle, uint _time);\r\n    event lostMoneyForStarEvent(address indexed _user, address indexed _referral, uint _star, uint _cycle, uint _time);\r\n    //------------------------------\r\n\r\n    mapping (uint => uint) public STAR_PRICE;\r\n    uint REFERRER_1_STAR_LIMIT = 3;\r\n    uint PERIOD_LENGTH = 3650 days;\r\n\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint referrerIDInitial;\r\n        address[] referral;\r\n        mapping (uint => uint) starExpired;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n    constructor() public {\r\n\r\n        //Cycle 1\r\n        STAR_PRICE[1] = 0.05 ether;\r\n        STAR_PRICE[2] = 0.15 ether;\r\n        STAR_PRICE[3] = 0.90 ether;\r\n        STAR_PRICE[4] = 2.70 ether;\r\n        STAR_PRICE[5] = 24.75 ether;\r\n        STAR_PRICE[6] = 37.50 ether;\r\n        STAR_PRICE[7] = 72.90 ether;\r\n        STAR_PRICE[8] = 218.70 ether;\r\n\r\n        //Cycle 2\r\n        STAR_PRICE[9] = 5.50 ether;\r\n        STAR_PRICE[10] = 15.00 ether;\r\n        STAR_PRICE[11] = 90.00 ether;\r\n        STAR_PRICE[12] = 270.00 ether;\r\n        STAR_PRICE[13] = 2475.00 ether;\r\n        STAR_PRICE[14] = 3750.00 ether;\r\n        STAR_PRICE[15] = 7290.00 ether;\r\n        STAR_PRICE[16] = 21870.00 ether;\r\n\r\n        //Cycle 3\r\n        STAR_PRICE[17] = 55.0 ether;\r\n        STAR_PRICE[18] = 150.00 ether;\r\n        STAR_PRICE[19] = 900.00 ether;\r\n        STAR_PRICE[20] = 2700.00 ether;\r\n        STAR_PRICE[21] = 24750.00 ether;\r\n        STAR_PRICE[22] = 37500.00 ether;\r\n        STAR_PRICE[23] = 72900.00 ether;\r\n        STAR_PRICE[24] = 218700.00 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            referrerIDInitial : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        users[ownerWallet].starExpired[1] = 77777777777;\r\n        users[ownerWallet].starExpired[2] = 77777777777;\r\n        users[ownerWallet].starExpired[3] = 77777777777;\r\n        users[ownerWallet].starExpired[4] = 77777777777;\r\n        users[ownerWallet].starExpired[5] = 77777777777;\r\n        users[ownerWallet].starExpired[6] = 77777777777;\r\n        users[ownerWallet].starExpired[7] = 77777777777;\r\n        users[ownerWallet].starExpired[8] = 77777777777;\r\n        users[ownerWallet].starExpired[9] = 77777777777;\r\n        users[ownerWallet].starExpired[10] = 77777777777;\r\n        users[ownerWallet].starExpired[11] = 77777777777;\r\n        users[ownerWallet].starExpired[12] = 77777777777;\r\n        users[ownerWallet].starExpired[13] = 77777777777;\r\n        users[ownerWallet].starExpired[14] = 77777777777;\r\n        users[ownerWallet].starExpired[15] = 77777777777;\r\n        users[ownerWallet].starExpired[16] = 77777777777;\r\n        users[ownerWallet].starExpired[17] = 77777777777;\r\n        users[ownerWallet].starExpired[18] = 77777777777;\r\n        users[ownerWallet].starExpired[19] = 77777777777;\r\n        users[ownerWallet].starExpired[20] = 77777777777;\r\n        users[ownerWallet].starExpired[21] = 77777777777;\r\n        users[ownerWallet].starExpired[22] = 77777777777;\r\n        users[ownerWallet].starExpired[23] = 77777777777;\r\n        users[ownerWallet].starExpired[24] = 77777777777;\r\n    }\r\n\r\n    function setOwnerWallet(address _ownerWallet) public onlyOwner {\r\n        userList[1] = _ownerWallet;\r\n      }\r\n\r\n    function () external payable {\r\n\r\n        uint star;\r\n        uint cycle;\r\n\r\n        if(msg.value == STAR_PRICE[1]){\r\n            star = 1;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[2]){\r\n            star = 2;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[3]){\r\n            star = 3;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[4]){\r\n            star = 4;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[5]){\r\n            star = 5;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[6]){\r\n            star = 6;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[7]){\r\n            star = 7;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[8]){\r\n            star = 8;\r\n            cycle = 1;\r\n        }else if(msg.value == STAR_PRICE[9]){\r\n            star = 9;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[10]){\r\n            star = 10;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[11]){\r\n            star = 11;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[12]){\r\n            star = 12;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[13]){\r\n            star = 13;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[14]){\r\n            star = 14;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[15]){\r\n            star = 15;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[16]){\r\n            star = 16;\r\n            cycle = 2;\r\n        }else if(msg.value == STAR_PRICE[17]){\r\n            star = 17;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[18]){\r\n            star = 18;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[19]){\r\n            star = 19;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[20]){\r\n            star = 20;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[21]){\r\n            star = 21;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[22]){\r\n            star = 22;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[23]){\r\n            star = 23;\r\n            cycle = 3;\r\n        }else if(msg.value == STAR_PRICE[24]){\r\n            star = 24;\r\n            cycle = 3;\r\n        }else {\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n        if(users[msg.sender].isExist){\r\n            buyStar(star, cycle);\r\n        } else if(star == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (users[referrer].isExist){\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            regUser(refId);\r\n        } else {\r\n            revert(\"Please buy first star for 0.05 ETH\");\r\n        }\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n\r\n        require(msg.value==STAR_PRICE[1], 'Incorrect Value');\r\n\r\n        uint _referrerIDInitial = _referrerID;\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_STAR_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            referrerIDInitial : _referrerIDInitial,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].starExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].starExpired[2] = 0;\r\n        users[msg.sender].starExpired[3] = 0;\r\n        users[msg.sender].starExpired[4] = 0;\r\n        users[msg.sender].starExpired[5] = 0;\r\n        users[msg.sender].starExpired[6] = 0;\r\n        users[msg.sender].starExpired[7] = 0;\r\n        users[msg.sender].starExpired[8] = 0;\r\n        users[msg.sender].starExpired[9] = 0;\r\n        users[msg.sender].starExpired[10] = 0;\r\n        users[msg.sender].starExpired[11] = 0;\r\n        users[msg.sender].starExpired[12] = 0;\r\n        users[msg.sender].starExpired[13] = 0;\r\n        users[msg.sender].starExpired[14] = 0;\r\n        users[msg.sender].starExpired[15] = 0;\r\n        users[msg.sender].starExpired[16] = 0;\r\n        users[msg.sender].starExpired[17] = 0;\r\n        users[msg.sender].starExpired[18] = 0;\r\n        users[msg.sender].starExpired[19] = 0;\r\n        users[msg.sender].starExpired[20] = 0;\r\n        users[msg.sender].starExpired[21] = 0;\r\n        users[msg.sender].starExpired[22] = 0;\r\n        users[msg.sender].starExpired[23] = 0;\r\n        users[msg.sender].starExpired[24] = 0;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForStar(1, 1, msg.sender);\r\n\r\n        emit regStarEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyStar(uint _star, uint _cycle) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n\r\n        require( _star>0 && _star<=24, 'Incorrect star');\r\n        require( _cycle>0 && _cycle<=3, 'Incorrect cycle');\r\n\r\n        if(_star == 1){\r\n            require(msg.value==STAR_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].starExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n                require(msg.value==STAR_PRICE[_star], 'Incorrect Value');\r\n\r\n            for(uint l =_star-1; l>0; l-- ){\r\n                require(users[msg.sender].starExpired[l] >= now, 'Buy the previous star');\r\n            }\r\n\r\n            if(users[msg.sender].starExpired[_star] == 0){\r\n                users[msg.sender].starExpired[_star] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].starExpired[_star] += PERIOD_LENGTH;\r\n            }\r\n\r\n        }\r\n        payForStar(_star, _cycle, msg.sender);\r\n        emit buyStarEvent(msg.sender, _star, _cycle, now);\r\n    }\r\n\r\n    function payForStar(uint _star, uint _cycle, address _user) internal {\r\n\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address refererInitial;\r\n        uint money;\r\n        if(_star == 1 || _star == 5 || _star == 9 || _star == 13 || _star == 17 || _star == 21){\r\n            referer = userList[users[_user].referrerID];\r\n        } else if(_star == 2 || _star == 6 || _star == 10 || _star == 14 || _star == 18 || _star == 22){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if(_star == 3 || _star == 7 || _star == 11 || _star == 15 || _star == 19 || _star == 23){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if(_star == 4 || _star == 8 || _star == 12 || _star == 16 || _star == 20 || _star == 24){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n\r\n        if(!users[referer].isExist){\r\n            referer = userList[1];\r\n        }\r\n\r\n        refererInitial = userList[users[_user].referrerIDInitial];\r\n\r\n        if(!users[refererInitial].isExist){\r\n            refererInitial = userList[1];\r\n        }\r\n\r\n        if(users[referer].starExpired[_star] >= now ){\r\n\r\n            money = STAR_PRICE[_star];\r\n\r\n            if(_star>=3){\r\n                \r\n                if(_star==5){\r\n                    bool result;\r\n                    result = address(uint160(userList[1])).send(uint(2.25 ether));\r\n                    money = SafeMath.sub(money,uint(2.25 ether));\r\n                }\r\n\r\n                if(_star==9){\r\n                    bool result;\r\n                    result = address(uint160(userList[1])).send(uint(0.50 ether));\r\n                    money = SafeMath.sub(money,uint(0.50 ether));\r\n                }\r\n\r\n                if(_star==13){\r\n                    bool result;\r\n                    result = address(uint160(userList[1])).send(uint(225.00 ether));\r\n                    money = SafeMath.sub(money,uint(225.00 ether));\r\n                }\r\n\r\n                if(_star==17){\r\n                    bool result;\r\n                    result = address(uint160(userList[1])).send(uint(5.00 ether));\r\n                    money = SafeMath.sub(money,uint(5.00 ether));\r\n                }\r\n\r\n                if(_star==21){\r\n                    bool result;\r\n                    result = address(uint160(userList[1])).send(uint(2250.00 ether));\r\n                    money = SafeMath.sub(money,uint(2250.00 ether));\r\n                }\r\n\r\n                bool result_one;\r\n                result_one = address(uint160(referer)).send(SafeMath.div(money,2));\r\n\r\n                bool result_two;\r\n                result_two = address(uint160(refererInitial)).send(SafeMath.div(money,2));\r\n                \r\n            } else {\r\n                bool result;\r\n                result = address(uint160(referer)).send(money);\r\n            }\r\n\r\n            emit getMoneyForStarEvent(referer, msg.sender, _star, _cycle, now);\r\n\r\n        } else {\r\n            emit lostMoneyForStarEvent(referer, msg.sender, _star, _cycle, now);\r\n            payForStar(_star,_cycle,referer);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n\r\n        require(users[_user].isExist, 'Upline does not exist');\r\n\r\n        if(users[_user].referral.length < REFERRER_1_STAR_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        address[] memory referrals = new address[](363);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i =0; i<363;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_STAR_LIMIT){\r\n                if(i<120){\r\n                    referrals[(i+1)*3] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[referrals[i]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[referrals[i]].referral[2];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserStarExpired(address _user, uint _star) public view returns(uint) {\r\n        return users[_user].starExpired[_star];\r\n    }\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_star\",\"type\":\"uint256\"}],\"name\":\"viewUserStarExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"referrerIDInitial\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"STAR_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint256\"},{\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"buyStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regStarEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyStarEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateStarEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForStarEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForStarEvent\",\"type\":\"event\"}]","ContractName":"ETHStvo","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://704cc0388cd0445348075dc22337e4f44f7b4e3911562b445c4830939db7d563"}]}