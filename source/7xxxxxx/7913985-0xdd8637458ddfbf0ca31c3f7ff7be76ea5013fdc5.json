{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies the implementation of\r\n///  \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when owner address changes by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event OwnershipTransfer (address previousOwner, address newOwner);\r\n    \r\n    // Wallet address that can sucessfully execute onlyOwner functions\r\n    address owner;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Sets the owner of the contract to the sender account.\r\n    //-------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransfer(address(0), owner);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than `owner`.\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner, \r\n            \"Function can only be called by contract owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer control of the contract to a newOwner.\r\n    /// @dev Throws if `_newOwner` is zero address.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    //-------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        // for safety, new owner parameter must not be 0\r\n        require (\r\n            _newOwner != address(0),\r\n            \"New owner address cannot be zero\"\r\n        );\r\n        // define local variable for old owner\r\n        address oldOwner = owner;\r\n        // set owner to new owner\r\n        owner = _newOwner;\r\n        // emit ownership transfer event\r\n        emit OwnershipTransfer(oldOwner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface VIP181 {\r\n    function ownerOf(uint256 _tokenId) external view returns(address payable);\r\n    function getApproved(uint256 _tokenId) external view returns(address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns(bool);\r\n}\r\n\r\n\r\ninterface VIP180 {\r\n    function balanceOf(address _tokenOwner) external view returns(uint);\r\n    function transfer(address _to, uint _tokens) external returns(bool);\r\n    function transferFrom(address _from, address _to, uint _tokens) external returns(bool);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC External Token Handler\r\n/// @notice Defines depositing and withdrawal of VET and VIP-180-compliant\r\n///  tokens into AACs.\r\n//-----------------------------------------------------------------------------\r\ncontract AacExternalTokens is Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when external tokens are deposited into AACs from a wallet.\r\n    //-------------------------------------------------------------------------\r\n    event DepositExternal(\r\n        address indexed _from,  \r\n        uint indexed _to, \r\n        address indexed _tokenContract, \r\n        uint _tokens\r\n    );\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when external tokens are withdrawn from AACs to a wallet.\r\n    //-------------------------------------------------------------------------\r\n    event WithdrawExternal(\r\n        uint indexed _from, \r\n        address indexed _to, \r\n        address indexed _tokenContract, \r\n        uint _tokens\r\n    );\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when external tokens are tranferred from AACs to another AAC.\r\n    //-------------------------------------------------------------------------\r\n    event TransferExternal(\r\n        uint indexed _from, \r\n        uint indexed _to, \r\n        address indexed _tokenContract, \r\n        uint _tokens\r\n    );\r\n    \r\n    // AAC contract\r\n    VIP181 public aacContract;\r\n    // handles the balances of AACs for every VIP180 token address\r\n    mapping (address => mapping(uint => uint)) externalTokenBalances;\r\n    // enumerates the deposited VIP180 contract addresses\r\n    address[] public trackedVip180s;\r\n    // guarantees above array contains unique addresses\r\n    mapping (address => bool) isTracking;\r\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than token owner, approved\r\n    ///  address, or authorized operator.\r\n    //-------------------------------------------------------------------------\r\n    modifier canOperate(uint _uid) {\r\n        // sender must be owner of AAC #uid, or sender must be the\r\n        //  approved address of AAC #uid, or an authorized operator for\r\n        //  AAC owner\r\n        address owner = aacContract.ownerOf(_uid);\r\n        require (\r\n            msg.sender == owner ||\r\n            msg.sender == aacContract.getApproved(_uid) ||\r\n            aacContract.isApprovedForAll(owner, msg.sender),\r\n            \"Not authorized to operate for this AAC\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if parameter is zero\r\n    //-------------------------------------------------------------------------\r\n    modifier notZero(uint _param) {\r\n        require(_param != 0, \"Parameter cannot be zero\");\r\n        _;\r\n    }\r\n    \r\n    function setAacContract(address _aacAddress) external onlyOwner {\r\n        aacContract = VIP181(_aacAddress);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit VET from sender to approved AAC\r\n    /// @dev Throws if VET to deposit is zero. Throws if sender is not\r\n    ///  approved to operate AAC #`toUid`. Throws if sender has insufficient \r\n    ///  balance for deposit.\r\n    /// @param _toUid the AAC to deposit the VET into\r\n    //-------------------------------------------------------------------------\r\n    function depositVET(uint _toUid) \r\n        external \r\n        payable \r\n        canOperate(_toUid)\r\n        notZero(msg.value)\r\n    {\r\n        // add amount to AAC's balance\r\n        externalTokenBalances[address(this)][_toUid] += msg.value;\r\n        // emit event\r\n        emit DepositExternal(msg.sender, _toUid, address(this), msg.value);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw VET from approved AAC to AAC's owner\r\n    /// @dev Throws if VET to withdraw is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC \r\n    ///  #`_fromUid` has insufficient balance to withdraw.\r\n    /// @param _fromUid the AAC to withdraw the VET from\r\n    /// @param _amount the amount of VET to withdraw (in Wei)\r\n    //-------------------------------------------------------------------------\r\n    function withdrawVET(\r\n        uint _fromUid, \r\n        uint _amount\r\n    ) external canOperate(_fromUid) notZero(_amount) {\r\n        // AAC must have sufficient VET balance\r\n        require (\r\n            externalTokenBalances[address(this)][_fromUid] >= _amount,\r\n            \"Insufficient VET to withdraw\"\r\n        );\r\n        // subtract amount from AAC's balance\r\n        externalTokenBalances[address(this)][_fromUid] -= _amount;\r\n        address payable receiver = aacContract.ownerOf(_fromUid);\r\n        // call transfer function\r\n        receiver.transfer(_amount);\r\n        // emit event\r\n        emit WithdrawExternal(_fromUid, receiver, address(this), _amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw VET from approved AAC and send to '_to'\r\n    /// @dev Throws if VET to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC\r\n    ///  #`_fromUid` has insufficient balance to withdraw.\r\n    /// @param _fromUid the AAC to withdraw and send the VET from\r\n    /// @param _to the address to receive the transferred VET\r\n    /// @param _amount the amount of VET to withdraw (in Wei)\r\n    //-------------------------------------------------------------------------\r\n    function transferVETToWallet(\r\n        uint _fromUid,\r\n        address payable _to,\r\n        uint _amount\r\n    ) external canOperate(_fromUid) notZero(_amount) {\r\n        // AAC must have sufficient VET balance\r\n        require (\r\n            externalTokenBalances[address(this)][_fromUid] >= _amount,\r\n            \"Insufficient VET to transfer\"\r\n        );\r\n        // subtract amount from AAC's balance\r\n        externalTokenBalances[address(this)][_fromUid] -= _amount;\r\n        // call transfer function\r\n        _to.transfer(_amount);\r\n        // emit event\r\n        emit WithdrawExternal(_fromUid, _to, address(this), _amount);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer VET from your AAC to another AAC\r\n    /// @dev Throws if tokens to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC #`_fromUid` has \r\n    ///  insufficient balance to transfer. Throws if receiver does not exist.\r\n    /// @param _fromUid the AAC to withdraw the VIP-180 tokens from\r\n    /// @param _toUid the identifier of the AAC to receive the VIP-180 tokens\r\n    /// @param _amount the number of tokens to send\r\n    //-------------------------------------------------------------------------\r\n    function transferVETToAAC (\r\n        uint _fromUid, \r\n        uint _toUid, \r\n        uint _amount\r\n    ) external canOperate(_fromUid) notZero(_amount) {\r\n        // receiver must have an owner\r\n        require(aacContract.ownerOf(_toUid) != address(0), \"Invalid receiver UID\");\r\n        // AAC must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[address(this)][_fromUid] >= _amount,\r\n            \"insufficient tokens to transfer\"\r\n        );\r\n        // subtract amount from sender's balance\r\n        externalTokenBalances[address(this)][_fromUid] -= _amount;\r\n        \r\n        // add amount to receiver's balance\r\n        externalTokenBalances[address(this)][_toUid] += _amount;\r\n        // emit event\r\n        emit TransferExternal(_fromUid, _toUid, address(this), _amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit VIP-180 tokens from sender to approved AAC\r\n    /// @dev This contract address must be an authorized spender for sender.\r\n    ///  Throws if tokens to deposit is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`toUid`. Throws if this contract address\r\n    ///  has insufficient allowance for transfer. Throws if sender has  \r\n    ///  insufficient balance for deposit. Throws if tokenAddress has no\r\n    ///  transferFrom function.\r\n    /// @param _tokenAddress the VIP-180 contract address\r\n    /// @param _toUid the AAC to deposit the VIP-180 tokens into\r\n    /// @param _tokens the number of tokens to deposit\r\n    //-------------------------------------------------------------------------\r\n    function depositTokens (\r\n        address _tokenAddress, \r\n        uint _toUid, \r\n        uint _tokens\r\n    ) external canOperate(_toUid) notZero(_tokens) {\r\n        // add token contract address to list of tracked token addresses\r\n        if (isTracking[_tokenAddress] == false) {\r\n            trackedVip180s.push(_tokenAddress);\r\n            isTracking[_tokenAddress] = true;\r\n        }\r\n\r\n        // initialize token contract\r\n        VIP180 tokenContract = VIP180(_tokenAddress);\r\n        // add amount to AAC's balance\r\n        externalTokenBalances[_tokenAddress][_toUid] += _tokens;\r\n\r\n        // call transferFrom function from token contract\r\n        tokenContract.transferFrom(msg.sender, address(this), _tokens);\r\n        // emit event\r\n        emit DepositExternal(msg.sender, _toUid, _tokenAddress, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit VIP-180 tokens from '_to' to approved AAC\r\n    /// @dev This contract address must be an authorized spender for '_from'.\r\n    ///  Throws if tokens to deposit is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`toUid`. Throws if this contract address\r\n    ///  has insufficient allowance for transfer. Throws if sender has\r\n    ///  insufficient balance for deposit. Throws if tokenAddress has no\r\n    ///  transferFrom function.\r\n    /// @param _tokenAddress the VIP-180 contract address\r\n    /// @param _from the address sending VIP-180 tokens to deposit\r\n    /// @param _toUid the AAC to deposit the VIP-180 tokens into\r\n    /// @param _tokens the number of tokens to deposit\r\n    //-------------------------------------------------------------------------\r\n    function depositTokensFrom (\r\n        address _tokenAddress,\r\n        address _from,\r\n        uint _toUid,\r\n        uint _tokens\r\n    ) external canOperate(_toUid) notZero(_tokens) {\r\n        // add token contract address to list of tracked token addresses\r\n        if (isTracking[_tokenAddress] == false) {\r\n            trackedVip180s.push(_tokenAddress);\r\n            isTracking[_tokenAddress] = true;\r\n        }\r\n        // initialize token contract\r\n        VIP180 tokenContract = VIP180(_tokenAddress);\r\n        // add amount to AAC's balance\r\n        externalTokenBalances[_tokenAddress][_toUid] += _tokens;\r\n\r\n        // call transferFrom function from token contract\r\n        tokenContract.transferFrom(_from, address(this), _tokens);\r\n        // emit event\r\n        emit DepositExternal(_from, _toUid, _tokenAddress, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw VIP-180 tokens from approved AAC to AAC's\r\n    ///  owner\r\n    /// @dev Throws if tokens to withdraw is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC \r\n    ///  #`_fromUid` has insufficient balance to withdraw. Throws if \r\n    ///  tokenAddress has no transfer function.\r\n    /// @param _tokenAddress the VIP-180 contract address\r\n    /// @param _fromUid the AAC to withdraw the VIP-180 tokens from\r\n    /// @param _tokens the number of tokens to withdraw\r\n    //-------------------------------------------------------------------------\r\n    function withdrawTokens (\r\n        address _tokenAddress, \r\n        uint _fromUid, \r\n        uint _tokens\r\n    ) external canOperate(_fromUid) notZero(_tokens) {\r\n        // AAC must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[_tokenAddress][_fromUid] >= _tokens,\r\n            \"insufficient tokens to withdraw\"\r\n        );\r\n        // initialize token contract\r\n        VIP180 tokenContract = VIP180(_tokenAddress);\r\n        // subtract amount from AAC's balance\r\n        externalTokenBalances[_tokenAddress][_fromUid] -= _tokens;\r\n        \r\n        // call transfer function from token contract\r\n        tokenContract.transfer(aacContract.ownerOf(_fromUid), _tokens);\r\n        // emit event\r\n        emit WithdrawExternal(_fromUid, msg.sender, _tokenAddress, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer VIP-180 tokens from your AAC to `_to`\r\n    /// @dev Throws if tokens to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC \r\n    ///  #`_fromUid` has insufficient balance to transfer. Throws if \r\n    ///  tokenAddress has no transfer function.\r\n    /// @param _tokenAddress the VIP-180 contract address\r\n    /// @param _fromUid the AAC to withdraw the VIP-180 tokens from\r\n    /// @param _to the wallet address to receive the VIP-180 tokens\r\n    /// @param _tokens the number of tokens to send\r\n    //-------------------------------------------------------------------------\r\n    function transferTokensToWallet (\r\n        address _tokenAddress, \r\n        uint _fromUid, \r\n        address _to, \r\n        uint _tokens\r\n    ) external canOperate(_fromUid) notZero(_tokens) {\r\n        // AAC must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[_tokenAddress][_fromUid] >= _tokens,\r\n            \"insufficient tokens to transfer\"\r\n        );\r\n        // initialize token contract\r\n        VIP180 tokenContract = VIP180(_tokenAddress);\r\n        // subtract amount from AAC's balance\r\n        externalTokenBalances[_tokenAddress][_fromUid] -= _tokens;\r\n        \r\n        // call transfer function from token contract\r\n        tokenContract.transfer(_to, _tokens);\r\n        // emit event\r\n        emit WithdrawExternal(_fromUid, _to, _tokenAddress, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer VIP-180 tokens from your AAC to another AAC\r\n    /// @dev Throws if tokens to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for AAC #`_fromUid`. Throws if AAC \r\n    ///  #`_fromUid` has insufficient balance to transfer. Throws if \r\n    ///  tokenAddress has no transfer function. Throws if receiver does not\r\n    ///  exist.\r\n    /// @param _tokenAddress the VIP-180 contract address\r\n    /// @param _fromUid the AAC to withdraw the VIP-180 tokens from\r\n    /// @param _toUid the identifier of the AAC to receive the VIP-180 tokens\r\n    /// @param _tokens the number of tokens to send\r\n    //-------------------------------------------------------------------------\r\n    function transferTokensToAAC (\r\n        address _tokenAddress, \r\n        uint _fromUid, \r\n        uint _toUid, \r\n        uint _tokens\r\n    ) external canOperate(_fromUid) notZero(_tokens) {\r\n        // receiver must have an owner\r\n        require(aacContract.ownerOf(_toUid) != address(0), \"Invalid receiver UID\");\r\n        // AAC must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[_tokenAddress][_fromUid] >= _tokens,\r\n            \"insufficient tokens to transfer\"\r\n        );\r\n        // subtract amount from sender's balance\r\n        externalTokenBalances[_tokenAddress][_fromUid] -= _tokens;\r\n        \r\n        // add amount to receiver's balance\r\n        externalTokenBalances[_tokenAddress][_toUid] += _tokens;\r\n        // emit event\r\n        emit TransferExternal(_fromUid, _toUid, _tokenAddress, _tokens);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer balances of external tokens to new uid. AAC contract\r\n    ///  only.\r\n    /// @dev throws unless sent by AAC contract\r\n    //-------------------------------------------------------------------------\r\n    function onLink(uint _oldUid, uint _newUid) external {\r\n        require (msg.sender == address(aacContract), \"Unauthorized transaction\");\r\n        require (_oldUid > UID_MAX && _newUid <= UID_MAX);\r\n        address tokenAddress;\r\n        for(uint i = 0; i < trackedVip180s.length; ++i) {\r\n            tokenAddress = trackedVip180s[i];\r\n            externalTokenBalances[tokenAddress][_newUid] = externalTokenBalances[tokenAddress][_oldUid];\r\n        }\r\n        externalTokenBalances[address(this)][_newUid] = externalTokenBalances[address(this)][_oldUid];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get external token balance for tokens deposited into AAC\r\n    ///  #`_uid`.\r\n    /// @dev To query VET, use THIS CONTRACT'S address as '_tokenAddress'.\r\n    /// @param _uid Owner of the tokens to query\r\n    /// @param _tokenAddress Token creator contract address \r\n    //-------------------------------------------------------------------------\r\n    function getExternalTokenBalance(\r\n        uint _uid, \r\n        address _tokenAddress\r\n    ) external view returns (uint) {\r\n        return externalTokenBalances[_tokenAddress][_uid];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"onLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aacContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trackedVip180s\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTokensToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferVETToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawVET\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferVETToAAC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aacAddress\",\"type\":\"address\"}],\"name\":\"setAacContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toUid\",\"type\":\"uint256\"}],\"name\":\"depositVET\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTokensToAAC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getExternalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositTokensFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"DepositExternal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"WithdrawExternal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TransferExternal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"AacExternalTokens","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0547cfafd36922fbe0cfc864c0466712f33ac7f1f7be3e11c0690d050bb74962"}]}