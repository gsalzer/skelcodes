{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.9;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n\tstruct Role {\r\n\t\tmapping (address => bool) bearer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev give an account access to this role\r\n\t */\r\n\tfunction add(Role storage role, address account) internal {\r\n\t\trequire(account != address(0));\r\n\t\trequire(!has(role, account));\r\n\r\n\t\trole.bearer[account] = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev remove an account's access to this role\r\n\t */\r\n\tfunction remove(Role storage role, address account) internal {\r\n\t\trequire(account != address(0));\r\n\t\trequire(has(role, account));\r\n\r\n\t\trole.bearer[account] = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev check if an account has this role\r\n\t * @return bool\r\n\t */\r\n\tfunction has(Role storage role, address account) internal view returns (bool) {\r\n\t\trequire(account != address(0));\r\n\t\treturn role.bearer[account];\r\n\t}\r\n}\r\ncontract ETORoles {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tconstructor() internal {\r\n\t\t_addAuditWriter(msg.sender);\r\n\t\t_addAssetSeizer(msg.sender);\r\n\t\t_addKycProvider(msg.sender);\r\n\t\t_addUserManager(msg.sender);\r\n\t\t_addOwner(msg.sender);\r\n\t}\r\n\r\n\t/*\r\n\t * Audit Writer functions\r\n\t */\r\n\tevent AuditWriterAdded(address indexed account);\r\n\tevent AuditWriterRemoved(address indexed account);\r\n\r\n\tRoles.Role private _auditWriters;\r\n\r\n\tmodifier onlyAuditWriter() {\r\n\t\trequire(isAuditWriter(msg.sender), \"Sender is not auditWriter\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isAuditWriter(address account) public view returns (bool) {\r\n\t\treturn _auditWriters.has(account);\r\n\t}\r\n\r\n\tfunction addAuditWriter(address account) public onlyUserManager {\r\n\t\t_addAuditWriter(account);\r\n\t}\r\n\r\n\tfunction renounceAuditWriter() public {\r\n\t\t_removeAuditWriter(msg.sender);\r\n\t}\r\n\r\n\tfunction _addAuditWriter(address account) internal {\r\n\t\t_auditWriters.add(account);\r\n\t\temit AuditWriterAdded(account);\r\n\t}\r\n\r\n\tfunction _removeAuditWriter(address account) internal {\r\n\t\t_auditWriters.remove(account);\r\n\t\temit AuditWriterRemoved(account);\r\n\t}\r\n\r\n\t/*\r\n\t* KYC Provider functions\r\n\t*/\r\n\tevent KycProviderAdded(address indexed account);\r\n\tevent KycProviderRemoved(address indexed account);\r\n\r\n\tRoles.Role private _kycProviders;\r\n\r\n\tmodifier onlyKycProvider() {\r\n\t\trequire(isKycProvider(msg.sender), \"Sender is not kycProvider\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isKycProvider(address account) public view returns (bool) {\r\n\t\treturn _kycProviders.has(account);\r\n\t}\r\n\r\n\tfunction addKycProvider(address account) public onlyUserManager {\r\n\t\t_addKycProvider(account);\r\n\t}\r\n\r\n\tfunction renounceKycProvider() public {\r\n\t\t_removeKycProvider(msg.sender);\r\n\t}\r\n\r\n\tfunction _addKycProvider(address account) internal {\r\n\t\t_kycProviders.add(account);\r\n\t\temit KycProviderAdded(account);\r\n\t}\r\n\r\n\tfunction _removeKycProvider(address account) internal {\r\n\t\t_kycProviders.remove(account);\r\n\t\temit KycProviderRemoved(account);\r\n\t}\r\n\r\n\t/*\r\n\t* Asset Seizer functions\r\n\t*/\r\n\tevent AssetSeizerAdded(address indexed account);\r\n\tevent AssetSeizerRemoved(address indexed account);\r\n\r\n\tRoles.Role private _assetSeizers;\r\n\r\n\tmodifier onlyAssetSeizer() {\r\n\t\trequire(isAssetSeizer(msg.sender), \"Sender is not assetSeizer\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isAssetSeizer(address account) public view returns (bool) {\r\n\t\treturn _assetSeizers.has(account);\r\n\t}\r\n\r\n\tfunction addAssetSeizer(address account) public onlyUserManager {\r\n\t\t_addAssetSeizer(account);\r\n\t}\r\n\r\n\tfunction renounceAssetSeizer() public {\r\n\t\t_removeAssetSeizer(msg.sender);\r\n\t}\r\n\r\n\tfunction _addAssetSeizer(address account) internal {\r\n\t\t_assetSeizers.add(account);\r\n\t\temit AssetSeizerAdded(account);\r\n\t}\r\n\r\n\tfunction _removeAssetSeizer(address account) internal {\r\n\t\t_assetSeizers.remove(account);\r\n\t\temit AssetSeizerRemoved(account);\r\n\t}\r\n\r\n\t/*\r\n\t* User Manager functions\r\n\t*/\r\n\tevent UserManagerAdded(address indexed account);\r\n\tevent UserManagerRemoved(address indexed account);\r\n\r\n\tRoles.Role private _userManagers;\r\n\r\n\tmodifier onlyUserManager() {\r\n\t\trequire(isUserManager(msg.sender), \"Sender is not UserManager\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isUserManager(address account) public view returns (bool) {\r\n\t\treturn _userManagers.has(account);\r\n\t}\r\n\r\n\tfunction addUserManager(address account) public onlyUserManager {\r\n\t\t_addUserManager(account);\r\n\t}\r\n\r\n\tfunction renounceUserManager() public {\r\n\t\t_removeUserManager(msg.sender);\r\n\t}\r\n\r\n\tfunction _addUserManager(address account) internal {\r\n\t\t_userManagers.add(account);\r\n\t\temit UserManagerAdded(account);\r\n\t}\r\n\r\n\tfunction _removeUserManager(address account) internal {\r\n\t\t_userManagers.remove(account);\r\n\t\temit UserManagerRemoved(account);\r\n\t}\r\n\r\n\t/*\r\n\t* Owner functions\r\n\t*/\r\n\tevent OwnerAdded(address indexed account);\r\n\tevent OwnerRemoved(address indexed account);\r\n\r\n\tRoles.Role private _owners;\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner(msg.sender), \"Sender is not owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isOwner(address account) public view returns (bool) {\r\n\t\treturn _owners.has(account);\r\n\t}\r\n\r\n\tfunction addOwner(address account) public onlyUserManager {\r\n\t\t_addOwner(account);\r\n\t}\r\n\r\n\tfunction renounceOwner() public {\r\n\t\t_removeOwner(msg.sender);\r\n\t}\r\n\r\n\tfunction _addOwner(address account) internal {\r\n\t\t_owners.add(account);\r\n\t\temit OwnerAdded(account);\r\n\t}\r\n\r\n\tfunction _removeOwner(address account) internal {\r\n\t\t_owners.remove(account);\r\n\t\temit OwnerRemoved(account);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t* @dev Multiplies two unsigned integers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two unsigned integers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n\t* reverts when dividing by zero.\r\n\t\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\t/**\r\n\t* @dev Total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param owner The address to query the balance of.\r\n\t\t* @return A uint256 representing the amount owned by the passed address.\r\n\t\t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param owner address The address which owns the funds.\r\n\t\t* @param spender address The address which will spend the funds.\r\n\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t\t*/\r\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\r\n\t\treturn _allowed[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token to a specified address\r\n\t* @param to The address to transfer to.\r\n\t\t* @param value The amount to be transferred.\r\n\t\t*/\r\n\tfunction transfer(address to, uint256 value) public returns (bool) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t* @param spender The address which will spend the funds.\r\n\t\t* @param value The amount of tokens to be spent.\r\n\t\t*/\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another.\r\n\t* Note that while this function emits an Approval event, this is not required as per the specification,\r\n\t\t* and other compliant implementations may not emit the event.\r\n\t\t* @param from address The address which you want to send tokens from\r\n\t* @param to address The address which you want to transfer to\r\n\t* @param value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\t\t_transfer(from, to, value);\r\n\t\t_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t* approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n\t* allowed value is better to use this function to avoid 2 calls \r\n\t*/\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t* approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified addresses\r\n\t* @param from The address to transfer from.\r\n\t\t* @param to The address to transfer to.\r\n\t\t\t* @param value The amount to be transferred.\r\n\t\t\t*/\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n\t\trequire(to != address(0));\r\n\r\n\t\t_balances[from] = _balances[from].sub(value);\r\n\t\t_balances[to] = _balances[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function that mints an amount of the token and assigns it to\r\n\t* an account. This encapsulates the modification of balances such that the\r\n\t* proper events are emitted.\r\n\t\t* @param account The account that will receive the created tokens.\r\n\t\t* @param value The amount that will be created.\r\n\t\t*/\r\n\tfunction _mint(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\r\n\t\t_totalSupply = _totalSupply.add(value);\r\n\t\t_balances[account] = _balances[account].add(value);\r\n\t\temit Transfer(address(0), account, value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function that burns an amount of the token of a given\r\n\t* account.\r\n\t\t* @param account The account whose tokens will be burnt.\r\n\t\t* @param value The amount that will be burnt.\r\n\t\t*/\r\n\tfunction _burn(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\r\n\t\t_totalSupply = _totalSupply.sub(value);\r\n\t\t_balances[account] = _balances[account].sub(value);\r\n\t\temit Transfer(account, address(0), value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Approve an address to spend another addresses' tokens.\r\n\t* @param owner The address that owns the tokens.\r\n\t\t* @param spender The address that will spend the tokens.\r\n\t\t* @param value The number of tokens that can be spent.\r\n\t\t*/\r\n\tfunction _approve(address owner, address spender, uint256 value) internal {\r\n\t\trequire(spender != address(0));\r\n\t\trequire(owner != address(0));\r\n\r\n\t\t_allowed[owner][spender] = value;\r\n\t\temit Approval(owner, spender, value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function that burns an amount of the token of a given\r\n\t* account, deducting from the sender's allowance for said account. Uses the\r\n\t* internal burn function.\r\n\t* Emits an Approval event (reflecting the reduced allowance).\r\n\t\t* @param account The account whose tokens will be burnt.\r\n\t\t* @param value The amount that will be burnt.\r\n\t\t*/\r\n\tfunction _burnFrom(address account, uint256 value) internal {\r\n\t\t_burn(account, value);\r\n\t\t_approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n\t}\r\n}\r\n\r\ncontract MinterRole {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent MinterAdded(address indexed account);\r\n\tevent MinterRemoved(address indexed account);\r\n\r\n\tRoles.Role private _minters;\r\n\r\n\tconstructor () internal {\r\n\t\t_addMinter(msg.sender);\r\n\t}\r\n\r\n\tmodifier onlyMinter() {\r\n\t\trequire(isMinter(msg.sender));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isMinter(address account) public view returns (bool) {\r\n\t\treturn _minters.has(account);\r\n\t}\r\n\r\n\tfunction addMinter(address account) public onlyMinter {\r\n\t\t_addMinter(account);\r\n\t}\r\n\r\n\tfunction renounceMinter() public {\r\n\t\t_removeMinter(msg.sender);\r\n\t}\r\n\r\n\tfunction _addMinter(address account) internal {\r\n\t\t_minters.add(account);\r\n\t\temit MinterAdded(account);\r\n\t}\r\n\r\n\tfunction _removeMinter(address account) internal {\r\n\t\t_minters.remove(account);\r\n\t\temit MinterRemoved(account);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n\t/**\r\n\t* @dev Function to mint tokens\r\n\t* @param to The address that will receive the minted tokens.\r\n\t\t* @param value The amount of tokens to mint.\r\n\t\t* @return A boolean that indicates if the operation was successful.\r\n\t\t*/\r\n\tfunction mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n\t\t_mint(to, value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\ncontract ETOToken is ERC20Mintable, ETORoles {\r\n\t/* ETO investors */\r\n\tmapping(address => bool) public investorWhitelist;\r\n\taddress[] public investorWhitelistLUT;\r\n\r\n\t/* ETO contract parameters */\r\n\tstring public constant name = \"Blockstate STO Token\";\r\n\tstring public constant symbol = \"BKN\";\r\n\tuint8 public constant decimals = 0;\r\n\r\n\t/* Listing parameters */\r\n\tstring public ITIN;\r\n\r\n\t/* Audit logging */\r\n\tmapping(uint256 => uint256) public auditHashes;\r\n\r\n\t/* Document hashes */\r\n\tmapping(uint256 => uint256) public documentHashes;\r\n\r\n\t/* Events in the ETO contract */\r\n\t// Transaction related events\r\n\tevent AssetsSeized(address indexed seizee, uint256 indexed amount);\r\n\tevent AssetsUnseized(address indexed seizee, uint256 indexed amount);\r\n\tevent InvestorWhitelisted(address indexed investor);\r\n\tevent InvestorBlacklisted(address indexed investor);\r\n\tevent DividendPayout(address indexed receiver, uint256 indexed amount);\r\n\tevent TokensGenerated(uint256 indexed amount);\r\n\tevent OwnershipUpdated(address indexed newOwner);\r\n\r\n\t/**\r\n\t* @dev Constructor that defines contract parameters\r\n\t*/\r\n\tconstructor() public {\r\n\t\tITIN = \"CCF5-T3UQ-2\";\r\n\t}\r\n\r\n\t/* Variable update events */\r\n\tevent ITINUpdated(string newValue);\r\n\r\n\t/* Variable Update Functions */\r\n\tfunction setITIN(string memory newValue) public onlyOwner {\r\n\t\tITIN = newValue;\r\n\t\temit ITINUpdated(newValue);\r\n\t}\r\n\t\r\n\t/* Function to set the required allowance before seizing assets */\r\n\tfunction approveFor(address seizee, uint256 seizableAmount) public onlyAssetSeizer {\r\n\t    _approve(seizee, msg.sender, seizableAmount);\r\n\t}\r\n\t\r\n\t/* Seize assets */\r\n\tfunction seizeAssets(address seizee, uint256 seizableAmount) public onlyAssetSeizer {\r\n\t\ttransferFrom(seizee, msg.sender, seizableAmount);\r\n\t\temit AssetsSeized(seizee, seizableAmount);\r\n\t}\r\n\r\n\tfunction releaseAssets(address seizee, uint256 seizedAmount) public onlyAssetSeizer {\r\n\t\trequire(balanceOf(msg.sender) >= seizedAmount, \"AssetSeizer has insufficient funds\");\r\n\t\ttransfer(seizee, seizedAmount);\r\n\t\temit AssetsUnseized(seizee, seizedAmount);\r\n\t}\r\n\r\n\t/* Add investor to the whitelist */\r\n\tfunction whitelistInvestor(address investor) public onlyKycProvider {\r\n\t\trequire(investorWhitelist[investor] == false, \"Investor already whitelisted\");\r\n\t\tinvestorWhitelist[investor] = true;\r\n\t\tinvestorWhitelistLUT.push(investor);\r\n\t\temit InvestorWhitelisted(investor);\r\n\t}\r\n\r\n\t/* Remove investor from the whitelist */\r\n\tfunction blacklistInvestor(address investor) public onlyKycProvider {\r\n\t\trequire(investorWhitelist[investor] == true, \"Investor not on whitelist\");\r\n\t\tinvestorWhitelist[investor] = false;\r\n\t\tuint256 arrayLen = investorWhitelistLUT.length;\r\n\t\tfor (uint256 i = 0; i < arrayLen; i++) {\r\n\t\t\tif (investorWhitelistLUT[i] == investor) {\r\n\t\t\t\tinvestorWhitelistLUT[i] = investorWhitelistLUT[investorWhitelistLUT.length - 1];\r\n\t\t\t\tdelete investorWhitelistLUT[investorWhitelistLUT.length - 1];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\temit InvestorBlacklisted(investor);\r\n\t}\r\n\r\n\t/* Overwrite transfer() to respect the whitelist, tag- and drag along rules */\r\n\tfunction transfer(address to, uint256 value) public returns (bool) {\r\n\t\trequire(investorWhitelist[to] == true, \"Investor not whitelisted\");\r\n\t\treturn super.transfer(to, value);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\t\trequire(investorWhitelist[to] == true, \"Investor not whitelisted\");\r\n\t\treturn super.transferFrom(from, to, value);\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n\t\trequire(investorWhitelist[spender] == true, \"Investor not whitelisted\");\r\n\t\treturn super.approve(spender, value);\r\n\t}\r\n\r\n\t/* Generate tokens */\r\n\tfunction generateTokens(uint256 amount, address assetReceiver) public onlyMinter {\r\n\t\t_mint(assetReceiver, amount);\r\n\t}\r\n\r\n\tfunction initiateDividendPayments(uint amount) onlyOwner public returns (bool) {\r\n\t\tuint dividendPerToken = amount / totalSupply();\r\n\t\tuint256 arrayLen = investorWhitelistLUT.length;\r\n\t\tfor (uint256 i = 0; i < arrayLen; i++) {\r\n\t\t\taddress currentInvestor = investorWhitelistLUT[i];\r\n\t\t\tuint256 currentInvestorShares = balanceOf(currentInvestor);\r\n\t\t\tuint256 currentInvestorPayout = dividendPerToken * currentInvestorShares;\r\n\t\t\temit DividendPayout(currentInvestor, currentInvestorPayout);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction addAuditHash(uint256 hash) public onlyAuditWriter {\r\n\t\tauditHashes[now] = hash;\r\n\t}\r\n\r\n\tfunction getAuditHash(uint256 timestamp) public view returns (uint256) {\r\n\t\treturn auditHashes[timestamp];\r\n\t}\r\n\r\n\tfunction addDocumentHash(uint256 hash) public onlyOwner {\r\n\t\tdocumentHashes[now] = hash;\r\n\t}\r\n\r\n\tfunction getDocumentHash(uint256 timestamp) public view returns (uint256) {\r\n\t\treturn documentHashes[timestamp];\r\n\t}\r\n}\r\n\r\ncontract ETOVotes is ETOToken {\r\n\tevent VoteOpen(uint256 _id, uint _deadline);\r\n\tevent VoteFinished(uint256 _id, bool _result);\r\n\r\n\t// How many blocks should we wait before the vote can be closed\r\n\tmapping (uint256 => Vote) private votes;\r\n\r\n\tstruct Voter {\r\n\t\taddress id;\r\n\t\tbool vote;\r\n\t}\r\n\r\n\tstruct Vote {\r\n\t\tuint256 deadline;\r\n\t\tVoter[] voters;\r\n\t\tmapping(address => uint) votersIndex;\r\n\t\tuint256 documentHash;\r\n\t}\r\n\r\n\tconstructor() public {}\r\n\r\n\tfunction vote(uint256 _id, bool _vote) public {\r\n\t\t// Allow changing opinion until vote deadline\r\n\t\trequire (votes[_id].deadline > 0, \"Vote not available\");\r\n\t\trequire(now <= votes[_id].deadline, \"Vote deadline exceeded\");\r\n\t\tif (didCastVote(_id)) {\r\n\t\t\tuint256 currentIndex = votes[_id].votersIndex[msg.sender];\r\n\t\t\tVoter memory newVoter = Voter(msg.sender, _vote);\r\n\t\t\tvotes[_id].voters[currentIndex - 1] = newVoter;\r\n\t\t} else {\r\n\t\t\tvotes[_id].voters.push(Voter(msg.sender, _vote));\r\n\t\t\tvotes[_id].votersIndex[msg.sender] = votes[_id].voters.length;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getVoteDocumentHash(uint256 _id) public view returns (uint256) {\r\n\t\treturn votes[_id].documentHash;\r\n\t}\r\n\r\n\tfunction openVote(uint256 _id, uint256 documentHash, uint256 voteDuration) onlyOwner external {\r\n\t\trequire(votes[_id].deadline == 0, \"Vote already ongoing\");\r\n\t\tvotes[_id].deadline = now + (voteDuration * 1 seconds);\r\n\t\tvotes[_id].documentHash = documentHash;\r\n\t\temit VoteOpen(_id, votes[_id].deadline);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Once the deadline is reached this function should be called to get decision.\r\n\t* @param _id data source id.\r\n\t\t*/\r\n\tfunction triggerDecision(uint256 _id) external {\r\n\t\trequire(votes[_id].deadline > 0, \"Vote not available\");\r\n\t\trequire(now > votes[_id].deadline, \"Vote deadline not reached\");\r\n\t\t// prevent method to be called again before its done\r\n\t\tvotes[_id].deadline = 0;\r\n\t\tbool result = (getCurrentPositives(_id) > getCurrentNegatives(_id));\r\n\t\temit VoteFinished(_id, result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev get vote status.\r\n\t* @param _id data source id.\r\n\t\t*/\r\n\tfunction isVoteOpen(uint256 _id) external view returns (bool) {\r\n\t\treturn (votes[_id].deadline > 0) && (now <= votes[_id].deadline);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev check if address voted already.\r\n\t* @param _id data source identifier.\r\n\t*/\r\n\tfunction didCastVote(uint256 _id) public view returns (bool) {\r\n\t\treturn (votes[_id].votersIndex[msg.sender] > 0);\r\n\t}\r\n\r\n\tfunction getOwnVote(uint256 _id) public view returns (bool) {\r\n\t\tuint voterId = votes[_id].votersIndex[msg.sender];\r\n\t\treturn votes[_id].voters[voterId-1].vote;\r\n\t}\r\n\r\n\tfunction getCurrentPositives(uint256 _id) public view returns (uint256) {\r\n\t\tuint adder = 0;\r\n\t\tuint256 arrayLen = votes[_id].voters.length;\r\n\t\tfor (uint256 i = 0; i < arrayLen; i++) {\r\n\t\t\tif (votes[_id].voters[i].vote == true) {\r\n\t\t\t\tadder += balanceOf(votes[_id].voters[i].id);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn adder;\r\n\t}\r\n\r\n\tfunction getCurrentNegatives(uint256 _id) public view returns (uint256) {\r\n\t\tuint adder = 0;\r\n\t\tuint256 arrayLen = votes[_id].voters.length;\r\n\t\tfor (uint256 i = 0; i < arrayLen; i++) {\r\n\t\t\tif (votes[_id].voters[i].vote == false) {\r\n\t\t\t\tadder += balanceOf(votes[_id].voters[i].id);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn adder;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"addDocumentHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAssetSeizer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAssetSeizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAuditHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVoteDocumentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ITIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCurrentNegatives\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAssetSeizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setITIN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auditHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwnVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKycProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seizee\",\"type\":\"address\"},{\"name\":\"seizableAmount\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"assetReceiver\",\"type\":\"address\"}],\"name\":\"generateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCurrentPositives\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isVoteOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"addAuditHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seizee\",\"type\":\"address\"},{\"name\":\"seizedAmount\",\"type\":\"uint256\"}],\"name\":\"releaseAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDocumentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceKycProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorWhitelistLUT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documentHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"didCastVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAuditWriter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuditWriter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKycProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"whitelistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"documentHash\",\"type\":\"uint256\"},{\"name\":\"voteDuration\",\"type\":\"uint256\"}],\"name\":\"openVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuditWriter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initiateDividendPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seizee\",\"type\":\"address\"},{\"name\":\"seizableAmount\",\"type\":\"uint256\"}],\"name\":\"seizeAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"triggerDecision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"blacklistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"VoteOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"}],\"name\":\"VoteFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seizee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetsSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seizee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetsUnseized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ITINUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuditWriterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuditWriterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KycProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KycProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetSeizerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetSeizerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ETOVotes","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://078fc2923b27980560b4352d49621012200134d39596aa4667304224b3b0d5e5"}]}