{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n\tBasic ERC-223 declaration\r\n*/\r\ncontract ERC223Interface {\r\n\tuint256 public totalSupply;\r\n\tfunction transfer(address to, uint256 value) public;\r\n\tfunction transfer(address to, uint256 value, bytes memory data) public;\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n}\r\n\r\n\r\n/*\r\n\tprovides the tokenFallback function\r\n\tas required in the ERC-223 standard\r\n*/\r\ncontract ContractReceiver {\r\n\r\n\tstruct TKN {\r\n\t\taddress sender;\r\n\t\tuint value;\r\n\t\tbytes data;\r\n\t\tbytes4 sig;\r\n\t}\r\n\r\n\r\n\tfunction tokenFallback(address _from, uint _value, bytes memory _data) public pure {\r\n\t\tTKN memory tkn;\r\n\t\ttkn.sender = _from;\r\n\t\ttkn.value = _value;\r\n\t\ttkn.data = _data;\r\n\t\tuint32 u = uint32(bytes4(_data[3])) + (uint32(bytes4(_data[2]) << 8)) + (uint32(bytes4(_data[1]) << 16)) + (uint32(bytes4(_data[0])) << 24);\r\n\t\ttkn.sig = bytes4(u);\r\n\t}\r\n}\r\n\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, \"you are not the owner of this token\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract MaxProfitCoin is owned, ERC223Interface{\r\n\r\n\t// implementation of addition and \r\n\t// substraction which ensures that \r\n\t// we don't go lower than zero\r\n\t// and we don't overflow\r\n\r\n\t// name of our token\r\n\tstring public name = \"MaxProfitCoin\";\r\n\t// symbol\r\n\tstring public symbol = \"MPC\";\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply = 1 * 10**9 * 10 ** uint256(decimals);\r\n\r\n\r\n\t// events emitted by our smart contract\r\n\t// self-explanatory\r\n\t// for the definition of attributes go to the function definitions\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n\tevent Burn(address indexed from, address indexed to, uint256 value);\r\n\r\n\tconstructor() public{\r\n\t\t// sends all initial coin to the wallet of the creator of the token\r\n\t\t// balanceOf[msg.sender] = totalSupply;\t\r\n\t\tbalanceOf[address(this)] = totalSupply;\r\n\t}\r\n\r\n\t\r\n\t/*\r\n\t\tinternal/private function \r\n\t\t\r\n\t\tcontains the logic of actually transfering money from account to account\r\n\r\n\t\tattributes:\r\n\t\t\t_from: address => address of the wallet from which the transfer occurs\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t\t\t_data: bytes => arbitrary data to be transfered with the transaction\r\n\t\t\t\t\t\t\tmodeled after tx.data\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint _value, bytes memory _data) private{\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\t\trequire(_to != address(0x0), \"don't send tokens to 0x0\");\r\n\t\trequire(balanceOf[_from] >= _value, \"not enough money in sender's wallet\");\r\n\t\trequire(balanceOf[_to] + _value >= balanceOf[_to], \"too much money in receiver's wallet\");\r\n\r\n        balanceOf[_from] = balanceOf[_from] -_value;\r\n        balanceOf[_to] = balanceOf[_to] +_value;\r\n\r\n        if(codeLength>0) {\r\n            ContractReceiver receiver = ContractReceiver (_to);\r\n            receiver.tokenFallback(_from, _value, _data);\r\n        }\r\n        emit Transfer(_from, _to, _value, _data);\r\n\t\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tacts as intermediary between outside world and internal _transfer function\r\n\r\n\t\tattributes:\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t\t\t_data: bytes => arbitrary data to be transfered with the transaction\r\n\t\t\t\t\t\t\tmodeled after tx.data\r\n\t*/\r\n\tfunction transfer(address _to, uint _value, bytes memory _data)public {\r\n\t\t_transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tacts as intermediary between outside world and internal _transfer function\r\n\t\tprovided for compatibility with ERC-20 standard\r\n\r\n\t\tattributes:\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t*/\r\n    function transfer(address _to, uint _value) public{\r\n\t\tbytes memory empty;\r\n\t\t_transfer(msg.sender, _to, _value, empty);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MaxProfitCoin","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80cbd767855e25fa6d987e842a46b95c150bf0ecc818697baa559d26bf2d7b6e"}]}