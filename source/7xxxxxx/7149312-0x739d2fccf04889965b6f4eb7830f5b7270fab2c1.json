{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood:\r\n        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract OCGERC20 is StandardToken, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables of the token */\r\n    uint256 public creationBlock;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public standard;\r\n\r\n    bool public locked;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function OCGERC20(\r\n        uint256 _totalSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    ) public {\r\n        standard = \"ERC20 0.1\";\r\n        locked = _locked;\r\n        totalSupply = _totalSupply;\r\n\r\n        if (_transferAllSupplyToOwner) {\r\n            balances[msg.sender] = totalSupply;\r\n        } else {\r\n            balances[this] = totalSupply;\r\n        }\r\n        name = _tokenName;\r\n        // Set the name for display purposes\r\n        symbol = _tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = _decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(locked == false);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transferFee(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burnInternal(address _address, uint256 _value) internal returns (bool) {\r\n        balances[_address] = balances[_address].sub(_value);\r\n        Transfer(_address, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/*\r\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\r\nThis contract contains basic minting functionality though\r\n*/\r\ncontract MintingERC20 is OCGERC20 {\r\n\r\n    // Variables\r\n    mapping (address => bool) public minters;\r\n\r\n    // Modifiers\r\n    modifier onlyMinters() {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function MintingERC20(\r\n        uint256 _initialSupply,\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n    public OCGERC20(\r\n        _initialSupply,\r\n        _tokenName,\r\n        _decimals,\r\n        _symbol,\r\n        _transferAllSupplyToOwner,\r\n        _locked\r\n    )\r\n    {\r\n        standard = \"MintingERC20 0.1\";\r\n        minters[msg.sender] = true;\r\n    }\r\n\r\n    function addMinter(address _newMinter) public onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        Transfer(address(0), _addr, _amount);\r\n\r\n        return _amount;\r\n    }\r\n}\r\n\r\ncontract OCG is MintingERC20 {\r\n\r\n    OCGFee public fees;\r\n\r\n    SellableToken public sellableToken;\r\n\r\n    uint256 public deployedAt;\r\n\r\n    address public burnAddress;\r\n\r\n    bool public isInitialValuesFetched;\r\n\r\n    mapping (address => uint256) public burnAmount;\r\n\r\n    mapping (address => uint256) public lastCharge;\r\n\r\n    event TransferFee(address indexed from, uint256 value);\r\n\r\n    event StorageFee(address indexed from, uint256 value);\r\n\r\n    modifier onlySellableContract() {\r\n        require(msg.sender == address(sellableToken));\r\n        _;\r\n    }\r\n\r\n    function OCG(\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _decimalUnits,\r\n        address _burnAddress,\r\n        bool _locked\r\n    ) public MintingERC20(\r\n        0,\r\n        _tokenName,\r\n        _decimalUnits,\r\n        _tokenSymbol,\r\n        false,\r\n        _locked\r\n    ) {\r\n        standard = \"OCG 0.1\";\r\n        deployedAt = now;\r\n        require(_burnAddress != address(0));\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    function fetchInitialValues(OCG _sourceAddress, address[7] _holders) public onlyOwner {\r\n        require(isInitialValuesFetched == false);\r\n        isInitialValuesFetched = true;\r\n\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            mint(_holders[i], _sourceAddress.balanceOf(_holders[i]));\r\n        }\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function setOCGFee(address _fees) public onlyOwner {\r\n        require(_fees != address(0));\r\n        fees = OCGFee(_fees);\r\n    }\r\n\r\n    function setSellableToken(address _sellable) public onlyOwner {\r\n        require(_sellable != address(0));\r\n        sellableToken = SellableToken(_sellable);\r\n    }\r\n\r\n    function setBurnAddress(address _burnAddress) public onlyOwner {\r\n        require(_burnAddress != address(0));\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    function burn(address _address) public onlyOwner {\r\n        if (burnAmount[_address] > 0) {\r\n            super.burnInternal(burnAddress, burnAmount[_address]);\r\n            burnAmount[_address] = 0;\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool status) {\r\n        require(locked == false && msg.sender != burnAddress);\r\n\r\n        uint256 valueToTransfer = _value;\r\n\r\n        if (_to == burnAddress) {\r\n            burnAmount[msg.sender] = burnAmount[msg.sender].add(valueToTransfer);\r\n        } else {\r\n            uint256 feeValue = transferFees(msg.sender, _to, _value);\r\n\r\n            valueToTransfer = _value.sub(feeValue);\r\n            if (valueToTransfer > balanceOf(msg.sender)) {\r\n                valueToTransfer = balanceOf(msg.sender);\r\n            }\r\n        }\r\n\r\n        status = super.transfer(_to, valueToTransfer);\r\n\r\n        sellableToken.updateFreeStorage(msg.sender, balanceOf(msg.sender));\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool status) {\r\n        require(locked == false && _from != burnAddress);\r\n\r\n        uint256 valueToTransfer = _value;\r\n\r\n        if (_to == burnAddress) {\r\n            burnAmount[_from] = burnAmount[_from].add(valueToTransfer);\r\n        } else {\r\n            uint256 feeValue = transferFees(_from, _to, _value);\r\n\r\n            valueToTransfer = _value.sub(feeValue);\r\n            if (valueToTransfer > balanceOf(_from)) {\r\n                valueToTransfer = balanceOf(_from);\r\n            }\r\n        }\r\n\r\n        status = super.transferFrom(_from, _to, valueToTransfer);\r\n        require(status == true);\r\n\r\n        sellableToken.updateFreeStorage(_from, balanceOf(_from));\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        uint256 mintedAmount = super.mint(_addr, _amount);\r\n\r\n        if (mintedAmount == _amount && lastCharge[_addr] == 0 && _amount > 0) {\r\n            lastCharge[_addr] = now;\r\n        }\r\n\r\n        return mintedAmount;\r\n    }\r\n\r\n    function payStorageFee(address _from) internal returns (bool) {\r\n        require(_from != address(0) && address(fees) != address(0) && address(sellableToken) != address(0));\r\n        uint256 _value = balanceOf(_from);\r\n        require(sellableToken.freeStorage(_from) <= _value);\r\n\r\n        bool status = true;\r\n        uint256 additionalAmount = 0;\r\n\r\n        if (sellableToken.freeStorage(_from) != 0) {\r\n            if (deployedAt.add(fees.offPeriod()) >= now) {\r\n                _value = _value.sub(sellableToken.freeStorage(_from));\r\n            } else if (lastCharge[_from] < deployedAt.add(fees.offPeriod())) {\r\n                additionalAmount = calculateStorageFee(\r\n                    _value.sub(sellableToken.freeStorage(_from)),\r\n                    deployedAt.add(fees.offPeriod()).sub(lastCharge[_from])\r\n                );\r\n                lastCharge[_from] = deployedAt.add(fees.offPeriod());\r\n            }\r\n        }\r\n\r\n        uint256 amount = calculateStorageFee(_value, now.sub(lastCharge[_from])).add(additionalAmount);\r\n        if (amount != 0 && balanceOf(_from) >= amount) {\r\n            status = super.transferFee(_from, fees.feeAddress(), amount);\r\n            StorageFee(_from, amount);\r\n        }\r\n\r\n        require(status == true);\r\n        lastCharge[_from] = now;\r\n\r\n        return status;\r\n    }\r\n\r\n    function calculateStorageFee(uint256 _value, uint256 _period) internal view returns (uint256) {\r\n        uint256 amount = 0;\r\n        if (_period.div(1 days) > 0 && _value > 0) {\r\n            amount = _value.mul(fees.feeAmount()).mul(_period).div(1 years).div(1000);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function transferFees(address _from, address _to, uint256 _value) internal returns (uint256) {\r\n        require(address(fees) != address(0) && address(sellableToken) != address(0));\r\n\r\n        bool status = false;\r\n\r\n        if (fees.feeAmount() > 0) {\r\n            status = payStorageFee(_from);\r\n            if (status) {\r\n                status = payStorageFee(_to);\r\n            }\r\n        }\r\n\r\n        uint256 feeValue = 0;\r\n        if (fees.transferFee() > 0) {\r\n            feeValue = _value.mul(fees.transferFee()).div(uint(10) ** decimals);\r\n        }\r\n        if (status && feeValue > 0) {\r\n            status = super.transferFee(_from, fees.transferFeeAddress(), feeValue);\r\n            TransferFee(_from, feeValue);\r\n        }\r\n\r\n        require(status == true);\r\n\r\n        return feeValue;\r\n    }\r\n\r\n}\r\n\r\ncontract OCGFee is Ownable {\r\n\r\n    SellableToken public sellableToken;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public offPeriod = 3 years;\r\n\r\n    uint256 public offThreshold;\r\n\r\n    uint256 public feeAmount;\r\n\r\n    address public feeAddress;\r\n\r\n    address public transferFeeAddress;\r\n\r\n    uint256 public transferFee;\r\n\r\n    modifier onlySellableContract() {\r\n        require(msg.sender == address(sellableToken));\r\n        _;\r\n    }\r\n\r\n    function OCGFee(\r\n        uint256 _offThreshold,\r\n        address _feeAddress,\r\n        uint256 _feeAmount,//0.5% -> 5\r\n        address _transferFeeAddress,\r\n        uint256 _transferFee //0.04% -> 0.04 * 10 ^ decimals\r\n    )\r\n        public\r\n    {\r\n        require(_feeAddress != address(0) && _feeAmount >= 0 && _offThreshold > 0);\r\n        offThreshold = _offThreshold;\r\n        feeAddress = _feeAddress;\r\n        feeAmount = _feeAmount;\r\n\r\n        require(_transferFeeAddress != address(0) && _transferFee >= 0);\r\n        transferFeeAddress = _transferFeeAddress;\r\n        transferFee = _transferFee;\r\n    }\r\n\r\n    function setSellableToken(address _sellable) public onlyOwner {\r\n        require(_sellable != address(0));\r\n        sellableToken = SellableToken(_sellable);\r\n    }\r\n\r\n    function setStorageFee(\r\n        uint256 _offThreshold,\r\n        address _feeAddress,\r\n        uint256 _feeAmount //0.5% -> 5\r\n    ) public onlyOwner {\r\n        require(_feeAddress != address(0));\r\n\r\n        offThreshold = _offThreshold;\r\n        feeAddress = _feeAddress;\r\n        feeAmount = _feeAmount;\r\n    }\r\n\r\n    function decreaseThreshold(uint256 _value) public onlySellableContract {\r\n        if (offThreshold < _value) {\r\n            offThreshold = 0;\r\n        } else {\r\n            offThreshold = offThreshold.sub(_value);\r\n        }\r\n    }\r\n\r\n    function setTransferFee(address _transferFeeAddress, uint256 _transferFee) public onlyOwner returns (bool) {\r\n        if (_transferFeeAddress != address(0) && _transferFee >= 0) {\r\n            transferFeeAddress = _transferFeeAddress;\r\n            transferFee = _transferFee;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\ncontract Multivest is Ownable {\r\n    /* public variables */\r\n    mapping (address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event MultivestSet(address multivest);\r\n\r\n    event MultivestUnset(address multivest);\r\n\r\n    event Contribution(address _holder, uint256 tokens);\r\n\r\n    modifier onlyAllowedMultivests(address _address) {\r\n        require(true == allowedMultivests[_address]);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest(address _multivest) public {\r\n        allowedMultivests[_multivest] = true;\r\n    }\r\n\r\n    /* public methods */\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n    }\r\n\r\n    function multivestBuy(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 _value\r\n    ) public onlyAllowedMultivests(msg.sender) {\r\n        bool status = buy(_address, _amount, _value);\r\n\r\n        require(status == true);\r\n    }\r\n\r\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool);\r\n\r\n}\r\n\r\ncontract SellableToken is Multivest {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    OCG public ocg;\r\n\r\n    OCGFee public fees;\r\n\r\n    // amount of sold tokens\r\n    uint256 public soldTokens;\r\n\r\n    uint256 public minInvest;\r\n\r\n    mapping (address => uint256) public freeStorage;\r\n\r\n    modifier onlyOCGContract() {\r\n        require(msg.sender == address(ocg));\r\n        _;\r\n    }\r\n\r\n    function SellableToken(\r\n        address _ocg,\r\n        uint256 _minInvest //0.1 tokens -> 0.1 * 10 ^ decimals\r\n    )\r\n        public Multivest(msg.sender)\r\n    {\r\n        require(_minInvest > 0);\r\n        ocg = OCG(_ocg);\r\n\r\n        minInvest = _minInvest;\r\n    }\r\n\r\n    function setOCG(address _ocg) public onlyOwner {\r\n        require(_ocg != address(0));\r\n        ocg = OCG(_ocg);\r\n    }\r\n\r\n    function setOCGFee(address _fees) public onlyOwner {\r\n        require(_fees != address(0));\r\n        fees = OCGFee(_fees);\r\n    }\r\n\r\n    function updateFreeStorage(address _address, uint256 _value) public onlyOCGContract {\r\n        if (freeStorage[_address] > _value) {\r\n            freeStorage[_address] = _value;\r\n        }\r\n    }\r\n\r\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\r\n        require(_address != address(0) && address(ocg) != address(0));\r\n\r\n        if (_amount == 0 || _amount < minInvest || _value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 mintedAmount = ocg.mint(_address, _amount);\r\n\r\n        require(mintedAmount == _amount);\r\n\r\n        onSuccessfulBuy(_address, _value, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function onSuccessfulBuy(address _address, uint256 _value, uint256 _amount) internal {\r\n        soldTokens = soldTokens.add(_amount);\r\n        if (fees.offThreshold() > 0) {\r\n            uint256 freeAmount = _amount;\r\n            if (fees.offThreshold() < _value) {\r\n                freeAmount = _amount.sub(_value.sub(fees.offThreshold()).mul(_amount).div(_value));\r\n            }\r\n\r\n            freeStorage[_address] = freeStorage[_address].add(freeAmount);\r\n        }\r\n\r\n        fees.decreaseThreshold(_value);\r\n    }\r\n\r\n}\r\n\r\ncontract Deposit is Multivest {\r\n\r\n    address public etherHolder;\r\n\r\n    function Deposit(\r\n        address _etherHolder\r\n    )\r\n        public Multivest(msg.sender)\r\n    {\r\n        require(_etherHolder != address(0));\r\n        etherHolder = _etherHolder;\r\n    }\r\n\r\n    function setEtherHolder(address _etherHolder) public onlyOwner {\r\n        require(_etherHolder != address(0));\r\n        etherHolder = _etherHolder;\r\n    }\r\n\r\n    function deposit(\r\n        address _address,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\r\n        require(_address == msg.sender);\r\n        Contribution(msg.sender, msg.value);\r\n        etherHolder.transfer(msg.value);\r\n    }\r\n\r\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\r\n    }\r\n\r\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\r\n        _address = _address;\r\n        _amount = _amount;\r\n        _value = _value;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fees\",\"type\":\"address\"}],\"name\":\"setOCGFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceAddress\",\"type\":\"address\"},{\"name\":\"_holders\",\"type\":\"address[7]\"}],\"name\":\"fetchInitialValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellable\",\"type\":\"address\"}],\"name\":\"setSellableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialValuesFetched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_burnAddress\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StorageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OCG","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000090000000000000000000000007b595d6c2b268b3f00c0fc4d440b538537736802000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134f726f637279707420476f6c6420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f43470000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f44367f0c0cb2fe2e5493651df9547cae42851319cd95c5746d1f67dfa07e932"}]}