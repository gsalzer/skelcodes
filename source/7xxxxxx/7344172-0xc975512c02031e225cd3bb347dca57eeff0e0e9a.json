{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  C:\\github\\privateCode\\retroArt\\reactWebsite\\contracts\\RetroArtTokenAuction.sol\r\n// flattened :  Monday, 22-Apr-19 22:17:45 UTC\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes memory _data \r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary RecordKeeping {\r\n    struct priceRecord {\r\n        uint256 price;\r\n        address owner;\r\n        uint256 timestamp;\r\n\r\n    }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Withdrawable  is Ownable {\r\n    \r\n    // _changeType is used to indicate the type of the transaction\r\n    // 0 - normal withdraw \r\n    // 1 - deposit from selling asset\r\n    // 2 - deposit from profit sharing of new token\r\n    // 3 - deposit from auction\r\n    // 4 - failed auction refund\r\n    // 5 - referral commission\r\n\r\n    event BalanceChanged(address indexed _owner, int256 _change,  uint256 _balance, uint8 _changeType);\r\n  \r\n    mapping (address => uint256) internal pendingWithdrawals;\r\n  \r\n    //total pending amount\r\n    uint256 internal totalPendingAmount;\r\n\r\n    function _deposit(address addressToDeposit, uint256 amount, uint8 changeType) internal{      \r\n        if (amount > 0) {\r\n            _depositWithoutEvent(addressToDeposit, amount);\r\n            emit BalanceChanged(addressToDeposit, int256(amount), pendingWithdrawals[addressToDeposit], changeType);\r\n        }\r\n    }\r\n\r\n    function _depositWithoutEvent(address addressToDeposit, uint256 amount) internal{\r\n        pendingWithdrawals[addressToDeposit] += amount;\r\n        totalPendingAmount += amount;       \r\n    }\r\n\r\n    function getBalance(address addressToCheck) public view returns (uint256){\r\n        return pendingWithdrawals[addressToCheck];\r\n    }\r\n\r\n    function withdrawOwnFund(address payable recipient_address) public {\r\n        require(msg.sender==recipient_address);\r\n\r\n        uint amount = pendingWithdrawals[recipient_address];\r\n        require(amount > 0);\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[recipient_address] = 0;\r\n        totalPendingAmount -= amount;\r\n        recipient_address.transfer(amount);\r\n        emit BalanceChanged(recipient_address, -1 * int256(amount),  0, 0);\r\n    }\r\n\r\n    function checkAvailableContractBalance() public view returns (uint256){\r\n        if (address(this).balance > totalPendingAmount){\r\n            return address(this).balance - totalPendingAmount;\r\n        } else{\r\n            return 0;\r\n        }\r\n    }\r\n    function withdrawContractFund(address payable recipient_address) public onlyOwner  {\r\n        uint256 amountToWithdraw = checkAvailableContractBalance();\r\n        if (amountToWithdraw > 0){\r\n            recipient_address.transfer(amountToWithdraw);\r\n        }\r\n    }\r\n} \r\ncontract ERC721Holder is ERC721Receiver {\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256,\r\n    bytes memory\r\n  )\r\n    public\r\n    returns(bytes4)\r\n  {\r\n    return ERC721_RECEIVED;\r\n  }\r\n}\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data \r\n  )\r\n    public;\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS paused\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS NOT paused\r\n    */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused returns (bool)  {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\ncontract TokenAuctionBase is ERC721Holder, Withdrawable {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Mminimum selling Price (in wei) \r\n        uint128 minPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n        //current highest Bid price\r\n        uint128 highestPrice;\r\n        //current highest Bidder\r\n        address highestBidder;        \r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721Basic public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n \r\n    event AuctionCreated(uint256 indexed tokenId, uint128 minPrice, uint64 duration);\r\n    event AuctionSuccessful(uint256 indexed tokenId, uint128 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 indexed tokenId);\r\n    event AuctionExpired(uint256 indexed tokenId);\r\n    event HighestBidIncreased(uint256 indexed tokenId, address bidder, uint128 amount);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.safeTransferFrom(_owner, address(this), _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.safeTransferFrom(address(this), _receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(\r\n            _tokenId,\r\n            uint128(_auction.minPrice),\r\n            uint64(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    function _bidWithDeposit (uint256 _tokenId, uint256 _additionalAmount) internal{\r\n        uint256 totalAmount = _additionalAmount + pendingWithdrawals[msg.sender];\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        _bid(_tokenId, totalAmount);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.   \r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n       \r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isAuctionActive(auction));\r\n        \r\n        // Check that the bid is greater than the highest price      \r\n        require(_bidAmount > auction.highestPrice && _bidAmount > auction.minPrice);\r\n\r\n        //refund the current highest bidder\r\n        if (auction.highestPrice != 0){\r\n            _deposit(auction.highestBidder, auction.highestPrice, 4);\r\n\r\n            //make sure we unlock the amount from the withheld amount\r\n            if (totalPendingAmount > auction.highestPrice) {\r\n                totalPendingAmount -= auction.highestPrice;\r\n            }else{\r\n                totalPendingAmount = 0;\r\n            }\r\n        }\r\n        \r\n        auction.highestPrice = uint128(msg.value);\r\n        auction.highestBidder = msg.sender;\r\n\r\n        //make sure we lock the escrow amount of the highest price to prevent withdrawing from the contract\r\n        totalPendingAmount += auction.highestPrice;\r\n\r\n        emit HighestBidIncreased(_tokenId,auction.highestBidder, auction.highestPrice);\r\n     \r\n    }\r\n\r\n    function _concludeAuction(uint256 _tokenId) internal returns (uint256) {\r\n      \r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));       \r\n\r\n        uint256 secondsPassed = now - auction.startedAt;\r\n        require(secondsPassed > auction.duration);\r\n\r\n      \r\n\r\n        if (auction.highestPrice > auction.minPrice && auction.highestPrice > 0) {\r\n            uint256 auctioneerCut = _computeCut(auction.highestPrice);\r\n            uint256 sellerProceeds = auction.highestPrice - auctioneerCut;          \r\n            emit AuctionSuccessful(_tokenId, auction.highestPrice, auction.highestBidder);\r\n            return sellerProceeds;\r\n        }else{\r\n      \r\n            emit AuctionExpired(_tokenId);\r\n            return 0;\r\n        }\r\n\r\n   \r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {     \r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    function _isAuctionActive(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0 && now - _auction.startedAt < _auction.duration);      \r\n    }\r\n\r\n    \r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }  \r\n\r\n\r\n\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string memory _name, string memory _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenAuction is TokenAuctionBase, Pausable  {\r\n    \r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    constructor (address _nftAddress, uint256 _cut) public  {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        ERC165 testContract = ERC165(_nftAddress);\r\n        require(testContract.supportsInterface(InterfaceSignature_ERC721));\r\n        ERC721Basic candidateContract = ERC721Basic(_nftAddress);       \r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawContractBalance(address payable recipient_address) external {\r\n        address nftAddress = address(nonFungibleContract);\r\n        require(recipient_address==nftAddress);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        require (address(this).balance - totalPendingAmount > 0, \"no fund\");\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        recipient_address.transfer(address(this).balance - totalPendingAmount);\r\n    }\r\n\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _minPrice - minimum price of auction.  \r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _minPrice, \r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_minPrice == uint256(uint128(_minPrice)));      \r\n        require(_duration == uint256(uint64(_duration)));\r\n        require(_owns(msg.sender, _tokenId));\r\n        _createAuction(_tokenId, _minPrice, _duration, _seller);\r\n    }\r\n\r\n    function _createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _minPrice, \r\n        uint256 _duration,\r\n        address _seller\r\n    ) internal {\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction =  Auction(\r\n            _seller,\r\n            uint128(_minPrice),         \r\n            uint64(_duration),\r\n            uint64(now),\r\n            0,\r\n            address(0)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n       \r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isAuctionActive(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        \r\n        if (auction.highestPrice != 0){\r\n            _deposit(auction.highestBidder, auction.highestPrice, 4);    \r\n            auction.startedAt = 0;\r\n            auction.highestPrice = 0;      \r\n        }\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        \r\n        if (auction.highestPrice != 0){\r\n            _deposit(auction.highestBidder, auction.highestPrice, 4);   \r\n            auction.startedAt = 0;\r\n            auction.highestPrice = 0;           \r\n        }\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 minPrice,     \r\n        uint256 duration,\r\n        uint256 startedAt,\r\n        uint256 highestPrice,\r\n        address highestBidder\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.minPrice,\r\n            auction.duration,         \r\n            auction.startedAt,\r\n            auction.highestPrice,\r\n            auction.highestBidder\r\n        );\r\n    }\r\n\r\n    function concludeAuction(uint256 _tokenId) public {\r\n      \r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        uint256 sellerProceeds = _concludeAuction(_tokenId);\r\n\r\n        if (totalPendingAmount > sellerProceeds) {\r\n            totalPendingAmount -= sellerProceeds;\r\n        }else{\r\n            totalPendingAmount = 0;\r\n        }\r\n\r\n        if (sellerProceeds > 0) {\r\n            _transfer(auction.highestBidder, _tokenId);\r\n            _deposit(auction.seller, sellerProceeds, 3);\r\n        } else {\r\n             _transfer(auction.seller, _tokenId);\r\n             _deposit(auction.highestBidder, auction.highestPrice, 4);\r\n        }    \r\n        auction.startedAt = 0;\r\n        _removeAuction(_tokenId);     \r\n    }\r\n\r\n   \r\n\r\n}\r\n\r\ncontract ERC721WithState is ERC721BasicToken {\r\n    mapping (uint256 => uint8) internal tokenState;\r\n\r\n    event TokenStateSet(uint256 indexed _tokenId,  uint8 _state);\r\n\r\n    function setTokenState(uint256  _tokenId,  uint8 _state) public  {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        require(exists(_tokenId)); \r\n        tokenState[_tokenId] = _state;      \r\n        emit TokenStateSet(_tokenId, _state);\r\n    }\r\n\r\n    function getTokenState(uint256  _tokenId) public view returns (uint8){\r\n        require(exists(_tokenId));\r\n        return tokenState[_tokenId];\r\n    } \r\n\r\n\r\n}\r\ncontract RetroArt is ERC721Token, Ownable, Withdrawable, ERC721WithState {\r\n    \r\n    address public stemTokenContractAddress; \r\n    uint256 public currentPrice;\r\n    uint256 constant initiailPrice = 0.03 ether;\r\n    //new asset price increase at the rate that determined by the variable below\r\n    //it is caculated from the current price + (current price / ( price rate * totalTokens / slowDownRate ))\r\n    uint public priceRate = 10;\r\n    uint public slowDownRate = 7;\r\n    //Commission will be charged if a profit is made\r\n    //Commission is the pure profit / profit Commission  \r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public profitCommission = 500;\r\n\r\n    //the referral percentage of the commission of selling of aset\r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public referralCommission = 3000;\r\n\r\n    //share will be given to all tokens equally if a new asset is acquired. \r\n    //the amount of total shared value is assetValue/sharePercentage   \r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public sharePercentage = 3000;\r\n\r\n    //number of shares for acquiring new asset. \r\n    uint public numberOfShares = 10;\r\n\r\n    string public uriPrefix =\"\";\r\n\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (uint256 => string) internal tokenTitles;\r\n    mapping (uint256 => RecordKeeping.priceRecord) internal initialPriceRecords;\r\n    mapping (uint256 => RecordKeeping.priceRecord) internal lastPriceRecords;\r\n    mapping (uint256 => uint256) internal currentTokenPrices;\r\n\r\n\r\n    event AssetAcquired(address indexed _owner, uint256 indexed _tokenId, string  _title, uint256 _price);\r\n    event TokenPriceSet(uint256 indexed _tokenId,  uint256 _price);\r\n    event TokenBrought(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _price);\r\n    event PriceRateChanged(uint _priceRate);\r\n    event SlowDownRateChanged(uint _slowDownRate);\r\n    event ProfitCommissionChanged(uint _profitCommission);\r\n    event MintPriceChanged(uint256 _price);\r\n    event SharePercentageChanged(uint _sharePercentage);\r\n    event NumberOfSharesChanged(uint _numberOfShares);\r\n    event ReferralCommissionChanged(uint _referralCommission);\r\n    event Burn(address indexed _owner, uint256 _tokenId);\r\n\r\n   \r\n\r\n    bytes4 private constant InterfaceId_RetroArt = 0x94fb30be;\r\n    /*\r\n    bytes4(keccak256(\"buyTokenFrom(address,address,uint256)\"))^\r\n    bytes4(keccak256(\"setTokenPrice(uint256,uint256)\"))^\r\n    bytes4(keccak256(\"setTokenState(uint256,uint8)\"))^\r\n    bytes4(keccak256(\"getTokenState(uint256)\"));\r\n    */\r\n\r\n    address[] internal auctionContractAddresses;\r\n \r\n   \r\n\r\n    function tokenTitle(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));\r\n        return tokenTitles[_tokenId];\r\n    }\r\n    function lastPriceOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  lastPriceRecords[_tokenId].price;\r\n    }   \r\n\r\n    function lastTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  lastPriceRecords[_tokenId].timestamp;\r\n    }\r\n\r\n    function firstPriceOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].price;\r\n    }   \r\n    function creatorOf(uint256 _tokenId) public view returns (address) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].owner;\r\n    }\r\n    function firstTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].timestamp;\r\n    }\r\n    \r\n  \r\n    //problem with current web3.js that can't return an array of struct\r\n    function lastHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\r\n        require(exists(_tokenId));\r\n        return lastPriceRecords[_tokenId];\r\n    }\r\n\r\n    function firstHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\r\n        require(exists(_tokenId)); \r\n        return   initialPriceRecords[_tokenId];\r\n    }\r\n\r\n    function setPriceRate(uint _priceRate) public onlyOwner {\r\n        priceRate = _priceRate;\r\n        emit PriceRateChanged(priceRate);\r\n    }\r\n\r\n    function setSlowDownRate(uint _slowDownRate) public onlyOwner {\r\n        slowDownRate = _slowDownRate;\r\n        emit SlowDownRateChanged(slowDownRate);\r\n    }\r\n \r\n    function setprofitCommission(uint _profitCommission) public onlyOwner {\r\n        require(_profitCommission <= 10000);\r\n        profitCommission = _profitCommission;\r\n        emit ProfitCommissionChanged(profitCommission);\r\n    }\r\n\r\n    function setSharePercentage(uint _sharePercentage) public onlyOwner  {\r\n        require(_sharePercentage <= 10000);\r\n        sharePercentage = _sharePercentage;\r\n        emit SharePercentageChanged(sharePercentage);\r\n    }\r\n\r\n    function setNumberOfShares(uint _numberOfShares) public onlyOwner  {\r\n        numberOfShares = _numberOfShares;\r\n        emit NumberOfSharesChanged(numberOfShares);\r\n    }\r\n\r\n    function setReferralCommission(uint _referralCommission) public onlyOwner  {\r\n        require(_referralCommission <= 10000);\r\n        referralCommission = _referralCommission;\r\n        emit ReferralCommissionChanged(referralCommission);\r\n    }\r\n\r\n    function setUriPrefix(string memory _uri) public onlyOwner  {\r\n       uriPrefix = _uri;\r\n    }\r\n  \r\n    //use the token name, symbol as usual\r\n    //this contract create another ERC20 as stemToken,\r\n    //the constructure takes the stemTokenName and stemTokenSymbol\r\n\r\n    constructor(string memory _name, string memory _symbol , address _stemTokenAddress) \r\n        ERC721Token(_name, _symbol) Ownable() public {\r\n       \r\n        currentPrice = initiailPrice;\r\n        stemTokenContractAddress = _stemTokenAddress;\r\n        _registerInterface(InterfaceId_RetroArt);\r\n    }\r\n\r\n    function getAllAssets() public view returns (uint256[] memory){\r\n        return allTokens;\r\n    }\r\n\r\n    function getAllAssetsForSale() public view returns  (uint256[] memory){\r\n      \r\n        uint arrayLength = allTokens.length;\r\n        uint forSaleCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0) {\r\n                forSaleCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0) {                \r\n                tokensForSale[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return tokensForSale;\r\n    }\r\n\r\n    function getAssetsForSale(address _owner) public view returns (uint256[] memory) {\r\n      \r\n        uint arrayLength = allTokens.length;\r\n        uint forSaleCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {\r\n                forSaleCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {                \r\n                tokensForSale[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return tokensForSale;\r\n    }\r\n\r\n    function getAssetsByState(uint8 _state) public view returns (uint256[] memory){\r\n        \r\n        uint arrayLength = allTokens.length;\r\n        uint matchCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (tokenState[allTokens[i]] == _state) {\r\n                matchCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory matchedTokens = new uint256[](matchCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (tokenState[allTokens[i]] == _state) {                \r\n                matchedTokens[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return matchedTokens;\r\n    }\r\n      \r\n\r\n    function acquireAsset(uint256 _tokenId, string memory _title) public payable{\r\n        acquireAssetWithReferral(_tokenId, _title, address(0));\r\n    }\r\n\r\n    function acquireAssetFromStemToken(address _tokenOwner, uint256 _tokenId, string calldata _title) external {     \r\n         require(msg.sender == stemTokenContractAddress);\r\n        _acquireAsset(_tokenId, _title, _tokenOwner, 0);\r\n    }\r\n\r\n    function acquireAssetWithReferral(uint256 _tokenId, string memory _title, address referralAddress) public payable{\r\n        require(msg.value >= currentPrice);\r\n        \r\n        uint totalShares = numberOfShares;\r\n        if (referralAddress != address(0)) totalShares++;\r\n\r\n        uint numberOfTokens = allTokens.length;\r\n     \r\n        if (numberOfTokens > 0 && sharePercentage > 0) {\r\n\r\n            uint256 perShareValue = 0;\r\n            uint256 totalShareValue = msg.value * sharePercentage / 10000 ;\r\n\r\n            if (totalShares > numberOfTokens) {\r\n                               \r\n                if (referralAddress != address(0)) \r\n                    perShareValue = totalShareValue / (numberOfTokens + 1);\r\n                else\r\n                    perShareValue = totalShareValue / numberOfTokens;\r\n            \r\n                for (uint i = 0; i < numberOfTokens; i++) {\r\n                    //turn off events if there are too many tokens in the loop\r\n                    if (numberOfTokens > 100) {\r\n                        _depositWithoutEvent(tokenOwner[allTokens[i]], perShareValue);\r\n                    }else{\r\n                        _deposit(tokenOwner[allTokens[i]], perShareValue, 2);\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n               \r\n                if (referralAddress != address(0)) \r\n                    perShareValue = totalShareValue / (totalShares + 1);\r\n                else\r\n                    perShareValue = totalShareValue / totalShares;\r\n              \r\n                uint[] memory randomArray = random(numberOfShares);\r\n\r\n                for (uint i = 0; i < numberOfShares; i++) {\r\n                    uint index = randomArray[i] % numberOfTokens;\r\n\r\n                    if (numberOfShares > 100) {\r\n                        _depositWithoutEvent(tokenOwner[allTokens[index]], perShareValue);\r\n                    }else{\r\n                        _deposit(tokenOwner[allTokens[index]], perShareValue, 2);\r\n                    }\r\n                }\r\n            }\r\n                    \r\n            if (referralAddress != address(0) && perShareValue > 0) _deposit(referralAddress, perShareValue, 5);\r\n\r\n        }\r\n\r\n        _acquireAsset(_tokenId, _title, msg.sender, msg.value);\r\n     \r\n    }\r\n\r\n    function _acquireAsset(uint256 _tokenId, string memory _title, address _purchaser, uint256 _value) internal {\r\n        \r\n        currentPrice = CalculateNextPrice();\r\n        _mint(_purchaser, _tokenId);        \r\n      \r\n        tokenTitles[_tokenId] = _title;\r\n       \r\n        RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _purchaser, block.timestamp);\r\n        initialPriceRecords[_tokenId] = pr;\r\n        lastPriceRecords[_tokenId] = pr;     \r\n\r\n        emit AssetAcquired(_purchaser,_tokenId, _title, _value);\r\n        emit TokenBrought(address(0), _purchaser, _tokenId, _value);\r\n        emit MintPriceChanged(currentPrice);\r\n    }\r\n\r\n    function CalculateNextPrice() public view returns (uint256){      \r\n        return currentPrice + currentPrice * slowDownRate / ( priceRate * (allTokens.length + 2));\r\n    }\r\n\r\n    function tokensOf(address _owner) public view returns (uint256[] memory){\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    function _buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress, address _depositTo) internal {\r\n        require(currentTokenPrices[_tokenId] != 0);\r\n        require(msg.value >= currentTokenPrices[_tokenId]);\r\n        \r\n        tokenApprovals[_tokenId] = _to;\r\n        safeTransferFrom(_from,_to,_tokenId);\r\n\r\n        uint256 valueTransferToOwner = msg.value;\r\n        uint256 lastRecordPrice = lastPriceRecords[_tokenId].price;\r\n        if (msg.value >  lastRecordPrice){\r\n            uint256 profit = msg.value - lastRecordPrice;           \r\n            uint256 commission = profit * profitCommission / 10000;\r\n            valueTransferToOwner = msg.value - commission;\r\n            if (referralAddress != address(0)){\r\n                _deposit(referralAddress, commission * referralCommission / 10000, 5);\r\n            }           \r\n        }\r\n        \r\n        if (valueTransferToOwner > 0) _deposit(_depositTo, valueTransferToOwner, 1);\r\n        writePriceRecordForAssetSold(_depositTo, msg.sender, _tokenId, msg.value);\r\n        \r\n    }\r\n\r\n    function buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress) public payable {\r\n        _buyTokenFromWithReferral(_from, _to, _tokenId, referralAddress, _from);        \r\n    }\r\n\r\n    function buyTokenFrom(address _from, address _to, uint256 _tokenId) public payable {\r\n        buyTokenFromWithReferral(_from, _to, _tokenId, address(0));        \r\n    }   \r\n\r\n    function writePriceRecordForAssetSold(address _from, address _to, uint256 _tokenId, uint256 _value) internal {\r\n       RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _to, block.timestamp);\r\n       lastPriceRecords[_tokenId] = pr;\r\n       \r\n       tokenApprovals[_tokenId] = address(0);\r\n       currentTokenPrices[_tokenId] = 0;\r\n       emit TokenBrought(_from, _to, _tokenId, _value);       \r\n    }\r\n\r\n    function recordAuctionPriceRecord(address _from, address _to, uint256 _tokenId, uint256 _value)\r\n       external {\r\n\r\n       require(findAuctionContractIndex(msg.sender) >= 0); //make sure the sender is from one of the auction addresses\r\n       writePriceRecordForAssetSold(_from, _to, _tokenId, _value);\r\n\r\n    }\r\n\r\n    function setTokenPrice(uint256 _tokenId, uint256 _newPrice) public  {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        currentTokenPrices[_tokenId] = _newPrice;\r\n        emit TokenPriceSet(_tokenId, _newPrice);\r\n    }\r\n\r\n    function getTokenPrice(uint256 _tokenId)  public view returns(uint256) {\r\n        return currentTokenPrices[_tokenId];\r\n    }\r\n\r\n    function random(uint num) private view returns (uint[] memory) {\r\n        \r\n        uint base = uint(keccak256(abi.encodePacked(block.difficulty, now, tokenOwner[allTokens[allTokens.length-1]])));\r\n        uint[] memory randomNumbers = new uint[](num);\r\n        \r\n        for (uint i = 0; i<num; i++) {\r\n            randomNumbers[i] = base;\r\n            base = base * 2 ** 3;\r\n        }\r\n        return  randomNumbers;\r\n        \r\n    }\r\n\r\n\r\n    function getAsset(uint256 _tokenId)  external\r\n        view\r\n        returns\r\n    (\r\n        string memory title,            \r\n        address owner,     \r\n        address creator,      \r\n        uint256 currentTokenPrice,\r\n        uint256 lastPrice,\r\n        uint256 initialPrice,\r\n        uint256 lastDate,\r\n        uint256 createdDate\r\n    ) {\r\n        require(exists(_tokenId));\r\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\r\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\r\n\r\n        return (\r\n             \r\n            tokenTitles[_tokenId],        \r\n            tokenOwner[_tokenId],   \r\n            initialPriceRecord.owner,           \r\n            currentTokenPrices[_tokenId],      \r\n            lastPriceRecord.price,           \r\n            initialPriceRecord.price,\r\n            lastPriceRecord.timestamp,\r\n            initialPriceRecord.timestamp\r\n        );\r\n    }\r\n\r\n    function getAssetUpdatedInfo(uint256 _tokenId) external\r\n        view\r\n        returns\r\n    (         \r\n        address owner, \r\n        address approvedAddress,\r\n        uint256 currentTokenPrice,\r\n        uint256 lastPrice,      \r\n        uint256 lastDate\r\n      \r\n    ) {\r\n        require(exists(_tokenId));\r\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\r\n     \r\n        return (\r\n            tokenOwner[_tokenId],   \r\n            tokenApprovals[_tokenId],  \r\n            currentTokenPrices[_tokenId],      \r\n            lastPriceRecord.price,   \r\n            lastPriceRecord.timestamp           \r\n        );\r\n    }\r\n\r\n    function getAssetStaticInfo(uint256 _tokenId)  external\r\n        view\r\n        returns\r\n    (\r\n        string memory title,            \r\n        string memory tokenURI,    \r\n        address creator,            \r\n        uint256 initialPrice,       \r\n        uint256 createdDate\r\n    ) {\r\n        require(exists(_tokenId));      \r\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\r\n\r\n        return (\r\n             \r\n            tokenTitles[_tokenId],        \r\n            tokenURIs[_tokenId],\r\n            initialPriceRecord.owner,\r\n            initialPriceRecord.price,         \r\n            initialPriceRecord.timestamp\r\n        );\r\n         \r\n    }\r\n\r\n    function burnExchangeToken(address _tokenOwner, uint256 _tokenId) external  {\r\n        require(msg.sender == stemTokenContractAddress);       \r\n        _burn(_tokenOwner, _tokenId);       \r\n        emit Burn(_tokenOwner, _tokenId);\r\n    }\r\n\r\n    function findAuctionContractIndex(address _addressToFind) public view returns (int)  {\r\n        \r\n        for (int i = 0; i < int(auctionContractAddresses.length); i++){\r\n            if (auctionContractAddresses[uint256(i)] == _addressToFind){\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function addAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\r\n        require(findAuctionContractIndex(_auctionContractAddress) == -1);\r\n        auctionContractAddresses.push(_auctionContractAddress);\r\n    }\r\n\r\n    function removeAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\r\n        int index = findAuctionContractIndex(_auctionContractAddress);\r\n        require(index >= 0);        \r\n\r\n        for (uint i = uint(index); i < auctionContractAddresses.length-1; i++){\r\n            auctionContractAddresses[i] = auctionContractAddresses[i+1];         \r\n        }\r\n        auctionContractAddresses.length--;\r\n    }\r\n\r\n    function setStemTokenContractAddress(address _stemTokenContractAddress) public onlyOwner {        \r\n        stemTokenContractAddress = _stemTokenContractAddress;\r\n    }          \r\n   \r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));   \r\n        return string(abi.encodePacked(uriPrefix, uint256ToString(_tokenId)));\r\n\r\n    }\r\n    // Functions used for generating the URI\r\n    function amountOfZeros(uint256 num, uint256 base) public pure returns(uint256){\r\n        uint256 result = 0;\r\n        num /= base;\r\n        while (num > 0){\r\n            num /= base;\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n      function uint256ToString(uint256 num) public pure returns(string memory){\r\n        if (num == 0){\r\n            return \"0\";\r\n        }\r\n        uint256 numLen = amountOfZeros(num, 10) + 1;\r\n        bytes memory result = new bytes(numLen);\r\n        while(num != 0){\r\n            numLen -= 1;\r\n            result[numLen] = byte(uint8((num - (num / 10 * 10)) + 48));\r\n            num /= 10;\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    //  function initialImport(uint256[] memory _tokenIds,\r\n    //                         uint256[] memory _lastPrices, address[] memory _owners, uint256[] memory _lastDates,\r\n    //                         uint256[] memory _initialPrices, address[] memory _creators, uint256[] memory _initialDates,\r\n    //                         string[] memory _titles ) public onlyOwner {\r\n    \r\n    //     require( _tokenIds.length == _lastPrices.length &&\r\n    //             _tokenIds.length == _owners.length &&\r\n    //             _tokenIds.length == _lastDates.length &&\r\n    //             _tokenIds.length == _initialPrices.length &&\r\n    //             _tokenIds.length == _creators.length &&\r\n    //             _tokenIds.length == _initialDates.length &&\r\n    //             _tokenIds.length == _titles.length \r\n    //             );\r\n\r\n    //     for (uint i = 0; i < _tokenIds.length; i++){\r\n\r\n    //         allTokensIndex[_tokenIds[i]] = allTokens.length;\r\n    //         allTokens.push(_tokenIds[i]);\r\n\r\n    //         tokenTitles[_tokenIds[i]] = _titles[i];\r\n\r\n    //         addTokenTo(_owners[i],_tokenIds[i]);\r\n\r\n    //         RecordKeeping.priceRecord memory prInitial = RecordKeeping.priceRecord(_initialPrices[i], _creators[i], _initialDates[i]);\r\n    //         initialPriceRecords[_tokenIds[i]] = prInitial;      \r\n\r\n    //         RecordKeeping.priceRecord memory prLast = RecordKeeping.priceRecord(_lastPrices[i], _owners[i], _lastDates[i]);\r\n    //         lastPriceRecords[_tokenIds[i]] = prLast;  \r\n\r\n               \r\n\r\n    //     }\r\n    // }\r\n}\r\n\r\n\r\ncontract RetroArtTokenAuction is TokenAuction {\r\n\r\n   \r\n    // Delegate constructor\r\n    constructor (address _nftAddr, uint256 _cut) public TokenAuction(_nftAddr, _cut) {}\r\n\r\n    event ownerCutChanged(uint256 _ownerCut);\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _minPrice - minimum price of auction.  \r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _minPrice, \r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_minPrice == uint256(uint128(_minPrice)));      \r\n        require(_duration == uint256(uint64(_duration)));\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        super._createAuction(_tokenId, _minPrice, _duration, _seller);\r\n\r\n        address nonFungibleContractAddress = address(nonFungibleContract);\r\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\r\n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\r\n        if (nftContract.supportsInterface(0x94fb30be)) {\r\n          \r\n            RetroArt retroArt = RetroArt(nonFungibleContractAddress);\r\n            //state 2 is onAuction\r\n            retroArt.setTokenState(_tokenId,2);    \r\n        }\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n\r\n        delete tokenIdToAuction[_tokenId];\r\n\r\n        address nonFungibleContractAddress = address(nonFungibleContract);\r\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\r\n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\r\n        if (nftContract.supportsInterface(0x94fb30be)) {\r\n          \r\n            RetroArt retroArt = RetroArt(nonFungibleContractAddress);\r\n            //state 0 is the original state\r\n            retroArt.setTokenState(_tokenId,0);    \r\n        }\r\n    }\r\n\r\n\r\n    function concludeAuction(uint256 _tokenId) public {\r\n        //todo: should it check who has permission to call this function?\r\n     \r\n        address nonFungibleContractAddress = address(nonFungibleContract);\r\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\r\n        \r\n        Auction memory auction = tokenIdToAuction[_tokenId];\r\n        uint256 sellerProceeds = _concludeAuction(_tokenId); \r\n\r\n        if (auction.highestPrice > 0){\r\n            if (totalPendingAmount > auction.highestPrice) {\r\n                totalPendingAmount -= auction.highestPrice;\r\n            }else{\r\n                totalPendingAmount = 0;\r\n            }      \r\n        }\r\n     \r\n        _removeAuction(_tokenId);      \r\n        \r\n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\r\n\r\n        if (sellerProceeds > 0) {\r\n            _transfer(auction.highestBidder, _tokenId);\r\n            _deposit(auction.seller, sellerProceeds, 3);\r\n\r\n            if (nftContract.supportsInterface(0x94fb30be)) {           \r\n                RetroArt retroArt = RetroArt(nonFungibleContractAddress);             \r\n                retroArt.recordAuctionPriceRecord(auction.seller, auction.highestBidder, _tokenId, sellerProceeds);\r\n            }\r\n        }  \r\n        \r\n        if (sellerProceeds == 0){\r\n            _transfer(auction.seller, _tokenId);\r\n            if ( auction.highestPrice > 0 && auction.highestBidder != address(0))  _deposit(auction.highestBidder, auction.highestPrice, 4);\r\n        }\r\n        \r\n       // auction.startedAt = 0;\r\n  \r\n        \r\n    }\r\n\r\n       /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 minPrice,     \r\n        uint256 duration,\r\n        uint256 startedAt,\r\n        uint256 highestPrice,\r\n        address highestBidder\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];     \r\n        return (\r\n            auction.seller,\r\n            auction.minPrice,\r\n            auction.duration,         \r\n            auction.startedAt,\r\n            auction.highestPrice,\r\n            auction.highestBidder\r\n        );\r\n    }\r\n\r\n    function setOwnerCut(uint256 _cut) public onlyOwner {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        emit ownerCutChanged(ownerCut);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"}],\"name\":\"withdrawContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"}],\"name\":\"withdrawOwnFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"},{\"name\":\"highestPrice\",\"type\":\"uint256\"},{\"name\":\"highestBidder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"concludeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAvailableContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"}],\"name\":\"withdrawContractFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddr\",\"type\":\"address\"},{\"name\":\"_cut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"name\":\"ownerCutChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_change\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_changeType\",\"type\":\"uint8\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RetroArtTokenAuction","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f155559e016ce2ece37b22d1bfeb62a24bc7690f00000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://c73334f6299aebdc01889161e3ded7467aaefd8be36c2052a9631de345804994"}]}