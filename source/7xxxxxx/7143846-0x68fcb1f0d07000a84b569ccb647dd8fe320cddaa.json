{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract CoinMarketCapApi {\r\n    function requestPrice(string _ticker) public payable;\r\n    function _cost() public returns (uint _price);\r\n}\r\n\r\ncontract ERC20 {\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract DateTime {\r\n    using SafeMath for uint;\r\n    \r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n    \r\n    function _timestampToDate(uint256 _timestamp) internal pure returns (uint year, uint month, uint day) {\r\n        uint _days = _timestamp / SECONDS_PER_DAY;\r\n        int __days = int(_days);\r\n        \r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n        \r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n    \r\n    function isLeapYear(uint year) internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getDaysInMonth(uint month, uint year, uint _addMonths) internal pure returns (uint) {\r\n        if(_addMonths > 0){\r\n            (month, year) = addMonth(month, year, _addMonths);\r\n        }\r\n        \r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            return 31;\r\n        }\r\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n            return 30;\r\n        }\r\n        else if (isLeapYear(year)) {\r\n            return 29;\r\n        }\r\n        else {\r\n            return 28;\r\n        }\r\n    }\r\n    \r\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        uint fromYear;\r\n        uint fromMonth;\r\n        uint fromDay;\r\n        uint toYear;\r\n        uint toMonth;\r\n        uint toDay;\r\n        (fromYear, fromMonth, fromDay) = _timestampToDate(fromTimestamp);\r\n        (toYear, toMonth, toDay) = _timestampToDate(toTimestamp);\r\n        \r\n        _months = (((toYear.mul(12)).add(toMonth)).sub(fromYear.mul(12))).sub(fromMonth);\r\n    }\r\n    \r\n    function addMonth(uint _month, uint _year, uint _add) internal pure returns (uint _nwMonth, uint _nwYear) {\r\n        require(_add < 12);\r\n        \r\n        if(_month + _add > 12){\r\n            _nwYear = _year + 1;\r\n            _nwMonth = 1;\r\n        } else {\r\n            _nwMonth = _month + _add;\r\n            _nwYear = _year;\r\n        }\r\n    }\r\n}\r\n\r\ncontract initLib is DateTime {\r\n    using SafeMath for uint;\r\n    \r\n    string  public symbol = \"OWT\";\r\n    uint256 public decimals = 18;\r\n    address public tokenAddress;\r\n    uint256 public tokenPrice = 150000;\r\n    \r\n    uint256 public domainCost = 500; \r\n    uint256 public publishCost = 200; \r\n    uint256 public hostRegistryCost = 1000; \r\n    uint256 public userSurfingCost = 10; \r\n    uint256 public registryDuration = 365 * 1 days;\r\n    uint256 public stakeLockTime = 31 * 1 days;\r\n    \r\n    uint public websiteSizeLimit = 512;\r\n    uint public websiteFilesLimit = 20;\r\n    \r\n    address public ow_owner;\r\n    address public cmcAddress;\r\n    uint public lastPriceUpdate;\r\n    \r\n    mapping ( address => uint256 ) public balanceOf;\r\n    mapping ( address => uint256 ) public stakeBalance;\r\n    mapping ( uint => mapping ( uint => uint256 )) public poolBalance;\r\n    mapping ( uint => mapping ( uint => uint256 )) public poolBalanceClaimed;\r\n    mapping ( uint => mapping ( uint => uint256 )) public totalStakes;\r\n    \r\n    uint256 public totalSubscriber;\r\n    uint256 public totalHosts;\r\n    uint256 public totalDomains;\r\n    \r\n    mapping ( address => UserMeta ) public users;\r\n    mapping ( bytes32 => DomainMeta ) public domains;\r\n    mapping ( bytes32 => DomainSaleMeta ) public domain_sale;\r\n    mapping ( address => HostMeta ) public hosts;\r\n    mapping ( uint => address ) public hostAddress;\r\n    mapping ( uint => bytes32 ) public hostConnection;\r\n    mapping ( bytes32 => bool ) public hostConnectionDB;\r\n    \r\n    mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public hostStakes;\r\n    mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public stakeTmpBalance;\r\n    mapping ( address => uint256 ) public stakesLockups;\r\n    \r\n    mapping ( uint => uint ) public hostUpdates;\r\n    uint public hostUpdatesCounter;\r\n    \r\n    mapping ( uint => string ) public websiteUpdates;\r\n    uint public websiteUpdatesCounter;\r\n    \r\n    struct DomainMeta {\r\n        string name;\r\n        uint admin_index;\r\n        uint total_admins;\r\n        mapping(uint => mapping(address => bool)) admins;\r\n        string git;\r\n        bytes32 domain_bytes;\r\n        bytes32 hash;\r\n        uint total_files;\r\n        uint version;\r\n        mapping(uint => mapping(bytes32 => bytes32)) files_hash;\r\n        uint ttl;\r\n        uint time;\r\n        uint expity_time;\r\n    }\r\n    \r\n    struct DomainSaleMeta {\r\n        address owner;\r\n        address to;\r\n        uint amount;\r\n        uint time;\r\n        uint expity_time;\r\n    }\r\n    \r\n    struct HostMeta {\r\n        uint id;\r\n        address hostAddress;\r\n        bytes32 connection;\r\n        bool active;\r\n        uint start_time;\r\n        uint time;\r\n    }\r\n    \r\n    struct UserMeta {\r\n        bool active;\r\n        uint start_time;\r\n        uint expiry_time;\r\n        uint time;\r\n    }\r\n    \r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    function setOwOwner(address _address) public {\r\n        require(msg.sender == ow_owner);\r\n        ow_owner = _address;\r\n    }\r\n    \r\n    function _currentPrice(uint256 _price) public view returns (uint256 _getprice) {\r\n        _getprice = (_price * 10**uint(24)) / tokenPrice;\r\n    }\r\n    \r\n    function __response(uint _price) public {\r\n        require(msg.sender == cmcAddress);\r\n        tokenPrice = _price;\r\n    }\r\n    \r\n    function fetchTokenPrice() public payable {\r\n        require(\r\n            lastPriceUpdate + 1 * 1 days <  now\r\n        );\r\n        \r\n        lastPriceUpdate = now;\r\n        uint _getprice = CoinMarketCapApi(cmcAddress)._cost();\r\n        CoinMarketCapApi(cmcAddress).requestPrice.value(_getprice)(symbol);\r\n    }\r\n    \r\n    function _priceFetchingCost() public view returns (uint _getprice) {\r\n        _getprice = CoinMarketCapApi(cmcAddress)._cost();\r\n    }\r\n    \r\n    function debitToken(uint256 _amount) internal {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        balanceOf[ow_owner] = balanceOf[ow_owner].add(_amount);\r\n    }\r\n    \r\n    function creditUserPool(uint _duration, uint256 _price) internal {\r\n        uint _monthDays; uint _remainingDays; \r\n        uint _year; uint _month; uint _day; \r\n        (_year, _month, _day) = _timestampToDate(now);\r\n        \r\n        _day--;\r\n        uint monthDiff = diffMonths(now, now + ( _duration * 1 days )) + 1;\r\n        \r\n        for(uint i = 0; i < monthDiff; i++) {\r\n            _monthDays = getDaysInMonth(_month, _year, 0); \r\n            \r\n            if(_day.add(_duration) > _monthDays){ \r\n                _remainingDays = _monthDays.sub(_day);\r\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_remainingDays * _price * 10) / 100);\r\n                poolBalance[_year][_month] = poolBalance[_year][_month].add((_remainingDays * _price * 90) / 100);\r\n                \r\n                (_month, _year) = addMonth(_month, _year, 1);\r\n                \r\n                _duration = _duration.sub(_remainingDays);\r\n                _day = 0;\r\n                \r\n            } else {\r\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_duration * _price * 10) / 100);\r\n                poolBalance[_year][_month] = poolBalance[_year][_month].add((_duration * _price * 90) / 100);\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n\r\ncontract owContract is initLib {\r\n    \r\n    function owContract(address _token, address _cmc) public {\r\n        tokenAddress = _token;\r\n        ow_owner = msg.sender;\r\n        cmcAddress = _cmc;\r\n    }\r\n    \r\n    function _validateDomain(string _domain) internal pure returns (bool){\r\n        bytes memory b = bytes(_domain);\r\n        if(b.length > 32) return false;\r\n        \r\n        uint counter = 0;\r\n        for(uint i; i<b.length; i++){\r\n            bytes1 char = b[i];\r\n            \r\n            if(\r\n                !(char >= 0x30 && char <= 0x39)   //9-0\r\n                && !(char >= 0x61 && char <= 0x7A)  //a-z\r\n                && !(char == 0x2D) // - \r\n                && !(char == 0x2E && counter == 0) // . \r\n            ){\r\n                    return false;\r\n            }\r\n            \r\n            if(char == 0x2E) counter++; \r\n        }\r\n    \r\n        return true;\r\n    }\r\n    \r\n    function registerDomain(string _domain, uint _ttl) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        uint256 _cPrice = _currentPrice(domainCost);\r\n        \r\n        require(\r\n            d.expity_time < now \r\n            && _ttl >= 1 hours \r\n            && balanceOf[msg.sender] >= _cPrice \r\n            && _validateDomain(_domain)\r\n        );\r\n        \r\n        debitToken(_cPrice);\r\n        uint _adminIndex = d.admin_index + 1;\r\n        \r\n        if(d.expity_time == 0){\r\n            totalDomains++;\r\n        }\r\n        \r\n        d.name = _domain;\r\n        d.domain_bytes = _domainBytes;\r\n        d.admin_index = _adminIndex;\r\n        d.total_admins = 1;\r\n        d.admins[_adminIndex][msg.sender] = true;\r\n        d.ttl = _ttl;\r\n        d.expity_time = now + registryDuration;\r\n        d.time = now;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function updateDomainTTL(string _domain, uint _ttl) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        require(\r\n            d.admins[d.admin_index][msg.sender] \r\n            && _ttl >= 1 hours \r\n            && d.expity_time > now\r\n        );\r\n        \r\n        d.ttl = _ttl;\r\n        _status = true;\r\n    }\r\n    \r\n    function renewDomain(string _domain) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        uint256 _cPrice = _currentPrice(domainCost);\r\n        \r\n        require(\r\n            d.expity_time > now \r\n            && balanceOf[msg.sender] >= _cPrice\r\n        );\r\n        \r\n        debitToken(_cPrice);\r\n        d.expity_time = d.expity_time.add(registryDuration);\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function addDomainAdmin(string _domain, address _admin) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        require(\r\n            d.admins[d.admin_index][msg.sender] \r\n            && !d.admins[d.admin_index][_admin]\r\n            && d.expity_time > now\r\n        );\r\n        \r\n        d.total_admins = d.total_admins.add(1);\r\n        d.admins[d.admin_index][_admin] = true;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function removeDomainAdmin(string _domain, address _admin) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        require(\r\n            d.admins[d.admin_index][msg.sender] \r\n            && d.admins[d.admin_index][_admin] \r\n            && d.expity_time > now\r\n        );\r\n        \r\n        d.total_admins = d.total_admins.sub(1);\r\n        d.admins[d.admin_index][_admin] = false;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function sellDomain(\r\n        string _domain, \r\n        address _owner, \r\n        address _to, \r\n        uint256 _amount, \r\n        uint _expiry\r\n    ) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        uint _sExpiry = now + ( _expiry * 1 days );\r\n        \r\n        DomainMeta storage d = domains[_domainBytes];\r\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\r\n        \r\n        require(\r\n            _amount > 0\r\n            && d.admins[d.admin_index][msg.sender] \r\n            && d.expity_time > _sExpiry \r\n            && ds.expity_time < now\r\n        );\r\n        \r\n        ds.owner = _owner;\r\n        ds.to = _to;\r\n        ds.amount = _amount;\r\n        ds.time = now;\r\n        ds.expity_time = _sExpiry;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function cancelSellDomain(string _domain) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\r\n        \r\n        require(\r\n            d.admins[d.admin_index][msg.sender] \r\n            && d.expity_time > now \r\n            && ds.expity_time > now\r\n        );\r\n        \r\n        ds.owner = address(0x0);\r\n        ds.to = address(0x0);\r\n        ds.amount = 0;\r\n        ds.time = 0;\r\n        ds.expity_time = 0;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function buyDomain(string _domain) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\r\n        \r\n        if(ds.to != address(0x0)){\r\n            require( ds.to == msg.sender );\r\n        }\r\n        \r\n        require(\r\n            balanceOf[msg.sender] >= ds.amount \r\n            && d.expity_time > now \r\n            && ds.expity_time > now\r\n        );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(ds.amount);\r\n        balanceOf[ds.owner] = balanceOf[ds.owner].add(ds.amount);\r\n        \r\n        uint _adminIndex = d.admin_index + 1;\r\n        \r\n        d.total_admins = 1;\r\n        d.admin_index = _adminIndex;\r\n        d.admins[_adminIndex][msg.sender] = true;\r\n        ds.expity_time = 0;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function publishWebsite(\r\n        string _domain, \r\n        string _git, \r\n        bytes32 _filesHash,\r\n        bytes32[] _file_name, \r\n        bytes32[] _file_hash\r\n    ) public returns (bool _status) {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        uint256 _cPrice = _currentPrice(publishCost);\r\n        \r\n        require(\r\n            d.admins[d.admin_index][msg.sender] \r\n            && balanceOf[msg.sender] >= _cPrice \r\n            && _file_name.length <= websiteFilesLimit \r\n            && _file_name.length == _file_hash.length\r\n            && d.expity_time > now\r\n        );\r\n        \r\n        debitToken(_cPrice);\r\n        d.version++;\r\n        \r\n        for(uint i = 0; i < _file_name.length; i++) {\r\n            d.files_hash[d.version][_file_name[i]] = _file_hash[i];\r\n        }\r\n        \r\n        d.git = _git;\r\n        d.total_files = _file_name.length;\r\n        d.hash = _filesHash;\r\n        \r\n        websiteUpdates[websiteUpdatesCounter] = _domain;\r\n        websiteUpdatesCounter++;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function getDomainMeta(string _domain) public view \r\n        returns (\r\n            string _name,  \r\n            string _git, \r\n            bytes32 _domain_bytes, \r\n            bytes32 _hash, \r\n            uint _total_admins,\r\n            uint _adminIndex, \r\n            uint _total_files, \r\n            uint _version, \r\n            uint _ttl, \r\n            uint _time, \r\n            uint _expity_time\r\n        )\r\n    {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        \r\n        _name = d.name;\r\n        _git = d.git;\r\n        _domain_bytes = d.domain_bytes;\r\n        _hash = d.hash;\r\n        _total_admins = d.total_admins;\r\n        _adminIndex = d.admin_index;\r\n        _total_files = d.total_files;\r\n        _version = d.version;\r\n        _ttl = d.ttl;\r\n        _time = d.time;\r\n        _expity_time = d.expity_time;\r\n    }\r\n    \r\n    function getDomainFileHash(string _domain, bytes32 _file_name) public view \r\n        returns ( \r\n            bytes32 _hash\r\n        )\r\n    {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        \r\n        _hash = d.files_hash[d.version][_file_name];\r\n    }\r\n    \r\n    function verifyDomainFileHash(string _domain, bytes32 _file_name, bytes32 _file_hash) public view \r\n        returns ( \r\n            bool _status\r\n        )\r\n    {\r\n        bytes32 _domainBytes = stringToBytes32(_domain);\r\n        DomainMeta storage d = domains[_domainBytes];\r\n        \r\n        _status = ( d.files_hash[d.version][_file_name] == _file_hash );\r\n    }\r\n    \r\n    function registerHost(string _connection) public returns (bool _status) {\r\n        bytes32 hostConn = stringToBytes32(_connection);\r\n        HostMeta storage h = hosts[msg.sender];\r\n        uint256 _cPrice = _currentPrice(hostRegistryCost);\r\n        \r\n        require(\r\n            !h.active \r\n            && balanceOf[msg.sender] >= _cPrice \r\n            && !hostConnectionDB[hostConn]\r\n        );\r\n        \r\n        debitToken(_cPrice);\r\n        \r\n        h.id = totalHosts;\r\n        h.connection = hostConn;\r\n        h.active = true;\r\n        h.time = now;\r\n        \r\n        hostAddress[totalHosts] = msg.sender;\r\n        hostConnection[totalHosts] = h.connection;\r\n        hostConnectionDB[hostConn] = true;\r\n        totalHosts++;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function updateHost(string _connection) public returns (bool _status) {\r\n        bytes32 hostConn = stringToBytes32(_connection);\r\n        HostMeta storage h = hosts[msg.sender];\r\n        \r\n        require(\r\n            h.active \r\n            && h.connection != hostConn \r\n            && !hostConnectionDB[hostConn]\r\n        );\r\n        \r\n        hostConnectionDB[h.connection] = false;\r\n        h.connection = hostConn;\r\n        \r\n        hostConnectionDB[hostConn] = true;\r\n        hostUpdates[hostUpdatesCounter] = h.id;\r\n        hostConnection[h.id] = hostConn;\r\n        hostUpdatesCounter++;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function userSubscribe(uint _duration) public {\r\n        uint256 _cPrice = _currentPrice(userSurfingCost);\r\n        uint256 _cost = _duration * _cPrice;\r\n        \r\n        require(\r\n            _duration < 400 \r\n            && _duration > 0\r\n            && balanceOf[msg.sender] >= _cost\r\n        );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_cost);\r\n        creditUserPool(_duration, _cPrice);\r\n        \r\n        UserMeta storage u = users[msg.sender];\r\n        if(!u.active){\r\n            u.active = true;\r\n            u.time = now;\r\n            \r\n            totalSubscriber++;\r\n        }\r\n        \r\n        if(u.expiry_time < now){\r\n            u.start_time = now;\r\n            u.expiry_time = now + (_duration * 1 days);\r\n        } else {\r\n            u.expiry_time = u.expiry_time.add(_duration * 1 days);\r\n        }\r\n    }\r\n    \r\n    function stakeTokens(address _hostAddress, uint256 _amount) public {\r\n        require( balanceOf[msg.sender] >= _amount );\r\n        \r\n        uint _year; uint _month; uint _day; \r\n        (_year, _month, _day) = _timestampToDate(now);\r\n        \r\n        HostMeta storage h = hosts[_hostAddress];\r\n        require( h.active );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        stakeBalance[msg.sender] = stakeBalance[msg.sender].add(_amount);\r\n        stakeTmpBalance[_year][_month][msg.sender] = stakeTmpBalance[_year][_month][msg.sender].add(_amount);\r\n        \r\n        stakesLockups[msg.sender] = now + stakeLockTime;\r\n        \r\n        hostStakes[_year][_month][_hostAddress] = hostStakes[_year][_month][_hostAddress].add(_amount);\r\n        totalStakes[_year][_month] = totalStakes[_year][_month].add(_amount);\r\n    }\r\n    \r\n    function validateMonth(uint _year, uint _month) internal view {\r\n        uint __year; uint __month; uint __day; \r\n        (__year, __month, __day) = _timestampToDate(now);\r\n        if(__month == 1){ __year--; __month = 12; } else { __month--; }\r\n        \r\n        require( (((__year.mul(12)).add(__month)).sub(_year.mul(12))).sub(_month) >= 0 );\r\n    }\r\n    \r\n    function claimHostTokens(uint _year, uint _month) public {\r\n        validateMonth(_year, _month);\r\n        \r\n        HostMeta storage h = hosts[msg.sender];\r\n        require( h.active );\r\n        \r\n        if(totalStakes[_year][_month] > 0){\r\n            uint256 _tmpHostStake = hostStakes[_year][_month][msg.sender];\r\n            \r\n            if(_tmpHostStake > 0){\r\n                uint256 _totalStakes = totalStakes[_year][_month];\r\n                uint256 _poolAmount = poolBalance[_year][_month];\r\n                \r\n                hostStakes[_year][_month][msg.sender] = 0;\r\n                uint256 _amount = ((_tmpHostStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\r\n                if(_amount > 0){\r\n                    balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\r\n                    poolBalanceClaimed[_year][_month] = poolBalanceClaimed[_year][_month].add(_amount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function claimStakeTokens(uint _year, uint _month) public {\r\n        validateMonth(_year, _month);\r\n        require(stakesLockups[msg.sender] < now);\r\n        \r\n        if(totalStakes[_year][_month] > 0){\r\n            uint256 _tmpStake = stakeTmpBalance[_year][_month][msg.sender];\r\n            \r\n            if(_tmpStake > 0){\r\n                uint256 _totalStakesBal = stakeBalance[msg.sender];\r\n                \r\n                uint256 _totalStakes = totalStakes[_year][_month];\r\n                uint256 _poolAmount = poolBalance[_year][_month];\r\n                \r\n                uint256 _amount = ((_tmpStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\r\n                \r\n                stakeTmpBalance[_year][_month][msg.sender] = 0;\r\n                stakeBalance[msg.sender] = 0;\r\n                uint256 _totamount = _amount.add(_totalStakesBal);\r\n                \r\n                if(_totamount > 0){\r\n                    balanceOf[msg.sender] = balanceOf[msg.sender].add(_totamount);\r\n                    poolBalanceClaimed[_year][_month] = poolBalanceClaimed[_year][_month].add(_amount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getHostTokens(address _address, uint _year, uint _month) public view returns (uint256 _amount) {\r\n        validateMonth(_year, _month);\r\n        \r\n        HostMeta storage h = hosts[_address];\r\n        require( h.active );\r\n        \r\n        _amount = 0;\r\n        if(h.active && totalStakes[_year][_month] > 0){\r\n            uint256 _tmpHostStake = hostStakes[_year][_month][_address];\r\n            \r\n            if(_tmpHostStake > 0){\r\n                uint256 _totalStakes = totalStakes[_year][_month];\r\n                uint256 _poolAmount = poolBalance[_year][_month];\r\n                \r\n                _amount = ((_tmpHostStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getStakeTokens(address _address, uint _year, uint _month) public view returns (uint256 _amount) {\r\n        validateMonth(_year, _month);\r\n        require(stakesLockups[_address] < now);\r\n        \r\n        _amount = 0;\r\n        if(stakesLockups[_address] < now && totalStakes[_year][_month] > 0){\r\n            uint256 _tmpStake = stakeTmpBalance[_year][_month][_address];\r\n            \r\n            if(_tmpStake > 0){\r\n                uint256 _totalStakesBal = stakeBalance[_address];\r\n                \r\n                uint256 _totalStakes = totalStakes[_year][_month];\r\n                uint256 _poolAmount = poolBalance[_year][_month];\r\n                \r\n                _amount = ((_tmpStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\r\n                _amount = _amount.add(_totalStakesBal);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function burnPoolTokens(uint _year, uint _month) public {\r\n        validateMonth(_year, _month);\r\n        \r\n        if(totalStakes[_year][_month] == 0){\r\n            uint256 _poolAmount = poolBalance[_year][_month];\r\n            \r\n            if(_poolAmount > 0){\r\n                poolBalance[_year][_month] = 0;\r\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add(_poolAmount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function poolDonate(uint _year, uint _month, uint256 _amount) public {\r\n        require(\r\n            _amount > 0\r\n            && balanceOf[msg.sender] >= _amount\r\n        );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        \r\n        balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_amount * 10) / 100);\r\n        poolBalance[_year][_month] = poolBalance[_year][_month].add((_amount * 90) / 100);\r\n    }\r\n    \r\n    function internalTransfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(\r\n            _value > 0\r\n            && balanceOf[msg.sender] >= _value\r\n        );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(\r\n            _value > 0\r\n            && balanceOf[msg.sender] >= _value\r\n        );\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        ERC20(tokenAddress).transfer(_to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn() public {\r\n        uint256 _amount = balanceOf[address(0x0)];\r\n        require( _amount > 0 );\r\n        \r\n        balanceOf[address(0x0)] = 0;\r\n        ERC20(tokenAddress).transfer(address(0x0), _amount);\r\n    }\r\n    \r\n    function notifyBalance(address sender, uint tokens) public {\r\n        require(\r\n            msg.sender == tokenAddress\r\n        );\r\n        \r\n        balanceOf[sender] = balanceOf[sender].add(tokens);\r\n    }\r\n    \r\n    function () public payable {} \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_git\",\"type\":\"string\"},{\"name\":\"_filesHash\",\"type\":\"bytes32\"},{\"name\":\"_file_name\",\"type\":\"bytes32[]\"},{\"name\":\"_file_hash\",\"type\":\"bytes32[]\"}],\"name\":\"publishWebsite\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"websiteSizeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_priceFetchingCost\",\"outputs\":[{\"name\":\"_getprice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"__response\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hostConnectionDB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"claimHostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_file_name\",\"type\":\"bytes32\"},{\"name\":\"_file_hash\",\"type\":\"bytes32\"}],\"name\":\"verifyDomainFileHash\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ow_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"buyDomain\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBalanceClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"websiteUpdatesCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addDomainAdmin\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"internalTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"getDomainMeta\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_git\",\"type\":\"string\"},{\"name\":\"_domain_bytes\",\"type\":\"bytes32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_total_admins\",\"type\":\"uint256\"},{\"name\":\"_adminIndex\",\"type\":\"uint256\"},{\"name\":\"_total_files\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_ttl\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_expity_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"notifyBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userSurfingCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_connection\",\"type\":\"string\"}],\"name\":\"registerHost\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesLockups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_ttl\",\"type\":\"uint256\"}],\"name\":\"updateDomainTTL\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domain_sale\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"expity_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"poolDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getHostTokens\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hostUpdatesCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPriceUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hostConnection\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTmpBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hostAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"sellDomain\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_connection\",\"type\":\"string\"}],\"name\":\"updateHost\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_file_name\",\"type\":\"bytes32\"}],\"name\":\"getDomainFileHash\",\"outputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_ttl\",\"type\":\"uint256\"}],\"name\":\"registerDomain\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hostStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publishCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"claimStakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"start_time\",\"type\":\"uint256\"},{\"name\":\"expiry_time\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"websiteUpdates\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hostUpdates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hosts\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"hostAddress\",\"type\":\"address\"},{\"name\":\"connection\",\"type\":\"bytes32\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"start_time\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchTokenPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSubscriber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"admin_index\",\"type\":\"uint256\"},{\"name\":\"total_admins\",\"type\":\"uint256\"},{\"name\":\"git\",\"type\":\"string\"},{\"name\":\"domain_bytes\",\"type\":\"bytes32\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"total_files\",\"type\":\"uint256\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"ttl\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"expity_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"burnPoolTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDomains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cmcAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registryDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeDomainAdmin\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"cancelSellDomain\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domainCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"userSubscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_year\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getStakeTokens\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hostRegistryCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"websiteFilesLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"renewDomain\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"_currentPrice\",\"outputs\":[{\"name\":\"_getprice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_cmc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"owContract","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c2494604e9dcefa2a70dcebf81e6d7be064a334e000000000000000000000000390e7c6b479fa7543e8dfd1a5d65d3d9ada76c6e","Library":"","SwarmSource":"bzzr://f9de7dd599e49e3d5d529a91adb0c209de1e1fb57f10412214dd1b5aa7798015"}]}