{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n}\r\n\r\ninterface TubInterface {\r\n    function give(bytes32, address) external;\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n}\r\n\r\ninterface BridgeInterface {\r\n    function makerToCompound(uint, uint, uint) external returns (uint);\r\n    function compoundToMaker(uint, uint, uint) external;\r\n    function refillFunds(uint) external;\r\n}\r\n\r\n\r\ncontract Helper {\r\n\r\n    /**\r\n     * @dev get MakerDAO CDP engine\r\n     */\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    }\r\n\r\n    /**\r\n     * @dev get DAI Token Addrewss\r\n     */\r\n    function getDAIAddress() public pure returns (address dai) {\r\n        dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound CETH Address\r\n     */\r\n    function getCETHAddress() public pure returns (address cEth) {\r\n        cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound CDAI Address\r\n     */\r\n    function getCDAIAddress() public pure returns (address cDai) {\r\n        cDai = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    }\r\n\r\n    /**\r\n     * @dev get MakerDAO<>Compound Bridge Contract\r\n     */\r\n    function getBridgeAddress() public pure returns (address bridge) {\r\n        bridge = 0xb69C5ef7fFd3F57bAab250969D1698fDD9CFB830; // CHANGE <BRIDGE ADDRESS>\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, 2**255);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev transfer CDP ownership\r\n     */\r\n    function give(uint cdpNum, address nextOwner) internal {\r\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev enter compound market\r\n     */\r\n    function enterMarket(address cErc20) internal {\r\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\r\n        address[] memory markets = troller.getAssetsIn(address(this));\r\n        bool isEntered = false;\r\n        for (uint i = 0; i < markets.length; i++) {\r\n            if (markets[i] == cErc20) {\r\n                isEntered = true;\r\n            }\r\n        }\r\n        if (!isEntered) {\r\n            address[] memory toEnter = new address[](1);\r\n            toEnter[0] = cErc20;\r\n            troller.enterMarkets(toEnter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev borrow DAI from compound\r\n     */\r\n    function borrowDAI(uint tokenAmt) internal {\r\n        enterMarket(getCETHAddress());\r\n        enterMarket(getCDAIAddress());\r\n        require(CTokenInterface(getCDAIAddress()).borrow(tokenAmt) == 0, \"got collateral?\");\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Bridge is Helper {\r\n\r\n    /**\r\n     * @dev MakerDAO to Compound\r\n     */\r\n    function makerToCompound(uint cdpId, uint ethCol, uint daiDebt) public {\r\n        give(cdpId, getBridgeAddress());\r\n        BridgeInterface bridge = BridgeInterface(getBridgeAddress());\r\n        uint daiAmt = bridge.makerToCompound(cdpId, ethCol, daiDebt);\r\n        if (daiDebt > 0) {\r\n            borrowDAI(daiAmt);\r\n            setApproval(getDAIAddress(), daiAmt, getBridgeAddress());\r\n            bridge.refillFunds(daiAmt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Compound to MakerDAO\r\n     */\r\n    function compoundToMaker(uint cdpId, uint ethCol, uint daiDebt) public {\r\n        if (cdpId != 0) {\r\n            give(cdpId, getBridgeAddress());\r\n        }\r\n        if (ethCol > 0) {\r\n            setApproval(getCETHAddress(), 2**150, getBridgeAddress());\r\n        }\r\n        BridgeInterface(getBridgeAddress()).compoundToMaker(cdpId, ethCol, daiDebt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaBridge is Bridge {\r\n\r\n    uint public version;\r\n\r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        version = _version;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpId\",\"type\":\"uint256\"},{\"name\":\"ethCol\",\"type\":\"uint256\"},{\"name\":\"daiDebt\",\"type\":\"uint256\"}],\"name\":\"makerToCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpId\",\"type\":\"uint256\"},{\"name\":\"ethCol\",\"type\":\"uint256\"},{\"name\":\"daiDebt\",\"type\":\"uint256\"}],\"name\":\"compoundToMaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCETHAddress\",\"outputs\":[{\"name\":\"cEth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDAIAddress\",\"outputs\":[{\"name\":\"dai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCDAIAddress\",\"outputs\":[{\"name\":\"cDai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeAddress\",\"outputs\":[{\"name\":\"bridge\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"InstaBridge","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://528fb94e7210c0ee5967a2575fd55a16cd78ae29847bea7d4ebf1c265b5cb1c5"}]}