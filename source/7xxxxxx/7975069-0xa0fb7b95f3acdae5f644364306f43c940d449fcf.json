{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract FiftyContract {\r\n\tmapping (address => mapping (uint => mapping (uint => mapping (uint => treeNode)))) public treeChildren;\r\n\tmapping (address => mapping (uint => mapping (uint => treeNode))) public treeParent;\r\n\tmapping (address => mapping (uint => bool)) public currentNodes;\r\n\tmapping (address => mapping (uint => uint)) public nodeIDIndex;\r\n\tmapping (address => uint) public membership;\r\n\tmapping(address => mapping(uint => uint)) public memberOrders;\r\n\tmapping (address => uint) public nodeReceivedETH;\r\n\tstruct treeNode {\r\n\t\t address payable ethAddress; \r\n\t\t uint nodeType; \r\n\t\t uint nodeID;\r\n\t}\r\n\tuint public spread;\r\n}\r\ncontract Adminstrator {\r\n  address public admin;\r\n  address payable public owner;\r\n\r\n  modifier onlyAdmin() { \r\n        require(msg.sender == admin || msg.sender == owner,\"Not authorized\"); \r\n        _;\r\n  } \r\n\r\n  constructor() public {\r\n    admin = msg.sender;\r\n\towner = msg.sender;\r\n  }\r\n\r\n  function transferAdmin(address newAdmin) public onlyAdmin {\r\n    admin = newAdmin; \r\n  }\r\n}\r\ncontract readFiftyContract is Adminstrator{\r\n\t\r\n\taddress public baseAddr = 0xE546489b8C03675E31CF7Ffe743c1F8e110E9C75;\r\n\tFiftyContract bcontract = FiftyContract(baseAddr);\r\n\t\r\n\tfunction setContract(address newAddr) public onlyAdmin {\r\n\t\tbaseAddr = newAddr;\r\n\t\tbcontract = FiftyContract(baseAddr);\r\n\t}\r\n\r\n\tfunction getStatus(address r) public view returns(uint, uint,\r\n\tuint, uint, uint, uint, uint, uint, uint){\r\n\t    uint[9] memory result;\r\n\t    result[0] = bcontract.membership(r);\r\n\t    result[1] = bcontract.nodeReceivedETH(r);\r\n\t    if(bcontract.currentNodes(r,1 ether)) result[2] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,1 ether) > (2 ** 32) -2) result[2] = 2;\r\n\t    if(bcontract.currentNodes(r,2 ether)) result[3] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,2 ether) > (2 ** 32) -2) result[3] = 2;\r\n\t    if(bcontract.currentNodes(r,3 ether)) result[4] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,3 ether) > (2 ** 32) -2) result[4] = 2;\r\n\t    if(bcontract.currentNodes(r,5 ether)) result[5] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,5 ether) > (2 ** 32) -2) result[5] = 2;\r\n\t    if(bcontract.currentNodes(r,10 ether)) result[6] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,10 ether) > (2 ** 32) -2) result[6] = 2;\r\n\t    if(bcontract.currentNodes(r,50 ether)) result[7] = 1;\r\n\t    if(bcontract.nodeIDIndex(r,50 ether) > (2 ** 32) -2) result[7] = 2;\r\n\t    if( (bcontract.nodeIDIndex(r,1 ether) > 1 \r\n\t        || (bcontract.nodeIDIndex(r,1 ether) == 1 && !bcontract.currentNodes(r,1 ether))\r\n\t        ) &&\r\n\t        (bcontract.nodeIDIndex(r,2 ether) > 1 \r\n\t        || (bcontract.nodeIDIndex(r,2 ether) == 1 && !bcontract.currentNodes(r,2 ether))\r\n\t        ) &&\r\n\t        (bcontract.nodeIDIndex(r,3 ether) > 1 \r\n\t        || (bcontract.nodeIDIndex(r,3 ether) == 1 && !bcontract.currentNodes(r,3 ether))\r\n\t        ) &&\r\n\t        (bcontract.nodeIDIndex(r,2 ether) > 1 \r\n\t        || (bcontract.nodeIDIndex(r,5 ether) == 1 && !bcontract.currentNodes(r,5 ether))\r\n\t        )\r\n\t        ) result[8] = 1;\r\n\t    return(result[0],result[1],result[2],result[3],result[4],result[5],\r\n\t    result[6],result[7],result[8]);\r\n\t}\r\n\tfunction getLastTree(address r, uint t) public view returns(address[7] memory, address[7] memory){\r\n\t    address[7] memory latestTree;\r\n\t    address[7] memory lastCompletedTree;\r\n\t    if(bcontract.nodeIDIndex(r,t) >0 && bcontract.nodeIDIndex(r,t) <= (2 ** 32) -2 \r\n\t        && bcontract.currentNodes(r,t)){\r\n\t        uint cc=bcontract.nodeIDIndex(r,t) - 1;\r\n    \t\tlatestTree = getTree(r,t,cc);\r\n    \t\tif(bcontract.nodeIDIndex(r,t) > 1){\r\n    \t\t    lastCompletedTree = getTree(r,t,cc-1);\r\n    \t\t}\r\n    \t\treturn (latestTree,lastCompletedTree);\r\n\t    } \r\n\t\tif(bcontract.nodeIDIndex(r,t) >0 && bcontract.nodeIDIndex(r,t) <= (2 ** 32) -2 \r\n\t\t    && !bcontract.currentNodes(r,t)){\r\n\t\t    uint cc=bcontract.nodeIDIndex(r,t) - 1;\r\n    \t\tlastCompletedTree = getTree(r,t,cc);\r\n    \t\treturn (latestTree,lastCompletedTree);\r\n\t\t}\r\n\t\tif(bcontract.nodeIDIndex(r,t) > (2 ** 32) -2){\r\n\t\t    for(uint cc=0;cc < (2 ** 32) -2;cc++){\r\n\t\t        latestTree = getTree(r,t,cc);\r\n\t\t        if(latestTree[0] == address(0)) break;\r\n\t\t        else lastCompletedTree = getTree(r,t,cc);\r\n\t\t    }\r\n\t\t}\r\n\t\treturn (latestTree,lastCompletedTree);\r\n\t}\r\n\t\r\n\tfunction getTree(address r, uint t, uint cc) public view returns(address[7] memory){\r\n\t\taddress[7] memory Adds;\r\n\t\tif(bcontract.nodeIDIndex(r,t) <= cc) return Adds;\r\n\t\t(,uint pp,) = bcontract.treeChildren(r,t,cc,0);\r\n\t\t//if (pp!=0 || bcontract.nodeIDIndex(r,t) == (cc+1) ) Adds[0]=r;\r\n\t\tif (pp!=0 || bcontract.nodeIDIndex(r,t) == (cc+1) ){\r\n\t\t  (address parent,,)=bcontract.treeParent(r,t,cc);\r\n\t\t  Adds[0] = parent;\r\n\t\t} \r\n\t\telse return Adds;\r\n\t\tuint8 spread = uint8(bcontract.spread());\r\n\t\tfor (uint8 i=0; i < spread; i++) {\r\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\r\n\t\t\tif(p != 0){\r\n\t\t\t\tAdds[i+1]=k;\r\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\r\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \r\n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Adds;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"},{\"name\":\"cc\",\"type\":\"uint256\"}],\"name\":\"getTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getLastTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"},{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"readFiftyContract","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d556ec3ce6e1ba7822831f98cbc9284fb0d2a6fd570dc115ea617faa819ef78a"}]}