{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n\r\n// @title Abstract ERC20 token interface\r\ninterface IERC20 {\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction transfer(address to, uint256 value) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\tfunction approve(address spender, uint256 value) external returns (bool success);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n\t* reverts when dividing by zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\t/**\r\n\t* @dev Total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t * @param owner address The address which owns the funds.\r\n\t * @param spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(\r\n\t\taddress owner,\r\n\t\taddress spender\r\n\t )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _allowed[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified address\r\n\t* @param to The address to transfer to.\r\n\t* @param value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address to, uint256 value) public returns (bool) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = value;\r\n\t\temit Approval(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param from address The address which you want to send tokens from\r\n\t * @param to address The address which you want to transfer to\r\n\t * @param value uint256 the amount of tokens to be transferred\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(value <= _allowed[from][msg.sender]);\r\n\r\n\t\t_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\t\t_transfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t * approve should be called when allowed_[_spender] == 0. To increment\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param addedValue The amount of tokens to increase the allowance by.\r\n\t */\r\n\tfunction increaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 addedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = (\r\n\t\t\t_allowed[msg.sender][spender].add(addedValue));\r\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t * approve should be called when allowed_[_spender] == 0. To decrement\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n\t */\r\n\tfunction decreaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 subtractedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = (\r\n\t\t\t_allowed[msg.sender][spender].sub(subtractedValue));\r\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified addresses\r\n\t* @param from The address to transfer from.\r\n\t* @param to The address to transfer to.\r\n\t* @param value The amount to be transferred.\r\n\t*/\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n\t\trequire(value <= _balances[from]);\r\n\t\trequire(to != address(0));\r\n\r\n\t\t_balances[from] = _balances[from].sub(value);\r\n\t\t_balances[to] = _balances[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that mints an amount of the token and assigns it to\r\n\t * an account. This encapsulates the modification of balances such that the\r\n\t * proper events are emitted.\r\n\t * @param account The account that will receive the created tokens.\r\n\t * @param value The amount that will be created.\r\n\t */\r\n\tfunction _mint(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\t\t_totalSupply = _totalSupply.add(value);\r\n\t\t_balances[account] = _balances[account].add(value);\r\n\t\temit Transfer(address(0), account, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that burns an amount of the token of a given\r\n\t * account.\r\n\t * @param account The account whose tokens will be burnt.\r\n\t * @param value The amount that will be burnt.\r\n\t */\r\n\tfunction _burn(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\t\trequire(value <= _balances[account]);\r\n\r\n\t\t_totalSupply = _totalSupply.sub(value);\r\n\t\t_balances[account] = _balances[account].sub(value);\r\n\t\temit Transfer(account, address(0), value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that burns an amount of the token of a given\r\n\t * account, deducting from the sender's allowance for said account. Uses the\r\n\t * internal burn function.\r\n\t * @param account The account whose tokens will be burnt.\r\n\t * @param value The amount that will be burnt.\r\n\t */\r\n\tfunction _burnFrom(address account, uint256 value) internal {\r\n\t\trequire(value <= _allowed[account][msg.sender]);\r\n\r\n\t\t// Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n\t\t// this function needs to emit an event with the updated approval.\r\n\t\t_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n\t\t\tvalue);\r\n\t\t_burn(account, value);\r\n\t}\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens.\r\n\t * @param value The amount of token to be burned.\r\n\t */\r\n\tfunction burn(uint256 value) public {\r\n\t\t_burn(msg.sender, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n\t * @param from address The address which you want to send tokens from\r\n\t * @param value uint256 The amount of token to be burned\r\n\t */\r\n\tfunction burnFrom(address from, uint256 value) public {\r\n\t\t_burnFrom(from, value);\r\n\t}\r\n}\r\n\r\ncontract Owned {\r\n\r\n\taddress public owner = msg.sender;\r\n\taddress public potentialOwner;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyPotentialOwner {\r\n\t\trequire(msg.sender == potentialOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent NewOwner(address old, address current);\r\n\tevent NewPotentialOwner(address old, address potential);\r\n\r\n\tfunction setOwner(address _new)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\temit NewPotentialOwner(owner, _new);\r\n\t\tpotentialOwner = _new;\r\n\t}\r\n\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{\r\n\t\temit NewOwner(owner, potentialOwner);\r\n\t\towner = potentialOwner;\r\n\t\tpotentialOwner = address(0);\r\n\t}\r\n}\r\n\r\n/// @title Token contract - Implements Standard ERC20 Token with additional features.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract Token is ERC20Burnable, Owned {\r\n\r\n\t// Time of the contract creation\r\n\tuint256 public creationTime;\r\n\r\n\tconstructor() public {\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tcreationTime = now;\r\n\t}\r\n\r\n\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n\tfunction transferERC20Token(IERC20 _token, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool success)\r\n\t{\r\n\t\trequire(_token.balanceOf(address(this)) >= _value);\r\n\t\tuint256 receiverBalance = _token.balanceOf(_to);\r\n\t\trequire(_token.transfer(_to, _value));\r\n\r\n\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\r\n\t\tassert(receiverNewBalance == receiverBalance + _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract FluenceToken is Token {\r\n\r\n    string constant public name = 'Fluence Presale Token (Test)';\r\n    string constant public symbol = 'FPT-test';\r\n    uint8  constant public decimals = 18;\r\n\r\n    uint256 constant public presaleTokens = 6000000e18;\r\n\r\n    bool public isVestingEnabled = true;\r\n    mapping (address => uint256) public vestedTokens;\r\n\r\n    // The moment when the crowdsale ends. The time of the first payout.\r\n    uint256 checkpoint;\r\n\r\n    address crowdsaleManager;\r\n    address migrationManager;\r\n\r\n    modifier onlyCrowdsaleManager {\r\n        require(msg.sender == crowdsaleManager);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringVestingPeriod {\r\n        require(isVestingEnabled);\r\n        _;\r\n    }\r\n\r\n    function vest(uint256 amount) public onlyDuringVestingPeriod {\r\n        _transfer(msg.sender, address(this), amount);\r\n        vestedTokens[msg.sender] += amount;\r\n    }\r\n\r\n    function unvest(uint256 amount) public {\r\n        require(onVesting(msg.sender) >= amount);\r\n        \r\n        uint256 tokens_to_unvest = (amount * 100) / (100 + _getBonus());\r\n        _transfer(address(this), msg.sender, tokens_to_unvest);\r\n        vestedTokens[msg.sender] -= tokens_to_unvest;\r\n        _mint(msg.sender, amount - tokens_to_unvest);\r\n    }\r\n\r\n    function disableVesting() public onlyCrowdsaleManager {\r\n        isVestingEnabled = false;\r\n    }\r\n\r\n    function payoutFirstBonus() public onlyCrowdsaleManager {\r\n        require(!isVestingEnabled && checkpoint == 0);  // can only be called once\r\n        checkpoint = now;\r\n    }\r\n\r\n    function setCrowdsaleManager(address manager) public onlyOwner {\r\n        crowdsaleManager = manager;\r\n    }\r\n\r\n    function setMigrationManager(address manager) public onlyOwner {\r\n        require(migrationManager == address(0));  // can only be called once\r\n        migrationManager = manager;\r\n        _mint(migrationManager, presaleTokens);\r\n    }\r\n\r\n    function onVesting(address account) public view returns (uint256) {\r\n        return vestedTokens[account] * (100 + _getBonus()) / 100;\r\n    }\r\n\r\n    function _getBonus() internal view returns (uint256) {\r\n        if (checkpoint == 0) {\r\n            return 0;\r\n        }\r\n        uint256 initialBonus = 5;\r\n        uint256 monthsPassed = (now - checkpoint) / (30 minutes);\r\n        uint256 additionalBonus = (monthsPassed > 4 ? 4: monthsPassed) * 5;  // 5% for every 30 days; no more than 20%\r\n        return initialBonus + additionalBonus;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setMigrationManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVestingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"onVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutFirstBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"FluenceToken","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://62a3599fef6122e9dacb60479ef19369d30cc9899c8f5693204190bf06df9c6a"}]}